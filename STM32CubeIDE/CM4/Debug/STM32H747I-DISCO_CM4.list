
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061e4  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0810647c  0810647c  0000747c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081064a0  081064a0  000074a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081064a4  081064a4  000074a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  10000000  081064a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b0  10000014  081064bc  00008014  2**2
                  ALLOC
  7 ._user_heap_stack 00002004  100000c4  081064bc  000080c4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d6a3  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000237e  00000000  00000000  000156e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ca0  00000000  00000000  00017a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000967  00000000  00000000  00018708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003f82c  00000000  00000000  0001906f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001060b  00000000  00000000  0005889b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001939cc  00000000  00000000  00068ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001fc872  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003238  00000000  00000000  001fc8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  001ffaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000014 	.word	0x10000014
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08106464 	.word	0x08106464

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000018 	.word	0x10000018
 81002d4:	08106464 	.word	0x08106464

081002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81002d8:	b580      	push	{r7, lr}
 81002da:	b082      	sub	sp, #8
 81002dc:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81002de:	4b1e      	ldr	r3, [pc, #120]	@ (8100358 <main+0x80>)
 81002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81002e4:	4a1c      	ldr	r2, [pc, #112]	@ (8100358 <main+0x80>)
 81002e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81002ee:	4b1a      	ldr	r3, [pc, #104]	@ (8100358 <main+0x80>)
 81002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81002f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81002f8:	607b      	str	r3, [r7, #4]
 81002fa:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81002fc:	2001      	movs	r0, #1
 81002fe:	f000 ff13 	bl	8101128 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100302:	f000 ff9d 	bl	8101240 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100306:	2201      	movs	r2, #1
 8100308:	2102      	movs	r1, #2
 810030a:	2000      	movs	r0, #0
 810030c:	f000 ff1e 	bl	810114c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100310:	4b12      	ldr	r3, [pc, #72]	@ (810035c <main+0x84>)
 8100312:	681b      	ldr	r3, [r3, #0]
 8100314:	091b      	lsrs	r3, r3, #4
 8100316:	f003 030f 	and.w	r3, r3, #15
 810031a:	2b07      	cmp	r3, #7
 810031c:	d108      	bne.n	8100330 <main+0x58>
 810031e:	4b10      	ldr	r3, [pc, #64]	@ (8100360 <main+0x88>)
 8100320:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100324:	4a0e      	ldr	r2, [pc, #56]	@ (8100360 <main+0x88>)
 8100326:	f043 0301 	orr.w	r3, r3, #1
 810032a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810032e:	e007      	b.n	8100340 <main+0x68>
 8100330:	4b0b      	ldr	r3, [pc, #44]	@ (8100360 <main+0x88>)
 8100332:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100336:	4a0a      	ldr	r2, [pc, #40]	@ (8100360 <main+0x88>)
 8100338:	f043 0301 	orr.w	r3, r3, #1
 810033c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100340:	f000 fb58 	bl	81009f4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 8100344:	f000 f832 	bl	81003ac <MX_MDMA_Init>
  MX_GPIO_Init();
 8100348:	f000 f84a 	bl	81003e0 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 810034c:	f000 f80a 	bl	8100364 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8100350:	f000 f986 	bl	8100660 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100354:	bf00      	nop
 8100356:	e7fd      	b.n	8100354 <main+0x7c>
 8100358:	58024400 	.word	0x58024400
 810035c:	e000ed00 	.word	0xe000ed00
 8100360:	58026400 	.word	0x58026400

08100364 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8100364:	b580      	push	{r7, lr}
 8100366:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8100368:	4b0e      	ldr	r3, [pc, #56]	@ (81003a4 <MX_SDMMC1_SD_Init+0x40>)
 810036a:	4a0f      	ldr	r2, [pc, #60]	@ (81003a8 <MX_SDMMC1_SD_Init+0x44>)
 810036c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 810036e:	4b0d      	ldr	r3, [pc, #52]	@ (81003a4 <MX_SDMMC1_SD_Init+0x40>)
 8100370:	2200      	movs	r2, #0
 8100372:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100374:	4b0b      	ldr	r3, [pc, #44]	@ (81003a4 <MX_SDMMC1_SD_Init+0x40>)
 8100376:	2200      	movs	r2, #0
 8100378:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 810037a:	4b0a      	ldr	r3, [pc, #40]	@ (81003a4 <MX_SDMMC1_SD_Init+0x40>)
 810037c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8100380:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100382:	4b08      	ldr	r3, [pc, #32]	@ (81003a4 <MX_SDMMC1_SD_Init+0x40>)
 8100384:	2200      	movs	r2, #0
 8100386:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8100388:	4b06      	ldr	r3, [pc, #24]	@ (81003a4 <MX_SDMMC1_SD_Init+0x40>)
 810038a:	2200      	movs	r2, #0
 810038c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 810038e:	4805      	ldr	r0, [pc, #20]	@ (81003a4 <MX_SDMMC1_SD_Init+0x40>)
 8100390:	f003 fe64 	bl	810405c <HAL_SD_Init>
 8100394:	4603      	mov	r3, r0
 8100396:	2b00      	cmp	r3, #0
 8100398:	d001      	beq.n	810039e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 810039a:	f000 f883 	bl	81004a4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 810039e:	bf00      	nop
 81003a0:	bd80      	pop	{r7, pc}
 81003a2:	bf00      	nop
 81003a4:	10000030 	.word	0x10000030
 81003a8:	52007000 	.word	0x52007000

081003ac <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 81003ac:	b480      	push	{r7}
 81003ae:	b083      	sub	sp, #12
 81003b0:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 81003b2:	4b0a      	ldr	r3, [pc, #40]	@ (81003dc <MX_MDMA_Init+0x30>)
 81003b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81003b8:	4a08      	ldr	r2, [pc, #32]	@ (81003dc <MX_MDMA_Init+0x30>)
 81003ba:	f043 0301 	orr.w	r3, r3, #1
 81003be:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 81003c2:	4b06      	ldr	r3, [pc, #24]	@ (81003dc <MX_MDMA_Init+0x30>)
 81003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81003c8:	f003 0301 	and.w	r3, r3, #1
 81003cc:	607b      	str	r3, [r7, #4]
 81003ce:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 81003d0:	bf00      	nop
 81003d2:	370c      	adds	r7, #12
 81003d4:	46bd      	mov	sp, r7
 81003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003da:	4770      	bx	lr
 81003dc:	58024400 	.word	0x58024400

081003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81003e0:	b580      	push	{r7, lr}
 81003e2:	b088      	sub	sp, #32
 81003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81003e6:	f107 030c 	add.w	r3, r7, #12
 81003ea:	2200      	movs	r2, #0
 81003ec:	601a      	str	r2, [r3, #0]
 81003ee:	605a      	str	r2, [r3, #4]
 81003f0:	609a      	str	r2, [r3, #8]
 81003f2:	60da      	str	r2, [r3, #12]
 81003f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81003f6:	4b29      	ldr	r3, [pc, #164]	@ (810049c <MX_GPIO_Init+0xbc>)
 81003f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003fc:	4a27      	ldr	r2, [pc, #156]	@ (810049c <MX_GPIO_Init+0xbc>)
 81003fe:	f043 0304 	orr.w	r3, r3, #4
 8100402:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100406:	4b25      	ldr	r3, [pc, #148]	@ (810049c <MX_GPIO_Init+0xbc>)
 8100408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810040c:	f003 0304 	and.w	r3, r3, #4
 8100410:	60bb      	str	r3, [r7, #8]
 8100412:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100414:	4b21      	ldr	r3, [pc, #132]	@ (810049c <MX_GPIO_Init+0xbc>)
 8100416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810041a:	4a20      	ldr	r2, [pc, #128]	@ (810049c <MX_GPIO_Init+0xbc>)
 810041c:	f043 0308 	orr.w	r3, r3, #8
 8100420:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100424:	4b1d      	ldr	r3, [pc, #116]	@ (810049c <MX_GPIO_Init+0xbc>)
 8100426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810042a:	f003 0308 	and.w	r3, r3, #8
 810042e:	607b      	str	r3, [r7, #4]
 8100430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100432:	4b1a      	ldr	r3, [pc, #104]	@ (810049c <MX_GPIO_Init+0xbc>)
 8100434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100438:	4a18      	ldr	r2, [pc, #96]	@ (810049c <MX_GPIO_Init+0xbc>)
 810043a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810043e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100442:	4b16      	ldr	r3, [pc, #88]	@ (810049c <MX_GPIO_Init+0xbc>)
 8100444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810044c:	603b      	str	r3, [r7, #0]
 810044e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_4_GPIO_Port, led_4_Pin, GPIO_PIN_SET);
 8100450:	2201      	movs	r2, #1
 8100452:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8100456:	4812      	ldr	r0, [pc, #72]	@ (81004a0 <MX_GPIO_Init+0xc0>)
 8100458:	f000 fe4c 	bl	81010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 810045c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8100460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100462:	2300      	movs	r3, #0
 8100464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100466:	2301      	movs	r3, #1
 8100468:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 810046a:	f107 030c 	add.w	r3, r7, #12
 810046e:	4619      	mov	r1, r3
 8100470:	480b      	ldr	r0, [pc, #44]	@ (81004a0 <MX_GPIO_Init+0xc0>)
 8100472:	f000 fc8f 	bl	8100d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_4_Pin */
  GPIO_InitStruct.Pin = led_4_Pin;
 8100476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810047a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810047c:	2301      	movs	r3, #1
 810047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100480:	2301      	movs	r3, #1
 8100482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100484:	2300      	movs	r3, #0
 8100486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_4_GPIO_Port, &GPIO_InitStruct);
 8100488:	f107 030c 	add.w	r3, r7, #12
 810048c:	4619      	mov	r1, r3
 810048e:	4804      	ldr	r0, [pc, #16]	@ (81004a0 <MX_GPIO_Init+0xc0>)
 8100490:	f000 fc80 	bl	8100d94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100494:	bf00      	nop
 8100496:	3720      	adds	r7, #32
 8100498:	46bd      	mov	sp, r7
 810049a:	bd80      	pop	{r7, pc}
 810049c:	58024400 	.word	0x58024400
 81004a0:	58022000 	.word	0x58022000

081004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81004a4:	b480      	push	{r7}
 81004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81004a8:	b672      	cpsid	i
}
 81004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81004ac:	bf00      	nop
 81004ae:	e7fd      	b.n	81004ac <Error_Handler+0x8>

081004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81004b0:	b480      	push	{r7}
 81004b2:	b083      	sub	sp, #12
 81004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81004b6:	4b0a      	ldr	r3, [pc, #40]	@ (81004e0 <HAL_MspInit+0x30>)
 81004b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81004bc:	4a08      	ldr	r2, [pc, #32]	@ (81004e0 <HAL_MspInit+0x30>)
 81004be:	f043 0302 	orr.w	r3, r3, #2
 81004c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81004c6:	4b06      	ldr	r3, [pc, #24]	@ (81004e0 <HAL_MspInit+0x30>)
 81004c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81004cc:	f003 0302 	and.w	r3, r3, #2
 81004d0:	607b      	str	r3, [r7, #4]
 81004d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81004d4:	bf00      	nop
 81004d6:	370c      	adds	r7, #12
 81004d8:	46bd      	mov	sp, r7
 81004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004de:	4770      	bx	lr
 81004e0:	58024400 	.word	0x58024400

081004e4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 81004e4:	b580      	push	{r7, lr}
 81004e6:	b0be      	sub	sp, #248	@ 0xf8
 81004e8:	af00      	add	r7, sp, #0
 81004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81004ec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81004f0:	2200      	movs	r2, #0
 81004f2:	601a      	str	r2, [r3, #0]
 81004f4:	605a      	str	r2, [r3, #4]
 81004f6:	609a      	str	r2, [r3, #8]
 81004f8:	60da      	str	r2, [r3, #12]
 81004fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81004fc:	f107 0318 	add.w	r3, r7, #24
 8100500:	22c8      	movs	r2, #200	@ 0xc8
 8100502:	2100      	movs	r1, #0
 8100504:	4618      	mov	r0, r3
 8100506:	f005 ff80 	bl	810640a <memset>
  if(hsd->Instance==SDMMC1)
 810050a:	687b      	ldr	r3, [r7, #4]
 810050c:	681b      	ldr	r3, [r3, #0]
 810050e:	4a38      	ldr	r2, [pc, #224]	@ (81005f0 <HAL_SD_MspInit+0x10c>)
 8100510:	4293      	cmp	r3, r2
 8100512:	d169      	bne.n	81005e8 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8100514:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8100518:	f04f 0300 	mov.w	r3, #0
 810051c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8100520:	2300      	movs	r3, #0
 8100522:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100524:	f107 0318 	add.w	r3, r7, #24
 8100528:	4618      	mov	r0, r3
 810052a:	f001 f859 	bl	81015e0 <HAL_RCCEx_PeriphCLKConfig>
 810052e:	4603      	mov	r3, r0
 8100530:	2b00      	cmp	r3, #0
 8100532:	d001      	beq.n	8100538 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8100534:	f7ff ffb6 	bl	81004a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8100538:	4b2e      	ldr	r3, [pc, #184]	@ (81005f4 <HAL_SD_MspInit+0x110>)
 810053a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810053e:	4a2d      	ldr	r2, [pc, #180]	@ (81005f4 <HAL_SD_MspInit+0x110>)
 8100540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8100544:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100548:	4b2a      	ldr	r3, [pc, #168]	@ (81005f4 <HAL_SD_MspInit+0x110>)
 810054a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810054e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8100552:	617b      	str	r3, [r7, #20]
 8100554:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100556:	4b27      	ldr	r3, [pc, #156]	@ (81005f4 <HAL_SD_MspInit+0x110>)
 8100558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810055c:	4a25      	ldr	r2, [pc, #148]	@ (81005f4 <HAL_SD_MspInit+0x110>)
 810055e:	f043 0304 	orr.w	r3, r3, #4
 8100562:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100566:	4b23      	ldr	r3, [pc, #140]	@ (81005f4 <HAL_SD_MspInit+0x110>)
 8100568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810056c:	f003 0304 	and.w	r3, r3, #4
 8100570:	613b      	str	r3, [r7, #16]
 8100572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100574:	4b1f      	ldr	r3, [pc, #124]	@ (81005f4 <HAL_SD_MspInit+0x110>)
 8100576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810057a:	4a1e      	ldr	r2, [pc, #120]	@ (81005f4 <HAL_SD_MspInit+0x110>)
 810057c:	f043 0308 	orr.w	r3, r3, #8
 8100580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100584:	4b1b      	ldr	r3, [pc, #108]	@ (81005f4 <HAL_SD_MspInit+0x110>)
 8100586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810058a:	f003 0308 	and.w	r3, r3, #8
 810058e:	60fb      	str	r3, [r7, #12]
 8100590:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8100592:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8100596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810059a:	2302      	movs	r3, #2
 810059c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81005a0:	2300      	movs	r3, #0
 81005a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81005a6:	2303      	movs	r3, #3
 81005a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81005ac:	230c      	movs	r3, #12
 81005ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81005b2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81005b6:	4619      	mov	r1, r3
 81005b8:	480f      	ldr	r0, [pc, #60]	@ (81005f8 <HAL_SD_MspInit+0x114>)
 81005ba:	f000 fbeb 	bl	8100d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 81005be:	2304      	movs	r3, #4
 81005c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81005c4:	2302      	movs	r3, #2
 81005c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81005ca:	2300      	movs	r3, #0
 81005cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81005d0:	2303      	movs	r3, #3
 81005d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81005d6:	230c      	movs	r3, #12
 81005d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81005dc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81005e0:	4619      	mov	r1, r3
 81005e2:	4806      	ldr	r0, [pc, #24]	@ (81005fc <HAL_SD_MspInit+0x118>)
 81005e4:	f000 fbd6 	bl	8100d94 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 81005e8:	bf00      	nop
 81005ea:	37f8      	adds	r7, #248	@ 0xf8
 81005ec:	46bd      	mov	sp, r7
 81005ee:	bd80      	pop	{r7, pc}
 81005f0:	52007000 	.word	0x52007000
 81005f4:	58024400 	.word	0x58024400
 81005f8:	58020800 	.word	0x58020800
 81005fc:	58020c00 	.word	0x58020c00

08100600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100600:	b480      	push	{r7}
 8100602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100604:	bf00      	nop
 8100606:	e7fd      	b.n	8100604 <NMI_Handler+0x4>

08100608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100608:	b480      	push	{r7}
 810060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810060c:	bf00      	nop
 810060e:	e7fd      	b.n	810060c <HardFault_Handler+0x4>

08100610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100610:	b480      	push	{r7}
 8100612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100614:	bf00      	nop
 8100616:	e7fd      	b.n	8100614 <MemManage_Handler+0x4>

08100618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100618:	b480      	push	{r7}
 810061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810061c:	bf00      	nop
 810061e:	e7fd      	b.n	810061c <BusFault_Handler+0x4>

08100620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100620:	b480      	push	{r7}
 8100622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100624:	bf00      	nop
 8100626:	e7fd      	b.n	8100624 <UsageFault_Handler+0x4>

08100628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100628:	b480      	push	{r7}
 810062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810062c:	bf00      	nop
 810062e:	46bd      	mov	sp, r7
 8100630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100634:	4770      	bx	lr

08100636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100636:	b480      	push	{r7}
 8100638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810063a:	bf00      	nop
 810063c:	46bd      	mov	sp, r7
 810063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100642:	4770      	bx	lr

08100644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100644:	b480      	push	{r7}
 8100646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100648:	bf00      	nop
 810064a:	46bd      	mov	sp, r7
 810064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100650:	4770      	bx	lr

08100652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100652:	b580      	push	{r7, lr}
 8100654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100656:	f000 fa61 	bl	8100b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810065a:	bf00      	nop
 810065c:	bd80      	pop	{r7, pc}
	...

08100660 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8100660:	b580      	push	{r7, lr}
 8100662:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8100664:	4904      	ldr	r1, [pc, #16]	@ (8100678 <MX_FATFS_Init+0x18>)
 8100666:	4805      	ldr	r0, [pc, #20]	@ (810067c <MX_FATFS_Init+0x1c>)
 8100668:	f005 fec0 	bl	81063ec <FATFS_LinkDriver>
 810066c:	4603      	mov	r3, r0
 810066e:	461a      	mov	r2, r3
 8100670:	4b03      	ldr	r3, [pc, #12]	@ (8100680 <MX_FATFS_Init+0x20>)
 8100672:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8100674:	bf00      	nop
 8100676:	bd80      	pop	{r7, pc}
 8100678:	100000b0 	.word	0x100000b0
 810067c:	0810647c 	.word	0x0810647c
 8100680:	100000ac 	.word	0x100000ac

08100684 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8100684:	b580      	push	{r7, lr}
 8100686:	b082      	sub	sp, #8
 8100688:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 810068a:	2300      	movs	r3, #0
 810068c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 810068e:	f000 f879 	bl	8100784 <BSP_SD_IsDetected>
 8100692:	4603      	mov	r3, r0
 8100694:	2b01      	cmp	r3, #1
 8100696:	d001      	beq.n	810069c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8100698:	2302      	movs	r3, #2
 810069a:	e012      	b.n	81006c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 810069c:	480b      	ldr	r0, [pc, #44]	@ (81006cc <BSP_SD_Init+0x48>)
 810069e:	f003 fcdd 	bl	810405c <HAL_SD_Init>
 81006a2:	4603      	mov	r3, r0
 81006a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 81006a6:	79fb      	ldrb	r3, [r7, #7]
 81006a8:	2b00      	cmp	r3, #0
 81006aa:	d109      	bne.n	81006c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 81006ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 81006b0:	4806      	ldr	r0, [pc, #24]	@ (81006cc <BSP_SD_Init+0x48>)
 81006b2:	f004 fb99 	bl	8104de8 <HAL_SD_ConfigWideBusOperation>
 81006b6:	4603      	mov	r3, r0
 81006b8:	2b00      	cmp	r3, #0
 81006ba:	d001      	beq.n	81006c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 81006bc:	2301      	movs	r3, #1
 81006be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 81006c0:	79fb      	ldrb	r3, [r7, #7]
}
 81006c2:	4618      	mov	r0, r3
 81006c4:	3708      	adds	r7, #8
 81006c6:	46bd      	mov	sp, r7
 81006c8:	bd80      	pop	{r7, pc}
 81006ca:	bf00      	nop
 81006cc:	10000030 	.word	0x10000030

081006d0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 81006d0:	b580      	push	{r7, lr}
 81006d2:	b088      	sub	sp, #32
 81006d4:	af02      	add	r7, sp, #8
 81006d6:	60f8      	str	r0, [r7, #12]
 81006d8:	60b9      	str	r1, [r7, #8]
 81006da:	607a      	str	r2, [r7, #4]
 81006dc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 81006de:	2300      	movs	r3, #0
 81006e0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 81006e2:	683b      	ldr	r3, [r7, #0]
 81006e4:	9300      	str	r3, [sp, #0]
 81006e6:	687b      	ldr	r3, [r7, #4]
 81006e8:	68ba      	ldr	r2, [r7, #8]
 81006ea:	68f9      	ldr	r1, [r7, #12]
 81006ec:	4806      	ldr	r0, [pc, #24]	@ (8100708 <BSP_SD_ReadBlocks+0x38>)
 81006ee:	f003 fdd5 	bl	810429c <HAL_SD_ReadBlocks>
 81006f2:	4603      	mov	r3, r0
 81006f4:	2b00      	cmp	r3, #0
 81006f6:	d001      	beq.n	81006fc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 81006f8:	2301      	movs	r3, #1
 81006fa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 81006fc:	7dfb      	ldrb	r3, [r7, #23]
}
 81006fe:	4618      	mov	r0, r3
 8100700:	3718      	adds	r7, #24
 8100702:	46bd      	mov	sp, r7
 8100704:	bd80      	pop	{r7, pc}
 8100706:	bf00      	nop
 8100708:	10000030 	.word	0x10000030

0810070c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 810070c:	b580      	push	{r7, lr}
 810070e:	b088      	sub	sp, #32
 8100710:	af02      	add	r7, sp, #8
 8100712:	60f8      	str	r0, [r7, #12]
 8100714:	60b9      	str	r1, [r7, #8]
 8100716:	607a      	str	r2, [r7, #4]
 8100718:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 810071a:	2300      	movs	r3, #0
 810071c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 810071e:	683b      	ldr	r3, [r7, #0]
 8100720:	9300      	str	r3, [sp, #0]
 8100722:	687b      	ldr	r3, [r7, #4]
 8100724:	68ba      	ldr	r2, [r7, #8]
 8100726:	68f9      	ldr	r1, [r7, #12]
 8100728:	4806      	ldr	r0, [pc, #24]	@ (8100744 <BSP_SD_WriteBlocks+0x38>)
 810072a:	f003 ff41 	bl	81045b0 <HAL_SD_WriteBlocks>
 810072e:	4603      	mov	r3, r0
 8100730:	2b00      	cmp	r3, #0
 8100732:	d001      	beq.n	8100738 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8100734:	2301      	movs	r3, #1
 8100736:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8100738:	7dfb      	ldrb	r3, [r7, #23]
}
 810073a:	4618      	mov	r0, r3
 810073c:	3718      	adds	r7, #24
 810073e:	46bd      	mov	sp, r7
 8100740:	bd80      	pop	{r7, pc}
 8100742:	bf00      	nop
 8100744:	10000030 	.word	0x10000030

08100748 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8100748:	b580      	push	{r7, lr}
 810074a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 810074c:	4805      	ldr	r0, [pc, #20]	@ (8100764 <BSP_SD_GetCardState+0x1c>)
 810074e:	f004 fc5d 	bl	810500c <HAL_SD_GetCardState>
 8100752:	4603      	mov	r3, r0
 8100754:	2b04      	cmp	r3, #4
 8100756:	bf14      	ite	ne
 8100758:	2301      	movne	r3, #1
 810075a:	2300      	moveq	r3, #0
 810075c:	b2db      	uxtb	r3, r3
}
 810075e:	4618      	mov	r0, r3
 8100760:	bd80      	pop	{r7, pc}
 8100762:	bf00      	nop
 8100764:	10000030 	.word	0x10000030

08100768 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8100768:	b580      	push	{r7, lr}
 810076a:	b082      	sub	sp, #8
 810076c:	af00      	add	r7, sp, #0
 810076e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8100770:	6879      	ldr	r1, [r7, #4]
 8100772:	4803      	ldr	r0, [pc, #12]	@ (8100780 <BSP_SD_GetCardInfo+0x18>)
 8100774:	f004 fb0c 	bl	8104d90 <HAL_SD_GetCardInfo>
}
 8100778:	bf00      	nop
 810077a:	3708      	adds	r7, #8
 810077c:	46bd      	mov	sp, r7
 810077e:	bd80      	pop	{r7, pc}
 8100780:	10000030 	.word	0x10000030

08100784 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8100784:	b480      	push	{r7}
 8100786:	b083      	sub	sp, #12
 8100788:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 810078a:	2301      	movs	r3, #1
 810078c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 810078e:	79fb      	ldrb	r3, [r7, #7]
 8100790:	b2db      	uxtb	r3, r3
}
 8100792:	4618      	mov	r0, r3
 8100794:	370c      	adds	r7, #12
 8100796:	46bd      	mov	sp, r7
 8100798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810079c:	4770      	bx	lr
	...

081007a0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 81007a0:	b580      	push	{r7, lr}
 81007a2:	b082      	sub	sp, #8
 81007a4:	af00      	add	r7, sp, #0
 81007a6:	4603      	mov	r3, r0
 81007a8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 81007aa:	4b0b      	ldr	r3, [pc, #44]	@ (81007d8 <SD_CheckStatus+0x38>)
 81007ac:	2201      	movs	r2, #1
 81007ae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 81007b0:	f7ff ffca 	bl	8100748 <BSP_SD_GetCardState>
 81007b4:	4603      	mov	r3, r0
 81007b6:	2b00      	cmp	r3, #0
 81007b8:	d107      	bne.n	81007ca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 81007ba:	4b07      	ldr	r3, [pc, #28]	@ (81007d8 <SD_CheckStatus+0x38>)
 81007bc:	781b      	ldrb	r3, [r3, #0]
 81007be:	b2db      	uxtb	r3, r3
 81007c0:	f023 0301 	bic.w	r3, r3, #1
 81007c4:	b2da      	uxtb	r2, r3
 81007c6:	4b04      	ldr	r3, [pc, #16]	@ (81007d8 <SD_CheckStatus+0x38>)
 81007c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 81007ca:	4b03      	ldr	r3, [pc, #12]	@ (81007d8 <SD_CheckStatus+0x38>)
 81007cc:	781b      	ldrb	r3, [r3, #0]
 81007ce:	b2db      	uxtb	r3, r3
}
 81007d0:	4618      	mov	r0, r3
 81007d2:	3708      	adds	r7, #8
 81007d4:	46bd      	mov	sp, r7
 81007d6:	bd80      	pop	{r7, pc}
 81007d8:	10000000 	.word	0x10000000

081007dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 81007dc:	b580      	push	{r7, lr}
 81007de:	b082      	sub	sp, #8
 81007e0:	af00      	add	r7, sp, #0
 81007e2:	4603      	mov	r3, r0
 81007e4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 81007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8100814 <SD_initialize+0x38>)
 81007e8:	2201      	movs	r2, #1
 81007ea:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 81007ec:	f7ff ff4a 	bl	8100684 <BSP_SD_Init>
 81007f0:	4603      	mov	r3, r0
 81007f2:	2b00      	cmp	r3, #0
 81007f4:	d107      	bne.n	8100806 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 81007f6:	79fb      	ldrb	r3, [r7, #7]
 81007f8:	4618      	mov	r0, r3
 81007fa:	f7ff ffd1 	bl	81007a0 <SD_CheckStatus>
 81007fe:	4603      	mov	r3, r0
 8100800:	461a      	mov	r2, r3
 8100802:	4b04      	ldr	r3, [pc, #16]	@ (8100814 <SD_initialize+0x38>)
 8100804:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8100806:	4b03      	ldr	r3, [pc, #12]	@ (8100814 <SD_initialize+0x38>)
 8100808:	781b      	ldrb	r3, [r3, #0]
 810080a:	b2db      	uxtb	r3, r3
}
 810080c:	4618      	mov	r0, r3
 810080e:	3708      	adds	r7, #8
 8100810:	46bd      	mov	sp, r7
 8100812:	bd80      	pop	{r7, pc}
 8100814:	10000000 	.word	0x10000000

08100818 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8100818:	b580      	push	{r7, lr}
 810081a:	b082      	sub	sp, #8
 810081c:	af00      	add	r7, sp, #0
 810081e:	4603      	mov	r3, r0
 8100820:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8100822:	79fb      	ldrb	r3, [r7, #7]
 8100824:	4618      	mov	r0, r3
 8100826:	f7ff ffbb 	bl	81007a0 <SD_CheckStatus>
 810082a:	4603      	mov	r3, r0
}
 810082c:	4618      	mov	r0, r3
 810082e:	3708      	adds	r7, #8
 8100830:	46bd      	mov	sp, r7
 8100832:	bd80      	pop	{r7, pc}

08100834 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8100834:	b580      	push	{r7, lr}
 8100836:	b086      	sub	sp, #24
 8100838:	af00      	add	r7, sp, #0
 810083a:	60b9      	str	r1, [r7, #8]
 810083c:	607a      	str	r2, [r7, #4]
 810083e:	603b      	str	r3, [r7, #0]
 8100840:	4603      	mov	r3, r0
 8100842:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8100844:	2301      	movs	r3, #1
 8100846:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8100848:	f04f 33ff 	mov.w	r3, #4294967295
 810084c:	683a      	ldr	r2, [r7, #0]
 810084e:	6879      	ldr	r1, [r7, #4]
 8100850:	68b8      	ldr	r0, [r7, #8]
 8100852:	f7ff ff3d 	bl	81006d0 <BSP_SD_ReadBlocks>
 8100856:	4603      	mov	r3, r0
 8100858:	2b00      	cmp	r3, #0
 810085a:	d107      	bne.n	810086c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 810085c:	bf00      	nop
 810085e:	f7ff ff73 	bl	8100748 <BSP_SD_GetCardState>
 8100862:	4603      	mov	r3, r0
 8100864:	2b00      	cmp	r3, #0
 8100866:	d1fa      	bne.n	810085e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8100868:	2300      	movs	r3, #0
 810086a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 810086c:	7dfb      	ldrb	r3, [r7, #23]
}
 810086e:	4618      	mov	r0, r3
 8100870:	3718      	adds	r7, #24
 8100872:	46bd      	mov	sp, r7
 8100874:	bd80      	pop	{r7, pc}

08100876 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8100876:	b580      	push	{r7, lr}
 8100878:	b086      	sub	sp, #24
 810087a:	af00      	add	r7, sp, #0
 810087c:	60b9      	str	r1, [r7, #8]
 810087e:	607a      	str	r2, [r7, #4]
 8100880:	603b      	str	r3, [r7, #0]
 8100882:	4603      	mov	r3, r0
 8100884:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8100886:	2301      	movs	r3, #1
 8100888:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 810088a:	f04f 33ff 	mov.w	r3, #4294967295
 810088e:	683a      	ldr	r2, [r7, #0]
 8100890:	6879      	ldr	r1, [r7, #4]
 8100892:	68b8      	ldr	r0, [r7, #8]
 8100894:	f7ff ff3a 	bl	810070c <BSP_SD_WriteBlocks>
 8100898:	4603      	mov	r3, r0
 810089a:	2b00      	cmp	r3, #0
 810089c:	d107      	bne.n	81008ae <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 810089e:	bf00      	nop
 81008a0:	f7ff ff52 	bl	8100748 <BSP_SD_GetCardState>
 81008a4:	4603      	mov	r3, r0
 81008a6:	2b00      	cmp	r3, #0
 81008a8:	d1fa      	bne.n	81008a0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 81008aa:	2300      	movs	r3, #0
 81008ac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 81008ae:	7dfb      	ldrb	r3, [r7, #23]
}
 81008b0:	4618      	mov	r0, r3
 81008b2:	3718      	adds	r7, #24
 81008b4:	46bd      	mov	sp, r7
 81008b6:	bd80      	pop	{r7, pc}

081008b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 81008b8:	b580      	push	{r7, lr}
 81008ba:	b08c      	sub	sp, #48	@ 0x30
 81008bc:	af00      	add	r7, sp, #0
 81008be:	4603      	mov	r3, r0
 81008c0:	603a      	str	r2, [r7, #0]
 81008c2:	71fb      	strb	r3, [r7, #7]
 81008c4:	460b      	mov	r3, r1
 81008c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 81008c8:	2301      	movs	r3, #1
 81008ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 81008ce:	4b25      	ldr	r3, [pc, #148]	@ (8100964 <SD_ioctl+0xac>)
 81008d0:	781b      	ldrb	r3, [r3, #0]
 81008d2:	b2db      	uxtb	r3, r3
 81008d4:	f003 0301 	and.w	r3, r3, #1
 81008d8:	2b00      	cmp	r3, #0
 81008da:	d001      	beq.n	81008e0 <SD_ioctl+0x28>
 81008dc:	2303      	movs	r3, #3
 81008de:	e03c      	b.n	810095a <SD_ioctl+0xa2>

  switch (cmd)
 81008e0:	79bb      	ldrb	r3, [r7, #6]
 81008e2:	2b03      	cmp	r3, #3
 81008e4:	d834      	bhi.n	8100950 <SD_ioctl+0x98>
 81008e6:	a201      	add	r2, pc, #4	@ (adr r2, 81008ec <SD_ioctl+0x34>)
 81008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81008ec:	081008fd 	.word	0x081008fd
 81008f0:	08100905 	.word	0x08100905
 81008f4:	0810091d 	.word	0x0810091d
 81008f8:	08100937 	.word	0x08100937
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 81008fc:	2300      	movs	r3, #0
 81008fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8100902:	e028      	b.n	8100956 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8100904:	f107 0308 	add.w	r3, r7, #8
 8100908:	4618      	mov	r0, r3
 810090a:	f7ff ff2d 	bl	8100768 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 810090e:	6a3a      	ldr	r2, [r7, #32]
 8100910:	683b      	ldr	r3, [r7, #0]
 8100912:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8100914:	2300      	movs	r3, #0
 8100916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 810091a:	e01c      	b.n	8100956 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 810091c:	f107 0308 	add.w	r3, r7, #8
 8100920:	4618      	mov	r0, r3
 8100922:	f7ff ff21 	bl	8100768 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8100926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100928:	b29a      	uxth	r2, r3
 810092a:	683b      	ldr	r3, [r7, #0]
 810092c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 810092e:	2300      	movs	r3, #0
 8100930:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8100934:	e00f      	b.n	8100956 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8100936:	f107 0308 	add.w	r3, r7, #8
 810093a:	4618      	mov	r0, r3
 810093c:	f7ff ff14 	bl	8100768 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8100940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100942:	0a5a      	lsrs	r2, r3, #9
 8100944:	683b      	ldr	r3, [r7, #0]
 8100946:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8100948:	2300      	movs	r3, #0
 810094a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 810094e:	e002      	b.n	8100956 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8100950:	2304      	movs	r3, #4
 8100952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8100956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 810095a:	4618      	mov	r0, r3
 810095c:	3730      	adds	r7, #48	@ 0x30
 810095e:	46bd      	mov	sp, r7
 8100960:	bd80      	pop	{r7, pc}
 8100962:	bf00      	nop
 8100964:	10000000 	.word	0x10000000

08100968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81009a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810096c:	f000 f826 	bl	81009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100970:	480c      	ldr	r0, [pc, #48]	@ (81009a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100972:	490d      	ldr	r1, [pc, #52]	@ (81009a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100974:	4a0d      	ldr	r2, [pc, #52]	@ (81009ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100978:	e002      	b.n	8100980 <LoopCopyDataInit>

0810097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810097e:	3304      	adds	r3, #4

08100980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100984:	d3f9      	bcc.n	810097a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100986:	4a0a      	ldr	r2, [pc, #40]	@ (81009b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100988:	4c0a      	ldr	r4, [pc, #40]	@ (81009b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810098c:	e001      	b.n	8100992 <LoopFillZerobss>

0810098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100990:	3204      	adds	r2, #4

08100992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100994:	d3fb      	bcc.n	810098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100996:	f005 fd41 	bl	810641c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810099a:	f7ff fc9d 	bl	81002d8 <main>
  bx  lr
 810099e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81009a0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81009a4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81009a8:	10000014 	.word	0x10000014
  ldr r2, =_sidata
 81009ac:	081064a8 	.word	0x081064a8
  ldr r2, =_sbss
 81009b0:	10000014 	.word	0x10000014
  ldr r4, =_ebss
 81009b4:	100000c4 	.word	0x100000c4

081009b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81009b8:	e7fe      	b.n	81009b8 <ADC3_IRQHandler>
	...

081009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81009bc:	b480      	push	{r7}
 81009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81009c0:	4b0b      	ldr	r3, [pc, #44]	@ (81009f0 <SystemInit+0x34>)
 81009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81009c6:	4a0a      	ldr	r2, [pc, #40]	@ (81009f0 <SystemInit+0x34>)
 81009c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81009cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81009d0:	4b07      	ldr	r3, [pc, #28]	@ (81009f0 <SystemInit+0x34>)
 81009d2:	691b      	ldr	r3, [r3, #16]
 81009d4:	4a06      	ldr	r2, [pc, #24]	@ (81009f0 <SystemInit+0x34>)
 81009d6:	f043 0310 	orr.w	r3, r3, #16
 81009da:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81009dc:	4b04      	ldr	r3, [pc, #16]	@ (81009f0 <SystemInit+0x34>)
 81009de:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 81009e2:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81009e4:	bf00      	nop
 81009e6:	46bd      	mov	sp, r7
 81009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009ec:	4770      	bx	lr
 81009ee:	bf00      	nop
 81009f0:	e000ed00 	.word	0xe000ed00

081009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81009f4:	b580      	push	{r7, lr}
 81009f6:	b082      	sub	sp, #8
 81009f8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81009fa:	4b28      	ldr	r3, [pc, #160]	@ (8100a9c <HAL_Init+0xa8>)
 81009fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100a00:	4a26      	ldr	r2, [pc, #152]	@ (8100a9c <HAL_Init+0xa8>)
 8100a02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100a06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100a0a:	4b24      	ldr	r3, [pc, #144]	@ (8100a9c <HAL_Init+0xa8>)
 8100a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100a14:	603b      	str	r3, [r7, #0]
 8100a16:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100a18:	4b21      	ldr	r3, [pc, #132]	@ (8100aa0 <HAL_Init+0xac>)
 8100a1a:	681b      	ldr	r3, [r3, #0]
 8100a1c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100a20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100a24:	4a1e      	ldr	r2, [pc, #120]	@ (8100aa0 <HAL_Init+0xac>)
 8100a26:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100a2a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8100aa0 <HAL_Init+0xac>)
 8100a2e:	681b      	ldr	r3, [r3, #0]
 8100a30:	4a1b      	ldr	r2, [pc, #108]	@ (8100aa0 <HAL_Init+0xac>)
 8100a32:	f043 0301 	orr.w	r3, r3, #1
 8100a36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100a38:	2003      	movs	r0, #3
 8100a3a:	f000 f965 	bl	8100d08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100a3e:	f000 fc0d 	bl	810125c <HAL_RCC_GetSysClockFreq>
 8100a42:	4602      	mov	r2, r0
 8100a44:	4b15      	ldr	r3, [pc, #84]	@ (8100a9c <HAL_Init+0xa8>)
 8100a46:	699b      	ldr	r3, [r3, #24]
 8100a48:	0a1b      	lsrs	r3, r3, #8
 8100a4a:	f003 030f 	and.w	r3, r3, #15
 8100a4e:	4915      	ldr	r1, [pc, #84]	@ (8100aa4 <HAL_Init+0xb0>)
 8100a50:	5ccb      	ldrb	r3, [r1, r3]
 8100a52:	f003 031f 	and.w	r3, r3, #31
 8100a56:	fa22 f303 	lsr.w	r3, r2, r3
 8100a5a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8100a9c <HAL_Init+0xa8>)
 8100a5e:	699b      	ldr	r3, [r3, #24]
 8100a60:	f003 030f 	and.w	r3, r3, #15
 8100a64:	4a0f      	ldr	r2, [pc, #60]	@ (8100aa4 <HAL_Init+0xb0>)
 8100a66:	5cd3      	ldrb	r3, [r2, r3]
 8100a68:	f003 031f 	and.w	r3, r3, #31
 8100a6c:	687a      	ldr	r2, [r7, #4]
 8100a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8100a72:	4a0d      	ldr	r2, [pc, #52]	@ (8100aa8 <HAL_Init+0xb4>)
 8100a74:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100a76:	4b0c      	ldr	r3, [pc, #48]	@ (8100aa8 <HAL_Init+0xb4>)
 8100a78:	681b      	ldr	r3, [r3, #0]
 8100a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8100aac <HAL_Init+0xb8>)
 8100a7c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100a7e:	2000      	movs	r0, #0
 8100a80:	f000 f816 	bl	8100ab0 <HAL_InitTick>
 8100a84:	4603      	mov	r3, r0
 8100a86:	2b00      	cmp	r3, #0
 8100a88:	d001      	beq.n	8100a8e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100a8a:	2301      	movs	r3, #1
 8100a8c:	e002      	b.n	8100a94 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100a8e:	f7ff fd0f 	bl	81004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100a92:	2300      	movs	r3, #0
}
 8100a94:	4618      	mov	r0, r3
 8100a96:	3708      	adds	r7, #8
 8100a98:	46bd      	mov	sp, r7
 8100a9a:	bd80      	pop	{r7, pc}
 8100a9c:	58024400 	.word	0x58024400
 8100aa0:	40024400 	.word	0x40024400
 8100aa4:	08106490 	.word	0x08106490
 8100aa8:	10000008 	.word	0x10000008
 8100aac:	10000004 	.word	0x10000004

08100ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100ab0:	b580      	push	{r7, lr}
 8100ab2:	b082      	sub	sp, #8
 8100ab4:	af00      	add	r7, sp, #0
 8100ab6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100ab8:	4b15      	ldr	r3, [pc, #84]	@ (8100b10 <HAL_InitTick+0x60>)
 8100aba:	781b      	ldrb	r3, [r3, #0]
 8100abc:	2b00      	cmp	r3, #0
 8100abe:	d101      	bne.n	8100ac4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100ac0:	2301      	movs	r3, #1
 8100ac2:	e021      	b.n	8100b08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100ac4:	4b13      	ldr	r3, [pc, #76]	@ (8100b14 <HAL_InitTick+0x64>)
 8100ac6:	681a      	ldr	r2, [r3, #0]
 8100ac8:	4b11      	ldr	r3, [pc, #68]	@ (8100b10 <HAL_InitTick+0x60>)
 8100aca:	781b      	ldrb	r3, [r3, #0]
 8100acc:	4619      	mov	r1, r3
 8100ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8100ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8100ada:	4618      	mov	r0, r3
 8100adc:	f000 f939 	bl	8100d52 <HAL_SYSTICK_Config>
 8100ae0:	4603      	mov	r3, r0
 8100ae2:	2b00      	cmp	r3, #0
 8100ae4:	d001      	beq.n	8100aea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100ae6:	2301      	movs	r3, #1
 8100ae8:	e00e      	b.n	8100b08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100aea:	687b      	ldr	r3, [r7, #4]
 8100aec:	2b0f      	cmp	r3, #15
 8100aee:	d80a      	bhi.n	8100b06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100af0:	2200      	movs	r2, #0
 8100af2:	6879      	ldr	r1, [r7, #4]
 8100af4:	f04f 30ff 	mov.w	r0, #4294967295
 8100af8:	f000 f911 	bl	8100d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100afc:	4a06      	ldr	r2, [pc, #24]	@ (8100b18 <HAL_InitTick+0x68>)
 8100afe:	687b      	ldr	r3, [r7, #4]
 8100b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100b02:	2300      	movs	r3, #0
 8100b04:	e000      	b.n	8100b08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100b06:	2301      	movs	r3, #1
}
 8100b08:	4618      	mov	r0, r3
 8100b0a:	3708      	adds	r7, #8
 8100b0c:	46bd      	mov	sp, r7
 8100b0e:	bd80      	pop	{r7, pc}
 8100b10:	10000010 	.word	0x10000010
 8100b14:	10000004 	.word	0x10000004
 8100b18:	1000000c 	.word	0x1000000c

08100b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100b1c:	b480      	push	{r7}
 8100b1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100b20:	4b06      	ldr	r3, [pc, #24]	@ (8100b3c <HAL_IncTick+0x20>)
 8100b22:	781b      	ldrb	r3, [r3, #0]
 8100b24:	461a      	mov	r2, r3
 8100b26:	4b06      	ldr	r3, [pc, #24]	@ (8100b40 <HAL_IncTick+0x24>)
 8100b28:	681b      	ldr	r3, [r3, #0]
 8100b2a:	4413      	add	r3, r2
 8100b2c:	4a04      	ldr	r2, [pc, #16]	@ (8100b40 <HAL_IncTick+0x24>)
 8100b2e:	6013      	str	r3, [r2, #0]
}
 8100b30:	bf00      	nop
 8100b32:	46bd      	mov	sp, r7
 8100b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b38:	4770      	bx	lr
 8100b3a:	bf00      	nop
 8100b3c:	10000010 	.word	0x10000010
 8100b40:	100000b4 	.word	0x100000b4

08100b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100b44:	b480      	push	{r7}
 8100b46:	af00      	add	r7, sp, #0
  return uwTick;
 8100b48:	4b03      	ldr	r3, [pc, #12]	@ (8100b58 <HAL_GetTick+0x14>)
 8100b4a:	681b      	ldr	r3, [r3, #0]
}
 8100b4c:	4618      	mov	r0, r3
 8100b4e:	46bd      	mov	sp, r7
 8100b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b54:	4770      	bx	lr
 8100b56:	bf00      	nop
 8100b58:	100000b4 	.word	0x100000b4

08100b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100b5c:	b580      	push	{r7, lr}
 8100b5e:	b084      	sub	sp, #16
 8100b60:	af00      	add	r7, sp, #0
 8100b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100b64:	f7ff ffee 	bl	8100b44 <HAL_GetTick>
 8100b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100b6a:	687b      	ldr	r3, [r7, #4]
 8100b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100b6e:	68fb      	ldr	r3, [r7, #12]
 8100b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100b74:	d005      	beq.n	8100b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100b76:	4b0a      	ldr	r3, [pc, #40]	@ (8100ba0 <HAL_Delay+0x44>)
 8100b78:	781b      	ldrb	r3, [r3, #0]
 8100b7a:	461a      	mov	r2, r3
 8100b7c:	68fb      	ldr	r3, [r7, #12]
 8100b7e:	4413      	add	r3, r2
 8100b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100b82:	bf00      	nop
 8100b84:	f7ff ffde 	bl	8100b44 <HAL_GetTick>
 8100b88:	4602      	mov	r2, r0
 8100b8a:	68bb      	ldr	r3, [r7, #8]
 8100b8c:	1ad3      	subs	r3, r2, r3
 8100b8e:	68fa      	ldr	r2, [r7, #12]
 8100b90:	429a      	cmp	r2, r3
 8100b92:	d8f7      	bhi.n	8100b84 <HAL_Delay+0x28>
  {
  }
}
 8100b94:	bf00      	nop
 8100b96:	bf00      	nop
 8100b98:	3710      	adds	r7, #16
 8100b9a:	46bd      	mov	sp, r7
 8100b9c:	bd80      	pop	{r7, pc}
 8100b9e:	bf00      	nop
 8100ba0:	10000010 	.word	0x10000010

08100ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ba4:	b480      	push	{r7}
 8100ba6:	b085      	sub	sp, #20
 8100ba8:	af00      	add	r7, sp, #0
 8100baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100bac:	687b      	ldr	r3, [r7, #4]
 8100bae:	f003 0307 	and.w	r3, r3, #7
 8100bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8100be8 <__NVIC_SetPriorityGrouping+0x44>)
 8100bb6:	68db      	ldr	r3, [r3, #12]
 8100bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100bba:	68ba      	ldr	r2, [r7, #8]
 8100bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100bc0:	4013      	ands	r3, r2
 8100bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100bc4:	68fb      	ldr	r3, [r7, #12]
 8100bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100bc8:	68bb      	ldr	r3, [r7, #8]
 8100bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100bd6:	4a04      	ldr	r2, [pc, #16]	@ (8100be8 <__NVIC_SetPriorityGrouping+0x44>)
 8100bd8:	68bb      	ldr	r3, [r7, #8]
 8100bda:	60d3      	str	r3, [r2, #12]
}
 8100bdc:	bf00      	nop
 8100bde:	3714      	adds	r7, #20
 8100be0:	46bd      	mov	sp, r7
 8100be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100be6:	4770      	bx	lr
 8100be8:	e000ed00 	.word	0xe000ed00

08100bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100bec:	b480      	push	{r7}
 8100bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100bf0:	4b04      	ldr	r3, [pc, #16]	@ (8100c04 <__NVIC_GetPriorityGrouping+0x18>)
 8100bf2:	68db      	ldr	r3, [r3, #12]
 8100bf4:	0a1b      	lsrs	r3, r3, #8
 8100bf6:	f003 0307 	and.w	r3, r3, #7
}
 8100bfa:	4618      	mov	r0, r3
 8100bfc:	46bd      	mov	sp, r7
 8100bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c02:	4770      	bx	lr
 8100c04:	e000ed00 	.word	0xe000ed00

08100c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100c08:	b480      	push	{r7}
 8100c0a:	b083      	sub	sp, #12
 8100c0c:	af00      	add	r7, sp, #0
 8100c0e:	4603      	mov	r3, r0
 8100c10:	6039      	str	r1, [r7, #0]
 8100c12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c18:	2b00      	cmp	r3, #0
 8100c1a:	db0a      	blt.n	8100c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100c1c:	683b      	ldr	r3, [r7, #0]
 8100c1e:	b2da      	uxtb	r2, r3
 8100c20:	490c      	ldr	r1, [pc, #48]	@ (8100c54 <__NVIC_SetPriority+0x4c>)
 8100c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c26:	0112      	lsls	r2, r2, #4
 8100c28:	b2d2      	uxtb	r2, r2
 8100c2a:	440b      	add	r3, r1
 8100c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100c30:	e00a      	b.n	8100c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100c32:	683b      	ldr	r3, [r7, #0]
 8100c34:	b2da      	uxtb	r2, r3
 8100c36:	4908      	ldr	r1, [pc, #32]	@ (8100c58 <__NVIC_SetPriority+0x50>)
 8100c38:	88fb      	ldrh	r3, [r7, #6]
 8100c3a:	f003 030f 	and.w	r3, r3, #15
 8100c3e:	3b04      	subs	r3, #4
 8100c40:	0112      	lsls	r2, r2, #4
 8100c42:	b2d2      	uxtb	r2, r2
 8100c44:	440b      	add	r3, r1
 8100c46:	761a      	strb	r2, [r3, #24]
}
 8100c48:	bf00      	nop
 8100c4a:	370c      	adds	r7, #12
 8100c4c:	46bd      	mov	sp, r7
 8100c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c52:	4770      	bx	lr
 8100c54:	e000e100 	.word	0xe000e100
 8100c58:	e000ed00 	.word	0xe000ed00

08100c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100c5c:	b480      	push	{r7}
 8100c5e:	b089      	sub	sp, #36	@ 0x24
 8100c60:	af00      	add	r7, sp, #0
 8100c62:	60f8      	str	r0, [r7, #12]
 8100c64:	60b9      	str	r1, [r7, #8]
 8100c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100c68:	68fb      	ldr	r3, [r7, #12]
 8100c6a:	f003 0307 	and.w	r3, r3, #7
 8100c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100c70:	69fb      	ldr	r3, [r7, #28]
 8100c72:	f1c3 0307 	rsb	r3, r3, #7
 8100c76:	2b04      	cmp	r3, #4
 8100c78:	bf28      	it	cs
 8100c7a:	2304      	movcs	r3, #4
 8100c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100c7e:	69fb      	ldr	r3, [r7, #28]
 8100c80:	3304      	adds	r3, #4
 8100c82:	2b06      	cmp	r3, #6
 8100c84:	d902      	bls.n	8100c8c <NVIC_EncodePriority+0x30>
 8100c86:	69fb      	ldr	r3, [r7, #28]
 8100c88:	3b03      	subs	r3, #3
 8100c8a:	e000      	b.n	8100c8e <NVIC_EncodePriority+0x32>
 8100c8c:	2300      	movs	r3, #0
 8100c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c90:	f04f 32ff 	mov.w	r2, #4294967295
 8100c94:	69bb      	ldr	r3, [r7, #24]
 8100c96:	fa02 f303 	lsl.w	r3, r2, r3
 8100c9a:	43da      	mvns	r2, r3
 8100c9c:	68bb      	ldr	r3, [r7, #8]
 8100c9e:	401a      	ands	r2, r3
 8100ca0:	697b      	ldr	r3, [r7, #20]
 8100ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8100ca8:	697b      	ldr	r3, [r7, #20]
 8100caa:	fa01 f303 	lsl.w	r3, r1, r3
 8100cae:	43d9      	mvns	r1, r3
 8100cb0:	687b      	ldr	r3, [r7, #4]
 8100cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100cb4:	4313      	orrs	r3, r2
         );
}
 8100cb6:	4618      	mov	r0, r3
 8100cb8:	3724      	adds	r7, #36	@ 0x24
 8100cba:	46bd      	mov	sp, r7
 8100cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cc0:	4770      	bx	lr
	...

08100cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100cc4:	b580      	push	{r7, lr}
 8100cc6:	b082      	sub	sp, #8
 8100cc8:	af00      	add	r7, sp, #0
 8100cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100ccc:	687b      	ldr	r3, [r7, #4]
 8100cce:	3b01      	subs	r3, #1
 8100cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100cd4:	d301      	bcc.n	8100cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100cd6:	2301      	movs	r3, #1
 8100cd8:	e00f      	b.n	8100cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100cda:	4a0a      	ldr	r2, [pc, #40]	@ (8100d04 <SysTick_Config+0x40>)
 8100cdc:	687b      	ldr	r3, [r7, #4]
 8100cde:	3b01      	subs	r3, #1
 8100ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100ce2:	210f      	movs	r1, #15
 8100ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8100ce8:	f7ff ff8e 	bl	8100c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100cec:	4b05      	ldr	r3, [pc, #20]	@ (8100d04 <SysTick_Config+0x40>)
 8100cee:	2200      	movs	r2, #0
 8100cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100cf2:	4b04      	ldr	r3, [pc, #16]	@ (8100d04 <SysTick_Config+0x40>)
 8100cf4:	2207      	movs	r2, #7
 8100cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100cf8:	2300      	movs	r3, #0
}
 8100cfa:	4618      	mov	r0, r3
 8100cfc:	3708      	adds	r7, #8
 8100cfe:	46bd      	mov	sp, r7
 8100d00:	bd80      	pop	{r7, pc}
 8100d02:	bf00      	nop
 8100d04:	e000e010 	.word	0xe000e010

08100d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100d08:	b580      	push	{r7, lr}
 8100d0a:	b082      	sub	sp, #8
 8100d0c:	af00      	add	r7, sp, #0
 8100d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100d10:	6878      	ldr	r0, [r7, #4]
 8100d12:	f7ff ff47 	bl	8100ba4 <__NVIC_SetPriorityGrouping>
}
 8100d16:	bf00      	nop
 8100d18:	3708      	adds	r7, #8
 8100d1a:	46bd      	mov	sp, r7
 8100d1c:	bd80      	pop	{r7, pc}

08100d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100d1e:	b580      	push	{r7, lr}
 8100d20:	b086      	sub	sp, #24
 8100d22:	af00      	add	r7, sp, #0
 8100d24:	4603      	mov	r3, r0
 8100d26:	60b9      	str	r1, [r7, #8]
 8100d28:	607a      	str	r2, [r7, #4]
 8100d2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100d2c:	f7ff ff5e 	bl	8100bec <__NVIC_GetPriorityGrouping>
 8100d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100d32:	687a      	ldr	r2, [r7, #4]
 8100d34:	68b9      	ldr	r1, [r7, #8]
 8100d36:	6978      	ldr	r0, [r7, #20]
 8100d38:	f7ff ff90 	bl	8100c5c <NVIC_EncodePriority>
 8100d3c:	4602      	mov	r2, r0
 8100d3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100d42:	4611      	mov	r1, r2
 8100d44:	4618      	mov	r0, r3
 8100d46:	f7ff ff5f 	bl	8100c08 <__NVIC_SetPriority>
}
 8100d4a:	bf00      	nop
 8100d4c:	3718      	adds	r7, #24
 8100d4e:	46bd      	mov	sp, r7
 8100d50:	bd80      	pop	{r7, pc}

08100d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100d52:	b580      	push	{r7, lr}
 8100d54:	b082      	sub	sp, #8
 8100d56:	af00      	add	r7, sp, #0
 8100d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100d5a:	6878      	ldr	r0, [r7, #4]
 8100d5c:	f7ff ffb2 	bl	8100cc4 <SysTick_Config>
 8100d60:	4603      	mov	r3, r0
}
 8100d62:	4618      	mov	r0, r3
 8100d64:	3708      	adds	r7, #8
 8100d66:	46bd      	mov	sp, r7
 8100d68:	bd80      	pop	{r7, pc}
	...

08100d6c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100d6c:	b480      	push	{r7}
 8100d6e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100d70:	4b07      	ldr	r3, [pc, #28]	@ (8100d90 <HAL_GetCurrentCPUID+0x24>)
 8100d72:	681b      	ldr	r3, [r3, #0]
 8100d74:	091b      	lsrs	r3, r3, #4
 8100d76:	f003 030f 	and.w	r3, r3, #15
 8100d7a:	2b07      	cmp	r3, #7
 8100d7c:	d101      	bne.n	8100d82 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100d7e:	2303      	movs	r3, #3
 8100d80:	e000      	b.n	8100d84 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100d82:	2301      	movs	r3, #1
  }
}
 8100d84:	4618      	mov	r0, r3
 8100d86:	46bd      	mov	sp, r7
 8100d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d8c:	4770      	bx	lr
 8100d8e:	bf00      	nop
 8100d90:	e000ed00 	.word	0xe000ed00

08100d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8100d94:	b480      	push	{r7}
 8100d96:	b089      	sub	sp, #36	@ 0x24
 8100d98:	af00      	add	r7, sp, #0
 8100d9a:	6078      	str	r0, [r7, #4]
 8100d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100d9e:	2300      	movs	r3, #0
 8100da0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100da2:	4b89      	ldr	r3, [pc, #548]	@ (8100fc8 <HAL_GPIO_Init+0x234>)
 8100da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100da6:	e194      	b.n	81010d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100da8:	683b      	ldr	r3, [r7, #0]
 8100daa:	681a      	ldr	r2, [r3, #0]
 8100dac:	2101      	movs	r1, #1
 8100dae:	69fb      	ldr	r3, [r7, #28]
 8100db0:	fa01 f303 	lsl.w	r3, r1, r3
 8100db4:	4013      	ands	r3, r2
 8100db6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100db8:	693b      	ldr	r3, [r7, #16]
 8100dba:	2b00      	cmp	r3, #0
 8100dbc:	f000 8186 	beq.w	81010cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100dc0:	683b      	ldr	r3, [r7, #0]
 8100dc2:	685b      	ldr	r3, [r3, #4]
 8100dc4:	f003 0303 	and.w	r3, r3, #3
 8100dc8:	2b01      	cmp	r3, #1
 8100dca:	d005      	beq.n	8100dd8 <HAL_GPIO_Init+0x44>
 8100dcc:	683b      	ldr	r3, [r7, #0]
 8100dce:	685b      	ldr	r3, [r3, #4]
 8100dd0:	f003 0303 	and.w	r3, r3, #3
 8100dd4:	2b02      	cmp	r3, #2
 8100dd6:	d130      	bne.n	8100e3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100dd8:	687b      	ldr	r3, [r7, #4]
 8100dda:	689b      	ldr	r3, [r3, #8]
 8100ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100dde:	69fb      	ldr	r3, [r7, #28]
 8100de0:	005b      	lsls	r3, r3, #1
 8100de2:	2203      	movs	r2, #3
 8100de4:	fa02 f303 	lsl.w	r3, r2, r3
 8100de8:	43db      	mvns	r3, r3
 8100dea:	69ba      	ldr	r2, [r7, #24]
 8100dec:	4013      	ands	r3, r2
 8100dee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100df0:	683b      	ldr	r3, [r7, #0]
 8100df2:	68da      	ldr	r2, [r3, #12]
 8100df4:	69fb      	ldr	r3, [r7, #28]
 8100df6:	005b      	lsls	r3, r3, #1
 8100df8:	fa02 f303 	lsl.w	r3, r2, r3
 8100dfc:	69ba      	ldr	r2, [r7, #24]
 8100dfe:	4313      	orrs	r3, r2
 8100e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100e02:	687b      	ldr	r3, [r7, #4]
 8100e04:	69ba      	ldr	r2, [r7, #24]
 8100e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100e08:	687b      	ldr	r3, [r7, #4]
 8100e0a:	685b      	ldr	r3, [r3, #4]
 8100e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100e0e:	2201      	movs	r2, #1
 8100e10:	69fb      	ldr	r3, [r7, #28]
 8100e12:	fa02 f303 	lsl.w	r3, r2, r3
 8100e16:	43db      	mvns	r3, r3
 8100e18:	69ba      	ldr	r2, [r7, #24]
 8100e1a:	4013      	ands	r3, r2
 8100e1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100e1e:	683b      	ldr	r3, [r7, #0]
 8100e20:	685b      	ldr	r3, [r3, #4]
 8100e22:	091b      	lsrs	r3, r3, #4
 8100e24:	f003 0201 	and.w	r2, r3, #1
 8100e28:	69fb      	ldr	r3, [r7, #28]
 8100e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e2e:	69ba      	ldr	r2, [r7, #24]
 8100e30:	4313      	orrs	r3, r2
 8100e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100e34:	687b      	ldr	r3, [r7, #4]
 8100e36:	69ba      	ldr	r2, [r7, #24]
 8100e38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100e3a:	683b      	ldr	r3, [r7, #0]
 8100e3c:	685b      	ldr	r3, [r3, #4]
 8100e3e:	f003 0303 	and.w	r3, r3, #3
 8100e42:	2b03      	cmp	r3, #3
 8100e44:	d017      	beq.n	8100e76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100e46:	687b      	ldr	r3, [r7, #4]
 8100e48:	68db      	ldr	r3, [r3, #12]
 8100e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100e4c:	69fb      	ldr	r3, [r7, #28]
 8100e4e:	005b      	lsls	r3, r3, #1
 8100e50:	2203      	movs	r2, #3
 8100e52:	fa02 f303 	lsl.w	r3, r2, r3
 8100e56:	43db      	mvns	r3, r3
 8100e58:	69ba      	ldr	r2, [r7, #24]
 8100e5a:	4013      	ands	r3, r2
 8100e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100e5e:	683b      	ldr	r3, [r7, #0]
 8100e60:	689a      	ldr	r2, [r3, #8]
 8100e62:	69fb      	ldr	r3, [r7, #28]
 8100e64:	005b      	lsls	r3, r3, #1
 8100e66:	fa02 f303 	lsl.w	r3, r2, r3
 8100e6a:	69ba      	ldr	r2, [r7, #24]
 8100e6c:	4313      	orrs	r3, r2
 8100e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100e70:	687b      	ldr	r3, [r7, #4]
 8100e72:	69ba      	ldr	r2, [r7, #24]
 8100e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100e76:	683b      	ldr	r3, [r7, #0]
 8100e78:	685b      	ldr	r3, [r3, #4]
 8100e7a:	f003 0303 	and.w	r3, r3, #3
 8100e7e:	2b02      	cmp	r3, #2
 8100e80:	d123      	bne.n	8100eca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100e82:	69fb      	ldr	r3, [r7, #28]
 8100e84:	08da      	lsrs	r2, r3, #3
 8100e86:	687b      	ldr	r3, [r7, #4]
 8100e88:	3208      	adds	r2, #8
 8100e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100e90:	69fb      	ldr	r3, [r7, #28]
 8100e92:	f003 0307 	and.w	r3, r3, #7
 8100e96:	009b      	lsls	r3, r3, #2
 8100e98:	220f      	movs	r2, #15
 8100e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e9e:	43db      	mvns	r3, r3
 8100ea0:	69ba      	ldr	r2, [r7, #24]
 8100ea2:	4013      	ands	r3, r2
 8100ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100ea6:	683b      	ldr	r3, [r7, #0]
 8100ea8:	691a      	ldr	r2, [r3, #16]
 8100eaa:	69fb      	ldr	r3, [r7, #28]
 8100eac:	f003 0307 	and.w	r3, r3, #7
 8100eb0:	009b      	lsls	r3, r3, #2
 8100eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8100eb6:	69ba      	ldr	r2, [r7, #24]
 8100eb8:	4313      	orrs	r3, r2
 8100eba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100ebc:	69fb      	ldr	r3, [r7, #28]
 8100ebe:	08da      	lsrs	r2, r3, #3
 8100ec0:	687b      	ldr	r3, [r7, #4]
 8100ec2:	3208      	adds	r2, #8
 8100ec4:	69b9      	ldr	r1, [r7, #24]
 8100ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100eca:	687b      	ldr	r3, [r7, #4]
 8100ecc:	681b      	ldr	r3, [r3, #0]
 8100ece:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100ed0:	69fb      	ldr	r3, [r7, #28]
 8100ed2:	005b      	lsls	r3, r3, #1
 8100ed4:	2203      	movs	r2, #3
 8100ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8100eda:	43db      	mvns	r3, r3
 8100edc:	69ba      	ldr	r2, [r7, #24]
 8100ede:	4013      	ands	r3, r2
 8100ee0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100ee2:	683b      	ldr	r3, [r7, #0]
 8100ee4:	685b      	ldr	r3, [r3, #4]
 8100ee6:	f003 0203 	and.w	r2, r3, #3
 8100eea:	69fb      	ldr	r3, [r7, #28]
 8100eec:	005b      	lsls	r3, r3, #1
 8100eee:	fa02 f303 	lsl.w	r3, r2, r3
 8100ef2:	69ba      	ldr	r2, [r7, #24]
 8100ef4:	4313      	orrs	r3, r2
 8100ef6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100ef8:	687b      	ldr	r3, [r7, #4]
 8100efa:	69ba      	ldr	r2, [r7, #24]
 8100efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100efe:	683b      	ldr	r3, [r7, #0]
 8100f00:	685b      	ldr	r3, [r3, #4]
 8100f02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8100f06:	2b00      	cmp	r3, #0
 8100f08:	f000 80e0 	beq.w	81010cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8100fcc <HAL_GPIO_Init+0x238>)
 8100f0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100f12:	4a2e      	ldr	r2, [pc, #184]	@ (8100fcc <HAL_GPIO_Init+0x238>)
 8100f14:	f043 0302 	orr.w	r3, r3, #2
 8100f18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8100fcc <HAL_GPIO_Init+0x238>)
 8100f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100f22:	f003 0302 	and.w	r3, r3, #2
 8100f26:	60fb      	str	r3, [r7, #12]
 8100f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100f2a:	4a29      	ldr	r2, [pc, #164]	@ (8100fd0 <HAL_GPIO_Init+0x23c>)
 8100f2c:	69fb      	ldr	r3, [r7, #28]
 8100f2e:	089b      	lsrs	r3, r3, #2
 8100f30:	3302      	adds	r3, #2
 8100f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100f38:	69fb      	ldr	r3, [r7, #28]
 8100f3a:	f003 0303 	and.w	r3, r3, #3
 8100f3e:	009b      	lsls	r3, r3, #2
 8100f40:	220f      	movs	r2, #15
 8100f42:	fa02 f303 	lsl.w	r3, r2, r3
 8100f46:	43db      	mvns	r3, r3
 8100f48:	69ba      	ldr	r2, [r7, #24]
 8100f4a:	4013      	ands	r3, r2
 8100f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100f4e:	687b      	ldr	r3, [r7, #4]
 8100f50:	4a20      	ldr	r2, [pc, #128]	@ (8100fd4 <HAL_GPIO_Init+0x240>)
 8100f52:	4293      	cmp	r3, r2
 8100f54:	d052      	beq.n	8100ffc <HAL_GPIO_Init+0x268>
 8100f56:	687b      	ldr	r3, [r7, #4]
 8100f58:	4a1f      	ldr	r2, [pc, #124]	@ (8100fd8 <HAL_GPIO_Init+0x244>)
 8100f5a:	4293      	cmp	r3, r2
 8100f5c:	d031      	beq.n	8100fc2 <HAL_GPIO_Init+0x22e>
 8100f5e:	687b      	ldr	r3, [r7, #4]
 8100f60:	4a1e      	ldr	r2, [pc, #120]	@ (8100fdc <HAL_GPIO_Init+0x248>)
 8100f62:	4293      	cmp	r3, r2
 8100f64:	d02b      	beq.n	8100fbe <HAL_GPIO_Init+0x22a>
 8100f66:	687b      	ldr	r3, [r7, #4]
 8100f68:	4a1d      	ldr	r2, [pc, #116]	@ (8100fe0 <HAL_GPIO_Init+0x24c>)
 8100f6a:	4293      	cmp	r3, r2
 8100f6c:	d025      	beq.n	8100fba <HAL_GPIO_Init+0x226>
 8100f6e:	687b      	ldr	r3, [r7, #4]
 8100f70:	4a1c      	ldr	r2, [pc, #112]	@ (8100fe4 <HAL_GPIO_Init+0x250>)
 8100f72:	4293      	cmp	r3, r2
 8100f74:	d01f      	beq.n	8100fb6 <HAL_GPIO_Init+0x222>
 8100f76:	687b      	ldr	r3, [r7, #4]
 8100f78:	4a1b      	ldr	r2, [pc, #108]	@ (8100fe8 <HAL_GPIO_Init+0x254>)
 8100f7a:	4293      	cmp	r3, r2
 8100f7c:	d019      	beq.n	8100fb2 <HAL_GPIO_Init+0x21e>
 8100f7e:	687b      	ldr	r3, [r7, #4]
 8100f80:	4a1a      	ldr	r2, [pc, #104]	@ (8100fec <HAL_GPIO_Init+0x258>)
 8100f82:	4293      	cmp	r3, r2
 8100f84:	d013      	beq.n	8100fae <HAL_GPIO_Init+0x21a>
 8100f86:	687b      	ldr	r3, [r7, #4]
 8100f88:	4a19      	ldr	r2, [pc, #100]	@ (8100ff0 <HAL_GPIO_Init+0x25c>)
 8100f8a:	4293      	cmp	r3, r2
 8100f8c:	d00d      	beq.n	8100faa <HAL_GPIO_Init+0x216>
 8100f8e:	687b      	ldr	r3, [r7, #4]
 8100f90:	4a18      	ldr	r2, [pc, #96]	@ (8100ff4 <HAL_GPIO_Init+0x260>)
 8100f92:	4293      	cmp	r3, r2
 8100f94:	d007      	beq.n	8100fa6 <HAL_GPIO_Init+0x212>
 8100f96:	687b      	ldr	r3, [r7, #4]
 8100f98:	4a17      	ldr	r2, [pc, #92]	@ (8100ff8 <HAL_GPIO_Init+0x264>)
 8100f9a:	4293      	cmp	r3, r2
 8100f9c:	d101      	bne.n	8100fa2 <HAL_GPIO_Init+0x20e>
 8100f9e:	2309      	movs	r3, #9
 8100fa0:	e02d      	b.n	8100ffe <HAL_GPIO_Init+0x26a>
 8100fa2:	230a      	movs	r3, #10
 8100fa4:	e02b      	b.n	8100ffe <HAL_GPIO_Init+0x26a>
 8100fa6:	2308      	movs	r3, #8
 8100fa8:	e029      	b.n	8100ffe <HAL_GPIO_Init+0x26a>
 8100faa:	2307      	movs	r3, #7
 8100fac:	e027      	b.n	8100ffe <HAL_GPIO_Init+0x26a>
 8100fae:	2306      	movs	r3, #6
 8100fb0:	e025      	b.n	8100ffe <HAL_GPIO_Init+0x26a>
 8100fb2:	2305      	movs	r3, #5
 8100fb4:	e023      	b.n	8100ffe <HAL_GPIO_Init+0x26a>
 8100fb6:	2304      	movs	r3, #4
 8100fb8:	e021      	b.n	8100ffe <HAL_GPIO_Init+0x26a>
 8100fba:	2303      	movs	r3, #3
 8100fbc:	e01f      	b.n	8100ffe <HAL_GPIO_Init+0x26a>
 8100fbe:	2302      	movs	r3, #2
 8100fc0:	e01d      	b.n	8100ffe <HAL_GPIO_Init+0x26a>
 8100fc2:	2301      	movs	r3, #1
 8100fc4:	e01b      	b.n	8100ffe <HAL_GPIO_Init+0x26a>
 8100fc6:	bf00      	nop
 8100fc8:	580000c0 	.word	0x580000c0
 8100fcc:	58024400 	.word	0x58024400
 8100fd0:	58000400 	.word	0x58000400
 8100fd4:	58020000 	.word	0x58020000
 8100fd8:	58020400 	.word	0x58020400
 8100fdc:	58020800 	.word	0x58020800
 8100fe0:	58020c00 	.word	0x58020c00
 8100fe4:	58021000 	.word	0x58021000
 8100fe8:	58021400 	.word	0x58021400
 8100fec:	58021800 	.word	0x58021800
 8100ff0:	58021c00 	.word	0x58021c00
 8100ff4:	58022000 	.word	0x58022000
 8100ff8:	58022400 	.word	0x58022400
 8100ffc:	2300      	movs	r3, #0
 8100ffe:	69fa      	ldr	r2, [r7, #28]
 8101000:	f002 0203 	and.w	r2, r2, #3
 8101004:	0092      	lsls	r2, r2, #2
 8101006:	4093      	lsls	r3, r2
 8101008:	69ba      	ldr	r2, [r7, #24]
 810100a:	4313      	orrs	r3, r2
 810100c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810100e:	4938      	ldr	r1, [pc, #224]	@ (81010f0 <HAL_GPIO_Init+0x35c>)
 8101010:	69fb      	ldr	r3, [r7, #28]
 8101012:	089b      	lsrs	r3, r3, #2
 8101014:	3302      	adds	r3, #2
 8101016:	69ba      	ldr	r2, [r7, #24]
 8101018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810101c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101020:	681b      	ldr	r3, [r3, #0]
 8101022:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101024:	693b      	ldr	r3, [r7, #16]
 8101026:	43db      	mvns	r3, r3
 8101028:	69ba      	ldr	r2, [r7, #24]
 810102a:	4013      	ands	r3, r2
 810102c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810102e:	683b      	ldr	r3, [r7, #0]
 8101030:	685b      	ldr	r3, [r3, #4]
 8101032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101036:	2b00      	cmp	r3, #0
 8101038:	d003      	beq.n	8101042 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810103a:	69ba      	ldr	r2, [r7, #24]
 810103c:	693b      	ldr	r3, [r7, #16]
 810103e:	4313      	orrs	r3, r2
 8101040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101042:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101046:	69bb      	ldr	r3, [r7, #24]
 8101048:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810104a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810104e:	685b      	ldr	r3, [r3, #4]
 8101050:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101052:	693b      	ldr	r3, [r7, #16]
 8101054:	43db      	mvns	r3, r3
 8101056:	69ba      	ldr	r2, [r7, #24]
 8101058:	4013      	ands	r3, r2
 810105a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810105c:	683b      	ldr	r3, [r7, #0]
 810105e:	685b      	ldr	r3, [r3, #4]
 8101060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101064:	2b00      	cmp	r3, #0
 8101066:	d003      	beq.n	8101070 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101068:	69ba      	ldr	r2, [r7, #24]
 810106a:	693b      	ldr	r3, [r7, #16]
 810106c:	4313      	orrs	r3, r2
 810106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101070:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101074:	69bb      	ldr	r3, [r7, #24]
 8101076:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101078:	697b      	ldr	r3, [r7, #20]
 810107a:	685b      	ldr	r3, [r3, #4]
 810107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810107e:	693b      	ldr	r3, [r7, #16]
 8101080:	43db      	mvns	r3, r3
 8101082:	69ba      	ldr	r2, [r7, #24]
 8101084:	4013      	ands	r3, r2
 8101086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101088:	683b      	ldr	r3, [r7, #0]
 810108a:	685b      	ldr	r3, [r3, #4]
 810108c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101090:	2b00      	cmp	r3, #0
 8101092:	d003      	beq.n	810109c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101094:	69ba      	ldr	r2, [r7, #24]
 8101096:	693b      	ldr	r3, [r7, #16]
 8101098:	4313      	orrs	r3, r2
 810109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810109c:	697b      	ldr	r3, [r7, #20]
 810109e:	69ba      	ldr	r2, [r7, #24]
 81010a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81010a2:	697b      	ldr	r3, [r7, #20]
 81010a4:	681b      	ldr	r3, [r3, #0]
 81010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81010a8:	693b      	ldr	r3, [r7, #16]
 81010aa:	43db      	mvns	r3, r3
 81010ac:	69ba      	ldr	r2, [r7, #24]
 81010ae:	4013      	ands	r3, r2
 81010b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81010b2:	683b      	ldr	r3, [r7, #0]
 81010b4:	685b      	ldr	r3, [r3, #4]
 81010b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81010ba:	2b00      	cmp	r3, #0
 81010bc:	d003      	beq.n	81010c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81010be:	69ba      	ldr	r2, [r7, #24]
 81010c0:	693b      	ldr	r3, [r7, #16]
 81010c2:	4313      	orrs	r3, r2
 81010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81010c6:	697b      	ldr	r3, [r7, #20]
 81010c8:	69ba      	ldr	r2, [r7, #24]
 81010ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81010cc:	69fb      	ldr	r3, [r7, #28]
 81010ce:	3301      	adds	r3, #1
 81010d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81010d2:	683b      	ldr	r3, [r7, #0]
 81010d4:	681a      	ldr	r2, [r3, #0]
 81010d6:	69fb      	ldr	r3, [r7, #28]
 81010d8:	fa22 f303 	lsr.w	r3, r2, r3
 81010dc:	2b00      	cmp	r3, #0
 81010de:	f47f ae63 	bne.w	8100da8 <HAL_GPIO_Init+0x14>
  }
}
 81010e2:	bf00      	nop
 81010e4:	bf00      	nop
 81010e6:	3724      	adds	r7, #36	@ 0x24
 81010e8:	46bd      	mov	sp, r7
 81010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ee:	4770      	bx	lr
 81010f0:	58000400 	.word	0x58000400

081010f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81010f4:	b480      	push	{r7}
 81010f6:	b083      	sub	sp, #12
 81010f8:	af00      	add	r7, sp, #0
 81010fa:	6078      	str	r0, [r7, #4]
 81010fc:	460b      	mov	r3, r1
 81010fe:	807b      	strh	r3, [r7, #2]
 8101100:	4613      	mov	r3, r2
 8101102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101104:	787b      	ldrb	r3, [r7, #1]
 8101106:	2b00      	cmp	r3, #0
 8101108:	d003      	beq.n	8101112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810110a:	887a      	ldrh	r2, [r7, #2]
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101110:	e003      	b.n	810111a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101112:	887b      	ldrh	r3, [r7, #2]
 8101114:	041a      	lsls	r2, r3, #16
 8101116:	687b      	ldr	r3, [r7, #4]
 8101118:	619a      	str	r2, [r3, #24]
}
 810111a:	bf00      	nop
 810111c:	370c      	adds	r7, #12
 810111e:	46bd      	mov	sp, r7
 8101120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101124:	4770      	bx	lr
	...

08101128 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101128:	b480      	push	{r7}
 810112a:	b083      	sub	sp, #12
 810112c:	af00      	add	r7, sp, #0
 810112e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101130:	4b05      	ldr	r3, [pc, #20]	@ (8101148 <HAL_HSEM_ActivateNotification+0x20>)
 8101132:	681a      	ldr	r2, [r3, #0]
 8101134:	4904      	ldr	r1, [pc, #16]	@ (8101148 <HAL_HSEM_ActivateNotification+0x20>)
 8101136:	687b      	ldr	r3, [r7, #4]
 8101138:	4313      	orrs	r3, r2
 810113a:	600b      	str	r3, [r1, #0]
#endif
}
 810113c:	bf00      	nop
 810113e:	370c      	adds	r7, #12
 8101140:	46bd      	mov	sp, r7
 8101142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101146:	4770      	bx	lr
 8101148:	58026510 	.word	0x58026510

0810114c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810114c:	b580      	push	{r7, lr}
 810114e:	b084      	sub	sp, #16
 8101150:	af00      	add	r7, sp, #0
 8101152:	60f8      	str	r0, [r7, #12]
 8101154:	460b      	mov	r3, r1
 8101156:	607a      	str	r2, [r7, #4]
 8101158:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810115a:	4b37      	ldr	r3, [pc, #220]	@ (8101238 <HAL_PWREx_EnterSTOPMode+0xec>)
 810115c:	681b      	ldr	r3, [r3, #0]
 810115e:	f023 0201 	bic.w	r2, r3, #1
 8101162:	4935      	ldr	r1, [pc, #212]	@ (8101238 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101164:	68fb      	ldr	r3, [r7, #12]
 8101166:	4313      	orrs	r3, r2
 8101168:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810116a:	687b      	ldr	r3, [r7, #4]
 810116c:	2b00      	cmp	r3, #0
 810116e:	d123      	bne.n	81011b8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101170:	f7ff fdfc 	bl	8100d6c <HAL_GetCurrentCPUID>
 8101174:	4603      	mov	r3, r0
 8101176:	2b03      	cmp	r3, #3
 8101178:	d158      	bne.n	810122c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810117a:	4b2f      	ldr	r3, [pc, #188]	@ (8101238 <HAL_PWREx_EnterSTOPMode+0xec>)
 810117c:	691b      	ldr	r3, [r3, #16]
 810117e:	4a2e      	ldr	r2, [pc, #184]	@ (8101238 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101180:	f023 0301 	bic.w	r3, r3, #1
 8101184:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101186:	4b2d      	ldr	r3, [pc, #180]	@ (810123c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101188:	691b      	ldr	r3, [r3, #16]
 810118a:	4a2c      	ldr	r2, [pc, #176]	@ (810123c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810118c:	f043 0304 	orr.w	r3, r3, #4
 8101190:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101192:	f3bf 8f4f 	dsb	sy
}
 8101196:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101198:	f3bf 8f6f 	isb	sy
}
 810119c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810119e:	7afb      	ldrb	r3, [r7, #11]
 81011a0:	2b01      	cmp	r3, #1
 81011a2:	d101      	bne.n	81011a8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81011a4:	bf30      	wfi
 81011a6:	e000      	b.n	81011aa <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81011a8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011aa:	4b24      	ldr	r3, [pc, #144]	@ (810123c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011ac:	691b      	ldr	r3, [r3, #16]
 81011ae:	4a23      	ldr	r2, [pc, #140]	@ (810123c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011b0:	f023 0304 	bic.w	r3, r3, #4
 81011b4:	6113      	str	r3, [r2, #16]
 81011b6:	e03c      	b.n	8101232 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81011b8:	687b      	ldr	r3, [r7, #4]
 81011ba:	2b01      	cmp	r3, #1
 81011bc:	d123      	bne.n	8101206 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81011be:	f7ff fdd5 	bl	8100d6c <HAL_GetCurrentCPUID>
 81011c2:	4603      	mov	r3, r0
 81011c4:	2b01      	cmp	r3, #1
 81011c6:	d133      	bne.n	8101230 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8101238 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011ca:	695b      	ldr	r3, [r3, #20]
 81011cc:	4a1a      	ldr	r2, [pc, #104]	@ (8101238 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011ce:	f023 0302 	bic.w	r3, r3, #2
 81011d2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011d4:	4b19      	ldr	r3, [pc, #100]	@ (810123c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011d6:	691b      	ldr	r3, [r3, #16]
 81011d8:	4a18      	ldr	r2, [pc, #96]	@ (810123c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011da:	f043 0304 	orr.w	r3, r3, #4
 81011de:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81011e0:	f3bf 8f4f 	dsb	sy
}
 81011e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81011e6:	f3bf 8f6f 	isb	sy
}
 81011ea:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81011ec:	7afb      	ldrb	r3, [r7, #11]
 81011ee:	2b01      	cmp	r3, #1
 81011f0:	d101      	bne.n	81011f6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81011f2:	bf30      	wfi
 81011f4:	e000      	b.n	81011f8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81011f6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011f8:	4b10      	ldr	r3, [pc, #64]	@ (810123c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011fa:	691b      	ldr	r3, [r3, #16]
 81011fc:	4a0f      	ldr	r2, [pc, #60]	@ (810123c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011fe:	f023 0304 	bic.w	r3, r3, #4
 8101202:	6113      	str	r3, [r2, #16]
 8101204:	e015      	b.n	8101232 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101206:	f7ff fdb1 	bl	8100d6c <HAL_GetCurrentCPUID>
 810120a:	4603      	mov	r3, r0
 810120c:	2b03      	cmp	r3, #3
 810120e:	d106      	bne.n	810121e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101210:	4b09      	ldr	r3, [pc, #36]	@ (8101238 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101212:	691b      	ldr	r3, [r3, #16]
 8101214:	4a08      	ldr	r2, [pc, #32]	@ (8101238 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101216:	f023 0304 	bic.w	r3, r3, #4
 810121a:	6113      	str	r3, [r2, #16]
 810121c:	e009      	b.n	8101232 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810121e:	4b06      	ldr	r3, [pc, #24]	@ (8101238 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101220:	695b      	ldr	r3, [r3, #20]
 8101222:	4a05      	ldr	r2, [pc, #20]	@ (8101238 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101224:	f023 0304 	bic.w	r3, r3, #4
 8101228:	6153      	str	r3, [r2, #20]
 810122a:	e002      	b.n	8101232 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810122c:	bf00      	nop
 810122e:	e000      	b.n	8101232 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101230:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101232:	3710      	adds	r7, #16
 8101234:	46bd      	mov	sp, r7
 8101236:	bd80      	pop	{r7, pc}
 8101238:	58024800 	.word	0x58024800
 810123c:	e000ed00 	.word	0xe000ed00

08101240 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101240:	b580      	push	{r7, lr}
 8101242:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101244:	f7ff fd92 	bl	8100d6c <HAL_GetCurrentCPUID>
 8101248:	4603      	mov	r3, r0
 810124a:	2b03      	cmp	r3, #3
 810124c:	d101      	bne.n	8101252 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810124e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101250:	e001      	b.n	8101256 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101252:	bf40      	sev
    __WFE ();
 8101254:	bf20      	wfe
}
 8101256:	bf00      	nop
 8101258:	bd80      	pop	{r7, pc}
	...

0810125c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810125c:	b480      	push	{r7}
 810125e:	b089      	sub	sp, #36	@ 0x24
 8101260:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101262:	4bb3      	ldr	r3, [pc, #716]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101264:	691b      	ldr	r3, [r3, #16]
 8101266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810126a:	2b18      	cmp	r3, #24
 810126c:	f200 8155 	bhi.w	810151a <HAL_RCC_GetSysClockFreq+0x2be>
 8101270:	a201      	add	r2, pc, #4	@ (adr r2, 8101278 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101276:	bf00      	nop
 8101278:	081012dd 	.word	0x081012dd
 810127c:	0810151b 	.word	0x0810151b
 8101280:	0810151b 	.word	0x0810151b
 8101284:	0810151b 	.word	0x0810151b
 8101288:	0810151b 	.word	0x0810151b
 810128c:	0810151b 	.word	0x0810151b
 8101290:	0810151b 	.word	0x0810151b
 8101294:	0810151b 	.word	0x0810151b
 8101298:	08101303 	.word	0x08101303
 810129c:	0810151b 	.word	0x0810151b
 81012a0:	0810151b 	.word	0x0810151b
 81012a4:	0810151b 	.word	0x0810151b
 81012a8:	0810151b 	.word	0x0810151b
 81012ac:	0810151b 	.word	0x0810151b
 81012b0:	0810151b 	.word	0x0810151b
 81012b4:	0810151b 	.word	0x0810151b
 81012b8:	08101309 	.word	0x08101309
 81012bc:	0810151b 	.word	0x0810151b
 81012c0:	0810151b 	.word	0x0810151b
 81012c4:	0810151b 	.word	0x0810151b
 81012c8:	0810151b 	.word	0x0810151b
 81012cc:	0810151b 	.word	0x0810151b
 81012d0:	0810151b 	.word	0x0810151b
 81012d4:	0810151b 	.word	0x0810151b
 81012d8:	0810130f 	.word	0x0810130f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81012dc:	4b94      	ldr	r3, [pc, #592]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012de:	681b      	ldr	r3, [r3, #0]
 81012e0:	f003 0320 	and.w	r3, r3, #32
 81012e4:	2b00      	cmp	r3, #0
 81012e6:	d009      	beq.n	81012fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81012e8:	4b91      	ldr	r3, [pc, #580]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012ea:	681b      	ldr	r3, [r3, #0]
 81012ec:	08db      	lsrs	r3, r3, #3
 81012ee:	f003 0303 	and.w	r3, r3, #3
 81012f2:	4a90      	ldr	r2, [pc, #576]	@ (8101534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81012f4:	fa22 f303 	lsr.w	r3, r2, r3
 81012f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81012fa:	e111      	b.n	8101520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81012fc:	4b8d      	ldr	r3, [pc, #564]	@ (8101534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81012fe:	61bb      	str	r3, [r7, #24]
      break;
 8101300:	e10e      	b.n	8101520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101302:	4b8d      	ldr	r3, [pc, #564]	@ (8101538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101304:	61bb      	str	r3, [r7, #24]
      break;
 8101306:	e10b      	b.n	8101520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101308:	4b8c      	ldr	r3, [pc, #560]	@ (810153c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810130a:	61bb      	str	r3, [r7, #24]
      break;
 810130c:	e108      	b.n	8101520 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810130e:	4b88      	ldr	r3, [pc, #544]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101312:	f003 0303 	and.w	r3, r3, #3
 8101316:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101318:	4b85      	ldr	r3, [pc, #532]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810131c:	091b      	lsrs	r3, r3, #4
 810131e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8101322:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101324:	4b82      	ldr	r3, [pc, #520]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101328:	f003 0301 	and.w	r3, r3, #1
 810132c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810132e:	4b80      	ldr	r3, [pc, #512]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101332:	08db      	lsrs	r3, r3, #3
 8101334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101338:	68fa      	ldr	r2, [r7, #12]
 810133a:	fb02 f303 	mul.w	r3, r2, r3
 810133e:	ee07 3a90 	vmov	s15, r3
 8101342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101346:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810134a:	693b      	ldr	r3, [r7, #16]
 810134c:	2b00      	cmp	r3, #0
 810134e:	f000 80e1 	beq.w	8101514 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101352:	697b      	ldr	r3, [r7, #20]
 8101354:	2b02      	cmp	r3, #2
 8101356:	f000 8083 	beq.w	8101460 <HAL_RCC_GetSysClockFreq+0x204>
 810135a:	697b      	ldr	r3, [r7, #20]
 810135c:	2b02      	cmp	r3, #2
 810135e:	f200 80a1 	bhi.w	81014a4 <HAL_RCC_GetSysClockFreq+0x248>
 8101362:	697b      	ldr	r3, [r7, #20]
 8101364:	2b00      	cmp	r3, #0
 8101366:	d003      	beq.n	8101370 <HAL_RCC_GetSysClockFreq+0x114>
 8101368:	697b      	ldr	r3, [r7, #20]
 810136a:	2b01      	cmp	r3, #1
 810136c:	d056      	beq.n	810141c <HAL_RCC_GetSysClockFreq+0x1c0>
 810136e:	e099      	b.n	81014a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101370:	4b6f      	ldr	r3, [pc, #444]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101372:	681b      	ldr	r3, [r3, #0]
 8101374:	f003 0320 	and.w	r3, r3, #32
 8101378:	2b00      	cmp	r3, #0
 810137a:	d02d      	beq.n	81013d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810137c:	4b6c      	ldr	r3, [pc, #432]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810137e:	681b      	ldr	r3, [r3, #0]
 8101380:	08db      	lsrs	r3, r3, #3
 8101382:	f003 0303 	and.w	r3, r3, #3
 8101386:	4a6b      	ldr	r2, [pc, #428]	@ (8101534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101388:	fa22 f303 	lsr.w	r3, r2, r3
 810138c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810138e:	687b      	ldr	r3, [r7, #4]
 8101390:	ee07 3a90 	vmov	s15, r3
 8101394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101398:	693b      	ldr	r3, [r7, #16]
 810139a:	ee07 3a90 	vmov	s15, r3
 810139e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013a6:	4b62      	ldr	r3, [pc, #392]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81013aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81013ae:	ee07 3a90 	vmov	s15, r3
 81013b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81013ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8101540 <HAL_RCC_GetSysClockFreq+0x2e4>
 81013be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81013c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81013c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81013ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81013ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81013d6:	e087      	b.n	81014e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81013d8:	693b      	ldr	r3, [r7, #16]
 81013da:	ee07 3a90 	vmov	s15, r3
 81013de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8101544 <HAL_RCC_GetSysClockFreq+0x2e8>
 81013e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013ea:	4b51      	ldr	r3, [pc, #324]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81013ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81013f2:	ee07 3a90 	vmov	s15, r3
 81013f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013fa:	ed97 6a02 	vldr	s12, [r7, #8]
 81013fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8101540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810140a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810140e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810141a:	e065      	b.n	81014e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810141c:	693b      	ldr	r3, [r7, #16]
 810141e:	ee07 3a90 	vmov	s15, r3
 8101422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101426:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101548 <HAL_RCC_GetSysClockFreq+0x2ec>
 810142a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810142e:	4b40      	ldr	r3, [pc, #256]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101436:	ee07 3a90 	vmov	s15, r3
 810143a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810143e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101442:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8101540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810144a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810144e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101456:	ee67 7a27 	vmul.f32	s15, s14, s15
 810145a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810145e:	e043      	b.n	81014e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101460:	693b      	ldr	r3, [r7, #16]
 8101462:	ee07 3a90 	vmov	s15, r3
 8101466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810146a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810154c <HAL_RCC_GetSysClockFreq+0x2f0>
 810146e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101472:	4b2f      	ldr	r3, [pc, #188]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810147a:	ee07 3a90 	vmov	s15, r3
 810147e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101482:	ed97 6a02 	vldr	s12, [r7, #8]
 8101486:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8101540 <HAL_RCC_GetSysClockFreq+0x2e4>
 810148a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810148e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810149e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81014a2:	e021      	b.n	81014e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81014a4:	693b      	ldr	r3, [r7, #16]
 81014a6:	ee07 3a90 	vmov	s15, r3
 81014aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101548 <HAL_RCC_GetSysClockFreq+0x2ec>
 81014b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014b6:	4b1e      	ldr	r3, [pc, #120]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81014ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014be:	ee07 3a90 	vmov	s15, r3
 81014c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014c6:	ed97 6a02 	vldr	s12, [r7, #8]
 81014ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8101540 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81014da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81014e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81014e8:	4b11      	ldr	r3, [pc, #68]	@ (8101530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81014ec:	0a5b      	lsrs	r3, r3, #9
 81014ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81014f2:	3301      	adds	r3, #1
 81014f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81014f6:	683b      	ldr	r3, [r7, #0]
 81014f8:	ee07 3a90 	vmov	s15, r3
 81014fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101500:	edd7 6a07 	vldr	s13, [r7, #28]
 8101504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810150c:	ee17 3a90 	vmov	r3, s15
 8101510:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101512:	e005      	b.n	8101520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101514:	2300      	movs	r3, #0
 8101516:	61bb      	str	r3, [r7, #24]
      break;
 8101518:	e002      	b.n	8101520 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810151a:	4b07      	ldr	r3, [pc, #28]	@ (8101538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810151c:	61bb      	str	r3, [r7, #24]
      break;
 810151e:	bf00      	nop
  }

  return sysclockfreq;
 8101520:	69bb      	ldr	r3, [r7, #24]
}
 8101522:	4618      	mov	r0, r3
 8101524:	3724      	adds	r7, #36	@ 0x24
 8101526:	46bd      	mov	sp, r7
 8101528:	f85d 7b04 	ldr.w	r7, [sp], #4
 810152c:	4770      	bx	lr
 810152e:	bf00      	nop
 8101530:	58024400 	.word	0x58024400
 8101534:	03d09000 	.word	0x03d09000
 8101538:	003d0900 	.word	0x003d0900
 810153c:	017d7840 	.word	0x017d7840
 8101540:	46000000 	.word	0x46000000
 8101544:	4c742400 	.word	0x4c742400
 8101548:	4a742400 	.word	0x4a742400
 810154c:	4bbebc20 	.word	0x4bbebc20

08101550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101550:	b580      	push	{r7, lr}
 8101552:	b082      	sub	sp, #8
 8101554:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101556:	f7ff fe81 	bl	810125c <HAL_RCC_GetSysClockFreq>
 810155a:	4602      	mov	r2, r0
 810155c:	4b11      	ldr	r3, [pc, #68]	@ (81015a4 <HAL_RCC_GetHCLKFreq+0x54>)
 810155e:	699b      	ldr	r3, [r3, #24]
 8101560:	0a1b      	lsrs	r3, r3, #8
 8101562:	f003 030f 	and.w	r3, r3, #15
 8101566:	4910      	ldr	r1, [pc, #64]	@ (81015a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8101568:	5ccb      	ldrb	r3, [r1, r3]
 810156a:	f003 031f 	and.w	r3, r3, #31
 810156e:	fa22 f303 	lsr.w	r3, r2, r3
 8101572:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101574:	4b0b      	ldr	r3, [pc, #44]	@ (81015a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8101576:	699b      	ldr	r3, [r3, #24]
 8101578:	f003 030f 	and.w	r3, r3, #15
 810157c:	4a0a      	ldr	r2, [pc, #40]	@ (81015a8 <HAL_RCC_GetHCLKFreq+0x58>)
 810157e:	5cd3      	ldrb	r3, [r2, r3]
 8101580:	f003 031f 	and.w	r3, r3, #31
 8101584:	687a      	ldr	r2, [r7, #4]
 8101586:	fa22 f303 	lsr.w	r3, r2, r3
 810158a:	4a08      	ldr	r2, [pc, #32]	@ (81015ac <HAL_RCC_GetHCLKFreq+0x5c>)
 810158c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810158e:	4b07      	ldr	r3, [pc, #28]	@ (81015ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8101590:	681b      	ldr	r3, [r3, #0]
 8101592:	4a07      	ldr	r2, [pc, #28]	@ (81015b0 <HAL_RCC_GetHCLKFreq+0x60>)
 8101594:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101596:	4b05      	ldr	r3, [pc, #20]	@ (81015ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8101598:	681b      	ldr	r3, [r3, #0]
}
 810159a:	4618      	mov	r0, r3
 810159c:	3708      	adds	r7, #8
 810159e:	46bd      	mov	sp, r7
 81015a0:	bd80      	pop	{r7, pc}
 81015a2:	bf00      	nop
 81015a4:	58024400 	.word	0x58024400
 81015a8:	08106490 	.word	0x08106490
 81015ac:	10000008 	.word	0x10000008
 81015b0:	10000004 	.word	0x10000004

081015b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81015b4:	b580      	push	{r7, lr}
 81015b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81015b8:	f7ff ffca 	bl	8101550 <HAL_RCC_GetHCLKFreq>
 81015bc:	4602      	mov	r2, r0
 81015be:	4b06      	ldr	r3, [pc, #24]	@ (81015d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 81015c0:	69db      	ldr	r3, [r3, #28]
 81015c2:	091b      	lsrs	r3, r3, #4
 81015c4:	f003 0307 	and.w	r3, r3, #7
 81015c8:	4904      	ldr	r1, [pc, #16]	@ (81015dc <HAL_RCC_GetPCLK1Freq+0x28>)
 81015ca:	5ccb      	ldrb	r3, [r1, r3]
 81015cc:	f003 031f 	and.w	r3, r3, #31
 81015d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81015d4:	4618      	mov	r0, r3
 81015d6:	bd80      	pop	{r7, pc}
 81015d8:	58024400 	.word	0x58024400
 81015dc:	08106490 	.word	0x08106490

081015e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81015e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81015e4:	b0cc      	sub	sp, #304	@ 0x130
 81015e6:	af00      	add	r7, sp, #0
 81015e8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81015ec:	2300      	movs	r3, #0
 81015ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81015f2:	2300      	movs	r3, #0
 81015f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81015f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101600:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8101604:	2500      	movs	r5, #0
 8101606:	ea54 0305 	orrs.w	r3, r4, r5
 810160a:	d049      	beq.n	81016a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810160c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101612:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8101616:	d02f      	beq.n	8101678 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8101618:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810161c:	d828      	bhi.n	8101670 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810161e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101622:	d01a      	beq.n	810165a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8101624:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101628:	d822      	bhi.n	8101670 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810162a:	2b00      	cmp	r3, #0
 810162c:	d003      	beq.n	8101636 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810162e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101632:	d007      	beq.n	8101644 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101634:	e01c      	b.n	8101670 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101636:	4bb8      	ldr	r3, [pc, #736]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810163a:	4ab7      	ldr	r2, [pc, #732]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810163c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101642:	e01a      	b.n	810167a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101648:	3308      	adds	r3, #8
 810164a:	2102      	movs	r1, #2
 810164c:	4618      	mov	r0, r3
 810164e:	f002 fba1 	bl	8103d94 <RCCEx_PLL2_Config>
 8101652:	4603      	mov	r3, r0
 8101654:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101658:	e00f      	b.n	810167a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810165a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810165e:	3328      	adds	r3, #40	@ 0x28
 8101660:	2102      	movs	r1, #2
 8101662:	4618      	mov	r0, r3
 8101664:	f002 fc48 	bl	8103ef8 <RCCEx_PLL3_Config>
 8101668:	4603      	mov	r3, r0
 810166a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810166e:	e004      	b.n	810167a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101670:	2301      	movs	r3, #1
 8101672:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101676:	e000      	b.n	810167a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8101678:	bf00      	nop
    }

    if (ret == HAL_OK)
 810167a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810167e:	2b00      	cmp	r3, #0
 8101680:	d10a      	bne.n	8101698 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101682:	4ba5      	ldr	r3, [pc, #660]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101686:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810168a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810168e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101690:	4aa1      	ldr	r2, [pc, #644]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101692:	430b      	orrs	r3, r1
 8101694:	6513      	str	r3, [r2, #80]	@ 0x50
 8101696:	e003      	b.n	81016a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101698:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810169c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81016a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81016ac:	f04f 0900 	mov.w	r9, #0
 81016b0:	ea58 0309 	orrs.w	r3, r8, r9
 81016b4:	d047      	beq.n	8101746 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81016b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81016ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81016bc:	2b04      	cmp	r3, #4
 81016be:	d82a      	bhi.n	8101716 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81016c0:	a201      	add	r2, pc, #4	@ (adr r2, 81016c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81016c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81016c6:	bf00      	nop
 81016c8:	081016dd 	.word	0x081016dd
 81016cc:	081016eb 	.word	0x081016eb
 81016d0:	08101701 	.word	0x08101701
 81016d4:	0810171f 	.word	0x0810171f
 81016d8:	0810171f 	.word	0x0810171f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81016dc:	4b8e      	ldr	r3, [pc, #568]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81016e0:	4a8d      	ldr	r2, [pc, #564]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81016e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81016e8:	e01a      	b.n	8101720 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81016ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81016ee:	3308      	adds	r3, #8
 81016f0:	2100      	movs	r1, #0
 81016f2:	4618      	mov	r0, r3
 81016f4:	f002 fb4e 	bl	8103d94 <RCCEx_PLL2_Config>
 81016f8:	4603      	mov	r3, r0
 81016fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81016fe:	e00f      	b.n	8101720 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101704:	3328      	adds	r3, #40	@ 0x28
 8101706:	2100      	movs	r1, #0
 8101708:	4618      	mov	r0, r3
 810170a:	f002 fbf5 	bl	8103ef8 <RCCEx_PLL3_Config>
 810170e:	4603      	mov	r3, r0
 8101710:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101714:	e004      	b.n	8101720 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101716:	2301      	movs	r3, #1
 8101718:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810171c:	e000      	b.n	8101720 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810171e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101720:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101724:	2b00      	cmp	r3, #0
 8101726:	d10a      	bne.n	810173e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101728:	4b7b      	ldr	r3, [pc, #492]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810172a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810172c:	f023 0107 	bic.w	r1, r3, #7
 8101730:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101736:	4a78      	ldr	r2, [pc, #480]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101738:	430b      	orrs	r3, r1
 810173a:	6513      	str	r3, [r2, #80]	@ 0x50
 810173c:	e003      	b.n	8101746 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810173e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101742:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101746:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810174e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8101752:	f04f 0b00 	mov.w	fp, #0
 8101756:	ea5a 030b 	orrs.w	r3, sl, fp
 810175a:	d04c      	beq.n	81017f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810175c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101766:	d030      	beq.n	81017ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8101768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810176c:	d829      	bhi.n	81017c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810176e:	2bc0      	cmp	r3, #192	@ 0xc0
 8101770:	d02d      	beq.n	81017ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8101772:	2bc0      	cmp	r3, #192	@ 0xc0
 8101774:	d825      	bhi.n	81017c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101776:	2b80      	cmp	r3, #128	@ 0x80
 8101778:	d018      	beq.n	81017ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810177a:	2b80      	cmp	r3, #128	@ 0x80
 810177c:	d821      	bhi.n	81017c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810177e:	2b00      	cmp	r3, #0
 8101780:	d002      	beq.n	8101788 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8101782:	2b40      	cmp	r3, #64	@ 0x40
 8101784:	d007      	beq.n	8101796 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8101786:	e01c      	b.n	81017c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101788:	4b63      	ldr	r3, [pc, #396]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810178c:	4a62      	ldr	r2, [pc, #392]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810178e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101794:	e01c      	b.n	81017d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101796:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810179a:	3308      	adds	r3, #8
 810179c:	2100      	movs	r1, #0
 810179e:	4618      	mov	r0, r3
 81017a0:	f002 faf8 	bl	8103d94 <RCCEx_PLL2_Config>
 81017a4:	4603      	mov	r3, r0
 81017a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81017aa:	e011      	b.n	81017d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81017ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81017b0:	3328      	adds	r3, #40	@ 0x28
 81017b2:	2100      	movs	r1, #0
 81017b4:	4618      	mov	r0, r3
 81017b6:	f002 fb9f 	bl	8103ef8 <RCCEx_PLL3_Config>
 81017ba:	4603      	mov	r3, r0
 81017bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81017c0:	e006      	b.n	81017d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81017c2:	2301      	movs	r3, #1
 81017c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81017c8:	e002      	b.n	81017d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81017ca:	bf00      	nop
 81017cc:	e000      	b.n	81017d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81017ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81017d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81017d4:	2b00      	cmp	r3, #0
 81017d6:	d10a      	bne.n	81017ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81017d8:	4b4f      	ldr	r3, [pc, #316]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81017dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81017e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81017e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81017e6:	4a4c      	ldr	r2, [pc, #304]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017e8:	430b      	orrs	r3, r1
 81017ea:	6513      	str	r3, [r2, #80]	@ 0x50
 81017ec:	e003      	b.n	81017f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81017ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81017f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81017f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81017fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8101802:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8101806:	2300      	movs	r3, #0
 8101808:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 810180c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8101810:	460b      	mov	r3, r1
 8101812:	4313      	orrs	r3, r2
 8101814:	d053      	beq.n	81018be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8101816:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810181a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810181e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101822:	d035      	beq.n	8101890 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8101824:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101828:	d82e      	bhi.n	8101888 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810182a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810182e:	d031      	beq.n	8101894 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8101830:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101834:	d828      	bhi.n	8101888 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101836:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810183a:	d01a      	beq.n	8101872 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810183c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101840:	d822      	bhi.n	8101888 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101842:	2b00      	cmp	r3, #0
 8101844:	d003      	beq.n	810184e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8101846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810184a:	d007      	beq.n	810185c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810184c:	e01c      	b.n	8101888 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810184e:	4b32      	ldr	r3, [pc, #200]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101852:	4a31      	ldr	r2, [pc, #196]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101858:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810185a:	e01c      	b.n	8101896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810185c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101860:	3308      	adds	r3, #8
 8101862:	2100      	movs	r1, #0
 8101864:	4618      	mov	r0, r3
 8101866:	f002 fa95 	bl	8103d94 <RCCEx_PLL2_Config>
 810186a:	4603      	mov	r3, r0
 810186c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101870:	e011      	b.n	8101896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101872:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101876:	3328      	adds	r3, #40	@ 0x28
 8101878:	2100      	movs	r1, #0
 810187a:	4618      	mov	r0, r3
 810187c:	f002 fb3c 	bl	8103ef8 <RCCEx_PLL3_Config>
 8101880:	4603      	mov	r3, r0
 8101882:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101886:	e006      	b.n	8101896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101888:	2301      	movs	r3, #1
 810188a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810188e:	e002      	b.n	8101896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101890:	bf00      	nop
 8101892:	e000      	b.n	8101896 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101896:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810189a:	2b00      	cmp	r3, #0
 810189c:	d10b      	bne.n	81018b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810189e:	4b1e      	ldr	r3, [pc, #120]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81018a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81018a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81018aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81018ae:	4a1a      	ldr	r2, [pc, #104]	@ (8101918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81018b0:	430b      	orrs	r3, r1
 81018b2:	6593      	str	r3, [r2, #88]	@ 0x58
 81018b4:	e003      	b.n	81018be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81018b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81018ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81018be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81018c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 81018ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81018ce:	2300      	movs	r3, #0
 81018d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81018d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81018d8:	460b      	mov	r3, r1
 81018da:	4313      	orrs	r3, r2
 81018dc:	d056      	beq.n	810198c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81018de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81018e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81018e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81018ea:	d038      	beq.n	810195e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81018ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81018f0:	d831      	bhi.n	8101956 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81018f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81018f6:	d034      	beq.n	8101962 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81018f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81018fc:	d82b      	bhi.n	8101956 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81018fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101902:	d01d      	beq.n	8101940 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8101904:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101908:	d825      	bhi.n	8101956 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810190a:	2b00      	cmp	r3, #0
 810190c:	d006      	beq.n	810191c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810190e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101912:	d00a      	beq.n	810192a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101914:	e01f      	b.n	8101956 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101916:	bf00      	nop
 8101918:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810191c:	4ba2      	ldr	r3, [pc, #648]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810191e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101920:	4aa1      	ldr	r2, [pc, #644]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101928:	e01c      	b.n	8101964 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810192a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810192e:	3308      	adds	r3, #8
 8101930:	2100      	movs	r1, #0
 8101932:	4618      	mov	r0, r3
 8101934:	f002 fa2e 	bl	8103d94 <RCCEx_PLL2_Config>
 8101938:	4603      	mov	r3, r0
 810193a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810193e:	e011      	b.n	8101964 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101944:	3328      	adds	r3, #40	@ 0x28
 8101946:	2100      	movs	r1, #0
 8101948:	4618      	mov	r0, r3
 810194a:	f002 fad5 	bl	8103ef8 <RCCEx_PLL3_Config>
 810194e:	4603      	mov	r3, r0
 8101950:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101954:	e006      	b.n	8101964 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101956:	2301      	movs	r3, #1
 8101958:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810195c:	e002      	b.n	8101964 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810195e:	bf00      	nop
 8101960:	e000      	b.n	8101964 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101964:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101968:	2b00      	cmp	r3, #0
 810196a:	d10b      	bne.n	8101984 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810196c:	4b8e      	ldr	r3, [pc, #568]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810196e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101970:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8101974:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101978:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810197c:	4a8a      	ldr	r2, [pc, #552]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810197e:	430b      	orrs	r3, r1
 8101980:	6593      	str	r3, [r2, #88]	@ 0x58
 8101982:	e003      	b.n	810198c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101984:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101988:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810198c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101994:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8101998:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810199c:	2300      	movs	r3, #0
 810199e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81019a2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81019a6:	460b      	mov	r3, r1
 81019a8:	4313      	orrs	r3, r2
 81019aa:	d03a      	beq.n	8101a22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81019ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81019b2:	2b30      	cmp	r3, #48	@ 0x30
 81019b4:	d01f      	beq.n	81019f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 81019b6:	2b30      	cmp	r3, #48	@ 0x30
 81019b8:	d819      	bhi.n	81019ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81019ba:	2b20      	cmp	r3, #32
 81019bc:	d00c      	beq.n	81019d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81019be:	2b20      	cmp	r3, #32
 81019c0:	d815      	bhi.n	81019ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81019c2:	2b00      	cmp	r3, #0
 81019c4:	d019      	beq.n	81019fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81019c6:	2b10      	cmp	r3, #16
 81019c8:	d111      	bne.n	81019ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81019ca:	4b77      	ldr	r3, [pc, #476]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81019cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81019ce:	4a76      	ldr	r2, [pc, #472]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81019d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81019d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81019d6:	e011      	b.n	81019fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81019d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81019dc:	3308      	adds	r3, #8
 81019de:	2102      	movs	r1, #2
 81019e0:	4618      	mov	r0, r3
 81019e2:	f002 f9d7 	bl	8103d94 <RCCEx_PLL2_Config>
 81019e6:	4603      	mov	r3, r0
 81019e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81019ec:	e006      	b.n	81019fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81019ee:	2301      	movs	r3, #1
 81019f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81019f4:	e002      	b.n	81019fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81019f6:	bf00      	nop
 81019f8:	e000      	b.n	81019fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81019fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81019fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101a00:	2b00      	cmp	r3, #0
 8101a02:	d10a      	bne.n	8101a1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101a04:	4b68      	ldr	r3, [pc, #416]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101a08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8101a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101a12:	4a65      	ldr	r2, [pc, #404]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a14:	430b      	orrs	r3, r1
 8101a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101a18:	e003      	b.n	8101a22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101a1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101a22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8101a2e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8101a32:	2300      	movs	r3, #0
 8101a34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8101a38:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8101a3c:	460b      	mov	r3, r1
 8101a3e:	4313      	orrs	r3, r2
 8101a40:	d051      	beq.n	8101ae6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8101a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101a48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101a4c:	d035      	beq.n	8101aba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8101a4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101a52:	d82e      	bhi.n	8101ab2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101a54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101a58:	d031      	beq.n	8101abe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8101a5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101a5e:	d828      	bhi.n	8101ab2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101a64:	d01a      	beq.n	8101a9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8101a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101a6a:	d822      	bhi.n	8101ab2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101a6c:	2b00      	cmp	r3, #0
 8101a6e:	d003      	beq.n	8101a78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8101a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8101a74:	d007      	beq.n	8101a86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8101a76:	e01c      	b.n	8101ab2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101a78:	4b4b      	ldr	r3, [pc, #300]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101a84:	e01c      	b.n	8101ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101a86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101a8a:	3308      	adds	r3, #8
 8101a8c:	2100      	movs	r1, #0
 8101a8e:	4618      	mov	r0, r3
 8101a90:	f002 f980 	bl	8103d94 <RCCEx_PLL2_Config>
 8101a94:	4603      	mov	r3, r0
 8101a96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101a9a:	e011      	b.n	8101ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101aa0:	3328      	adds	r3, #40	@ 0x28
 8101aa2:	2100      	movs	r1, #0
 8101aa4:	4618      	mov	r0, r3
 8101aa6:	f002 fa27 	bl	8103ef8 <RCCEx_PLL3_Config>
 8101aaa:	4603      	mov	r3, r0
 8101aac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101ab0:	e006      	b.n	8101ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101ab2:	2301      	movs	r3, #1
 8101ab4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101ab8:	e002      	b.n	8101ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101aba:	bf00      	nop
 8101abc:	e000      	b.n	8101ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101ac0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101ac4:	2b00      	cmp	r3, #0
 8101ac6:	d10a      	bne.n	8101ade <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101ac8:	4b37      	ldr	r3, [pc, #220]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101acc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8101ad0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101ad4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101ad6:	4a34      	ldr	r2, [pc, #208]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ad8:	430b      	orrs	r3, r1
 8101ada:	6513      	str	r3, [r2, #80]	@ 0x50
 8101adc:	e003      	b.n	8101ae6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ade:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101ae2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101aee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8101af2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8101af6:	2300      	movs	r3, #0
 8101af8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8101afc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8101b00:	460b      	mov	r3, r1
 8101b02:	4313      	orrs	r3, r2
 8101b04:	d056      	beq.n	8101bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8101b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101b0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101b10:	d033      	beq.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101b12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101b16:	d82c      	bhi.n	8101b72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101b18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101b1c:	d02f      	beq.n	8101b7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8101b1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101b22:	d826      	bhi.n	8101b72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101b24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101b28:	d02b      	beq.n	8101b82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8101b2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101b2e:	d820      	bhi.n	8101b72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101b34:	d012      	beq.n	8101b5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8101b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101b3a:	d81a      	bhi.n	8101b72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101b3c:	2b00      	cmp	r3, #0
 8101b3e:	d022      	beq.n	8101b86 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8101b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101b44:	d115      	bne.n	8101b72 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101b4a:	3308      	adds	r3, #8
 8101b4c:	2101      	movs	r1, #1
 8101b4e:	4618      	mov	r0, r3
 8101b50:	f002 f920 	bl	8103d94 <RCCEx_PLL2_Config>
 8101b54:	4603      	mov	r3, r0
 8101b56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101b5a:	e015      	b.n	8101b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101b60:	3328      	adds	r3, #40	@ 0x28
 8101b62:	2101      	movs	r1, #1
 8101b64:	4618      	mov	r0, r3
 8101b66:	f002 f9c7 	bl	8103ef8 <RCCEx_PLL3_Config>
 8101b6a:	4603      	mov	r3, r0
 8101b6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101b70:	e00a      	b.n	8101b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101b72:	2301      	movs	r3, #1
 8101b74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101b78:	e006      	b.n	8101b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b7a:	bf00      	nop
 8101b7c:	e004      	b.n	8101b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b7e:	bf00      	nop
 8101b80:	e002      	b.n	8101b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b82:	bf00      	nop
 8101b84:	e000      	b.n	8101b88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101b88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101b8c:	2b00      	cmp	r3, #0
 8101b8e:	d10d      	bne.n	8101bac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101b90:	4b05      	ldr	r3, [pc, #20]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101b94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8101b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101b9e:	4a02      	ldr	r2, [pc, #8]	@ (8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ba0:	430b      	orrs	r3, r1
 8101ba2:	6513      	str	r3, [r2, #80]	@ 0x50
 8101ba4:	e006      	b.n	8101bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8101ba6:	bf00      	nop
 8101ba8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101bac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101bb0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bbc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8101bc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8101bc4:	2300      	movs	r3, #0
 8101bc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8101bca:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8101bce:	460b      	mov	r3, r1
 8101bd0:	4313      	orrs	r3, r2
 8101bd2:	d055      	beq.n	8101c80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8101bd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101bd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101be0:	d033      	beq.n	8101c4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8101be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101be6:	d82c      	bhi.n	8101c42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101bec:	d02f      	beq.n	8101c4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8101bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101bf2:	d826      	bhi.n	8101c42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101bf4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101bf8:	d02b      	beq.n	8101c52 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8101bfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101bfe:	d820      	bhi.n	8101c42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101c04:	d012      	beq.n	8101c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8101c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101c0a:	d81a      	bhi.n	8101c42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101c0c:	2b00      	cmp	r3, #0
 8101c0e:	d022      	beq.n	8101c56 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8101c10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101c14:	d115      	bne.n	8101c42 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101c1a:	3308      	adds	r3, #8
 8101c1c:	2101      	movs	r1, #1
 8101c1e:	4618      	mov	r0, r3
 8101c20:	f002 f8b8 	bl	8103d94 <RCCEx_PLL2_Config>
 8101c24:	4603      	mov	r3, r0
 8101c26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101c2a:	e015      	b.n	8101c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101c2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101c30:	3328      	adds	r3, #40	@ 0x28
 8101c32:	2101      	movs	r1, #1
 8101c34:	4618      	mov	r0, r3
 8101c36:	f002 f95f 	bl	8103ef8 <RCCEx_PLL3_Config>
 8101c3a:	4603      	mov	r3, r0
 8101c3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101c40:	e00a      	b.n	8101c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8101c42:	2301      	movs	r3, #1
 8101c44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101c48:	e006      	b.n	8101c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101c4a:	bf00      	nop
 8101c4c:	e004      	b.n	8101c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101c4e:	bf00      	nop
 8101c50:	e002      	b.n	8101c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101c52:	bf00      	nop
 8101c54:	e000      	b.n	8101c58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101c58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101c5c:	2b00      	cmp	r3, #0
 8101c5e:	d10b      	bne.n	8101c78 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101c60:	4bb7      	ldr	r3, [pc, #732]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101c64:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8101c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101c6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101c70:	4ab3      	ldr	r2, [pc, #716]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101c72:	430b      	orrs	r3, r1
 8101c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8101c76:	e003      	b.n	8101c80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101c7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8101c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c88:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8101c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8101c90:	2300      	movs	r3, #0
 8101c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8101c96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8101c9a:	460b      	mov	r3, r1
 8101c9c:	4313      	orrs	r3, r2
 8101c9e:	d02a      	beq.n	8101cf6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8101ca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101ca6:	2b00      	cmp	r3, #0
 8101ca8:	d011      	beq.n	8101cce <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8101caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101cae:	d10a      	bne.n	8101cc6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101cb4:	3308      	adds	r3, #8
 8101cb6:	2101      	movs	r1, #1
 8101cb8:	4618      	mov	r0, r3
 8101cba:	f002 f86b 	bl	8103d94 <RCCEx_PLL2_Config>
 8101cbe:	4603      	mov	r3, r0
 8101cc0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8101cc4:	e004      	b.n	8101cd0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101cc6:	2301      	movs	r3, #1
 8101cc8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101ccc:	e000      	b.n	8101cd0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8101cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101cd0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101cd4:	2b00      	cmp	r3, #0
 8101cd6:	d10a      	bne.n	8101cee <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8101cd8:	4b99      	ldr	r3, [pc, #612]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101cdc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8101ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101ce6:	4a96      	ldr	r2, [pc, #600]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101ce8:	430b      	orrs	r3, r1
 8101cea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101cec:	e003      	b.n	8101cf6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101cee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101cf2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101cfe:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8101d02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8101d06:	2300      	movs	r3, #0
 8101d08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8101d0c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8101d10:	460b      	mov	r3, r1
 8101d12:	4313      	orrs	r3, r2
 8101d14:	d037      	beq.n	8101d86 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8101d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8101d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101d20:	d00e      	beq.n	8101d40 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8101d22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101d26:	d816      	bhi.n	8101d56 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8101d28:	2b00      	cmp	r3, #0
 8101d2a:	d018      	beq.n	8101d5e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8101d2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101d30:	d111      	bne.n	8101d56 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101d32:	4b83      	ldr	r3, [pc, #524]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101d36:	4a82      	ldr	r2, [pc, #520]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101d3e:	e00f      	b.n	8101d60 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101d44:	3308      	adds	r3, #8
 8101d46:	2101      	movs	r1, #1
 8101d48:	4618      	mov	r0, r3
 8101d4a:	f002 f823 	bl	8103d94 <RCCEx_PLL2_Config>
 8101d4e:	4603      	mov	r3, r0
 8101d50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101d54:	e004      	b.n	8101d60 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101d56:	2301      	movs	r3, #1
 8101d58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101d5c:	e000      	b.n	8101d60 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8101d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101d64:	2b00      	cmp	r3, #0
 8101d66:	d10a      	bne.n	8101d7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101d68:	4b75      	ldr	r3, [pc, #468]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101d6c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8101d70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8101d76:	4a72      	ldr	r2, [pc, #456]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101d78:	430b      	orrs	r3, r1
 8101d7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8101d7c:	e003      	b.n	8101d86 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101d82:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d8e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8101d92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8101d96:	2300      	movs	r3, #0
 8101d98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8101d9c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8101da0:	460b      	mov	r3, r1
 8101da2:	4313      	orrs	r3, r2
 8101da4:	d03a      	beq.n	8101e1c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8101da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101dac:	2b03      	cmp	r3, #3
 8101dae:	d81d      	bhi.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8101db0:	a201      	add	r2, pc, #4	@ (adr r2, 8101db8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8101db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101db6:	bf00      	nop
 8101db8:	08101df5 	.word	0x08101df5
 8101dbc:	08101dc9 	.word	0x08101dc9
 8101dc0:	08101dd7 	.word	0x08101dd7
 8101dc4:	08101df5 	.word	0x08101df5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101dc8:	4b5d      	ldr	r3, [pc, #372]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101dcc:	4a5c      	ldr	r2, [pc, #368]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101dd4:	e00f      	b.n	8101df6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101dd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101dda:	3308      	adds	r3, #8
 8101ddc:	2102      	movs	r1, #2
 8101dde:	4618      	mov	r0, r3
 8101de0:	f001 ffd8 	bl	8103d94 <RCCEx_PLL2_Config>
 8101de4:	4603      	mov	r3, r0
 8101de6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101dea:	e004      	b.n	8101df6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101dec:	2301      	movs	r3, #1
 8101dee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101df2:	e000      	b.n	8101df6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8101df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101df6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101dfa:	2b00      	cmp	r3, #0
 8101dfc:	d10a      	bne.n	8101e14 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101dfe:	4b50      	ldr	r3, [pc, #320]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101e02:	f023 0103 	bic.w	r1, r3, #3
 8101e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101e0c:	4a4c      	ldr	r2, [pc, #304]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101e0e:	430b      	orrs	r3, r1
 8101e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101e12:	e003      	b.n	8101e1c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101e18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e24:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8101e28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8101e2c:	2300      	movs	r3, #0
 8101e2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8101e32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8101e36:	460b      	mov	r3, r1
 8101e38:	4313      	orrs	r3, r2
 8101e3a:	f000 80a0 	beq.w	8101f7e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101e3e:	4b41      	ldr	r3, [pc, #260]	@ (8101f44 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8101e40:	681b      	ldr	r3, [r3, #0]
 8101e42:	4a40      	ldr	r2, [pc, #256]	@ (8101f44 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8101e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101e48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101e4a:	f7fe fe7b 	bl	8100b44 <HAL_GetTick>
 8101e4e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101e52:	e00b      	b.n	8101e6c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101e54:	f7fe fe76 	bl	8100b44 <HAL_GetTick>
 8101e58:	4602      	mov	r2, r0
 8101e5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8101e5e:	1ad3      	subs	r3, r2, r3
 8101e60:	2b64      	cmp	r3, #100	@ 0x64
 8101e62:	d903      	bls.n	8101e6c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8101e64:	2303      	movs	r3, #3
 8101e66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101e6a:	e005      	b.n	8101e78 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101e6c:	4b35      	ldr	r3, [pc, #212]	@ (8101f44 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8101e6e:	681b      	ldr	r3, [r3, #0]
 8101e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101e74:	2b00      	cmp	r3, #0
 8101e76:	d0ed      	beq.n	8101e54 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8101e78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101e7c:	2b00      	cmp	r3, #0
 8101e7e:	d17a      	bne.n	8101f76 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101e80:	4b2f      	ldr	r3, [pc, #188]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101e82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8101e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101e88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8101e8c:	4053      	eors	r3, r2
 8101e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8101e92:	2b00      	cmp	r3, #0
 8101e94:	d015      	beq.n	8101ec2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101e96:	4b2a      	ldr	r3, [pc, #168]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8101e9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101ea2:	4b27      	ldr	r3, [pc, #156]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101ea6:	4a26      	ldr	r2, [pc, #152]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101eac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101eae:	4b24      	ldr	r3, [pc, #144]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101eb2:	4a23      	ldr	r2, [pc, #140]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8101eb8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101eba:	4a21      	ldr	r2, [pc, #132]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101ebc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8101ec0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101ec6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8101eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101ece:	d118      	bne.n	8101f02 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101ed0:	f7fe fe38 	bl	8100b44 <HAL_GetTick>
 8101ed4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101ed8:	e00d      	b.n	8101ef6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101eda:	f7fe fe33 	bl	8100b44 <HAL_GetTick>
 8101ede:	4602      	mov	r2, r0
 8101ee0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8101ee4:	1ad2      	subs	r2, r2, r3
 8101ee6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8101eea:	429a      	cmp	r2, r3
 8101eec:	d903      	bls.n	8101ef6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8101eee:	2303      	movs	r3, #3
 8101ef0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8101ef4:	e005      	b.n	8101f02 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101ef6:	4b12      	ldr	r3, [pc, #72]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101efa:	f003 0302 	and.w	r3, r3, #2
 8101efe:	2b00      	cmp	r3, #0
 8101f00:	d0eb      	beq.n	8101eda <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8101f02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101f06:	2b00      	cmp	r3, #0
 8101f08:	d130      	bne.n	8101f6c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101f0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8101f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8101f16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8101f1a:	d115      	bne.n	8101f48 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8101f1c:	4b08      	ldr	r3, [pc, #32]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f1e:	691b      	ldr	r3, [r3, #16]
 8101f20:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8101f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101f28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8101f2c:	091b      	lsrs	r3, r3, #4
 8101f2e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8101f32:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8101f36:	4a02      	ldr	r2, [pc, #8]	@ (8101f40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f38:	430b      	orrs	r3, r1
 8101f3a:	6113      	str	r3, [r2, #16]
 8101f3c:	e00a      	b.n	8101f54 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8101f3e:	bf00      	nop
 8101f40:	58024400 	.word	0x58024400
 8101f44:	58024800 	.word	0x58024800
 8101f48:	4bd4      	ldr	r3, [pc, #848]	@ (810229c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8101f4a:	691b      	ldr	r3, [r3, #16]
 8101f4c:	4ad3      	ldr	r2, [pc, #844]	@ (810229c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8101f4e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8101f52:	6113      	str	r3, [r2, #16]
 8101f54:	4bd1      	ldr	r3, [pc, #836]	@ (810229c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8101f56:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8101f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101f5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8101f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101f64:	4acd      	ldr	r2, [pc, #820]	@ (810229c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8101f66:	430b      	orrs	r3, r1
 8101f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8101f6a:	e008      	b.n	8101f7e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101f6c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101f70:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8101f74:	e003      	b.n	8101f7e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101f7a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101f7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f86:	f002 0301 	and.w	r3, r2, #1
 8101f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8101f8e:	2300      	movs	r3, #0
 8101f90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8101f94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8101f98:	460b      	mov	r3, r1
 8101f9a:	4313      	orrs	r3, r2
 8101f9c:	f000 808b 	beq.w	81020b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8101fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8101fa8:	2b28      	cmp	r3, #40	@ 0x28
 8101faa:	d86b      	bhi.n	8102084 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8101fac:	a201      	add	r2, pc, #4	@ (adr r2, 8101fb4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8101fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101fb2:	bf00      	nop
 8101fb4:	0810208d 	.word	0x0810208d
 8101fb8:	08102085 	.word	0x08102085
 8101fbc:	08102085 	.word	0x08102085
 8101fc0:	08102085 	.word	0x08102085
 8101fc4:	08102085 	.word	0x08102085
 8101fc8:	08102085 	.word	0x08102085
 8101fcc:	08102085 	.word	0x08102085
 8101fd0:	08102085 	.word	0x08102085
 8101fd4:	08102059 	.word	0x08102059
 8101fd8:	08102085 	.word	0x08102085
 8101fdc:	08102085 	.word	0x08102085
 8101fe0:	08102085 	.word	0x08102085
 8101fe4:	08102085 	.word	0x08102085
 8101fe8:	08102085 	.word	0x08102085
 8101fec:	08102085 	.word	0x08102085
 8101ff0:	08102085 	.word	0x08102085
 8101ff4:	0810206f 	.word	0x0810206f
 8101ff8:	08102085 	.word	0x08102085
 8101ffc:	08102085 	.word	0x08102085
 8102000:	08102085 	.word	0x08102085
 8102004:	08102085 	.word	0x08102085
 8102008:	08102085 	.word	0x08102085
 810200c:	08102085 	.word	0x08102085
 8102010:	08102085 	.word	0x08102085
 8102014:	0810208d 	.word	0x0810208d
 8102018:	08102085 	.word	0x08102085
 810201c:	08102085 	.word	0x08102085
 8102020:	08102085 	.word	0x08102085
 8102024:	08102085 	.word	0x08102085
 8102028:	08102085 	.word	0x08102085
 810202c:	08102085 	.word	0x08102085
 8102030:	08102085 	.word	0x08102085
 8102034:	0810208d 	.word	0x0810208d
 8102038:	08102085 	.word	0x08102085
 810203c:	08102085 	.word	0x08102085
 8102040:	08102085 	.word	0x08102085
 8102044:	08102085 	.word	0x08102085
 8102048:	08102085 	.word	0x08102085
 810204c:	08102085 	.word	0x08102085
 8102050:	08102085 	.word	0x08102085
 8102054:	0810208d 	.word	0x0810208d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102058:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810205c:	3308      	adds	r3, #8
 810205e:	2101      	movs	r1, #1
 8102060:	4618      	mov	r0, r3
 8102062:	f001 fe97 	bl	8103d94 <RCCEx_PLL2_Config>
 8102066:	4603      	mov	r3, r0
 8102068:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810206c:	e00f      	b.n	810208e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810206e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102072:	3328      	adds	r3, #40	@ 0x28
 8102074:	2101      	movs	r1, #1
 8102076:	4618      	mov	r0, r3
 8102078:	f001 ff3e 	bl	8103ef8 <RCCEx_PLL3_Config>
 810207c:	4603      	mov	r3, r0
 810207e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102082:	e004      	b.n	810208e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102084:	2301      	movs	r3, #1
 8102086:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810208a:	e000      	b.n	810208e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810208c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810208e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102092:	2b00      	cmp	r3, #0
 8102094:	d10b      	bne.n	81020ae <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102096:	4b81      	ldr	r3, [pc, #516]	@ (810229c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810209a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810209e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81020a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81020a6:	4a7d      	ldr	r2, [pc, #500]	@ (810229c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81020a8:	430b      	orrs	r3, r1
 81020aa:	6553      	str	r3, [r2, #84]	@ 0x54
 81020ac:	e003      	b.n	81020b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81020b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81020b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020be:	f002 0302 	and.w	r3, r2, #2
 81020c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81020c6:	2300      	movs	r3, #0
 81020c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81020cc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81020d0:	460b      	mov	r3, r1
 81020d2:	4313      	orrs	r3, r2
 81020d4:	d042      	beq.n	810215c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81020d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81020da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81020dc:	2b05      	cmp	r3, #5
 81020de:	d825      	bhi.n	810212c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 81020e0:	a201      	add	r2, pc, #4	@ (adr r2, 81020e8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 81020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81020e6:	bf00      	nop
 81020e8:	08102135 	.word	0x08102135
 81020ec:	08102101 	.word	0x08102101
 81020f0:	08102117 	.word	0x08102117
 81020f4:	08102135 	.word	0x08102135
 81020f8:	08102135 	.word	0x08102135
 81020fc:	08102135 	.word	0x08102135
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102104:	3308      	adds	r3, #8
 8102106:	2101      	movs	r1, #1
 8102108:	4618      	mov	r0, r3
 810210a:	f001 fe43 	bl	8103d94 <RCCEx_PLL2_Config>
 810210e:	4603      	mov	r3, r0
 8102110:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102114:	e00f      	b.n	8102136 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102116:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810211a:	3328      	adds	r3, #40	@ 0x28
 810211c:	2101      	movs	r1, #1
 810211e:	4618      	mov	r0, r3
 8102120:	f001 feea 	bl	8103ef8 <RCCEx_PLL3_Config>
 8102124:	4603      	mov	r3, r0
 8102126:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810212a:	e004      	b.n	8102136 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810212c:	2301      	movs	r3, #1
 810212e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102132:	e000      	b.n	8102136 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8102134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102136:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810213a:	2b00      	cmp	r3, #0
 810213c:	d10a      	bne.n	8102154 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810213e:	4b57      	ldr	r3, [pc, #348]	@ (810229c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102142:	f023 0107 	bic.w	r1, r3, #7
 8102146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810214a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810214c:	4a53      	ldr	r2, [pc, #332]	@ (810229c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810214e:	430b      	orrs	r3, r1
 8102150:	6553      	str	r3, [r2, #84]	@ 0x54
 8102152:	e003      	b.n	810215c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102154:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102158:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810215c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102164:	f002 0304 	and.w	r3, r2, #4
 8102168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810216c:	2300      	movs	r3, #0
 810216e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8102172:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8102176:	460b      	mov	r3, r1
 8102178:	4313      	orrs	r3, r2
 810217a:	d044      	beq.n	8102206 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810217c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102180:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102184:	2b05      	cmp	r3, #5
 8102186:	d825      	bhi.n	81021d4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8102188:	a201      	add	r2, pc, #4	@ (adr r2, 8102190 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810218a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810218e:	bf00      	nop
 8102190:	081021dd 	.word	0x081021dd
 8102194:	081021a9 	.word	0x081021a9
 8102198:	081021bf 	.word	0x081021bf
 810219c:	081021dd 	.word	0x081021dd
 81021a0:	081021dd 	.word	0x081021dd
 81021a4:	081021dd 	.word	0x081021dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81021a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81021ac:	3308      	adds	r3, #8
 81021ae:	2101      	movs	r1, #1
 81021b0:	4618      	mov	r0, r3
 81021b2:	f001 fdef 	bl	8103d94 <RCCEx_PLL2_Config>
 81021b6:	4603      	mov	r3, r0
 81021b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81021bc:	e00f      	b.n	81021de <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81021be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81021c2:	3328      	adds	r3, #40	@ 0x28
 81021c4:	2101      	movs	r1, #1
 81021c6:	4618      	mov	r0, r3
 81021c8:	f001 fe96 	bl	8103ef8 <RCCEx_PLL3_Config>
 81021cc:	4603      	mov	r3, r0
 81021ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81021d2:	e004      	b.n	81021de <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81021d4:	2301      	movs	r3, #1
 81021d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81021da:	e000      	b.n	81021de <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 81021dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81021de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81021e2:	2b00      	cmp	r3, #0
 81021e4:	d10b      	bne.n	81021fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81021e6:	4b2d      	ldr	r3, [pc, #180]	@ (810229c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81021ea:	f023 0107 	bic.w	r1, r3, #7
 81021ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81021f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81021f6:	4a29      	ldr	r2, [pc, #164]	@ (810229c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81021f8:	430b      	orrs	r3, r1
 81021fa:	6593      	str	r3, [r2, #88]	@ 0x58
 81021fc:	e003      	b.n	8102206 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102202:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102206:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810220e:	f002 0320 	and.w	r3, r2, #32
 8102212:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8102216:	2300      	movs	r3, #0
 8102218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810221c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8102220:	460b      	mov	r3, r1
 8102222:	4313      	orrs	r3, r2
 8102224:	d057      	beq.n	81022d6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102226:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810222e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102232:	d035      	beq.n	81022a0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8102234:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102238:	d82c      	bhi.n	8102294 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810223a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810223e:	d031      	beq.n	81022a4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8102240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102244:	d826      	bhi.n	8102294 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102246:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810224a:	d02d      	beq.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 810224c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102250:	d820      	bhi.n	8102294 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102256:	d012      	beq.n	810227e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8102258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810225c:	d81a      	bhi.n	8102294 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810225e:	2b00      	cmp	r3, #0
 8102260:	d024      	beq.n	81022ac <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8102262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102266:	d115      	bne.n	8102294 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102268:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810226c:	3308      	adds	r3, #8
 810226e:	2100      	movs	r1, #0
 8102270:	4618      	mov	r0, r3
 8102272:	f001 fd8f 	bl	8103d94 <RCCEx_PLL2_Config>
 8102276:	4603      	mov	r3, r0
 8102278:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810227c:	e017      	b.n	81022ae <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810227e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102282:	3328      	adds	r3, #40	@ 0x28
 8102284:	2102      	movs	r1, #2
 8102286:	4618      	mov	r0, r3
 8102288:	f001 fe36 	bl	8103ef8 <RCCEx_PLL3_Config>
 810228c:	4603      	mov	r3, r0
 810228e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102292:	e00c      	b.n	81022ae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102294:	2301      	movs	r3, #1
 8102296:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810229a:	e008      	b.n	81022ae <HAL_RCCEx_PeriphCLKConfig+0xcce>
 810229c:	58024400 	.word	0x58024400
        break;
 81022a0:	bf00      	nop
 81022a2:	e004      	b.n	81022ae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81022a4:	bf00      	nop
 81022a6:	e002      	b.n	81022ae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81022a8:	bf00      	nop
 81022aa:	e000      	b.n	81022ae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81022ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 81022ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81022b2:	2b00      	cmp	r3, #0
 81022b4:	d10b      	bne.n	81022ce <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81022b6:	4bc2      	ldr	r3, [pc, #776]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81022ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81022be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81022c6:	4abe      	ldr	r2, [pc, #760]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81022c8:	430b      	orrs	r3, r1
 81022ca:	6553      	str	r3, [r2, #84]	@ 0x54
 81022cc:	e003      	b.n	81022d6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81022d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81022d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81022de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81022e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81022e6:	2300      	movs	r3, #0
 81022e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81022ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81022f0:	460b      	mov	r3, r1
 81022f2:	4313      	orrs	r3, r2
 81022f4:	d055      	beq.n	81023a2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81022f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81022fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81022fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102302:	d033      	beq.n	810236c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8102304:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102308:	d82c      	bhi.n	8102364 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810230a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810230e:	d02f      	beq.n	8102370 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8102310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102314:	d826      	bhi.n	8102364 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8102316:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810231a:	d02b      	beq.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 810231c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102320:	d820      	bhi.n	8102364 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8102322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102326:	d012      	beq.n	810234e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8102328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810232c:	d81a      	bhi.n	8102364 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810232e:	2b00      	cmp	r3, #0
 8102330:	d022      	beq.n	8102378 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8102332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8102336:	d115      	bne.n	8102364 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810233c:	3308      	adds	r3, #8
 810233e:	2100      	movs	r1, #0
 8102340:	4618      	mov	r0, r3
 8102342:	f001 fd27 	bl	8103d94 <RCCEx_PLL2_Config>
 8102346:	4603      	mov	r3, r0
 8102348:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810234c:	e015      	b.n	810237a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810234e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102352:	3328      	adds	r3, #40	@ 0x28
 8102354:	2102      	movs	r1, #2
 8102356:	4618      	mov	r0, r3
 8102358:	f001 fdce 	bl	8103ef8 <RCCEx_PLL3_Config>
 810235c:	4603      	mov	r3, r0
 810235e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102362:	e00a      	b.n	810237a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102364:	2301      	movs	r3, #1
 8102366:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810236a:	e006      	b.n	810237a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810236c:	bf00      	nop
 810236e:	e004      	b.n	810237a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102370:	bf00      	nop
 8102372:	e002      	b.n	810237a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102374:	bf00      	nop
 8102376:	e000      	b.n	810237a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102378:	bf00      	nop
    }

    if (ret == HAL_OK)
 810237a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810237e:	2b00      	cmp	r3, #0
 8102380:	d10b      	bne.n	810239a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102382:	4b8f      	ldr	r3, [pc, #572]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102386:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810238a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810238e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102392:	4a8b      	ldr	r2, [pc, #556]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102394:	430b      	orrs	r3, r1
 8102396:	6593      	str	r3, [r2, #88]	@ 0x58
 8102398:	e003      	b.n	81023a2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810239a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810239e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81023a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023aa:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81023ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81023b2:	2300      	movs	r3, #0
 81023b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81023b8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81023bc:	460b      	mov	r3, r1
 81023be:	4313      	orrs	r3, r2
 81023c0:	d055      	beq.n	810246e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81023c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81023c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81023ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81023ce:	d033      	beq.n	8102438 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 81023d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81023d4:	d82c      	bhi.n	8102430 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81023d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81023da:	d02f      	beq.n	810243c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 81023dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81023e0:	d826      	bhi.n	8102430 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81023e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81023e6:	d02b      	beq.n	8102440 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 81023e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81023ec:	d820      	bhi.n	8102430 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81023ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81023f2:	d012      	beq.n	810241a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 81023f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81023f8:	d81a      	bhi.n	8102430 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81023fa:	2b00      	cmp	r3, #0
 81023fc:	d022      	beq.n	8102444 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 81023fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102402:	d115      	bne.n	8102430 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102404:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102408:	3308      	adds	r3, #8
 810240a:	2100      	movs	r1, #0
 810240c:	4618      	mov	r0, r3
 810240e:	f001 fcc1 	bl	8103d94 <RCCEx_PLL2_Config>
 8102412:	4603      	mov	r3, r0
 8102414:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102418:	e015      	b.n	8102446 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810241a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810241e:	3328      	adds	r3, #40	@ 0x28
 8102420:	2102      	movs	r1, #2
 8102422:	4618      	mov	r0, r3
 8102424:	f001 fd68 	bl	8103ef8 <RCCEx_PLL3_Config>
 8102428:	4603      	mov	r3, r0
 810242a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810242e:	e00a      	b.n	8102446 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102430:	2301      	movs	r3, #1
 8102432:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102436:	e006      	b.n	8102446 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102438:	bf00      	nop
 810243a:	e004      	b.n	8102446 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810243c:	bf00      	nop
 810243e:	e002      	b.n	8102446 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102440:	bf00      	nop
 8102442:	e000      	b.n	8102446 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102446:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810244a:	2b00      	cmp	r3, #0
 810244c:	d10b      	bne.n	8102466 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810244e:	4b5c      	ldr	r3, [pc, #368]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102452:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8102456:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810245a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810245e:	4a58      	ldr	r2, [pc, #352]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102460:	430b      	orrs	r3, r1
 8102462:	6593      	str	r3, [r2, #88]	@ 0x58
 8102464:	e003      	b.n	810246e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102466:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810246a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810246e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102476:	f002 0308 	and.w	r3, r2, #8
 810247a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810247e:	2300      	movs	r3, #0
 8102480:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8102484:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8102488:	460b      	mov	r3, r1
 810248a:	4313      	orrs	r3, r2
 810248c:	d01e      	beq.n	81024cc <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810248e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810249a:	d10c      	bne.n	81024b6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810249c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81024a0:	3328      	adds	r3, #40	@ 0x28
 81024a2:	2102      	movs	r1, #2
 81024a4:	4618      	mov	r0, r3
 81024a6:	f001 fd27 	bl	8103ef8 <RCCEx_PLL3_Config>
 81024aa:	4603      	mov	r3, r0
 81024ac:	2b00      	cmp	r3, #0
 81024ae:	d002      	beq.n	81024b6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 81024b0:	2301      	movs	r3, #1
 81024b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81024b6:	4b42      	ldr	r3, [pc, #264]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81024b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81024ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81024be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81024c6:	4a3e      	ldr	r2, [pc, #248]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81024c8:	430b      	orrs	r3, r1
 81024ca:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81024cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024d4:	f002 0310 	and.w	r3, r2, #16
 81024d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81024dc:	2300      	movs	r3, #0
 81024de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81024e2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81024e6:	460b      	mov	r3, r1
 81024e8:	4313      	orrs	r3, r2
 81024ea:	d01e      	beq.n	810252a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81024ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81024f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81024f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81024f8:	d10c      	bne.n	8102514 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81024fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81024fe:	3328      	adds	r3, #40	@ 0x28
 8102500:	2102      	movs	r1, #2
 8102502:	4618      	mov	r0, r3
 8102504:	f001 fcf8 	bl	8103ef8 <RCCEx_PLL3_Config>
 8102508:	4603      	mov	r3, r0
 810250a:	2b00      	cmp	r3, #0
 810250c:	d002      	beq.n	8102514 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810250e:	2301      	movs	r3, #1
 8102510:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102514:	4b2a      	ldr	r3, [pc, #168]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102518:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810251c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102520:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102524:	4a26      	ldr	r2, [pc, #152]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102526:	430b      	orrs	r3, r1
 8102528:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810252a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102532:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8102536:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810253a:	2300      	movs	r3, #0
 810253c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8102540:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8102544:	460b      	mov	r3, r1
 8102546:	4313      	orrs	r3, r2
 8102548:	d040      	beq.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810254a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810254e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102556:	d022      	beq.n	810259e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8102558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810255c:	d81b      	bhi.n	8102596 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810255e:	2b00      	cmp	r3, #0
 8102560:	d003      	beq.n	810256a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8102562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102566:	d00b      	beq.n	8102580 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8102568:	e015      	b.n	8102596 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810256a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810256e:	3308      	adds	r3, #8
 8102570:	2100      	movs	r1, #0
 8102572:	4618      	mov	r0, r3
 8102574:	f001 fc0e 	bl	8103d94 <RCCEx_PLL2_Config>
 8102578:	4603      	mov	r3, r0
 810257a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810257e:	e00f      	b.n	81025a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102580:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102584:	3328      	adds	r3, #40	@ 0x28
 8102586:	2102      	movs	r1, #2
 8102588:	4618      	mov	r0, r3
 810258a:	f001 fcb5 	bl	8103ef8 <RCCEx_PLL3_Config>
 810258e:	4603      	mov	r3, r0
 8102590:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102594:	e004      	b.n	81025a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102596:	2301      	movs	r3, #1
 8102598:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810259c:	e000      	b.n	81025a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810259e:	bf00      	nop
    }

    if (ret == HAL_OK)
 81025a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81025a4:	2b00      	cmp	r3, #0
 81025a6:	d10d      	bne.n	81025c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81025a8:	4b05      	ldr	r3, [pc, #20]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81025ac:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81025b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81025b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81025b8:	4a01      	ldr	r2, [pc, #4]	@ (81025c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81025ba:	430b      	orrs	r3, r1
 81025bc:	6593      	str	r3, [r2, #88]	@ 0x58
 81025be:	e005      	b.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 81025c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81025c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81025cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025d4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81025d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 81025da:	2300      	movs	r3, #0
 81025dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81025de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81025e2:	460b      	mov	r3, r1
 81025e4:	4313      	orrs	r3, r2
 81025e6:	d03b      	beq.n	8102660 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81025e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81025ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81025f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81025f4:	d01f      	beq.n	8102636 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 81025f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81025fa:	d818      	bhi.n	810262e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 81025fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102600:	d003      	beq.n	810260a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8102602:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102606:	d007      	beq.n	8102618 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8102608:	e011      	b.n	810262e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810260a:	4b64      	ldr	r3, [pc, #400]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810260c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810260e:	4a63      	ldr	r2, [pc, #396]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8102616:	e00f      	b.n	8102638 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102618:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810261c:	3328      	adds	r3, #40	@ 0x28
 810261e:	2101      	movs	r1, #1
 8102620:	4618      	mov	r0, r3
 8102622:	f001 fc69 	bl	8103ef8 <RCCEx_PLL3_Config>
 8102626:	4603      	mov	r3, r0
 8102628:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 810262c:	e004      	b.n	8102638 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810262e:	2301      	movs	r3, #1
 8102630:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102634:	e000      	b.n	8102638 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8102636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102638:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810263c:	2b00      	cmp	r3, #0
 810263e:	d10b      	bne.n	8102658 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102640:	4b56      	ldr	r3, [pc, #344]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102644:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102648:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810264c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102650:	4a52      	ldr	r2, [pc, #328]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102652:	430b      	orrs	r3, r1
 8102654:	6553      	str	r3, [r2, #84]	@ 0x54
 8102656:	e003      	b.n	8102660 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102658:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810265c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102668:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810266c:	673b      	str	r3, [r7, #112]	@ 0x70
 810266e:	2300      	movs	r3, #0
 8102670:	677b      	str	r3, [r7, #116]	@ 0x74
 8102672:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8102676:	460b      	mov	r3, r1
 8102678:	4313      	orrs	r3, r2
 810267a:	d031      	beq.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810267c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102682:	2b00      	cmp	r3, #0
 8102684:	d003      	beq.n	810268e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8102686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810268a:	d007      	beq.n	810269c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 810268c:	e011      	b.n	81026b2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810268e:	4b43      	ldr	r3, [pc, #268]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102692:	4a42      	ldr	r2, [pc, #264]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102698:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810269a:	e00e      	b.n	81026ba <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810269c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81026a0:	3308      	adds	r3, #8
 81026a2:	2102      	movs	r1, #2
 81026a4:	4618      	mov	r0, r3
 81026a6:	f001 fb75 	bl	8103d94 <RCCEx_PLL2_Config>
 81026aa:	4603      	mov	r3, r0
 81026ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81026b0:	e003      	b.n	81026ba <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 81026b2:	2301      	movs	r3, #1
 81026b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81026b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81026be:	2b00      	cmp	r3, #0
 81026c0:	d10a      	bne.n	81026d8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81026c2:	4b36      	ldr	r3, [pc, #216]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81026c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81026c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81026ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81026ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81026d0:	4a32      	ldr	r2, [pc, #200]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81026d2:	430b      	orrs	r3, r1
 81026d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81026d6:	e003      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81026dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81026e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81026ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 81026ee:	2300      	movs	r3, #0
 81026f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81026f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81026f6:	460b      	mov	r3, r1
 81026f8:	4313      	orrs	r3, r2
 81026fa:	d00c      	beq.n	8102716 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81026fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102700:	3328      	adds	r3, #40	@ 0x28
 8102702:	2102      	movs	r1, #2
 8102704:	4618      	mov	r0, r3
 8102706:	f001 fbf7 	bl	8103ef8 <RCCEx_PLL3_Config>
 810270a:	4603      	mov	r3, r0
 810270c:	2b00      	cmp	r3, #0
 810270e:	d002      	beq.n	8102716 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8102710:	2301      	movs	r3, #1
 8102712:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810271e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8102722:	663b      	str	r3, [r7, #96]	@ 0x60
 8102724:	2300      	movs	r3, #0
 8102726:	667b      	str	r3, [r7, #100]	@ 0x64
 8102728:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810272c:	460b      	mov	r3, r1
 810272e:	4313      	orrs	r3, r2
 8102730:	d03a      	beq.n	81027a8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8102732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810273a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810273e:	d018      	beq.n	8102772 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8102740:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102744:	d811      	bhi.n	810276a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8102746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810274a:	d014      	beq.n	8102776 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 810274c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102750:	d80b      	bhi.n	810276a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8102752:	2b00      	cmp	r3, #0
 8102754:	d011      	beq.n	810277a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8102756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810275a:	d106      	bne.n	810276a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810275c:	4b0f      	ldr	r3, [pc, #60]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102760:	4a0e      	ldr	r2, [pc, #56]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8102768:	e008      	b.n	810277c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810276a:	2301      	movs	r3, #1
 810276c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102770:	e004      	b.n	810277c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8102772:	bf00      	nop
 8102774:	e002      	b.n	810277c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8102776:	bf00      	nop
 8102778:	e000      	b.n	810277c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810277a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810277c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102780:	2b00      	cmp	r3, #0
 8102782:	d10d      	bne.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102784:	4b05      	ldr	r3, [pc, #20]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102788:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810278c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102794:	4a01      	ldr	r2, [pc, #4]	@ (810279c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102796:	430b      	orrs	r3, r1
 8102798:	6553      	str	r3, [r2, #84]	@ 0x54
 810279a:	e005      	b.n	81027a8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 810279c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81027a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81027a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81027b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 81027b6:	2300      	movs	r3, #0
 81027b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81027ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81027be:	460b      	mov	r3, r1
 81027c0:	4313      	orrs	r3, r2
 81027c2:	d009      	beq.n	81027d8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81027c4:	4baa      	ldr	r3, [pc, #680]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81027c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81027c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81027cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81027d2:	4aa7      	ldr	r2, [pc, #668]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81027d4:	430b      	orrs	r3, r1
 81027d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81027d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81027e4:	653b      	str	r3, [r7, #80]	@ 0x50
 81027e6:	2300      	movs	r3, #0
 81027e8:	657b      	str	r3, [r7, #84]	@ 0x54
 81027ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81027ee:	460b      	mov	r3, r1
 81027f0:	4313      	orrs	r3, r2
 81027f2:	d00a      	beq.n	810280a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81027f4:	4b9e      	ldr	r3, [pc, #632]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81027f6:	691b      	ldr	r3, [r3, #16]
 81027f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81027fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102800:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102804:	4a9a      	ldr	r2, [pc, #616]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102806:	430b      	orrs	r3, r1
 8102808:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810280a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102812:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8102816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8102818:	2300      	movs	r3, #0
 810281a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810281c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8102820:	460b      	mov	r3, r1
 8102822:	4313      	orrs	r3, r2
 8102824:	d009      	beq.n	810283a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102826:	4b92      	ldr	r3, [pc, #584]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810282a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810282e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102834:	4a8e      	ldr	r2, [pc, #568]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102836:	430b      	orrs	r3, r1
 8102838:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810283a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102842:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8102846:	643b      	str	r3, [r7, #64]	@ 0x40
 8102848:	2300      	movs	r3, #0
 810284a:	647b      	str	r3, [r7, #68]	@ 0x44
 810284c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8102850:	460b      	mov	r3, r1
 8102852:	4313      	orrs	r3, r2
 8102854:	d00e      	beq.n	8102874 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102856:	4b86      	ldr	r3, [pc, #536]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102858:	691b      	ldr	r3, [r3, #16]
 810285a:	4a85      	ldr	r2, [pc, #532]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810285c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8102860:	6113      	str	r3, [r2, #16]
 8102862:	4b83      	ldr	r3, [pc, #524]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102864:	6919      	ldr	r1, [r3, #16]
 8102866:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810286a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810286e:	4a80      	ldr	r2, [pc, #512]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102870:	430b      	orrs	r3, r1
 8102872:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102874:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102878:	e9d3 2300 	ldrd	r2, r3, [r3]
 810287c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8102880:	63bb      	str	r3, [r7, #56]	@ 0x38
 8102882:	2300      	movs	r3, #0
 8102884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102886:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810288a:	460b      	mov	r3, r1
 810288c:	4313      	orrs	r3, r2
 810288e:	d009      	beq.n	81028a4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102890:	4b77      	ldr	r3, [pc, #476]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102894:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810289c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810289e:	4a74      	ldr	r2, [pc, #464]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81028a0:	430b      	orrs	r3, r1
 81028a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81028a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028ac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81028b0:	633b      	str	r3, [r7, #48]	@ 0x30
 81028b2:	2300      	movs	r3, #0
 81028b4:	637b      	str	r3, [r7, #52]	@ 0x34
 81028b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81028ba:	460b      	mov	r3, r1
 81028bc:	4313      	orrs	r3, r2
 81028be:	d00a      	beq.n	81028d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81028c0:	4b6b      	ldr	r3, [pc, #428]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81028c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81028c4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81028c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81028d0:	4a67      	ldr	r2, [pc, #412]	@ (8102a70 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81028d2:	430b      	orrs	r3, r1
 81028d4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81028d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028de:	2100      	movs	r1, #0
 81028e0:	62b9      	str	r1, [r7, #40]	@ 0x28
 81028e2:	f003 0301 	and.w	r3, r3, #1
 81028e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81028e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81028ec:	460b      	mov	r3, r1
 81028ee:	4313      	orrs	r3, r2
 81028f0:	d011      	beq.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81028f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028f6:	3308      	adds	r3, #8
 81028f8:	2100      	movs	r1, #0
 81028fa:	4618      	mov	r0, r3
 81028fc:	f001 fa4a 	bl	8103d94 <RCCEx_PLL2_Config>
 8102900:	4603      	mov	r3, r0
 8102902:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8102906:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810290a:	2b00      	cmp	r3, #0
 810290c:	d003      	beq.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810290e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102912:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8102916:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810291e:	2100      	movs	r1, #0
 8102920:	6239      	str	r1, [r7, #32]
 8102922:	f003 0302 	and.w	r3, r3, #2
 8102926:	627b      	str	r3, [r7, #36]	@ 0x24
 8102928:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810292c:	460b      	mov	r3, r1
 810292e:	4313      	orrs	r3, r2
 8102930:	d011      	beq.n	8102956 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102936:	3308      	adds	r3, #8
 8102938:	2101      	movs	r1, #1
 810293a:	4618      	mov	r0, r3
 810293c:	f001 fa2a 	bl	8103d94 <RCCEx_PLL2_Config>
 8102940:	4603      	mov	r3, r0
 8102942:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8102946:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810294a:	2b00      	cmp	r3, #0
 810294c:	d003      	beq.n	8102956 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810294e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102952:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8102956:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810295e:	2100      	movs	r1, #0
 8102960:	61b9      	str	r1, [r7, #24]
 8102962:	f003 0304 	and.w	r3, r3, #4
 8102966:	61fb      	str	r3, [r7, #28]
 8102968:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810296c:	460b      	mov	r3, r1
 810296e:	4313      	orrs	r3, r2
 8102970:	d011      	beq.n	8102996 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102972:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102976:	3308      	adds	r3, #8
 8102978:	2102      	movs	r1, #2
 810297a:	4618      	mov	r0, r3
 810297c:	f001 fa0a 	bl	8103d94 <RCCEx_PLL2_Config>
 8102980:	4603      	mov	r3, r0
 8102982:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8102986:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810298a:	2b00      	cmp	r3, #0
 810298c:	d003      	beq.n	8102996 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810298e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102992:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8102996:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810299e:	2100      	movs	r1, #0
 81029a0:	6139      	str	r1, [r7, #16]
 81029a2:	f003 0308 	and.w	r3, r3, #8
 81029a6:	617b      	str	r3, [r7, #20]
 81029a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81029ac:	460b      	mov	r3, r1
 81029ae:	4313      	orrs	r3, r2
 81029b0:	d011      	beq.n	81029d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81029b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81029b6:	3328      	adds	r3, #40	@ 0x28
 81029b8:	2100      	movs	r1, #0
 81029ba:	4618      	mov	r0, r3
 81029bc:	f001 fa9c 	bl	8103ef8 <RCCEx_PLL3_Config>
 81029c0:	4603      	mov	r3, r0
 81029c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 81029c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81029ca:	2b00      	cmp	r3, #0
 81029cc:	d003      	beq.n	81029d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81029d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81029d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029de:	2100      	movs	r1, #0
 81029e0:	60b9      	str	r1, [r7, #8]
 81029e2:	f003 0310 	and.w	r3, r3, #16
 81029e6:	60fb      	str	r3, [r7, #12]
 81029e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81029ec:	460b      	mov	r3, r1
 81029ee:	4313      	orrs	r3, r2
 81029f0:	d011      	beq.n	8102a16 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81029f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81029f6:	3328      	adds	r3, #40	@ 0x28
 81029f8:	2101      	movs	r1, #1
 81029fa:	4618      	mov	r0, r3
 81029fc:	f001 fa7c 	bl	8103ef8 <RCCEx_PLL3_Config>
 8102a00:	4603      	mov	r3, r0
 8102a02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8102a06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102a0a:	2b00      	cmp	r3, #0
 8102a0c:	d003      	beq.n	8102a16 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102a12:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8102a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a1e:	2100      	movs	r1, #0
 8102a20:	6039      	str	r1, [r7, #0]
 8102a22:	f003 0320 	and.w	r3, r3, #32
 8102a26:	607b      	str	r3, [r7, #4]
 8102a28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8102a2c:	460b      	mov	r3, r1
 8102a2e:	4313      	orrs	r3, r2
 8102a30:	d011      	beq.n	8102a56 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a36:	3328      	adds	r3, #40	@ 0x28
 8102a38:	2102      	movs	r1, #2
 8102a3a:	4618      	mov	r0, r3
 8102a3c:	f001 fa5c 	bl	8103ef8 <RCCEx_PLL3_Config>
 8102a40:	4603      	mov	r3, r0
 8102a42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8102a46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102a4a:	2b00      	cmp	r3, #0
 8102a4c:	d003      	beq.n	8102a56 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102a52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8102a56:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8102a5a:	2b00      	cmp	r3, #0
 8102a5c:	d101      	bne.n	8102a62 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8102a5e:	2300      	movs	r3, #0
 8102a60:	e000      	b.n	8102a64 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8102a62:	2301      	movs	r3, #1
}
 8102a64:	4618      	mov	r0, r3
 8102a66:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8102a6a:	46bd      	mov	sp, r7
 8102a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8102a70:	58024400 	.word	0x58024400

08102a74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8102a74:	b580      	push	{r7, lr}
 8102a76:	b090      	sub	sp, #64	@ 0x40
 8102a78:	af00      	add	r7, sp, #0
 8102a7a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8102a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8102a82:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8102a86:	430b      	orrs	r3, r1
 8102a88:	f040 8094 	bne.w	8102bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8102a8c:	4b9e      	ldr	r3, [pc, #632]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102a90:	f003 0307 	and.w	r3, r3, #7
 8102a94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8102a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102a98:	2b04      	cmp	r3, #4
 8102a9a:	f200 8087 	bhi.w	8102bac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8102a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8102aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8102aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102aa4:	08102ab9 	.word	0x08102ab9
 8102aa8:	08102ae1 	.word	0x08102ae1
 8102aac:	08102b09 	.word	0x08102b09
 8102ab0:	08102ba5 	.word	0x08102ba5
 8102ab4:	08102b31 	.word	0x08102b31
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8102ab8:	4b93      	ldr	r3, [pc, #588]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102ac4:	d108      	bne.n	8102ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8102ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102aca:	4618      	mov	r0, r3
 8102acc:	f001 f810 	bl	8103af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8102ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102ad4:	f000 bd45 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102ad8:	2300      	movs	r3, #0
 8102ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102adc:	f000 bd41 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8102ae0:	4b89      	ldr	r3, [pc, #548]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102ae2:	681b      	ldr	r3, [r3, #0]
 8102ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8102ae8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8102aec:	d108      	bne.n	8102b00 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8102aee:	f107 0318 	add.w	r3, r7, #24
 8102af2:	4618      	mov	r0, r3
 8102af4:	f000 fd54 	bl	81035a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8102af8:	69bb      	ldr	r3, [r7, #24]
 8102afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102afc:	f000 bd31 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102b00:	2300      	movs	r3, #0
 8102b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102b04:	f000 bd2d 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8102b08:	4b7f      	ldr	r3, [pc, #508]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102b0a:	681b      	ldr	r3, [r3, #0]
 8102b0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102b14:	d108      	bne.n	8102b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8102b16:	f107 030c 	add.w	r3, r7, #12
 8102b1a:	4618      	mov	r0, r3
 8102b1c:	f000 fe94 	bl	8103848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8102b20:	68fb      	ldr	r3, [r7, #12]
 8102b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102b24:	f000 bd1d 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102b28:	2300      	movs	r3, #0
 8102b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102b2c:	f000 bd19 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8102b30:	4b75      	ldr	r3, [pc, #468]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102b34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8102b38:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8102b3a:	4b73      	ldr	r3, [pc, #460]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	f003 0304 	and.w	r3, r3, #4
 8102b42:	2b04      	cmp	r3, #4
 8102b44:	d10c      	bne.n	8102b60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8102b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102b48:	2b00      	cmp	r3, #0
 8102b4a:	d109      	bne.n	8102b60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102b4c:	4b6e      	ldr	r3, [pc, #440]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	08db      	lsrs	r3, r3, #3
 8102b52:	f003 0303 	and.w	r3, r3, #3
 8102b56:	4a6d      	ldr	r2, [pc, #436]	@ (8102d0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8102b58:	fa22 f303 	lsr.w	r3, r2, r3
 8102b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102b5e:	e01f      	b.n	8102ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8102b60:	4b69      	ldr	r3, [pc, #420]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102b62:	681b      	ldr	r3, [r3, #0]
 8102b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102b6c:	d106      	bne.n	8102b7c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8102b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102b74:	d102      	bne.n	8102b7c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8102b76:	4b66      	ldr	r3, [pc, #408]	@ (8102d10 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8102b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102b7a:	e011      	b.n	8102ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8102b7c:	4b62      	ldr	r3, [pc, #392]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102b84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102b88:	d106      	bne.n	8102b98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8102b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102b90:	d102      	bne.n	8102b98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8102b92:	4b60      	ldr	r3, [pc, #384]	@ (8102d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8102b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102b96:	e003      	b.n	8102ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8102b98:	2300      	movs	r3, #0
 8102b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8102b9c:	f000 bce1 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8102ba0:	f000 bcdf 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8102ba4:	4b5c      	ldr	r3, [pc, #368]	@ (8102d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8102ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102ba8:	f000 bcdb 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8102bac:	2300      	movs	r3, #0
 8102bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102bb0:	f000 bcd7 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8102bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8102bb8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8102bbc:	430b      	orrs	r3, r1
 8102bbe:	f040 80ad 	bne.w	8102d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8102bc2:	4b51      	ldr	r3, [pc, #324]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102bc6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8102bca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8102bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102bd2:	d056      	beq.n	8102c82 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8102bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102bda:	f200 8090 	bhi.w	8102cfe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8102bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102be0:	2bc0      	cmp	r3, #192	@ 0xc0
 8102be2:	f000 8088 	beq.w	8102cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8102be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102be8:	2bc0      	cmp	r3, #192	@ 0xc0
 8102bea:	f200 8088 	bhi.w	8102cfe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8102bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102bf0:	2b80      	cmp	r3, #128	@ 0x80
 8102bf2:	d032      	beq.n	8102c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8102bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102bf6:	2b80      	cmp	r3, #128	@ 0x80
 8102bf8:	f200 8081 	bhi.w	8102cfe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8102bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102bfe:	2b00      	cmp	r3, #0
 8102c00:	d003      	beq.n	8102c0a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8102c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c04:	2b40      	cmp	r3, #64	@ 0x40
 8102c06:	d014      	beq.n	8102c32 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8102c08:	e079      	b.n	8102cfe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8102c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102c12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102c16:	d108      	bne.n	8102c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8102c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102c1c:	4618      	mov	r0, r3
 8102c1e:	f000 ff67 	bl	8103af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8102c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102c26:	f000 bc9c 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102c2a:	2300      	movs	r3, #0
 8102c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102c2e:	f000 bc98 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8102c32:	4b35      	ldr	r3, [pc, #212]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102c34:	681b      	ldr	r3, [r3, #0]
 8102c36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8102c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8102c3e:	d108      	bne.n	8102c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8102c40:	f107 0318 	add.w	r3, r7, #24
 8102c44:	4618      	mov	r0, r3
 8102c46:	f000 fcab 	bl	81035a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8102c4a:	69bb      	ldr	r3, [r7, #24]
 8102c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102c4e:	f000 bc88 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102c52:	2300      	movs	r3, #0
 8102c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102c56:	f000 bc84 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8102c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102c5c:	681b      	ldr	r3, [r3, #0]
 8102c5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102c66:	d108      	bne.n	8102c7a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8102c68:	f107 030c 	add.w	r3, r7, #12
 8102c6c:	4618      	mov	r0, r3
 8102c6e:	f000 fdeb 	bl	8103848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8102c72:	68fb      	ldr	r3, [r7, #12]
 8102c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102c76:	f000 bc74 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102c7a:	2300      	movs	r3, #0
 8102c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102c7e:	f000 bc70 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8102c82:	4b21      	ldr	r3, [pc, #132]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102c86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8102c8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8102c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102c8e:	681b      	ldr	r3, [r3, #0]
 8102c90:	f003 0304 	and.w	r3, r3, #4
 8102c94:	2b04      	cmp	r3, #4
 8102c96:	d10c      	bne.n	8102cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8102c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102c9a:	2b00      	cmp	r3, #0
 8102c9c:	d109      	bne.n	8102cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102ca0:	681b      	ldr	r3, [r3, #0]
 8102ca2:	08db      	lsrs	r3, r3, #3
 8102ca4:	f003 0303 	and.w	r3, r3, #3
 8102ca8:	4a18      	ldr	r2, [pc, #96]	@ (8102d0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8102caa:	fa22 f303 	lsr.w	r3, r2, r3
 8102cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102cb0:	e01f      	b.n	8102cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8102cb2:	4b15      	ldr	r3, [pc, #84]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102cb4:	681b      	ldr	r3, [r3, #0]
 8102cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102cbe:	d106      	bne.n	8102cce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8102cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102cc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102cc6:	d102      	bne.n	8102cce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8102cc8:	4b11      	ldr	r3, [pc, #68]	@ (8102d10 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8102cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102ccc:	e011      	b.n	8102cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8102cce:	4b0e      	ldr	r3, [pc, #56]	@ (8102d08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102cd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102cda:	d106      	bne.n	8102cea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8102cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102ce2:	d102      	bne.n	8102cea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8102ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8102d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8102ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102ce8:	e003      	b.n	8102cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8102cea:	2300      	movs	r3, #0
 8102cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8102cee:	f000 bc38 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8102cf2:	f000 bc36 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8102cf6:	4b08      	ldr	r3, [pc, #32]	@ (8102d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8102cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102cfa:	f000 bc32 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8102cfe:	2300      	movs	r3, #0
 8102d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102d02:	f000 bc2e 	b.w	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8102d06:	bf00      	nop
 8102d08:	58024400 	.word	0x58024400
 8102d0c:	03d09000 	.word	0x03d09000
 8102d10:	003d0900 	.word	0x003d0900
 8102d14:	017d7840 	.word	0x017d7840
 8102d18:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8102d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8102d20:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8102d24:	430b      	orrs	r3, r1
 8102d26:	f040 809c 	bne.w	8102e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8102d2a:	4b9e      	ldr	r3, [pc, #632]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102d2e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8102d32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8102d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102d36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102d3a:	d054      	beq.n	8102de6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8102d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102d3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102d42:	f200 808b 	bhi.w	8102e5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8102d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102d48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102d4c:	f000 8083 	beq.w	8102e56 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8102d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102d52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102d56:	f200 8081 	bhi.w	8102e5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8102d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102d60:	d02f      	beq.n	8102dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8102d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102d68:	d878      	bhi.n	8102e5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8102d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102d6c:	2b00      	cmp	r3, #0
 8102d6e:	d004      	beq.n	8102d7a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8102d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102d72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102d76:	d012      	beq.n	8102d9e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8102d78:	e070      	b.n	8102e5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8102d7a:	4b8a      	ldr	r3, [pc, #552]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102d7c:	681b      	ldr	r3, [r3, #0]
 8102d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102d82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102d86:	d107      	bne.n	8102d98 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8102d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102d8c:	4618      	mov	r0, r3
 8102d8e:	f000 feaf 	bl	8103af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8102d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102d96:	e3e4      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102d98:	2300      	movs	r3, #0
 8102d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102d9c:	e3e1      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8102d9e:	4b81      	ldr	r3, [pc, #516]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102da0:	681b      	ldr	r3, [r3, #0]
 8102da2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8102da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8102daa:	d107      	bne.n	8102dbc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8102dac:	f107 0318 	add.w	r3, r7, #24
 8102db0:	4618      	mov	r0, r3
 8102db2:	f000 fbf5 	bl	81035a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8102db6:	69bb      	ldr	r3, [r7, #24]
 8102db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102dba:	e3d2      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102dbc:	2300      	movs	r3, #0
 8102dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102dc0:	e3cf      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8102dc2:	4b78      	ldr	r3, [pc, #480]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102dce:	d107      	bne.n	8102de0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8102dd0:	f107 030c 	add.w	r3, r7, #12
 8102dd4:	4618      	mov	r0, r3
 8102dd6:	f000 fd37 	bl	8103848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8102dda:	68fb      	ldr	r3, [r7, #12]
 8102ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102dde:	e3c0      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102de0:	2300      	movs	r3, #0
 8102de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102de4:	e3bd      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8102de6:	4b6f      	ldr	r3, [pc, #444]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102dea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8102dee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8102df0:	4b6c      	ldr	r3, [pc, #432]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102df2:	681b      	ldr	r3, [r3, #0]
 8102df4:	f003 0304 	and.w	r3, r3, #4
 8102df8:	2b04      	cmp	r3, #4
 8102dfa:	d10c      	bne.n	8102e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8102dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102dfe:	2b00      	cmp	r3, #0
 8102e00:	d109      	bne.n	8102e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102e02:	4b68      	ldr	r3, [pc, #416]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102e04:	681b      	ldr	r3, [r3, #0]
 8102e06:	08db      	lsrs	r3, r3, #3
 8102e08:	f003 0303 	and.w	r3, r3, #3
 8102e0c:	4a66      	ldr	r2, [pc, #408]	@ (8102fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8102e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8102e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102e14:	e01e      	b.n	8102e54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8102e16:	4b63      	ldr	r3, [pc, #396]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102e22:	d106      	bne.n	8102e32 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8102e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102e26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102e2a:	d102      	bne.n	8102e32 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8102e2c:	4b5f      	ldr	r3, [pc, #380]	@ (8102fac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8102e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102e30:	e010      	b.n	8102e54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8102e32:	4b5c      	ldr	r3, [pc, #368]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102e34:	681b      	ldr	r3, [r3, #0]
 8102e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102e3e:	d106      	bne.n	8102e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8102e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102e42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102e46:	d102      	bne.n	8102e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8102e48:	4b59      	ldr	r3, [pc, #356]	@ (8102fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8102e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102e4c:	e002      	b.n	8102e54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8102e4e:	2300      	movs	r3, #0
 8102e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8102e52:	e386      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8102e54:	e385      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8102e56:	4b57      	ldr	r3, [pc, #348]	@ (8102fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8102e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102e5a:	e382      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8102e5c:	2300      	movs	r3, #0
 8102e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102e60:	e37f      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8102e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8102e66:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8102e6a:	430b      	orrs	r3, r1
 8102e6c:	f040 80a7 	bne.w	8102fbe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8102e70:	4b4c      	ldr	r3, [pc, #304]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102e74:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8102e78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8102e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102e80:	d055      	beq.n	8102f2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8102e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102e88:	f200 8096 	bhi.w	8102fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8102e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102e92:	f000 8084 	beq.w	8102f9e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8102e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102e9c:	f200 808c 	bhi.w	8102fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8102ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102ea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102ea6:	d030      	beq.n	8102f0a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8102ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102eaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102eae:	f200 8083 	bhi.w	8102fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8102eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102eb4:	2b00      	cmp	r3, #0
 8102eb6:	d004      	beq.n	8102ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8102eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102ebe:	d012      	beq.n	8102ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8102ec0:	e07a      	b.n	8102fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8102ec2:	4b38      	ldr	r3, [pc, #224]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102ec4:	681b      	ldr	r3, [r3, #0]
 8102ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102eca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102ece:	d107      	bne.n	8102ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8102ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102ed4:	4618      	mov	r0, r3
 8102ed6:	f000 fe0b 	bl	8103af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8102eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102ede:	e340      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102ee0:	2300      	movs	r3, #0
 8102ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102ee4:	e33d      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8102ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8102eee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8102ef2:	d107      	bne.n	8102f04 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8102ef4:	f107 0318 	add.w	r3, r7, #24
 8102ef8:	4618      	mov	r0, r3
 8102efa:	f000 fb51 	bl	81035a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8102efe:	69bb      	ldr	r3, [r7, #24]
 8102f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102f02:	e32e      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102f04:	2300      	movs	r3, #0
 8102f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102f08:	e32b      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8102f0a:	4b26      	ldr	r3, [pc, #152]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102f0c:	681b      	ldr	r3, [r3, #0]
 8102f0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102f16:	d107      	bne.n	8102f28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8102f18:	f107 030c 	add.w	r3, r7, #12
 8102f1c:	4618      	mov	r0, r3
 8102f1e:	f000 fc93 	bl	8103848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8102f22:	68fb      	ldr	r3, [r7, #12]
 8102f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8102f26:	e31c      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8102f28:	2300      	movs	r3, #0
 8102f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102f2c:	e319      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8102f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102f32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8102f36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8102f38:	4b1a      	ldr	r3, [pc, #104]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	f003 0304 	and.w	r3, r3, #4
 8102f40:	2b04      	cmp	r3, #4
 8102f42:	d10c      	bne.n	8102f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8102f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102f46:	2b00      	cmp	r3, #0
 8102f48:	d109      	bne.n	8102f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102f4a:	4b16      	ldr	r3, [pc, #88]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102f4c:	681b      	ldr	r3, [r3, #0]
 8102f4e:	08db      	lsrs	r3, r3, #3
 8102f50:	f003 0303 	and.w	r3, r3, #3
 8102f54:	4a14      	ldr	r2, [pc, #80]	@ (8102fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8102f56:	fa22 f303 	lsr.w	r3, r2, r3
 8102f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102f5c:	e01e      	b.n	8102f9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8102f5e:	4b11      	ldr	r3, [pc, #68]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102f60:	681b      	ldr	r3, [r3, #0]
 8102f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102f6a:	d106      	bne.n	8102f7a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8102f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102f72:	d102      	bne.n	8102f7a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8102f74:	4b0d      	ldr	r3, [pc, #52]	@ (8102fac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8102f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102f78:	e010      	b.n	8102f9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8102f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8102fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8102f7c:	681b      	ldr	r3, [r3, #0]
 8102f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102f82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102f86:	d106      	bne.n	8102f96 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8102f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102f8e:	d102      	bne.n	8102f96 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8102f90:	4b07      	ldr	r3, [pc, #28]	@ (8102fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8102f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102f94:	e002      	b.n	8102f9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8102f96:	2300      	movs	r3, #0
 8102f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8102f9a:	e2e2      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8102f9c:	e2e1      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8102f9e:	4b05      	ldr	r3, [pc, #20]	@ (8102fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8102fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102fa2:	e2de      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8102fa4:	58024400 	.word	0x58024400
 8102fa8:	03d09000 	.word	0x03d09000
 8102fac:	003d0900 	.word	0x003d0900
 8102fb0:	017d7840 	.word	0x017d7840
 8102fb4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8102fb8:	2300      	movs	r3, #0
 8102fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102fbc:	e2d1      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8102fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8102fc2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8102fc6:	430b      	orrs	r3, r1
 8102fc8:	f040 809c 	bne.w	8103104 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8102fcc:	4b93      	ldr	r3, [pc, #588]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8102fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102fd0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8102fd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8102fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102fd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102fdc:	d054      	beq.n	8103088 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8102fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102fe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102fe4:	f200 808b 	bhi.w	81030fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8102fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102fea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102fee:	f000 8083 	beq.w	81030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8102ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102ff4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102ff8:	f200 8081 	bhi.w	81030fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8102ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103002:	d02f      	beq.n	8103064 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8103004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810300a:	d878      	bhi.n	81030fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810300c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810300e:	2b00      	cmp	r3, #0
 8103010:	d004      	beq.n	810301c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8103012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103018:	d012      	beq.n	8103040 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810301a:	e070      	b.n	81030fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810301c:	4b7f      	ldr	r3, [pc, #508]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810301e:	681b      	ldr	r3, [r3, #0]
 8103020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103028:	d107      	bne.n	810303a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810302a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810302e:	4618      	mov	r0, r3
 8103030:	f000 fd5e 	bl	8103af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103038:	e293      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810303a:	2300      	movs	r3, #0
 810303c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810303e:	e290      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103040:	4b76      	ldr	r3, [pc, #472]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103042:	681b      	ldr	r3, [r3, #0]
 8103044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103048:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810304c:	d107      	bne.n	810305e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810304e:	f107 0318 	add.w	r3, r7, #24
 8103052:	4618      	mov	r0, r3
 8103054:	f000 faa4 	bl	81035a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8103058:	69bb      	ldr	r3, [r7, #24]
 810305a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810305c:	e281      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810305e:	2300      	movs	r3, #0
 8103060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103062:	e27e      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103064:	4b6d      	ldr	r3, [pc, #436]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103066:	681b      	ldr	r3, [r3, #0]
 8103068:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810306c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103070:	d107      	bne.n	8103082 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103072:	f107 030c 	add.w	r3, r7, #12
 8103076:	4618      	mov	r0, r3
 8103078:	f000 fbe6 	bl	8103848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810307c:	68fb      	ldr	r3, [r7, #12]
 810307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103080:	e26f      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103082:	2300      	movs	r3, #0
 8103084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103086:	e26c      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8103088:	4b64      	ldr	r3, [pc, #400]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810308a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810308c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8103090:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8103092:	4b62      	ldr	r3, [pc, #392]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103094:	681b      	ldr	r3, [r3, #0]
 8103096:	f003 0304 	and.w	r3, r3, #4
 810309a:	2b04      	cmp	r3, #4
 810309c:	d10c      	bne.n	81030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 810309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81030a0:	2b00      	cmp	r3, #0
 81030a2:	d109      	bne.n	81030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81030a4:	4b5d      	ldr	r3, [pc, #372]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	08db      	lsrs	r3, r3, #3
 81030aa:	f003 0303 	and.w	r3, r3, #3
 81030ae:	4a5c      	ldr	r2, [pc, #368]	@ (8103220 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81030b0:	fa22 f303 	lsr.w	r3, r2, r3
 81030b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81030b6:	e01e      	b.n	81030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81030b8:	4b58      	ldr	r3, [pc, #352]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81030ba:	681b      	ldr	r3, [r3, #0]
 81030bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81030c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81030c4:	d106      	bne.n	81030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 81030c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81030c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81030cc:	d102      	bne.n	81030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81030ce:	4b55      	ldr	r3, [pc, #340]	@ (8103224 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81030d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81030d2:	e010      	b.n	81030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81030d4:	4b51      	ldr	r3, [pc, #324]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81030dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81030e0:	d106      	bne.n	81030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81030e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81030e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81030e8:	d102      	bne.n	81030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81030ea:	4b4f      	ldr	r3, [pc, #316]	@ (8103228 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81030ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81030ee:	e002      	b.n	81030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81030f0:	2300      	movs	r3, #0
 81030f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81030f4:	e235      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81030f6:	e234      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81030f8:	4b4c      	ldr	r3, [pc, #304]	@ (810322c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81030fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81030fc:	e231      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81030fe:	2300      	movs	r3, #0
 8103100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103102:	e22e      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8103104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103108:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 810310c:	430b      	orrs	r3, r1
 810310e:	f040 808f 	bne.w	8103230 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8103112:	4b42      	ldr	r3, [pc, #264]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103116:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 810311a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 810311c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810311e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103122:	d06b      	beq.n	81031fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8103124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103126:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810312a:	d874      	bhi.n	8103216 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810312c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810312e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103132:	d056      	beq.n	81031e2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8103134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103136:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810313a:	d86c      	bhi.n	8103216 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810313c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810313e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103142:	d03b      	beq.n	81031bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8103144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103146:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810314a:	d864      	bhi.n	8103216 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810314c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810314e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103152:	d021      	beq.n	8103198 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8103154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103156:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810315a:	d85c      	bhi.n	8103216 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810315c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810315e:	2b00      	cmp	r3, #0
 8103160:	d004      	beq.n	810316c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8103162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103168:	d004      	beq.n	8103174 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810316a:	e054      	b.n	8103216 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 810316c:	f7fe fa22 	bl	81015b4 <HAL_RCC_GetPCLK1Freq>
 8103170:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103172:	e1f6      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103174:	4b29      	ldr	r3, [pc, #164]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810317c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103180:	d107      	bne.n	8103192 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103182:	f107 0318 	add.w	r3, r7, #24
 8103186:	4618      	mov	r0, r3
 8103188:	f000 fa0a 	bl	81035a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810318c:	69fb      	ldr	r3, [r7, #28]
 810318e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103190:	e1e7      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103192:	2300      	movs	r3, #0
 8103194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103196:	e1e4      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103198:	4b20      	ldr	r3, [pc, #128]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81031a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81031a4:	d107      	bne.n	81031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81031a6:	f107 030c 	add.w	r3, r7, #12
 81031aa:	4618      	mov	r0, r3
 81031ac:	f000 fb4c 	bl	8103848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81031b0:	693b      	ldr	r3, [r7, #16]
 81031b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81031b4:	e1d5      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81031b6:	2300      	movs	r3, #0
 81031b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81031ba:	e1d2      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81031bc:	4b17      	ldr	r3, [pc, #92]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81031be:	681b      	ldr	r3, [r3, #0]
 81031c0:	f003 0304 	and.w	r3, r3, #4
 81031c4:	2b04      	cmp	r3, #4
 81031c6:	d109      	bne.n	81031dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81031c8:	4b14      	ldr	r3, [pc, #80]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81031ca:	681b      	ldr	r3, [r3, #0]
 81031cc:	08db      	lsrs	r3, r3, #3
 81031ce:	f003 0303 	and.w	r3, r3, #3
 81031d2:	4a13      	ldr	r2, [pc, #76]	@ (8103220 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81031d4:	fa22 f303 	lsr.w	r3, r2, r3
 81031d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81031da:	e1c2      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81031dc:	2300      	movs	r3, #0
 81031de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81031e0:	e1bf      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81031e2:	4b0e      	ldr	r3, [pc, #56]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81031ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81031ee:	d102      	bne.n	81031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8103224 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81031f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81031f4:	e1b5      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81031f6:	2300      	movs	r3, #0
 81031f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81031fa:	e1b2      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81031fc:	4b07      	ldr	r3, [pc, #28]	@ (810321c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81031fe:	681b      	ldr	r3, [r3, #0]
 8103200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103204:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103208:	d102      	bne.n	8103210 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810320a:	4b07      	ldr	r3, [pc, #28]	@ (8103228 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810320c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810320e:	e1a8      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103210:	2300      	movs	r3, #0
 8103212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103214:	e1a5      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8103216:	2300      	movs	r3, #0
 8103218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810321a:	e1a2      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810321c:	58024400 	.word	0x58024400
 8103220:	03d09000 	.word	0x03d09000
 8103224:	003d0900 	.word	0x003d0900
 8103228:	017d7840 	.word	0x017d7840
 810322c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8103230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103234:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8103238:	430b      	orrs	r3, r1
 810323a:	d173      	bne.n	8103324 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 810323c:	4b9c      	ldr	r3, [pc, #624]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103240:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103244:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8103246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810324c:	d02f      	beq.n	81032ae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810324e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103254:	d863      	bhi.n	810331e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8103256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103258:	2b00      	cmp	r3, #0
 810325a:	d004      	beq.n	8103266 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 810325c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810325e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103262:	d012      	beq.n	810328a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8103264:	e05b      	b.n	810331e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103266:	4b92      	ldr	r3, [pc, #584]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103268:	681b      	ldr	r3, [r3, #0]
 810326a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810326e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103272:	d107      	bne.n	8103284 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103274:	f107 0318 	add.w	r3, r7, #24
 8103278:	4618      	mov	r0, r3
 810327a:	f000 f991 	bl	81035a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810327e:	69bb      	ldr	r3, [r7, #24]
 8103280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103282:	e16e      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103284:	2300      	movs	r3, #0
 8103286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103288:	e16b      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810328a:	4b89      	ldr	r3, [pc, #548]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810328c:	681b      	ldr	r3, [r3, #0]
 810328e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103296:	d107      	bne.n	81032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103298:	f107 030c 	add.w	r3, r7, #12
 810329c:	4618      	mov	r0, r3
 810329e:	f000 fad3 	bl	8103848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81032a2:	697b      	ldr	r3, [r7, #20]
 81032a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81032a6:	e15c      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81032a8:	2300      	movs	r3, #0
 81032aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81032ac:	e159      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81032ae:	4b80      	ldr	r3, [pc, #512]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81032b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81032b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81032b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81032b8:	4b7d      	ldr	r3, [pc, #500]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81032ba:	681b      	ldr	r3, [r3, #0]
 81032bc:	f003 0304 	and.w	r3, r3, #4
 81032c0:	2b04      	cmp	r3, #4
 81032c2:	d10c      	bne.n	81032de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 81032c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81032c6:	2b00      	cmp	r3, #0
 81032c8:	d109      	bne.n	81032de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81032ca:	4b79      	ldr	r3, [pc, #484]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81032cc:	681b      	ldr	r3, [r3, #0]
 81032ce:	08db      	lsrs	r3, r3, #3
 81032d0:	f003 0303 	and.w	r3, r3, #3
 81032d4:	4a77      	ldr	r2, [pc, #476]	@ (81034b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81032d6:	fa22 f303 	lsr.w	r3, r2, r3
 81032da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81032dc:	e01e      	b.n	810331c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81032de:	4b74      	ldr	r3, [pc, #464]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81032e0:	681b      	ldr	r3, [r3, #0]
 81032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81032e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81032ea:	d106      	bne.n	81032fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81032ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81032ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81032f2:	d102      	bne.n	81032fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81032f4:	4b70      	ldr	r3, [pc, #448]	@ (81034b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81032f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81032f8:	e010      	b.n	810331c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81032fa:	4b6d      	ldr	r3, [pc, #436]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81032fc:	681b      	ldr	r3, [r3, #0]
 81032fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103302:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103306:	d106      	bne.n	8103316 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8103308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810330a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810330e:	d102      	bne.n	8103316 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8103310:	4b6a      	ldr	r3, [pc, #424]	@ (81034bc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8103312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103314:	e002      	b.n	810331c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8103316:	2300      	movs	r3, #0
 8103318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810331a:	e122      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810331c:	e121      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810331e:	2300      	movs	r3, #0
 8103320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103322:	e11e      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8103324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103328:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 810332c:	430b      	orrs	r3, r1
 810332e:	d133      	bne.n	8103398 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8103330:	4b5f      	ldr	r3, [pc, #380]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103338:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810333a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810333c:	2b00      	cmp	r3, #0
 810333e:	d004      	beq.n	810334a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8103340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103346:	d012      	beq.n	810336e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8103348:	e023      	b.n	8103392 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810334a:	4b59      	ldr	r3, [pc, #356]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810334c:	681b      	ldr	r3, [r3, #0]
 810334e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103352:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103356:	d107      	bne.n	8103368 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8103358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810335c:	4618      	mov	r0, r3
 810335e:	f000 fbc7 	bl	8103af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103366:	e0fc      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103368:	2300      	movs	r3, #0
 810336a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810336c:	e0f9      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810336e:	4b50      	ldr	r3, [pc, #320]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103370:	681b      	ldr	r3, [r3, #0]
 8103372:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810337a:	d107      	bne.n	810338c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810337c:	f107 0318 	add.w	r3, r7, #24
 8103380:	4618      	mov	r0, r3
 8103382:	f000 f90d 	bl	81035a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8103386:	6a3b      	ldr	r3, [r7, #32]
 8103388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810338a:	e0ea      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810338c:	2300      	movs	r3, #0
 810338e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103390:	e0e7      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8103392:	2300      	movs	r3, #0
 8103394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103396:	e0e4      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8103398:	e9d7 2300 	ldrd	r2, r3, [r7]
 810339c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 81033a0:	430b      	orrs	r3, r1
 81033a2:	f040 808d 	bne.w	81034c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 81033a6:	4b42      	ldr	r3, [pc, #264]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81033aa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 81033ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81033b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81033b6:	d06b      	beq.n	8103490 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 81033b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81033be:	d874      	bhi.n	81034aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81033c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81033c6:	d056      	beq.n	8103476 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 81033c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81033ce:	d86c      	bhi.n	81034aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81033d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81033d6:	d03b      	beq.n	8103450 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 81033d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81033de:	d864      	bhi.n	81034aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81033e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81033e6:	d021      	beq.n	810342c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 81033e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81033ee:	d85c      	bhi.n	81034aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81033f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033f2:	2b00      	cmp	r3, #0
 81033f4:	d004      	beq.n	8103400 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 81033f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81033fc:	d004      	beq.n	8103408 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 81033fe:	e054      	b.n	81034aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8103400:	f000 f8b8 	bl	8103574 <HAL_RCCEx_GetD3PCLK1Freq>
 8103404:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103406:	e0ac      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103408:	4b29      	ldr	r3, [pc, #164]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810340a:	681b      	ldr	r3, [r3, #0]
 810340c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103414:	d107      	bne.n	8103426 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103416:	f107 0318 	add.w	r3, r7, #24
 810341a:	4618      	mov	r0, r3
 810341c:	f000 f8c0 	bl	81035a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8103420:	69fb      	ldr	r3, [r7, #28]
 8103422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103424:	e09d      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103426:	2300      	movs	r3, #0
 8103428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810342a:	e09a      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810342c:	4b20      	ldr	r3, [pc, #128]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103438:	d107      	bne.n	810344a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810343a:	f107 030c 	add.w	r3, r7, #12
 810343e:	4618      	mov	r0, r3
 8103440:	f000 fa02 	bl	8103848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8103444:	693b      	ldr	r3, [r7, #16]
 8103446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103448:	e08b      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810344a:	2300      	movs	r3, #0
 810344c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810344e:	e088      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8103450:	4b17      	ldr	r3, [pc, #92]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	f003 0304 	and.w	r3, r3, #4
 8103458:	2b04      	cmp	r3, #4
 810345a:	d109      	bne.n	8103470 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810345c:	4b14      	ldr	r3, [pc, #80]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810345e:	681b      	ldr	r3, [r3, #0]
 8103460:	08db      	lsrs	r3, r3, #3
 8103462:	f003 0303 	and.w	r3, r3, #3
 8103466:	4a13      	ldr	r2, [pc, #76]	@ (81034b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8103468:	fa22 f303 	lsr.w	r3, r2, r3
 810346c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810346e:	e078      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103470:	2300      	movs	r3, #0
 8103472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103474:	e075      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8103476:	4b0e      	ldr	r3, [pc, #56]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103478:	681b      	ldr	r3, [r3, #0]
 810347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810347e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103482:	d102      	bne.n	810348a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8103484:	4b0c      	ldr	r3, [pc, #48]	@ (81034b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8103486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103488:	e06b      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810348a:	2300      	movs	r3, #0
 810348c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810348e:	e068      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8103490:	4b07      	ldr	r3, [pc, #28]	@ (81034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103492:	681b      	ldr	r3, [r3, #0]
 8103494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103498:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810349c:	d102      	bne.n	81034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810349e:	4b07      	ldr	r3, [pc, #28]	@ (81034bc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81034a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81034a2:	e05e      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81034a4:	2300      	movs	r3, #0
 81034a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81034a8:	e05b      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81034aa:	2300      	movs	r3, #0
 81034ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81034ae:	e058      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81034b0:	58024400 	.word	0x58024400
 81034b4:	03d09000 	.word	0x03d09000
 81034b8:	003d0900 	.word	0x003d0900
 81034bc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81034c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81034c4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 81034c8:	430b      	orrs	r3, r1
 81034ca:	d148      	bne.n	810355e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81034cc:	4b27      	ldr	r3, [pc, #156]	@ (810356c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81034ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81034d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81034d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81034d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81034d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81034dc:	d02a      	beq.n	8103534 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 81034de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81034e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81034e4:	d838      	bhi.n	8103558 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 81034e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81034e8:	2b00      	cmp	r3, #0
 81034ea:	d004      	beq.n	81034f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 81034ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81034ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81034f2:	d00d      	beq.n	8103510 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 81034f4:	e030      	b.n	8103558 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81034f6:	4b1d      	ldr	r3, [pc, #116]	@ (810356c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81034f8:	681b      	ldr	r3, [r3, #0]
 81034fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81034fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103502:	d102      	bne.n	810350a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8103504:	4b1a      	ldr	r3, [pc, #104]	@ (8103570 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8103506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103508:	e02b      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810350a:	2300      	movs	r3, #0
 810350c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810350e:	e028      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8103510:	4b16      	ldr	r3, [pc, #88]	@ (810356c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8103512:	681b      	ldr	r3, [r3, #0]
 8103514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103518:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810351c:	d107      	bne.n	810352e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810351e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103522:	4618      	mov	r0, r3
 8103524:	f000 fae4 	bl	8103af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810352a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810352c:	e019      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810352e:	2300      	movs	r3, #0
 8103530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103532:	e016      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103534:	4b0d      	ldr	r3, [pc, #52]	@ (810356c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8103536:	681b      	ldr	r3, [r3, #0]
 8103538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810353c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103540:	d107      	bne.n	8103552 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103542:	f107 0318 	add.w	r3, r7, #24
 8103546:	4618      	mov	r0, r3
 8103548:	f000 f82a 	bl	81035a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810354c:	69fb      	ldr	r3, [r7, #28]
 810354e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103550:	e007      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103552:	2300      	movs	r3, #0
 8103554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103556:	e004      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8103558:	2300      	movs	r3, #0
 810355a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810355c:	e001      	b.n	8103562 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810355e:	2300      	movs	r3, #0
 8103560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8103562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8103564:	4618      	mov	r0, r3
 8103566:	3740      	adds	r7, #64	@ 0x40
 8103568:	46bd      	mov	sp, r7
 810356a:	bd80      	pop	{r7, pc}
 810356c:	58024400 	.word	0x58024400
 8103570:	017d7840 	.word	0x017d7840

08103574 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103574:	b580      	push	{r7, lr}
 8103576:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8103578:	f7fd ffea 	bl	8101550 <HAL_RCC_GetHCLKFreq>
 810357c:	4602      	mov	r2, r0
 810357e:	4b06      	ldr	r3, [pc, #24]	@ (8103598 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103580:	6a1b      	ldr	r3, [r3, #32]
 8103582:	091b      	lsrs	r3, r3, #4
 8103584:	f003 0307 	and.w	r3, r3, #7
 8103588:	4904      	ldr	r1, [pc, #16]	@ (810359c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810358a:	5ccb      	ldrb	r3, [r1, r3]
 810358c:	f003 031f 	and.w	r3, r3, #31
 8103590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103594:	4618      	mov	r0, r3
 8103596:	bd80      	pop	{r7, pc}
 8103598:	58024400 	.word	0x58024400
 810359c:	08106490 	.word	0x08106490

081035a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81035a0:	b480      	push	{r7}
 81035a2:	b089      	sub	sp, #36	@ 0x24
 81035a4:	af00      	add	r7, sp, #0
 81035a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81035a8:	4ba1      	ldr	r3, [pc, #644]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81035ac:	f003 0303 	and.w	r3, r3, #3
 81035b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81035b2:	4b9f      	ldr	r3, [pc, #636]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81035b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81035b6:	0b1b      	lsrs	r3, r3, #12
 81035b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81035bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81035be:	4b9c      	ldr	r3, [pc, #624]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035c2:	091b      	lsrs	r3, r3, #4
 81035c4:	f003 0301 	and.w	r3, r3, #1
 81035c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81035ca:	4b99      	ldr	r3, [pc, #612]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81035ce:	08db      	lsrs	r3, r3, #3
 81035d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81035d4:	693a      	ldr	r2, [r7, #16]
 81035d6:	fb02 f303 	mul.w	r3, r2, r3
 81035da:	ee07 3a90 	vmov	s15, r3
 81035de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81035e6:	697b      	ldr	r3, [r7, #20]
 81035e8:	2b00      	cmp	r3, #0
 81035ea:	f000 8111 	beq.w	8103810 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81035ee:	69bb      	ldr	r3, [r7, #24]
 81035f0:	2b02      	cmp	r3, #2
 81035f2:	f000 8083 	beq.w	81036fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81035f6:	69bb      	ldr	r3, [r7, #24]
 81035f8:	2b02      	cmp	r3, #2
 81035fa:	f200 80a1 	bhi.w	8103740 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81035fe:	69bb      	ldr	r3, [r7, #24]
 8103600:	2b00      	cmp	r3, #0
 8103602:	d003      	beq.n	810360c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103604:	69bb      	ldr	r3, [r7, #24]
 8103606:	2b01      	cmp	r3, #1
 8103608:	d056      	beq.n	81036b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810360a:	e099      	b.n	8103740 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810360c:	4b88      	ldr	r3, [pc, #544]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	f003 0320 	and.w	r3, r3, #32
 8103614:	2b00      	cmp	r3, #0
 8103616:	d02d      	beq.n	8103674 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103618:	4b85      	ldr	r3, [pc, #532]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810361a:	681b      	ldr	r3, [r3, #0]
 810361c:	08db      	lsrs	r3, r3, #3
 810361e:	f003 0303 	and.w	r3, r3, #3
 8103622:	4a84      	ldr	r2, [pc, #528]	@ (8103834 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103624:	fa22 f303 	lsr.w	r3, r2, r3
 8103628:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810362a:	68bb      	ldr	r3, [r7, #8]
 810362c:	ee07 3a90 	vmov	s15, r3
 8103630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103634:	697b      	ldr	r3, [r7, #20]
 8103636:	ee07 3a90 	vmov	s15, r3
 810363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810363e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103642:	4b7b      	ldr	r3, [pc, #492]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810364a:	ee07 3a90 	vmov	s15, r3
 810364e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103652:	ed97 6a03 	vldr	s12, [r7, #12]
 8103656:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8103838 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810365a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810365e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810366a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810366e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8103672:	e087      	b.n	8103784 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103674:	697b      	ldr	r3, [r7, #20]
 8103676:	ee07 3a90 	vmov	s15, r3
 810367a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810367e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810383c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103686:	4b6a      	ldr	r3, [pc, #424]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810368a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810368e:	ee07 3a90 	vmov	s15, r3
 8103692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103696:	ed97 6a03 	vldr	s12, [r7, #12]
 810369a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8103838 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810369e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81036a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81036aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81036b6:	e065      	b.n	8103784 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81036b8:	697b      	ldr	r3, [r7, #20]
 81036ba:	ee07 3a90 	vmov	s15, r3
 81036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8103840 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81036c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81036ca:	4b59      	ldr	r3, [pc, #356]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81036cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81036ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81036d2:	ee07 3a90 	vmov	s15, r3
 81036d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81036da:	ed97 6a03 	vldr	s12, [r7, #12]
 81036de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8103838 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81036e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81036ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81036ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81036fa:	e043      	b.n	8103784 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81036fc:	697b      	ldr	r3, [r7, #20]
 81036fe:	ee07 3a90 	vmov	s15, r3
 8103702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103706:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8103844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810370e:	4b48      	ldr	r3, [pc, #288]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103716:	ee07 3a90 	vmov	s15, r3
 810371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810371e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103722:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8103838 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810372e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103736:	ee67 7a27 	vmul.f32	s15, s14, s15
 810373a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810373e:	e021      	b.n	8103784 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103740:	697b      	ldr	r3, [r7, #20]
 8103742:	ee07 3a90 	vmov	s15, r3
 8103746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810374a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8103840 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810374e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103752:	4b37      	ldr	r3, [pc, #220]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810375a:	ee07 3a90 	vmov	s15, r3
 810375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103762:	ed97 6a03 	vldr	s12, [r7, #12]
 8103766:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8103838 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810376a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810376e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810377e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103782:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8103784:	4b2a      	ldr	r3, [pc, #168]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103788:	0a5b      	lsrs	r3, r3, #9
 810378a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810378e:	ee07 3a90 	vmov	s15, r3
 8103792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103796:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810379a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810379e:	edd7 6a07 	vldr	s13, [r7, #28]
 81037a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81037a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81037aa:	ee17 2a90 	vmov	r2, s15
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81037b2:	4b1f      	ldr	r3, [pc, #124]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81037b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81037b6:	0c1b      	lsrs	r3, r3, #16
 81037b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81037bc:	ee07 3a90 	vmov	s15, r3
 81037c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81037c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81037cc:	edd7 6a07 	vldr	s13, [r7, #28]
 81037d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81037d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81037d8:	ee17 2a90 	vmov	r2, s15
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81037e0:	4b13      	ldr	r3, [pc, #76]	@ (8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81037e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81037e4:	0e1b      	lsrs	r3, r3, #24
 81037e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81037ea:	ee07 3a90 	vmov	s15, r3
 81037ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81037f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81037fa:	edd7 6a07 	vldr	s13, [r7, #28]
 81037fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103806:	ee17 2a90 	vmov	r2, s15
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810380e:	e008      	b.n	8103822 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	2200      	movs	r2, #0
 8103814:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	2200      	movs	r2, #0
 810381a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	2200      	movs	r2, #0
 8103820:	609a      	str	r2, [r3, #8]
}
 8103822:	bf00      	nop
 8103824:	3724      	adds	r7, #36	@ 0x24
 8103826:	46bd      	mov	sp, r7
 8103828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810382c:	4770      	bx	lr
 810382e:	bf00      	nop
 8103830:	58024400 	.word	0x58024400
 8103834:	03d09000 	.word	0x03d09000
 8103838:	46000000 	.word	0x46000000
 810383c:	4c742400 	.word	0x4c742400
 8103840:	4a742400 	.word	0x4a742400
 8103844:	4bbebc20 	.word	0x4bbebc20

08103848 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8103848:	b480      	push	{r7}
 810384a:	b089      	sub	sp, #36	@ 0x24
 810384c:	af00      	add	r7, sp, #0
 810384e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103850:	4ba1      	ldr	r3, [pc, #644]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103854:	f003 0303 	and.w	r3, r3, #3
 8103858:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810385a:	4b9f      	ldr	r3, [pc, #636]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810385e:	0d1b      	lsrs	r3, r3, #20
 8103860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103864:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8103866:	4b9c      	ldr	r3, [pc, #624]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810386a:	0a1b      	lsrs	r3, r3, #8
 810386c:	f003 0301 	and.w	r3, r3, #1
 8103870:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8103872:	4b99      	ldr	r3, [pc, #612]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103876:	08db      	lsrs	r3, r3, #3
 8103878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810387c:	693a      	ldr	r2, [r7, #16]
 810387e:	fb02 f303 	mul.w	r3, r2, r3
 8103882:	ee07 3a90 	vmov	s15, r3
 8103886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810388a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810388e:	697b      	ldr	r3, [r7, #20]
 8103890:	2b00      	cmp	r3, #0
 8103892:	f000 8111 	beq.w	8103ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8103896:	69bb      	ldr	r3, [r7, #24]
 8103898:	2b02      	cmp	r3, #2
 810389a:	f000 8083 	beq.w	81039a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810389e:	69bb      	ldr	r3, [r7, #24]
 81038a0:	2b02      	cmp	r3, #2
 81038a2:	f200 80a1 	bhi.w	81039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81038a6:	69bb      	ldr	r3, [r7, #24]
 81038a8:	2b00      	cmp	r3, #0
 81038aa:	d003      	beq.n	81038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81038ac:	69bb      	ldr	r3, [r7, #24]
 81038ae:	2b01      	cmp	r3, #1
 81038b0:	d056      	beq.n	8103960 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81038b2:	e099      	b.n	81039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81038b4:	4b88      	ldr	r3, [pc, #544]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81038b6:	681b      	ldr	r3, [r3, #0]
 81038b8:	f003 0320 	and.w	r3, r3, #32
 81038bc:	2b00      	cmp	r3, #0
 81038be:	d02d      	beq.n	810391c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81038c0:	4b85      	ldr	r3, [pc, #532]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	08db      	lsrs	r3, r3, #3
 81038c6:	f003 0303 	and.w	r3, r3, #3
 81038ca:	4a84      	ldr	r2, [pc, #528]	@ (8103adc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81038cc:	fa22 f303 	lsr.w	r3, r2, r3
 81038d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81038d2:	68bb      	ldr	r3, [r7, #8]
 81038d4:	ee07 3a90 	vmov	s15, r3
 81038d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038dc:	697b      	ldr	r3, [r7, #20]
 81038de:	ee07 3a90 	vmov	s15, r3
 81038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038ea:	4b7b      	ldr	r3, [pc, #492]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81038ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038f2:	ee07 3a90 	vmov	s15, r3
 81038f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038fa:	ed97 6a03 	vldr	s12, [r7, #12]
 81038fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8103ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810390a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810390e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103916:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810391a:	e087      	b.n	8103a2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810391c:	697b      	ldr	r3, [r7, #20]
 810391e:	ee07 3a90 	vmov	s15, r3
 8103922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103926:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8103ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810392a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810392e:	4b6a      	ldr	r3, [pc, #424]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103936:	ee07 3a90 	vmov	s15, r3
 810393a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810393e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103942:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8103ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810394a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810394e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103956:	ee67 7a27 	vmul.f32	s15, s14, s15
 810395a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810395e:	e065      	b.n	8103a2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103960:	697b      	ldr	r3, [r7, #20]
 8103962:	ee07 3a90 	vmov	s15, r3
 8103966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810396a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8103ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810396e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103972:	4b59      	ldr	r3, [pc, #356]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810397a:	ee07 3a90 	vmov	s15, r3
 810397e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103982:	ed97 6a03 	vldr	s12, [r7, #12]
 8103986:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8103ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810398a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810399e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81039a2:	e043      	b.n	8103a2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81039a4:	697b      	ldr	r3, [r7, #20]
 81039a6:	ee07 3a90 	vmov	s15, r3
 81039aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81039ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8103aec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81039b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81039b6:	4b48      	ldr	r3, [pc, #288]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81039ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81039be:	ee07 3a90 	vmov	s15, r3
 81039c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81039c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81039ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8103ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81039ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81039d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81039d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81039da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81039de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81039e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81039e6:	e021      	b.n	8103a2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81039e8:	697b      	ldr	r3, [r7, #20]
 81039ea:	ee07 3a90 	vmov	s15, r3
 81039ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81039f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8103ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81039f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81039fa:	4b37      	ldr	r3, [pc, #220]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81039fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103a02:	ee07 3a90 	vmov	s15, r3
 8103a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103a0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8103ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103a2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8103a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103a30:	0a5b      	lsrs	r3, r3, #9
 8103a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103a36:	ee07 3a90 	vmov	s15, r3
 8103a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103a42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8103a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103a52:	ee17 2a90 	vmov	r2, s15
 8103a56:	687b      	ldr	r3, [r7, #4]
 8103a58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8103a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103a5e:	0c1b      	lsrs	r3, r3, #16
 8103a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103a64:	ee07 3a90 	vmov	s15, r3
 8103a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103a70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103a74:	edd7 6a07 	vldr	s13, [r7, #28]
 8103a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103a80:	ee17 2a90 	vmov	r2, s15
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8103a88:	4b13      	ldr	r3, [pc, #76]	@ (8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103a8c:	0e1b      	lsrs	r3, r3, #24
 8103a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103a92:	ee07 3a90 	vmov	s15, r3
 8103a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8103aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103aae:	ee17 2a90 	vmov	r2, s15
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8103ab6:	e008      	b.n	8103aca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	2200      	movs	r2, #0
 8103abc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	2200      	movs	r2, #0
 8103ac2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	2200      	movs	r2, #0
 8103ac8:	609a      	str	r2, [r3, #8]
}
 8103aca:	bf00      	nop
 8103acc:	3724      	adds	r7, #36	@ 0x24
 8103ace:	46bd      	mov	sp, r7
 8103ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ad4:	4770      	bx	lr
 8103ad6:	bf00      	nop
 8103ad8:	58024400 	.word	0x58024400
 8103adc:	03d09000 	.word	0x03d09000
 8103ae0:	46000000 	.word	0x46000000
 8103ae4:	4c742400 	.word	0x4c742400
 8103ae8:	4a742400 	.word	0x4a742400
 8103aec:	4bbebc20 	.word	0x4bbebc20

08103af0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8103af0:	b480      	push	{r7}
 8103af2:	b089      	sub	sp, #36	@ 0x24
 8103af4:	af00      	add	r7, sp, #0
 8103af6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103af8:	4ba0      	ldr	r3, [pc, #640]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103afc:	f003 0303 	and.w	r3, r3, #3
 8103b00:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8103b02:	4b9e      	ldr	r3, [pc, #632]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103b06:	091b      	lsrs	r3, r3, #4
 8103b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103b0c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8103b0e:	4b9b      	ldr	r3, [pc, #620]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103b12:	f003 0301 	and.w	r3, r3, #1
 8103b16:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8103b18:	4b98      	ldr	r3, [pc, #608]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103b1c:	08db      	lsrs	r3, r3, #3
 8103b1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103b22:	693a      	ldr	r2, [r7, #16]
 8103b24:	fb02 f303 	mul.w	r3, r2, r3
 8103b28:	ee07 3a90 	vmov	s15, r3
 8103b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b30:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8103b34:	697b      	ldr	r3, [r7, #20]
 8103b36:	2b00      	cmp	r3, #0
 8103b38:	f000 8111 	beq.w	8103d5e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8103b3c:	69bb      	ldr	r3, [r7, #24]
 8103b3e:	2b02      	cmp	r3, #2
 8103b40:	f000 8083 	beq.w	8103c4a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8103b44:	69bb      	ldr	r3, [r7, #24]
 8103b46:	2b02      	cmp	r3, #2
 8103b48:	f200 80a1 	bhi.w	8103c8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8103b4c:	69bb      	ldr	r3, [r7, #24]
 8103b4e:	2b00      	cmp	r3, #0
 8103b50:	d003      	beq.n	8103b5a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8103b52:	69bb      	ldr	r3, [r7, #24]
 8103b54:	2b01      	cmp	r3, #1
 8103b56:	d056      	beq.n	8103c06 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8103b58:	e099      	b.n	8103c8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103b5a:	4b88      	ldr	r3, [pc, #544]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103b5c:	681b      	ldr	r3, [r3, #0]
 8103b5e:	f003 0320 	and.w	r3, r3, #32
 8103b62:	2b00      	cmp	r3, #0
 8103b64:	d02d      	beq.n	8103bc2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103b66:	4b85      	ldr	r3, [pc, #532]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	08db      	lsrs	r3, r3, #3
 8103b6c:	f003 0303 	and.w	r3, r3, #3
 8103b70:	4a83      	ldr	r2, [pc, #524]	@ (8103d80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8103b72:	fa22 f303 	lsr.w	r3, r2, r3
 8103b76:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103b78:	68bb      	ldr	r3, [r7, #8]
 8103b7a:	ee07 3a90 	vmov	s15, r3
 8103b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b82:	697b      	ldr	r3, [r7, #20]
 8103b84:	ee07 3a90 	vmov	s15, r3
 8103b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b90:	4b7a      	ldr	r3, [pc, #488]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b98:	ee07 3a90 	vmov	s15, r3
 8103b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ba0:	ed97 6a03 	vldr	s12, [r7, #12]
 8103ba4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8103d84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8103ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103bb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103bbc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8103bc0:	e087      	b.n	8103cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103bc2:	697b      	ldr	r3, [r7, #20]
 8103bc4:	ee07 3a90 	vmov	s15, r3
 8103bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bcc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8103d88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8103bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103bd4:	4b69      	ldr	r3, [pc, #420]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103bdc:	ee07 3a90 	vmov	s15, r3
 8103be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103be4:	ed97 6a03 	vldr	s12, [r7, #12]
 8103be8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8103d84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8103bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103bf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103c04:	e065      	b.n	8103cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103c06:	697b      	ldr	r3, [r7, #20]
 8103c08:	ee07 3a90 	vmov	s15, r3
 8103c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c10:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8103d8c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8103c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c18:	4b58      	ldr	r3, [pc, #352]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c20:	ee07 3a90 	vmov	s15, r3
 8103c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c28:	ed97 6a03 	vldr	s12, [r7, #12]
 8103c2c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8103d84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8103c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103c48:	e043      	b.n	8103cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103c4a:	697b      	ldr	r3, [r7, #20]
 8103c4c:	ee07 3a90 	vmov	s15, r3
 8103c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c54:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8103d90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8103c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c5c:	4b47      	ldr	r3, [pc, #284]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c64:	ee07 3a90 	vmov	s15, r3
 8103c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8103c70:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8103d84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8103c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103c8c:	e021      	b.n	8103cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103c8e:	697b      	ldr	r3, [r7, #20]
 8103c90:	ee07 3a90 	vmov	s15, r3
 8103c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c98:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8103d88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8103c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ca0:	4b36      	ldr	r3, [pc, #216]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ca8:	ee07 3a90 	vmov	s15, r3
 8103cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103cb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8103cb4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8103d84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8103cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103cc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ccc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103cd0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8103cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103cd6:	0a5b      	lsrs	r3, r3, #9
 8103cd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103cdc:	ee07 3a90 	vmov	s15, r3
 8103ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ce4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8103cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103cf8:	ee17 2a90 	vmov	r2, s15
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8103d00:	4b1e      	ldr	r3, [pc, #120]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103d04:	0c1b      	lsrs	r3, r3, #16
 8103d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103d0a:	ee07 3a90 	vmov	s15, r3
 8103d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8103d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103d26:	ee17 2a90 	vmov	r2, s15
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8103d2e:	4b13      	ldr	r3, [pc, #76]	@ (8103d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8103d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103d32:	0e1b      	lsrs	r3, r3, #24
 8103d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103d38:	ee07 3a90 	vmov	s15, r3
 8103d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8103d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103d54:	ee17 2a90 	vmov	r2, s15
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8103d5c:	e008      	b.n	8103d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8103d5e:	687b      	ldr	r3, [r7, #4]
 8103d60:	2200      	movs	r2, #0
 8103d62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8103d64:	687b      	ldr	r3, [r7, #4]
 8103d66:	2200      	movs	r2, #0
 8103d68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	2200      	movs	r2, #0
 8103d6e:	609a      	str	r2, [r3, #8]
}
 8103d70:	bf00      	nop
 8103d72:	3724      	adds	r7, #36	@ 0x24
 8103d74:	46bd      	mov	sp, r7
 8103d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d7a:	4770      	bx	lr
 8103d7c:	58024400 	.word	0x58024400
 8103d80:	03d09000 	.word	0x03d09000
 8103d84:	46000000 	.word	0x46000000
 8103d88:	4c742400 	.word	0x4c742400
 8103d8c:	4a742400 	.word	0x4a742400
 8103d90:	4bbebc20 	.word	0x4bbebc20

08103d94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103d94:	b580      	push	{r7, lr}
 8103d96:	b084      	sub	sp, #16
 8103d98:	af00      	add	r7, sp, #0
 8103d9a:	6078      	str	r0, [r7, #4]
 8103d9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103d9e:	2300      	movs	r3, #0
 8103da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103da2:	4b54      	ldr	r3, [pc, #336]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103da6:	f003 0303 	and.w	r3, r3, #3
 8103daa:	2b03      	cmp	r3, #3
 8103dac:	d101      	bne.n	8103db2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103dae:	2301      	movs	r3, #1
 8103db0:	e09b      	b.n	8103eea <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103db2:	4b50      	ldr	r3, [pc, #320]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103db4:	681b      	ldr	r3, [r3, #0]
 8103db6:	4a4f      	ldr	r2, [pc, #316]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103db8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103dbe:	f7fc fec1 	bl	8100b44 <HAL_GetTick>
 8103dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103dc4:	e008      	b.n	8103dd8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103dc6:	f7fc febd 	bl	8100b44 <HAL_GetTick>
 8103dca:	4602      	mov	r2, r0
 8103dcc:	68bb      	ldr	r3, [r7, #8]
 8103dce:	1ad3      	subs	r3, r2, r3
 8103dd0:	2b02      	cmp	r3, #2
 8103dd2:	d901      	bls.n	8103dd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103dd4:	2303      	movs	r3, #3
 8103dd6:	e088      	b.n	8103eea <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103dd8:	4b46      	ldr	r3, [pc, #280]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103dda:	681b      	ldr	r3, [r3, #0]
 8103ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103de0:	2b00      	cmp	r3, #0
 8103de2:	d1f0      	bne.n	8103dc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103de4:	4b43      	ldr	r3, [pc, #268]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103de8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	681b      	ldr	r3, [r3, #0]
 8103df0:	031b      	lsls	r3, r3, #12
 8103df2:	4940      	ldr	r1, [pc, #256]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103df4:	4313      	orrs	r3, r2
 8103df6:	628b      	str	r3, [r1, #40]	@ 0x28
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	685b      	ldr	r3, [r3, #4]
 8103dfc:	3b01      	subs	r3, #1
 8103dfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103e02:	687b      	ldr	r3, [r7, #4]
 8103e04:	689b      	ldr	r3, [r3, #8]
 8103e06:	3b01      	subs	r3, #1
 8103e08:	025b      	lsls	r3, r3, #9
 8103e0a:	b29b      	uxth	r3, r3
 8103e0c:	431a      	orrs	r2, r3
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	68db      	ldr	r3, [r3, #12]
 8103e12:	3b01      	subs	r3, #1
 8103e14:	041b      	lsls	r3, r3, #16
 8103e16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8103e1a:	431a      	orrs	r2, r3
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	691b      	ldr	r3, [r3, #16]
 8103e20:	3b01      	subs	r3, #1
 8103e22:	061b      	lsls	r3, r3, #24
 8103e24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103e28:	4932      	ldr	r1, [pc, #200]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e2a:	4313      	orrs	r3, r2
 8103e2c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103e2e:	4b31      	ldr	r3, [pc, #196]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8103e36:	687b      	ldr	r3, [r7, #4]
 8103e38:	695b      	ldr	r3, [r3, #20]
 8103e3a:	492e      	ldr	r1, [pc, #184]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e3c:	4313      	orrs	r3, r2
 8103e3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103e40:	4b2c      	ldr	r3, [pc, #176]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e44:	f023 0220 	bic.w	r2, r3, #32
 8103e48:	687b      	ldr	r3, [r7, #4]
 8103e4a:	699b      	ldr	r3, [r3, #24]
 8103e4c:	4929      	ldr	r1, [pc, #164]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e4e:	4313      	orrs	r3, r2
 8103e50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103e52:	4b28      	ldr	r3, [pc, #160]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e56:	4a27      	ldr	r2, [pc, #156]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e58:	f023 0310 	bic.w	r3, r3, #16
 8103e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103e5e:	4b25      	ldr	r3, [pc, #148]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103e66:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8103e6a:	687a      	ldr	r2, [r7, #4]
 8103e6c:	69d2      	ldr	r2, [r2, #28]
 8103e6e:	00d2      	lsls	r2, r2, #3
 8103e70:	4920      	ldr	r1, [pc, #128]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e72:	4313      	orrs	r3, r2
 8103e74:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103e76:	4b1f      	ldr	r3, [pc, #124]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e7c:	f043 0310 	orr.w	r3, r3, #16
 8103e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103e82:	683b      	ldr	r3, [r7, #0]
 8103e84:	2b00      	cmp	r3, #0
 8103e86:	d106      	bne.n	8103e96 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103e88:	4b1a      	ldr	r3, [pc, #104]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e8c:	4a19      	ldr	r2, [pc, #100]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8103e92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103e94:	e00f      	b.n	8103eb6 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103e96:	683b      	ldr	r3, [r7, #0]
 8103e98:	2b01      	cmp	r3, #1
 8103e9a:	d106      	bne.n	8103eaa <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103e9c:	4b15      	ldr	r3, [pc, #84]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103ea0:	4a14      	ldr	r2, [pc, #80]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8103ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103ea8:	e005      	b.n	8103eb6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103eaa:	4b12      	ldr	r3, [pc, #72]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103eae:	4a11      	ldr	r2, [pc, #68]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103eb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103eb8:	681b      	ldr	r3, [r3, #0]
 8103eba:	4a0e      	ldr	r2, [pc, #56]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103ebc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8103ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103ec2:	f7fc fe3f 	bl	8100b44 <HAL_GetTick>
 8103ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103ec8:	e008      	b.n	8103edc <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103eca:	f7fc fe3b 	bl	8100b44 <HAL_GetTick>
 8103ece:	4602      	mov	r2, r0
 8103ed0:	68bb      	ldr	r3, [r7, #8]
 8103ed2:	1ad3      	subs	r3, r2, r3
 8103ed4:	2b02      	cmp	r3, #2
 8103ed6:	d901      	bls.n	8103edc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103ed8:	2303      	movs	r3, #3
 8103eda:	e006      	b.n	8103eea <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103edc:	4b05      	ldr	r3, [pc, #20]	@ (8103ef4 <RCCEx_PLL2_Config+0x160>)
 8103ede:	681b      	ldr	r3, [r3, #0]
 8103ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103ee4:	2b00      	cmp	r3, #0
 8103ee6:	d0f0      	beq.n	8103eca <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8103eea:	4618      	mov	r0, r3
 8103eec:	3710      	adds	r7, #16
 8103eee:	46bd      	mov	sp, r7
 8103ef0:	bd80      	pop	{r7, pc}
 8103ef2:	bf00      	nop
 8103ef4:	58024400 	.word	0x58024400

08103ef8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103ef8:	b580      	push	{r7, lr}
 8103efa:	b084      	sub	sp, #16
 8103efc:	af00      	add	r7, sp, #0
 8103efe:	6078      	str	r0, [r7, #4]
 8103f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103f02:	2300      	movs	r3, #0
 8103f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103f06:	4b54      	ldr	r3, [pc, #336]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f0a:	f003 0303 	and.w	r3, r3, #3
 8103f0e:	2b03      	cmp	r3, #3
 8103f10:	d101      	bne.n	8103f16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103f12:	2301      	movs	r3, #1
 8103f14:	e09b      	b.n	810404e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103f16:	4b50      	ldr	r3, [pc, #320]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103f18:	681b      	ldr	r3, [r3, #0]
 8103f1a:	4a4f      	ldr	r2, [pc, #316]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8103f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103f22:	f7fc fe0f 	bl	8100b44 <HAL_GetTick>
 8103f26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103f28:	e008      	b.n	8103f3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103f2a:	f7fc fe0b 	bl	8100b44 <HAL_GetTick>
 8103f2e:	4602      	mov	r2, r0
 8103f30:	68bb      	ldr	r3, [r7, #8]
 8103f32:	1ad3      	subs	r3, r2, r3
 8103f34:	2b02      	cmp	r3, #2
 8103f36:	d901      	bls.n	8103f3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103f38:	2303      	movs	r3, #3
 8103f3a:	e088      	b.n	810404e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103f3c:	4b46      	ldr	r3, [pc, #280]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103f3e:	681b      	ldr	r3, [r3, #0]
 8103f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103f44:	2b00      	cmp	r3, #0
 8103f46:	d1f0      	bne.n	8103f2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103f48:	4b43      	ldr	r3, [pc, #268]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f4c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	681b      	ldr	r3, [r3, #0]
 8103f54:	051b      	lsls	r3, r3, #20
 8103f56:	4940      	ldr	r1, [pc, #256]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103f58:	4313      	orrs	r3, r2
 8103f5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	685b      	ldr	r3, [r3, #4]
 8103f60:	3b01      	subs	r3, #1
 8103f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	689b      	ldr	r3, [r3, #8]
 8103f6a:	3b01      	subs	r3, #1
 8103f6c:	025b      	lsls	r3, r3, #9
 8103f6e:	b29b      	uxth	r3, r3
 8103f70:	431a      	orrs	r2, r3
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	68db      	ldr	r3, [r3, #12]
 8103f76:	3b01      	subs	r3, #1
 8103f78:	041b      	lsls	r3, r3, #16
 8103f7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8103f7e:	431a      	orrs	r2, r3
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	691b      	ldr	r3, [r3, #16]
 8103f84:	3b01      	subs	r3, #1
 8103f86:	061b      	lsls	r3, r3, #24
 8103f88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103f8c:	4932      	ldr	r1, [pc, #200]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103f8e:	4313      	orrs	r3, r2
 8103f90:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103f92:	4b31      	ldr	r3, [pc, #196]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8103f9a:	687b      	ldr	r3, [r7, #4]
 8103f9c:	695b      	ldr	r3, [r3, #20]
 8103f9e:	492e      	ldr	r1, [pc, #184]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103fa0:	4313      	orrs	r3, r2
 8103fa2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103fa8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8103fac:	687b      	ldr	r3, [r7, #4]
 8103fae:	699b      	ldr	r3, [r3, #24]
 8103fb0:	4929      	ldr	r1, [pc, #164]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103fb2:	4313      	orrs	r3, r2
 8103fb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103fb6:	4b28      	ldr	r3, [pc, #160]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103fba:	4a27      	ldr	r2, [pc, #156]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8103fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103fc2:	4b25      	ldr	r3, [pc, #148]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103fc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103fca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8103fce:	687a      	ldr	r2, [r7, #4]
 8103fd0:	69d2      	ldr	r2, [r2, #28]
 8103fd2:	00d2      	lsls	r2, r2, #3
 8103fd4:	4920      	ldr	r1, [pc, #128]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103fd6:	4313      	orrs	r3, r2
 8103fd8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103fda:	4b1f      	ldr	r3, [pc, #124]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103fde:	4a1e      	ldr	r2, [pc, #120]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103fe6:	683b      	ldr	r3, [r7, #0]
 8103fe8:	2b00      	cmp	r3, #0
 8103fea:	d106      	bne.n	8103ffa <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103fec:	4b1a      	ldr	r3, [pc, #104]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103ff0:	4a19      	ldr	r2, [pc, #100]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8103ff2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8103ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103ff8:	e00f      	b.n	810401a <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103ffa:	683b      	ldr	r3, [r7, #0]
 8103ffc:	2b01      	cmp	r3, #1
 8103ffe:	d106      	bne.n	810400e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104000:	4b15      	ldr	r3, [pc, #84]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8104002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104004:	4a14      	ldr	r2, [pc, #80]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8104006:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810400a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810400c:	e005      	b.n	810401a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810400e:	4b12      	ldr	r3, [pc, #72]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8104010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104012:	4a11      	ldr	r2, [pc, #68]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8104014:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104018:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810401a:	4b0f      	ldr	r3, [pc, #60]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 810401c:	681b      	ldr	r3, [r3, #0]
 810401e:	4a0e      	ldr	r2, [pc, #56]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8104020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8104024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104026:	f7fc fd8d 	bl	8100b44 <HAL_GetTick>
 810402a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810402c:	e008      	b.n	8104040 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810402e:	f7fc fd89 	bl	8100b44 <HAL_GetTick>
 8104032:	4602      	mov	r2, r0
 8104034:	68bb      	ldr	r3, [r7, #8]
 8104036:	1ad3      	subs	r3, r2, r3
 8104038:	2b02      	cmp	r3, #2
 810403a:	d901      	bls.n	8104040 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810403c:	2303      	movs	r3, #3
 810403e:	e006      	b.n	810404e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104040:	4b05      	ldr	r3, [pc, #20]	@ (8104058 <RCCEx_PLL3_Config+0x160>)
 8104042:	681b      	ldr	r3, [r3, #0]
 8104044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104048:	2b00      	cmp	r3, #0
 810404a:	d0f0      	beq.n	810402e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810404c:	7bfb      	ldrb	r3, [r7, #15]
}
 810404e:	4618      	mov	r0, r3
 8104050:	3710      	adds	r7, #16
 8104052:	46bd      	mov	sp, r7
 8104054:	bd80      	pop	{r7, pc}
 8104056:	bf00      	nop
 8104058:	58024400 	.word	0x58024400

0810405c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 810405c:	b580      	push	{r7, lr}
 810405e:	b08a      	sub	sp, #40	@ 0x28
 8104060:	af00      	add	r7, sp, #0
 8104062:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	2b00      	cmp	r3, #0
 8104068:	d101      	bne.n	810406e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 810406a:	2301      	movs	r3, #1
 810406c:	e075      	b.n	810415a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 810406e:	687b      	ldr	r3, [r7, #4]
 8104070:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8104074:	b2db      	uxtb	r3, r3
 8104076:	2b00      	cmp	r3, #0
 8104078:	d105      	bne.n	8104086 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 810407a:	687b      	ldr	r3, [r7, #4]
 810407c:	2200      	movs	r2, #0
 810407e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8104080:	6878      	ldr	r0, [r7, #4]
 8104082:	f7fc fa2f 	bl	81004e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	2204      	movs	r2, #4
 810408a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 810408e:	6878      	ldr	r0, [r7, #4]
 8104090:	f000 f868 	bl	8104164 <HAL_SD_InitCard>
 8104094:	4603      	mov	r3, r0
 8104096:	2b00      	cmp	r3, #0
 8104098:	d001      	beq.n	810409e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 810409a:	2301      	movs	r3, #1
 810409c:	e05d      	b.n	810415a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 810409e:	f107 0308 	add.w	r3, r7, #8
 81040a2:	4619      	mov	r1, r3
 81040a4:	6878      	ldr	r0, [r7, #4]
 81040a6:	f000 fdb5 	bl	8104c14 <HAL_SD_GetCardStatus>
 81040aa:	4603      	mov	r3, r0
 81040ac:	2b00      	cmp	r3, #0
 81040ae:	d001      	beq.n	81040b4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 81040b0:	2301      	movs	r3, #1
 81040b2:	e052      	b.n	810415a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 81040b4:	7e3b      	ldrb	r3, [r7, #24]
 81040b6:	b2db      	uxtb	r3, r3
 81040b8:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 81040ba:	7e7b      	ldrb	r3, [r7, #25]
 81040bc:	b2db      	uxtb	r3, r3
 81040be:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81040c4:	2b01      	cmp	r3, #1
 81040c6:	d10a      	bne.n	81040de <HAL_SD_Init+0x82>
 81040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81040ca:	2b00      	cmp	r3, #0
 81040cc:	d102      	bne.n	81040d4 <HAL_SD_Init+0x78>
 81040ce:	6a3b      	ldr	r3, [r7, #32]
 81040d0:	2b00      	cmp	r3, #0
 81040d2:	d004      	beq.n	81040de <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81040da:	659a      	str	r2, [r3, #88]	@ 0x58
 81040dc:	e00b      	b.n	81040f6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81040de:	687b      	ldr	r3, [r7, #4]
 81040e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81040e2:	2b01      	cmp	r3, #1
 81040e4:	d104      	bne.n	81040f0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81040ec:	659a      	str	r2, [r3, #88]	@ 0x58
 81040ee:	e002      	b.n	81040f6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	2200      	movs	r2, #0
 81040f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 81040f6:	687b      	ldr	r3, [r7, #4]
 81040f8:	68db      	ldr	r3, [r3, #12]
 81040fa:	4619      	mov	r1, r3
 81040fc:	6878      	ldr	r0, [r7, #4]
 81040fe:	f000 fe73 	bl	8104de8 <HAL_SD_ConfigWideBusOperation>
 8104102:	4603      	mov	r3, r0
 8104104:	2b00      	cmp	r3, #0
 8104106:	d001      	beq.n	810410c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8104108:	2301      	movs	r3, #1
 810410a:	e026      	b.n	810415a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 810410c:	f7fc fd1a 	bl	8100b44 <HAL_GetTick>
 8104110:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8104112:	e011      	b.n	8104138 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8104114:	f7fc fd16 	bl	8100b44 <HAL_GetTick>
 8104118:	4602      	mov	r2, r0
 810411a:	69fb      	ldr	r3, [r7, #28]
 810411c:	1ad3      	subs	r3, r2, r3
 810411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104122:	d109      	bne.n	8104138 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8104124:	687b      	ldr	r3, [r7, #4]
 8104126:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810412a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	2201      	movs	r2, #1
 8104130:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8104134:	2303      	movs	r3, #3
 8104136:	e010      	b.n	810415a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8104138:	6878      	ldr	r0, [r7, #4]
 810413a:	f000 ff67 	bl	810500c <HAL_SD_GetCardState>
 810413e:	4603      	mov	r3, r0
 8104140:	2b04      	cmp	r3, #4
 8104142:	d1e7      	bne.n	8104114 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	2200      	movs	r2, #0
 8104148:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	2200      	movs	r2, #0
 810414e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	2201      	movs	r2, #1
 8104154:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8104158:	2300      	movs	r3, #0
}
 810415a:	4618      	mov	r0, r3
 810415c:	3728      	adds	r7, #40	@ 0x28
 810415e:	46bd      	mov	sp, r7
 8104160:	bd80      	pop	{r7, pc}
	...

08104164 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8104164:	b590      	push	{r4, r7, lr}
 8104166:	b08d      	sub	sp, #52	@ 0x34
 8104168:	af02      	add	r7, sp, #8
 810416a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 810416c:	2300      	movs	r3, #0
 810416e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8104170:	2300      	movs	r3, #0
 8104172:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8104174:	2300      	movs	r3, #0
 8104176:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8104178:	2300      	movs	r3, #0
 810417a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810417c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8104180:	f04f 0100 	mov.w	r1, #0
 8104184:	f7fe fc76 	bl	8102a74 <HAL_RCCEx_GetPeriphCLKFreq>
 8104188:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 810418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810418c:	2b00      	cmp	r3, #0
 810418e:	d109      	bne.n	81041a4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	2201      	movs	r2, #1
 8104194:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8104198:	687b      	ldr	r3, [r7, #4]
 810419a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 810419e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81041a0:	2301      	movs	r3, #1
 81041a2:	e070      	b.n	8104286 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 81041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81041a6:	0a1b      	lsrs	r3, r3, #8
 81041a8:	4a39      	ldr	r2, [pc, #228]	@ (8104290 <HAL_SD_InitCard+0x12c>)
 81041aa:	fba2 2303 	umull	r2, r3, r2, r3
 81041ae:	091b      	lsrs	r3, r3, #4
 81041b0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 81041b2:	687b      	ldr	r3, [r7, #4]
 81041b4:	681c      	ldr	r4, [r3, #0]
 81041b6:	466a      	mov	r2, sp
 81041b8:	f107 0318 	add.w	r3, r7, #24
 81041bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 81041c0:	e882 0003 	stmia.w	r2, {r0, r1}
 81041c4:	f107 030c 	add.w	r3, r7, #12
 81041c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 81041ca:	4620      	mov	r0, r4
 81041cc:	f001 faf8 	bl	81057c0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 81041d0:	687b      	ldr	r3, [r7, #4]
 81041d2:	681b      	ldr	r3, [r3, #0]
 81041d4:	4618      	mov	r0, r3
 81041d6:	f001 fb3b 	bl	8105850 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 81041da:	69fb      	ldr	r3, [r7, #28]
 81041dc:	2b00      	cmp	r3, #0
 81041de:	d005      	beq.n	81041ec <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 81041e0:	69fb      	ldr	r3, [r7, #28]
 81041e2:	005b      	lsls	r3, r3, #1
 81041e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 81041ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 81041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81041ee:	2b00      	cmp	r3, #0
 81041f0:	d007      	beq.n	8104202 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 81041f2:	4a28      	ldr	r2, [pc, #160]	@ (8104294 <HAL_SD_InitCard+0x130>)
 81041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81041f6:	fbb2 f3f3 	udiv	r3, r2, r3
 81041fa:	3301      	adds	r3, #1
 81041fc:	4618      	mov	r0, r3
 81041fe:	f7fc fcad 	bl	8100b5c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8104202:	6878      	ldr	r0, [r7, #4]
 8104204:	f000 fff0 	bl	81051e8 <SD_PowerON>
 8104208:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810420a:	6a3b      	ldr	r3, [r7, #32]
 810420c:	2b00      	cmp	r3, #0
 810420e:	d00b      	beq.n	8104228 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	2201      	movs	r2, #1
 8104214:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8104218:	687b      	ldr	r3, [r7, #4]
 810421a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810421c:	6a3b      	ldr	r3, [r7, #32]
 810421e:	431a      	orrs	r2, r3
 8104220:	687b      	ldr	r3, [r7, #4]
 8104222:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8104224:	2301      	movs	r3, #1
 8104226:	e02e      	b.n	8104286 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8104228:	6878      	ldr	r0, [r7, #4]
 810422a:	f000 ff0f 	bl	810504c <SD_InitCard>
 810422e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8104230:	6a3b      	ldr	r3, [r7, #32]
 8104232:	2b00      	cmp	r3, #0
 8104234:	d00b      	beq.n	810424e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	2201      	movs	r2, #1
 810423a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104242:	6a3b      	ldr	r3, [r7, #32]
 8104244:	431a      	orrs	r2, r3
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 810424a:	2301      	movs	r3, #1
 810424c:	e01b      	b.n	8104286 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	681b      	ldr	r3, [r3, #0]
 8104252:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8104256:	4618      	mov	r0, r3
 8104258:	f001 fb90 	bl	810597c <SDMMC_CmdBlockLength>
 810425c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810425e:	6a3b      	ldr	r3, [r7, #32]
 8104260:	2b00      	cmp	r3, #0
 8104262:	d00f      	beq.n	8104284 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104264:	687b      	ldr	r3, [r7, #4]
 8104266:	681b      	ldr	r3, [r3, #0]
 8104268:	4a0b      	ldr	r2, [pc, #44]	@ (8104298 <HAL_SD_InitCard+0x134>)
 810426a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104270:	6a3b      	ldr	r3, [r7, #32]
 8104272:	431a      	orrs	r2, r3
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8104278:	687b      	ldr	r3, [r7, #4]
 810427a:	2201      	movs	r2, #1
 810427c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8104280:	2301      	movs	r3, #1
 8104282:	e000      	b.n	8104286 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8104284:	2300      	movs	r3, #0
}
 8104286:	4618      	mov	r0, r3
 8104288:	372c      	adds	r7, #44	@ 0x2c
 810428a:	46bd      	mov	sp, r7
 810428c:	bd90      	pop	{r4, r7, pc}
 810428e:	bf00      	nop
 8104290:	014f8b59 	.word	0x014f8b59
 8104294:	00012110 	.word	0x00012110
 8104298:	1fe00fff 	.word	0x1fe00fff

0810429c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 810429c:	b580      	push	{r7, lr}
 810429e:	b092      	sub	sp, #72	@ 0x48
 81042a0:	af00      	add	r7, sp, #0
 81042a2:	60f8      	str	r0, [r7, #12]
 81042a4:	60b9      	str	r1, [r7, #8]
 81042a6:	607a      	str	r2, [r7, #4]
 81042a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 81042aa:	f7fc fc4b 	bl	8100b44 <HAL_GetTick>
 81042ae:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 81042b4:	68bb      	ldr	r3, [r7, #8]
 81042b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 81042b8:	68bb      	ldr	r3, [r7, #8]
 81042ba:	2b00      	cmp	r3, #0
 81042bc:	d107      	bne.n	81042ce <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 81042be:	68fb      	ldr	r3, [r7, #12]
 81042c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81042c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81042c6:	68fb      	ldr	r3, [r7, #12]
 81042c8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81042ca:	2301      	movs	r3, #1
 81042cc:	e167      	b.n	810459e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 81042ce:	68fb      	ldr	r3, [r7, #12]
 81042d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81042d4:	b2db      	uxtb	r3, r3
 81042d6:	2b01      	cmp	r3, #1
 81042d8:	f040 815a 	bne.w	8104590 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 81042dc:	68fb      	ldr	r3, [r7, #12]
 81042de:	2200      	movs	r2, #0
 81042e0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 81042e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81042e4:	683b      	ldr	r3, [r7, #0]
 81042e6:	441a      	add	r2, r3
 81042e8:	68fb      	ldr	r3, [r7, #12]
 81042ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81042ec:	429a      	cmp	r2, r3
 81042ee:	d907      	bls.n	8104300 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 81042f0:	68fb      	ldr	r3, [r7, #12]
 81042f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81042f4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 81042f8:	68fb      	ldr	r3, [r7, #12]
 81042fa:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 81042fc:	2301      	movs	r3, #1
 81042fe:	e14e      	b.n	810459e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8104300:	68fb      	ldr	r3, [r7, #12]
 8104302:	2203      	movs	r2, #3
 8104304:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8104308:	68fb      	ldr	r3, [r7, #12]
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	2200      	movs	r2, #0
 810430e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8104310:	68fb      	ldr	r3, [r7, #12]
 8104312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104314:	2b01      	cmp	r3, #1
 8104316:	d002      	beq.n	810431e <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8104318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810431a:	025b      	lsls	r3, r3, #9
 810431c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810431e:	f04f 33ff 	mov.w	r3, #4294967295
 8104322:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8104324:	683b      	ldr	r3, [r7, #0]
 8104326:	025b      	lsls	r3, r3, #9
 8104328:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 810432a:	2390      	movs	r3, #144	@ 0x90
 810432c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810432e:	2302      	movs	r3, #2
 8104330:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8104332:	2300      	movs	r3, #0
 8104334:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8104336:	2300      	movs	r3, #0
 8104338:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 810433a:	68fb      	ldr	r3, [r7, #12]
 810433c:	681b      	ldr	r3, [r3, #0]
 810433e:	f107 0214 	add.w	r2, r7, #20
 8104342:	4611      	mov	r1, r2
 8104344:	4618      	mov	r0, r3
 8104346:	f001 faed 	bl	8105924 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 810434a:	68fb      	ldr	r3, [r7, #12]
 810434c:	681b      	ldr	r3, [r3, #0]
 810434e:	68da      	ldr	r2, [r3, #12]
 8104350:	68fb      	ldr	r3, [r7, #12]
 8104352:	681b      	ldr	r3, [r3, #0]
 8104354:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8104358:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 810435a:	683b      	ldr	r3, [r7, #0]
 810435c:	2b01      	cmp	r3, #1
 810435e:	d90a      	bls.n	8104376 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8104360:	68fb      	ldr	r3, [r7, #12]
 8104362:	2202      	movs	r2, #2
 8104364:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8104366:	68fb      	ldr	r3, [r7, #12]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 810436c:	4618      	mov	r0, r3
 810436e:	f001 fb4b 	bl	8105a08 <SDMMC_CmdReadMultiBlock>
 8104372:	6478      	str	r0, [r7, #68]	@ 0x44
 8104374:	e009      	b.n	810438a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8104376:	68fb      	ldr	r3, [r7, #12]
 8104378:	2201      	movs	r2, #1
 810437a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 810437c:	68fb      	ldr	r3, [r7, #12]
 810437e:	681b      	ldr	r3, [r3, #0]
 8104380:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8104382:	4618      	mov	r0, r3
 8104384:	f001 fb1d 	bl	81059c2 <SDMMC_CmdReadSingleBlock>
 8104388:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 810438a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810438c:	2b00      	cmp	r3, #0
 810438e:	d012      	beq.n	81043b6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	4a84      	ldr	r2, [pc, #528]	@ (81045a8 <HAL_SD_ReadBlocks+0x30c>)
 8104396:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8104398:	68fb      	ldr	r3, [r7, #12]
 810439a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810439c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810439e:	431a      	orrs	r2, r3
 81043a0:	68fb      	ldr	r3, [r7, #12]
 81043a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 81043a4:	68fb      	ldr	r3, [r7, #12]
 81043a6:	2201      	movs	r2, #1
 81043a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 81043ac:	68fb      	ldr	r3, [r7, #12]
 81043ae:	2200      	movs	r2, #0
 81043b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 81043b2:	2301      	movs	r3, #1
 81043b4:	e0f3      	b.n	810459e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 81043b6:	69bb      	ldr	r3, [r7, #24]
 81043b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 81043ba:	e058      	b.n	810446e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 81043bc:	68fb      	ldr	r3, [r7, #12]
 81043be:	681b      	ldr	r3, [r3, #0]
 81043c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81043c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81043c6:	2b00      	cmp	r3, #0
 81043c8:	d033      	beq.n	8104432 <HAL_SD_ReadBlocks+0x196>
 81043ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81043cc:	2b1f      	cmp	r3, #31
 81043ce:	d930      	bls.n	8104432 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 81043d0:	2300      	movs	r3, #0
 81043d2:	643b      	str	r3, [r7, #64]	@ 0x40
 81043d4:	e027      	b.n	8104426 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 81043d6:	68fb      	ldr	r3, [r7, #12]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	4618      	mov	r0, r3
 81043dc:	f001 fa1a 	bl	8105814 <SDMMC_ReadFIFO>
 81043e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 81043e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81043e4:	b2da      	uxtb	r2, r3
 81043e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81043e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 81043ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81043ec:	3301      	adds	r3, #1
 81043ee:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 81043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81043f2:	0a1b      	lsrs	r3, r3, #8
 81043f4:	b2da      	uxtb	r2, r3
 81043f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81043f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 81043fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81043fc:	3301      	adds	r3, #1
 81043fe:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8104400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104402:	0c1b      	lsrs	r3, r3, #16
 8104404:	b2da      	uxtb	r2, r3
 8104406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104408:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 810440a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810440c:	3301      	adds	r3, #1
 810440e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8104410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104412:	0e1b      	lsrs	r3, r3, #24
 8104414:	b2da      	uxtb	r2, r3
 8104416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104418:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 810441a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810441c:	3301      	adds	r3, #1
 810441e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8104420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104422:	3301      	adds	r3, #1
 8104424:	643b      	str	r3, [r7, #64]	@ 0x40
 8104426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104428:	2b07      	cmp	r3, #7
 810442a:	d9d4      	bls.n	81043d6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 810442c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810442e:	3b20      	subs	r3, #32
 8104430:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8104432:	f7fc fb87 	bl	8100b44 <HAL_GetTick>
 8104436:	4602      	mov	r2, r0
 8104438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810443a:	1ad3      	subs	r3, r2, r3
 810443c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 810443e:	429a      	cmp	r2, r3
 8104440:	d902      	bls.n	8104448 <HAL_SD_ReadBlocks+0x1ac>
 8104442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104444:	2b00      	cmp	r3, #0
 8104446:	d112      	bne.n	810446e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104448:	68fb      	ldr	r3, [r7, #12]
 810444a:	681b      	ldr	r3, [r3, #0]
 810444c:	4a56      	ldr	r2, [pc, #344]	@ (81045a8 <HAL_SD_ReadBlocks+0x30c>)
 810444e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8104450:	68fb      	ldr	r3, [r7, #12]
 8104452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104454:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8104458:	68fb      	ldr	r3, [r7, #12]
 810445a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 810445c:	68fb      	ldr	r3, [r7, #12]
 810445e:	2201      	movs	r2, #1
 8104460:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8104464:	68fb      	ldr	r3, [r7, #12]
 8104466:	2200      	movs	r2, #0
 8104468:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 810446a:	2303      	movs	r3, #3
 810446c:	e097      	b.n	810459e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 810446e:	68fb      	ldr	r3, [r7, #12]
 8104470:	681b      	ldr	r3, [r3, #0]
 8104472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104474:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8104478:	2b00      	cmp	r3, #0
 810447a:	d09f      	beq.n	81043bc <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 810447c:	68fb      	ldr	r3, [r7, #12]
 810447e:	681b      	ldr	r3, [r3, #0]
 8104480:	68da      	ldr	r2, [r3, #12]
 8104482:	68fb      	ldr	r3, [r7, #12]
 8104484:	681b      	ldr	r3, [r3, #0]
 8104486:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 810448a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 810448c:	68fb      	ldr	r3, [r7, #12]
 810448e:	681b      	ldr	r3, [r3, #0]
 8104490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104496:	2b00      	cmp	r3, #0
 8104498:	d022      	beq.n	81044e0 <HAL_SD_ReadBlocks+0x244>
 810449a:	683b      	ldr	r3, [r7, #0]
 810449c:	2b01      	cmp	r3, #1
 810449e:	d91f      	bls.n	81044e0 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 81044a0:	68fb      	ldr	r3, [r7, #12]
 81044a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81044a4:	2b03      	cmp	r3, #3
 81044a6:	d01b      	beq.n	81044e0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 81044a8:	68fb      	ldr	r3, [r7, #12]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	4618      	mov	r0, r3
 81044ae:	f001 fb15 	bl	8105adc <SDMMC_CmdStopTransfer>
 81044b2:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 81044b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81044b6:	2b00      	cmp	r3, #0
 81044b8:	d012      	beq.n	81044e0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81044ba:	68fb      	ldr	r3, [r7, #12]
 81044bc:	681b      	ldr	r3, [r3, #0]
 81044be:	4a3a      	ldr	r2, [pc, #232]	@ (81045a8 <HAL_SD_ReadBlocks+0x30c>)
 81044c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 81044c2:	68fb      	ldr	r3, [r7, #12]
 81044c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81044c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81044c8:	431a      	orrs	r2, r3
 81044ca:	68fb      	ldr	r3, [r7, #12]
 81044cc:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 81044ce:	68fb      	ldr	r3, [r7, #12]
 81044d0:	2201      	movs	r2, #1
 81044d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 81044d6:	68fb      	ldr	r3, [r7, #12]
 81044d8:	2200      	movs	r2, #0
 81044da:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 81044dc:	2301      	movs	r3, #1
 81044de:	e05e      	b.n	810459e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 81044e0:	68fb      	ldr	r3, [r7, #12]
 81044e2:	681b      	ldr	r3, [r3, #0]
 81044e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81044e6:	f003 0308 	and.w	r3, r3, #8
 81044ea:	2b00      	cmp	r3, #0
 81044ec:	d012      	beq.n	8104514 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81044ee:	68fb      	ldr	r3, [r7, #12]
 81044f0:	681b      	ldr	r3, [r3, #0]
 81044f2:	4a2d      	ldr	r2, [pc, #180]	@ (81045a8 <HAL_SD_ReadBlocks+0x30c>)
 81044f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 81044f6:	68fb      	ldr	r3, [r7, #12]
 81044f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81044fa:	f043 0208 	orr.w	r2, r3, #8
 81044fe:	68fb      	ldr	r3, [r7, #12]
 8104500:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8104502:	68fb      	ldr	r3, [r7, #12]
 8104504:	2201      	movs	r2, #1
 8104506:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 810450a:	68fb      	ldr	r3, [r7, #12]
 810450c:	2200      	movs	r2, #0
 810450e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8104510:	2301      	movs	r3, #1
 8104512:	e044      	b.n	810459e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8104514:	68fb      	ldr	r3, [r7, #12]
 8104516:	681b      	ldr	r3, [r3, #0]
 8104518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810451a:	f003 0302 	and.w	r3, r3, #2
 810451e:	2b00      	cmp	r3, #0
 8104520:	d012      	beq.n	8104548 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104522:	68fb      	ldr	r3, [r7, #12]
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	4a20      	ldr	r2, [pc, #128]	@ (81045a8 <HAL_SD_ReadBlocks+0x30c>)
 8104528:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810452e:	f043 0202 	orr.w	r2, r3, #2
 8104532:	68fb      	ldr	r3, [r7, #12]
 8104534:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8104536:	68fb      	ldr	r3, [r7, #12]
 8104538:	2201      	movs	r2, #1
 810453a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 810453e:	68fb      	ldr	r3, [r7, #12]
 8104540:	2200      	movs	r2, #0
 8104542:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8104544:	2301      	movs	r3, #1
 8104546:	e02a      	b.n	810459e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8104548:	68fb      	ldr	r3, [r7, #12]
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810454e:	f003 0320 	and.w	r3, r3, #32
 8104552:	2b00      	cmp	r3, #0
 8104554:	d012      	beq.n	810457c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104556:	68fb      	ldr	r3, [r7, #12]
 8104558:	681b      	ldr	r3, [r3, #0]
 810455a:	4a13      	ldr	r2, [pc, #76]	@ (81045a8 <HAL_SD_ReadBlocks+0x30c>)
 810455c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 810455e:	68fb      	ldr	r3, [r7, #12]
 8104560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104562:	f043 0220 	orr.w	r2, r3, #32
 8104566:	68fb      	ldr	r3, [r7, #12]
 8104568:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 810456a:	68fb      	ldr	r3, [r7, #12]
 810456c:	2201      	movs	r2, #1
 810456e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8104572:	68fb      	ldr	r3, [r7, #12]
 8104574:	2200      	movs	r2, #0
 8104576:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8104578:	2301      	movs	r3, #1
 810457a:	e010      	b.n	810459e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810457c:	68fb      	ldr	r3, [r7, #12]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	4a0a      	ldr	r2, [pc, #40]	@ (81045ac <HAL_SD_ReadBlocks+0x310>)
 8104582:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8104584:	68fb      	ldr	r3, [r7, #12]
 8104586:	2201      	movs	r2, #1
 8104588:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 810458c:	2300      	movs	r3, #0
 810458e:	e006      	b.n	810459e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8104590:	68fb      	ldr	r3, [r7, #12]
 8104592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104594:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8104598:	68fb      	ldr	r3, [r7, #12]
 810459a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 810459c:	2301      	movs	r3, #1
  }
}
 810459e:	4618      	mov	r0, r3
 81045a0:	3748      	adds	r7, #72	@ 0x48
 81045a2:	46bd      	mov	sp, r7
 81045a4:	bd80      	pop	{r7, pc}
 81045a6:	bf00      	nop
 81045a8:	1fe00fff 	.word	0x1fe00fff
 81045ac:	18000f3a 	.word	0x18000f3a

081045b0 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 81045b0:	b580      	push	{r7, lr}
 81045b2:	b092      	sub	sp, #72	@ 0x48
 81045b4:	af00      	add	r7, sp, #0
 81045b6:	60f8      	str	r0, [r7, #12]
 81045b8:	60b9      	str	r1, [r7, #8]
 81045ba:	607a      	str	r2, [r7, #4]
 81045bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 81045be:	f7fc fac1 	bl	8100b44 <HAL_GetTick>
 81045c2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 81045c4:	687b      	ldr	r3, [r7, #4]
 81045c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 81045c8:	68bb      	ldr	r3, [r7, #8]
 81045ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 81045cc:	68bb      	ldr	r3, [r7, #8]
 81045ce:	2b00      	cmp	r3, #0
 81045d0:	d107      	bne.n	81045e2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 81045d2:	68fb      	ldr	r3, [r7, #12]
 81045d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81045d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81045da:	68fb      	ldr	r3, [r7, #12]
 81045dc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81045de:	2301      	movs	r3, #1
 81045e0:	e16b      	b.n	81048ba <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 81045e2:	68fb      	ldr	r3, [r7, #12]
 81045e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81045e8:	b2db      	uxtb	r3, r3
 81045ea:	2b01      	cmp	r3, #1
 81045ec:	f040 815e 	bne.w	81048ac <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 81045f0:	68fb      	ldr	r3, [r7, #12]
 81045f2:	2200      	movs	r2, #0
 81045f4:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 81045f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81045f8:	683b      	ldr	r3, [r7, #0]
 81045fa:	441a      	add	r2, r3
 81045fc:	68fb      	ldr	r3, [r7, #12]
 81045fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104600:	429a      	cmp	r2, r3
 8104602:	d907      	bls.n	8104614 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8104604:	68fb      	ldr	r3, [r7, #12]
 8104606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104608:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 810460c:	68fb      	ldr	r3, [r7, #12]
 810460e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8104610:	2301      	movs	r3, #1
 8104612:	e152      	b.n	81048ba <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8104614:	68fb      	ldr	r3, [r7, #12]
 8104616:	2203      	movs	r2, #3
 8104618:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 810461c:	68fb      	ldr	r3, [r7, #12]
 810461e:	681b      	ldr	r3, [r3, #0]
 8104620:	2200      	movs	r2, #0
 8104622:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8104624:	68fb      	ldr	r3, [r7, #12]
 8104626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104628:	2b01      	cmp	r3, #1
 810462a:	d002      	beq.n	8104632 <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 810462c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810462e:	025b      	lsls	r3, r3, #9
 8104630:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8104632:	f04f 33ff 	mov.w	r3, #4294967295
 8104636:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8104638:	683b      	ldr	r3, [r7, #0]
 810463a:	025b      	lsls	r3, r3, #9
 810463c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 810463e:	2390      	movs	r3, #144	@ 0x90
 8104640:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8104642:	2300      	movs	r3, #0
 8104644:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8104646:	2300      	movs	r3, #0
 8104648:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 810464a:	2300      	movs	r3, #0
 810464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 810464e:	68fb      	ldr	r3, [r7, #12]
 8104650:	681b      	ldr	r3, [r3, #0]
 8104652:	f107 0218 	add.w	r2, r7, #24
 8104656:	4611      	mov	r1, r2
 8104658:	4618      	mov	r0, r3
 810465a:	f001 f963 	bl	8105924 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 810465e:	68fb      	ldr	r3, [r7, #12]
 8104660:	681b      	ldr	r3, [r3, #0]
 8104662:	68da      	ldr	r2, [r3, #12]
 8104664:	68fb      	ldr	r3, [r7, #12]
 8104666:	681b      	ldr	r3, [r3, #0]
 8104668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810466c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 810466e:	683b      	ldr	r3, [r7, #0]
 8104670:	2b01      	cmp	r3, #1
 8104672:	d90a      	bls.n	810468a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8104674:	68fb      	ldr	r3, [r7, #12]
 8104676:	2220      	movs	r2, #32
 8104678:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 810467a:	68fb      	ldr	r3, [r7, #12]
 810467c:	681b      	ldr	r3, [r3, #0]
 810467e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8104680:	4618      	mov	r0, r3
 8104682:	f001 fa07 	bl	8105a94 <SDMMC_CmdWriteMultiBlock>
 8104686:	6478      	str	r0, [r7, #68]	@ 0x44
 8104688:	e009      	b.n	810469e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 810468a:	68fb      	ldr	r3, [r7, #12]
 810468c:	2210      	movs	r2, #16
 810468e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8104690:	68fb      	ldr	r3, [r7, #12]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8104696:	4618      	mov	r0, r3
 8104698:	f001 f9d9 	bl	8105a4e <SDMMC_CmdWriteSingleBlock>
 810469c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 810469e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81046a0:	2b00      	cmp	r3, #0
 81046a2:	d012      	beq.n	81046ca <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81046a4:	68fb      	ldr	r3, [r7, #12]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	4a86      	ldr	r2, [pc, #536]	@ (81048c4 <HAL_SD_WriteBlocks+0x314>)
 81046aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 81046ac:	68fb      	ldr	r3, [r7, #12]
 81046ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81046b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81046b2:	431a      	orrs	r2, r3
 81046b4:	68fb      	ldr	r3, [r7, #12]
 81046b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 81046b8:	68fb      	ldr	r3, [r7, #12]
 81046ba:	2201      	movs	r2, #1
 81046bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 81046c0:	68fb      	ldr	r3, [r7, #12]
 81046c2:	2200      	movs	r2, #0
 81046c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 81046c6:	2301      	movs	r3, #1
 81046c8:	e0f7      	b.n	81048ba <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 81046ca:	69fb      	ldr	r3, [r7, #28]
 81046cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 81046ce:	e05c      	b.n	810478a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 81046d0:	68fb      	ldr	r3, [r7, #12]
 81046d2:	681b      	ldr	r3, [r3, #0]
 81046d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81046d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81046da:	2b00      	cmp	r3, #0
 81046dc:	d037      	beq.n	810474e <HAL_SD_WriteBlocks+0x19e>
 81046de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81046e0:	2b1f      	cmp	r3, #31
 81046e2:	d934      	bls.n	810474e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 81046e4:	2300      	movs	r3, #0
 81046e6:	643b      	str	r3, [r7, #64]	@ 0x40
 81046e8:	e02b      	b.n	8104742 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 81046ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81046ec:	781b      	ldrb	r3, [r3, #0]
 81046ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 81046f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81046f2:	3301      	adds	r3, #1
 81046f4:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 81046f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81046f8:	781b      	ldrb	r3, [r3, #0]
 81046fa:	021a      	lsls	r2, r3, #8
 81046fc:	697b      	ldr	r3, [r7, #20]
 81046fe:	4313      	orrs	r3, r2
 8104700:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8104702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104704:	3301      	adds	r3, #1
 8104706:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8104708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810470a:	781b      	ldrb	r3, [r3, #0]
 810470c:	041a      	lsls	r2, r3, #16
 810470e:	697b      	ldr	r3, [r7, #20]
 8104710:	4313      	orrs	r3, r2
 8104712:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8104714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104716:	3301      	adds	r3, #1
 8104718:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 810471a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810471c:	781b      	ldrb	r3, [r3, #0]
 810471e:	061a      	lsls	r2, r3, #24
 8104720:	697b      	ldr	r3, [r7, #20]
 8104722:	4313      	orrs	r3, r2
 8104724:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8104726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104728:	3301      	adds	r3, #1
 810472a:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 810472c:	68fb      	ldr	r3, [r7, #12]
 810472e:	681b      	ldr	r3, [r3, #0]
 8104730:	f107 0214 	add.w	r2, r7, #20
 8104734:	4611      	mov	r1, r2
 8104736:	4618      	mov	r0, r3
 8104738:	f001 f879 	bl	810582e <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 810473c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810473e:	3301      	adds	r3, #1
 8104740:	643b      	str	r3, [r7, #64]	@ 0x40
 8104742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104744:	2b07      	cmp	r3, #7
 8104746:	d9d0      	bls.n	81046ea <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8104748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810474a:	3b20      	subs	r3, #32
 810474c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 810474e:	f7fc f9f9 	bl	8100b44 <HAL_GetTick>
 8104752:	4602      	mov	r2, r0
 8104754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104756:	1ad3      	subs	r3, r2, r3
 8104758:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 810475a:	429a      	cmp	r2, r3
 810475c:	d902      	bls.n	8104764 <HAL_SD_WriteBlocks+0x1b4>
 810475e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104760:	2b00      	cmp	r3, #0
 8104762:	d112      	bne.n	810478a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104764:	68fb      	ldr	r3, [r7, #12]
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	4a56      	ldr	r2, [pc, #344]	@ (81048c4 <HAL_SD_WriteBlocks+0x314>)
 810476a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 810476c:	68fb      	ldr	r3, [r7, #12]
 810476e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104772:	431a      	orrs	r2, r3
 8104774:	68fb      	ldr	r3, [r7, #12]
 8104776:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8104778:	68fb      	ldr	r3, [r7, #12]
 810477a:	2201      	movs	r2, #1
 810477c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8104780:	68fb      	ldr	r3, [r7, #12]
 8104782:	2200      	movs	r2, #0
 8104784:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8104786:	2303      	movs	r3, #3
 8104788:	e097      	b.n	81048ba <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 810478a:	68fb      	ldr	r3, [r7, #12]
 810478c:	681b      	ldr	r3, [r3, #0]
 810478e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104790:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8104794:	2b00      	cmp	r3, #0
 8104796:	d09b      	beq.n	81046d0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8104798:	68fb      	ldr	r3, [r7, #12]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	68da      	ldr	r2, [r3, #12]
 810479e:	68fb      	ldr	r3, [r7, #12]
 81047a0:	681b      	ldr	r3, [r3, #0]
 81047a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 81047a6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 81047a8:	68fb      	ldr	r3, [r7, #12]
 81047aa:	681b      	ldr	r3, [r3, #0]
 81047ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81047ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81047b2:	2b00      	cmp	r3, #0
 81047b4:	d022      	beq.n	81047fc <HAL_SD_WriteBlocks+0x24c>
 81047b6:	683b      	ldr	r3, [r7, #0]
 81047b8:	2b01      	cmp	r3, #1
 81047ba:	d91f      	bls.n	81047fc <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 81047bc:	68fb      	ldr	r3, [r7, #12]
 81047be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81047c0:	2b03      	cmp	r3, #3
 81047c2:	d01b      	beq.n	81047fc <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 81047c4:	68fb      	ldr	r3, [r7, #12]
 81047c6:	681b      	ldr	r3, [r3, #0]
 81047c8:	4618      	mov	r0, r3
 81047ca:	f001 f987 	bl	8105adc <SDMMC_CmdStopTransfer>
 81047ce:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 81047d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81047d2:	2b00      	cmp	r3, #0
 81047d4:	d012      	beq.n	81047fc <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81047d6:	68fb      	ldr	r3, [r7, #12]
 81047d8:	681b      	ldr	r3, [r3, #0]
 81047da:	4a3a      	ldr	r2, [pc, #232]	@ (81048c4 <HAL_SD_WriteBlocks+0x314>)
 81047dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 81047de:	68fb      	ldr	r3, [r7, #12]
 81047e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81047e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81047e4:	431a      	orrs	r2, r3
 81047e6:	68fb      	ldr	r3, [r7, #12]
 81047e8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 81047ea:	68fb      	ldr	r3, [r7, #12]
 81047ec:	2201      	movs	r2, #1
 81047ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 81047f2:	68fb      	ldr	r3, [r7, #12]
 81047f4:	2200      	movs	r2, #0
 81047f6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 81047f8:	2301      	movs	r3, #1
 81047fa:	e05e      	b.n	81048ba <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 81047fc:	68fb      	ldr	r3, [r7, #12]
 81047fe:	681b      	ldr	r3, [r3, #0]
 8104800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104802:	f003 0308 	and.w	r3, r3, #8
 8104806:	2b00      	cmp	r3, #0
 8104808:	d012      	beq.n	8104830 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810480a:	68fb      	ldr	r3, [r7, #12]
 810480c:	681b      	ldr	r3, [r3, #0]
 810480e:	4a2d      	ldr	r2, [pc, #180]	@ (81048c4 <HAL_SD_WriteBlocks+0x314>)
 8104810:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8104812:	68fb      	ldr	r3, [r7, #12]
 8104814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104816:	f043 0208 	orr.w	r2, r3, #8
 810481a:	68fb      	ldr	r3, [r7, #12]
 810481c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 810481e:	68fb      	ldr	r3, [r7, #12]
 8104820:	2201      	movs	r2, #1
 8104822:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8104826:	68fb      	ldr	r3, [r7, #12]
 8104828:	2200      	movs	r2, #0
 810482a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 810482c:	2301      	movs	r3, #1
 810482e:	e044      	b.n	81048ba <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8104830:	68fb      	ldr	r3, [r7, #12]
 8104832:	681b      	ldr	r3, [r3, #0]
 8104834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104836:	f003 0302 	and.w	r3, r3, #2
 810483a:	2b00      	cmp	r3, #0
 810483c:	d012      	beq.n	8104864 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810483e:	68fb      	ldr	r3, [r7, #12]
 8104840:	681b      	ldr	r3, [r3, #0]
 8104842:	4a20      	ldr	r2, [pc, #128]	@ (81048c4 <HAL_SD_WriteBlocks+0x314>)
 8104844:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8104846:	68fb      	ldr	r3, [r7, #12]
 8104848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810484a:	f043 0202 	orr.w	r2, r3, #2
 810484e:	68fb      	ldr	r3, [r7, #12]
 8104850:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8104852:	68fb      	ldr	r3, [r7, #12]
 8104854:	2201      	movs	r2, #1
 8104856:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 810485a:	68fb      	ldr	r3, [r7, #12]
 810485c:	2200      	movs	r2, #0
 810485e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8104860:	2301      	movs	r3, #1
 8104862:	e02a      	b.n	81048ba <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8104864:	68fb      	ldr	r3, [r7, #12]
 8104866:	681b      	ldr	r3, [r3, #0]
 8104868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810486a:	f003 0310 	and.w	r3, r3, #16
 810486e:	2b00      	cmp	r3, #0
 8104870:	d012      	beq.n	8104898 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104872:	68fb      	ldr	r3, [r7, #12]
 8104874:	681b      	ldr	r3, [r3, #0]
 8104876:	4a13      	ldr	r2, [pc, #76]	@ (81048c4 <HAL_SD_WriteBlocks+0x314>)
 8104878:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 810487a:	68fb      	ldr	r3, [r7, #12]
 810487c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810487e:	f043 0210 	orr.w	r2, r3, #16
 8104882:	68fb      	ldr	r3, [r7, #12]
 8104884:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8104886:	68fb      	ldr	r3, [r7, #12]
 8104888:	2201      	movs	r2, #1
 810488a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 810488e:	68fb      	ldr	r3, [r7, #12]
 8104890:	2200      	movs	r2, #0
 8104892:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8104894:	2301      	movs	r3, #1
 8104896:	e010      	b.n	81048ba <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8104898:	68fb      	ldr	r3, [r7, #12]
 810489a:	681b      	ldr	r3, [r3, #0]
 810489c:	4a0a      	ldr	r2, [pc, #40]	@ (81048c8 <HAL_SD_WriteBlocks+0x318>)
 810489e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 81048a0:	68fb      	ldr	r3, [r7, #12]
 81048a2:	2201      	movs	r2, #1
 81048a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 81048a8:	2300      	movs	r3, #0
 81048aa:	e006      	b.n	81048ba <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 81048ac:	68fb      	ldr	r3, [r7, #12]
 81048ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81048b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 81048b4:	68fb      	ldr	r3, [r7, #12]
 81048b6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81048b8:	2301      	movs	r3, #1
  }
}
 81048ba:	4618      	mov	r0, r3
 81048bc:	3748      	adds	r7, #72	@ 0x48
 81048be:	46bd      	mov	sp, r7
 81048c0:	bd80      	pop	{r7, pc}
 81048c2:	bf00      	nop
 81048c4:	1fe00fff 	.word	0x1fe00fff
 81048c8:	18000f3a 	.word	0x18000f3a

081048cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 81048cc:	b480      	push	{r7}
 81048ce:	b083      	sub	sp, #12
 81048d0:	af00      	add	r7, sp, #0
 81048d2:	6078      	str	r0, [r7, #4]
 81048d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 81048d6:	687b      	ldr	r3, [r7, #4]
 81048d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81048da:	0f9b      	lsrs	r3, r3, #30
 81048dc:	b2da      	uxtb	r2, r3
 81048de:	683b      	ldr	r3, [r7, #0]
 81048e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81048e6:	0e9b      	lsrs	r3, r3, #26
 81048e8:	b2db      	uxtb	r3, r3
 81048ea:	f003 030f 	and.w	r3, r3, #15
 81048ee:	b2da      	uxtb	r2, r3
 81048f0:	683b      	ldr	r3, [r7, #0]
 81048f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81048f8:	0e1b      	lsrs	r3, r3, #24
 81048fa:	b2db      	uxtb	r3, r3
 81048fc:	f003 0303 	and.w	r3, r3, #3
 8104900:	b2da      	uxtb	r2, r3
 8104902:	683b      	ldr	r3, [r7, #0]
 8104904:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810490a:	0c1b      	lsrs	r3, r3, #16
 810490c:	b2da      	uxtb	r2, r3
 810490e:	683b      	ldr	r3, [r7, #0]
 8104910:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8104912:	687b      	ldr	r3, [r7, #4]
 8104914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104916:	0a1b      	lsrs	r3, r3, #8
 8104918:	b2da      	uxtb	r2, r3
 810491a:	683b      	ldr	r3, [r7, #0]
 810491c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 810491e:	687b      	ldr	r3, [r7, #4]
 8104920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104922:	b2da      	uxtb	r2, r3
 8104924:	683b      	ldr	r3, [r7, #0]
 8104926:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8104928:	687b      	ldr	r3, [r7, #4]
 810492a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810492c:	0d1b      	lsrs	r3, r3, #20
 810492e:	b29a      	uxth	r2, r3
 8104930:	683b      	ldr	r3, [r7, #0]
 8104932:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104938:	0c1b      	lsrs	r3, r3, #16
 810493a:	b2db      	uxtb	r3, r3
 810493c:	f003 030f 	and.w	r3, r3, #15
 8104940:	b2da      	uxtb	r2, r3
 8104942:	683b      	ldr	r3, [r7, #0]
 8104944:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8104946:	687b      	ldr	r3, [r7, #4]
 8104948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810494a:	0bdb      	lsrs	r3, r3, #15
 810494c:	b2db      	uxtb	r3, r3
 810494e:	f003 0301 	and.w	r3, r3, #1
 8104952:	b2da      	uxtb	r2, r3
 8104954:	683b      	ldr	r3, [r7, #0]
 8104956:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810495c:	0b9b      	lsrs	r3, r3, #14
 810495e:	b2db      	uxtb	r3, r3
 8104960:	f003 0301 	and.w	r3, r3, #1
 8104964:	b2da      	uxtb	r2, r3
 8104966:	683b      	ldr	r3, [r7, #0]
 8104968:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 810496a:	687b      	ldr	r3, [r7, #4]
 810496c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810496e:	0b5b      	lsrs	r3, r3, #13
 8104970:	b2db      	uxtb	r3, r3
 8104972:	f003 0301 	and.w	r3, r3, #1
 8104976:	b2da      	uxtb	r2, r3
 8104978:	683b      	ldr	r3, [r7, #0]
 810497a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 810497c:	687b      	ldr	r3, [r7, #4]
 810497e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104980:	0b1b      	lsrs	r3, r3, #12
 8104982:	b2db      	uxtb	r3, r3
 8104984:	f003 0301 	and.w	r3, r3, #1
 8104988:	b2da      	uxtb	r2, r3
 810498a:	683b      	ldr	r3, [r7, #0]
 810498c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 810498e:	683b      	ldr	r3, [r7, #0]
 8104990:	2200      	movs	r2, #0
 8104992:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8104994:	687b      	ldr	r3, [r7, #4]
 8104996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104998:	2b00      	cmp	r3, #0
 810499a:	d163      	bne.n	8104a64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 810499c:	687b      	ldr	r3, [r7, #4]
 810499e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81049a0:	009a      	lsls	r2, r3, #2
 81049a2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 81049a6:	4013      	ands	r3, r2
 81049a8:	687a      	ldr	r2, [r7, #4]
 81049aa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 81049ac:	0f92      	lsrs	r2, r2, #30
 81049ae:	431a      	orrs	r2, r3
 81049b0:	683b      	ldr	r3, [r7, #0]
 81049b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 81049b4:	687b      	ldr	r3, [r7, #4]
 81049b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81049b8:	0edb      	lsrs	r3, r3, #27
 81049ba:	b2db      	uxtb	r3, r3
 81049bc:	f003 0307 	and.w	r3, r3, #7
 81049c0:	b2da      	uxtb	r2, r3
 81049c2:	683b      	ldr	r3, [r7, #0]
 81049c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81049ca:	0e1b      	lsrs	r3, r3, #24
 81049cc:	b2db      	uxtb	r3, r3
 81049ce:	f003 0307 	and.w	r3, r3, #7
 81049d2:	b2da      	uxtb	r2, r3
 81049d4:	683b      	ldr	r3, [r7, #0]
 81049d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 81049d8:	687b      	ldr	r3, [r7, #4]
 81049da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81049dc:	0d5b      	lsrs	r3, r3, #21
 81049de:	b2db      	uxtb	r3, r3
 81049e0:	f003 0307 	and.w	r3, r3, #7
 81049e4:	b2da      	uxtb	r2, r3
 81049e6:	683b      	ldr	r3, [r7, #0]
 81049e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 81049ea:	687b      	ldr	r3, [r7, #4]
 81049ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81049ee:	0c9b      	lsrs	r3, r3, #18
 81049f0:	b2db      	uxtb	r3, r3
 81049f2:	f003 0307 	and.w	r3, r3, #7
 81049f6:	b2da      	uxtb	r2, r3
 81049f8:	683b      	ldr	r3, [r7, #0]
 81049fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 81049fc:	687b      	ldr	r3, [r7, #4]
 81049fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104a00:	0bdb      	lsrs	r3, r3, #15
 8104a02:	b2db      	uxtb	r3, r3
 8104a04:	f003 0307 	and.w	r3, r3, #7
 8104a08:	b2da      	uxtb	r2, r3
 8104a0a:	683b      	ldr	r3, [r7, #0]
 8104a0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8104a0e:	683b      	ldr	r3, [r7, #0]
 8104a10:	691b      	ldr	r3, [r3, #16]
 8104a12:	1c5a      	adds	r2, r3, #1
 8104a14:	687b      	ldr	r3, [r7, #4]
 8104a16:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8104a18:	683b      	ldr	r3, [r7, #0]
 8104a1a:	7e1b      	ldrb	r3, [r3, #24]
 8104a1c:	b2db      	uxtb	r3, r3
 8104a1e:	f003 0307 	and.w	r3, r3, #7
 8104a22:	3302      	adds	r3, #2
 8104a24:	2201      	movs	r2, #1
 8104a26:	fa02 f303 	lsl.w	r3, r2, r3
 8104a2a:	687a      	ldr	r2, [r7, #4]
 8104a2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8104a2e:	fb03 f202 	mul.w	r2, r3, r2
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8104a36:	683b      	ldr	r3, [r7, #0]
 8104a38:	7a1b      	ldrb	r3, [r3, #8]
 8104a3a:	b2db      	uxtb	r3, r3
 8104a3c:	f003 030f 	and.w	r3, r3, #15
 8104a40:	2201      	movs	r2, #1
 8104a42:	409a      	lsls	r2, r3
 8104a44:	687b      	ldr	r3, [r7, #4]
 8104a46:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104a4c:	687a      	ldr	r2, [r7, #4]
 8104a4e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8104a50:	0a52      	lsrs	r2, r2, #9
 8104a52:	fb03 f202 	mul.w	r2, r3, r2
 8104a56:	687b      	ldr	r3, [r7, #4]
 8104a58:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8104a5a:	687b      	ldr	r3, [r7, #4]
 8104a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8104a60:	655a      	str	r2, [r3, #84]	@ 0x54
 8104a62:	e031      	b.n	8104ac8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8104a64:	687b      	ldr	r3, [r7, #4]
 8104a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104a68:	2b01      	cmp	r3, #1
 8104a6a:	d11d      	bne.n	8104aa8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8104a6c:	687b      	ldr	r3, [r7, #4]
 8104a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104a70:	041b      	lsls	r3, r3, #16
 8104a72:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8104a76:	687b      	ldr	r3, [r7, #4]
 8104a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104a7a:	0c1b      	lsrs	r3, r3, #16
 8104a7c:	431a      	orrs	r2, r3
 8104a7e:	683b      	ldr	r3, [r7, #0]
 8104a80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8104a82:	683b      	ldr	r3, [r7, #0]
 8104a84:	691b      	ldr	r3, [r3, #16]
 8104a86:	3301      	adds	r3, #1
 8104a88:	029a      	lsls	r2, r3, #10
 8104a8a:	687b      	ldr	r3, [r7, #4]
 8104a8c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8104a8e:	687b      	ldr	r3, [r7, #4]
 8104a90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8104a9c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8104a9e:	687b      	ldr	r3, [r7, #4]
 8104aa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8104aa2:	687b      	ldr	r3, [r7, #4]
 8104aa4:	655a      	str	r2, [r3, #84]	@ 0x54
 8104aa6:	e00f      	b.n	8104ac8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	681b      	ldr	r3, [r3, #0]
 8104aac:	4a58      	ldr	r2, [pc, #352]	@ (8104c10 <HAL_SD_GetCardCSD+0x344>)
 8104aae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104ab4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8104ab8:	687b      	ldr	r3, [r7, #4]
 8104aba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8104abc:	687b      	ldr	r3, [r7, #4]
 8104abe:	2201      	movs	r2, #1
 8104ac0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8104ac4:	2301      	movs	r3, #1
 8104ac6:	e09d      	b.n	8104c04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8104ac8:	687b      	ldr	r3, [r7, #4]
 8104aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104acc:	0b9b      	lsrs	r3, r3, #14
 8104ace:	b2db      	uxtb	r3, r3
 8104ad0:	f003 0301 	and.w	r3, r3, #1
 8104ad4:	b2da      	uxtb	r2, r3
 8104ad6:	683b      	ldr	r3, [r7, #0]
 8104ad8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104ade:	09db      	lsrs	r3, r3, #7
 8104ae0:	b2db      	uxtb	r3, r3
 8104ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104ae6:	b2da      	uxtb	r2, r3
 8104ae8:	683b      	ldr	r3, [r7, #0]
 8104aea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8104aec:	687b      	ldr	r3, [r7, #4]
 8104aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104af0:	b2db      	uxtb	r3, r3
 8104af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104af6:	b2da      	uxtb	r2, r3
 8104af8:	683b      	ldr	r3, [r7, #0]
 8104afa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8104afc:	687b      	ldr	r3, [r7, #4]
 8104afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b00:	0fdb      	lsrs	r3, r3, #31
 8104b02:	b2da      	uxtb	r2, r3
 8104b04:	683b      	ldr	r3, [r7, #0]
 8104b06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8104b08:	687b      	ldr	r3, [r7, #4]
 8104b0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b0c:	0f5b      	lsrs	r3, r3, #29
 8104b0e:	b2db      	uxtb	r3, r3
 8104b10:	f003 0303 	and.w	r3, r3, #3
 8104b14:	b2da      	uxtb	r2, r3
 8104b16:	683b      	ldr	r3, [r7, #0]
 8104b18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b1e:	0e9b      	lsrs	r3, r3, #26
 8104b20:	b2db      	uxtb	r3, r3
 8104b22:	f003 0307 	and.w	r3, r3, #7
 8104b26:	b2da      	uxtb	r2, r3
 8104b28:	683b      	ldr	r3, [r7, #0]
 8104b2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8104b2c:	687b      	ldr	r3, [r7, #4]
 8104b2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b30:	0d9b      	lsrs	r3, r3, #22
 8104b32:	b2db      	uxtb	r3, r3
 8104b34:	f003 030f 	and.w	r3, r3, #15
 8104b38:	b2da      	uxtb	r2, r3
 8104b3a:	683b      	ldr	r3, [r7, #0]
 8104b3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8104b3e:	687b      	ldr	r3, [r7, #4]
 8104b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b42:	0d5b      	lsrs	r3, r3, #21
 8104b44:	b2db      	uxtb	r3, r3
 8104b46:	f003 0301 	and.w	r3, r3, #1
 8104b4a:	b2da      	uxtb	r2, r3
 8104b4c:	683b      	ldr	r3, [r7, #0]
 8104b4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8104b52:	683b      	ldr	r3, [r7, #0]
 8104b54:	2200      	movs	r2, #0
 8104b56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b5e:	0c1b      	lsrs	r3, r3, #16
 8104b60:	b2db      	uxtb	r3, r3
 8104b62:	f003 0301 	and.w	r3, r3, #1
 8104b66:	b2da      	uxtb	r2, r3
 8104b68:	683b      	ldr	r3, [r7, #0]
 8104b6a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8104b6e:	687b      	ldr	r3, [r7, #4]
 8104b70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b72:	0bdb      	lsrs	r3, r3, #15
 8104b74:	b2db      	uxtb	r3, r3
 8104b76:	f003 0301 	and.w	r3, r3, #1
 8104b7a:	b2da      	uxtb	r2, r3
 8104b7c:	683b      	ldr	r3, [r7, #0]
 8104b7e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8104b82:	687b      	ldr	r3, [r7, #4]
 8104b84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b86:	0b9b      	lsrs	r3, r3, #14
 8104b88:	b2db      	uxtb	r3, r3
 8104b8a:	f003 0301 	and.w	r3, r3, #1
 8104b8e:	b2da      	uxtb	r2, r3
 8104b90:	683b      	ldr	r3, [r7, #0]
 8104b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8104b96:	687b      	ldr	r3, [r7, #4]
 8104b98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b9a:	0b5b      	lsrs	r3, r3, #13
 8104b9c:	b2db      	uxtb	r3, r3
 8104b9e:	f003 0301 	and.w	r3, r3, #1
 8104ba2:	b2da      	uxtb	r2, r3
 8104ba4:	683b      	ldr	r3, [r7, #0]
 8104ba6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104bae:	0b1b      	lsrs	r3, r3, #12
 8104bb0:	b2db      	uxtb	r3, r3
 8104bb2:	f003 0301 	and.w	r3, r3, #1
 8104bb6:	b2da      	uxtb	r2, r3
 8104bb8:	683b      	ldr	r3, [r7, #0]
 8104bba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8104bbe:	687b      	ldr	r3, [r7, #4]
 8104bc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104bc2:	0a9b      	lsrs	r3, r3, #10
 8104bc4:	b2db      	uxtb	r3, r3
 8104bc6:	f003 0303 	and.w	r3, r3, #3
 8104bca:	b2da      	uxtb	r2, r3
 8104bcc:	683b      	ldr	r3, [r7, #0]
 8104bce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8104bd2:	687b      	ldr	r3, [r7, #4]
 8104bd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104bd6:	0a1b      	lsrs	r3, r3, #8
 8104bd8:	b2db      	uxtb	r3, r3
 8104bda:	f003 0303 	and.w	r3, r3, #3
 8104bde:	b2da      	uxtb	r2, r3
 8104be0:	683b      	ldr	r3, [r7, #0]
 8104be2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104bea:	085b      	lsrs	r3, r3, #1
 8104bec:	b2db      	uxtb	r3, r3
 8104bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104bf2:	b2da      	uxtb	r2, r3
 8104bf4:	683b      	ldr	r3, [r7, #0]
 8104bf6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8104bfa:	683b      	ldr	r3, [r7, #0]
 8104bfc:	2201      	movs	r2, #1
 8104bfe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8104c02:	2300      	movs	r3, #0
}
 8104c04:	4618      	mov	r0, r3
 8104c06:	370c      	adds	r7, #12
 8104c08:	46bd      	mov	sp, r7
 8104c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c0e:	4770      	bx	lr
 8104c10:	1fe00fff 	.word	0x1fe00fff

08104c14 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8104c14:	b580      	push	{r7, lr}
 8104c16:	b094      	sub	sp, #80	@ 0x50
 8104c18:	af00      	add	r7, sp, #0
 8104c1a:	6078      	str	r0, [r7, #4]
 8104c1c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8104c1e:	2300      	movs	r3, #0
 8104c20:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8104c24:	687b      	ldr	r3, [r7, #4]
 8104c26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8104c2a:	b2db      	uxtb	r3, r3
 8104c2c:	2b03      	cmp	r3, #3
 8104c2e:	d101      	bne.n	8104c34 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8104c30:	2301      	movs	r3, #1
 8104c32:	e0a7      	b.n	8104d84 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8104c34:	f107 0308 	add.w	r3, r7, #8
 8104c38:	4619      	mov	r1, r3
 8104c3a:	6878      	ldr	r0, [r7, #4]
 8104c3c:	f000 fb62 	bl	8105304 <SD_SendSDStatus>
 8104c40:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8104c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104c44:	2b00      	cmp	r3, #0
 8104c46:	d011      	beq.n	8104c6c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104c48:	687b      	ldr	r3, [r7, #4]
 8104c4a:	681b      	ldr	r3, [r3, #0]
 8104c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8104d8c <HAL_SD_GetCardStatus+0x178>)
 8104c4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104c56:	431a      	orrs	r2, r3
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8104c5c:	687b      	ldr	r3, [r7, #4]
 8104c5e:	2201      	movs	r2, #1
 8104c60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8104c64:	2301      	movs	r3, #1
 8104c66:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8104c6a:	e070      	b.n	8104d4e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8104c6c:	68bb      	ldr	r3, [r7, #8]
 8104c6e:	099b      	lsrs	r3, r3, #6
 8104c70:	b2db      	uxtb	r3, r3
 8104c72:	f003 0303 	and.w	r3, r3, #3
 8104c76:	b2da      	uxtb	r2, r3
 8104c78:	683b      	ldr	r3, [r7, #0]
 8104c7a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8104c7c:	68bb      	ldr	r3, [r7, #8]
 8104c7e:	095b      	lsrs	r3, r3, #5
 8104c80:	b2db      	uxtb	r3, r3
 8104c82:	f003 0301 	and.w	r3, r3, #1
 8104c86:	b2da      	uxtb	r2, r3
 8104c88:	683b      	ldr	r3, [r7, #0]
 8104c8a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8104c8c:	68bb      	ldr	r3, [r7, #8]
 8104c8e:	0a1b      	lsrs	r3, r3, #8
 8104c90:	b29b      	uxth	r3, r3
 8104c92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8104c96:	b29a      	uxth	r2, r3
 8104c98:	68bb      	ldr	r3, [r7, #8]
 8104c9a:	0e1b      	lsrs	r3, r3, #24
 8104c9c:	b29b      	uxth	r3, r3
 8104c9e:	4313      	orrs	r3, r2
 8104ca0:	b29a      	uxth	r2, r3
 8104ca2:	683b      	ldr	r3, [r7, #0]
 8104ca4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8104ca6:	68fb      	ldr	r3, [r7, #12]
 8104ca8:	061a      	lsls	r2, r3, #24
 8104caa:	68fb      	ldr	r3, [r7, #12]
 8104cac:	021b      	lsls	r3, r3, #8
 8104cae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8104cb2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8104cb4:	68fb      	ldr	r3, [r7, #12]
 8104cb6:	0a1b      	lsrs	r3, r3, #8
 8104cb8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8104cbc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8104cbe:	68fb      	ldr	r3, [r7, #12]
 8104cc0:	0e1b      	lsrs	r3, r3, #24
 8104cc2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8104cc4:	683b      	ldr	r3, [r7, #0]
 8104cc6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8104cc8:	693b      	ldr	r3, [r7, #16]
 8104cca:	b2da      	uxtb	r2, r3
 8104ccc:	683b      	ldr	r3, [r7, #0]
 8104cce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8104cd0:	693b      	ldr	r3, [r7, #16]
 8104cd2:	0a1b      	lsrs	r3, r3, #8
 8104cd4:	b2da      	uxtb	r2, r3
 8104cd6:	683b      	ldr	r3, [r7, #0]
 8104cd8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8104cda:	693b      	ldr	r3, [r7, #16]
 8104cdc:	0d1b      	lsrs	r3, r3, #20
 8104cde:	b2db      	uxtb	r3, r3
 8104ce0:	f003 030f 	and.w	r3, r3, #15
 8104ce4:	b2da      	uxtb	r2, r3
 8104ce6:	683b      	ldr	r3, [r7, #0]
 8104ce8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8104cea:	693b      	ldr	r3, [r7, #16]
 8104cec:	0c1b      	lsrs	r3, r3, #16
 8104cee:	b29b      	uxth	r3, r3
 8104cf0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8104cf4:	b29a      	uxth	r2, r3
 8104cf6:	697b      	ldr	r3, [r7, #20]
 8104cf8:	b29b      	uxth	r3, r3
 8104cfa:	b2db      	uxtb	r3, r3
 8104cfc:	b29b      	uxth	r3, r3
 8104cfe:	4313      	orrs	r3, r2
 8104d00:	b29a      	uxth	r2, r3
 8104d02:	683b      	ldr	r3, [r7, #0]
 8104d04:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8104d06:	697b      	ldr	r3, [r7, #20]
 8104d08:	0a9b      	lsrs	r3, r3, #10
 8104d0a:	b2db      	uxtb	r3, r3
 8104d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104d10:	b2da      	uxtb	r2, r3
 8104d12:	683b      	ldr	r3, [r7, #0]
 8104d14:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8104d16:	697b      	ldr	r3, [r7, #20]
 8104d18:	0a1b      	lsrs	r3, r3, #8
 8104d1a:	b2db      	uxtb	r3, r3
 8104d1c:	f003 0303 	and.w	r3, r3, #3
 8104d20:	b2da      	uxtb	r2, r3
 8104d22:	683b      	ldr	r3, [r7, #0]
 8104d24:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8104d26:	697b      	ldr	r3, [r7, #20]
 8104d28:	091b      	lsrs	r3, r3, #4
 8104d2a:	b2db      	uxtb	r3, r3
 8104d2c:	f003 030f 	and.w	r3, r3, #15
 8104d30:	b2da      	uxtb	r2, r3
 8104d32:	683b      	ldr	r3, [r7, #0]
 8104d34:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8104d36:	697b      	ldr	r3, [r7, #20]
 8104d38:	b2db      	uxtb	r3, r3
 8104d3a:	f003 030f 	and.w	r3, r3, #15
 8104d3e:	b2da      	uxtb	r2, r3
 8104d40:	683b      	ldr	r3, [r7, #0]
 8104d42:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8104d44:	69bb      	ldr	r3, [r7, #24]
 8104d46:	0e1b      	lsrs	r3, r3, #24
 8104d48:	b2da      	uxtb	r2, r3
 8104d4a:	683b      	ldr	r3, [r7, #0]
 8104d4c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8104d4e:	687b      	ldr	r3, [r7, #4]
 8104d50:	681b      	ldr	r3, [r3, #0]
 8104d52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8104d56:	4618      	mov	r0, r3
 8104d58:	f000 fe10 	bl	810597c <SDMMC_CmdBlockLength>
 8104d5c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8104d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104d60:	2b00      	cmp	r3, #0
 8104d62:	d00d      	beq.n	8104d80 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	681b      	ldr	r3, [r3, #0]
 8104d68:	4a08      	ldr	r2, [pc, #32]	@ (8104d8c <HAL_SD_GetCardStatus+0x178>)
 8104d6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8104d70:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	2201      	movs	r2, #1
 8104d76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8104d7a:	2301      	movs	r3, #1
 8104d7c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8104d80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8104d84:	4618      	mov	r0, r3
 8104d86:	3750      	adds	r7, #80	@ 0x50
 8104d88:	46bd      	mov	sp, r7
 8104d8a:	bd80      	pop	{r7, pc}
 8104d8c:	1fe00fff 	.word	0x1fe00fff

08104d90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8104d90:	b480      	push	{r7}
 8104d92:	b083      	sub	sp, #12
 8104d94:	af00      	add	r7, sp, #0
 8104d96:	6078      	str	r0, [r7, #4]
 8104d98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8104d9e:	683b      	ldr	r3, [r7, #0]
 8104da0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8104da6:	683b      	ldr	r3, [r7, #0]
 8104da8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8104daa:	687b      	ldr	r3, [r7, #4]
 8104dac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8104dae:	683b      	ldr	r3, [r7, #0]
 8104db0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8104db6:	683b      	ldr	r3, [r7, #0]
 8104db8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8104dbe:	683b      	ldr	r3, [r7, #0]
 8104dc0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8104dc2:	687b      	ldr	r3, [r7, #4]
 8104dc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8104dc6:	683b      	ldr	r3, [r7, #0]
 8104dc8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8104dce:	683b      	ldr	r3, [r7, #0]
 8104dd0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8104dd2:	687b      	ldr	r3, [r7, #4]
 8104dd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8104dd6:	683b      	ldr	r3, [r7, #0]
 8104dd8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8104dda:	2300      	movs	r3, #0
}
 8104ddc:	4618      	mov	r0, r3
 8104dde:	370c      	adds	r7, #12
 8104de0:	46bd      	mov	sp, r7
 8104de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104de6:	4770      	bx	lr

08104de8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8104de8:	b590      	push	{r4, r7, lr}
 8104dea:	b08d      	sub	sp, #52	@ 0x34
 8104dec:	af02      	add	r7, sp, #8
 8104dee:	6078      	str	r0, [r7, #4]
 8104df0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8104df2:	2300      	movs	r3, #0
 8104df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	2203      	movs	r2, #3
 8104dfc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104e04:	2b03      	cmp	r3, #3
 8104e06:	d02e      	beq.n	8104e66 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8104e08:	683b      	ldr	r3, [r7, #0]
 8104e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104e0e:	d106      	bne.n	8104e1e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104e14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8104e18:	687b      	ldr	r3, [r7, #4]
 8104e1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8104e1c:	e029      	b.n	8104e72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8104e1e:	683b      	ldr	r3, [r7, #0]
 8104e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104e24:	d10a      	bne.n	8104e3c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8104e26:	6878      	ldr	r0, [r7, #4]
 8104e28:	f000 fb64 	bl	81054f4 <SD_WideBus_Enable>
 8104e2c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104e32:	6a3b      	ldr	r3, [r7, #32]
 8104e34:	431a      	orrs	r2, r3
 8104e36:	687b      	ldr	r3, [r7, #4]
 8104e38:	635a      	str	r2, [r3, #52]	@ 0x34
 8104e3a:	e01a      	b.n	8104e72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8104e3c:	683b      	ldr	r3, [r7, #0]
 8104e3e:	2b00      	cmp	r3, #0
 8104e40:	d10a      	bne.n	8104e58 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8104e42:	6878      	ldr	r0, [r7, #4]
 8104e44:	f000 fba1 	bl	810558a <SD_WideBus_Disable>
 8104e48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8104e4a:	687b      	ldr	r3, [r7, #4]
 8104e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104e4e:	6a3b      	ldr	r3, [r7, #32]
 8104e50:	431a      	orrs	r2, r3
 8104e52:	687b      	ldr	r3, [r7, #4]
 8104e54:	635a      	str	r2, [r3, #52]	@ 0x34
 8104e56:	e00c      	b.n	8104e72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8104e58:	687b      	ldr	r3, [r7, #4]
 8104e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104e5c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	635a      	str	r2, [r3, #52]	@ 0x34
 8104e64:	e005      	b.n	8104e72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104e6a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8104e72:	687b      	ldr	r3, [r7, #4]
 8104e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104e76:	2b00      	cmp	r3, #0
 8104e78:	d007      	beq.n	8104e8a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	681b      	ldr	r3, [r3, #0]
 8104e7e:	4a5f      	ldr	r2, [pc, #380]	@ (8104ffc <HAL_SD_ConfigWideBusOperation+0x214>)
 8104e80:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8104e82:	2301      	movs	r3, #1
 8104e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8104e88:	e096      	b.n	8104fb8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8104e8a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8104e8e:	f04f 0100 	mov.w	r1, #0
 8104e92:	f7fd fdef 	bl	8102a74 <HAL_RCCEx_GetPeriphCLKFreq>
 8104e96:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8104e98:	69fb      	ldr	r3, [r7, #28]
 8104e9a:	2b00      	cmp	r3, #0
 8104e9c:	f000 8083 	beq.w	8104fa6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8104ea0:	687b      	ldr	r3, [r7, #4]
 8104ea2:	685b      	ldr	r3, [r3, #4]
 8104ea4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8104ea6:	687b      	ldr	r3, [r7, #4]
 8104ea8:	689b      	ldr	r3, [r3, #8]
 8104eaa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8104eac:	683b      	ldr	r3, [r7, #0]
 8104eae:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	691b      	ldr	r3, [r3, #16]
 8104eb4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	695a      	ldr	r2, [r3, #20]
 8104eba:	69fb      	ldr	r3, [r7, #28]
 8104ebc:	4950      	ldr	r1, [pc, #320]	@ (8105000 <HAL_SD_ConfigWideBusOperation+0x218>)
 8104ebe:	fba1 1303 	umull	r1, r3, r1, r3
 8104ec2:	0e1b      	lsrs	r3, r3, #24
 8104ec4:	429a      	cmp	r2, r3
 8104ec6:	d303      	bcc.n	8104ed0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	695b      	ldr	r3, [r3, #20]
 8104ecc:	61bb      	str	r3, [r7, #24]
 8104ece:	e05a      	b.n	8104f86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104ed8:	d103      	bne.n	8104ee2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	695b      	ldr	r3, [r3, #20]
 8104ede:	61bb      	str	r3, [r7, #24]
 8104ee0:	e051      	b.n	8104f86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104eea:	d126      	bne.n	8104f3a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	695b      	ldr	r3, [r3, #20]
 8104ef0:	2b00      	cmp	r3, #0
 8104ef2:	d10e      	bne.n	8104f12 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8104ef4:	69fb      	ldr	r3, [r7, #28]
 8104ef6:	4a43      	ldr	r2, [pc, #268]	@ (8105004 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8104ef8:	4293      	cmp	r3, r2
 8104efa:	d906      	bls.n	8104f0a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8104efc:	69fb      	ldr	r3, [r7, #28]
 8104efe:	4a40      	ldr	r2, [pc, #256]	@ (8105000 <HAL_SD_ConfigWideBusOperation+0x218>)
 8104f00:	fba2 2303 	umull	r2, r3, r2, r3
 8104f04:	0e5b      	lsrs	r3, r3, #25
 8104f06:	61bb      	str	r3, [r7, #24]
 8104f08:	e03d      	b.n	8104f86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	695b      	ldr	r3, [r3, #20]
 8104f0e:	61bb      	str	r3, [r7, #24]
 8104f10:	e039      	b.n	8104f86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8104f12:	687b      	ldr	r3, [r7, #4]
 8104f14:	695b      	ldr	r3, [r3, #20]
 8104f16:	005b      	lsls	r3, r3, #1
 8104f18:	69fa      	ldr	r2, [r7, #28]
 8104f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8104f1e:	4a39      	ldr	r2, [pc, #228]	@ (8105004 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8104f20:	4293      	cmp	r3, r2
 8104f22:	d906      	bls.n	8104f32 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8104f24:	69fb      	ldr	r3, [r7, #28]
 8104f26:	4a36      	ldr	r2, [pc, #216]	@ (8105000 <HAL_SD_ConfigWideBusOperation+0x218>)
 8104f28:	fba2 2303 	umull	r2, r3, r2, r3
 8104f2c:	0e5b      	lsrs	r3, r3, #25
 8104f2e:	61bb      	str	r3, [r7, #24]
 8104f30:	e029      	b.n	8104f86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	695b      	ldr	r3, [r3, #20]
 8104f36:	61bb      	str	r3, [r7, #24]
 8104f38:	e025      	b.n	8104f86 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	695b      	ldr	r3, [r3, #20]
 8104f3e:	2b00      	cmp	r3, #0
 8104f40:	d10e      	bne.n	8104f60 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8104f42:	69fb      	ldr	r3, [r7, #28]
 8104f44:	4a30      	ldr	r2, [pc, #192]	@ (8105008 <HAL_SD_ConfigWideBusOperation+0x220>)
 8104f46:	4293      	cmp	r3, r2
 8104f48:	d906      	bls.n	8104f58 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8104f4a:	69fb      	ldr	r3, [r7, #28]
 8104f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8105000 <HAL_SD_ConfigWideBusOperation+0x218>)
 8104f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8104f52:	0e1b      	lsrs	r3, r3, #24
 8104f54:	61bb      	str	r3, [r7, #24]
 8104f56:	e016      	b.n	8104f86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8104f58:	687b      	ldr	r3, [r7, #4]
 8104f5a:	695b      	ldr	r3, [r3, #20]
 8104f5c:	61bb      	str	r3, [r7, #24]
 8104f5e:	e012      	b.n	8104f86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8104f60:	687b      	ldr	r3, [r7, #4]
 8104f62:	695b      	ldr	r3, [r3, #20]
 8104f64:	005b      	lsls	r3, r3, #1
 8104f66:	69fa      	ldr	r2, [r7, #28]
 8104f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8104f6c:	4a26      	ldr	r2, [pc, #152]	@ (8105008 <HAL_SD_ConfigWideBusOperation+0x220>)
 8104f6e:	4293      	cmp	r3, r2
 8104f70:	d906      	bls.n	8104f80 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8104f72:	69fb      	ldr	r3, [r7, #28]
 8104f74:	4a22      	ldr	r2, [pc, #136]	@ (8105000 <HAL_SD_ConfigWideBusOperation+0x218>)
 8104f76:	fba2 2303 	umull	r2, r3, r2, r3
 8104f7a:	0e1b      	lsrs	r3, r3, #24
 8104f7c:	61bb      	str	r3, [r7, #24]
 8104f7e:	e002      	b.n	8104f86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8104f80:	687b      	ldr	r3, [r7, #4]
 8104f82:	695b      	ldr	r3, [r3, #20]
 8104f84:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8104f86:	687b      	ldr	r3, [r7, #4]
 8104f88:	681c      	ldr	r4, [r3, #0]
 8104f8a:	466a      	mov	r2, sp
 8104f8c:	f107 0314 	add.w	r3, r7, #20
 8104f90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8104f94:	e882 0003 	stmia.w	r2, {r0, r1}
 8104f98:	f107 0308 	add.w	r3, r7, #8
 8104f9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8104f9e:	4620      	mov	r0, r4
 8104fa0:	f000 fc0e 	bl	81057c0 <SDMMC_Init>
 8104fa4:	e008      	b.n	8104fb8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104faa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8104fae:	687b      	ldr	r3, [r7, #4]
 8104fb0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8104fb2:	2301      	movs	r3, #1
 8104fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	681b      	ldr	r3, [r3, #0]
 8104fbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8104fc0:	4618      	mov	r0, r3
 8104fc2:	f000 fcdb 	bl	810597c <SDMMC_CmdBlockLength>
 8104fc6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8104fc8:	6a3b      	ldr	r3, [r7, #32]
 8104fca:	2b00      	cmp	r3, #0
 8104fcc:	d00c      	beq.n	8104fe8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8104fce:	687b      	ldr	r3, [r7, #4]
 8104fd0:	681b      	ldr	r3, [r3, #0]
 8104fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8104ffc <HAL_SD_ConfigWideBusOperation+0x214>)
 8104fd4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8104fd6:	687b      	ldr	r3, [r7, #4]
 8104fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104fda:	6a3b      	ldr	r3, [r7, #32]
 8104fdc:	431a      	orrs	r2, r3
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8104fe2:	2301      	movs	r3, #1
 8104fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	2201      	movs	r2, #1
 8104fec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8104ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8104ff4:	4618      	mov	r0, r3
 8104ff6:	372c      	adds	r7, #44	@ 0x2c
 8104ff8:	46bd      	mov	sp, r7
 8104ffa:	bd90      	pop	{r4, r7, pc}
 8104ffc:	1fe00fff 	.word	0x1fe00fff
 8105000:	55e63b89 	.word	0x55e63b89
 8105004:	02faf080 	.word	0x02faf080
 8105008:	017d7840 	.word	0x017d7840

0810500c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 810500c:	b580      	push	{r7, lr}
 810500e:	b086      	sub	sp, #24
 8105010:	af00      	add	r7, sp, #0
 8105012:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8105014:	2300      	movs	r3, #0
 8105016:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8105018:	f107 030c 	add.w	r3, r7, #12
 810501c:	4619      	mov	r1, r3
 810501e:	6878      	ldr	r0, [r7, #4]
 8105020:	f000 fa40 	bl	81054a4 <SD_SendStatus>
 8105024:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8105026:	697b      	ldr	r3, [r7, #20]
 8105028:	2b00      	cmp	r3, #0
 810502a:	d005      	beq.n	8105038 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8105030:	697b      	ldr	r3, [r7, #20]
 8105032:	431a      	orrs	r2, r3
 8105034:	687b      	ldr	r3, [r7, #4]
 8105036:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8105038:	68fb      	ldr	r3, [r7, #12]
 810503a:	0a5b      	lsrs	r3, r3, #9
 810503c:	f003 030f 	and.w	r3, r3, #15
 8105040:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8105042:	693b      	ldr	r3, [r7, #16]
}
 8105044:	4618      	mov	r0, r3
 8105046:	3718      	adds	r7, #24
 8105048:	46bd      	mov	sp, r7
 810504a:	bd80      	pop	{r7, pc}

0810504c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 810504c:	b580      	push	{r7, lr}
 810504e:	b090      	sub	sp, #64	@ 0x40
 8105050:	af00      	add	r7, sp, #0
 8105052:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8105054:	2300      	movs	r3, #0
 8105056:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8105058:	f7fb fd74 	bl	8100b44 <HAL_GetTick>
 810505c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 810505e:	687b      	ldr	r3, [r7, #4]
 8105060:	681b      	ldr	r3, [r3, #0]
 8105062:	4618      	mov	r0, r3
 8105064:	f000 fc05 	bl	8105872 <SDMMC_GetPowerState>
 8105068:	4603      	mov	r3, r0
 810506a:	2b00      	cmp	r3, #0
 810506c:	d102      	bne.n	8105074 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810506e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8105072:	e0b5      	b.n	81051e0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8105074:	687b      	ldr	r3, [r7, #4]
 8105076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105078:	2b03      	cmp	r3, #3
 810507a:	d02e      	beq.n	81050da <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	681b      	ldr	r3, [r3, #0]
 8105080:	4618      	mov	r0, r3
 8105082:	f000 fe50 	bl	8105d26 <SDMMC_CmdSendCID>
 8105086:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8105088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810508a:	2b00      	cmp	r3, #0
 810508c:	d001      	beq.n	8105092 <SD_InitCard+0x46>
    {
      return errorstate;
 810508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105090:	e0a6      	b.n	81051e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8105092:	687b      	ldr	r3, [r7, #4]
 8105094:	681b      	ldr	r3, [r3, #0]
 8105096:	2100      	movs	r1, #0
 8105098:	4618      	mov	r0, r3
 810509a:	f000 fc30 	bl	81058fe <SDMMC_GetResponse>
 810509e:	4602      	mov	r2, r0
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 81050a4:	687b      	ldr	r3, [r7, #4]
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	2104      	movs	r1, #4
 81050aa:	4618      	mov	r0, r3
 81050ac:	f000 fc27 	bl	81058fe <SDMMC_GetResponse>
 81050b0:	4602      	mov	r2, r0
 81050b2:	687b      	ldr	r3, [r7, #4]
 81050b4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 81050b6:	687b      	ldr	r3, [r7, #4]
 81050b8:	681b      	ldr	r3, [r3, #0]
 81050ba:	2108      	movs	r1, #8
 81050bc:	4618      	mov	r0, r3
 81050be:	f000 fc1e 	bl	81058fe <SDMMC_GetResponse>
 81050c2:	4602      	mov	r2, r0
 81050c4:	687b      	ldr	r3, [r7, #4]
 81050c6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	681b      	ldr	r3, [r3, #0]
 81050cc:	210c      	movs	r1, #12
 81050ce:	4618      	mov	r0, r3
 81050d0:	f000 fc15 	bl	81058fe <SDMMC_GetResponse>
 81050d4:	4602      	mov	r2, r0
 81050d6:	687b      	ldr	r3, [r7, #4]
 81050d8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81050de:	2b03      	cmp	r3, #3
 81050e0:	d01d      	beq.n	810511e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 81050e2:	e019      	b.n	8105118 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 81050e4:	687b      	ldr	r3, [r7, #4]
 81050e6:	681b      	ldr	r3, [r3, #0]
 81050e8:	f107 020a 	add.w	r2, r7, #10
 81050ec:	4611      	mov	r1, r2
 81050ee:	4618      	mov	r0, r3
 81050f0:	f000 fe58 	bl	8105da4 <SDMMC_CmdSetRelAdd>
 81050f4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 81050f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050f8:	2b00      	cmp	r3, #0
 81050fa:	d001      	beq.n	8105100 <SD_InitCard+0xb4>
      {
        return errorstate;
 81050fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050fe:	e06f      	b.n	81051e0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8105100:	f7fb fd20 	bl	8100b44 <HAL_GetTick>
 8105104:	4602      	mov	r2, r0
 8105106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105108:	1ad3      	subs	r3, r2, r3
 810510a:	f241 3287 	movw	r2, #4999	@ 0x1387
 810510e:	4293      	cmp	r3, r2
 8105110:	d902      	bls.n	8105118 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8105112:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8105116:	e063      	b.n	81051e0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8105118:	897b      	ldrh	r3, [r7, #10]
 810511a:	2b00      	cmp	r3, #0
 810511c:	d0e2      	beq.n	81050e4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105122:	2b03      	cmp	r3, #3
 8105124:	d036      	beq.n	8105194 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8105126:	897b      	ldrh	r3, [r7, #10]
 8105128:	461a      	mov	r2, r3
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810512e:	687b      	ldr	r3, [r7, #4]
 8105130:	681a      	ldr	r2, [r3, #0]
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105136:	041b      	lsls	r3, r3, #16
 8105138:	4619      	mov	r1, r3
 810513a:	4610      	mov	r0, r2
 810513c:	f000 fe12 	bl	8105d64 <SDMMC_CmdSendCSD>
 8105140:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8105142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105144:	2b00      	cmp	r3, #0
 8105146:	d001      	beq.n	810514c <SD_InitCard+0x100>
    {
      return errorstate;
 8105148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810514a:	e049      	b.n	81051e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810514c:	687b      	ldr	r3, [r7, #4]
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	2100      	movs	r1, #0
 8105152:	4618      	mov	r0, r3
 8105154:	f000 fbd3 	bl	81058fe <SDMMC_GetResponse>
 8105158:	4602      	mov	r2, r0
 810515a:	687b      	ldr	r3, [r7, #4]
 810515c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810515e:	687b      	ldr	r3, [r7, #4]
 8105160:	681b      	ldr	r3, [r3, #0]
 8105162:	2104      	movs	r1, #4
 8105164:	4618      	mov	r0, r3
 8105166:	f000 fbca 	bl	81058fe <SDMMC_GetResponse>
 810516a:	4602      	mov	r2, r0
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	2108      	movs	r1, #8
 8105176:	4618      	mov	r0, r3
 8105178:	f000 fbc1 	bl	81058fe <SDMMC_GetResponse>
 810517c:	4602      	mov	r2, r0
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8105182:	687b      	ldr	r3, [r7, #4]
 8105184:	681b      	ldr	r3, [r3, #0]
 8105186:	210c      	movs	r1, #12
 8105188:	4618      	mov	r0, r3
 810518a:	f000 fbb8 	bl	81058fe <SDMMC_GetResponse>
 810518e:	4602      	mov	r2, r0
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8105194:	687b      	ldr	r3, [r7, #4]
 8105196:	681b      	ldr	r3, [r3, #0]
 8105198:	2104      	movs	r1, #4
 810519a:	4618      	mov	r0, r3
 810519c:	f000 fbaf 	bl	81058fe <SDMMC_GetResponse>
 81051a0:	4603      	mov	r3, r0
 81051a2:	0d1a      	lsrs	r2, r3, #20
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 81051a8:	f107 030c 	add.w	r3, r7, #12
 81051ac:	4619      	mov	r1, r3
 81051ae:	6878      	ldr	r0, [r7, #4]
 81051b0:	f7ff fb8c 	bl	81048cc <HAL_SD_GetCardCSD>
 81051b4:	4603      	mov	r3, r0
 81051b6:	2b00      	cmp	r3, #0
 81051b8:	d002      	beq.n	81051c0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81051ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 81051be:	e00f      	b.n	81051e0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 81051c0:	687b      	ldr	r3, [r7, #4]
 81051c2:	681a      	ldr	r2, [r3, #0]
 81051c4:	687b      	ldr	r3, [r7, #4]
 81051c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81051c8:	041b      	lsls	r3, r3, #16
 81051ca:	4619      	mov	r1, r3
 81051cc:	4610      	mov	r0, r2
 81051ce:	f000 fcc1 	bl	8105b54 <SDMMC_CmdSelDesel>
 81051d2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 81051d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81051d6:	2b00      	cmp	r3, #0
 81051d8:	d001      	beq.n	81051de <SD_InitCard+0x192>
  {
    return errorstate;
 81051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81051dc:	e000      	b.n	81051e0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 81051de:	2300      	movs	r3, #0
}
 81051e0:	4618      	mov	r0, r3
 81051e2:	3740      	adds	r7, #64	@ 0x40
 81051e4:	46bd      	mov	sp, r7
 81051e6:	bd80      	pop	{r7, pc}

081051e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 81051e8:	b580      	push	{r7, lr}
 81051ea:	b086      	sub	sp, #24
 81051ec:	af00      	add	r7, sp, #0
 81051ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81051f0:	2300      	movs	r3, #0
 81051f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 81051f4:	2300      	movs	r3, #0
 81051f6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 81051f8:	2300      	movs	r3, #0
 81051fa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	681b      	ldr	r3, [r3, #0]
 8105200:	4618      	mov	r0, r3
 8105202:	f000 fcca 	bl	8105b9a <SDMMC_CmdGoIdleState>
 8105206:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8105208:	68fb      	ldr	r3, [r7, #12]
 810520a:	2b00      	cmp	r3, #0
 810520c:	d001      	beq.n	8105212 <SD_PowerON+0x2a>
  {
    return errorstate;
 810520e:	68fb      	ldr	r3, [r7, #12]
 8105210:	e072      	b.n	81052f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	681b      	ldr	r3, [r3, #0]
 8105216:	4618      	mov	r0, r3
 8105218:	f000 fcdd 	bl	8105bd6 <SDMMC_CmdOperCond>
 810521c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 810521e:	68fb      	ldr	r3, [r7, #12]
 8105220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8105224:	d10d      	bne.n	8105242 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	2200      	movs	r2, #0
 810522a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	4618      	mov	r0, r3
 8105232:	f000 fcb2 	bl	8105b9a <SDMMC_CmdGoIdleState>
 8105236:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8105238:	68fb      	ldr	r3, [r7, #12]
 810523a:	2b00      	cmp	r3, #0
 810523c:	d004      	beq.n	8105248 <SD_PowerON+0x60>
    {
      return errorstate;
 810523e:	68fb      	ldr	r3, [r7, #12]
 8105240:	e05a      	b.n	81052f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8105242:	687b      	ldr	r3, [r7, #4]
 8105244:	2201      	movs	r2, #1
 8105246:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810524c:	2b01      	cmp	r3, #1
 810524e:	d137      	bne.n	81052c0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	681b      	ldr	r3, [r3, #0]
 8105254:	2100      	movs	r1, #0
 8105256:	4618      	mov	r0, r3
 8105258:	f000 fcdd 	bl	8105c16 <SDMMC_CmdAppCommand>
 810525c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810525e:	68fb      	ldr	r3, [r7, #12]
 8105260:	2b00      	cmp	r3, #0
 8105262:	d02d      	beq.n	81052c0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8105264:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8105268:	e046      	b.n	81052f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	681b      	ldr	r3, [r3, #0]
 810526e:	2100      	movs	r1, #0
 8105270:	4618      	mov	r0, r3
 8105272:	f000 fcd0 	bl	8105c16 <SDMMC_CmdAppCommand>
 8105276:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8105278:	68fb      	ldr	r3, [r7, #12]
 810527a:	2b00      	cmp	r3, #0
 810527c:	d001      	beq.n	8105282 <SD_PowerON+0x9a>
    {
      return errorstate;
 810527e:	68fb      	ldr	r3, [r7, #12]
 8105280:	e03a      	b.n	81052f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	681b      	ldr	r3, [r3, #0]
 8105286:	491e      	ldr	r1, [pc, #120]	@ (8105300 <SD_PowerON+0x118>)
 8105288:	4618      	mov	r0, r3
 810528a:	f000 fce7 	bl	8105c5c <SDMMC_CmdAppOperCommand>
 810528e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8105290:	68fb      	ldr	r3, [r7, #12]
 8105292:	2b00      	cmp	r3, #0
 8105294:	d002      	beq.n	810529c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8105296:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810529a:	e02d      	b.n	81052f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	681b      	ldr	r3, [r3, #0]
 81052a0:	2100      	movs	r1, #0
 81052a2:	4618      	mov	r0, r3
 81052a4:	f000 fb2b 	bl	81058fe <SDMMC_GetResponse>
 81052a8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 81052aa:	697b      	ldr	r3, [r7, #20]
 81052ac:	0fdb      	lsrs	r3, r3, #31
 81052ae:	2b01      	cmp	r3, #1
 81052b0:	d101      	bne.n	81052b6 <SD_PowerON+0xce>
 81052b2:	2301      	movs	r3, #1
 81052b4:	e000      	b.n	81052b8 <SD_PowerON+0xd0>
 81052b6:	2300      	movs	r3, #0
 81052b8:	613b      	str	r3, [r7, #16]

    count++;
 81052ba:	68bb      	ldr	r3, [r7, #8]
 81052bc:	3301      	adds	r3, #1
 81052be:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 81052c0:	68bb      	ldr	r3, [r7, #8]
 81052c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 81052c6:	4293      	cmp	r3, r2
 81052c8:	d802      	bhi.n	81052d0 <SD_PowerON+0xe8>
 81052ca:	693b      	ldr	r3, [r7, #16]
 81052cc:	2b00      	cmp	r3, #0
 81052ce:	d0cc      	beq.n	810526a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 81052d0:	68bb      	ldr	r3, [r7, #8]
 81052d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 81052d6:	4293      	cmp	r3, r2
 81052d8:	d902      	bls.n	81052e0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 81052da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81052de:	e00b      	b.n	81052f8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	2200      	movs	r2, #0
 81052e4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 81052e6:	697b      	ldr	r3, [r7, #20]
 81052e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 81052ec:	2b00      	cmp	r3, #0
 81052ee:	d002      	beq.n	81052f6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	2201      	movs	r2, #1
 81052f4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 81052f6:	2300      	movs	r3, #0
}
 81052f8:	4618      	mov	r0, r3
 81052fa:	3718      	adds	r7, #24
 81052fc:	46bd      	mov	sp, r7
 81052fe:	bd80      	pop	{r7, pc}
 8105300:	c1100000 	.word	0xc1100000

08105304 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8105304:	b580      	push	{r7, lr}
 8105306:	b08c      	sub	sp, #48	@ 0x30
 8105308:	af00      	add	r7, sp, #0
 810530a:	6078      	str	r0, [r7, #4]
 810530c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810530e:	f7fb fc19 	bl	8100b44 <HAL_GetTick>
 8105312:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8105314:	683b      	ldr	r3, [r7, #0]
 8105316:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8105318:	687b      	ldr	r3, [r7, #4]
 810531a:	681b      	ldr	r3, [r3, #0]
 810531c:	2100      	movs	r1, #0
 810531e:	4618      	mov	r0, r3
 8105320:	f000 faed 	bl	81058fe <SDMMC_GetResponse>
 8105324:	4603      	mov	r3, r0
 8105326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810532a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810532e:	d102      	bne.n	8105336 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8105330:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105334:	e0b0      	b.n	8105498 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	681b      	ldr	r3, [r3, #0]
 810533a:	2140      	movs	r1, #64	@ 0x40
 810533c:	4618      	mov	r0, r3
 810533e:	f000 fb1d 	bl	810597c <SDMMC_CmdBlockLength>
 8105342:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8105344:	6a3b      	ldr	r3, [r7, #32]
 8105346:	2b00      	cmp	r3, #0
 8105348:	d005      	beq.n	8105356 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810534a:	687b      	ldr	r3, [r7, #4]
 810534c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810534e:	687b      	ldr	r3, [r7, #4]
 8105350:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8105352:	6a3b      	ldr	r3, [r7, #32]
 8105354:	e0a0      	b.n	8105498 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	681a      	ldr	r2, [r3, #0]
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810535e:	041b      	lsls	r3, r3, #16
 8105360:	4619      	mov	r1, r3
 8105362:	4610      	mov	r0, r2
 8105364:	f000 fc57 	bl	8105c16 <SDMMC_CmdAppCommand>
 8105368:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810536a:	6a3b      	ldr	r3, [r7, #32]
 810536c:	2b00      	cmp	r3, #0
 810536e:	d005      	beq.n	810537c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8105370:	687b      	ldr	r3, [r7, #4]
 8105372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8105378:	6a3b      	ldr	r3, [r7, #32]
 810537a:	e08d      	b.n	8105498 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810537c:	f04f 33ff 	mov.w	r3, #4294967295
 8105380:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8105382:	2340      	movs	r3, #64	@ 0x40
 8105384:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8105386:	2360      	movs	r3, #96	@ 0x60
 8105388:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810538a:	2302      	movs	r3, #2
 810538c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810538e:	2300      	movs	r3, #0
 8105390:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8105392:	2301      	movs	r3, #1
 8105394:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8105396:	687b      	ldr	r3, [r7, #4]
 8105398:	681b      	ldr	r3, [r3, #0]
 810539a:	f107 0208 	add.w	r2, r7, #8
 810539e:	4611      	mov	r1, r2
 81053a0:	4618      	mov	r0, r3
 81053a2:	f000 fabf 	bl	8105924 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 81053a6:	687b      	ldr	r3, [r7, #4]
 81053a8:	681b      	ldr	r3, [r3, #0]
 81053aa:	4618      	mov	r0, r3
 81053ac:	f000 fd3f 	bl	8105e2e <SDMMC_CmdStatusRegister>
 81053b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81053b2:	6a3b      	ldr	r3, [r7, #32]
 81053b4:	2b00      	cmp	r3, #0
 81053b6:	d02b      	beq.n	8105410 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 81053b8:	687b      	ldr	r3, [r7, #4]
 81053ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 81053c0:	6a3b      	ldr	r3, [r7, #32]
 81053c2:	e069      	b.n	8105498 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	681b      	ldr	r3, [r3, #0]
 81053c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81053ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81053ce:	2b00      	cmp	r3, #0
 81053d0:	d013      	beq.n	81053fa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 81053d2:	2300      	movs	r3, #0
 81053d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81053d6:	e00d      	b.n	81053f4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	681b      	ldr	r3, [r3, #0]
 81053dc:	4618      	mov	r0, r3
 81053de:	f000 fa19 	bl	8105814 <SDMMC_ReadFIFO>
 81053e2:	4602      	mov	r2, r0
 81053e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81053e6:	601a      	str	r2, [r3, #0]
        pData++;
 81053e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81053ea:	3304      	adds	r3, #4
 81053ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 81053ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81053f0:	3301      	adds	r3, #1
 81053f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81053f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81053f6:	2b07      	cmp	r3, #7
 81053f8:	d9ee      	bls.n	81053d8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 81053fa:	f7fb fba3 	bl	8100b44 <HAL_GetTick>
 81053fe:	4602      	mov	r2, r0
 8105400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105402:	1ad3      	subs	r3, r2, r3
 8105404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105408:	d102      	bne.n	8105410 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810540a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810540e:	e043      	b.n	8105498 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	681b      	ldr	r3, [r3, #0]
 8105414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105416:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 810541a:	2b00      	cmp	r3, #0
 810541c:	d0d2      	beq.n	81053c4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	681b      	ldr	r3, [r3, #0]
 8105422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105424:	f003 0308 	and.w	r3, r3, #8
 8105428:	2b00      	cmp	r3, #0
 810542a:	d001      	beq.n	8105430 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 810542c:	2308      	movs	r3, #8
 810542e:	e033      	b.n	8105498 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105436:	f003 0302 	and.w	r3, r3, #2
 810543a:	2b00      	cmp	r3, #0
 810543c:	d001      	beq.n	8105442 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810543e:	2302      	movs	r3, #2
 8105440:	e02a      	b.n	8105498 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8105442:	687b      	ldr	r3, [r7, #4]
 8105444:	681b      	ldr	r3, [r3, #0]
 8105446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105448:	f003 0320 	and.w	r3, r3, #32
 810544c:	2b00      	cmp	r3, #0
 810544e:	d017      	beq.n	8105480 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8105450:	2320      	movs	r3, #32
 8105452:	e021      	b.n	8105498 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	681b      	ldr	r3, [r3, #0]
 8105458:	4618      	mov	r0, r3
 810545a:	f000 f9db 	bl	8105814 <SDMMC_ReadFIFO>
 810545e:	4602      	mov	r2, r0
 8105460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105462:	601a      	str	r2, [r3, #0]
    pData++;
 8105464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105466:	3304      	adds	r3, #4
 8105468:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 810546a:	f7fb fb6b 	bl	8100b44 <HAL_GetTick>
 810546e:	4602      	mov	r2, r0
 8105470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105472:	1ad3      	subs	r3, r2, r3
 8105474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105478:	d102      	bne.n	8105480 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810547a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810547e:	e00b      	b.n	8105498 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8105480:	687b      	ldr	r3, [r7, #4]
 8105482:	681b      	ldr	r3, [r3, #0]
 8105484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105486:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810548a:	2b00      	cmp	r3, #0
 810548c:	d1e2      	bne.n	8105454 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	681b      	ldr	r3, [r3, #0]
 8105492:	4a03      	ldr	r2, [pc, #12]	@ (81054a0 <SD_SendSDStatus+0x19c>)
 8105494:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8105496:	2300      	movs	r3, #0
}
 8105498:	4618      	mov	r0, r3
 810549a:	3730      	adds	r7, #48	@ 0x30
 810549c:	46bd      	mov	sp, r7
 810549e:	bd80      	pop	{r7, pc}
 81054a0:	18000f3a 	.word	0x18000f3a

081054a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 81054a4:	b580      	push	{r7, lr}
 81054a6:	b084      	sub	sp, #16
 81054a8:	af00      	add	r7, sp, #0
 81054aa:	6078      	str	r0, [r7, #4]
 81054ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 81054ae:	683b      	ldr	r3, [r7, #0]
 81054b0:	2b00      	cmp	r3, #0
 81054b2:	d102      	bne.n	81054ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 81054b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 81054b8:	e018      	b.n	81054ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81054ba:	687b      	ldr	r3, [r7, #4]
 81054bc:	681a      	ldr	r2, [r3, #0]
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81054c2:	041b      	lsls	r3, r3, #16
 81054c4:	4619      	mov	r1, r3
 81054c6:	4610      	mov	r0, r2
 81054c8:	f000 fc8e 	bl	8105de8 <SDMMC_CmdSendStatus>
 81054cc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 81054ce:	68fb      	ldr	r3, [r7, #12]
 81054d0:	2b00      	cmp	r3, #0
 81054d2:	d001      	beq.n	81054d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 81054d4:	68fb      	ldr	r3, [r7, #12]
 81054d6:	e009      	b.n	81054ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	2100      	movs	r1, #0
 81054de:	4618      	mov	r0, r3
 81054e0:	f000 fa0d 	bl	81058fe <SDMMC_GetResponse>
 81054e4:	4602      	mov	r2, r0
 81054e6:	683b      	ldr	r3, [r7, #0]
 81054e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 81054ea:	2300      	movs	r3, #0
}
 81054ec:	4618      	mov	r0, r3
 81054ee:	3710      	adds	r7, #16
 81054f0:	46bd      	mov	sp, r7
 81054f2:	bd80      	pop	{r7, pc}

081054f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 81054f4:	b580      	push	{r7, lr}
 81054f6:	b086      	sub	sp, #24
 81054f8:	af00      	add	r7, sp, #0
 81054fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 81054fc:	2300      	movs	r3, #0
 81054fe:	60fb      	str	r3, [r7, #12]
 8105500:	2300      	movs	r3, #0
 8105502:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8105504:	687b      	ldr	r3, [r7, #4]
 8105506:	681b      	ldr	r3, [r3, #0]
 8105508:	2100      	movs	r1, #0
 810550a:	4618      	mov	r0, r3
 810550c:	f000 f9f7 	bl	81058fe <SDMMC_GetResponse>
 8105510:	4603      	mov	r3, r0
 8105512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810551a:	d102      	bne.n	8105522 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810551c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105520:	e02f      	b.n	8105582 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8105522:	f107 030c 	add.w	r3, r7, #12
 8105526:	4619      	mov	r1, r3
 8105528:	6878      	ldr	r0, [r7, #4]
 810552a:	f000 f879 	bl	8105620 <SD_FindSCR>
 810552e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8105530:	697b      	ldr	r3, [r7, #20]
 8105532:	2b00      	cmp	r3, #0
 8105534:	d001      	beq.n	810553a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8105536:	697b      	ldr	r3, [r7, #20]
 8105538:	e023      	b.n	8105582 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810553a:	693b      	ldr	r3, [r7, #16]
 810553c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105540:	2b00      	cmp	r3, #0
 8105542:	d01c      	beq.n	810557e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8105544:	687b      	ldr	r3, [r7, #4]
 8105546:	681a      	ldr	r2, [r3, #0]
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810554c:	041b      	lsls	r3, r3, #16
 810554e:	4619      	mov	r1, r3
 8105550:	4610      	mov	r0, r2
 8105552:	f000 fb60 	bl	8105c16 <SDMMC_CmdAppCommand>
 8105556:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8105558:	697b      	ldr	r3, [r7, #20]
 810555a:	2b00      	cmp	r3, #0
 810555c:	d001      	beq.n	8105562 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 810555e:	697b      	ldr	r3, [r7, #20]
 8105560:	e00f      	b.n	8105582 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8105562:	687b      	ldr	r3, [r7, #4]
 8105564:	681b      	ldr	r3, [r3, #0]
 8105566:	2102      	movs	r1, #2
 8105568:	4618      	mov	r0, r3
 810556a:	f000 fb97 	bl	8105c9c <SDMMC_CmdBusWidth>
 810556e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8105570:	697b      	ldr	r3, [r7, #20]
 8105572:	2b00      	cmp	r3, #0
 8105574:	d001      	beq.n	810557a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8105576:	697b      	ldr	r3, [r7, #20]
 8105578:	e003      	b.n	8105582 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810557a:	2300      	movs	r3, #0
 810557c:	e001      	b.n	8105582 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810557e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8105582:	4618      	mov	r0, r3
 8105584:	3718      	adds	r7, #24
 8105586:	46bd      	mov	sp, r7
 8105588:	bd80      	pop	{r7, pc}

0810558a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 810558a:	b580      	push	{r7, lr}
 810558c:	b086      	sub	sp, #24
 810558e:	af00      	add	r7, sp, #0
 8105590:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8105592:	2300      	movs	r3, #0
 8105594:	60fb      	str	r3, [r7, #12]
 8105596:	2300      	movs	r3, #0
 8105598:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	681b      	ldr	r3, [r3, #0]
 810559e:	2100      	movs	r1, #0
 81055a0:	4618      	mov	r0, r3
 81055a2:	f000 f9ac 	bl	81058fe <SDMMC_GetResponse>
 81055a6:	4603      	mov	r3, r0
 81055a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81055ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81055b0:	d102      	bne.n	81055b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 81055b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81055b6:	e02f      	b.n	8105618 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 81055b8:	f107 030c 	add.w	r3, r7, #12
 81055bc:	4619      	mov	r1, r3
 81055be:	6878      	ldr	r0, [r7, #4]
 81055c0:	f000 f82e 	bl	8105620 <SD_FindSCR>
 81055c4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 81055c6:	697b      	ldr	r3, [r7, #20]
 81055c8:	2b00      	cmp	r3, #0
 81055ca:	d001      	beq.n	81055d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 81055cc:	697b      	ldr	r3, [r7, #20]
 81055ce:	e023      	b.n	8105618 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 81055d0:	693b      	ldr	r3, [r7, #16]
 81055d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81055d6:	2b00      	cmp	r3, #0
 81055d8:	d01c      	beq.n	8105614 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81055da:	687b      	ldr	r3, [r7, #4]
 81055dc:	681a      	ldr	r2, [r3, #0]
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81055e2:	041b      	lsls	r3, r3, #16
 81055e4:	4619      	mov	r1, r3
 81055e6:	4610      	mov	r0, r2
 81055e8:	f000 fb15 	bl	8105c16 <SDMMC_CmdAppCommand>
 81055ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81055ee:	697b      	ldr	r3, [r7, #20]
 81055f0:	2b00      	cmp	r3, #0
 81055f2:	d001      	beq.n	81055f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 81055f4:	697b      	ldr	r3, [r7, #20]
 81055f6:	e00f      	b.n	8105618 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 81055f8:	687b      	ldr	r3, [r7, #4]
 81055fa:	681b      	ldr	r3, [r3, #0]
 81055fc:	2100      	movs	r1, #0
 81055fe:	4618      	mov	r0, r3
 8105600:	f000 fb4c 	bl	8105c9c <SDMMC_CmdBusWidth>
 8105604:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8105606:	697b      	ldr	r3, [r7, #20]
 8105608:	2b00      	cmp	r3, #0
 810560a:	d001      	beq.n	8105610 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 810560c:	697b      	ldr	r3, [r7, #20]
 810560e:	e003      	b.n	8105618 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8105610:	2300      	movs	r3, #0
 8105612:	e001      	b.n	8105618 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8105614:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8105618:	4618      	mov	r0, r3
 810561a:	3718      	adds	r7, #24
 810561c:	46bd      	mov	sp, r7
 810561e:	bd80      	pop	{r7, pc}

08105620 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8105620:	b580      	push	{r7, lr}
 8105622:	b08e      	sub	sp, #56	@ 0x38
 8105624:	af00      	add	r7, sp, #0
 8105626:	6078      	str	r0, [r7, #4]
 8105628:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810562a:	f7fb fa8b 	bl	8100b44 <HAL_GetTick>
 810562e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8105630:	2300      	movs	r3, #0
 8105632:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8105634:	2300      	movs	r3, #0
 8105636:	60bb      	str	r3, [r7, #8]
 8105638:	2300      	movs	r3, #0
 810563a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 810563c:	683b      	ldr	r3, [r7, #0]
 810563e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8105640:	687b      	ldr	r3, [r7, #4]
 8105642:	681b      	ldr	r3, [r3, #0]
 8105644:	2108      	movs	r1, #8
 8105646:	4618      	mov	r0, r3
 8105648:	f000 f998 	bl	810597c <SDMMC_CmdBlockLength>
 810564c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810564e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105650:	2b00      	cmp	r3, #0
 8105652:	d001      	beq.n	8105658 <SD_FindSCR+0x38>
  {
    return errorstate;
 8105654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105656:	e0ad      	b.n	81057b4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	681a      	ldr	r2, [r3, #0]
 810565c:	687b      	ldr	r3, [r7, #4]
 810565e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105660:	041b      	lsls	r3, r3, #16
 8105662:	4619      	mov	r1, r3
 8105664:	4610      	mov	r0, r2
 8105666:	f000 fad6 	bl	8105c16 <SDMMC_CmdAppCommand>
 810566a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810566e:	2b00      	cmp	r3, #0
 8105670:	d001      	beq.n	8105676 <SD_FindSCR+0x56>
  {
    return errorstate;
 8105672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105674:	e09e      	b.n	81057b4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8105676:	f04f 33ff 	mov.w	r3, #4294967295
 810567a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 810567c:	2308      	movs	r3, #8
 810567e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8105680:	2330      	movs	r3, #48	@ 0x30
 8105682:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8105684:	2302      	movs	r3, #2
 8105686:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8105688:	2300      	movs	r3, #0
 810568a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810568c:	2301      	movs	r3, #1
 810568e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8105690:	687b      	ldr	r3, [r7, #4]
 8105692:	681b      	ldr	r3, [r3, #0]
 8105694:	f107 0210 	add.w	r2, r7, #16
 8105698:	4611      	mov	r1, r2
 810569a:	4618      	mov	r0, r3
 810569c:	f000 f942 	bl	8105924 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 81056a0:	687b      	ldr	r3, [r7, #4]
 81056a2:	681b      	ldr	r3, [r3, #0]
 81056a4:	4618      	mov	r0, r3
 81056a6:	f000 fb1c 	bl	8105ce2 <SDMMC_CmdSendSCR>
 81056aa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81056ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81056ae:	2b00      	cmp	r3, #0
 81056b0:	d027      	beq.n	8105702 <SD_FindSCR+0xe2>
  {
    return errorstate;
 81056b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81056b4:	e07e      	b.n	81057b4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 81056b6:	687b      	ldr	r3, [r7, #4]
 81056b8:	681b      	ldr	r3, [r3, #0]
 81056ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81056bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81056c0:	2b00      	cmp	r3, #0
 81056c2:	d113      	bne.n	81056ec <SD_FindSCR+0xcc>
 81056c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81056c6:	2b00      	cmp	r3, #0
 81056c8:	d110      	bne.n	81056ec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 81056ca:	687b      	ldr	r3, [r7, #4]
 81056cc:	681b      	ldr	r3, [r3, #0]
 81056ce:	4618      	mov	r0, r3
 81056d0:	f000 f8a0 	bl	8105814 <SDMMC_ReadFIFO>
 81056d4:	4603      	mov	r3, r0
 81056d6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 81056d8:	687b      	ldr	r3, [r7, #4]
 81056da:	681b      	ldr	r3, [r3, #0]
 81056dc:	4618      	mov	r0, r3
 81056de:	f000 f899 	bl	8105814 <SDMMC_ReadFIFO>
 81056e2:	4603      	mov	r3, r0
 81056e4:	60fb      	str	r3, [r7, #12]
      index++;
 81056e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81056e8:	3301      	adds	r3, #1
 81056ea:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 81056ec:	f7fb fa2a 	bl	8100b44 <HAL_GetTick>
 81056f0:	4602      	mov	r2, r0
 81056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81056f4:	1ad3      	subs	r3, r2, r3
 81056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81056fa:	d102      	bne.n	8105702 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 81056fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8105700:	e058      	b.n	81057b4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8105702:	687b      	ldr	r3, [r7, #4]
 8105704:	681b      	ldr	r3, [r3, #0]
 8105706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8105708:	f240 532a 	movw	r3, #1322	@ 0x52a
 810570c:	4013      	ands	r3, r2
 810570e:	2b00      	cmp	r3, #0
 8105710:	d0d1      	beq.n	81056b6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8105712:	687b      	ldr	r3, [r7, #4]
 8105714:	681b      	ldr	r3, [r3, #0]
 8105716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105718:	f003 0308 	and.w	r3, r3, #8
 810571c:	2b00      	cmp	r3, #0
 810571e:	d005      	beq.n	810572c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8105720:	687b      	ldr	r3, [r7, #4]
 8105722:	681b      	ldr	r3, [r3, #0]
 8105724:	2208      	movs	r2, #8
 8105726:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8105728:	2308      	movs	r3, #8
 810572a:	e043      	b.n	81057b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	681b      	ldr	r3, [r3, #0]
 8105730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105732:	f003 0302 	and.w	r3, r3, #2
 8105736:	2b00      	cmp	r3, #0
 8105738:	d005      	beq.n	8105746 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 810573a:	687b      	ldr	r3, [r7, #4]
 810573c:	681b      	ldr	r3, [r3, #0]
 810573e:	2202      	movs	r2, #2
 8105740:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8105742:	2302      	movs	r3, #2
 8105744:	e036      	b.n	81057b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8105746:	687b      	ldr	r3, [r7, #4]
 8105748:	681b      	ldr	r3, [r3, #0]
 810574a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810574c:	f003 0320 	and.w	r3, r3, #32
 8105750:	2b00      	cmp	r3, #0
 8105752:	d005      	beq.n	8105760 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	681b      	ldr	r3, [r3, #0]
 8105758:	2220      	movs	r2, #32
 810575a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 810575c:	2320      	movs	r3, #32
 810575e:	e029      	b.n	81057b4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8105760:	687b      	ldr	r3, [r7, #4]
 8105762:	681b      	ldr	r3, [r3, #0]
 8105764:	4a15      	ldr	r2, [pc, #84]	@ (81057bc <SD_FindSCR+0x19c>)
 8105766:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8105768:	68fb      	ldr	r3, [r7, #12]
 810576a:	061a      	lsls	r2, r3, #24
 810576c:	68fb      	ldr	r3, [r7, #12]
 810576e:	021b      	lsls	r3, r3, #8
 8105770:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8105774:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8105776:	68fb      	ldr	r3, [r7, #12]
 8105778:	0a1b      	lsrs	r3, r3, #8
 810577a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 810577e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8105780:	68fb      	ldr	r3, [r7, #12]
 8105782:	0e1b      	lsrs	r3, r3, #24
 8105784:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8105786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105788:	601a      	str	r2, [r3, #0]
    scr++;
 810578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810578c:	3304      	adds	r3, #4
 810578e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8105790:	68bb      	ldr	r3, [r7, #8]
 8105792:	061a      	lsls	r2, r3, #24
 8105794:	68bb      	ldr	r3, [r7, #8]
 8105796:	021b      	lsls	r3, r3, #8
 8105798:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810579c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 810579e:	68bb      	ldr	r3, [r7, #8]
 81057a0:	0a1b      	lsrs	r3, r3, #8
 81057a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 81057a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 81057a8:	68bb      	ldr	r3, [r7, #8]
 81057aa:	0e1b      	lsrs	r3, r3, #24
 81057ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 81057ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81057b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 81057b2:	2300      	movs	r3, #0
}
 81057b4:	4618      	mov	r0, r3
 81057b6:	3738      	adds	r7, #56	@ 0x38
 81057b8:	46bd      	mov	sp, r7
 81057ba:	bd80      	pop	{r7, pc}
 81057bc:	18000f3a 	.word	0x18000f3a

081057c0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 81057c0:	b084      	sub	sp, #16
 81057c2:	b480      	push	{r7}
 81057c4:	b085      	sub	sp, #20
 81057c6:	af00      	add	r7, sp, #0
 81057c8:	6078      	str	r0, [r7, #4]
 81057ca:	f107 001c 	add.w	r0, r7, #28
 81057ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 81057d2:	2300      	movs	r3, #0
 81057d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 81057d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 81057d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 81057da:	431a      	orrs	r2, r3
             Init.BusWide             | \
 81057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 81057de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 81057e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 81057e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 81057e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 81057e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 81057e8:	68fa      	ldr	r2, [r7, #12]
 81057ea:	4313      	orrs	r3, r2
 81057ec:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 81057ee:	687b      	ldr	r3, [r7, #4]
 81057f0:	685a      	ldr	r2, [r3, #4]
 81057f2:	4b07      	ldr	r3, [pc, #28]	@ (8105810 <SDMMC_Init+0x50>)
 81057f4:	4013      	ands	r3, r2
 81057f6:	68fa      	ldr	r2, [r7, #12]
 81057f8:	431a      	orrs	r2, r3
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 81057fe:	2300      	movs	r3, #0
}
 8105800:	4618      	mov	r0, r3
 8105802:	3714      	adds	r7, #20
 8105804:	46bd      	mov	sp, r7
 8105806:	f85d 7b04 	ldr.w	r7, [sp], #4
 810580a:	b004      	add	sp, #16
 810580c:	4770      	bx	lr
 810580e:	bf00      	nop
 8105810:	ffc02c00 	.word	0xffc02c00

08105814 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8105814:	b480      	push	{r7}
 8105816:	b083      	sub	sp, #12
 8105818:	af00      	add	r7, sp, #0
 810581a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8105822:	4618      	mov	r0, r3
 8105824:	370c      	adds	r7, #12
 8105826:	46bd      	mov	sp, r7
 8105828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810582c:	4770      	bx	lr

0810582e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 810582e:	b480      	push	{r7}
 8105830:	b083      	sub	sp, #12
 8105832:	af00      	add	r7, sp, #0
 8105834:	6078      	str	r0, [r7, #4]
 8105836:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8105838:	683b      	ldr	r3, [r7, #0]
 810583a:	681a      	ldr	r2, [r3, #0]
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8105842:	2300      	movs	r3, #0
}
 8105844:	4618      	mov	r0, r3
 8105846:	370c      	adds	r7, #12
 8105848:	46bd      	mov	sp, r7
 810584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810584e:	4770      	bx	lr

08105850 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8105850:	b480      	push	{r7}
 8105852:	b083      	sub	sp, #12
 8105854:	af00      	add	r7, sp, #0
 8105856:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	681b      	ldr	r3, [r3, #0]
 810585c:	f043 0203 	orr.w	r2, r3, #3
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8105864:	2300      	movs	r3, #0
}
 8105866:	4618      	mov	r0, r3
 8105868:	370c      	adds	r7, #12
 810586a:	46bd      	mov	sp, r7
 810586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105870:	4770      	bx	lr

08105872 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8105872:	b480      	push	{r7}
 8105874:	b083      	sub	sp, #12
 8105876:	af00      	add	r7, sp, #0
 8105878:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810587a:	687b      	ldr	r3, [r7, #4]
 810587c:	681b      	ldr	r3, [r3, #0]
 810587e:	f003 0303 	and.w	r3, r3, #3
}
 8105882:	4618      	mov	r0, r3
 8105884:	370c      	adds	r7, #12
 8105886:	46bd      	mov	sp, r7
 8105888:	f85d 7b04 	ldr.w	r7, [sp], #4
 810588c:	4770      	bx	lr
	...

08105890 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8105890:	b480      	push	{r7}
 8105892:	b085      	sub	sp, #20
 8105894:	af00      	add	r7, sp, #0
 8105896:	6078      	str	r0, [r7, #4]
 8105898:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810589a:	2300      	movs	r3, #0
 810589c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810589e:	683b      	ldr	r3, [r7, #0]
 81058a0:	681a      	ldr	r2, [r3, #0]
 81058a2:	687b      	ldr	r3, [r7, #4]
 81058a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81058a6:	683b      	ldr	r3, [r7, #0]
 81058a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 81058aa:	683b      	ldr	r3, [r7, #0]
 81058ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81058ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 81058b0:	683b      	ldr	r3, [r7, #0]
 81058b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 81058b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 81058b6:	683b      	ldr	r3, [r7, #0]
 81058b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 81058ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81058bc:	68fa      	ldr	r2, [r7, #12]
 81058be:	4313      	orrs	r3, r2
 81058c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	68da      	ldr	r2, [r3, #12]
 81058c6:	4b06      	ldr	r3, [pc, #24]	@ (81058e0 <SDMMC_SendCommand+0x50>)
 81058c8:	4013      	ands	r3, r2
 81058ca:	68fa      	ldr	r2, [r7, #12]
 81058cc:	431a      	orrs	r2, r3
 81058ce:	687b      	ldr	r3, [r7, #4]
 81058d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 81058d2:	2300      	movs	r3, #0
}
 81058d4:	4618      	mov	r0, r3
 81058d6:	3714      	adds	r7, #20
 81058d8:	46bd      	mov	sp, r7
 81058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058de:	4770      	bx	lr
 81058e0:	fffee0c0 	.word	0xfffee0c0

081058e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 81058e4:	b480      	push	{r7}
 81058e6:	b083      	sub	sp, #12
 81058e8:	af00      	add	r7, sp, #0
 81058ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 81058ec:	687b      	ldr	r3, [r7, #4]
 81058ee:	691b      	ldr	r3, [r3, #16]
 81058f0:	b2db      	uxtb	r3, r3
}
 81058f2:	4618      	mov	r0, r3
 81058f4:	370c      	adds	r7, #12
 81058f6:	46bd      	mov	sp, r7
 81058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058fc:	4770      	bx	lr

081058fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 81058fe:	b480      	push	{r7}
 8105900:	b085      	sub	sp, #20
 8105902:	af00      	add	r7, sp, #0
 8105904:	6078      	str	r0, [r7, #4]
 8105906:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	3314      	adds	r3, #20
 810590c:	461a      	mov	r2, r3
 810590e:	683b      	ldr	r3, [r7, #0]
 8105910:	4413      	add	r3, r2
 8105912:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8105914:	68fb      	ldr	r3, [r7, #12]
 8105916:	681b      	ldr	r3, [r3, #0]
}
 8105918:	4618      	mov	r0, r3
 810591a:	3714      	adds	r7, #20
 810591c:	46bd      	mov	sp, r7
 810591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105922:	4770      	bx	lr

08105924 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8105924:	b480      	push	{r7}
 8105926:	b085      	sub	sp, #20
 8105928:	af00      	add	r7, sp, #0
 810592a:	6078      	str	r0, [r7, #4]
 810592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810592e:	2300      	movs	r3, #0
 8105930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8105932:	683b      	ldr	r3, [r7, #0]
 8105934:	681a      	ldr	r2, [r3, #0]
 8105936:	687b      	ldr	r3, [r7, #4]
 8105938:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810593a:	683b      	ldr	r3, [r7, #0]
 810593c:	685a      	ldr	r2, [r3, #4]
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8105942:	683b      	ldr	r3, [r7, #0]
 8105944:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8105946:	683b      	ldr	r3, [r7, #0]
 8105948:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810594a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 810594c:	683b      	ldr	r3, [r7, #0]
 810594e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8105950:	431a      	orrs	r2, r3
                       Data->DPSM);
 8105952:	683b      	ldr	r3, [r7, #0]
 8105954:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8105956:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8105958:	68fa      	ldr	r2, [r7, #12]
 810595a:	4313      	orrs	r3, r2
 810595c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810595e:	687b      	ldr	r3, [r7, #4]
 8105960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105962:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8105966:	68fb      	ldr	r3, [r7, #12]
 8105968:	431a      	orrs	r2, r3
 810596a:	687b      	ldr	r3, [r7, #4]
 810596c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 810596e:	2300      	movs	r3, #0

}
 8105970:	4618      	mov	r0, r3
 8105972:	3714      	adds	r7, #20
 8105974:	46bd      	mov	sp, r7
 8105976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810597a:	4770      	bx	lr

0810597c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810597c:	b580      	push	{r7, lr}
 810597e:	b088      	sub	sp, #32
 8105980:	af00      	add	r7, sp, #0
 8105982:	6078      	str	r0, [r7, #4]
 8105984:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8105986:	683b      	ldr	r3, [r7, #0]
 8105988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810598a:	2310      	movs	r3, #16
 810598c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810598e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105994:	2300      	movs	r3, #0
 8105996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810599c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810599e:	f107 0308 	add.w	r3, r7, #8
 81059a2:	4619      	mov	r1, r3
 81059a4:	6878      	ldr	r0, [r7, #4]
 81059a6:	f7ff ff73 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 81059aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 81059ae:	2110      	movs	r1, #16
 81059b0:	6878      	ldr	r0, [r7, #4]
 81059b2:	f000 fa5f 	bl	8105e74 <SDMMC_GetCmdResp1>
 81059b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81059b8:	69fb      	ldr	r3, [r7, #28]
}
 81059ba:	4618      	mov	r0, r3
 81059bc:	3720      	adds	r7, #32
 81059be:	46bd      	mov	sp, r7
 81059c0:	bd80      	pop	{r7, pc}

081059c2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 81059c2:	b580      	push	{r7, lr}
 81059c4:	b088      	sub	sp, #32
 81059c6:	af00      	add	r7, sp, #0
 81059c8:	6078      	str	r0, [r7, #4]
 81059ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 81059cc:	683b      	ldr	r3, [r7, #0]
 81059ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 81059d0:	2311      	movs	r3, #17
 81059d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81059d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81059d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81059da:	2300      	movs	r3, #0
 81059dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81059de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81059e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81059e4:	f107 0308 	add.w	r3, r7, #8
 81059e8:	4619      	mov	r1, r3
 81059ea:	6878      	ldr	r0, [r7, #4]
 81059ec:	f7ff ff50 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 81059f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 81059f4:	2111      	movs	r1, #17
 81059f6:	6878      	ldr	r0, [r7, #4]
 81059f8:	f000 fa3c 	bl	8105e74 <SDMMC_GetCmdResp1>
 81059fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81059fe:	69fb      	ldr	r3, [r7, #28]
}
 8105a00:	4618      	mov	r0, r3
 8105a02:	3720      	adds	r7, #32
 8105a04:	46bd      	mov	sp, r7
 8105a06:	bd80      	pop	{r7, pc}

08105a08 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8105a08:	b580      	push	{r7, lr}
 8105a0a:	b088      	sub	sp, #32
 8105a0c:	af00      	add	r7, sp, #0
 8105a0e:	6078      	str	r0, [r7, #4]
 8105a10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8105a12:	683b      	ldr	r3, [r7, #0]
 8105a14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8105a16:	2312      	movs	r3, #18
 8105a18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105a1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105a20:	2300      	movs	r3, #0
 8105a22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105a28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105a2a:	f107 0308 	add.w	r3, r7, #8
 8105a2e:	4619      	mov	r1, r3
 8105a30:	6878      	ldr	r0, [r7, #4]
 8105a32:	f7ff ff2d 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8105a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8105a3a:	2112      	movs	r1, #18
 8105a3c:	6878      	ldr	r0, [r7, #4]
 8105a3e:	f000 fa19 	bl	8105e74 <SDMMC_GetCmdResp1>
 8105a42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105a44:	69fb      	ldr	r3, [r7, #28]
}
 8105a46:	4618      	mov	r0, r3
 8105a48:	3720      	adds	r7, #32
 8105a4a:	46bd      	mov	sp, r7
 8105a4c:	bd80      	pop	{r7, pc}

08105a4e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8105a4e:	b580      	push	{r7, lr}
 8105a50:	b088      	sub	sp, #32
 8105a52:	af00      	add	r7, sp, #0
 8105a54:	6078      	str	r0, [r7, #4]
 8105a56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8105a58:	683b      	ldr	r3, [r7, #0]
 8105a5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8105a5c:	2318      	movs	r3, #24
 8105a5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105a60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105a66:	2300      	movs	r3, #0
 8105a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105a6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105a70:	f107 0308 	add.w	r3, r7, #8
 8105a74:	4619      	mov	r1, r3
 8105a76:	6878      	ldr	r0, [r7, #4]
 8105a78:	f7ff ff0a 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8105a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8105a80:	2118      	movs	r1, #24
 8105a82:	6878      	ldr	r0, [r7, #4]
 8105a84:	f000 f9f6 	bl	8105e74 <SDMMC_GetCmdResp1>
 8105a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105a8a:	69fb      	ldr	r3, [r7, #28]
}
 8105a8c:	4618      	mov	r0, r3
 8105a8e:	3720      	adds	r7, #32
 8105a90:	46bd      	mov	sp, r7
 8105a92:	bd80      	pop	{r7, pc}

08105a94 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8105a94:	b580      	push	{r7, lr}
 8105a96:	b088      	sub	sp, #32
 8105a98:	af00      	add	r7, sp, #0
 8105a9a:	6078      	str	r0, [r7, #4]
 8105a9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8105a9e:	683b      	ldr	r3, [r7, #0]
 8105aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8105aa2:	2319      	movs	r3, #25
 8105aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105aa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105aac:	2300      	movs	r3, #0
 8105aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105ab4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105ab6:	f107 0308 	add.w	r3, r7, #8
 8105aba:	4619      	mov	r1, r3
 8105abc:	6878      	ldr	r0, [r7, #4]
 8105abe:	f7ff fee7 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8105ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8105ac6:	2119      	movs	r1, #25
 8105ac8:	6878      	ldr	r0, [r7, #4]
 8105aca:	f000 f9d3 	bl	8105e74 <SDMMC_GetCmdResp1>
 8105ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105ad0:	69fb      	ldr	r3, [r7, #28]
}
 8105ad2:	4618      	mov	r0, r3
 8105ad4:	3720      	adds	r7, #32
 8105ad6:	46bd      	mov	sp, r7
 8105ad8:	bd80      	pop	{r7, pc}
	...

08105adc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8105adc:	b580      	push	{r7, lr}
 8105ade:	b088      	sub	sp, #32
 8105ae0:	af00      	add	r7, sp, #0
 8105ae2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8105ae4:	2300      	movs	r3, #0
 8105ae6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8105ae8:	230c      	movs	r3, #12
 8105aea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105af0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105af2:	2300      	movs	r3, #0
 8105af4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105afa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	68db      	ldr	r3, [r3, #12]
 8105b00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	68db      	ldr	r3, [r3, #12]
 8105b0c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105b14:	f107 0308 	add.w	r3, r7, #8
 8105b18:	4619      	mov	r1, r3
 8105b1a:	6878      	ldr	r0, [r7, #4]
 8105b1c:	f7ff feb8 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8105b20:	4a0b      	ldr	r2, [pc, #44]	@ (8105b50 <SDMMC_CmdStopTransfer+0x74>)
 8105b22:	210c      	movs	r1, #12
 8105b24:	6878      	ldr	r0, [r7, #4]
 8105b26:	f000 f9a5 	bl	8105e74 <SDMMC_GetCmdResp1>
 8105b2a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	68db      	ldr	r3, [r3, #12]
 8105b30:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8105b34:	687b      	ldr	r3, [r7, #4]
 8105b36:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8105b38:	69fb      	ldr	r3, [r7, #28]
 8105b3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105b3e:	d101      	bne.n	8105b44 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8105b40:	2300      	movs	r3, #0
 8105b42:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8105b44:	69fb      	ldr	r3, [r7, #28]
}
 8105b46:	4618      	mov	r0, r3
 8105b48:	3720      	adds	r7, #32
 8105b4a:	46bd      	mov	sp, r7
 8105b4c:	bd80      	pop	{r7, pc}
 8105b4e:	bf00      	nop
 8105b50:	05f5e100 	.word	0x05f5e100

08105b54 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8105b54:	b580      	push	{r7, lr}
 8105b56:	b088      	sub	sp, #32
 8105b58:	af00      	add	r7, sp, #0
 8105b5a:	6078      	str	r0, [r7, #4]
 8105b5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8105b5e:	683b      	ldr	r3, [r7, #0]
 8105b60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8105b62:	2307      	movs	r3, #7
 8105b64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105b66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105b6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105b6c:	2300      	movs	r3, #0
 8105b6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105b70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105b74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105b76:	f107 0308 	add.w	r3, r7, #8
 8105b7a:	4619      	mov	r1, r3
 8105b7c:	6878      	ldr	r0, [r7, #4]
 8105b7e:	f7ff fe87 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8105b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8105b86:	2107      	movs	r1, #7
 8105b88:	6878      	ldr	r0, [r7, #4]
 8105b8a:	f000 f973 	bl	8105e74 <SDMMC_GetCmdResp1>
 8105b8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105b90:	69fb      	ldr	r3, [r7, #28]
}
 8105b92:	4618      	mov	r0, r3
 8105b94:	3720      	adds	r7, #32
 8105b96:	46bd      	mov	sp, r7
 8105b98:	bd80      	pop	{r7, pc}

08105b9a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8105b9a:	b580      	push	{r7, lr}
 8105b9c:	b088      	sub	sp, #32
 8105b9e:	af00      	add	r7, sp, #0
 8105ba0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8105ba2:	2300      	movs	r3, #0
 8105ba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8105ba6:	2300      	movs	r3, #0
 8105ba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8105baa:	2300      	movs	r3, #0
 8105bac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105bae:	2300      	movs	r3, #0
 8105bb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105bb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105bb8:	f107 0308 	add.w	r3, r7, #8
 8105bbc:	4619      	mov	r1, r3
 8105bbe:	6878      	ldr	r0, [r7, #4]
 8105bc0:	f7ff fe66 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8105bc4:	6878      	ldr	r0, [r7, #4]
 8105bc6:	f000 fb97 	bl	81062f8 <SDMMC_GetCmdError>
 8105bca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105bcc:	69fb      	ldr	r3, [r7, #28]
}
 8105bce:	4618      	mov	r0, r3
 8105bd0:	3720      	adds	r7, #32
 8105bd2:	46bd      	mov	sp, r7
 8105bd4:	bd80      	pop	{r7, pc}

08105bd6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8105bd6:	b580      	push	{r7, lr}
 8105bd8:	b088      	sub	sp, #32
 8105bda:	af00      	add	r7, sp, #0
 8105bdc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8105bde:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8105be2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8105be4:	2308      	movs	r3, #8
 8105be6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105be8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105bee:	2300      	movs	r3, #0
 8105bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105bf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105bf8:	f107 0308 	add.w	r3, r7, #8
 8105bfc:	4619      	mov	r1, r3
 8105bfe:	6878      	ldr	r0, [r7, #4]
 8105c00:	f7ff fe46 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8105c04:	6878      	ldr	r0, [r7, #4]
 8105c06:	f000 fb29 	bl	810625c <SDMMC_GetCmdResp7>
 8105c0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105c0c:	69fb      	ldr	r3, [r7, #28]
}
 8105c0e:	4618      	mov	r0, r3
 8105c10:	3720      	adds	r7, #32
 8105c12:	46bd      	mov	sp, r7
 8105c14:	bd80      	pop	{r7, pc}

08105c16 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8105c16:	b580      	push	{r7, lr}
 8105c18:	b088      	sub	sp, #32
 8105c1a:	af00      	add	r7, sp, #0
 8105c1c:	6078      	str	r0, [r7, #4]
 8105c1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8105c20:	683b      	ldr	r3, [r7, #0]
 8105c22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8105c24:	2337      	movs	r3, #55	@ 0x37
 8105c26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105c28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105c2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105c2e:	2300      	movs	r3, #0
 8105c30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105c36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105c38:	f107 0308 	add.w	r3, r7, #8
 8105c3c:	4619      	mov	r1, r3
 8105c3e:	6878      	ldr	r0, [r7, #4]
 8105c40:	f7ff fe26 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8105c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8105c48:	2137      	movs	r1, #55	@ 0x37
 8105c4a:	6878      	ldr	r0, [r7, #4]
 8105c4c:	f000 f912 	bl	8105e74 <SDMMC_GetCmdResp1>
 8105c50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105c52:	69fb      	ldr	r3, [r7, #28]
}
 8105c54:	4618      	mov	r0, r3
 8105c56:	3720      	adds	r7, #32
 8105c58:	46bd      	mov	sp, r7
 8105c5a:	bd80      	pop	{r7, pc}

08105c5c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8105c5c:	b580      	push	{r7, lr}
 8105c5e:	b088      	sub	sp, #32
 8105c60:	af00      	add	r7, sp, #0
 8105c62:	6078      	str	r0, [r7, #4]
 8105c64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8105c66:	683b      	ldr	r3, [r7, #0]
 8105c68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8105c6a:	2329      	movs	r3, #41	@ 0x29
 8105c6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105c6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105c72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105c74:	2300      	movs	r3, #0
 8105c76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105c7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105c7e:	f107 0308 	add.w	r3, r7, #8
 8105c82:	4619      	mov	r1, r3
 8105c84:	6878      	ldr	r0, [r7, #4]
 8105c86:	f7ff fe03 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8105c8a:	6878      	ldr	r0, [r7, #4]
 8105c8c:	f000 fa2e 	bl	81060ec <SDMMC_GetCmdResp3>
 8105c90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105c92:	69fb      	ldr	r3, [r7, #28]
}
 8105c94:	4618      	mov	r0, r3
 8105c96:	3720      	adds	r7, #32
 8105c98:	46bd      	mov	sp, r7
 8105c9a:	bd80      	pop	{r7, pc}

08105c9c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8105c9c:	b580      	push	{r7, lr}
 8105c9e:	b088      	sub	sp, #32
 8105ca0:	af00      	add	r7, sp, #0
 8105ca2:	6078      	str	r0, [r7, #4]
 8105ca4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8105ca6:	683b      	ldr	r3, [r7, #0]
 8105ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8105caa:	2306      	movs	r3, #6
 8105cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105cae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105cb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105cb4:	2300      	movs	r3, #0
 8105cb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105cb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105cbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105cbe:	f107 0308 	add.w	r3, r7, #8
 8105cc2:	4619      	mov	r1, r3
 8105cc4:	6878      	ldr	r0, [r7, #4]
 8105cc6:	f7ff fde3 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8105cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8105cce:	2106      	movs	r1, #6
 8105cd0:	6878      	ldr	r0, [r7, #4]
 8105cd2:	f000 f8cf 	bl	8105e74 <SDMMC_GetCmdResp1>
 8105cd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105cd8:	69fb      	ldr	r3, [r7, #28]
}
 8105cda:	4618      	mov	r0, r3
 8105cdc:	3720      	adds	r7, #32
 8105cde:	46bd      	mov	sp, r7
 8105ce0:	bd80      	pop	{r7, pc}

08105ce2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8105ce2:	b580      	push	{r7, lr}
 8105ce4:	b088      	sub	sp, #32
 8105ce6:	af00      	add	r7, sp, #0
 8105ce8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8105cea:	2300      	movs	r3, #0
 8105cec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8105cee:	2333      	movs	r3, #51	@ 0x33
 8105cf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105cf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105cf8:	2300      	movs	r3, #0
 8105cfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105d00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105d02:	f107 0308 	add.w	r3, r7, #8
 8105d06:	4619      	mov	r1, r3
 8105d08:	6878      	ldr	r0, [r7, #4]
 8105d0a:	f7ff fdc1 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8105d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8105d12:	2133      	movs	r1, #51	@ 0x33
 8105d14:	6878      	ldr	r0, [r7, #4]
 8105d16:	f000 f8ad 	bl	8105e74 <SDMMC_GetCmdResp1>
 8105d1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105d1c:	69fb      	ldr	r3, [r7, #28]
}
 8105d1e:	4618      	mov	r0, r3
 8105d20:	3720      	adds	r7, #32
 8105d22:	46bd      	mov	sp, r7
 8105d24:	bd80      	pop	{r7, pc}

08105d26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8105d26:	b580      	push	{r7, lr}
 8105d28:	b088      	sub	sp, #32
 8105d2a:	af00      	add	r7, sp, #0
 8105d2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8105d2e:	2300      	movs	r3, #0
 8105d30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8105d32:	2302      	movs	r3, #2
 8105d34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8105d36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8105d3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105d3c:	2300      	movs	r3, #0
 8105d3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105d44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105d46:	f107 0308 	add.w	r3, r7, #8
 8105d4a:	4619      	mov	r1, r3
 8105d4c:	6878      	ldr	r0, [r7, #4]
 8105d4e:	f7ff fd9f 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8105d52:	6878      	ldr	r0, [r7, #4]
 8105d54:	f000 f980 	bl	8106058 <SDMMC_GetCmdResp2>
 8105d58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105d5a:	69fb      	ldr	r3, [r7, #28]
}
 8105d5c:	4618      	mov	r0, r3
 8105d5e:	3720      	adds	r7, #32
 8105d60:	46bd      	mov	sp, r7
 8105d62:	bd80      	pop	{r7, pc}

08105d64 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8105d64:	b580      	push	{r7, lr}
 8105d66:	b088      	sub	sp, #32
 8105d68:	af00      	add	r7, sp, #0
 8105d6a:	6078      	str	r0, [r7, #4]
 8105d6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8105d6e:	683b      	ldr	r3, [r7, #0]
 8105d70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8105d72:	2309      	movs	r3, #9
 8105d74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8105d76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8105d7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105d7c:	2300      	movs	r3, #0
 8105d7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105d80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105d84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105d86:	f107 0308 	add.w	r3, r7, #8
 8105d8a:	4619      	mov	r1, r3
 8105d8c:	6878      	ldr	r0, [r7, #4]
 8105d8e:	f7ff fd7f 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8105d92:	6878      	ldr	r0, [r7, #4]
 8105d94:	f000 f960 	bl	8106058 <SDMMC_GetCmdResp2>
 8105d98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105d9a:	69fb      	ldr	r3, [r7, #28]
}
 8105d9c:	4618      	mov	r0, r3
 8105d9e:	3720      	adds	r7, #32
 8105da0:	46bd      	mov	sp, r7
 8105da2:	bd80      	pop	{r7, pc}

08105da4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8105da4:	b580      	push	{r7, lr}
 8105da6:	b088      	sub	sp, #32
 8105da8:	af00      	add	r7, sp, #0
 8105daa:	6078      	str	r0, [r7, #4]
 8105dac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8105dae:	2300      	movs	r3, #0
 8105db0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8105db2:	2303      	movs	r3, #3
 8105db4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105db6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105dba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105dbc:	2300      	movs	r3, #0
 8105dbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105dc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105dc6:	f107 0308 	add.w	r3, r7, #8
 8105dca:	4619      	mov	r1, r3
 8105dcc:	6878      	ldr	r0, [r7, #4]
 8105dce:	f7ff fd5f 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8105dd2:	683a      	ldr	r2, [r7, #0]
 8105dd4:	2103      	movs	r1, #3
 8105dd6:	6878      	ldr	r0, [r7, #4]
 8105dd8:	f000 f9c8 	bl	810616c <SDMMC_GetCmdResp6>
 8105ddc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105dde:	69fb      	ldr	r3, [r7, #28]
}
 8105de0:	4618      	mov	r0, r3
 8105de2:	3720      	adds	r7, #32
 8105de4:	46bd      	mov	sp, r7
 8105de6:	bd80      	pop	{r7, pc}

08105de8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8105de8:	b580      	push	{r7, lr}
 8105dea:	b088      	sub	sp, #32
 8105dec:	af00      	add	r7, sp, #0
 8105dee:	6078      	str	r0, [r7, #4]
 8105df0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8105df2:	683b      	ldr	r3, [r7, #0]
 8105df4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8105df6:	230d      	movs	r3, #13
 8105df8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105dfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105e00:	2300      	movs	r3, #0
 8105e02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105e08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105e0a:	f107 0308 	add.w	r3, r7, #8
 8105e0e:	4619      	mov	r1, r3
 8105e10:	6878      	ldr	r0, [r7, #4]
 8105e12:	f7ff fd3d 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8105e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8105e1a:	210d      	movs	r1, #13
 8105e1c:	6878      	ldr	r0, [r7, #4]
 8105e1e:	f000 f829 	bl	8105e74 <SDMMC_GetCmdResp1>
 8105e22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105e24:	69fb      	ldr	r3, [r7, #28]
}
 8105e26:	4618      	mov	r0, r3
 8105e28:	3720      	adds	r7, #32
 8105e2a:	46bd      	mov	sp, r7
 8105e2c:	bd80      	pop	{r7, pc}

08105e2e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8105e2e:	b580      	push	{r7, lr}
 8105e30:	b088      	sub	sp, #32
 8105e32:	af00      	add	r7, sp, #0
 8105e34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8105e36:	2300      	movs	r3, #0
 8105e38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8105e3a:	230d      	movs	r3, #13
 8105e3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8105e3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105e42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8105e44:	2300      	movs	r3, #0
 8105e46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8105e48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105e4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8105e4e:	f107 0308 	add.w	r3, r7, #8
 8105e52:	4619      	mov	r1, r3
 8105e54:	6878      	ldr	r0, [r7, #4]
 8105e56:	f7ff fd1b 	bl	8105890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8105e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8105e5e:	210d      	movs	r1, #13
 8105e60:	6878      	ldr	r0, [r7, #4]
 8105e62:	f000 f807 	bl	8105e74 <SDMMC_GetCmdResp1>
 8105e66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8105e68:	69fb      	ldr	r3, [r7, #28]
}
 8105e6a:	4618      	mov	r0, r3
 8105e6c:	3720      	adds	r7, #32
 8105e6e:	46bd      	mov	sp, r7
 8105e70:	bd80      	pop	{r7, pc}
	...

08105e74 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8105e74:	b580      	push	{r7, lr}
 8105e76:	b088      	sub	sp, #32
 8105e78:	af00      	add	r7, sp, #0
 8105e7a:	60f8      	str	r0, [r7, #12]
 8105e7c:	460b      	mov	r3, r1
 8105e7e:	607a      	str	r2, [r7, #4]
 8105e80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8105e82:	4b70      	ldr	r3, [pc, #448]	@ (8106044 <SDMMC_GetCmdResp1+0x1d0>)
 8105e84:	681b      	ldr	r3, [r3, #0]
 8105e86:	4a70      	ldr	r2, [pc, #448]	@ (8106048 <SDMMC_GetCmdResp1+0x1d4>)
 8105e88:	fba2 2303 	umull	r2, r3, r2, r3
 8105e8c:	0a5a      	lsrs	r2, r3, #9
 8105e8e:	687b      	ldr	r3, [r7, #4]
 8105e90:	fb02 f303 	mul.w	r3, r2, r3
 8105e94:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8105e96:	69fb      	ldr	r3, [r7, #28]
 8105e98:	1e5a      	subs	r2, r3, #1
 8105e9a:	61fa      	str	r2, [r7, #28]
 8105e9c:	2b00      	cmp	r3, #0
 8105e9e:	d102      	bne.n	8105ea6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8105ea0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8105ea4:	e0c9      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8105ea6:	68fb      	ldr	r3, [r7, #12]
 8105ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105eaa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8105eac:	69ba      	ldr	r2, [r7, #24]
 8105eae:	4b67      	ldr	r3, [pc, #412]	@ (810604c <SDMMC_GetCmdResp1+0x1d8>)
 8105eb0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8105eb2:	2b00      	cmp	r3, #0
 8105eb4:	d0ef      	beq.n	8105e96 <SDMMC_GetCmdResp1+0x22>
 8105eb6:	69bb      	ldr	r3, [r7, #24]
 8105eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8105ebc:	2b00      	cmp	r3, #0
 8105ebe:	d1ea      	bne.n	8105e96 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8105ec0:	68fb      	ldr	r3, [r7, #12]
 8105ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105ec4:	f003 0304 	and.w	r3, r3, #4
 8105ec8:	2b00      	cmp	r3, #0
 8105eca:	d004      	beq.n	8105ed6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8105ecc:	68fb      	ldr	r3, [r7, #12]
 8105ece:	2204      	movs	r2, #4
 8105ed0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8105ed2:	2304      	movs	r3, #4
 8105ed4:	e0b1      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8105ed6:	68fb      	ldr	r3, [r7, #12]
 8105ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105eda:	f003 0301 	and.w	r3, r3, #1
 8105ede:	2b00      	cmp	r3, #0
 8105ee0:	d004      	beq.n	8105eec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8105ee2:	68fb      	ldr	r3, [r7, #12]
 8105ee4:	2201      	movs	r2, #1
 8105ee6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8105ee8:	2301      	movs	r3, #1
 8105eea:	e0a6      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8105eec:	68fb      	ldr	r3, [r7, #12]
 8105eee:	4a58      	ldr	r2, [pc, #352]	@ (8106050 <SDMMC_GetCmdResp1+0x1dc>)
 8105ef0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8105ef2:	68f8      	ldr	r0, [r7, #12]
 8105ef4:	f7ff fcf6 	bl	81058e4 <SDMMC_GetCommandResponse>
 8105ef8:	4603      	mov	r3, r0
 8105efa:	461a      	mov	r2, r3
 8105efc:	7afb      	ldrb	r3, [r7, #11]
 8105efe:	4293      	cmp	r3, r2
 8105f00:	d001      	beq.n	8105f06 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8105f02:	2301      	movs	r3, #1
 8105f04:	e099      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8105f06:	2100      	movs	r1, #0
 8105f08:	68f8      	ldr	r0, [r7, #12]
 8105f0a:	f7ff fcf8 	bl	81058fe <SDMMC_GetResponse>
 8105f0e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8105f10:	697a      	ldr	r2, [r7, #20]
 8105f12:	4b50      	ldr	r3, [pc, #320]	@ (8106054 <SDMMC_GetCmdResp1+0x1e0>)
 8105f14:	4013      	ands	r3, r2
 8105f16:	2b00      	cmp	r3, #0
 8105f18:	d101      	bne.n	8105f1e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8105f1a:	2300      	movs	r3, #0
 8105f1c:	e08d      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8105f1e:	697b      	ldr	r3, [r7, #20]
 8105f20:	2b00      	cmp	r3, #0
 8105f22:	da02      	bge.n	8105f2a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8105f24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8105f28:	e087      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8105f2a:	697b      	ldr	r3, [r7, #20]
 8105f2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8105f30:	2b00      	cmp	r3, #0
 8105f32:	d001      	beq.n	8105f38 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8105f34:	2340      	movs	r3, #64	@ 0x40
 8105f36:	e080      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8105f38:	697b      	ldr	r3, [r7, #20]
 8105f3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105f3e:	2b00      	cmp	r3, #0
 8105f40:	d001      	beq.n	8105f46 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8105f42:	2380      	movs	r3, #128	@ 0x80
 8105f44:	e079      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8105f46:	697b      	ldr	r3, [r7, #20]
 8105f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8105f4c:	2b00      	cmp	r3, #0
 8105f4e:	d002      	beq.n	8105f56 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8105f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105f54:	e071      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8105f56:	697b      	ldr	r3, [r7, #20]
 8105f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105f5c:	2b00      	cmp	r3, #0
 8105f5e:	d002      	beq.n	8105f66 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8105f60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8105f64:	e069      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8105f66:	697b      	ldr	r3, [r7, #20]
 8105f68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8105f6c:	2b00      	cmp	r3, #0
 8105f6e:	d002      	beq.n	8105f76 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8105f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8105f74:	e061      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8105f76:	697b      	ldr	r3, [r7, #20]
 8105f78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8105f7c:	2b00      	cmp	r3, #0
 8105f7e:	d002      	beq.n	8105f86 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8105f80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105f84:	e059      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8105f86:	697b      	ldr	r3, [r7, #20]
 8105f88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8105f8c:	2b00      	cmp	r3, #0
 8105f8e:	d002      	beq.n	8105f96 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8105f90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8105f94:	e051      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8105f96:	697b      	ldr	r3, [r7, #20]
 8105f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8105f9c:	2b00      	cmp	r3, #0
 8105f9e:	d002      	beq.n	8105fa6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8105fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8105fa4:	e049      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8105fa6:	697b      	ldr	r3, [r7, #20]
 8105fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8105fac:	2b00      	cmp	r3, #0
 8105fae:	d002      	beq.n	8105fb6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8105fb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8105fb4:	e041      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8105fb6:	697b      	ldr	r3, [r7, #20]
 8105fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8105fbc:	2b00      	cmp	r3, #0
 8105fbe:	d002      	beq.n	8105fc6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8105fc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105fc4:	e039      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8105fc6:	697b      	ldr	r3, [r7, #20]
 8105fc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105fcc:	2b00      	cmp	r3, #0
 8105fce:	d002      	beq.n	8105fd6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8105fd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8105fd4:	e031      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8105fd6:	697b      	ldr	r3, [r7, #20]
 8105fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105fdc:	2b00      	cmp	r3, #0
 8105fde:	d002      	beq.n	8105fe6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8105fe0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8105fe4:	e029      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8105fe6:	697b      	ldr	r3, [r7, #20]
 8105fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105fec:	2b00      	cmp	r3, #0
 8105fee:	d002      	beq.n	8105ff6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8105ff0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8105ff4:	e021      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8105ff6:	697b      	ldr	r3, [r7, #20]
 8105ff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8105ffc:	2b00      	cmp	r3, #0
 8105ffe:	d002      	beq.n	8106006 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8106000:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8106004:	e019      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8106006:	697b      	ldr	r3, [r7, #20]
 8106008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810600c:	2b00      	cmp	r3, #0
 810600e:	d002      	beq.n	8106016 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8106010:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8106014:	e011      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8106016:	697b      	ldr	r3, [r7, #20]
 8106018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810601c:	2b00      	cmp	r3, #0
 810601e:	d002      	beq.n	8106026 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8106020:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8106024:	e009      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8106026:	697b      	ldr	r3, [r7, #20]
 8106028:	f003 0308 	and.w	r3, r3, #8
 810602c:	2b00      	cmp	r3, #0
 810602e:	d002      	beq.n	8106036 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8106030:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8106034:	e001      	b.n	810603a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8106036:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810603a:	4618      	mov	r0, r3
 810603c:	3720      	adds	r7, #32
 810603e:	46bd      	mov	sp, r7
 8106040:	bd80      	pop	{r7, pc}
 8106042:	bf00      	nop
 8106044:	10000004 	.word	0x10000004
 8106048:	10624dd3 	.word	0x10624dd3
 810604c:	00200045 	.word	0x00200045
 8106050:	002000c5 	.word	0x002000c5
 8106054:	fdffe008 	.word	0xfdffe008

08106058 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8106058:	b480      	push	{r7}
 810605a:	b085      	sub	sp, #20
 810605c:	af00      	add	r7, sp, #0
 810605e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8106060:	4b1f      	ldr	r3, [pc, #124]	@ (81060e0 <SDMMC_GetCmdResp2+0x88>)
 8106062:	681b      	ldr	r3, [r3, #0]
 8106064:	4a1f      	ldr	r2, [pc, #124]	@ (81060e4 <SDMMC_GetCmdResp2+0x8c>)
 8106066:	fba2 2303 	umull	r2, r3, r2, r3
 810606a:	0a5b      	lsrs	r3, r3, #9
 810606c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8106070:	fb02 f303 	mul.w	r3, r2, r3
 8106074:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8106076:	68fb      	ldr	r3, [r7, #12]
 8106078:	1e5a      	subs	r2, r3, #1
 810607a:	60fa      	str	r2, [r7, #12]
 810607c:	2b00      	cmp	r3, #0
 810607e:	d102      	bne.n	8106086 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8106080:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8106084:	e026      	b.n	81060d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8106086:	687b      	ldr	r3, [r7, #4]
 8106088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810608a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810608c:	68bb      	ldr	r3, [r7, #8]
 810608e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8106092:	2b00      	cmp	r3, #0
 8106094:	d0ef      	beq.n	8106076 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8106096:	68bb      	ldr	r3, [r7, #8]
 8106098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810609c:	2b00      	cmp	r3, #0
 810609e:	d1ea      	bne.n	8106076 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81060a4:	f003 0304 	and.w	r3, r3, #4
 81060a8:	2b00      	cmp	r3, #0
 81060aa:	d004      	beq.n	81060b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81060ac:	687b      	ldr	r3, [r7, #4]
 81060ae:	2204      	movs	r2, #4
 81060b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81060b2:	2304      	movs	r3, #4
 81060b4:	e00e      	b.n	81060d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81060ba:	f003 0301 	and.w	r3, r3, #1
 81060be:	2b00      	cmp	r3, #0
 81060c0:	d004      	beq.n	81060cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	2201      	movs	r2, #1
 81060c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 81060c8:	2301      	movs	r3, #1
 81060ca:	e003      	b.n	81060d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81060cc:	687b      	ldr	r3, [r7, #4]
 81060ce:	4a06      	ldr	r2, [pc, #24]	@ (81060e8 <SDMMC_GetCmdResp2+0x90>)
 81060d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 81060d2:	2300      	movs	r3, #0
}
 81060d4:	4618      	mov	r0, r3
 81060d6:	3714      	adds	r7, #20
 81060d8:	46bd      	mov	sp, r7
 81060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060de:	4770      	bx	lr
 81060e0:	10000004 	.word	0x10000004
 81060e4:	10624dd3 	.word	0x10624dd3
 81060e8:	002000c5 	.word	0x002000c5

081060ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 81060ec:	b480      	push	{r7}
 81060ee:	b085      	sub	sp, #20
 81060f0:	af00      	add	r7, sp, #0
 81060f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81060f4:	4b1a      	ldr	r3, [pc, #104]	@ (8106160 <SDMMC_GetCmdResp3+0x74>)
 81060f6:	681b      	ldr	r3, [r3, #0]
 81060f8:	4a1a      	ldr	r2, [pc, #104]	@ (8106164 <SDMMC_GetCmdResp3+0x78>)
 81060fa:	fba2 2303 	umull	r2, r3, r2, r3
 81060fe:	0a5b      	lsrs	r3, r3, #9
 8106100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8106104:	fb02 f303 	mul.w	r3, r2, r3
 8106108:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810610a:	68fb      	ldr	r3, [r7, #12]
 810610c:	1e5a      	subs	r2, r3, #1
 810610e:	60fa      	str	r2, [r7, #12]
 8106110:	2b00      	cmp	r3, #0
 8106112:	d102      	bne.n	810611a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8106114:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8106118:	e01b      	b.n	8106152 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810611e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8106120:	68bb      	ldr	r3, [r7, #8]
 8106122:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8106126:	2b00      	cmp	r3, #0
 8106128:	d0ef      	beq.n	810610a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810612a:	68bb      	ldr	r3, [r7, #8]
 810612c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8106130:	2b00      	cmp	r3, #0
 8106132:	d1ea      	bne.n	810610a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8106134:	687b      	ldr	r3, [r7, #4]
 8106136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106138:	f003 0304 	and.w	r3, r3, #4
 810613c:	2b00      	cmp	r3, #0
 810613e:	d004      	beq.n	810614a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8106140:	687b      	ldr	r3, [r7, #4]
 8106142:	2204      	movs	r2, #4
 8106144:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8106146:	2304      	movs	r3, #4
 8106148:	e003      	b.n	8106152 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810614a:	687b      	ldr	r3, [r7, #4]
 810614c:	4a06      	ldr	r2, [pc, #24]	@ (8106168 <SDMMC_GetCmdResp3+0x7c>)
 810614e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8106150:	2300      	movs	r3, #0
}
 8106152:	4618      	mov	r0, r3
 8106154:	3714      	adds	r7, #20
 8106156:	46bd      	mov	sp, r7
 8106158:	f85d 7b04 	ldr.w	r7, [sp], #4
 810615c:	4770      	bx	lr
 810615e:	bf00      	nop
 8106160:	10000004 	.word	0x10000004
 8106164:	10624dd3 	.word	0x10624dd3
 8106168:	002000c5 	.word	0x002000c5

0810616c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810616c:	b580      	push	{r7, lr}
 810616e:	b088      	sub	sp, #32
 8106170:	af00      	add	r7, sp, #0
 8106172:	60f8      	str	r0, [r7, #12]
 8106174:	460b      	mov	r3, r1
 8106176:	607a      	str	r2, [r7, #4]
 8106178:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810617a:	4b35      	ldr	r3, [pc, #212]	@ (8106250 <SDMMC_GetCmdResp6+0xe4>)
 810617c:	681b      	ldr	r3, [r3, #0]
 810617e:	4a35      	ldr	r2, [pc, #212]	@ (8106254 <SDMMC_GetCmdResp6+0xe8>)
 8106180:	fba2 2303 	umull	r2, r3, r2, r3
 8106184:	0a5b      	lsrs	r3, r3, #9
 8106186:	f241 3288 	movw	r2, #5000	@ 0x1388
 810618a:	fb02 f303 	mul.w	r3, r2, r3
 810618e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8106190:	69fb      	ldr	r3, [r7, #28]
 8106192:	1e5a      	subs	r2, r3, #1
 8106194:	61fa      	str	r2, [r7, #28]
 8106196:	2b00      	cmp	r3, #0
 8106198:	d102      	bne.n	81061a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810619a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810619e:	e052      	b.n	8106246 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 81061a0:	68fb      	ldr	r3, [r7, #12]
 81061a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81061a4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81061a6:	69bb      	ldr	r3, [r7, #24]
 81061a8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 81061ac:	2b00      	cmp	r3, #0
 81061ae:	d0ef      	beq.n	8106190 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81061b0:	69bb      	ldr	r3, [r7, #24]
 81061b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81061b6:	2b00      	cmp	r3, #0
 81061b8:	d1ea      	bne.n	8106190 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81061ba:	68fb      	ldr	r3, [r7, #12]
 81061bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81061be:	f003 0304 	and.w	r3, r3, #4
 81061c2:	2b00      	cmp	r3, #0
 81061c4:	d004      	beq.n	81061d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81061c6:	68fb      	ldr	r3, [r7, #12]
 81061c8:	2204      	movs	r2, #4
 81061ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81061cc:	2304      	movs	r3, #4
 81061ce:	e03a      	b.n	8106246 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81061d0:	68fb      	ldr	r3, [r7, #12]
 81061d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81061d4:	f003 0301 	and.w	r3, r3, #1
 81061d8:	2b00      	cmp	r3, #0
 81061da:	d004      	beq.n	81061e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 81061dc:	68fb      	ldr	r3, [r7, #12]
 81061de:	2201      	movs	r2, #1
 81061e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 81061e2:	2301      	movs	r3, #1
 81061e4:	e02f      	b.n	8106246 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 81061e6:	68f8      	ldr	r0, [r7, #12]
 81061e8:	f7ff fb7c 	bl	81058e4 <SDMMC_GetCommandResponse>
 81061ec:	4603      	mov	r3, r0
 81061ee:	461a      	mov	r2, r3
 81061f0:	7afb      	ldrb	r3, [r7, #11]
 81061f2:	4293      	cmp	r3, r2
 81061f4:	d001      	beq.n	81061fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 81061f6:	2301      	movs	r3, #1
 81061f8:	e025      	b.n	8106246 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81061fa:	68fb      	ldr	r3, [r7, #12]
 81061fc:	4a16      	ldr	r2, [pc, #88]	@ (8106258 <SDMMC_GetCmdResp6+0xec>)
 81061fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8106200:	2100      	movs	r1, #0
 8106202:	68f8      	ldr	r0, [r7, #12]
 8106204:	f7ff fb7b 	bl	81058fe <SDMMC_GetResponse>
 8106208:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810620a:	697b      	ldr	r3, [r7, #20]
 810620c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8106210:	2b00      	cmp	r3, #0
 8106212:	d106      	bne.n	8106222 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8106214:	697b      	ldr	r3, [r7, #20]
 8106216:	0c1b      	lsrs	r3, r3, #16
 8106218:	b29a      	uxth	r2, r3
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810621e:	2300      	movs	r3, #0
 8106220:	e011      	b.n	8106246 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8106222:	697b      	ldr	r3, [r7, #20]
 8106224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8106228:	2b00      	cmp	r3, #0
 810622a:	d002      	beq.n	8106232 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810622c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8106230:	e009      	b.n	8106246 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8106232:	697b      	ldr	r3, [r7, #20]
 8106234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8106238:	2b00      	cmp	r3, #0
 810623a:	d002      	beq.n	8106242 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810623c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8106240:	e001      	b.n	8106246 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8106242:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8106246:	4618      	mov	r0, r3
 8106248:	3720      	adds	r7, #32
 810624a:	46bd      	mov	sp, r7
 810624c:	bd80      	pop	{r7, pc}
 810624e:	bf00      	nop
 8106250:	10000004 	.word	0x10000004
 8106254:	10624dd3 	.word	0x10624dd3
 8106258:	002000c5 	.word	0x002000c5

0810625c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810625c:	b480      	push	{r7}
 810625e:	b085      	sub	sp, #20
 8106260:	af00      	add	r7, sp, #0
 8106262:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8106264:	4b22      	ldr	r3, [pc, #136]	@ (81062f0 <SDMMC_GetCmdResp7+0x94>)
 8106266:	681b      	ldr	r3, [r3, #0]
 8106268:	4a22      	ldr	r2, [pc, #136]	@ (81062f4 <SDMMC_GetCmdResp7+0x98>)
 810626a:	fba2 2303 	umull	r2, r3, r2, r3
 810626e:	0a5b      	lsrs	r3, r3, #9
 8106270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8106274:	fb02 f303 	mul.w	r3, r2, r3
 8106278:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810627a:	68fb      	ldr	r3, [r7, #12]
 810627c:	1e5a      	subs	r2, r3, #1
 810627e:	60fa      	str	r2, [r7, #12]
 8106280:	2b00      	cmp	r3, #0
 8106282:	d102      	bne.n	810628a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8106284:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8106288:	e02c      	b.n	81062e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810628e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8106290:	68bb      	ldr	r3, [r7, #8]
 8106292:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8106296:	2b00      	cmp	r3, #0
 8106298:	d0ef      	beq.n	810627a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810629a:	68bb      	ldr	r3, [r7, #8]
 810629c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81062a0:	2b00      	cmp	r3, #0
 81062a2:	d1ea      	bne.n	810627a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81062a4:	687b      	ldr	r3, [r7, #4]
 81062a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81062a8:	f003 0304 	and.w	r3, r3, #4
 81062ac:	2b00      	cmp	r3, #0
 81062ae:	d004      	beq.n	81062ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81062b0:	687b      	ldr	r3, [r7, #4]
 81062b2:	2204      	movs	r2, #4
 81062b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81062b6:	2304      	movs	r3, #4
 81062b8:	e014      	b.n	81062e4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81062ba:	687b      	ldr	r3, [r7, #4]
 81062bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81062be:	f003 0301 	and.w	r3, r3, #1
 81062c2:	2b00      	cmp	r3, #0
 81062c4:	d004      	beq.n	81062d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 81062c6:	687b      	ldr	r3, [r7, #4]
 81062c8:	2201      	movs	r2, #1
 81062ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 81062cc:	2301      	movs	r3, #1
 81062ce:	e009      	b.n	81062e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 81062d0:	687b      	ldr	r3, [r7, #4]
 81062d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81062d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81062d8:	2b00      	cmp	r3, #0
 81062da:	d002      	beq.n	81062e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 81062dc:	687b      	ldr	r3, [r7, #4]
 81062de:	2240      	movs	r2, #64	@ 0x40
 81062e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 81062e2:	2300      	movs	r3, #0

}
 81062e4:	4618      	mov	r0, r3
 81062e6:	3714      	adds	r7, #20
 81062e8:	46bd      	mov	sp, r7
 81062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062ee:	4770      	bx	lr
 81062f0:	10000004 	.word	0x10000004
 81062f4:	10624dd3 	.word	0x10624dd3

081062f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 81062f8:	b480      	push	{r7}
 81062fa:	b085      	sub	sp, #20
 81062fc:	af00      	add	r7, sp, #0
 81062fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8106300:	4b11      	ldr	r3, [pc, #68]	@ (8106348 <SDMMC_GetCmdError+0x50>)
 8106302:	681b      	ldr	r3, [r3, #0]
 8106304:	4a11      	ldr	r2, [pc, #68]	@ (810634c <SDMMC_GetCmdError+0x54>)
 8106306:	fba2 2303 	umull	r2, r3, r2, r3
 810630a:	0a5b      	lsrs	r3, r3, #9
 810630c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8106310:	fb02 f303 	mul.w	r3, r2, r3
 8106314:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8106316:	68fb      	ldr	r3, [r7, #12]
 8106318:	1e5a      	subs	r2, r3, #1
 810631a:	60fa      	str	r2, [r7, #12]
 810631c:	2b00      	cmp	r3, #0
 810631e:	d102      	bne.n	8106326 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8106320:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8106324:	e009      	b.n	810633a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8106326:	687b      	ldr	r3, [r7, #4]
 8106328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810632a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810632e:	2b00      	cmp	r3, #0
 8106330:	d0f1      	beq.n	8106316 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8106332:	687b      	ldr	r3, [r7, #4]
 8106334:	4a06      	ldr	r2, [pc, #24]	@ (8106350 <SDMMC_GetCmdError+0x58>)
 8106336:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8106338:	2300      	movs	r3, #0
}
 810633a:	4618      	mov	r0, r3
 810633c:	3714      	adds	r7, #20
 810633e:	46bd      	mov	sp, r7
 8106340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106344:	4770      	bx	lr
 8106346:	bf00      	nop
 8106348:	10000004 	.word	0x10000004
 810634c:	10624dd3 	.word	0x10624dd3
 8106350:	002000c5 	.word	0x002000c5

08106354 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8106354:	b480      	push	{r7}
 8106356:	b087      	sub	sp, #28
 8106358:	af00      	add	r7, sp, #0
 810635a:	60f8      	str	r0, [r7, #12]
 810635c:	60b9      	str	r1, [r7, #8]
 810635e:	4613      	mov	r3, r2
 8106360:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8106362:	2301      	movs	r3, #1
 8106364:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8106366:	2300      	movs	r3, #0
 8106368:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 810636a:	4b1f      	ldr	r3, [pc, #124]	@ (81063e8 <FATFS_LinkDriverEx+0x94>)
 810636c:	7a5b      	ldrb	r3, [r3, #9]
 810636e:	b2db      	uxtb	r3, r3
 8106370:	2b00      	cmp	r3, #0
 8106372:	d131      	bne.n	81063d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8106374:	4b1c      	ldr	r3, [pc, #112]	@ (81063e8 <FATFS_LinkDriverEx+0x94>)
 8106376:	7a5b      	ldrb	r3, [r3, #9]
 8106378:	b2db      	uxtb	r3, r3
 810637a:	461a      	mov	r2, r3
 810637c:	4b1a      	ldr	r3, [pc, #104]	@ (81063e8 <FATFS_LinkDriverEx+0x94>)
 810637e:	2100      	movs	r1, #0
 8106380:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8106382:	4b19      	ldr	r3, [pc, #100]	@ (81063e8 <FATFS_LinkDriverEx+0x94>)
 8106384:	7a5b      	ldrb	r3, [r3, #9]
 8106386:	b2db      	uxtb	r3, r3
 8106388:	4a17      	ldr	r2, [pc, #92]	@ (81063e8 <FATFS_LinkDriverEx+0x94>)
 810638a:	009b      	lsls	r3, r3, #2
 810638c:	4413      	add	r3, r2
 810638e:	68fa      	ldr	r2, [r7, #12]
 8106390:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8106392:	4b15      	ldr	r3, [pc, #84]	@ (81063e8 <FATFS_LinkDriverEx+0x94>)
 8106394:	7a5b      	ldrb	r3, [r3, #9]
 8106396:	b2db      	uxtb	r3, r3
 8106398:	461a      	mov	r2, r3
 810639a:	4b13      	ldr	r3, [pc, #76]	@ (81063e8 <FATFS_LinkDriverEx+0x94>)
 810639c:	4413      	add	r3, r2
 810639e:	79fa      	ldrb	r2, [r7, #7]
 81063a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 81063a2:	4b11      	ldr	r3, [pc, #68]	@ (81063e8 <FATFS_LinkDriverEx+0x94>)
 81063a4:	7a5b      	ldrb	r3, [r3, #9]
 81063a6:	b2db      	uxtb	r3, r3
 81063a8:	1c5a      	adds	r2, r3, #1
 81063aa:	b2d1      	uxtb	r1, r2
 81063ac:	4a0e      	ldr	r2, [pc, #56]	@ (81063e8 <FATFS_LinkDriverEx+0x94>)
 81063ae:	7251      	strb	r1, [r2, #9]
 81063b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 81063b2:	7dbb      	ldrb	r3, [r7, #22]
 81063b4:	3330      	adds	r3, #48	@ 0x30
 81063b6:	b2da      	uxtb	r2, r3
 81063b8:	68bb      	ldr	r3, [r7, #8]
 81063ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 81063bc:	68bb      	ldr	r3, [r7, #8]
 81063be:	3301      	adds	r3, #1
 81063c0:	223a      	movs	r2, #58	@ 0x3a
 81063c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 81063c4:	68bb      	ldr	r3, [r7, #8]
 81063c6:	3302      	adds	r3, #2
 81063c8:	222f      	movs	r2, #47	@ 0x2f
 81063ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 81063cc:	68bb      	ldr	r3, [r7, #8]
 81063ce:	3303      	adds	r3, #3
 81063d0:	2200      	movs	r2, #0
 81063d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 81063d4:	2300      	movs	r3, #0
 81063d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 81063d8:	7dfb      	ldrb	r3, [r7, #23]
}
 81063da:	4618      	mov	r0, r3
 81063dc:	371c      	adds	r7, #28
 81063de:	46bd      	mov	sp, r7
 81063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063e4:	4770      	bx	lr
 81063e6:	bf00      	nop
 81063e8:	100000b8 	.word	0x100000b8

081063ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 81063ec:	b580      	push	{r7, lr}
 81063ee:	b082      	sub	sp, #8
 81063f0:	af00      	add	r7, sp, #0
 81063f2:	6078      	str	r0, [r7, #4]
 81063f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 81063f6:	2200      	movs	r2, #0
 81063f8:	6839      	ldr	r1, [r7, #0]
 81063fa:	6878      	ldr	r0, [r7, #4]
 81063fc:	f7ff ffaa 	bl	8106354 <FATFS_LinkDriverEx>
 8106400:	4603      	mov	r3, r0
}
 8106402:	4618      	mov	r0, r3
 8106404:	3708      	adds	r7, #8
 8106406:	46bd      	mov	sp, r7
 8106408:	bd80      	pop	{r7, pc}

0810640a <memset>:
 810640a:	4402      	add	r2, r0
 810640c:	4603      	mov	r3, r0
 810640e:	4293      	cmp	r3, r2
 8106410:	d100      	bne.n	8106414 <memset+0xa>
 8106412:	4770      	bx	lr
 8106414:	f803 1b01 	strb.w	r1, [r3], #1
 8106418:	e7f9      	b.n	810640e <memset+0x4>
	...

0810641c <__libc_init_array>:
 810641c:	b570      	push	{r4, r5, r6, lr}
 810641e:	4d0d      	ldr	r5, [pc, #52]	@ (8106454 <__libc_init_array+0x38>)
 8106420:	4c0d      	ldr	r4, [pc, #52]	@ (8106458 <__libc_init_array+0x3c>)
 8106422:	1b64      	subs	r4, r4, r5
 8106424:	10a4      	asrs	r4, r4, #2
 8106426:	2600      	movs	r6, #0
 8106428:	42a6      	cmp	r6, r4
 810642a:	d109      	bne.n	8106440 <__libc_init_array+0x24>
 810642c:	4d0b      	ldr	r5, [pc, #44]	@ (810645c <__libc_init_array+0x40>)
 810642e:	4c0c      	ldr	r4, [pc, #48]	@ (8106460 <__libc_init_array+0x44>)
 8106430:	f000 f818 	bl	8106464 <_init>
 8106434:	1b64      	subs	r4, r4, r5
 8106436:	10a4      	asrs	r4, r4, #2
 8106438:	2600      	movs	r6, #0
 810643a:	42a6      	cmp	r6, r4
 810643c:	d105      	bne.n	810644a <__libc_init_array+0x2e>
 810643e:	bd70      	pop	{r4, r5, r6, pc}
 8106440:	f855 3b04 	ldr.w	r3, [r5], #4
 8106444:	4798      	blx	r3
 8106446:	3601      	adds	r6, #1
 8106448:	e7ee      	b.n	8106428 <__libc_init_array+0xc>
 810644a:	f855 3b04 	ldr.w	r3, [r5], #4
 810644e:	4798      	blx	r3
 8106450:	3601      	adds	r6, #1
 8106452:	e7f2      	b.n	810643a <__libc_init_array+0x1e>
 8106454:	081064a0 	.word	0x081064a0
 8106458:	081064a0 	.word	0x081064a0
 810645c:	081064a0 	.word	0x081064a0
 8106460:	081064a4 	.word	0x081064a4

08106464 <_init>:
 8106464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106466:	bf00      	nop
 8106468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810646a:	bc08      	pop	{r3}
 810646c:	469e      	mov	lr, r3
 810646e:	4770      	bx	lr

08106470 <_fini>:
 8106470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106472:	bf00      	nop
 8106474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106476:	bc08      	pop	{r3}
 8106478:	469e      	mov	lr, r3
 810647a:	4770      	bx	lr
