
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000260fc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000385c  080263a0  080263a0  000273a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000b62ea  08029bfc  08029bfc  0002abfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000030  080dfee8  080dfee8  000e0ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000126  90000000  90000000  000e2000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080dff18  080dff18  000e2126  2**0
                  CONTENTS
  7 .ARM          00000008  080dff18  080dff18  000e0f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080dff20  080dff20  000e2126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   0000001c  080dff20  080dff20  000e0f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080dff3c  080dff3c  000e0f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000013c  24000000  080dff44  000e1000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferA 00000100  24000140  080e0080  000e1140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferB 00000100  24000240  080e0180  000e1240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          0002980c  24000340  080e0280  000e1340  2**2
                  ALLOC
 15 ._user_heap_stack 00002004  24029b4c  080e0280  000e1b4c  2**0
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  000e2126  2**0
                  CONTENTS, READONLY
 17 BufferSection 00232800  d0000000  d0000000  000e3000  2**2
                  ALLOC
 18 .debug_info   000ed670  00000000  00000000  000e2154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00018efe  00000000  00000000  001cf7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003de8  00000000  00000000  001e86c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00004888  00000000  00000000  001ec4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00055b15  00000000  00000000  001f0d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00073547  00000000  00000000  0024684d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001f5931  00000000  00000000  002b9d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000c2  00000000  00000000  004af6c5  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000af38  00000000  00000000  004af788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loclists 000258bd  00000000  00000000  004ba6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line_str 00000076  00000000  00000000  004dff7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08026384 	.word	0x08026384

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	08026384 	.word	0x08026384

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00f bacc 	b.w	800fc98 <vTaskSetApplicationTaskTag>
 8000700:	08002575 	.word	0x08002575

08000704 <Start_Gear_detect>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Gear_detect */
void Start_Gear_detect(void *argument)
{
 8000704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    static uint32_t lastDebounceTimeUp = 0;
    static uint32_t lastDebounceTimeDown = 0;
    const uint32_t debounceDelay = 150;

    uint32_t lastSendTime = 0;
 8000708:	2600      	movs	r6, #0

    for (;;)
    {
        uint32_t currentTime = osKernelGetTickCount(); 

        if (HAL_GPIO_ReadPin(GPIOC, button_Pin) == GPIO_PIN_SET) // Clutch detection
 800070a:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 80007fc <Start_Gear_detect+0xf8>
                }
                lastDebounceTimeUp = currentTime;
            }

            // === Down Shift ===
            if (down == GPIO_PIN_RESET && (currentTime - lastDebounceTimeDown > debounceDelay))
 800070e:	4f36      	ldr	r7, [pc, #216]	@ (80007e8 <Start_Gear_detect+0xe4>)
        uint32_t currentTime = osKernelGetTickCount(); 
 8000710:	f00d fd56 	bl	800e1c0 <osKernelGetTickCount>
        if (HAL_GPIO_ReadPin(GPIOC, button_Pin) == GPIO_PIN_SET) // Clutch detection
 8000714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
        uint32_t currentTime = osKernelGetTickCount(); 
 8000718:	4605      	mov	r5, r0
        if (HAL_GPIO_ReadPin(GPIOC, button_Pin) == GPIO_PIN_SET) // Clutch detection
 800071a:	4640      	mov	r0, r8
 800071c:	f009 f8c8 	bl	80098b0 <HAL_GPIO_ReadPin>
 8000720:	2801      	cmp	r0, #1
 8000722:	4c32      	ldr	r4, [pc, #200]	@ (80007ec <Start_Gear_detect+0xe8>)
 8000724:	d13e      	bne.n	80007a4 <Start_Gear_detect+0xa0>
            GPIO_PinState up = HAL_GPIO_ReadPin(GPIOK, JOY_UP_Pin); //gear up
 8000726:	2140      	movs	r1, #64	@ 0x40
 8000728:	4831      	ldr	r0, [pc, #196]	@ (80007f0 <Start_Gear_detect+0xec>)
 800072a:	f009 f8c1 	bl	80098b0 <HAL_GPIO_ReadPin>
            GPIO_PinState down = HAL_GPIO_ReadPin(GPIOK, JOY_DOWN_Pin); //down
 800072e:	2108      	movs	r1, #8
            GPIO_PinState up = HAL_GPIO_ReadPin(GPIOK, JOY_UP_Pin); //gear up
 8000730:	4682      	mov	sl, r0
            GPIO_PinState down = HAL_GPIO_ReadPin(GPIOK, JOY_DOWN_Pin); //down
 8000732:	482f      	ldr	r0, [pc, #188]	@ (80007f0 <Start_Gear_detect+0xec>)
 8000734:	f009 f8bc 	bl	80098b0 <HAL_GPIO_ReadPin>
            GPIO_PinState n_state = HAL_GPIO_ReadPin(GPIOK, N_state_Pin); // N signal
 8000738:	2104      	movs	r1, #4
            GPIO_PinState down = HAL_GPIO_ReadPin(GPIOK, JOY_DOWN_Pin); //down
 800073a:	4681      	mov	r9, r0
            GPIO_PinState n_state = HAL_GPIO_ReadPin(GPIOK, N_state_Pin); // N signal
 800073c:	482c      	ldr	r0, [pc, #176]	@ (80007f0 <Start_Gear_detect+0xec>)
 800073e:	f009 f8b7 	bl	80098b0 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
            if (up == GPIO_PIN_RESET && (currentTime - lastDebounceTimeUp > debounceDelay))
 8000744:	f1ba 0f00 	cmp.w	sl, #0
 8000748:	d10f      	bne.n	800076a <Start_Gear_detect+0x66>
 800074a:	492a      	ldr	r1, [pc, #168]	@ (80007f4 <Start_Gear_detect+0xf0>)
 800074c:	680a      	ldr	r2, [r1, #0]
 800074e:	1aaa      	subs	r2, r5, r2
 8000750:	2a96      	cmp	r2, #150	@ 0x96
 8000752:	d90a      	bls.n	800076a <Start_Gear_detect+0x66>
                switch (gearState)
 8000754:	7822      	ldrb	r2, [r4, #0]
 8000756:	2a05      	cmp	r2, #5
 8000758:	d806      	bhi.n	8000768 <Start_Gear_detect+0x64>
 800075a:	e8df f002 	tbb	[pc, r2]
 800075e:	0316      	.short	0x0316
 8000760:	1e1c1a18 	.word	0x1e1c1a18
                        if (n_state == GPIO_PIN_RESET)
 8000764:	b98b      	cbnz	r3, 800078a <Start_Gear_detect+0x86>
                        gearState = SixthGear;
 8000766:	7023      	strb	r3, [r4, #0]
                lastDebounceTimeUp = currentTime;
 8000768:	600d      	str	r5, [r1, #0]
            {
                switch (gearState)
 800076a:	7822      	ldrb	r2, [r4, #0]
            if (down == GPIO_PIN_RESET && (currentTime - lastDebounceTimeDown > debounceDelay))
 800076c:	f1b9 0f00 	cmp.w	r9, #0
 8000770:	d118      	bne.n	80007a4 <Start_Gear_detect+0xa0>
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	1aeb      	subs	r3, r5, r3
 8000776:	2b96      	cmp	r3, #150	@ 0x96
 8000778:	d914      	bls.n	80007a4 <Start_Gear_detect+0xa0>
                switch (gearState)
 800077a:	2a06      	cmp	r2, #6
 800077c:	d811      	bhi.n	80007a2 <Start_Gear_detect+0x9e>
 800077e:	e8df f002 	tbb	[pc, r2]
 8000782:	1030      	.short	0x1030
 8000784:	2a2c2e30 	.word	0x2a2c2e30
 8000788:	0e          	.byte	0x0e
 8000789:	00          	.byte	0x00
                        gearState = SecondGear;
 800078a:	2302      	movs	r3, #2
 800078c:	e7eb      	b.n	8000766 <Start_Gear_detect+0x62>
                        gearState = ThirdGear;
 800078e:	2303      	movs	r3, #3
 8000790:	e7e9      	b.n	8000766 <Start_Gear_detect+0x62>
                        gearState = FourthGear;
 8000792:	2304      	movs	r3, #4
 8000794:	e7e7      	b.n	8000766 <Start_Gear_detect+0x62>
                        gearState = FifthGear;
 8000796:	2305      	movs	r3, #5
 8000798:	e7e5      	b.n	8000766 <Start_Gear_detect+0x62>
                        gearState = SixthGear;
 800079a:	2306      	movs	r3, #6
 800079c:	e7e3      	b.n	8000766 <Start_Gear_detect+0x62>
                {
                    case SixthGear:
                        gearState = FifthGear;
 800079e:	2305      	movs	r3, #5
                    case ThirdGear:
                        gearState = SecondGear;
                        break;

                    case SecondGear:
                        gearState = FirstGear;
 80007a0:	7023      	strb	r3, [r4, #0]

                    case FirstGear:

                        break;
                }
                lastDebounceTimeDown = currentTime;
 80007a2:	603d      	str	r5, [r7, #0]
            }
        }

        if (gearState != prevGearState || currentTime - lastSendTime > sendInterval)
 80007a4:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 8000800 <Start_Gear_detect+0xfc>
 80007a8:	7822      	ldrb	r2, [r4, #0]
 80007aa:	f899 3000 	ldrb.w	r3, [r9]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d102      	bne.n	80007b8 <Start_Gear_detect+0xb4>
 80007b2:	1bab      	subs	r3, r5, r6
 80007b4:	2b64      	cmp	r3, #100	@ 0x64
 80007b6:	d90a      	bls.n	80007ce <Start_Gear_detect+0xca>
            {
                osMessageQueuePut(gearStateQueueHandle, &gearState, 0, 0); // non-blocking
 80007b8:	2300      	movs	r3, #0
 80007ba:	480f      	ldr	r0, [pc, #60]	@ (80007f8 <Start_Gear_detect+0xf4>)
 80007bc:	490b      	ldr	r1, [pc, #44]	@ (80007ec <Start_Gear_detect+0xe8>)
                prevGearState = gearState;
                lastSendTime = currentTime;
 80007be:	462e      	mov	r6, r5
                osMessageQueuePut(gearStateQueueHandle, &gearState, 0, 0); // non-blocking
 80007c0:	461a      	mov	r2, r3
 80007c2:	6800      	ldr	r0, [r0, #0]
 80007c4:	f00d fea7 	bl	800e516 <osMessageQueuePut>
                prevGearState = gearState;
 80007c8:	7823      	ldrb	r3, [r4, #0]
 80007ca:	f889 3000 	strb.w	r3, [r9]
            }
        osDelay(5);
 80007ce:	2005      	movs	r0, #5
 80007d0:	f00d fd44 	bl	800e25c <osDelay>
    {
 80007d4:	e79c      	b.n	8000710 <Start_Gear_detect+0xc>
                        gearState = FourthGear;
 80007d6:	2304      	movs	r3, #4
 80007d8:	e7e2      	b.n	80007a0 <Start_Gear_detect+0x9c>
                        gearState = ThirdGear;
 80007da:	2303      	movs	r3, #3
 80007dc:	e7e0      	b.n	80007a0 <Start_Gear_detect+0x9c>
                        gearState = SecondGear;
 80007de:	2302      	movs	r3, #2
 80007e0:	e7de      	b.n	80007a0 <Start_Gear_detect+0x9c>
                        gearState = FirstGear;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e7dc      	b.n	80007a0 <Start_Gear_detect+0x9c>
 80007e6:	bf00      	nop
 80007e8:	2400035c 	.word	0x2400035c
 80007ec:	24000360 	.word	0x24000360
 80007f0:	58022800 	.word	0x58022800
 80007f4:	24000364 	.word	0x24000364
 80007f8:	24000398 	.word	0x24000398
 80007fc:	58020800 	.word	0x58020800
 8000800:	24000004 	.word	0x24000004

08000804 <SystemClock_Config>:
{
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000808:	224c      	movs	r2, #76	@ 0x4c
 800080a:	2100      	movs	r1, #0
 800080c:	a809      	add	r0, sp, #36	@ 0x24
 800080e:	f025 f823 	bl	8025858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000812:	2220      	movs	r2, #32
 8000814:	2100      	movs	r1, #0
 8000816:	a801      	add	r0, sp, #4
 8000818:	f025 f81e 	bl	8025858 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800081c:	2004      	movs	r0, #4
 800081e:	f00a fed1 	bl	800b5c4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000822:	2300      	movs	r3, #0
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <SystemClock_Config+0xb8>)
 8000828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800082a:	f022 0201 	bic.w	r2, r2, #1
 800082e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <SystemClock_Config+0xbc>)
 800083a:	699a      	ldr	r2, [r3, #24]
 800083c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000840:	619a      	str	r2, [r3, #24]
 8000842:	699a      	ldr	r2, [r3, #24]
 8000844:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000848:	9200      	str	r2, [sp, #0]
 800084a:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800084c:	699a      	ldr	r2, [r3, #24]
 800084e:	0492      	lsls	r2, r2, #18
 8000850:	d5fc      	bpl.n	800084c <SystemClock_Config+0x48>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000852:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000856:	2603      	movs	r6, #3
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLN = 12;
 800085a:	220c      	movs	r2, #12
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2440      	movs	r4, #64	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000860:	e9cd 6309 	strd	r6, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 800086a:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800086c:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000870:	e9cd 5317 	strd	r5, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000874:	e9cd 2319 	strd	r2, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000878:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087a:	e9cd 540c 	strd	r5, r4, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800087e:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f00b f9a0 	bl	800bbc4 <HAL_RCC_OscConfig>
 8000884:	b108      	cbz	r0, 800088a <SystemClock_Config+0x86>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000886:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <SystemClock_Config+0x84>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088c:	4629      	mov	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	e9cd 3601 	strd	r3, r6, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000896:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800089c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008a0:	e9cd 3407 	strd	r3, r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a4:	f00b fd2a 	bl	800c2fc <HAL_RCC_ClockConfig>
 80008a8:	4601      	mov	r1, r0
 80008aa:	b108      	cbz	r0, 80008b0 <SystemClock_Config+0xac>
 80008ac:	b672      	cpsid	i
  while (1)
 80008ae:	e7fe      	b.n	80008ae <SystemClock_Config+0xaa>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80008b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008b4:	f00b fc32 	bl	800c11c <HAL_RCC_MCOConfig>
}
 80008b8:	b01c      	add	sp, #112	@ 0x70
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
 80008bc:	58000400 	.word	0x58000400
 80008c0:	58024800 	.word	0x58024800

080008c4 <PeriphCommonClock_Config>:
{
 80008c4:	b500      	push	{lr}
 80008c6:	b0b3      	sub	sp, #204	@ 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c8:	22a4      	movs	r2, #164	@ 0xa4
 80008ca:	2100      	movs	r1, #0
 80008cc:	a809      	add	r0, sp, #36	@ 0x24
 80008ce:	f024 ffc3 	bl	8025858 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008d6:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d8:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008da:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80008de:	2302      	movs	r3, #2
 80008e0:	220c      	movs	r2, #12
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008e2:	e9cd 3304 	strd	r3, r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80008e6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008ea:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008ec:	22c0      	movs	r2, #192	@ 0xc0
 80008ee:	2320      	movs	r3, #32
 80008f0:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f4:	f00b ff88 	bl	800c808 <HAL_RCCEx_PeriphCLKConfig>
 80008f8:	b108      	cbz	r0, 80008fe <PeriphCommonClock_Config+0x3a>
 80008fa:	b672      	cpsid	i
  while (1)
 80008fc:	e7fe      	b.n	80008fc <PeriphCommonClock_Config+0x38>
}
 80008fe:	b033      	add	sp, #204	@ 0xcc
 8000900:	f85d fb04 	ldr.w	pc, [sp], #4

08000904 <main>:
{
 8000904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gearStateQueueHandle = osMessageQueueNew(10, sizeof(uint32_t), &gearStateQueue_attributes);
 8000908:	4aba      	ldr	r2, [pc, #744]	@ (8000bf4 <main+0x2f0>)
{
 800090a:	b0bd      	sub	sp, #244	@ 0xf4
	gearStateQueueHandle = osMessageQueueNew(10, sizeof(uint32_t), &gearStateQueue_attributes);
 800090c:	2104      	movs	r1, #4
 800090e:	200a      	movs	r0, #10
 8000910:	f00d fdc6 	bl	800e4a0 <osMessageQueueNew>
 8000914:	4bb8      	ldr	r3, [pc, #736]	@ (8000bf8 <main+0x2f4>)
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000916:	2210      	movs	r2, #16
 8000918:	2100      	movs	r1, #0
	gearStateQueueHandle = osMessageQueueNew(10, sizeof(uint32_t), &gearStateQueue_attributes);
 800091a:	6018      	str	r0, [r3, #0]
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800091c:	a82f      	add	r0, sp, #188	@ 0xbc
 800091e:	f024 ff9b 	bl	8025858 <memset>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000922:	2401      	movs	r4, #1
  HAL_MPU_Disable();
 8000924:	f008 f83c 	bl	80089a0 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000928:	f04f 4c10 	mov.w	ip, #2415919104	@ 0x90000000
 800092c:	4bb3      	ldr	r3, [pc, #716]	@ (8000bfc <main+0x2f8>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800092e:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000930:	f8ad 40bc 	strh.w	r4, [sp, #188]	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000934:	2504      	movs	r5, #4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000936:	9432      	str	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000938:	e9cd c330 	strd	ip, r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800093c:	f008 f84e 	bl	80089dc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000940:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000942:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000944:	f88d 40bd 	strb.w	r4, [sp, #189]	@ 0xbd
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000948:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800094c:	f008 f846 	bl	80089dc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000950:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000952:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000954:	f88d 40ca 	strb.w	r4, [sp, #202]	@ 0xca
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000958:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0xD0000000;
 800095c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000960:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000962:	2318      	movs	r3, #24
 8000964:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000968:	f008 f838 	bl	80089dc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800096c:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800096e:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000970:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000974:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000978:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800097a:	2312      	movs	r3, #18
 800097c:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	f88d 30c8 	strb.w	r3, [sp, #200]	@ 0xc8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000986:	f008 f829 	bl	80089dc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 800098a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800098e:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000990:	f88d 50bd 	strb.w	r5, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000994:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000996:	2311      	movs	r3, #17
 8000998:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800099c:	f008 f81e 	bl	80089dc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 80009a0:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009a2:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009a4:	f88d 40c8 	strb.w	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 80009a8:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10040000;
 80009ac:	4b94      	ldr	r3, [pc, #592]	@ (8000c00 <main+0x2fc>)
 80009ae:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80009b0:	230e      	movs	r3, #14
 80009b2:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009b6:	f008 f811 	bl	80089dc <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009ba:	4628      	mov	r0, r5
 80009bc:	f007 fffe 	bl	80089bc <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009c0:	4b90      	ldr	r3, [pc, #576]	@ (8000c04 <main+0x300>)
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 80009c8:	d111      	bne.n	80009ee <main+0xea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009ce:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009d2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009da:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80009e4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009ea:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009ee:	4a85      	ldr	r2, [pc, #532]	@ (8000c04 <main+0x300>)
 80009f0:	6953      	ldr	r3, [r2, #20]
 80009f2:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80009f6:	d123      	bne.n	8000a40 <main+0x13c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009fc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a00:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a04:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a08:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a0c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000a10:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a12:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a16:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a18:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a1c:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a1e:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000a22:	d2f9      	bcs.n	8000a18 <main+0x114>
    } while(sets-- != 0U);
 8000a24:	3b20      	subs	r3, #32
 8000a26:	f113 0f20 	cmn.w	r3, #32
 8000a2a:	d1f2      	bne.n	8000a12 <main+0x10e>
 8000a2c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a30:	6953      	ldr	r3, [r2, #20]
 8000a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a36:	6153      	str	r3, [r2, #20]
 8000a38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a3c:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000a40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a44:	4d70      	ldr	r5, [pc, #448]	@ (8000c08 <main+0x304>)
 8000a46:	682c      	ldr	r4, [r5, #0]
 8000a48:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000a4c:	f000 8400 	beq.w	8001250 <main+0x94c>
 8000a50:	3b01      	subs	r3, #1
 8000a52:	d2f8      	bcs.n	8000a46 <main+0x142>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <main+0x152>
 8000a58:	b672      	cpsid	i
 8000a5a:	e7fe      	b.n	8000a5a <main+0x156>
  hqspi.Instance = QUADSPI;
 8000a5c:	486b      	ldr	r0, [pc, #428]	@ (8000c0c <main+0x308>)
 8000a5e:	4a6c      	ldr	r2, [pc, #432]	@ (8000c10 <main+0x30c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a60:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000a62:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000a64:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a68:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a6c:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a70:	f00a fec8 	bl	800b804 <HAL_QSPI_Init>
 8000a74:	b108      	cbz	r0, 8000a7a <main+0x176>
 8000a76:	b672      	cpsid	i
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <main+0x174>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000a7a:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000a7e:	a92f      	add	r1, sp, #188	@ 0xbc
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000a80:	f88d 40be 	strb.w	r4, [sp, #190]	@ 0xbe
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000a84:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000a88:	f006 fade 	bl	8007048 <BSP_QSPI_Init>
 8000a8c:	b108      	cbz	r0, 8000a92 <main+0x18e>
 8000a8e:	b672      	cpsid	i
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <main+0x18c>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000a92:	f006 fa85 	bl	8006fa0 <BSP_QSPI_EnableMemoryMappedMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b108      	cbz	r0, 8000a9e <main+0x19a>
 8000a9a:	b672      	cpsid	i
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <main+0x198>
  hdma2d.Instance = DMA2D;
 8000a9e:	485d      	ldr	r0, [pc, #372]	@ (8000c14 <main+0x310>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000aa0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000aa4:	4e5c      	ldr	r6, [pc, #368]	@ (8000c18 <main+0x314>)
  hdma2d.Init.OutputOffset = 0;
 8000aa6:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000aaa:	e9c0 6200 	strd	r6, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000aae:	f008 f822 	bl	8008af6 <HAL_DMA2D_Init>
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	b108      	cbz	r0, 8000aba <main+0x1b6>
 8000ab6:	b672      	cpsid	i
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <main+0x1b4>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000aba:	4602      	mov	r2, r0
 8000abc:	4641      	mov	r1, r8
 8000abe:	4857      	ldr	r0, [pc, #348]	@ (8000c1c <main+0x318>)
 8000ac0:	f008 fefc 	bl	80098bc <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000ac4:	2014      	movs	r0, #20
 8000ac6:	f006 ff63 	bl	8007990 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000aca:	462a      	mov	r2, r5
 8000acc:	4641      	mov	r1, r8
 8000ace:	4853      	ldr	r0, [pc, #332]	@ (8000c1c <main+0x318>)
 8000ad0:	f008 fef4 	bl	80098bc <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000ad4:	200a      	movs	r0, #10
 8000ad6:	f006 ff5b 	bl	8007990 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000ada:	2224      	movs	r2, #36	@ 0x24
 8000adc:	4621      	mov	r1, r4
 8000ade:	a819      	add	r0, sp, #100	@ 0x64
 8000ae0:	f024 feba 	bl	8025858 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000ae4:	2218      	movs	r2, #24
 8000ae6:	4621      	mov	r1, r4
 8000ae8:	a813      	add	r0, sp, #76	@ 0x4c
 8000aea:	f024 feb5 	bl	8025858 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000aee:	2234      	movs	r2, #52	@ 0x34
 8000af0:	4621      	mov	r1, r4
 8000af2:	a82f      	add	r0, sp, #188	@ 0xbc
 8000af4:	f024 feb0 	bl	8025858 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000af8:	4621      	mov	r1, r4
 8000afa:	222c      	movs	r2, #44	@ 0x2c
 8000afc:	a822      	add	r0, sp, #136	@ 0x88
 8000afe:	f024 feab 	bl	8025858 <memset>
  hdsi.Instance = DSI;
 8000b02:	4e47      	ldr	r6, [pc, #284]	@ (8000c20 <main+0x31c>)
 8000b04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b08:	a910      	add	r1, sp, #64	@ 0x40
 8000b0a:	4630      	mov	r0, r6
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000b0c:	9512      	str	r5, [sp, #72]	@ 0x48
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000b0e:	e9c6 3400 	strd	r3, r4, [r6]
  PLLInit.PLLNDIV = 119;
 8000b12:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000b14:	e9c6 9502 	strd	r9, r5, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000b18:	e9cd 3710 	strd	r3, r7, [sp, #64]	@ 0x40
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b1c:	f008 f938 	bl	8008d90 <HAL_DSI_Init>
 8000b20:	b108      	cbz	r0, 8000b26 <main+0x222>
 8000b22:	b672      	cpsid	i
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <main+0x220>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000b26:	e9cd 5019 	strd	r5, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000b2a:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000b2e:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000b32:	e9cd 001f 	strd	r0, r0, [sp, #124]	@ 0x7c
  HostTimeouts.BTATimeout = 0;
 8000b36:	9021      	str	r0, [sp, #132]	@ 0x84
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000b38:	a919      	add	r1, sp, #100	@ 0x64
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	f008 fb94 	bl	8009268 <HAL_DSI_ConfigHostTimeouts>
 8000b40:	b108      	cbz	r0, 8000b46 <main+0x242>
 8000b42:	b672      	cpsid	i
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <main+0x240>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000b46:	2321      	movs	r3, #33	@ 0x21
 8000b48:	241c      	movs	r4, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000b4a:	250f      	movs	r5, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b4c:	a913      	add	r1, sp, #76	@ 0x4c
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000b4e:	e9cd 4313 	strd	r4, r3, [sp, #76]	@ 0x4c
  PhyTimings.DataLaneLP2HSTime = 25;
 8000b52:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000b54:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b58:	4630      	mov	r0, r6
  PhyTimings.DataLaneLP2HSTime = 25;
 8000b5a:	e9cd 5315 	strd	r5, r3, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b5e:	f008 fb46 	bl	80091ee <HAL_DSI_ConfigPhyTimer>
 8000b62:	b108      	cbz	r0, 8000b68 <main+0x264>
 8000b64:	b672      	cpsid	i
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <main+0x262>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000b68:	2104      	movs	r1, #4
 8000b6a:	482d      	ldr	r0, [pc, #180]	@ (8000c20 <main+0x31c>)
 8000b6c:	f008 fb2e 	bl	80091cc <HAL_DSI_ConfigFlowControl>
 8000b70:	b108      	cbz	r0, 8000b76 <main+0x272>
 8000b72:	b672      	cpsid	i
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <main+0x270>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000b76:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000b7a:	4829      	ldr	r0, [pc, #164]	@ (8000c20 <main+0x31c>)
 8000b7c:	f008 fcfd 	bl	800957a <HAL_DSI_SetLowPowerRXFilter>
 8000b80:	4601      	mov	r1, r0
 8000b82:	b108      	cbz	r0, 8000b88 <main+0x284>
 8000b84:	b672      	cpsid	i
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <main+0x282>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b88:	4825      	ldr	r0, [pc, #148]	@ (8000c20 <main+0x31c>)
 8000b8a:	f008 f89e 	bl	8008cca <HAL_DSI_ConfigErrorMonitor>
 8000b8e:	b108      	cbz	r0, 8000b94 <main+0x290>
 8000b90:	b672      	cpsid	i
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <main+0x28e>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000b94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b98:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000b9c:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000ba0:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ba4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000ba8:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000bac:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000bb0:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000bb4:	e9cd 932f 	strd	r9, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000bb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000bbc:	f8cd 80ec 	str.w	r8, [sp, #236]	@ 0xec
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000bc0:	e9cd a331 	strd	sl, r3, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000bc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc8:	e9cd b333 	strd	fp, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bd0:	e9cd 2335 	strd	r2, r3, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000bd4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000bd8:	e9cd 1337 	strd	r1, r3, [sp, #220]	@ 0xdc
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000bdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000be0:	a92f      	add	r1, sp, #188	@ 0xbc
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000be2:	e9cd 0339 	strd	r0, r3, [sp, #228]	@ 0xe4
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000be6:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <main+0x31c>)
 8000be8:	f008 fabc 	bl	8009164 <HAL_DSI_ConfigCommand>
 8000bec:	b1d0      	cbz	r0, 8000c24 <main+0x320>
 8000bee:	b672      	cpsid	i
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <main+0x2ec>
 8000bf2:	bf00      	nop
 8000bf4:	08026414 	.word	0x08026414
 8000bf8:	24000398 	.word	0x24000398
 8000bfc:	0300001b 	.word	0x0300001b
 8000c00:	10040000 	.word	0x10040000
 8000c04:	e000ed00 	.word	0xe000ed00
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	24000428 	.word	0x24000428
 8000c10:	52005000 	.word	0x52005000
 8000c14:	24000668 	.word	0x24000668
 8000c18:	52001000 	.word	0x52001000
 8000c1c:	58021800 	.word	0x58021800
 8000c20:	2400064c 	.word	0x2400064c
  CmdCfg.CommandSize = 400;
 8000c24:	2305      	movs	r3, #5
 8000c26:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000c2a:	2601      	movs	r6, #1
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000c2c:	a922      	add	r1, sp, #136	@ 0x88
  CmdCfg.VirtualChannelID = 0;
 8000c2e:	9022      	str	r0, [sp, #136]	@ 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000c30:	9029      	str	r0, [sp, #164]	@ 0xa4
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000c32:	962c      	str	r6, [sp, #176]	@ 0xb0
  CmdCfg.CommandSize = 400;
 8000c34:	e9cd 3723 	strd	r3, r7, [sp, #140]	@ 0x8c
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000c38:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000c3a:	e9cd 3025 	strd	r3, r0, [sp, #148]	@ 0x94
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000c3e:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000c40:	e9cd 0027 	strd	r0, r0, [sp, #156]	@ 0x9c
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000c44:	e9cd 302a 	strd	r3, r0, [sp, #168]	@ 0xa8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000c48:	48ac      	ldr	r0, [pc, #688]	@ (8000efc <main+0x5f8>)
 8000c4a:	f008 fa19 	bl	8009080 <HAL_DSI_ConfigAdaptedCommandMode>
 8000c4e:	4601      	mov	r1, r0
 8000c50:	b108      	cbz	r0, 8000c56 <main+0x352>
 8000c52:	b672      	cpsid	i
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <main+0x350>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000c56:	48a9      	ldr	r0, [pc, #676]	@ (8000efc <main+0x5f8>)
 8000c58:	f008 fa01 	bl	800905e <HAL_DSI_SetGenericVCID>
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	b108      	cbz	r0, 8000c64 <main+0x360>
 8000c60:	b672      	cpsid	i
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <main+0x35e>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c64:	2234      	movs	r2, #52	@ 0x34
 8000c66:	4601      	mov	r1, r0
 8000c68:	a822      	add	r0, sp, #136	@ 0x88
  hltdc.Instance = LTDC;
 8000c6a:	4da5      	ldr	r5, [pc, #660]	@ (8000f00 <main+0x5fc>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c6c:	f024 fdf4 	bl	8025858 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000c70:	f8df c2dc 	ldr.w	ip, [pc, #732]	@ 8000f50 <main+0x64c>
 8000c74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000c78:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000c7c:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c80:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000c82:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000c84:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000c88:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000c8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c90:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000c94:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000c98:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000c9c:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000ca0:	f240 1893 	movw	r8, #403	@ 0x193
 8000ca4:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000ca8:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000cac:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cb0:	f00a f970 	bl	800af94 <HAL_LTDC_Init>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	b108      	cbz	r0, 8000cbc <main+0x3b8>
 8000cb8:	b672      	cpsid	i
  while (1)
 8000cba:	e7fe      	b.n	8000cba <main+0x3b6>
  pLayerCfg.Alpha = 255;
 8000cbc:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000cbe:	9024      	str	r0, [sp, #144]	@ 0x90
  pLayerCfg.WindowY1 = 480;
 8000cc0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000cc4:	f8ad 20b8 	strh.w	r2, [sp, #184]	@ 0xb8
  pLayerCfg.Backcolor.Red = 0;
 8000cc8:	f88d 20ba 	strb.w	r2, [sp, #186]	@ 0xba
  pLayerCfg.ImageHeight = 480;
 8000ccc:	932d      	str	r3, [sp, #180]	@ 0xb4
  pLayerCfg.Alpha0 = 0;
 8000cce:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
  pLayerCfg.WindowX1 = 400;
 8000cd2:	e9cd 0722 	strd	r0, r7, [sp, #136]	@ 0x88
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000cd6:	2107      	movs	r1, #7
 8000cd8:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000cdc:	e9cd 0129 	strd	r0, r1, [sp, #164]	@ 0xa4
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000ce0:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ce4:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000ce6:	e9cd 172b 	strd	r1, r7, [sp, #172]	@ 0xac
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cea:	a922      	add	r1, sp, #136	@ 0x88
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000cec:	e9cd 3625 	strd	r3, r6, [sp, #148]	@ 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cf0:	f00a fa05 	bl	800b0fe <HAL_LTDC_ConfigLayer>
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	b108      	cbz	r0, 8000cfc <main+0x3f8>
 8000cf8:	b672      	cpsid	i
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <main+0x3f6>
  __HAL_LTDC_DISABLE(&hltdc);
 8000cfc:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000cfe:	487f      	ldr	r0, [pc, #508]	@ (8000efc <main+0x5f8>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000d00:	6993      	ldr	r3, [r2, #24]
 8000d02:	f023 0301 	bic.w	r3, r3, #1
 8000d06:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000d08:	f008 fb14 	bl	8009334 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000d0c:	497d      	ldr	r1, [pc, #500]	@ (8000f04 <main+0x600>)
  IOCtx.GetTick     = BSP_GetTick;
 8000d0e:	4b7e      	ldr	r3, [pc, #504]	@ (8000f08 <main+0x604>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000d10:	487e      	ldr	r0, [pc, #504]	@ (8000f0c <main+0x608>)
  IOCtx.GetTick     = BSP_GetTick;
 8000d12:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000d14:	4b7e      	ldr	r3, [pc, #504]	@ (8000f10 <main+0x60c>)
  IOCtx.Address     = 0;
 8000d16:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000d18:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000d1a:	4b7e      	ldr	r3, [pc, #504]	@ (8000f14 <main+0x610>)
 8000d1c:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000d1e:	f005 ff37 	bl	8006b90 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000d22:	4632      	mov	r2, r6
 8000d24:	4621      	mov	r1, r4
 8000d26:	4879      	ldr	r0, [pc, #484]	@ (8000f0c <main+0x608>)
 8000d28:	f005 fba2 	bl	8006470 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000d2c:	2328      	movs	r3, #40	@ 0x28
 8000d2e:	2215      	movs	r2, #21
 8000d30:	4621      	mov	r1, r4
 8000d32:	4872      	ldr	r0, [pc, #456]	@ (8000efc <main+0x5f8>)
 8000d34:	9400      	str	r4, [sp, #0]
 8000d36:	f008 fb30 	bl	800939a <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000d3a:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d3c:	486f      	ldr	r0, [pc, #444]	@ (8000efc <main+0x5f8>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000d3e:	9439      	str	r4, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000d40:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000d44:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000d48:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000d4c:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000d50:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000d54:	f008 fa06 	bl	8009164 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000d58:	4622      	mov	r2, r4
 8000d5a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000d5e:	4628      	mov	r0, r5
 8000d60:	f00a f9fa 	bl	800b158 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000d64:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000d66:	486c      	ldr	r0, [pc, #432]	@ (8000f18 <main+0x614>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000d68:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d6a:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000d72:	4b6a      	ldr	r3, [pc, #424]	@ (8000f1c <main+0x618>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d74:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000d76:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d78:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d7c:	f007 fe5a 	bl	8008a34 <HAL_CRC_Init>
 8000d80:	b108      	cbz	r0, 8000d86 <main+0x482>
 8000d82:	b672      	cpsid	i
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <main+0x480>
  hjpeg.Instance = JPEG;
 8000d86:	4866      	ldr	r0, [pc, #408]	@ (8000f20 <main+0x61c>)
 8000d88:	4b66      	ldr	r3, [pc, #408]	@ (8000f24 <main+0x620>)
 8000d8a:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000d8c:	f009 faf0 	bl	800a370 <HAL_JPEG_Init>
 8000d90:	b108      	cbz	r0, 8000d96 <main+0x492>
 8000d92:	b672      	cpsid	i
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <main+0x490>
  hadc2.Instance = ADC2;
 8000d96:	4c64      	ldr	r4, [pc, #400]	@ (8000f28 <main+0x624>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d98:	2100      	movs	r1, #0
 8000d9a:	221c      	movs	r2, #28
 8000d9c:	a82f      	add	r0, sp, #188	@ 0xbc
 8000d9e:	f024 fd5b 	bl	8025858 <memset>
  hadc2.Init.NbrOfConversion = 1;
 8000da2:	2601      	movs	r6, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	4961      	ldr	r1, [pc, #388]	@ (8000f2c <main+0x628>)
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da8:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000daa:	4620      	mov	r0, r4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dac:	82a3      	strh	r3, [r4, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dae:	6127      	str	r7, [r4, #16]
  hadc2.Init.NbrOfConversion = 1;
 8000db0:	61a6      	str	r6, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000db2:	7723      	strb	r3, [r4, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000db4:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000db6:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 8000dba:	63e6      	str	r6, [r4, #60]	@ 0x3c
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dbc:	e9c4 1300 	strd	r1, r3, [r4]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc0:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc4:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc8:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dcc:	f007 fc04 	bl	80085d8 <HAL_ADC_Init>
 8000dd0:	b108      	cbz	r0, 8000dd6 <main+0x4d2>
 8000dd2:	b672      	cpsid	i
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <main+0x4d0>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd6:	f04f 0906 	mov.w	r9, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dda:	f240 78ff 	movw	r8, #2047	@ 0x7ff
  sConfig.Offset = 0;
 8000dde:	9034      	str	r0, [sp, #208]	@ 0xd0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000de0:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfig.OffsetSignedSaturation = DISABLE;
 8000de2:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  sConfig.Channel = ADC_CHANNEL_0;
 8000de6:	962f      	str	r6, [sp, #188]	@ 0xbc
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000de8:	e9cd 9030 	strd	r9, r0, [sp, #192]	@ 0xc0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dec:	4620      	mov	r0, r4
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dee:	e9cd 8732 	strd	r8, r7, [sp, #200]	@ 0xc8
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000df2:	f006 ffc7 	bl	8007d84 <HAL_ADC_ConfigChannel>
 8000df6:	4605      	mov	r5, r0
 8000df8:	b108      	cbz	r0, 8000dfe <main+0x4fa>
 8000dfa:	b672      	cpsid	i
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <main+0x4f8>
  hadc3.Instance = ADC3;
 8000dfe:	4c4c      	ldr	r4, [pc, #304]	@ (8000f30 <main+0x62c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e00:	4601      	mov	r1, r0
 8000e02:	221c      	movs	r2, #28
 8000e04:	a82f      	add	r0, sp, #188	@ 0xbc
 8000e06:	f024 fd27 	bl	8025858 <memset>
  hadc3.Instance = ADC3;
 8000e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f34 <main+0x630>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e0c:	4620      	mov	r0, r4
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e0e:	82a5      	strh	r5, [r4, #20]
  hadc3.Init.NbrOfConversion = 1;
 8000e10:	61a6      	str	r6, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e12:	7725      	strb	r5, [r4, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e14:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e16:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000e1a:	63e6      	str	r6, [r4, #60]	@ 0x3c
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e1c:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e20:	e9c4 5703 	strd	r5, r7, [r4, #12]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e24:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e28:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e2c:	f007 fbd4 	bl	80085d8 <HAL_ADC_Init>
 8000e30:	b108      	cbz	r0, 8000e36 <main+0x532>
 8000e32:	b672      	cpsid	i
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <main+0x530>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e36:	4b40      	ldr	r3, [pc, #256]	@ (8000f38 <main+0x634>)
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e38:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e3a:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e3e:	e9cd 0831 	strd	r0, r8, [sp, #196]	@ 0xc4
  sConfig.Offset = 0;
 8000e42:	e9cd 7033 	strd	r7, r0, [sp, #204]	@ 0xcc
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e46:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e48:	e9cd 392f 	strd	r3, r9, [sp, #188]	@ 0xbc
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e4c:	f006 ff9a 	bl	8007d84 <HAL_ADC_ConfigChannel>
 8000e50:	4605      	mov	r5, r0
 8000e52:	b108      	cbz	r0, 8000e58 <main+0x554>
 8000e54:	b672      	cpsid	i
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <main+0x552>
  hadc1.Instance = ADC1;
 8000e58:	4c38      	ldr	r4, [pc, #224]	@ (8000f3c <main+0x638>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5a:	4601      	mov	r1, r0
  ADC_MultiModeTypeDef multimode = {0};
 8000e5c:	9024      	str	r0, [sp, #144]	@ 0x90
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	221c      	movs	r2, #28
  ADC_MultiModeTypeDef multimode = {0};
 8000e60:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e64:	a82f      	add	r0, sp, #188	@ 0xbc
 8000e66:	f024 fcf7 	bl	8025858 <memset>
  hadc1.Instance = ADC1;
 8000e6a:	4b35      	ldr	r3, [pc, #212]	@ (8000f40 <main+0x63c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e6c:	4620      	mov	r0, r4
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6e:	6127      	str	r7, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e70:	82a5      	strh	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 1;
 8000e72:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e74:	7725      	strb	r5, [r4, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e76:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e78:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000e7c:	63e6      	str	r6, [r4, #60]	@ 0x3c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e7e:	e9c4 3500 	strd	r3, r5, [r4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e82:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e86:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e8a:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e8e:	f007 fba3 	bl	80085d8 <HAL_ADC_Init>
 8000e92:	b108      	cbz	r0, 8000e98 <main+0x594>
 8000e94:	b672      	cpsid	i
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <main+0x592>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e98:	9022      	str	r0, [sp, #136]	@ 0x88
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e9a:	a922      	add	r1, sp, #136	@ 0x88
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f007 fcb5 	bl	800880c <HAL_ADCEx_MultiModeConfigChannel>
 8000ea2:	b108      	cbz	r0, 8000ea8 <main+0x5a4>
 8000ea4:	b672      	cpsid	i
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <main+0x5a2>
  sConfig.Channel = ADC_CHANNEL_1;
 8000ea8:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <main+0x640>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eaa:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfig.OffsetSignedSaturation = DISABLE;
 8000eac:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb0:	e9cd 0831 	strd	r0, r8, [sp, #196]	@ 0xc4
  sConfig.Offset = 0;
 8000eb4:	e9cd 7033 	strd	r7, r0, [sp, #204]	@ 0xcc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb8:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eba:	e9cd 392f 	strd	r3, r9, [sp, #188]	@ 0xbc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ebe:	f006 ff61 	bl	8007d84 <HAL_ADC_ConfigChannel>
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	b108      	cbz	r0, 8000eca <main+0x5c6>
 8000ec6:	b672      	cpsid	i
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <main+0x5c4>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eca:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ecc:	9024      	str	r0, [sp, #144]	@ 0x90
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ece:	2210      	movs	r2, #16
  htim4.Instance = TIM4;
 8000ed0:	4d1d      	ldr	r5, [pc, #116]	@ (8000f48 <main+0x644>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed2:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ed6:	a82f      	add	r0, sp, #188	@ 0xbc
 8000ed8:	f024 fcbe 	bl	8025858 <memset>
  htim4.Instance = TIM4;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <main+0x648>)
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000ede:	4628      	mov	r0, r5
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	60ac      	str	r4, [r5, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	61ac      	str	r4, [r5, #24]
  htim4.Init.Prescaler = 0;
 8000ee4:	e9c5 3400 	strd	r3, r4, [r5]
  htim4.Init.Period = 65535;
 8000ee8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000ef0:	f00c ff48 	bl	800dd84 <HAL_TIM_IC_Init>
 8000ef4:	b370      	cbz	r0, 8000f54 <main+0x650>
 8000ef6:	b672      	cpsid	i
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <main+0x5f4>
 8000efa:	bf00      	nop
 8000efc:	2400064c 	.word	0x2400064c
 8000f00:	24000474 	.word	0x24000474
 8000f04:	24000368 	.word	0x24000368
 8000f08:	08006f71 	.word	0x08006f71
 8000f0c:	24000378 	.word	0x24000378
 8000f10:	08002275 	.word	0x08002275
 8000f14:	080022ad 	.word	0x080022ad
 8000f18:	240006d0 	.word	0x240006d0
 8000f1c:	58024c00 	.word	0x58024c00
 8000f20:	240005f4 	.word	0x240005f4
 8000f24:	52003000 	.word	0x52003000
 8000f28:	24000758 	.word	0x24000758
 8000f2c:	40022100 	.word	0x40022100
 8000f30:	240006f4 	.word	0x240006f4
 8000f34:	58026000 	.word	0x58026000
 8000f38:	cb840000 	.word	0xcb840000
 8000f3c:	240007bc 	.word	0x240007bc
 8000f40:	40022000 	.word	0x40022000
 8000f44:	04300002 	.word	0x04300002
 8000f48:	240003dc 	.word	0x240003dc
 8000f4c:	40000800 	.word	0x40000800
 8000f50:	50001000 	.word	0x50001000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	9022      	str	r0, [sp, #136]	@ 0x88
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f56:	a922      	add	r1, sp, #136	@ 0x88
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	9024      	str	r0, [sp, #144]	@ 0x90
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	f00d f810 	bl	800df80 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	b108      	cbz	r0, 8000f66 <main+0x662>
 8000f62:	b672      	cpsid	i
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <main+0x660>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f66:	e9cd 062f 	strd	r0, r6, [sp, #188]	@ 0xbc
  sConfigIC.ICFilter = 0;
 8000f6a:	e9cd 0031 	strd	r0, r0, [sp, #196]	@ 0xc4
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f6e:	463a      	mov	r2, r7
 8000f70:	a92f      	add	r1, sp, #188	@ 0xbc
 8000f72:	4628      	mov	r0, r5
 8000f74:	f00c ff70 	bl	800de58 <HAL_TIM_IC_ConfigChannel>
 8000f78:	b108      	cbz	r0, 8000f7e <main+0x67a>
 8000f7a:	b672      	cpsid	i
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <main+0x678>
  MX_TouchGFX_Init();
 8000f7e:	f000 fea5 	bl	8001ccc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000f82:	f000 fea2 	bl	8001cca <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000f86:	f00d f8ef 	bl	800e168 <osKernelInitialize>
  gearStateQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &gearStateQueue_attributes);
 8000f8a:	4ac3      	ldr	r2, [pc, #780]	@ (8001298 <main+0x994>)
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	2010      	movs	r0, #16
 8000f90:	f00d fa86 	bl	800e4a0 <osMessageQueueNew>
 8000f94:	4bc1      	ldr	r3, [pc, #772]	@ (800129c <main+0x998>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000f96:	4ac2      	ldr	r2, [pc, #776]	@ (80012a0 <main+0x99c>)
 8000f98:	2100      	movs	r1, #0
  gearStateQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &gearStateQueue_attributes);
 8000f9a:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000f9c:	48c1      	ldr	r0, [pc, #772]	@ (80012a4 <main+0x9a0>)
 8000f9e:	f00d f916 	bl	800e1ce <osThreadNew>
 8000fa2:	4bc1      	ldr	r3, [pc, #772]	@ (80012a8 <main+0x9a4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000fa4:	4ac1      	ldr	r2, [pc, #772]	@ (80012ac <main+0x9a8>)
 8000fa6:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fa8:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000faa:	48c1      	ldr	r0, [pc, #772]	@ (80012b0 <main+0x9ac>)
 8000fac:	f00d f90f 	bl	800e1ce <osThreadNew>
 8000fb0:	4bc0      	ldr	r3, [pc, #768]	@ (80012b4 <main+0x9b0>)
  Gear_detectHandle = osThreadNew(Start_Gear_detect, NULL, &Gear_detect_attributes);
 8000fb2:	4ac1      	ldr	r2, [pc, #772]	@ (80012b8 <main+0x9b4>)
 8000fb4:	2100      	movs	r1, #0
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000fb6:	6018      	str	r0, [r3, #0]
  Gear_detectHandle = osThreadNew(Start_Gear_detect, NULL, &Gear_detect_attributes);
 8000fb8:	48c0      	ldr	r0, [pc, #768]	@ (80012bc <main+0x9b8>)
 8000fba:	f00d f908 	bl	800e1ce <osThreadNew>
 8000fbe:	4bc0      	ldr	r3, [pc, #768]	@ (80012c0 <main+0x9bc>)
 8000fc0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000fc2:	f00d f8e3 	bl	800e18c <osKernelStart>
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <main+0x6c2>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	2214      	movs	r2, #20
 8000fca:	2100      	movs	r1, #0
 8000fcc:	a82f      	add	r0, sp, #188	@ 0xbc
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fce:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f024 fc42 	bl	8025858 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fd4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000fe2:	48b8      	ldr	r0, [pc, #736]	@ (80012c4 <main+0x9c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe4:	f44f 1988 	mov.w	r9, #1114112	@ 0x110000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2600      	movs	r6, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fea:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2703      	movs	r7, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ff0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ff4:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ff8:	f44f 7b80 	mov.w	fp, #256	@ 0x100
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000ffc:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001004:	9305      	str	r3, [sp, #20]
 8001006:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001014:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	9306      	str	r3, [sp, #24]
 800101e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001020:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001024:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001028:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800102c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001034:	9307      	str	r3, [sp, #28]
 8001036:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001038:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800103c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001040:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001044:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800104c:	9308      	str	r3, [sp, #32]
 800104e:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001050:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001054:	f043 0310 	orr.w	r3, r3, #16
 8001058:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800105c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	9309      	str	r3, [sp, #36]	@ 0x24
 8001066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001068:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800106c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001070:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001074:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800107c:	930a      	str	r3, [sp, #40]	@ 0x28
 800107e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001080:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800108c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001098:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800109c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010a4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80010ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80010c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010d4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80010de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010ec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80010f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80010f8:	f008 fbe0 	bl	80098bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, led_1_Pin|led_2_Pin|led_3_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001102:	4871      	ldr	r0, [pc, #452]	@ (80012c8 <main+0x9c4>)
 8001104:	f008 fbda 	bl	80098bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2108      	movs	r1, #8
 800110c:	486f      	ldr	r0, [pc, #444]	@ (80012cc <main+0x9c8>)
 800110e:	f008 fbd5 	bl	80098bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001118:	486d      	ldr	r0, [pc, #436]	@ (80012d0 <main+0x9cc>)
 800111a:	f008 fbcf 	bl	80098bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111e:	237c      	movs	r3, #124	@ 0x7c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001120:	a92f      	add	r1, sp, #188	@ 0xbc
 8001122:	486c      	ldr	r0, [pc, #432]	@ (80012d4 <main+0x9d0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001124:	9531      	str	r5, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001126:	e9cd 392f 	strd	r3, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800112a:	f008 fa3d 	bl	80095a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 800112e:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001132:	a92f      	add	r1, sp, #188	@ 0xbc
 8001134:	4863      	ldr	r0, [pc, #396]	@ (80012c4 <main+0x9c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	e9cd 352f 	strd	r3, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	e9cd 6731 	strd	r6, r7, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800113e:	f008 fa33 	bl	80095a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = button_Pin;
 8001142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001146:	a92f      	add	r1, sp, #188	@ 0xbc
 8001148:	4863      	ldr	r0, [pc, #396]	@ (80012d8 <main+0x9d4>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114a:	f8cd a0c4 	str.w	sl, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114e:	e9cd 392f 	strd	r3, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001152:	f008 fa29 	bl	80095a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	a92f      	add	r1, sp, #188	@ 0xbc
 8001158:	4860      	ldr	r0, [pc, #384]	@ (80012dc <main+0x9d8>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800115a:	9633      	str	r6, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	e9cd 6631 	strd	r6, r6, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	e9cd ba2f 	strd	fp, sl, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f008 fa20 	bl	80095a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = led_1_Pin|led_2_Pin|led_3_Pin;
 8001168:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800116c:	a92f      	add	r1, sp, #188	@ 0xbc
 800116e:	4856      	ldr	r0, [pc, #344]	@ (80012c8 <main+0x9c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	e9cd 352f 	strd	r3, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	e9cd 5631 	strd	r5, r6, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001178:	f008 fa16 	bl	80095a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800117c:	a92f      	add	r1, sp, #188	@ 0xbc
 800117e:	4853      	ldr	r0, [pc, #332]	@ (80012cc <main+0x9c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	e9cd 852f 	strd	r8, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	e9cd 5731 	strd	r5, r7, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001188:	f008 fa0e 	bl	80095a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GEAR_UP_GPIO_Port, &GPIO_InitStruct);
 800118c:	a92f      	add	r1, sp, #188	@ 0xbc
 800118e:	4851      	ldr	r0, [pc, #324]	@ (80012d4 <main+0x9d0>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001190:	f8cd a0c4 	str.w	sl, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	e9cd a92f 	strd	sl, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GEAR_UP_GPIO_Port, &GPIO_InitStruct);
 8001198:	f008 fa06 	bl	80095a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800119c:	a92f      	add	r1, sp, #188	@ 0xbc
 800119e:	484c      	ldr	r0, [pc, #304]	@ (80012d0 <main+0x9cc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	e9cd 6731 	strd	r6, r7, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	e9cd b52f 	strd	fp, r5, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f008 f9fe 	bl	80095a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLUTCH_DETECT_Pin;
 80011ac:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(CLUTCH_DETECT_GPIO_Port, &GPIO_InitStruct);
 80011ae:	a92f      	add	r1, sp, #188	@ 0xbc
 80011b0:	4844      	ldr	r0, [pc, #272]	@ (80012c4 <main+0x9c0>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011b2:	f8cd a0c4 	str.w	sl, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b6:	e9cd 392f 	strd	r3, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(CLUTCH_DETECT_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f008 f9f5 	bl	80095a8 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011be:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011c2:	4632      	mov	r2, r6
 80011c4:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011c6:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011c8:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80011ca:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011ce:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80011d2:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80011d6:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011d8:	402b      	ands	r3, r5
 80011da:	9304      	str	r3, [sp, #16]
 80011dc:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011de:	f007 fb8d 	bl	80088fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80011e2:	207a      	movs	r0, #122	@ 0x7a
 80011e4:	f007 fbbc 	bl	8008960 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80011e8:	4a3d      	ldr	r2, [pc, #244]	@ (80012e0 <main+0x9dc>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011ea:	483e      	ldr	r0, [pc, #248]	@ (80012e4 <main+0x9e0>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011ec:	a92f      	add	r1, sp, #188	@ 0xbc
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80011ee:	6813      	ldr	r3, [r2, #0]
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80011f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011fa:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <main+0x9e4>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011fc:	61c6      	str	r6, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80011fe:	6286      	str	r6, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001200:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8001202:	f8cd a0bc 	str.w	sl, [sp, #188]	@ 0xbc
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001206:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800120a:	2320      	movs	r3, #32
 800120c:	e9c0 9303 	strd	r9, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001210:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001214:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001218:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800121c:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001220:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8001222:	e9cd aa34 	strd	sl, sl, [sp, #208]	@ 0xd0
  SdramTiming.SelfRefreshTime = 4;
 8001226:	e9cd 3930 	strd	r3, r9, [sp, #192]	@ 0xc0
  SdramTiming.WriteRecoveryTime = 3;
 800122a:	e9cd 3732 	strd	r3, r7, [sp, #200]	@ 0xc8
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800122e:	f00c fb85 	bl	800d93c <HAL_SDRAM_Init>
 8001232:	4606      	mov	r6, r0
 8001234:	2800      	cmp	r0, #0
 8001236:	f47f ac0f 	bne.w	8000a58 <main+0x154>
  BSP_SDRAM_DeInit(0);
 800123a:	f006 f8bf 	bl	80073bc <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800123e:	4630      	mov	r0, r6
 8001240:	f006 f90a 	bl	8007458 <BSP_SDRAM_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2800      	cmp	r0, #0
 8001248:	f43f ac08 	beq.w	8000a5c <main+0x158>
 800124c:	b672      	cpsid	i
  while (1)
 800124e:	e7fe      	b.n	800124e <main+0x94a>
  HAL_Init();
 8001250:	f006 fb5e 	bl	8007910 <HAL_Init>
  SystemClock_Config();
 8001254:	f7ff fad6 	bl	8000804 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001258:	f7ff fb34 	bl	80008c4 <PeriphCommonClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 800125c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8001260:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8001262:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001266:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800126a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800126e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001272:	9303      	str	r3, [sp, #12]
 8001274:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8001276:	f008 fb2f 	bl	80098d8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 800127a:	4621      	mov	r1, r4
 800127c:	4620      	mov	r0, r4
 800127e:	f008 fb39 	bl	80098f4 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001282:	4c1a      	ldr	r4, [pc, #104]	@ (80012ec <main+0x9e8>)
timeout = 0xFFFF;
 8001284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001288:	6822      	ldr	r2, [r4, #0]
 800128a:	0417      	lsls	r7, r2, #16
 800128c:	f53f ae9c 	bmi.w	8000fc8 <main+0x6c4>
 8001290:	3b01      	subs	r3, #1
 8001292:	d2f9      	bcs.n	8001288 <main+0x984>
 8001294:	b672      	cpsid	i
  while (1)
 8001296:	e7fe      	b.n	8001296 <main+0x992>
 8001298:	08026414 	.word	0x08026414
 800129c:	24000398 	.word	0x24000398
 80012a0:	08026474 	.word	0x08026474
 80012a4:	08001cdb 	.word	0x08001cdb
 80012a8:	240003a4 	.word	0x240003a4
 80012ac:	08026450 	.word	0x08026450
 80012b0:	08003e19 	.word	0x08003e19
 80012b4:	240003a0 	.word	0x240003a0
 80012b8:	0802642c 	.word	0x0802642c
 80012bc:	08000705 	.word	0x08000705
 80012c0:	2400039c 	.word	0x2400039c
 80012c4:	58022400 	.word	0x58022400
 80012c8:	58022000 	.word	0x58022000
 80012cc:	58021800 	.word	0x58021800
 80012d0:	58021400 	.word	0x58021400
 80012d4:	58022800 	.word	0x58022800
 80012d8:	58020800 	.word	0x58020800
 80012dc:	58020000 	.word	0x58020000
 80012e0:	52004000 	.word	0x52004000
 80012e4:	240003a8 	.word	0x240003a8
 80012e8:	52004140 	.word	0x52004140
 80012ec:	58024400 	.word	0x58024400

080012f0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 80012f0:	6802      	ldr	r2, [r0, #0]
 80012f2:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d101      	bne.n	80012fc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80012f8:	f006 bb38 	b.w	800796c <HAL_IncTick>
}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40001000 	.word	0x40001000

08001304 <Error_Handler>:
 8001304:	b672      	cpsid	i
  while (1)
 8001306:	e7fe      	b.n	8001306 <Error_Handler+0x2>

08001308 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <HAL_MspInit+0x2c>)
{
 800130a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130c:	210f      	movs	r1, #15
 800130e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001316:	f042 0202 	orr.w	r2, r2, #2
 800131a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800131e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800132e:	f007 bae5 	b.w	80088fc <HAL_NVIC_SetPriority>
 8001332:	bf00      	nop
 8001334:	58024400 	.word	0x58024400

08001338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001338:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 800133a:	6803      	ldr	r3, [r0, #0]
 800133c:	4a38      	ldr	r2, [pc, #224]	@ (8001420 <HAL_ADC_MspInit+0xe8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d134      	bne.n	80013ac <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001342:	4a38      	ldr	r2, [pc, #224]	@ (8001424 <HAL_ADC_MspInit+0xec>)
 8001344:	6813      	ldr	r3, [r2, #0]
 8001346:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001348:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800134a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800134c:	d10c      	bne.n	8001368 <HAL_ADC_MspInit+0x30>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800134e:	4b36      	ldr	r3, [pc, #216]	@ (8001428 <HAL_ADC_MspInit+0xf0>)
 8001350:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001354:	f042 0220 	orr.w	r2, r2, #32
 8001358:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800135c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001360:	f003 0320 	and.w	r3, r3, #32
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	9b01      	ldr	r3, [sp, #4]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	4b2f      	ldr	r3, [pc, #188]	@ (8001428 <HAL_ADC_MspInit+0xf0>)
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800136a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001372:	4608      	mov	r0, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	9b02      	ldr	r3, [sp, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001388:	f006 fb1a 	bl	80079c0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800138c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**ADC2 GPIO Configuration
    PA0_C     ------> ADC2_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001390:	4608      	mov	r0, r1
 8001392:	f006 fb15 	bl	80079c0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2105      	movs	r1, #5
 800139a:	2012      	movs	r0, #18
 800139c:	f007 faae 	bl	80088fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013a0:	2012      	movs	r0, #18
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80013a2:	b007      	add	sp, #28
 80013a4:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013a8:	f007 bada 	b.w	8008960 <HAL_NVIC_EnableIRQ>
  else if(hadc->Instance==ADC2)
 80013ac:	4a1f      	ldr	r2, [pc, #124]	@ (800142c <HAL_ADC_MspInit+0xf4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d122      	bne.n	80013f8 <HAL_ADC_MspInit+0xc0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001424 <HAL_ADC_MspInit+0xec>)
 80013b4:	6813      	ldr	r3, [r2, #0]
 80013b6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013b8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013bc:	d10c      	bne.n	80013d8 <HAL_ADC_MspInit+0xa0>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013be:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <HAL_ADC_MspInit+0xf0>)
 80013c0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80013c4:	f042 0220 	orr.w	r2, r2, #32
 80013c8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80013cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	9303      	str	r3, [sp, #12]
 80013d6:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <HAL_ADC_MspInit+0xf0>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80013da:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013e2:	f042 0201 	orr.w	r2, r2, #1
 80013e6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	9304      	str	r3, [sp, #16]
 80013f4:	9b04      	ldr	r3, [sp, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80013f6:	e7cb      	b.n	8001390 <HAL_ADC_MspInit+0x58>
  else if(hadc->Instance==ADC3)
 80013f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001430 <HAL_ADC_MspInit+0xf8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10c      	bne.n	8001418 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_ADC_MspInit+0xf0>)
 8001400:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001404:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001408:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001410:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001414:	9305      	str	r3, [sp, #20]
 8001416:	9b05      	ldr	r3, [sp, #20]
}
 8001418:	b007      	add	sp, #28
 800141a:	f85d fb04 	ldr.w	pc, [sp], #4
 800141e:	bf00      	nop
 8001420:	40022000 	.word	0x40022000
 8001424:	24000828 	.word	0x24000828
 8001428:	58024400 	.word	0x58024400
 800142c:	40022100 	.word	0x40022100
 8001430:	58026000 	.word	0x58026000

08001434 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001434:	6802      	ldr	r2, [r0, #0]
{
 8001436:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <HAL_CRC_MspInit+0x2c>)
 800143a:	429a      	cmp	r2, r3
 800143c:	d10d      	bne.n	800145a <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800143e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001442:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001446:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800144a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800145a:	b002      	add	sp, #8
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	58024c00 	.word	0x58024c00

08001464 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <HAL_DMA2D_MspInit+0x40>)
{
 8001466:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001468:	6802      	ldr	r2, [r0, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d117      	bne.n	800149e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001470:	2107      	movs	r1, #7
 8001472:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001474:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001478:	f042 0210 	orr.w	r2, r2, #16
 800147c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001480:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001482:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 800148e:	f007 fa35 	bl	80088fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001492:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001494:	b003      	add	sp, #12
 8001496:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800149a:	f007 ba61 	b.w	8008960 <HAL_NVIC_EnableIRQ>
}
 800149e:	b003      	add	sp, #12
 80014a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80014a4:	52001000 	.word	0x52001000
 80014a8:	58024400 	.word	0x58024400

080014ac <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80014ac:	b510      	push	{r4, lr}
 80014ae:	b0ba      	sub	sp, #232	@ 0xe8
 80014b0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	2214      	movs	r2, #20
 80014b4:	2100      	movs	r1, #0
 80014b6:	a803      	add	r0, sp, #12
 80014b8:	f024 f9ce 	bl	8025858 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014bc:	22c8      	movs	r2, #200	@ 0xc8
 80014be:	2100      	movs	r1, #0
 80014c0:	a808      	add	r0, sp, #32
 80014c2:	f024 f9c9 	bl	8025858 <memset>
  if(hdsi->Instance==DSI)
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014cc:	d138      	bne.n	8001540 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80014ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014d2:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d4:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80014d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014da:	f00b f995 	bl	800c808 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	b108      	cbz	r0, 80014e4 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 80014e0:	f7ff ff10 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80014e4:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80014e8:	a903      	add	r1, sp, #12
 80014ea:	4817      	ldr	r0, [pc, #92]	@ (8001548 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80014ec:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80014f0:	f042 0210 	orr.w	r2, r2, #16
 80014f4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80014f8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80014fc:	f002 0210 	and.w	r2, r2, #16
 8001500:	9201      	str	r2, [sp, #4]
 8001502:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001504:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800150c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001524:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800152a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800152c:	f008 f83c 	bl	80095a8 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001530:	207b      	movs	r0, #123	@ 0x7b
 8001532:	4622      	mov	r2, r4
 8001534:	2107      	movs	r1, #7
 8001536:	f007 f9e1 	bl	80088fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800153a:	207b      	movs	r0, #123	@ 0x7b
 800153c:	f007 fa10 	bl	8008960 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001540:	b03a      	add	sp, #232	@ 0xe8
 8001542:	bd10      	pop	{r4, pc}
 8001544:	58024400 	.word	0x58024400
 8001548:	58022400 	.word	0x58022400

0800154c <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 800154c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 800154e:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <HAL_JPEG_MspInit+0xf4>)
{
 8001550:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001552:	6802      	ldr	r2, [r0, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d170      	bne.n	800163a <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001558:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800155a:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 800155c:	4c3a      	ldr	r4, [pc, #232]	@ (8001648 <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800155e:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001562:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001566:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001654 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800156a:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 800156c:	f042 0220 	orr.w	r2, r2, #32
 8001570:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001574:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001576:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001582:	2311      	movs	r3, #17
 8001584:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001588:	2300      	movs	r3, #0
 800158a:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800158e:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001592:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001594:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001596:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800159a:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 800159e:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80015a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80015a6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80015aa:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80015ae:	f009 fe3e 	bl	800b22e <HAL_MDMA_Init>
 80015b2:	b108      	cbz	r0, 80015b8 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80015b4:	f7ff fea6 	bl	8001304 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80015b8:	2200      	movs	r2, #0
 80015ba:	4823      	ldr	r0, [pc, #140]	@ (8001648 <HAL_JPEG_MspInit+0xfc>)
 80015bc:	4611      	mov	r1, r2
 80015be:	f009 fec4 	bl	800b34a <HAL_MDMA_ConfigPostRequestMask>
 80015c2:	b108      	cbz	r0, 80015c8 <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 80015c4:	f7ff fe9e 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80015c8:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80015ca:	2313      	movs	r3, #19
 80015cc:	4a1f      	ldr	r2, [pc, #124]	@ (800164c <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80015ce:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80015d0:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80015d2:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 80015d6:	4c1e      	ldr	r4, [pc, #120]	@ (8001650 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80015d8:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 80015dc:	2300      	movs	r3, #0
 80015de:	22c0      	movs	r2, #192	@ 0xc0
 80015e0:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80015e4:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80015e6:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80015e8:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80015ec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 80015f0:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80015f4:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 80015f8:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80015fc:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80015fe:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001602:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001606:	f009 fe12 	bl	800b22e <HAL_MDMA_Init>
 800160a:	b108      	cbz	r0, 8001610 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 800160c:	f7ff fe7a 	bl	8001304 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001610:	2200      	movs	r2, #0
 8001612:	480f      	ldr	r0, [pc, #60]	@ (8001650 <HAL_JPEG_MspInit+0x104>)
 8001614:	4611      	mov	r1, r2
 8001616:	f009 fe98 	bl	800b34a <HAL_MDMA_ConfigPostRequestMask>
 800161a:	b108      	cbz	r0, 8001620 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 800161c:	f7ff fe72 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001620:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2105      	movs	r1, #5
 8001626:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001628:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800162a:	f007 f967 	bl	80088fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800162e:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001630:	b003      	add	sp, #12
 8001632:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001636:	f007 b993 	b.w	8008960 <HAL_NVIC_EnableIRQ>
}
 800163a:	b003      	add	sp, #12
 800163c:	bd30      	pop	{r4, r5, pc}
 800163e:	bf00      	nop
 8001640:	52003000 	.word	0x52003000
 8001644:	58024400 	.word	0x58024400
 8001648:	24000588 	.word	0x24000588
 800164c:	520001c0 	.word	0x520001c0
 8001650:	2400051c 	.word	0x2400051c
 8001654:	52000200 	.word	0x52000200

08001658 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001658:	b510      	push	{r4, lr}
 800165a:	b0b4      	sub	sp, #208	@ 0xd0
 800165c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165e:	22c8      	movs	r2, #200	@ 0xc8
 8001660:	2100      	movs	r1, #0
 8001662:	a802      	add	r0, sp, #8
 8001664:	f024 f8f8 	bl	8025858 <memset>
  if(hltdc->Instance==LTDC)
 8001668:	6822      	ldr	r2, [r4, #0]
 800166a:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <HAL_LTDC_MspInit+0x74>)
 800166c:	429a      	cmp	r2, r3
 800166e:	d12b      	bne.n	80016c8 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001670:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001674:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 1;
    PeriphClkInitStruct.PLL3.PLL3N = 16;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 5;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001676:	2105      	movs	r1, #5
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001678:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800167a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 16;
 800167e:	2310      	movs	r3, #16
 8001680:	2201      	movs	r2, #1
 8001682:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001686:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001688:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800168c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001690:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001694:	f00b f8b8 	bl	800c808 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	b108      	cbz	r0, 800169e <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 800169a:	f7ff fe33 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800169e:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80016a0:	2058      	movs	r0, #88	@ 0x58
 80016a2:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016a4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80016a8:	f042 0208 	orr.w	r2, r2, #8
 80016ac:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80016b0:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80016be:	f007 f91d 	bl	80088fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80016c2:	2058      	movs	r0, #88	@ 0x58
 80016c4:	f007 f94c 	bl	8008960 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80016c8:	b034      	add	sp, #208	@ 0xd0
 80016ca:	bd10      	pop	{r4, pc}
 80016cc:	50001000 	.word	0x50001000
 80016d0:	58024400 	.word	0x58024400

080016d4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80016d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d6:	b0bf      	sub	sp, #252	@ 0xfc
 80016d8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	2214      	movs	r2, #20
 80016dc:	2100      	movs	r1, #0
 80016de:	a807      	add	r0, sp, #28
 80016e0:	f024 f8ba 	bl	8025858 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e4:	22c8      	movs	r2, #200	@ 0xc8
 80016e6:	2100      	movs	r1, #0
 80016e8:	a80c      	add	r0, sp, #48	@ 0x30
 80016ea:	f024 f8b5 	bl	8025858 <memset>
  if(hqspi->Instance==QUADSPI)
 80016ee:	6822      	ldr	r2, [r4, #0]
 80016f0:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <HAL_QSPI_MspInit+0x16c>)
 80016f2:	429a      	cmp	r2, r3
 80016f4:	f040 80a1 	bne.w	800183a <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80016f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016fc:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fe:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001700:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001704:	f00b f880 	bl	800c808 <HAL_RCCEx_PeriphCLKConfig>
 8001708:	b108      	cbz	r0, 800170e <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800170a:	f7ff fdfb 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800170e:	4b4d      	ldr	r3, [pc, #308]	@ (8001844 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001714:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001716:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800171a:	a907      	add	r1, sp, #28
 800171c:	484a      	ldr	r0, [pc, #296]	@ (8001848 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800171e:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001720:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001724:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001728:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800172c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001730:	9201      	str	r2, [sp, #4]
 8001732:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001734:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800173c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001740:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001744:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001748:	9202      	str	r2, [sp, #8]
 800174a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800174c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001758:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800175c:	f002 0220 	and.w	r2, r2, #32
 8001760:	9203      	str	r2, [sp, #12]
 8001762:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001764:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001768:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800176c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001770:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001774:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001778:	9204      	str	r2, [sp, #16]
 800177a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001780:	f042 0202 	orr.w	r2, r2, #2
 8001784:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001788:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800178c:	f002 0202 	and.w	r2, r2, #2
 8001790:	9205      	str	r2, [sp, #20]
 8001792:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001794:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001798:	f042 0208 	orr.w	r2, r2, #8
 800179c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80017a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	9306      	str	r3, [sp, #24]
 80017aa:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80017b0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017b8:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ba:	f007 fef5 	bl	80095a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017be:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c0:	a907      	add	r1, sp, #28
 80017c2:	4821      	ldr	r0, [pc, #132]	@ (8001848 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017c4:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ce:	f007 feeb 	bl	80095a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d2:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d4:	a907      	add	r1, sp, #28
 80017d6:	481d      	ldr	r0, [pc, #116]	@ (800184c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017d8:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e2:	f007 fee1 	bl	80095a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ea:	a907      	add	r1, sp, #28
 80017ec:	4817      	ldr	r0, [pc, #92]	@ (800184c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017ee:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f8:	f007 fed6 	bl	80095a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017fc:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017fe:	a907      	add	r1, sp, #28
 8001800:	4813      	ldr	r0, [pc, #76]	@ (8001850 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001802:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800180c:	f007 fecc 	bl	80095a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001810:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	a907      	add	r1, sp, #28
 8001814:	480f      	ldr	r0, [pc, #60]	@ (8001854 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001816:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f007 fec2 	bl	80095a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001824:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001828:	a907      	add	r1, sp, #28
 800182a:	480b      	ldr	r0, [pc, #44]	@ (8001858 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800182c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001836:	f007 feb7 	bl	80095a8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800183a:	b03f      	add	sp, #252	@ 0xfc
 800183c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800183e:	bf00      	nop
 8001840:	52005000 	.word	0x52005000
 8001844:	58024400 	.word	0x58024400
 8001848:	58021800 	.word	0x58021800
 800184c:	58021400 	.word	0x58021400
 8001850:	58021c00 	.word	0x58021c00
 8001854:	58020400 	.word	0x58020400
 8001858:	58020c00 	.word	0x58020c00

0800185c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800185c:	b510      	push	{r4, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	2214      	movs	r2, #20
 8001864:	2100      	movs	r1, #0
 8001866:	a803      	add	r0, sp, #12
 8001868:	f023 fff6 	bl	8025858 <memset>
  if(htim_ic->Instance==TIM4)
 800186c:	6822      	ldr	r2, [r4, #0]
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_TIM_IC_MspInit+0x74>)
 8001870:	429a      	cmp	r2, r3
 8001872:	d12a      	bne.n	80018ca <HAL_TIM_IC_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <HAL_TIM_IC_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001876:	a903      	add	r1, sp, #12
 8001878:	4817      	ldr	r0, [pc, #92]	@ (80018d8 <HAL_TIM_IC_MspInit+0x7c>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 800187a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800187e:	f042 0204 	orr.w	r2, r2, #4
 8001882:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001886:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800188a:	f002 0204 	and.w	r2, r2, #4
 800188e:	9201      	str	r2, [sp, #4]
 8001890:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001892:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001896:	f042 0208 	orr.w	r2, r2, #8
 800189a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b6:	f007 fe77 	bl	80095a8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80018ba:	201e      	movs	r0, #30
 80018bc:	2200      	movs	r2, #0
 80018be:	2105      	movs	r1, #5
 80018c0:	f007 f81c 	bl	80088fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018c4:	201e      	movs	r0, #30
 80018c6:	f007 f84b 	bl	8008960 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80018ca:	b008      	add	sp, #32
 80018cc:	bd10      	pop	{r4, pc}
 80018ce:	bf00      	nop
 80018d0:	40000800 	.word	0x40000800
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58020c00 	.word	0x58020c00

080018dc <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80018dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018de:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018e0:	2100      	movs	r1, #0
 80018e2:	2214      	movs	r2, #20
 80018e4:	a801      	add	r0, sp, #4
 80018e6:	f023 ffb7 	bl	8025858 <memset>
  if (FMC_Initialized) {
 80018ea:	4b3f      	ldr	r3, [pc, #252]	@ (80019e8 <HAL_SDRAM_MspInit+0x10c>)
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	2900      	cmp	r1, #0
 80018f0:	d178      	bne.n	80019e4 <HAL_SDRAM_MspInit+0x108>
  FMC_Initialized = 1;
 80018f2:	2401      	movs	r4, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f4:	22c0      	movs	r2, #192	@ 0xc0
 80018f6:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80018f8:	601c      	str	r4, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018fa:	f023 ffad 	bl	8025858 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80018fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001902:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001904:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL;
 8001906:	9418      	str	r4, [sp, #96]	@ 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001908:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800190c:	f00a ff7c 	bl	800c808 <HAL_RCCEx_PeriphCLKConfig>
 8001910:	b108      	cbz	r0, 8001916 <HAL_SDRAM_MspInit+0x3a>
      Error_Handler();
 8001912:	f7ff fcf7 	bl	8001304 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001916:	4b35      	ldr	r3, [pc, #212]	@ (80019ec <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2600      	movs	r6, #0
 800191c:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800191e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001922:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001924:	a901      	add	r1, sp, #4
 8001926:	4832      	ldr	r0, [pc, #200]	@ (80019f0 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001928:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800192c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001930:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001934:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001936:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800194a:	f007 fe2d 	bl	80095a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800194e:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	a901      	add	r1, sp, #4
 8001952:	4828      	ldr	r0, [pc, #160]	@ (80019f4 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001954:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f007 fe23 	bl	80095a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001962:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001966:	a901      	add	r1, sp, #4
 8001968:	4823      	ldr	r0, [pc, #140]	@ (80019f8 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800196a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001974:	f007 fe18 	bl	80095a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001978:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800197c:	a901      	add	r1, sp, #4
 800197e:	481f      	ldr	r0, [pc, #124]	@ (80019fc <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001980:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800198a:	f007 fe0d 	bl	80095a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800198e:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001992:	a901      	add	r1, sp, #4
 8001994:	481a      	ldr	r0, [pc, #104]	@ (8001a00 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001996:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a0:	f007 fe02 	bl	80095a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80019a4:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a8:	a901      	add	r1, sp, #4
 80019aa:	4816      	ldr	r0, [pc, #88]	@ (8001a04 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ac:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b6:	f007 fdf7 	bl	80095a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80019ba:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019be:	a901      	add	r1, sp, #4
 80019c0:	4811      	ldr	r0, [pc, #68]	@ (8001a08 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019c2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019cc:	f007 fdec 	bl	80095a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019d0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d2:	a901      	add	r1, sp, #4
 80019d4:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e0:	f007 fde2 	bl	80095a8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80019e4:	b039      	add	sp, #228	@ 0xe4
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e8:	24000824 	.word	0x24000824
 80019ec:	58024400 	.word	0x58024400
 80019f0:	58022000 	.word	0x58022000
 80019f4:	58020400 	.word	0x58020400
 80019f8:	58021000 	.word	0x58021000
 80019fc:	58021c00 	.word	0x58021c00
 8001a00:	58021800 	.word	0x58021800
 8001a04:	58020c00 	.word	0x58020c00
 8001a08:	58021400 	.word	0x58021400
 8001a0c:	58020800 	.word	0x58020800

08001a10 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001a10:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <HAL_SDRAM_MspDeInit+0x6c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001a14:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 8001a16:	bb82      	cbnz	r2, 8001a7a <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001a18:	4a19      	ldr	r2, [pc, #100]	@ (8001a80 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 8001a1a:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001a1c:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001a20:	4818      	ldr	r0, [pc, #96]	@ (8001a84 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 8001a22:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001a24:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001a28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a2c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001a30:	f007 fea2 	bl	8009778 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 8001a34:	2160      	movs	r1, #96	@ 0x60
 8001a36:	4814      	ldr	r0, [pc, #80]	@ (8001a88 <HAL_SDRAM_MspDeInit+0x78>)
 8001a38:	f007 fe9e 	bl	8009778 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001a3c:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001a40:	4812      	ldr	r0, [pc, #72]	@ (8001a8c <HAL_SDRAM_MspDeInit+0x7c>)
 8001a42:	f007 fe99 	bl	8009778 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001a46:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001a4a:	4811      	ldr	r0, [pc, #68]	@ (8001a90 <HAL_SDRAM_MspDeInit+0x80>)
 8001a4c:	f007 fe94 	bl	8009778 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001a50:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001a54:	480f      	ldr	r0, [pc, #60]	@ (8001a94 <HAL_SDRAM_MspDeInit+0x84>)
 8001a56:	f007 fe8f 	bl	8009778 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001a5a:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001a5e:	480e      	ldr	r0, [pc, #56]	@ (8001a98 <HAL_SDRAM_MspDeInit+0x88>)
 8001a60:	f007 fe8a 	bl	8009778 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001a64:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001a68:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <HAL_SDRAM_MspDeInit+0x8c>)
 8001a6a:	f007 fe85 	bl	8009778 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001a6e:	4621      	mov	r1, r4
 8001a70:	480b      	ldr	r0, [pc, #44]	@ (8001aa0 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001a76:	f007 be7f 	b.w	8009778 <HAL_GPIO_DeInit>
}
 8001a7a:	bd10      	pop	{r4, pc}
 8001a7c:	24000820 	.word	0x24000820
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58022000 	.word	0x58022000
 8001a88:	58020400 	.word	0x58020400
 8001a8c:	58021000 	.word	0x58021000
 8001a90:	58021c00 	.word	0x58021c00
 8001a94:	58021800 	.word	0x58021800
 8001a98:	58020c00 	.word	0x58020c00
 8001a9c:	58021400 	.word	0x58021400
 8001aa0:	58020800 	.word	0x58020800

08001aa4 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa4:	280f      	cmp	r0, #15
{
 8001aa6:	b510      	push	{r4, lr}
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aac:	d902      	bls.n	8001ab4 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001aae:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001ab0:	b00a      	add	sp, #40	@ 0x28
 8001ab2:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001ab4:	4601      	mov	r1, r0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2036      	movs	r0, #54	@ 0x36
 8001aba:	f006 ff1f 	bl	80088fc <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001abe:	2036      	movs	r0, #54	@ 0x36
 8001ac0:	f006 ff4e 	bl	8008960 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ac6:	4669      	mov	r1, sp
 8001ac8:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 8001aca:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_InitTick+0x88>)
 8001ace:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001ad2:	f042 0210 	orr.w	r2, r2, #16
 8001ad6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ae6:	f00a fd75 	bl	800c5d4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001aea:	9b07      	ldr	r3, [sp, #28]
 8001aec:	b9c3      	cbnz	r3, 8001b20 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001aee:	f00a fd4d 	bl	800c58c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001af2:	4c0f      	ldr	r4, [pc, #60]	@ (8001b30 <HAL_InitTick+0x8c>)
 8001af4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_InitTick+0x90>)
 8001af6:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001af8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001afc:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_InitTick+0x94>)
 8001b00:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b04:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001b06:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b08:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b0a:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001b0c:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b10:	f00c f908 	bl	800dd24 <HAL_TIM_Base_Init>
 8001b14:	2800      	cmp	r0, #0
 8001b16:	d1ca      	bne.n	8001aae <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f00b ffb7 	bl	800da8c <HAL_TIM_Base_Start_IT>
 8001b1e:	e7c7      	b.n	8001ab0 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b20:	f00a fd34 	bl	800c58c <HAL_RCC_GetPCLK1Freq>
 8001b24:	0040      	lsls	r0, r0, #1
 8001b26:	e7e4      	b.n	8001af2 <HAL_InitTick+0x4e>
 8001b28:	24000074 	.word	0x24000074
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	2400082c 	.word	0x2400082c
 8001b34:	40001000 	.word	0x40001000
 8001b38:	000f4240 	.word	0x000f4240

08001b3c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <NMI_Handler>

08001b3e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler>

08001b40 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <MemManage_Handler>

08001b42 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <BusFault_Handler>

08001b44 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler>

08001b46 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b46:	4770      	bx	lr

08001b48 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b48:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <ADC_IRQHandler+0x14>)
{
 8001b4a:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 8001b4c:	f005 ffde 	bl	8007b0c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8001b56:	f005 bfd9 	b.w	8007b0c <HAL_ADC_IRQHandler>
 8001b5a:	bf00      	nop
 8001b5c:	240007bc 	.word	0x240007bc
 8001b60:	24000758 	.word	0x24000758

08001b64 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b64:	4801      	ldr	r0, [pc, #4]	@ (8001b6c <TIM4_IRQHandler+0x8>)
 8001b66:	f00b bfd3 	b.w	800db10 <HAL_TIM_IRQHandler>
 8001b6a:	bf00      	nop
 8001b6c:	240003dc 	.word	0x240003dc

08001b70 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b70:	4801      	ldr	r0, [pc, #4]	@ (8001b78 <TIM6_DAC_IRQHandler+0x8>)
 8001b72:	f00b bfcd 	b.w	800db10 <HAL_TIM_IRQHandler>
 8001b76:	bf00      	nop
 8001b78:	2400082c 	.word	0x2400082c

08001b7c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001b7c:	4801      	ldr	r0, [pc, #4]	@ (8001b84 <LTDC_IRQHandler+0x8>)
 8001b7e:	f009 ba61 	b.w	800b044 <HAL_LTDC_IRQHandler>
 8001b82:	bf00      	nop
 8001b84:	24000474 	.word	0x24000474

08001b88 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001b88:	4801      	ldr	r0, [pc, #4]	@ (8001b90 <DMA2D_IRQHandler+0x8>)
 8001b8a:	f006 bff3 	b.w	8008b74 <HAL_DMA2D_IRQHandler>
 8001b8e:	bf00      	nop
 8001b90:	24000668 	.word	0x24000668

08001b94 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001b94:	4801      	ldr	r0, [pc, #4]	@ (8001b9c <JPEG_IRQHandler+0x8>)
 8001b96:	f009 b923 	b.w	800ade0 <HAL_JPEG_IRQHandler>
 8001b9a:	bf00      	nop
 8001b9c:	240005f4 	.word	0x240005f4

08001ba0 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001ba0:	4804      	ldr	r0, [pc, #16]	@ (8001bb4 <MDMA_IRQHandler+0x14>)
{
 8001ba2:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001ba4:	f009 fc56 	bl	800b454 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001ba8:	4803      	ldr	r0, [pc, #12]	@ (8001bb8 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001bae:	f009 bc51 	b.w	800b454 <HAL_MDMA_IRQHandler>
 8001bb2:	bf00      	nop
 8001bb4:	2400051c 	.word	0x2400051c
 8001bb8:	24000588 	.word	0x24000588

08001bbc <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001bbc:	4801      	ldr	r0, [pc, #4]	@ (8001bc4 <DSI_IRQHandler+0x8>)
 8001bbe:	f007 b9dc 	b.w	8008f7a <HAL_DSI_IRQHandler>
 8001bc2:	bf00      	nop
 8001bc4:	2400064c 	.word	0x2400064c

08001bc8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001bc8:	2001      	movs	r0, #1
 8001bca:	4770      	bx	lr

08001bcc <_kill>:

int _kill(int pid, int sig)
{
 8001bcc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001bce:	f023 fef7 	bl	80259c0 <__errno>
 8001bd2:	2316      	movs	r3, #22
 8001bd4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bda:	bd08      	pop	{r3, pc}

08001bdc <_exit>:

void _exit (int status)
{
 8001bdc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001bde:	f023 feef 	bl	80259c0 <__errno>
 8001be2:	2316      	movs	r3, #22
 8001be4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001be6:	e7fe      	b.n	8001be6 <_exit+0xa>

08001be8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be8:	b570      	push	{r4, r5, r6, lr}
 8001bea:	460d      	mov	r5, r1
 8001bec:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	460e      	mov	r6, r1
 8001bf0:	1b73      	subs	r3, r6, r5
 8001bf2:	429c      	cmp	r4, r3
 8001bf4:	dc01      	bgt.n	8001bfa <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001bfa:	f3af 8000 	nop.w
 8001bfe:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	e7f5      	b.n	8001bf0 <_read+0x8>

08001c04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c04:	b570      	push	{r4, r5, r6, lr}
 8001c06:	460d      	mov	r5, r1
 8001c08:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	460e      	mov	r6, r1
 8001c0c:	1b73      	subs	r3, r6, r5
 8001c0e:	429c      	cmp	r4, r3
 8001c10:	dc01      	bgt.n	8001c16 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001c12:	4620      	mov	r0, r4
 8001c14:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001c16:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001c1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	e7f5      	b.n	8001c0c <_write+0x8>

08001c20 <_close>:

int _close(int file)
{
	return -1;
}
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	4770      	bx	lr

08001c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001c26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001c2a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001c2c:	604b      	str	r3, [r1, #4]
}
 8001c2e:	4770      	bx	lr

08001c30 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001c30:	2001      	movs	r0, #1
 8001c32:	4770      	bx	lr

08001c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001c34:	2000      	movs	r0, #0
 8001c36:	4770      	bx	lr

08001c38 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	4a0b      	ldr	r2, [pc, #44]	@ (8001c68 <_sbrk+0x30>)
{
 8001c3a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001c3c:	6811      	ldr	r1, [r2, #0]
{
 8001c3e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001c40:	b909      	cbnz	r1, 8001c46 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001c42:	490a      	ldr	r1, [pc, #40]	@ (8001c6c <_sbrk+0x34>)
 8001c44:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	6810      	ldr	r0, [r2, #0]
 8001c48:	4909      	ldr	r1, [pc, #36]	@ (8001c70 <_sbrk+0x38>)
 8001c4a:	4c0a      	ldr	r4, [pc, #40]	@ (8001c74 <_sbrk+0x3c>)
 8001c4c:	4403      	add	r3, r0
 8001c4e:	1b09      	subs	r1, r1, r4
 8001c50:	428b      	cmp	r3, r1
 8001c52:	d906      	bls.n	8001c62 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001c54:	f023 feb4 	bl	80259c0 <__errno>
 8001c58:	230c      	movs	r3, #12
 8001c5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001c60:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001c62:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001c64:	e7fc      	b.n	8001c60 <_sbrk+0x28>
 8001c66:	bf00      	nop
 8001c68:	24000878 	.word	0x24000878
 8001c6c:	24029b50 	.word	0x24029b50
 8001c70:	24080000 	.word	0x24080000
 8001c74:	00001000 	.word	0x00001000

08001c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c7c:	f005 fdd8 	bl	8007830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c82:	490d      	ldr	r1, [pc, #52]	@ (8001cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c98:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f023 fe91 	bl	80259cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001caa:	f7fe fe2b 	bl	8000904 <main>
  bx  lr
 8001cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001cb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cb8:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001cbc:	080dff44 	.word	0x080dff44
  ldr r2, =_sbss
 8001cc0:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001cc4:	24029b4c 	.word	0x24029b4c

08001cc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC3_IRQHandler>

08001cca <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001cca:	4770      	bx	lr

08001ccc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001ccc:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001cce:	f001 fd19 	bl	8003704 <touchgfx_components_init>
    touchgfx_init();
}
 8001cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001cd6:	f001 bc9b 	b.w	8003610 <touchgfx_init>

08001cda <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001cda:	f001 bd15 	b.w	8003708 <touchgfx_taskEntry>

08001cde <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001cde:	6840      	ldr	r0, [r0, #4]
    }
 8001ce0:	4770      	bx	lr

08001ce2 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001ce2:	6041      	str	r1, [r0, #4]
    }
 8001ce4:	4770      	bx	lr

08001ce6 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001ce6:	1a52      	subs	r2, r2, r1
 8001ce8:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001cec:	fbb2 f0f3 	udiv	r0, r2, r3
 8001cf0:	4770      	bx	lr
	...

08001cf4 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001cf4:	4b02      	ldr	r3, [pc, #8]	@ (8001d00 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001cf6:	68c0      	ldr	r0, [r0, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001cfc:	4358      	muls	r0, r3
 8001cfe:	4770      	bx	lr
 8001d00:	2400087c 	.word	0x2400087c

08001d04 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001d04:	4770      	bx	lr
	...

08001d08 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d84 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001d0c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001d10:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001d12:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d16:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d22:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001d30:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d32:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001d34:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d36:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001d3a:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001d40:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	2210      	movs	r2, #16
 8001d44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d48:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001d52:	4a0e      	ldr	r2, [pc, #56]	@ (8001d8c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	b983      	cbnz	r3, 8001d7a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001d58:	f00a fbf6 	bl	800c548 <HAL_RCC_GetHCLKFreq>
 8001d5c:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001d5e:	f00a fa2b 	bl	800c1b8 <HAL_RCC_GetSysClockFreq>
 8001d62:	fbb0 f0f4 	udiv	r0, r0, r4
 8001d66:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001d68:	4807      	ldr	r0, [pc, #28]	@ (8001d88 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001d6a:	f00b ffdb 	bl	800dd24 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001d6e:	4806      	ldr	r0, [pc, #24]	@ (8001d88 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001d70:	b003      	add	sp, #12
 8001d72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001d76:	f00b be4f 	b.w	800da18 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001d7a:	f00a fc07 	bl	800c58c <HAL_RCC_GetPCLK1Freq>
 8001d7e:	0044      	lsls	r4, r0, #1
 8001d80:	e7ed      	b.n	8001d5e <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001d82:	bf00      	nop
 8001d84:	58024400 	.word	0x58024400
 8001d88:	2400087c 	.word	0x2400087c
 8001d8c:	08028f3c 	.word	0x08028f3c

08001d90 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001d90:	b510      	push	{r4, lr}
 8001d92:	4604      	mov	r4, r0
 8001d94:	2110      	movs	r1, #16
 8001d96:	f022 ff4a 	bl	8024c2e <_ZdlPvj>
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	bd10      	pop	{r4, pc}

08001d9e <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001d9e:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001da0:	6803      	ldr	r3, [r0, #0]
{
 8001da2:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001da4:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001da6:	b131      	cbz	r1, 8001db6 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001da8:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001daa:	4798      	blx	r3
 8001dac:	6863      	ldr	r3, [r4, #4]
 8001dae:	1b5b      	subs	r3, r3, r5
 8001db0:	4403      	add	r3, r0
 8001db2:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001db4:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001db6:	4798      	blx	r3
 8001db8:	60a0      	str	r0, [r4, #8]
}
 8001dba:	e7fb      	b.n	8001db4 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001dbc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dec <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001dc4:	460f      	mov	r7, r1
 8001dc6:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001dc8:	781d      	ldrb	r5, [r3, #0]
 8001dca:	b915      	cbnz	r5, 8001dd2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001dcc:	2500      	movs	r5, #0
}
 8001dce:	4628      	mov	r0, r5
 8001dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001dd2:	4c07      	ldr	r4, [pc, #28]	@ (8001df0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	f005 fcce 	bl	8007778 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f4      	beq.n	8001dcc <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001de2:	6863      	ldr	r3, [r4, #4]
 8001de4:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001de6:	68a3      	ldr	r3, [r4, #8]
 8001de8:	6033      	str	r3, [r6, #0]
            return true;
 8001dea:	e7f0      	b.n	8001dce <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001dec:	240008d8 	.word	0x240008d8
 8001df0:	240008c8 	.word	0x240008c8

08001df4 <_ZN20STM32TouchControllerD0Ev>:
 8001df4:	b510      	push	{r4, lr}
 8001df6:	4604      	mov	r4, r0
 8001df8:	2104      	movs	r1, #4
 8001dfa:	f022 ff18 	bl	8024c2e <_ZdlPvj>
 8001dfe:	4620      	mov	r0, r4
 8001e00:	bd10      	pop	{r4, pc}
	...

08001e04 <_ZN20STM32TouchController4initEv>:
{
 8001e04:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001e08:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001e0c:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001e0e:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001e10:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001e14:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001e18:	230c      	movs	r3, #12
 8001e1a:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001e1e:	f005 fc1b 	bl	8007658 <BSP_TS_Init>
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <_ZN20STM32TouchController4initEv+0x40>)
 8001e24:	b910      	cbnz	r0, 8001e2c <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
}
 8001e2a:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1fb      	bne.n	8001e2a <_ZN20STM32TouchController4initEv+0x26>
 8001e32:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <_ZN20STM32TouchController4initEv+0x44>)
 8001e34:	212e      	movs	r1, #46	@ 0x2e
 8001e36:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <_ZN20STM32TouchController4initEv+0x48>)
 8001e38:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <_ZN20STM32TouchController4initEv+0x4c>)
 8001e3a:	f023 fa71 	bl	8025320 <__assert_func>
 8001e3e:	bf00      	nop
 8001e40:	240008d4 	.word	0x240008d4
 8001e44:	240008d8 	.word	0x240008d8
 8001e48:	080264c0 	.word	0x080264c0
 8001e4c:	080264d3 	.word	0x080264d3
 8001e50:	080264fd 	.word	0x080264fd

08001e54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001e54:	2803      	cmp	r0, #3
 8001e56:	d825      	bhi.n	8001ea4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001e58:	e8df f000 	tbb	[pc, r0]
 8001e5c:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e62:	2108      	movs	r1, #8
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001e6c:	480f      	ldr	r0, [pc, #60]	@ (8001eac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001e6e:	f007 bd25 	b.w	80098bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	0952      	lsrs	r2, r2, #5
 8001e80:	e7f4      	b.n	8001e6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	fab2 f282 	clz	r2, r2
 8001e8e:	0952      	lsrs	r2, r2, #5
 8001e90:	e7ec      	b.n	8001e6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001e92:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e98:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	0952      	lsrs	r2, r2, #5
 8001ea2:	e7e4      	b.n	8001e6e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	240008dc 	.word	0x240008dc
 8001eac:	58022400 	.word	0x58022400
 8001eb0:	58021400 	.word	0x58021400

08001eb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001eb4:	2803      	cmp	r0, #3
 8001eb6:	d825      	bhi.n	8001f04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001eb8:	e8df f000 	tbb	[pc, r0]
 8001ebc:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001ec2:	2108      	movs	r1, #8
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	3a00      	subs	r2, #0
 8001ec8:	bf18      	it	ne
 8001eca:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001ecc:	480f      	ldr	r0, [pc, #60]	@ (8001f0c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001ece:	f007 bcf5 	b.w	80098bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001ed4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	3a00      	subs	r2, #0
 8001edc:	bf18      	it	ne
 8001ede:	2201      	movne	r2, #1
 8001ee0:	e7f4      	b.n	8001ecc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001ee4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	3a00      	subs	r2, #0
 8001eec:	bf18      	it	ne
 8001eee:	2201      	movne	r2, #1
 8001ef0:	e7ec      	b.n	8001ecc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001ef2:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001ef4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	3a00      	subs	r2, #0
 8001efe:	bf18      	it	ne
 8001f00:	2201      	movne	r2, #1
 8001f02:	e7e4      	b.n	8001ece <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	240008dc 	.word	0x240008dc
 8001f0c:	58022400 	.word	0x58022400
 8001f10:	58021400 	.word	0x58021400

08001f14 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001f14:	2803      	cmp	r0, #3
 8001f16:	d811      	bhi.n	8001f3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001f18:	e8df f000 	tbb	[pc, r0]
 8001f1c:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001f20:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f22:	4807      	ldr	r0, [pc, #28]	@ (8001f40 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f24:	f007 bccf 	b.w	80098c6 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f2c:	e7f9      	b.n	8001f22 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001f2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f32:	e7f6      	b.n	8001f22 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001f3a:	e7f3      	b.n	8001f24 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	58022400 	.word	0x58022400
 8001f44:	58021400 	.word	0x58021400

08001f48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001f48:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001f4a:	2803      	cmp	r0, #3
 8001f4c:	d815      	bhi.n	8001f7a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001f4e:	e8df f000 	tbb	[pc, r0]
 8001f52:	0a02      	.short	0x0a02
 8001f54:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001f56:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001f58:	4809      	ldr	r0, [pc, #36]	@ (8001f80 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f5a:	f007 fca9 	bl	80098b0 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001f5e:	1e43      	subs	r3, r0, #1
 8001f60:	4258      	negs	r0, r3
 8001f62:	4158      	adcs	r0, r3
 8001f64:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f6a:	e7f5      	b.n	8001f58 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001f6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f70:	e7f2      	b.n	8001f58 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f76:	4803      	ldr	r0, [pc, #12]	@ (8001f84 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001f78:	e7ef      	b.n	8001f5a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	e7ef      	b.n	8001f5e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001f7e:	bf00      	nop
 8001f80:	58022400 	.word	0x58022400
 8001f84:	58021400 	.word	0x58021400

08001f88 <_ZN8touchgfx4GPIO4initEv>:
{
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	4d08      	ldr	r5, [pc, #32]	@ (8001fac <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001f8c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001f8e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001f90:	b2e0      	uxtb	r0, r4
 8001f92:	f7ff ffd9 	bl	8001f48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001f96:	b118      	cbz	r0, 8001fa0 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001f9c:	bf18      	it	ne
 8001f9e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001fa0:	3401      	adds	r4, #1
 8001fa2:	3504      	adds	r5, #4
 8001fa4:	2c05      	cmp	r4, #5
 8001fa6:	d1f3      	bne.n	8001f90 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	bf00      	nop
 8001fac:	240008dc 	.word	0x240008dc

08001fb0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001fb0:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001fb2:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001fb6:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001fba:	4770      	bx	lr

08001fbc <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	4770      	bx	lr

08001fc0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001fc0:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001fc2:	3900      	subs	r1, #0
 8001fc4:	4b02      	ldr	r3, [pc, #8]	@ (8001fd0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001fc6:	bf18      	it	ne
 8001fc8:	2101      	movne	r1, #1
 8001fca:	7019      	strb	r1, [r3, #0]
    }
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	24028e2b 	.word	0x24028e2b

08001fd4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	4770      	bx	lr

08001fd8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001fd8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001fda:	b10b      	cbz	r3, 8001fe0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4718      	bx	r3
        }
    }
 8001fe0:	4770      	bx	lr

08001fe2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001fe2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fe6:	4770      	bx	lr

08001fe8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001fe8:	6840      	ldr	r0, [r0, #4]
 8001fea:	6803      	ldr	r3, [r0, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	4718      	bx	r3

08001ff0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001ff0:	4b01      	ldr	r3, [pc, #4]	@ (8001ff8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	24000900 	.word	0x24000900

08001ffc <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001ffc:	4770      	bx	lr

08001ffe <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001ffe:	f001 bc80 	b.w	8003902 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08002002 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8002002:	f001 bc0f 	b.w	8003824 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08002006 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8002006:	f001 bde1 	b.w	8003bcc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800200a <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 800200a:	f001 bdd3 	b.w	8003bb4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08002010 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8002010:	b510      	push	{r4, lr}
 8002012:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8002014:	f001 fd96 	bl	8003b44 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8002018:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 800201c:	b113      	cbz	r3, 8002024 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 800201e:	4b02      	ldr	r3, [pc, #8]	@ (8002028 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
    }
}
 8002024:	bd10      	pop	{r4, pc}
 8002026:	bf00      	nop
 8002028:	2400000d 	.word	0x2400000d

0800202c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800202c:	f001 bc02 	b.w	8003834 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08002030 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8002030:	b510      	push	{r4, lr}
 8002032:	4604      	mov	r4, r0
        swapFrameBuffers();
 8002034:	f00f fadc 	bl	80115f0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	4620      	mov	r0, r4
 800203c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8002040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8002044:	4718      	bx	r3

08002046 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8002046:	b510      	push	{r4, lr}
 8002048:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 800204a:	f00e fe67 	bl	8010d1c <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 800204e:	6860      	ldr	r0, [r4, #4]
 8002050:	6803      	ldr	r3, [r0, #0]
    }
 8002052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	4718      	bx	r3

0800205a <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 800205a:	f00e bd35 	b.w	8010ac8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

0800205e <_ZN11TouchGFXHALD0Ev>:
 800205e:	b510      	push	{r4, lr}
 8002060:	4604      	mov	r4, r0
 8002062:	217c      	movs	r1, #124	@ 0x7c
 8002064:	f022 fde3 	bl	8024c2e <_ZdlPvj>
 8002068:	4620      	mov	r0, r4
 800206a:	bd10      	pop	{r4, pc}

0800206c <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 800206c:	4b02      	ldr	r3, [pc, #8]	@ (8002078 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8002072:	f00e bd65 	b.w	8010b40 <_ZN8touchgfx3HAL10beginFrameEv>
 8002076:	bf00      	nop
 8002078:	2400000d 	.word	0x2400000d

0800207c <_ZN11TouchGFXHAL10initializeEv>:
{
 800207c:	b538      	push	{r3, r4, r5, lr}
 800207e:	4604      	mov	r4, r0
    mcuInstr.init();
 8002080:	4d06      	ldr	r5, [pc, #24]	@ (800209c <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8002082:	f001 fbff 	bl	8003884 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8002086:	2300      	movs	r3, #0
    mcuInstr.init();
 8002088:	4628      	mov	r0, r5
 800208a:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 800208e:	f7ff fe3b 	bl	8001d08 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8002092:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8002094:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8002096:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 800209a:	bd38      	pop	{r3, r4, r5, pc}
 800209c:	240008f0 	.word	0x240008f0

080020a0 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 80020a0:	6803      	ldr	r3, [r0, #0]
{
 80020a2:	4604      	mov	r4, r0
 80020a4:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 80020a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020aa:	4798      	blx	r3
    enableInterrupts();
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	4620      	mov	r0, r4
 80020b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020b2:	4798      	blx	r3
    OSWrappers::waitForVSync();
 80020b4:	f000 ff5c 	bl	8002f70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	4620      	mov	r0, r4
 80020bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020be:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 80020c0:	2100      	movs	r1, #0
 80020c2:	2329      	movs	r3, #41	@ 0x29
 80020c4:	2215      	movs	r2, #21
 80020c6:	4805      	ldr	r0, [pc, #20]	@ (80020dc <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 80020c8:	9100      	str	r1, [sp, #0]
 80020ca:	f007 f966 	bl	800939a <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 80020ce:	f000 ff4f 	bl	8002f70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	4620      	mov	r0, r4
 80020d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d8:	4798      	blx	r3
    for (;;)
 80020da:	e7f8      	b.n	80020ce <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 80020dc:	2400064c 	.word	0x2400064c

080020e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80020e0:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80020e4:	4b0d      	ldr	r3, [pc, #52]	@ (800211c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80020e6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80020e8:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 80020ec:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80020ee:	428c      	cmp	r4, r1
 80020f0:	d009      	beq.n	8002106 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80020f2:	b93a      	cbnz	r2, 8002104 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80020f4:	490a      	ldr	r1, [pc, #40]	@ (8002120 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002124 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80020f8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020fa:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80020fc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80020fe:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002100:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8002102:	701a      	strb	r2, [r3, #0]
        }
    }
 8002104:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8002106:	2a00      	cmp	r2, #0
 8002108:	d0fc      	beq.n	8002104 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800210a:	4a06      	ldr	r2, [pc, #24]	@ (8002124 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 800210c:	4904      	ldr	r1, [pc, #16]	@ (8002120 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800210e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002110:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002112:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002114:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002116:	2200      	movs	r2, #0
 8002118:	e7f3      	b.n	8002102 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800211a:	bf00      	nop
 800211c:	24028e24 	.word	0x24028e24
 8002120:	24028e22 	.word	0x24028e22
 8002124:	24028e20 	.word	0x24028e20

08002128 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002128:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	428b      	cmp	r3, r1
 8002130:	d803      	bhi.n	800213a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8002132:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	4293      	cmp	r3, r2
 8002138:	d905      	bls.n	8002146 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 800213c:	219e      	movs	r1, #158	@ 0x9e
 800213e:	4a07      	ldr	r2, [pc, #28]	@ (800215c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8002140:	4807      	ldr	r0, [pc, #28]	@ (8002160 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8002142:	f023 f8ed 	bl	8025320 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002148:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 800214c:	801a      	strh	r2, [r3, #0]
    }
 800214e:	bd08      	pop	{r3, pc}
 8002150:	24028e20 	.word	0x24028e20
 8002154:	24028e22 	.word	0x24028e22
 8002158:	08026570 	.word	0x08026570
 800215c:	080265d3 	.word	0x080265d3
 8002160:	08026616 	.word	0x08026616
 8002164:	24028e26 	.word	0x24028e26
 8002168:	24028e28 	.word	0x24028e28

0800216c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 800216c:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 800216e:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8002172:	b118      	cbz	r0, 800217c <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8002174:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8002176:	6803      	ldr	r3, [r0, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4718      	bx	r3
    }
 800217c:	4770      	bx	lr
	...

08002180 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	460d      	mov	r5, r1
 8002184:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8002186:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8002188:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800218a:	b935      	cbnz	r5, 800219a <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 800218c:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 800218e:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8002194:	480a      	ldr	r0, [pc, #40]	@ (80021c0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8002196:	f023 f8c3 	bl	8025320 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800219a:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800219e:	3a00      	subs	r2, #0
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 80021a2:	bf18      	it	ne
 80021a4:	2201      	movne	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80021a8:	6803      	ldr	r3, [r0, #0]
}
 80021aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b2:	4718      	bx	r3
 80021b4:	24000900 	.word	0x24000900
 80021b8:	08026669 	.word	0x08026669
 80021bc:	080266a1 	.word	0x080266a1
 80021c0:	08026616 	.word	0x08026616
 80021c4:	24028e2a 	.word	0x24028e2a

080021c8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 80021c8:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 80021cc:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80021ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 80021d2:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 80021d4:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 80021d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002250 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 80021da:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 80021dc:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80021e0:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80021e2:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 80021e4:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 80021e8:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 80021ea:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 80021ee:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80021f0:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 80021f2:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 80021f6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80021fa:	4a16      	ldr	r2, [pc, #88]	@ (8002254 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80021fc:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8002200:	3520      	adds	r5, #32
          buttonController(0),
 8002202:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8002206:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 800220a:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 800220e:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8002212:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8002216:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 800221a:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800221e:	6782      	str	r2, [r0, #120]	@ 0x78
 8002220:	b2ad      	uxth	r5, r5
        instance = this;
 8002222:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002224:	42b5      	cmp	r5, r6
        instance = this;
 8002226:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002228:	4a0c      	ldr	r2, [pc, #48]	@ (800225c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 800222a:	8015      	strh	r5, [r2, #0]
 800222c:	4a0c      	ldr	r2, [pc, #48]	@ (8002260 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 800222e:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002230:	bf28      	it	cs
 8002232:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002234:	4a0b      	ldr	r2, [pc, #44]	@ (8002264 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002236:	bf38      	it	cc
 8002238:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800223a:	8016      	strh	r6, [r2, #0]
 800223c:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800223e:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002242:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8002244:	4a09      	ldr	r2, [pc, #36]	@ (800226c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8002246:	7013      	strb	r3, [r2, #0]
 8002248:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 800224a:	6003      	str	r3, [r0, #0]
}
 800224c:	bd70      	pop	{r4, r5, r6, pc}
 800224e:	bf00      	nop
 8002250:	01000001 	.word	0x01000001
 8002254:	01010000 	.word	0x01010000
 8002258:	24028e2c 	.word	0x24028e2c
 800225c:	24028e20 	.word	0x24028e20
 8002260:	24028e26 	.word	0x24028e26
 8002264:	24028e22 	.word	0x24028e22
 8002268:	24028e28 	.word	0x24028e28
 800226c:	24028e24 	.word	0x24028e24
 8002270:	080266f8 	.word	0x080266f8

08002274 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8002274:	2b01      	cmp	r3, #1
    {
 8002276:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8002278:	d80e      	bhi.n	8002298 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	2215      	movs	r2, #21
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	460b      	mov	r3, r1
 8002282:	4601      	mov	r1, r0
 8002284:	4808      	ldr	r0, [pc, #32]	@ (80022a8 <DSI_IO_Write+0x34>)
 8002286:	f007 f888 	bl	800939a <HAL_DSI_ShortWrite>
 800228a:	b118      	cbz	r0, 8002294 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800228c:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8002290:	b002      	add	sp, #8
 8002292:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8002294:	2000      	movs	r0, #0
 8002296:	e7fb      	b.n	8002290 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8002298:	e9cd 1200 	strd	r1, r2, [sp]
 800229c:	4601      	mov	r1, r0
 800229e:	2239      	movs	r2, #57	@ 0x39
 80022a0:	4801      	ldr	r0, [pc, #4]	@ (80022a8 <DSI_IO_Write+0x34>)
 80022a2:	f007 f88b 	bl	80093bc <HAL_DSI_LongWrite>
 80022a6:	e7f0      	b.n	800228a <DSI_IO_Write+0x16>
 80022a8:	2400064c 	.word	0x2400064c

080022ac <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 80022ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80022ae:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80022b2:	2106      	movs	r1, #6
 80022b4:	9100      	str	r1, [sp, #0]
 80022b6:	4601      	mov	r1, r0
 80022b8:	4805      	ldr	r0, [pc, #20]	@ (80022d0 <DSI_IO_Read+0x24>)
 80022ba:	f007 f8df 	bl	800947c <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 80022be:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 80022c0:	bf14      	ite	ne
 80022c2:	f06f 0007 	mvnne.w	r0, #7
 80022c6:	2000      	moveq	r0, #0
 80022c8:	b005      	add	sp, #20
 80022ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80022ce:	bf00      	nop
 80022d0:	2400064c 	.word	0x2400064c

080022d4 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 80022d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 80022d6:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80022da:	4c0b      	ldr	r4, [pc, #44]	@ (8002308 <LCD_ReqTear+0x34>)
 80022dc:	2239      	movs	r2, #57	@ 0x39
 80022de:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 80022e0:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80022e4:	ab03      	add	r3, sp, #12
 80022e6:	4620      	mov	r0, r4
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2344      	movs	r3, #68	@ 0x44
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2302      	movs	r3, #2
 80022f0:	f007 f864 	bl	80093bc <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 80022f4:	2100      	movs	r1, #0
 80022f6:	2335      	movs	r3, #53	@ 0x35
 80022f8:	2215      	movs	r2, #21
 80022fa:	4620      	mov	r0, r4
 80022fc:	9100      	str	r1, [sp, #0]
 80022fe:	f007 f84c 	bl	800939a <HAL_DSI_ShortWrite>
    }
 8002302:	b004      	add	sp, #16
 8002304:	bd10      	pop	{r4, pc}
 8002306:	bf00      	nop
 8002308:	2400064c 	.word	0x2400064c

0800230c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 800230c:	b508      	push	{r3, lr}
    LCD_ReqTear();
 800230e:	f7ff ffe1 	bl	80022d4 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8002312:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8002314:	2202      	movs	r2, #2
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 800231c:	2201      	movs	r2, #1
 800231e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8002322:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 800232e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002332:	f042 0202 	orr.w	r2, r2, #2
 8002336:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 800233a:	2203      	movs	r2, #3
 800233c:	4b02      	ldr	r3, [pc, #8]	@ (8002348 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 800233e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002340:	bd08      	pop	{r3, pc}
 8002342:	bf00      	nop
 8002344:	2400064c 	.word	0x2400064c
 8002348:	50001000 	.word	0x50001000

0800234c <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <LCD_ReqEnable+0x20>)
    {
 800234e:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8002350:	7819      	ldrb	r1, [r3, #0]
 8002352:	b939      	cbnz	r1, 8002364 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8002354:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8002356:	4806      	ldr	r0, [pc, #24]	@ (8002370 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8002358:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 800235a:	2329      	movs	r3, #41	@ 0x29
 800235c:	2215      	movs	r2, #21
 800235e:	9100      	str	r1, [sp, #0]
 8002360:	f007 f81b 	bl	800939a <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8002364:	b003      	add	sp, #12
 8002366:	f85d fb04 	ldr.w	pc, [sp], #4
 800236a:	bf00      	nop
 800236c:	240008ec 	.word	0x240008ec
 8002370:	2400064c 	.word	0x2400064c

08002374 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8002376:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	232a      	movs	r3, #42	@ 0x2a
 800237c:	2239      	movs	r2, #57	@ 0x39
 800237e:	2100      	movs	r1, #0
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2304      	movs	r3, #4
 8002384:	4803      	ldr	r0, [pc, #12]	@ (8002394 <LCD_SetUpdateRegionLeft+0x20>)
 8002386:	f007 f819 	bl	80093bc <HAL_DSI_LongWrite>
    }
 800238a:	b003      	add	sp, #12
 800238c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002390:	24000009 	.word	0x24000009
 8002394:	2400064c 	.word	0x2400064c

08002398 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <LCD_SetUpdateRegionRight+0x1c>)
    {
 800239a:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	232a      	movs	r3, #42	@ 0x2a
 80023a0:	2239      	movs	r2, #57	@ 0x39
 80023a2:	2100      	movs	r1, #0
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2304      	movs	r3, #4
 80023a8:	4803      	ldr	r0, [pc, #12]	@ (80023b8 <LCD_SetUpdateRegionRight+0x20>)
 80023aa:	f007 f807 	bl	80093bc <HAL_DSI_LongWrite>
    }
 80023ae:	b003      	add	sp, #12
 80023b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80023b4:	24000005 	.word	0x24000005
 80023b8:	2400064c 	.word	0x2400064c

080023bc <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 80023bc:	b538      	push	{r3, r4, r5, lr}
        return instance;
 80023be:	4d14      	ldr	r5, [pc, #80]	@ (8002410 <HAL_DSI_TearingEffectCallback+0x54>)
 80023c0:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff fd46 	bl	8001e54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80023c8:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 80023ca:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80023ce:	3301      	adds	r3, #1
 80023d0:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80023d4:	f000 fdc0 	bl	8002f58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80023d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 80023da:	682a      	ldr	r2, [r5, #0]
 80023dc:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 80023e4:	b173      	cbz	r3, 8002404 <HAL_DSI_TearingEffectCallback+0x48>
 80023e6:	4d0c      	ldr	r5, [pc, #48]	@ (8002418 <HAL_DSI_TearingEffectCallback+0x5c>)
 80023e8:	782b      	ldrb	r3, [r5, #0]
 80023ea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80023ee:	b94b      	cbnz	r3, 8002404 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <HAL_DSI_TearingEffectCallback+0x60>)
 80023f2:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 80023f4:	f7ff ffbe 	bl	8002374 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 80023f8:	4620      	mov	r0, r4
 80023fa:	f006 ffbe 	bl	800937a <HAL_DSI_Refresh>
            displayRefreshing = true;
 80023fe:	2301      	movs	r3, #1
 8002400:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002402:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002404:	2000      	movs	r0, #0
    }
 8002406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800240a:	f7ff bd53 	b.w	8001eb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800240e:	bf00      	nop
 8002410:	24028e2c 	.word	0x24028e2c
 8002414:	2400000d 	.word	0x2400000d
 8002418:	24000908 	.word	0x24000908
 800241c:	24000904 	.word	0x24000904

08002420 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8002420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8002424:	4e48      	ldr	r6, [pc, #288]	@ (8002548 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8002426:	b085      	sub	sp, #20
 8002428:	4604      	mov	r4, r0
        if (displayRefreshing)
 800242a:	7833      	ldrb	r3, [r6, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 8088 	beq.w	8002542 <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 8002432:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 800256c <HAL_DSI_EndOfRefreshCallback+0x14c>
 8002436:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8002570 <HAL_DSI_EndOfRefreshCallback+0x150>
 800243a:	f8d9 5000 	ldr.w	r5, [r9]
 800243e:	4f43      	ldr	r7, [pc, #268]	@ (800254c <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8002440:	2d00      	cmp	r5, #0
 8002442:	d13e      	bne.n	80024c2 <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8002444:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002446:	4e42      	ldr	r6, [pc, #264]	@ (8002550 <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8002448:	f005 faa2 	bl	8007990 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	9500      	str	r5, [sp, #0]
 8002450:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002454:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002456:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800245a:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800245e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002462:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002466:	f002 0208 	and.w	r2, r2, #8
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800246e:	f8d8 2000 	ldr.w	r2, [r8]
 8002472:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002476:	4837      	ldr	r0, [pc, #220]	@ (8002554 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8002478:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 800247a:	4e37      	ldr	r6, [pc, #220]	@ (8002558 <HAL_DSI_EndOfRefreshCallback+0x138>)
 800247c:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 800247e:	4837      	ldr	r0, [pc, #220]	@ (800255c <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8002480:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8002484:	4836      	ldr	r0, [pc, #216]	@ (8002560 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002486:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 800248a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800248c:	f041 0101 	orr.w	r1, r1, #1
 8002490:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002492:	9501      	str	r5, [sp, #4]
 8002494:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002498:	f042 0208 	orr.w	r2, r2, #8
 800249c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80024a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 80024ac:	f7ff ff74 	bl	8002398 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 80024b0:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 80024b2:	4620      	mov	r0, r4
                updateRegion = 1;
 80024b4:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 80024b8:	b005      	add	sp, #20
 80024ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 80024be:	f006 bf5c 	b.w	800937a <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80024c2:	6803      	ldr	r3, [r0, #0]
 80024c4:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80024c6:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80024c8:	9502      	str	r5, [sp, #8]
 80024ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80024ce:	4c25      	ldr	r4, [pc, #148]	@ (8002564 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80024d8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80024dc:	f002 0208 	and.w	r2, r2, #8
 80024e0:	9202      	str	r2, [sp, #8]
 80024e2:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80024e4:	f8d8 2000 	ldr.w	r2, [r8]
 80024e8:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80024ec:	4819      	ldr	r0, [pc, #100]	@ (8002554 <HAL_DSI_EndOfRefreshCallback+0x134>)
 80024ee:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80024f0:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80024f4:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 80024f6:	4819      	ldr	r0, [pc, #100]	@ (800255c <HAL_DSI_EndOfRefreshCallback+0x13c>)
 80024f8:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 80024fc:	4818      	ldr	r0, [pc, #96]	@ (8002560 <HAL_DSI_EndOfRefreshCallback+0x140>)
 80024fe:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002502:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002504:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002506:	f041 0101 	orr.w	r1, r1, #1
 800250a:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800250c:	9503      	str	r5, [sp, #12]
 800250e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002512:	f042 0208 	orr.w	r2, r2, #8
 8002516:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800251a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	9303      	str	r3, [sp, #12]
 8002524:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002526:	f7ff fcc5 	bl	8001eb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 800252a:	f7ff ff0f 	bl	800234c <LCD_ReqEnable>
        return instance;
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8002530:	7035      	strb	r5, [r6, #0]
 8002532:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8002534:	b128      	cbz	r0, 8002542 <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8002536:	6803      	ldr	r3, [r0, #0]
 8002538:	6a1b      	ldr	r3, [r3, #32]
    }
 800253a:	b005      	add	sp, #20
 800253c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002540:	4718      	bx	r3
 8002542:	b005      	add	sp, #20
 8002544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002548:	24000908 	.word	0x24000908
 800254c:	24000900 	.word	0x24000900
 8002550:	01b201e2 	.word	0x01b201e2
 8002554:	50001000 	.word	0x50001000
 8002558:	019201e3 	.word	0x019201e3
 800255c:	01920003 	.word	0x01920003
 8002560:	09c004b3 	.word	0x09c004b3
 8002564:	019201e2 	.word	0x019201e2
 8002568:	24028e2c 	.word	0x24028e2c
 800256c:	24000904 	.word	0x24000904
 8002570:	24000474 	.word	0x24000474

08002574 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002574:	4601      	mov	r1, r0
 8002576:	b508      	push	{r3, lr}
        return instance;
 8002578:	4b03      	ldr	r3, [pc, #12]	@ (8002588 <IdleTaskHook+0x14>)
 800257a:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 800257c:	b101      	cbz	r1, 8002580 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800257e:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002580:	f00f f850 	bl	8011624 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002584:	2001      	movs	r0, #1
 8002586:	bd08      	pop	{r3, pc}
 8002588:	24028e2c 	.word	0x24028e2c

0800258c <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 800258c:	4b03      	ldr	r3, [pc, #12]	@ (800259c <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800258e:	2200      	movs	r2, #0
 8002590:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	4a02      	ldr	r2, [pc, #8]	@ (80025a0 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002596:	601a      	str	r2, [r3, #0]

}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	240008f0 	.word	0x240008f0
 80025a0:	080264a0 	.word	0x080264a0

080025a4 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80025a4:	6940      	ldr	r0, [r0, #20]
 80025a6:	4770      	bx	lr

080025a8 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 80025a8:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80025ac:	4770      	bx	lr

080025ae <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80025ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80025b0:	b923      	cbnz	r3, 80025bc <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 80025b2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80025b4:	3800      	subs	r0, #0
 80025b6:	bf18      	it	ne
 80025b8:	2001      	movne	r0, #1
 80025ba:	4770      	bx	lr
 80025bc:	2001      	movs	r0, #1
}
 80025be:	4770      	bx	lr

080025c0 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80025c0:	6880      	ldr	r0, [r0, #8]
 80025c2:	4770      	bx	lr

080025c4 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80025c4:	4770      	bx	lr

080025c6 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80025c6:	3004      	adds	r0, #4
{
 80025c8:	b510      	push	{r4, lr}
 80025ca:	460c      	mov	r4, r1
    *data = videoInfo;
 80025cc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80025ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80025d2:	bd10      	pop	{r4, pc}

080025d4 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80025d4:	4770      	bx	lr
	...

080025d8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80025d8:	b508      	push	{r3, lr}
    assert(0);
 80025da:	4a03      	ldr	r2, [pc, #12]	@ (80025e8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80025dc:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80025e0:	4b02      	ldr	r3, [pc, #8]	@ (80025ec <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80025e2:	4803      	ldr	r0, [pc, #12]	@ (80025f0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80025e4:	f022 fe9c 	bl	8025320 <__assert_func>
 80025e8:	080267c8 	.word	0x080267c8
 80025ec:	08028ad1 	.word	0x08028ad1
 80025f0:	08026823 	.word	0x08026823

080025f4 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80025f4:	b510      	push	{r4, lr}
 80025f6:	4604      	mov	r4, r0
 80025f8:	2148      	movs	r1, #72	@ 0x48
 80025fa:	f022 fb18 	bl	8024c2e <_ZdlPvj>
 80025fe:	4620      	mov	r0, r4
 8002600:	bd10      	pop	{r4, pc}
	...

08002604 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002604:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002606:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002608:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 800260a:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800260c:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800260e:	6003      	str	r3, [r0, #0]
 8002610:	63c2      	str	r2, [r0, #60]	@ 0x3c
 8002612:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002616:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800261a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800261e:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002622:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8002626:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 800262a:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800262e:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 8002632:	2001      	movs	r0, #1
 8002634:	f00b fe95 	bl	800e362 <osSemaphoreNew>
 8002638:	4b02      	ldr	r3, [pc, #8]	@ (8002644 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 800263a:	6018      	str	r0, [r3, #0]
}
 800263c:	4620      	mov	r0, r4
 800263e:	bd10      	pop	{r4, pc}
 8002640:	08026a5c 	.word	0x08026a5c
 8002644:	24000928 	.word	0x24000928

08002648 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002648:	b410      	push	{r4}
 800264a:	460c      	mov	r4, r1
 800264c:	4611      	mov	r1, r2
 800264e:	461a      	mov	r2, r3
    if (reader != 0)
 8002650:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002652:	b13b      	cbz	r3, 8002664 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002654:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002656:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002658:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800265a:	4420      	add	r0, r4
}
 800265c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002660:	f023 b902 	b.w	8025868 <strncmp>
        src = (const char*)movieData + offset;
 8002664:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002666:	e7f8      	b.n	800265a <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002668 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002668:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 800266a:	b510      	push	{r4, lr}
    if (reader != 0)
 800266c:	b173      	cbz	r3, 800268c <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800266e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002670:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8002672:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002674:	1853      	adds	r3, r2, r1
 8002676:	5c52      	ldrb	r2, [r2, r1]
 8002678:	7898      	ldrb	r0, [r3, #2]
 800267a:	785c      	ldrb	r4, [r3, #1]
 800267c:	0400      	lsls	r0, r0, #16
 800267e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8002682:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002684:	78db      	ldrb	r3, [r3, #3]
 8002686:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800268a:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 800268c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800268e:	1853      	adds	r3, r2, r1
        val |= d[0];
 8002690:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 8002692:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002694:	7898      	ldrb	r0, [r3, #2]
 8002696:	0400      	lsls	r0, r0, #16
 8002698:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800269c:	e7f1      	b.n	8002682 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800269e <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800269e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80026a0:	b143      	cbz	r3, 80026b4 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80026a2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80026a4:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80026a6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80026a8:	185a      	adds	r2, r3, r1
 80026aa:	5c58      	ldrb	r0, [r3, r1]
 80026ac:	7852      	ldrb	r2, [r2, #1]
 80026ae:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80026b2:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 80026b4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80026b6:	185a      	adds	r2, r3, r1
        val |= d[0];
 80026b8:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 80026ba:	7853      	ldrb	r3, [r2, #1]
 80026bc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80026c0:	4770      	bx	lr
	...

080026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	4604      	mov	r4, r0
    if (reader != 0)
 80026c8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 80026ca:	460d      	mov	r5, r1
 80026cc:	4616      	mov	r6, r2
    if (reader != 0)
 80026ce:	b1d8      	cbz	r0, 8002708 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80026d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d208      	bcs.n	80026e8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80026d6:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80026da:	219e      	movs	r1, #158	@ 0x9e
 80026dc:	480d      	ldr	r0, [pc, #52]	@ (8002714 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80026de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80026e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80026e4:	f022 fe1c 	bl	8025320 <__assert_func>
        reader->seek(offset);
 80026e8:	6803      	ldr	r3, [r0, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80026ee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80026f0:	4632      	mov	r2, r6
 80026f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026f4:	6803      	ldr	r3, [r0, #0]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	4798      	blx	r3
 80026fa:	b910      	cbnz	r0, 8002702 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80026fc:	230d      	movs	r3, #13
 80026fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 8002702:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 8002704:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 8002706:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002708:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800270a:	4408      	add	r0, r1
 800270c:	e7fb      	b.n	8002706 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 800270e:	bf00      	nop
 8002710:	08026898 	.word	0x08026898
 8002714:	08026823 	.word	0x08026823
 8002718:	08026885 	.word	0x08026885

0800271c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 800271c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002720:	6943      	ldr	r3, [r0, #20]
{
 8002722:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002724:	b92b      	cbnz	r3, 8002732 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8002726:	4b22      	ldr	r3, [pc, #136]	@ (80027b0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8002728:	21e4      	movs	r1, #228	@ 0xe4
 800272a:	4a22      	ldr	r2, [pc, #136]	@ (80027b4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 800272c:	4822      	ldr	r0, [pc, #136]	@ (80027b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800272e:	f022 fdf7 	bl	8025320 <__assert_func>
    readData(currentMovieOffset, 8);
 8002732:	2208      	movs	r2, #8
 8002734:	6981      	ldr	r1, [r0, #24]
 8002736:	f7ff ffc5 	bl	80026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800273a:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800273c:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002740:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002744:	3104      	adds	r1, #4
 8002746:	4620      	mov	r0, r4
 8002748:	f7ff ff8e 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800274c:	69a3      	ldr	r3, [r4, #24]
 800274e:	4418      	add	r0, r3
 8002750:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002752:	f100 0208 	add.w	r2, r0, #8
 8002756:	429a      	cmp	r2, r3
 8002758:	d306      	bcc.n	8002768 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800275a:	2301      	movs	r3, #1
    return false;
 800275c:	2000      	movs	r0, #0
    frameNumber = 1;
 800275e:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002760:	6a23      	ldr	r3, [r4, #32]
 8002762:	61a3      	str	r3, [r4, #24]
}
 8002764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002768:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800276a:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800276e:	2208      	movs	r2, #8
 8002770:	4620      	mov	r0, r4
        frameNumber++;
 8002772:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002774:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002778:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800277a:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 800277c:	f7ff ffa2 	bl	80026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002780:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002784:	4620      	mov	r0, r4
 8002786:	4649      	mov	r1, r9
 8002788:	f7ff ff89 	bl	800269e <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800278c:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002790:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff ff83 	bl	800269e <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002798:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800279c:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff ff62 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80027a4:	45b0      	cmp	r8, r6
 80027a6:	d1d1      	bne.n	800274c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80027a8:	42bd      	cmp	r5, r7
 80027aa:	d1cf      	bne.n	800274c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80027ac:	2001      	movs	r0, #1
 80027ae:	e7d9      	b.n	8002764 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80027b0:	080268da 	.word	0x080268da
 80027b4:	08026923 	.word	0x08026923
 80027b8:	08026823 	.word	0x08026823

080027bc <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80027bc:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80027be:	6803      	ldr	r3, [r0, #0]
 80027c0:	bf38      	it	cc
 80027c2:	2101      	movcc	r1, #1
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 80027c6:	b570      	push	{r4, r5, r6, lr}
 80027c8:	460d      	mov	r5, r1
 80027ca:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80027cc:	4798      	blx	r3
 80027ce:	42a8      	cmp	r0, r5
 80027d0:	d204      	bcs.n	80027dc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	4620      	mov	r0, r4
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	4798      	blx	r3
 80027da:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80027dc:	1e6b      	subs	r3, r5, #1
 80027de:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80027e0:	2210      	movs	r2, #16
 80027e2:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80027e4:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80027e8:	f106 0108 	add.w	r1, r6, #8
 80027ec:	f7ff ff6a 	bl	80026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80027f0:	f106 0110 	add.w	r1, r6, #16
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff ff37 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027fa:	6a23      	ldr	r3, [r4, #32]
 80027fc:	3b04      	subs	r3, #4
 80027fe:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002800:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002804:	bd70      	pop	{r4, r5, r6, pc}
	...

08002808 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8002808:	2100      	movs	r1, #0
    readData(0, 72);
 800280a:	2248      	movs	r2, #72	@ 0x48
{
 800280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002810:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 8002812:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002814:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 8002818:	f7ff ff54 	bl	80026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 800281c:	69a6      	ldr	r6, [r4, #24]
 800281e:	2304      	movs	r3, #4
 8002820:	4a63      	ldr	r2, [pc, #396]	@ (80029b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002822:	4631      	mov	r1, r6
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff ff0f 	bl	8002648 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800282a:	b148      	cbz	r0, 8002840 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 800282c:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800282e:	4a61      	ldr	r2, [pc, #388]	@ (80029b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002830:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 8002834:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002838:	4b5f      	ldr	r3, [pc, #380]	@ (80029b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 800283a:	4860      	ldr	r0, [pc, #384]	@ (80029bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800283c:	f022 fd70 	bl	8025320 <__assert_func>
    currentMovieOffset += 8;
 8002840:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002844:	2304      	movs	r3, #4
 8002846:	4a5e      	ldr	r2, [pc, #376]	@ (80029c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002848:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800284a:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800284c:	f7ff fefc 	bl	8002648 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002850:	b138      	cbz	r0, 8002862 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002852:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002854:	4a57      	ldr	r2, [pc, #348]	@ (80029b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002856:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800285a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800285e:	4b59      	ldr	r3, [pc, #356]	@ (80029c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002860:	e7eb      	b.n	800283a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8002862:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002866:	2304      	movs	r3, #4
 8002868:	4a57      	ldr	r2, [pc, #348]	@ (80029c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800286a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800286c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800286e:	f7ff feeb 	bl	8002648 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002872:	4607      	mov	r7, r0
 8002874:	b138      	cbz	r0, 8002886 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002876:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002878:	4a4e      	ldr	r2, [pc, #312]	@ (80029b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800287a:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800287e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002882:	4b52      	ldr	r3, [pc, #328]	@ (80029cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002884:	e7d9      	b.n	800283a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002886:	f106 0110 	add.w	r1, r6, #16
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff feec 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002890:	4605      	mov	r5, r0
 8002892:	b920      	cbnz	r0, 800289e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002894:	4b4e      	ldr	r3, [pc, #312]	@ (80029d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002896:	f240 1141 	movw	r1, #321	@ 0x141
 800289a:	4a46      	ldr	r2, [pc, #280]	@ (80029b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800289c:	e7cd      	b.n	800283a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800289e:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 80028a2:	2304      	movs	r3, #4
 80028a4:	4a4b      	ldr	r2, [pc, #300]	@ (80029d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80028a6:	4620      	mov	r0, r4
 80028a8:	4641      	mov	r1, r8
 80028aa:	f7ff fecd 	bl	8002648 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d049      	beq.n	8002946 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80028b2:	2306      	movs	r3, #6
 80028b4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80028b8:	2304      	movs	r3, #4
 80028ba:	4a47      	ldr	r2, [pc, #284]	@ (80029d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80028bc:	f106 0118 	add.w	r1, r6, #24
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7ff fec1 	bl	8002648 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80028c6:	2800      	cmp	r0, #0
 80028c8:	d03f      	beq.n	800294a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80028ca:	2307      	movs	r3, #7
 80028cc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80028d0:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80028d2:	4f42      	ldr	r7, [pc, #264]	@ (80029dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80028d4:	220c      	movs	r2, #12
 80028d6:	4620      	mov	r0, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	f7ff fef3 	bl	80026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80028de:	f105 0608 	add.w	r6, r5, #8
 80028e2:	2304      	movs	r3, #4
 80028e4:	463a      	mov	r2, r7
 80028e6:	4620      	mov	r0, r4
 80028e8:	4631      	mov	r1, r6
 80028ea:	f7ff fead 	bl	8002648 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80028ee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80028f2:	2800      	cmp	r0, #0
 80028f4:	d048      	beq.n	8002988 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d148      	bne.n	800298c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80028fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80028fc:	42ab      	cmp	r3, r5
 80028fe:	d849      	bhi.n	8002994 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002900:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002904:	3504      	adds	r5, #4
 8002906:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002908:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800290a:	4629      	mov	r1, r5
 800290c:	f7ff feac 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002910:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002912:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002914:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff fea6 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800291c:	4406      	add	r6, r0
    readData(listOffset, 4);
 800291e:	2204      	movs	r2, #4
 8002920:	4620      	mov	r0, r4
 8002922:	4631      	mov	r1, r6
 8002924:	f7ff fece 	bl	80026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002928:	2304      	movs	r3, #4
 800292a:	4a2d      	ldr	r2, [pc, #180]	@ (80029e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 800292c:	4631      	mov	r1, r6
 800292e:	4620      	mov	r0, r4
 8002930:	f7ff fe8a 	bl	8002648 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002934:	2800      	cmp	r0, #0
 8002936:	d138      	bne.n	80029aa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002938:	2301      	movs	r3, #1
        indexOffset = listOffset;
 800293a:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 800293c:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800293e:	69a3      	ldr	r3, [r4, #24]
 8002940:	6223      	str	r3, [r4, #32]
}
 8002942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002946:	2701      	movs	r7, #1
 8002948:	e7b6      	b.n	80028b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800294a:	2f00      	cmp	r7, #0
 800294c:	d0c0      	beq.n	80028d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800294e:	f106 0120 	add.w	r1, r6, #32
 8002952:	4620      	mov	r0, r4
 8002954:	f7ff fe88 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002958:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 800295c:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002960:	fbb0 f0f3 	udiv	r0, r0, r3
 8002964:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff fe7e 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 800296c:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002970:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002972:	4620      	mov	r0, r4
 8002974:	f7ff fe78 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002978:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 800297c:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800297e:	4620      	mov	r0, r4
 8002980:	f7ff fe72 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002984:	6120      	str	r0, [r4, #16]
 8002986:	e7a3      	b.n	80028d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0b9      	beq.n	8002900 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800298c:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800298e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 8002992:	e7d6      	b.n	8002942 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002994:	1d29      	adds	r1, r5, #4
 8002996:	4620      	mov	r0, r4
 8002998:	f7ff fe66 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 800299c:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800299e:	220c      	movs	r2, #12
 80029a0:	4620      	mov	r0, r4
 80029a2:	4629      	mov	r1, r5
 80029a4:	f7ff fe8e 	bl	80026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80029a8:	e799      	b.n	80028de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80029aa:	230b      	movs	r3, #11
 80029ac:	e7ef      	b.n	800298e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80029ae:	bf00      	nop
 80029b0:	08026956 	.word	0x08026956
 80029b4:	08026974 	.word	0x08026974
 80029b8:	0802695b 	.word	0x0802695b
 80029bc:	08026823 	.word	0x08026823
 80029c0:	080269a1 	.word	0x080269a1
 80029c4:	080269a6 	.word	0x080269a6
 80029c8:	080269be 	.word	0x080269be
 80029cc:	080269c3 	.word	0x080269c3
 80029d0:	080269d9 	.word	0x080269d9
 80029d4:	080269e5 	.word	0x080269e5
 80029d8:	080269ea 	.word	0x080269ea
 80029dc:	080269ef 	.word	0x080269ef
 80029e0:	080269f4 	.word	0x080269f4

080029e4 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80029e4:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80029e8:	2200      	movs	r2, #0
 80029ea:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80029ec:	f7ff bf0c 	b.w	8002808 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080029f0 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80029f0:	b510      	push	{r4, lr}
    movieData = 0;
 80029f2:	2300      	movs	r3, #0
{
 80029f4:	4604      	mov	r4, r0
 80029f6:	4608      	mov	r0, r1
    movieData = 0;
 80029f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80029fa:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80029fc:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4798      	blx	r3
 8002a02:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8002a04:	4620      	mov	r0, r4
}
 8002a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002a0a:	f7ff befd 	b.w	8002808 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08002a10 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8002a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 8002a12:	4c14      	ldr	r4, [pc, #80]	@ (8002a64 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 8002a14:	4d14      	ldr	r5, [pc, #80]	@ (8002a68 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 8002a16:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 8002a18:	2400      	movs	r4, #0
 8002a1a:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <JPEG_Decode_DMA+0x5c>)
 8002a1c:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8002a1e:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <JPEG_Decode_DMA+0x60>)
 8002a20:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 8002a22:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 8002a24:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 8002a26:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002a28:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <JPEG_Decode_DMA+0x68>)
 8002a2a:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8002a2c:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <JPEG_Decode_DMA+0x6c>)
 8002a2e:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 8002a30:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <JPEG_Decode_DMA+0x70>)
 8002a32:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002a34:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002a36:	682a      	ldr	r2, [r5, #0]
 8002a38:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002a3c:	701c      	strb	r4, [r3, #0]
 8002a3e:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002a40:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002a44:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002a48:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a88 <JPEG_Decode_DMA+0x78>)
 8002a4e:	68d2      	ldr	r2, [r2, #12]
 8002a50:	436a      	muls	r2, r5
 8002a52:	9200      	str	r2, [sp, #0]
 8002a54:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f007 fe37 	bl	800a6cc <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8002a5e:	4620      	mov	r0, r4
 8002a60:	b003      	add	sp, #12
 8002a62:	bd30      	pop	{r4, r5, pc}
 8002a64:	24009f54 	.word	0x24009f54
 8002a68:	24009f30 	.word	0x24009f30
 8002a6c:	24009f40 	.word	0x24009f40
 8002a70:	24000924 	.word	0x24000924
 8002a74:	24009f50 	.word	0x24009f50
 8002a78:	24009f48 	.word	0x24009f48
 8002a7c:	24009f4c 	.word	0x24009f4c
 8002a80:	2400092c 	.word	0x2400092c
 8002a84:	24000010 	.word	0x24000010
 8002a88:	2400090c 	.word	0x2400090c

08002a8c <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002a8c:	684b      	ldr	r3, [r1, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d115      	bne.n	8002abe <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8002a92:	68cb      	ldr	r3, [r1, #12]
 8002a94:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002a96:	bf1e      	ittt	ne
 8002a98:	f023 030f 	bicne.w	r3, r3, #15
 8002a9c:	3310      	addne	r3, #16
 8002a9e:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8002aa0:	688b      	ldr	r3, [r1, #8]
 8002aa2:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002aa4:	bf1e      	ittt	ne
 8002aa6:	f023 030f 	bicne.w	r3, r3, #15
 8002aaa:	3310      	addne	r3, #16
 8002aac:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002aae:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002ab0:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002ab2:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002ab4:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002ab6:	4353      	muls	r3, r2
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8002af4 <HAL_JPEG_InfoReadyCallback+0x68>)
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 8002ac2:	68cb      	ldr	r3, [r1, #12]
 8002ac4:	071a      	lsls	r2, r3, #28
 8002ac6:	d003      	beq.n	8002ad0 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002ac8:	f023 030f 	bic.w	r3, r3, #15
 8002acc:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002ace:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002ad0:	688b      	ldr	r3, [r1, #8]
 8002ad2:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002ad4:	bf1e      	ittt	ne
 8002ad6:	f023 0307 	bicne.w	r3, r3, #7
 8002ada:	3308      	addne	r3, #8
 8002adc:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 8002ade:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1fc      	bne.n	8002ade <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002ae4:	68cb      	ldr	r3, [r1, #12]
 8002ae6:	0758      	lsls	r0, r3, #29
 8002ae8:	d0f2      	beq.n	8002ad0 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002aea:	f023 0307 	bic.w	r3, r3, #7
 8002aee:	3308      	adds	r3, #8
 8002af0:	e7ed      	b.n	8002ace <HAL_JPEG_InfoReadyCallback+0x42>
 8002af2:	bf00      	nop
 8002af4:	24009f38 	.word	0x24009f38

08002af8 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002af8:	4a0b      	ldr	r2, [pc, #44]	@ (8002b28 <HAL_JPEG_GetDataCallback+0x30>)
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	440b      	add	r3, r1
    {
 8002afe:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 8002b00:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8002b02:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <HAL_JPEG_GetDataCallback+0x34>)
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d20c      	bcs.n	8002b24 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002b0a:	4c09      	ldr	r4, [pc, #36]	@ (8002b30 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002b0c:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002b0e:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002b10:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002b14:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002b16:	bf28      	it	cs
 8002b18:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002b1c:	6021      	str	r1, [r4, #0]
        }
    }
 8002b1e:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002b20:	f007 be36 	b.w	800a790 <HAL_JPEG_ConfigInputBuffer>
    }
 8002b24:	bc30      	pop	{r4, r5}
 8002b26:	4770      	bx	lr
 8002b28:	24009f50 	.word	0x24009f50
 8002b2c:	24009f4c 	.word	0x24009f4c
 8002b30:	24009f48 	.word	0x24009f48

08002b34 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002b36:	4c20      	ldr	r4, [pc, #128]	@ (8002bb8 <HAL_JPEG_DataReadyCallback+0x84>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	4d20      	ldr	r5, [pc, #128]	@ (8002bbc <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002b3c:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002b3e:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002b40:	4f1f      	ldr	r7, [pc, #124]	@ (8002bc0 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002b4c:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc4 <HAL_JPEG_DataReadyCallback+0x90>)
 8002b50:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002b52:	6822      	ldr	r2, [r4, #0]
 8002b54:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002b58:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	440a      	add	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d901      	bls.n	8002b72 <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	5ceb      	ldrb	r3, [r5, r3]
 8002b78:	b133      	cbz	r3, 8002b88 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	f007 fdd9 	bl	800a734 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002b82:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <HAL_JPEG_DataReadyCallback+0x94>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 8002b92:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002b96:	6869      	ldr	r1, [r5, #4]
 8002b98:	435a      	muls	r2, r3
 8002b9a:	f007 fdfc 	bl	800a796 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_JPEG_DataReadyCallback+0x98>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	7a1a      	ldrb	r2, [r3, #8]
 8002ba4:	b93a      	cbnz	r2, 8002bb6 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002ba6:	7a9b      	ldrb	r3, [r3, #10]
 8002ba8:	b92b      	cbnz	r3, 8002bb6 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002baa:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <HAL_JPEG_DataReadyCallback+0x9c>)
 8002bac:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002bae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 8002bb2:	f00b bc4c 	b.w	800e44e <osSemaphoreRelease>
    }
 8002bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb8:	24009f30 	.word	0x24009f30
 8002bbc:	24000010 	.word	0x24000010
 8002bc0:	2400090c 	.word	0x2400090c
 8002bc4:	2400092c 	.word	0x2400092c
 8002bc8:	24009f40 	.word	0x24009f40
 8002bcc:	24009f34 	.word	0x24009f34
 8002bd0:	24000928 	.word	0x24000928

08002bd4 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd4:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002bd6:	e7fe      	b.n	8002bd6 <HAL_JPEG_ErrorCallback+0x2>

08002bd8 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002bd8:	4b01      	ldr	r3, [pc, #4]	@ (8002be0 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
    }
 8002bde:	4770      	bx	lr
 8002be0:	24009f44 	.word	0x24009f44

08002be4 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002be4:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002be6:	4d16      	ldr	r5, [pc, #88]	@ (8002c40 <JPEG_OutputHandler+0x5c>)
{
 8002be8:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002bea:	682b      	ldr	r3, [r5, #0]
 8002bec:	b113      	cbz	r3, 8002bf4 <JPEG_OutputHandler+0x10>
 8002bee:	4b15      	ldr	r3, [pc, #84]	@ (8002c44 <JPEG_OutputHandler+0x60>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	bb1b      	cbnz	r3, 8002c3c <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002bf4:	4b14      	ldr	r3, [pc, #80]	@ (8002c48 <JPEG_OutputHandler+0x64>)
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	7a03      	ldrb	r3, [r0, #8]
 8002bfa:	b963      	cbnz	r3, 8002c16 <JPEG_OutputHandler+0x32>
 8002bfc:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <JPEG_OutputHandler+0x68>)
 8002bfe:	4a14      	ldr	r2, [pc, #80]	@ (8002c50 <JPEG_OutputHandler+0x6c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	5cd3      	ldrb	r3, [r2, r3]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <JPEG_OutputHandler+0x32>
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <JPEG_OutputHandler+0x60>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b913      	cbnz	r3, 8002c16 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002c10:	6803      	ldr	r3, [r0, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002c16:	4a0f      	ldr	r2, [pc, #60]	@ (8002c54 <JPEG_OutputHandler+0x70>)
 8002c18:	6813      	ldr	r3, [r2, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10c      	bne.n	8002c38 <JPEG_OutputHandler+0x54>
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <JPEG_OutputHandler+0x74>)
 8002c20:	490b      	ldr	r1, [pc, #44]	@ (8002c50 <JPEG_OutputHandler+0x6c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	b933      	cbnz	r3, 8002c38 <JPEG_OutputHandler+0x54>
 8002c2a:	682b      	ldr	r3, [r5, #0]
 8002c2c:	b923      	cbnz	r3, 8002c38 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002c32:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002c34:	f007 ffdd 	bl	800abf2 <HAL_JPEG_Resume>
        return 1;
 8002c38:	2002      	movs	r0, #2
    }

    return 2;
}
 8002c3a:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	e7fc      	b.n	8002c3a <JPEG_OutputHandler+0x56>
 8002c40:	24009f44 	.word	0x24009f44
 8002c44:	24000920 	.word	0x24000920
 8002c48:	24009f34 	.word	0x24009f34
 8002c4c:	24000924 	.word	0x24000924
 8002c50:	24000010 	.word	0x24000010
 8002c54:	24009f40 	.word	0x24009f40
 8002c58:	24009f30 	.word	0x24009f30

08002c5c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	4605      	mov	r5, r0
    if (length == 0)
 8002c60:	2a00      	cmp	r2, #0
 8002c62:	d035      	beq.n	8002cd0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d033      	beq.n	8002cd0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002c68:	481a      	ldr	r0, [pc, #104]	@ (8002cd4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002c6a:	2403      	movs	r4, #3
 8002c6c:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002c6e:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002c70:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002c72:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002c76:	bf18      	it	ne
 8002c78:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002c7c:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002c7e:	bf18      	it	ne
 8002c80:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002c82:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002c84:	0924      	lsrs	r4, r4, #4
 8002c86:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002c88:	692c      	ldr	r4, [r5, #16]
 8002c8a:	f014 040f 	ands.w	r4, r4, #15
 8002c8e:	bf18      	it	ne
 8002c90:	f1c4 0410 	rsbne	r4, r4, #16
 8002c94:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002c96:	4810      	ldr	r0, [pc, #64]	@ (8002cd8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002c98:	f7ff feba 	bl	8002a10 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002c9c:	4c0f      	ldr	r4, [pc, #60]	@ (8002cdc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 8002c9e:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ca2:	4d0d      	ldr	r5, [pc, #52]	@ (8002cd8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002ca4:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f7ff ff9c 	bl	8002be4 <JPEG_OutputHandler>
 8002cac:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d105      	bne.n	8002cc0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	f00b fb9b 	bl	800e3f6 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d1ef      	bne.n	8002ca6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4a07      	ldr	r2, [pc, #28]	@ (8002ce8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002cca:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002ccc:	4a07      	ldr	r2, [pc, #28]	@ (8002cec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bd70      	pop	{r4, r5, r6, pc}
 8002cd2:	bf00      	nop
 8002cd4:	2400090c 	.word	0x2400090c
 8002cd8:	240005f4 	.word	0x240005f4
 8002cdc:	24009f3c 	.word	0x24009f3c
 8002ce0:	24009f34 	.word	0x24009f34
 8002ce4:	24000928 	.word	0x24000928
 8002ce8:	24009f44 	.word	0x24009f44
 8002cec:	24000920 	.word	0x24000920

08002cf0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf4:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002cf6:	6943      	ldr	r3, [r0, #20]
{
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	460f      	mov	r7, r1
 8002cfe:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002d00:	b92b      	cbnz	r3, 8002d0e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002d02:	4b29      	ldr	r3, [pc, #164]	@ (8002da8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002d04:	21b0      	movs	r1, #176	@ 0xb0
 8002d06:	4a29      	ldr	r2, [pc, #164]	@ (8002dac <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002d08:	4829      	ldr	r0, [pc, #164]	@ (8002db0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002d0a:	f022 fb09 	bl	8025320 <__assert_func>
    readData(currentMovieOffset, 8);
 8002d0e:	2208      	movs	r2, #8
 8002d10:	6981      	ldr	r1, [r0, #24]
 8002d12:	f7ff fcd7 	bl	80026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002d16:	69a6      	ldr	r6, [r4, #24]
 8002d18:	4620      	mov	r0, r4
 8002d1a:	4631      	mov	r1, r6
 8002d1c:	f7ff fcbf 	bl	800269e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002d20:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002d22:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff fcba 	bl	800269e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002d2a:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002d2c:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7ff fc9a 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002d34:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002d38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002d3a:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002d3c:	1842      	adds	r2, r0, r1
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d226      	bcs.n	8002d90 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002d42:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002d46:	459b      	cmp	fp, r3
 8002d48:	d117      	bne.n	8002d7a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002d4a:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002d4e:	459a      	cmp	sl, r3
 8002d50:	d113      	bne.n	8002d7a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002d52:	b190      	cbz	r0, 8002d7a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002d54:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002d56:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff fcb3 	bl	80026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002d60:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002d62:	462a      	mov	r2, r5
 8002d64:	4620      	mov	r0, r4
 8002d66:	f8cd 8000 	str.w	r8, [sp]
 8002d6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002d6e:	463b      	mov	r3, r7
 8002d70:	f7ff ff74 	bl	8002c5c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002d74:	6963      	ldr	r3, [r4, #20]
 8002d76:	3301      	adds	r3, #1
 8002d78:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002d7a:	69a3      	ldr	r3, [r4, #24]
 8002d7c:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002d7e:	b905      	cbnz	r5, 8002d82 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002d80:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d82:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002d84:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d86:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002d8a:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d8c:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002d8e:	d109      	bne.n	8002da4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002d90:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002d92:	2001      	movs	r0, #1
        frameNumber = 1;
 8002d94:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002d96:	6a23      	ldr	r3, [r4, #32]
 8002d98:	61a3      	str	r3, [r4, #24]
}
 8002d9a:	f080 0001 	eor.w	r0, r0, #1
 8002d9e:	b005      	add	sp, #20
 8002da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002da4:	2000      	movs	r0, #0
 8002da6:	e7f8      	b.n	8002d9a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002da8:	080268da 	.word	0x080268da
 8002dac:	080269f9 	.word	0x080269f9
 8002db0:	08026823 	.word	0x08026823

08002db4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002db8:	6981      	ldr	r1, [r0, #24]
{
 8002dba:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	f7ff fc81 	bl	80026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002dc2:	69a7      	ldr	r7, [r4, #24]
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	1d39      	adds	r1, r7, #4
 8002dc8:	f7ff fc4e 	bl	8002668 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002dcc:	f107 0108 	add.w	r1, r7, #8
 8002dd0:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002dd2:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f7ff fc75 	bl	80026c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002dda:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002ddc:	b16e      	cbz	r6, 8002dfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002dde:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002de0:	4c07      	ldr	r4, [pc, #28]	@ (8002e00 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002de2:	4d08      	ldr	r5, [pc, #32]	@ (8002e04 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002de4:	4633      	mov	r3, r6
 8002de6:	4807      	ldr	r0, [pc, #28]	@ (8002e04 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002de8:	f7ff fe12 	bl	8002a10 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002dec:	4628      	mov	r0, r5
 8002dee:	f7ff fef9 	bl	8002be4 <JPEG_OutputHandler>
 8002df2:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f8      	beq.n	8002dec <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	24009f3c 	.word	0x24009f3c
 8002e04:	240005f4 	.word	0x240005f4

08002e08 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002e08:	4a1b      	ldr	r2, [pc, #108]	@ (8002e78 <DMA2D_CopyBuffer+0x70>)
 8002e0a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 8002e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002e10:	ea4f 130c 	mov.w	r3, ip, lsl #4
 8002e14:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002e16:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002e18:	4e18      	ldr	r6, [pc, #96]	@ (8002e7c <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002e1a:	4f19      	ldr	r7, [pc, #100]	@ (8002e80 <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002e1c:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 8002e20:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002e24:	434d      	muls	r5, r1
 8002e26:	6911      	ldr	r1, [r2, #16]
 8002e28:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002e2c:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002e2e:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002e30:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002e32:	683f      	ldr	r7, [r7, #0]
 8002e34:	68d3      	ldr	r3, [r2, #12]
 8002e36:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002e38:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002e3a:	45bc      	cmp	ip, r7
 8002e3c:	d317      	bcc.n	8002e6e <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002e3e:	6892      	ldr	r2, [r2, #8]
 8002e40:	f1c2 0210 	rsb	r2, r2, #16
 8002e44:	430a      	orrs	r2, r1
 8002e46:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002e48:	4a0e      	ldr	r2, [pc, #56]	@ (8002e84 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002e4a:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002e4e:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002e50:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002e52:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <DMA2D_CopyBuffer+0x74>)
 8002e54:	4421      	add	r1, r4
 8002e56:	4429      	add	r1, r5
 8002e58:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002e5a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <DMA2D_CopyBuffer+0x80>)
 8002e62:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002e64:	6843      	ldr	r3, [r0, #4]
 8002e66:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002e68:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <DMA2D_CopyBuffer+0x84>)
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002e6e:	f041 0110 	orr.w	r1, r1, #16
 8002e72:	6471      	str	r1, [r6, #68]	@ 0x44
 8002e74:	e7e8      	b.n	8002e48 <DMA2D_CopyBuffer+0x40>
 8002e76:	bf00      	nop
 8002e78:	2400090c 	.word	0x2400090c
 8002e7c:	52001000 	.word	0x52001000
 8002e80:	24009f38 	.word	0x24009f38
 8002e84:	24009f54 	.word	0x24009f54
 8002e88:	ff09000b 	.word	0xff09000b
 8002e8c:	00012301 	.word	0x00012301

08002e90 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002e92:	2200      	movs	r2, #0
 8002e94:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002e96:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002e98:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002e9a:	3101      	adds	r1, #1
 8002e9c:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	2901      	cmp	r1, #1
 8002ea2:	d900      	bls.n	8002ea6 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002ea4:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002ea6:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <DMA2D_ExternalJobCompleted+0x38>)
 8002ea8:	4a08      	ldr	r2, [pc, #32]	@ (8002ecc <DMA2D_ExternalJobCompleted+0x3c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68d2      	ldr	r2, [r2, #12]
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	68c2      	ldr	r2, [r0, #12]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <DMA2D_ExternalJobCompleted+0x40>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <DMA2D_ExternalJobCompleted+0x44>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	f00b bac5 	b.w	800e44e <osSemaphoreRelease>
 8002ec4:	24000924 	.word	0x24000924
 8002ec8:	24009f38 	.word	0x24009f38
 8002ecc:	2400090c 	.word	0x2400090c
 8002ed0:	24000920 	.word	0x24000920
 8002ed4:	24000928 	.word	0x24000928

08002ed8 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2200      	movs	r2, #0
{
 8002edc:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002ede:	4608      	mov	r0, r1
 8002ee0:	f00b fa3f 	bl	800e362 <osSemaphoreNew>
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f10 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002ee6:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002ee8:	b928      	cbnz	r0, 8002ef6 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002eea:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002eec:	2128      	movs	r1, #40	@ 0x28
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002ef0:	480a      	ldr	r0, [pc, #40]	@ (8002f1c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002ef2:	f022 fa15 	bl	8025320 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2104      	movs	r1, #4
 8002efa:	2001      	movs	r0, #1
 8002efc:	f00b fad0 	bl	800e4a0 <osMessageQueueNew>
 8002f00:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002f02:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002f04:	b918      	cbnz	r0, 8002f0e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002f08:	212c      	movs	r1, #44	@ 0x2c
 8002f0a:	4a03      	ldr	r2, [pc, #12]	@ (8002f18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002f0c:	e7f0      	b.n	8002ef0 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002f0e:	bd08      	pop	{r3, pc}
 8002f10:	24009f5c 	.word	0x24009f5c
 8002f14:	08026a98 	.word	0x08026a98
 8002f18:	08026ae1 	.word	0x08026ae1
 8002f1c:	08026b10 	.word	0x08026b10
 8002f20:	24009f58 	.word	0x24009f58
 8002f24:	08026b68 	.word	0x08026b68

08002f28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002f28:	4b02      	ldr	r3, [pc, #8]	@ (8002f34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002f2a:	f04f 31ff 	mov.w	r1, #4294967295
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	f00b ba61 	b.w	800e3f6 <osSemaphoreAcquire>
 8002f34:	24009f5c 	.word	0x24009f5c

08002f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002f38:	4b01      	ldr	r3, [pc, #4]	@ (8002f40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	f00b ba87 	b.w	800e44e <osSemaphoreRelease>
 8002f40:	24009f5c 	.word	0x24009f5c

08002f44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002f44:	4b02      	ldr	r3, [pc, #8]	@ (8002f50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002f46:	2100      	movs	r1, #0
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	f00b ba54 	b.w	800e3f6 <osSemaphoreAcquire>
 8002f4e:	bf00      	nop
 8002f50:	24009f5c 	.word	0x24009f5c

08002f54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002f54:	f7ff bff0 	b.w	8002f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002f58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	4803      	ldr	r0, [pc, #12]	@ (8002f68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002f5c:	4903      	ldr	r1, [pc, #12]	@ (8002f6c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6800      	ldr	r0, [r0, #0]
 8002f62:	f00b bad8 	b.w	800e516 <osMessageQueuePut>
 8002f66:	bf00      	nop
 8002f68:	24009f58 	.word	0x24009f58
 8002f6c:	24000030 	.word	0x24000030

08002f70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002f70:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002f72:	2300      	movs	r3, #0
 8002f74:	4c07      	ldr	r4, [pc, #28]	@ (8002f94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002f76:	a901      	add	r1, sp, #4
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6820      	ldr	r0, [r4, #0]
 8002f7c:	f00b fafc 	bl	800e578 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002f80:	f04f 33ff 	mov.w	r3, #4294967295
 8002f84:	2200      	movs	r2, #0
 8002f86:	a901      	add	r1, sp, #4
 8002f88:	6820      	ldr	r0, [r4, #0]
 8002f8a:	f00b faf5 	bl	800e578 <osMessageQueueGet>
}
 8002f8e:	b002      	add	sp, #8
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	bf00      	nop
 8002f94:	24009f58 	.word	0x24009f58

08002f98 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002f98:	6803      	ldr	r3, [r0, #0]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9c:	4718      	bx	r3

08002f9e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	4770      	bx	lr

08002fa2 <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002fa2:	e7fe      	b.n	8002fa2 <DMA2D_XferErrorCallback>

08002fa4 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002fa4:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002fa8:	4770      	bx	lr
	...

08002fac <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002fac:	b510      	push	{r4, lr}
 8002fae:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002fb8:	f00b f991 	bl	800e2de <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002fbc:	6860      	ldr	r0, [r4, #4]
 8002fbe:	6803      	ldr	r3, [r0, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4798      	blx	r3
 8002fc4:	b978      	cbnz	r0, 8002fe6 <_ZN8STM32DMA5startEv+0x3a>
 8002fc6:	7a63      	ldrb	r3, [r4, #9]
 8002fc8:	b16b      	cbz	r3, 8002fe6 <_ZN8STM32DMA5startEv+0x3a>
 8002fca:	7a23      	ldrb	r3, [r4, #8]
 8002fcc:	b95b      	cbnz	r3, 8002fe6 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002fce:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002fda:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002fe2:	f00b b99f 	b.w	800e324 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002fe6:	490b      	ldr	r1, [pc, #44]	@ (8003014 <_ZN8STM32DMA5startEv+0x68>)
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8003018 <_ZN8STM32DMA5startEv+0x6c>)
 8002fea:	680b      	ldr	r3, [r1, #0]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d1f2      	bne.n	8002fda <_ZN8STM32DMA5startEv+0x2e>
 8002ff4:	7a20      	ldrb	r0, [r4, #8]
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d1ef      	bne.n	8002fda <_ZN8STM32DMA5startEv+0x2e>
 8002ffa:	7aa0      	ldrb	r0, [r4, #10]
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d1ec      	bne.n	8002fda <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003000:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8003002:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003006:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 800300a:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800300c:	f7ff fefc 	bl	8002e08 <DMA2D_CopyBuffer>
    }
 8003010:	e7e3      	b.n	8002fda <_ZN8STM32DMA5startEv+0x2e>
 8003012:	bf00      	nop
 8003014:	24000924 	.word	0x24000924
 8003018:	24000010 	.word	0x24000010

0800301c <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003022:	6003      	str	r3, [r0, #0]
 8003024:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <_ZN8STM32DMAD1Ev+0x1c>)
 8003026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800302a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800302e:	f3bf 8f6f 	isb	sy
}
 8003032:	4770      	bx	lr
 8003034:	08026d10 	.word	0x08026d10
 8003038:	e000e100 	.word	0xe000e100

0800303c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800303c:	b510      	push	{r4, lr}
 800303e:	4604      	mov	r4, r0
}
 8003040:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8003044:	f7ff ffea 	bl	800301c <_ZN8STM32DMAD1Ev>
 8003048:	4620      	mov	r0, r4
 800304a:	f021 fdf0 	bl	8024c2e <_ZdlPvj>
 800304e:	4620      	mov	r0, r4
 8003050:	bd10      	pop	{r4, pc}
	...

08003054 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003054:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8003056:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003058:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800305c:	f042 0210 	orr.w	r2, r2, #16
 8003060:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8003064:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003068:	f002 0210 	and.w	r2, r2, #16
 800306c:	9201      	str	r2, [sp, #4]
 800306e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003070:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003072:	f042 0210 	orr.w	r2, r2, #16
 8003076:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003078:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800307a:	f022 0210 	bic.w	r2, r2, #16
 800307e:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003080:	4b06      	ldr	r3, [pc, #24]	@ (800309c <_ZN8STM32DMA10initializeEv+0x48>)
 8003082:	4a07      	ldr	r2, [pc, #28]	@ (80030a0 <_ZN8STM32DMA10initializeEv+0x4c>)
 8003084:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8003086:	4a07      	ldr	r2, [pc, #28]	@ (80030a4 <_ZN8STM32DMA10initializeEv+0x50>)
 8003088:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <_ZN8STM32DMA10initializeEv+0x54>)
 800308c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003090:	609a      	str	r2, [r3, #8]
}
 8003092:	b002      	add	sp, #8
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	58024400 	.word	0x58024400
 800309c:	24000668 	.word	0x24000668
 80030a0:	080032f1 	.word	0x080032f1
 80030a4:	08002fa3 	.word	0x08002fa3
 80030a8:	e000e100 	.word	0xe000e100

080030ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 80030ac:	b508      	push	{r3, lr}
    switch (format)
 80030ae:	280a      	cmp	r0, #10
 80030b0:	d809      	bhi.n	80030c6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 80030b2:	e8df f000 	tbb	[pc, r0]
 80030b6:	1006      	.short	0x1006
 80030b8:	0808080e 	.word	0x0808080e
 80030bc:	10101008 	.word	0x10101008
 80030c0:	10          	.byte	0x10
 80030c1:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80030c2:	2002      	movs	r0, #2
}
 80030c4:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 80030c8:	2191      	movs	r1, #145	@ 0x91
 80030ca:	4a05      	ldr	r2, [pc, #20]	@ (80030e0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 80030cc:	4805      	ldr	r0, [pc, #20]	@ (80030e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 80030ce:	f022 f927 	bl	8025320 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80030d2:	2000      	movs	r0, #0
 80030d4:	e7f6      	b.n	80030c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 80030d6:	2001      	movs	r0, #1
    return dma2dColorMode;
 80030d8:	e7f4      	b.n	80030c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 80030da:	bf00      	nop
 80030dc:	08026baa 	.word	0x08026baa
 80030e0:	08026bc5 	.word	0x08026bc5
 80030e4:	08026c10 	.word	0x08026c10

080030e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80030ec:	7f88      	ldrb	r0, [r1, #30]
 80030ee:	f7ff ffdd 	bl	80030ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80030f2:	4b12      	ldr	r3, [pc, #72]	@ (800313c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030f4:	8aa5      	ldrh	r5, [r4, #20]
 80030f6:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80030f8:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030fa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030fe:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003100:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003102:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003104:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003106:	1b52      	subs	r2, r2, r5
 8003108:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800310a:	6825      	ldr	r5, [r4, #0]
 800310c:	2d08      	cmp	r5, #8
 800310e:	d10e      	bne.n	800312e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003110:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003112:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003114:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8003116:	4a0a      	ldr	r2, [pc, #40]	@ (8003140 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8003118:	7f20      	ldrb	r0, [r4, #28]
 800311a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800311e:	61da      	str	r2, [r3, #28]
        return color;
 8003120:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003122:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8003124:	4a07      	ldr	r2, [pc, #28]	@ (8003144 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003126:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003128:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 800312a:	601a      	str	r2, [r3, #0]
    }
}
 800312c:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800312e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003130:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8003132:	611a      	str	r2, [r3, #16]
 8003134:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8003136:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8003138:	4a03      	ldr	r2, [pc, #12]	@ (8003148 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 800313a:	e7f6      	b.n	800312a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800313c:	52001000 	.word	0x52001000
 8003140:	00010009 	.word	0x00010009
 8003144:	00022301 	.word	0x00022301
 8003148:	00032301 	.word	0x00032301

0800314c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 800314c:	b508      	push	{r3, lr}
    switch (format)
 800314e:	280b      	cmp	r0, #11
 8003150:	d80b      	bhi.n	800316a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8003152:	e8df f000 	tbb	[pc, r0]
 8003156:	1206      	.short	0x1206
 8003158:	0a0a0a10 	.word	0x0a0a0a10
 800315c:	0808080a 	.word	0x0808080a
 8003160:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003162:	2002      	movs	r0, #2
}
 8003164:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8003166:	2005      	movs	r0, #5
        break;
 8003168:	e7fc      	b.n	8003164 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 800316a:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 800316c:	2170      	movs	r1, #112	@ 0x70
 800316e:	4a05      	ldr	r2, [pc, #20]	@ (8003184 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8003170:	4805      	ldr	r0, [pc, #20]	@ (8003188 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8003172:	f022 f8d5 	bl	8025320 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003176:	2000      	movs	r0, #0
 8003178:	e7f4      	b.n	8003164 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 800317a:	2001      	movs	r0, #1
    return dma2dColorMode;
 800317c:	e7f2      	b.n	8003164 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800317e:	bf00      	nop
 8003180:	08026baa 	.word	0x08026baa
 8003184:	08026c66 	.word	0x08026c66
 8003188:	08026c10 	.word	0x08026c10

0800318c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 800318c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003190:	7f4f      	ldrb	r7, [r1, #29]
{
 8003192:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003194:	4638      	mov	r0, r7
 8003196:	f7ff ffd9 	bl	800314c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800319a:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800319e:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80031a0:	4628      	mov	r0, r5
 80031a2:	f7ff ffd3 	bl	800314c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 80031a6:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80031a8:	4628      	mov	r0, r5
 80031aa:	f7ff ff7f 	bl	80030ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80031ae:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 80031b2:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80031b6:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80031ba:	4b45      	ldr	r3, [pc, #276]	@ (80032d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80031bc:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80031be:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80031c0:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80031c2:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80031c4:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80031c6:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80031ca:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80031cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80031d0:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80031d4:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80031d6:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80031da:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80031dc:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80031de:	f8d9 4000 	ldr.w	r4, [r9]
 80031e2:	f899 201c 	ldrb.w	r2, [r9, #28]
 80031e6:	2c80      	cmp	r4, #128	@ 0x80
 80031e8:	d022      	beq.n	8003230 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 80031ea:	d80f      	bhi.n	800320c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 80031ec:	2c20      	cmp	r4, #32
 80031ee:	d066      	beq.n	80032be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80031f0:	2c40      	cmp	r4, #64	@ 0x40
 80031f2:	d064      	beq.n	80032be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80031f4:	2c04      	cmp	r4, #4
 80031f6:	d05c      	beq.n	80032b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031f8:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 80031fc:	4b34      	ldr	r3, [pc, #208]	@ (80032d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 80031fe:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003200:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003204:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003206:	d060      	beq.n	80032ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003208:	4a32      	ldr	r2, [pc, #200]	@ (80032d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800320a:	e03f      	b.n	800328c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 800320c:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8003210:	d004      	beq.n	800321c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8003212:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8003216:	d1ef      	bne.n	80031f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003218:	482f      	ldr	r0, [pc, #188]	@ (80032d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 800321a:	e000      	b.n	800321e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800321c:	482f      	ldr	r0, [pc, #188]	@ (80032dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800321e:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8003222:	61da      	str	r2, [r3, #28]
 8003224:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003228:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800322a:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800322c:	6159      	str	r1, [r3, #20]
 800322e:	e02c      	b.n	800328a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003230:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003234:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003238:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800323c:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800323e:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003240:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003242:	1d21      	adds	r1, r4, #4
 8003244:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8003246:	7821      	ldrb	r1, [r4, #0]
 8003248:	b141      	cbz	r1, 800325c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800324a:	2901      	cmp	r1, #1
 800324c:	d021      	beq.n	8003292 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8003250:	f240 110b 	movw	r1, #267	@ 0x10b
 8003254:	4a23      	ldr	r2, [pc, #140]	@ (80032e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8003256:	4824      	ldr	r0, [pc, #144]	@ (80032e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8003258:	f022 f862 	bl	8025320 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	8861      	ldrh	r1, [r4, #2]
 8003260:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003264:	3901      	subs	r1, #1
 8003266:	f022 0210 	bic.w	r2, r2, #16
 800326a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800326e:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8003270:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003272:	4b17      	ldr	r3, [pc, #92]	@ (80032d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003274:	69d9      	ldr	r1, [r3, #28]
 8003276:	f041 0120 	orr.w	r1, r1, #32
 800327a:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800327c:	69d9      	ldr	r1, [r3, #28]
 800327e:	0689      	lsls	r1, r1, #26
 8003280:	d4fc      	bmi.n	800327c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003282:	2110      	movs	r1, #16
 8003284:	6099      	str	r1, [r3, #8]
            if (blend)
 8003286:	2a00      	cmp	r2, #0
 8003288:	d0be      	beq.n	8003208 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800328a:	4a18      	ldr	r2, [pc, #96]	@ (80032ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800328c:	601a      	str	r2, [r3, #0]
}
 800328e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003292:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8003294:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003296:	8860      	ldrh	r0, [r4, #2]
 8003298:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 800329c:	bf18      	it	ne
 800329e:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80032a0:	3801      	subs	r0, #1
 80032a2:	f021 0110 	bic.w	r1, r1, #16
 80032a6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80032aa:	f041 0110 	orr.w	r1, r1, #16
 80032ae:	61d9      	str	r1, [r3, #28]
                break;
 80032b0:	e7df      	b.n	8003272 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80032b2:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80032b6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80032ba:	61da      	str	r2, [r3, #28]
 80032bc:	e7b5      	b.n	800322a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 80032be:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80032c2:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80032c4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80032c8:	e7f7      	b.n	80032ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80032ca:	f242 3201 	movw	r2, #8961	@ 0x2301
 80032ce:	e7dd      	b.n	800328c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80032d0:	52001000 	.word	0x52001000
 80032d4:	00012301 	.word	0x00012301
 80032d8:	00020009 	.word	0x00020009
 80032dc:	0002000a 	.word	0x0002000a
 80032e0:	08026cb0 	.word	0x08026cb0
 80032e4:	08026cca 	.word	0x08026cca
 80032e8:	08026c10 	.word	0x08026c10
 80032ec:	00022301 	.word	0x00022301

080032f0 <DMA2D_XferCpltCallback>:
 80032f0:	4b02      	ldr	r3, [pc, #8]	@ (80032fc <DMA2D_XferCpltCallback+0xc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80032f6:	6803      	ldr	r3, [r0, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	4718      	bx	r3
 80032fc:	24028e2c 	.word	0x24028e2c

08003300 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8003300:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8003304:	b510      	push	{r4, lr}
 8003306:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8003308:	b9d3      	cbnz	r3, 8003340 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 800330a:	6803      	ldr	r3, [r0, #0]
 800330c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330e:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8003310:	4919      	ldr	r1, [pc, #100]	@ (8003378 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8003312:	4a1a      	ldr	r2, [pc, #104]	@ (800337c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003314:	680b      	ldr	r3, [r1, #0]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	5cd3      	ldrb	r3, [r2, r3]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d12a      	bne.n	8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800331e:	4818      	ldr	r0, [pc, #96]	@ (8003380 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8003320:	6800      	ldr	r0, [r0, #0]
 8003322:	bb38      	cbnz	r0, 8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003324:	7a20      	ldrb	r0, [r4, #8]
 8003326:	bb28      	cbnz	r0, 8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003328:	7aa0      	ldrb	r0, [r4, #10]
 800332a:	bb18      	cbnz	r0, 8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800332c:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 800332e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8003332:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003334:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8003338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800333c:	f7ff bd64 	b.w	8002e08 <DMA2D_CopyBuffer>
        if (isRunning)
 8003340:	7a03      	ldrb	r3, [r0, #8]
 8003342:	b143      	cbz	r3, 8003356 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8003344:	2300      	movs	r3, #0
 8003346:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 800334e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8003352:	f7ff fd9d 	bl	8002e90 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8003356:	6860      	ldr	r0, [r4, #4]
 8003358:	6803      	ldr	r3, [r0, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4798      	blx	r3
 800335e:	b948      	cbnz	r0, 8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003360:	7a63      	ldrb	r3, [r4, #9]
 8003362:	b13b      	cbz	r3, 8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8003364:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8003366:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 800336a:	4620      	mov	r0, r4
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800336e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8003372:	4718      	bx	r3
    }
 8003374:	bd10      	pop	{r4, pc}
 8003376:	bf00      	nop
 8003378:	24000924 	.word	0x24000924
 800337c:	24000010 	.word	0x24000010
 8003380:	24000920 	.word	0x24000920

08003384 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003388:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <_ZN8STM32DMAC1Ev+0x40>)
 800338a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800338c:	2600      	movs	r6, #0
 800338e:	4625      	mov	r5, r4
 8003390:	2260      	movs	r2, #96	@ 0x60
 8003392:	6060      	str	r0, [r4, #4]
 8003394:	7226      	strb	r6, [r4, #8]
 8003396:	7266      	strb	r6, [r4, #9]
 8003398:	f845 3b20 	str.w	r3, [r5], #32
 800339c:	4629      	mov	r1, r5
 800339e:	f00e fa85 	bl	80118ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80033a2:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 80033a6:	60ee      	str	r6, [r5, #12]
 80033a8:	3524      	adds	r5, #36	@ 0x24
 80033aa:	429d      	cmp	r5, r3
 80033ac:	d1fb      	bne.n	80033a6 <_ZN8STM32DMAC1Ev+0x22>
 80033ae:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 80033b2:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 80033b4:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 80033b8:	f00a ff5c 	bl	800e274 <osMutexNew>
 80033bc:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 80033c0:	4620      	mov	r0, r4
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
 80033c4:	08026d10 	.word	0x08026d10

080033c8 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80033c8:	4b03      	ldr	r3, [pc, #12]	@ (80033d8 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	07d2      	lsls	r2, r2, #31
 80033ce:	d4fc      	bmi.n	80033ca <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033d0:	2223      	movs	r2, #35	@ 0x23
 80033d2:	609a      	str	r2, [r3, #8]
}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	52001000 	.word	0x52001000

080033dc <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033dc:	4a0b      	ldr	r2, [pc, #44]	@ (800340c <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 80033de:	6953      	ldr	r3, [r2, #20]
 80033e0:	03db      	lsls	r3, r3, #15
 80033e2:	d511      	bpl.n	8003408 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80033e4:	2900      	cmp	r1, #0
 80033e6:	dd0f      	ble.n	8003408 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80033e8:	f000 031f 	and.w	r3, r0, #31
 80033ec:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80033ee:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80033f2:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80033f4:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80033f8:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 80033fa:	1a0b      	subs	r3, r1, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	dcf9      	bgt.n	80033f4 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8003400:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003404:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8003410:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003412:	4c10      	ldr	r4, [pc, #64]	@ (8003454 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8003414:	6825      	ldr	r5, [r4, #0]
 8003416:	07ed      	lsls	r5, r5, #31
 8003418:	d4fc      	bmi.n	8003414 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800341a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800341c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800341e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003420:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003422:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003426:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800342a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800342c:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800342e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8003430:	d00c      	beq.n	800344c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003432:	4909      	ldr	r1, [pc, #36]	@ (8003458 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003434:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003438:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800343a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800343e:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003442:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8003444:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8003446:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003448:	6023      	str	r3, [r4, #0]
    }
}
 800344a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800344c:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800344e:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8003450:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003452:	e7f9      	b.n	8003448 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8003454:	52001000 	.word	0x52001000
 8003458:	00010009 	.word	0x00010009
 800345c:	00020001 	.word	0x00020001
 8003460:	00030001 	.word	0x00030001

08003464 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8003464:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003466:	4c0e      	ldr	r4, [pc, #56]	@ (80034a0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8003468:	6825      	ldr	r5, [r4, #0]
 800346a:	07ed      	lsls	r5, r5, #31
 800346c:	d4fc      	bmi.n	8003468 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800346e:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003470:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8003472:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003474:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003476:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800347a:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800347e:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003480:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003482:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003484:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8003486:	d007      	beq.n	8003498 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003488:	4a06      	ldr	r2, [pc, #24]	@ (80034a4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 800348a:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 800348e:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003490:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003492:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003494:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8003496:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003498:	4b03      	ldr	r3, [pc, #12]	@ (80034a8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 800349a:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 800349c:	6025      	str	r5, [r4, #0]
}
 800349e:	e7fa      	b.n	8003496 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 80034a0:	52001000 	.word	0x52001000
 80034a4:	00020001 	.word	0x00020001
 80034a8:	ff020001 	.word	0xff020001

080034ac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 80034ac:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80034ae:	4c0b      	ldr	r4, [pc, #44]	@ (80034dc <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 80034b0:	6825      	ldr	r5, [r4, #0]
 80034b2:	07ed      	lsls	r5, r5, #31
 80034b4:	d4fc      	bmi.n	80034b0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80034b6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80034b8:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80034ba:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80034bc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80034be:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80034c4:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80034c6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80034c8:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80034ca:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80034cc:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80034ce:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80034d0:	4b03      	ldr	r3, [pc, #12]	@ (80034e0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80034d2:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80034d4:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80034d6:	6023      	str	r3, [r4, #0]
}
 80034d8:	bd30      	pop	{r4, r5, pc}
 80034da:	bf00      	nop
 80034dc:	52001000 	.word	0x52001000
 80034e0:	00020001 	.word	0x00020001

080034e4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80034e4:	2001      	movs	r0, #1
 80034e6:	4770      	bx	lr

080034e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80034e8:	200c      	movs	r0, #12
 80034ea:	4770      	bx	lr

080034ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80034ec:	230c      	movs	r3, #12
 80034ee:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80034f2:	3008      	adds	r0, #8
 80034f4:	4770      	bx	lr

080034f6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80034f6:	230c      	movs	r3, #12
 80034f8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80034fc:	3008      	adds	r0, #8
 80034fe:	4770      	bx	lr

08003500 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003500:	2001      	movs	r0, #1
 8003502:	4770      	bx	lr

08003504 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003504:	f643 30b4 	movw	r0, #15284	@ 0x3bb4
 8003508:	4770      	bx	lr

0800350a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800350a:	f643 33b4 	movw	r3, #15284	@ 0x3bb4
 800350e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003512:	3008      	adds	r0, #8
 8003514:	4770      	bx	lr

08003516 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003516:	f643 33b4 	movw	r3, #15284	@ 0x3bb4
 800351a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800351e:	3008      	adds	r0, #8
 8003520:	4770      	bx	lr

08003522 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003522:	2001      	movs	r0, #1
 8003524:	4770      	bx	lr

08003526 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003526:	2010      	movs	r0, #16
 8003528:	4770      	bx	lr

0800352a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800352a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800352e:	3008      	adds	r0, #8
 8003530:	4770      	bx	lr

08003532 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003532:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003536:	3008      	adds	r0, #8
 8003538:	4770      	bx	lr

0800353a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 800353a:	4608      	mov	r0, r1
 800353c:	f000 be56 	b.w	80041ec <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08003540 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003540:	4b03      	ldr	r3, [pc, #12]	@ (8003550 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003542:	b510      	push	{r4, lr}
 8003544:	4604      	mov	r4, r0
 8003546:	6003      	str	r3, [r0, #0]
 8003548:	f00d f815 	bl	8010576 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800354c:	4620      	mov	r0, r4
 800354e:	bd10      	pop	{r4, pc}
 8003550:	08026dc8 	.word	0x08026dc8

08003554 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003554:	b510      	push	{r4, lr}
 8003556:	4604      	mov	r4, r0
 8003558:	f7ff fff2 	bl	8003540 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800355c:	2114      	movs	r1, #20
 800355e:	4620      	mov	r0, r4
 8003560:	f021 fb65 	bl	8024c2e <_ZdlPvj>
 8003564:	4620      	mov	r0, r4
 8003566:	bd10      	pop	{r4, pc}

08003568 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003568:	4b03      	ldr	r3, [pc, #12]	@ (8003578 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800356a:	b510      	push	{r4, lr}
 800356c:	4604      	mov	r4, r0
 800356e:	6003      	str	r3, [r0, #0]
 8003570:	f00d f801 	bl	8010576 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003574:	4620      	mov	r0, r4
 8003576:	bd10      	pop	{r4, pc}
 8003578:	08026d94 	.word	0x08026d94

0800357c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800357c:	b510      	push	{r4, lr}
 800357e:	4604      	mov	r4, r0
 8003580:	f7ff fff2 	bl	8003568 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003584:	f643 31bc 	movw	r1, #15292	@ 0x3bbc
 8003588:	4620      	mov	r0, r4
 800358a:	f021 fb50 	bl	8024c2e <_ZdlPvj>
 800358e:	4620      	mov	r0, r4
 8003590:	bd10      	pop	{r4, pc}
	...

08003594 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003594:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003596:	b510      	push	{r4, lr}
 8003598:	4604      	mov	r4, r0
 800359a:	6003      	str	r3, [r0, #0]
 800359c:	f00c ffeb 	bl	8010576 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80035a0:	4620      	mov	r0, r4
 80035a2:	bd10      	pop	{r4, pc}
 80035a4:	08026d60 	.word	0x08026d60

080035a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80035a8:	b510      	push	{r4, lr}
 80035aa:	4604      	mov	r4, r0
 80035ac:	f7ff fff2 	bl	8003594 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80035b0:	2118      	movs	r1, #24
 80035b2:	4620      	mov	r0, r4
 80035b4:	f021 fb3b 	bl	8024c2e <_ZdlPvj>
 80035b8:	4620      	mov	r0, r4
 80035ba:	bd10      	pop	{r4, pc}

080035bc <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80035bc:	4b09      	ldr	r3, [pc, #36]	@ (80035e4 <_ZN12FrontendHeapD1Ev+0x28>)
 80035be:	b510      	push	{r4, lr}
 80035c0:	4604      	mov	r4, r0
 80035c2:	6003      	str	r3, [r0, #0]
 80035c4:	f500 506f 	add.w	r0, r0, #15296	@ 0x3bc0
 80035c8:	3028      	adds	r0, #40	@ 0x28
 80035ca:	f7ff ffb9 	bl	8003540 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80035ce:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80035d2:	f7ff ffc9 	bl	8003568 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80035d6:	f104 0014 	add.w	r0, r4, #20
 80035da:	f7ff ffdb 	bl	8003594 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80035de:	4620      	mov	r0, r4
 80035e0:	bd10      	pop	{r4, pc}
 80035e2:	bf00      	nop
 80035e4:	08026dfc 	.word	0x08026dfc

080035e8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80035e8:	b508      	push	{r3, lr}
 80035ea:	4802      	ldr	r0, [pc, #8]	@ (80035f4 <__tcf_0+0xc>)
 80035ec:	f7ff ffe6 	bl	80035bc <_ZN12FrontendHeapD1Ev>
 80035f0:	bd08      	pop	{r3, pc}
 80035f2:	bf00      	nop
 80035f4:	2400ae18 	.word	0x2400ae18

080035f8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80035f8:	b510      	push	{r4, lr}
 80035fa:	4604      	mov	r4, r0
 80035fc:	f7ff ffde 	bl	80035bc <_ZN12FrontendHeapD1Ev>
 8003600:	f643 5160 	movw	r1, #15712	@ 0x3d60
 8003604:	4620      	mov	r0, r4
 8003606:	f021 fb12 	bl	8024c2e <_ZdlPvj>
 800360a:	4620      	mov	r0, r4
 800360c:	bd10      	pop	{r4, pc}
	...

08003610 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003610:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003614:	f000 fc60 	bl	8003ed8 <_ZN14BitmapDatabase11getInstanceEv>
 8003618:	2400      	movs	r4, #0
 800361a:	4605      	mov	r5, r0
 800361c:	f000 fc60 	bl	8003ee0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003620:	4623      	mov	r3, r4
 8003622:	4601      	mov	r1, r0
 8003624:	4622      	mov	r2, r4
 8003626:	4628      	mov	r0, r5
 8003628:	9400      	str	r4, [sp, #0]
 800362a:	f016 fd7b 	bl	801a124 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800362e:	4b27      	ldr	r3, [pc, #156]	@ (80036cc <touchgfx_init+0xbc>)
 8003630:	4a27      	ldr	r2, [pc, #156]	@ (80036d0 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8003632:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8003634:	4d27      	ldr	r5, [pc, #156]	@ (80036d4 <touchgfx_init+0xc4>)
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f002 f81e 	bl	8005678 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 800363c:	4b26      	ldr	r3, [pc, #152]	@ (80036d8 <touchgfx_init+0xc8>)
 800363e:	4a27      	ldr	r2, [pc, #156]	@ (80036dc <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003640:	4827      	ldr	r0, [pc, #156]	@ (80036e0 <touchgfx_init+0xd0>)
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	f016 fc1a 	bl	8019e7c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	f3bf 8f5b 	dmb	ish
 800364e:	07db      	lsls	r3, r3, #31
 8003650:	d436      	bmi.n	80036c0 <touchgfx_init+0xb0>
 8003652:	4628      	mov	r0, r5
 8003654:	f021 faed 	bl	8024c32 <__cxa_guard_acquire>
 8003658:	b390      	cbz	r0, 80036c0 <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800365a:	4c22      	ldr	r4, [pc, #136]	@ (80036e4 <touchgfx_init+0xd4>)
          screenStorage(scr),
          transitionStorage(tra),
 800365c:	4f22      	ldr	r7, [pc, #136]	@ (80036e8 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800365e:	4b23      	ldr	r3, [pc, #140]	@ (80036ec <touchgfx_init+0xdc>)
        : presenterStorage(pres),
 8003660:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8003664:	f107 061c 	add.w	r6, r7, #28
          screenStorage(scr),
 8003668:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800366c:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 800366e:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8003670:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003674:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003676:	6126      	str	r6, [r4, #16]
 8003678:	f00c ff7e 	bl	8010578 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800367c:	4b1c      	ldr	r3, [pc, #112]	@ (80036f0 <touchgfx_init+0xe0>)
 800367e:	4640      	mov	r0, r8
 8003680:	6163      	str	r3, [r4, #20]
 8003682:	f00c ff79 	bl	8010578 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003686:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <touchgfx_init+0xe4>)
 8003688:	4638      	mov	r0, r7
 800368a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800368c:	f00c ff74 	bl	8010578 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003690:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8003694:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <touchgfx_init+0xe8>)
 8003696:	f603 30fc 	addw	r0, r3, #3068	@ 0xbfc
 800369a:	f8c3 2be8 	str.w	r2, [r3, #3048]	@ 0xbe8
 800369e:	f002 f879 	bl	8005794 <_ZN5ModelC1Ev>
 80036a2:	4622      	mov	r2, r4
 80036a4:	f107 0114 	add.w	r1, r7, #20
 80036a8:	4630      	mov	r0, r6
 80036aa:	f002 f869 	bl	8005780 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80036ae:	4630      	mov	r0, r6
 80036b0:	f000 fd9c 	bl	80041ec <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80036b4:	4811      	ldr	r0, [pc, #68]	@ (80036fc <touchgfx_init+0xec>)
 80036b6:	f021 fe51 	bl	802535c <atexit>
 80036ba:	4628      	mov	r0, r5
 80036bc:	f021 fac5 	bl	8024c4a <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80036c0:	480f      	ldr	r0, [pc, #60]	@ (8003700 <touchgfx_init+0xf0>)
}
 80036c2:	b002      	add	sp, #8
 80036c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80036c8:	f7fe bcd8 	b.w	800207c <_ZN11TouchGFXHAL10initializeEv>
 80036cc:	24028e90 	.word	0x24028e90
 80036d0:	24009fdc 	.word	0x24009fdc
 80036d4:	2400ae14 	.word	0x2400ae14
 80036d8:	24009ffc 	.word	0x24009ffc
 80036dc:	24009fe0 	.word	0x24009fe0
 80036e0:	24000034 	.word	0x24000034
 80036e4:	2400ae18 	.word	0x2400ae18
 80036e8:	2400ea00 	.word	0x2400ea00
 80036ec:	08026dfc 	.word	0x08026dfc
 80036f0:	08026d60 	.word	0x08026d60
 80036f4:	08026d94 	.word	0x08026d94
 80036f8:	08026dc8 	.word	0x08026dc8
 80036fc:	080035e9 	.word	0x080035e9
 8003700:	24009f60 	.word	0x24009f60

08003704 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8003704:	4770      	bx	lr
	...

08003708 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003708:	4801      	ldr	r0, [pc, #4]	@ (8003710 <touchgfx_taskEntry+0x8>)
 800370a:	f7fe bcc9 	b.w	80020a0 <_ZN11TouchGFXHAL9taskEntryEv>
 800370e:	bf00      	nop
 8003710:	24009f60 	.word	0x24009f60

08003714 <_GLOBAL__sub_I_touchgfx_init>:
}
 8003714:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 8003716:	4c0e      	ldr	r4, [pc, #56]	@ (8003750 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 8003718:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800371a:	4e0f      	ldr	r6, [pc, #60]	@ (8003758 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 800371c:	4620      	mov	r0, r4
static LCD24bpp display;
 800371e:	4d0f      	ldr	r5, [pc, #60]	@ (800375c <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8003720:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8003722:	f7ff fe2f 	bl	8003384 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003726:	4628      	mov	r0, r5
 8003728:	f01a fb14 	bl	801dd54 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 800372c:	480c      	ldr	r0, [pc, #48]	@ (8003760 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 800372e:	f014 f901 	bl	8017934 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003732:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003736:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800373a:	4621      	mov	r1, r4
 800373c:	4809      	ldr	r0, [pc, #36]	@ (8003764 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 800373e:	e9cd 3200 	strd	r3, r2, [sp]
 8003742:	4633      	mov	r3, r6
 8003744:	462a      	mov	r2, r5
 8003746:	f7fe fd3f 	bl	80021c8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800374a:	b002      	add	sp, #8
 800374c:	bd70      	pop	{r4, r5, r6, pc}
 800374e:	bf00      	nop
 8003750:	2400a068 	.word	0x2400a068
 8003754:	08026560 	.word	0x08026560
 8003758:	2400ae10 	.word	0x2400ae10
 800375c:	24009ffc 	.word	0x24009ffc
 8003760:	24009fe0 	.word	0x24009fe0
 8003764:	24009f60 	.word	0x24009f60

08003768 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003768:	4801      	ldr	r0, [pc, #4]	@ (8003770 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800376a:	f7ff bc57 	b.w	800301c <_ZN8STM32DMAD1Ev>
 800376e:	bf00      	nop
 8003770:	2400a068 	.word	0x2400a068

08003774 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003774:	2000      	movs	r0, #0
 8003776:	4770      	bx	lr

08003778 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003778:	8081      	strh	r1, [r0, #4]
    }
 800377a:	4770      	bx	lr

0800377c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800377c:	80c1      	strh	r1, [r0, #6]
    }
 800377e:	4770      	bx	lr

08003780 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003780:	8101      	strh	r1, [r0, #8]
    }
 8003782:	4770      	bx	lr

08003784 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003784:	8141      	strh	r1, [r0, #10]
    }
 8003786:	4770      	bx	lr

08003788 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003788:	4770      	bx	lr

0800378a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800378a:	4770      	bx	lr

0800378c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800378c:	4770      	bx	lr

0800378e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800378e:	4770      	bx	lr

08003790 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003790:	4770      	bx	lr

08003792 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003792:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003794:	88c4      	ldrh	r4, [r0, #6]
 8003796:	6803      	ldr	r3, [r0, #0]
 8003798:	1b12      	subs	r2, r2, r4
 800379a:	8884      	ldrh	r4, [r0, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379e:	1b09      	subs	r1, r1, r4
 80037a0:	b212      	sxth	r2, r2
    }
 80037a2:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80037a6:	b209      	sxth	r1, r1
 80037a8:	4718      	bx	r3

080037aa <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80037aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037ae:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80037b6:	6813      	ldr	r3, [r2, #0]
 80037b8:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80037ba:	6010      	str	r0, [r2, #0]
    }
 80037bc:	4770      	bx	lr

080037be <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80037be:	2000      	movs	r0, #0
 80037c0:	4770      	bx	lr

080037c2 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80037c2:	888b      	ldrh	r3, [r1, #4]
 80037c4:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80037c6:	2001      	movs	r0, #1
 80037c8:	4770      	bx	lr

080037ca <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80037ca:	4770      	bx	lr

080037cc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80037cc:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 80037d0:	4770      	bx	lr

080037d2 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80037d2:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80037d6:	4770      	bx	lr

080037d8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80037d8:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80037da:	b510      	push	{r4, lr}
        return rect.width;
 80037dc:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80037e0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80037e4:	8002      	strh	r2, [r0, #0]
 80037e6:	8042      	strh	r2, [r0, #2]
 80037e8:	8084      	strh	r4, [r0, #4]
 80037ea:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80037ec:	bd10      	pop	{r4, pc}

080037ee <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80037ee:	2200      	movs	r2, #0
 80037f0:	8002      	strh	r2, [r0, #0]
 80037f2:	8042      	strh	r2, [r0, #2]
 80037f4:	8082      	strh	r2, [r0, #4]
 80037f6:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80037f8:	4770      	bx	lr

080037fa <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80037fa:	7701      	strb	r1, [r0, #28]
    }
 80037fc:	4770      	bx	lr

080037fe <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80037fe:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8003802:	4770      	bx	lr

08003804 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8003804:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 8003808:	4770      	bx	lr

0800380a <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 800380a:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 800380e:	4770      	bx	lr

08003810 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8003810:	2001      	movs	r0, #1
 8003812:	4770      	bx	lr

08003814 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8003814:	3098      	adds	r0, #152	@ 0x98
 8003816:	4770      	bx	lr

08003818 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 8003818:	308c      	adds	r0, #140	@ 0x8c
 800381a:	4770      	bx	lr

0800381c <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 800381c:	3084      	adds	r0, #132	@ 0x84
 800381e:	4770      	bx	lr

08003820 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8003820:	4770      	bx	lr
	...

08003824 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003824:	4b02      	ldr	r3, [pc, #8]	@ (8003830 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 8003826:	2290      	movs	r2, #144	@ 0x90
 8003828:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000e100 	.word	0xe000e100

08003834 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003834:	4770      	bx	lr

08003836 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8003836:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 8003838:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 800383c:	4770      	bx	lr

0800383e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800383e:	4770      	bx	lr

08003840 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003840:	4770      	bx	lr

08003842 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003842:	4770      	bx	lr

08003844 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003844:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003848:	4611      	mov	r1, r2
 800384a:	6840      	ldr	r0, [r0, #4]
 800384c:	6803      	ldr	r3, [r0, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4718      	bx	r3

08003852 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003852:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8003856:	4770      	bx	lr

08003858 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003858:	b510      	push	{r4, lr}
 800385a:	4604      	mov	r4, r0
 800385c:	2148      	movs	r1, #72	@ 0x48
 800385e:	f021 f9e6 	bl	8024c2e <_ZdlPvj>
 8003862:	4620      	mov	r0, r4
 8003864:	bd10      	pop	{r4, pc}

08003866 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8003866:	b510      	push	{r4, lr}
 8003868:	4604      	mov	r4, r0
 800386a:	212c      	movs	r1, #44	@ 0x2c
 800386c:	f021 f9df 	bl	8024c2e <_ZdlPvj>
 8003870:	4620      	mov	r0, r4
 8003872:	bd10      	pop	{r4, pc}

08003874 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003874:	b510      	push	{r4, lr}
 8003876:	4604      	mov	r4, r0
 8003878:	21bc      	movs	r1, #188	@ 0xbc
 800387a:	f021 f9d8 	bl	8024c2e <_ZdlPvj>
 800387e:	4620      	mov	r0, r4
 8003880:	bd10      	pop	{r4, pc}
	...

08003884 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4604      	mov	r4, r0
    HAL::initialize();
 8003888:	f00d f973 	bl	8010b72 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003890:	f012 ff22 	bl	80166d8 <_ZN8touchgfx11Application11getInstanceEv>
 8003894:	4601      	mov	r1, r0
 8003896:	4620      	mov	r0, r4
 8003898:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	4908      	ldr	r1, [pc, #32]	@ (80038c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 800389e:	4620      	mov	r0, r4
 80038a0:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80038a4:	2300      	movs	r3, #0
 80038a6:	461a      	mov	r2, r3
 80038a8:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	4a05      	ldr	r2, [pc, #20]	@ (80038c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80038ae:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 80038b0:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80038b2:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80038b4:	4a05      	ldr	r2, [pc, #20]	@ (80038cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80038b6:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 80038ba:	4a05      	ldr	r2, [pc, #20]	@ (80038d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 80038bc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	d0119400 	.word	0xd0119400
 80038c4:	2400ec80 	.word	0x2400ec80
 80038c8:	2400ec38 	.word	0x2400ec38
 80038cc:	d0000000 	.word	0xd0000000
 80038d0:	00119400 	.word	0x00119400

080038d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80038d4:	b538      	push	{r3, r4, r5, lr}
 80038d6:	4604      	mov	r4, r0
 80038d8:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80038da:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80038dc:	f04f 31ff 	mov.w	r1, #4294967295
 80038e0:	f00a fcfd 	bl	800e2de <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80038e4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80038e6:	f00a fd1d 	bl	800e324 <osMutexRelease>
        streams[handle].isActive = false;
 80038ea:	2324      	movs	r3, #36	@ 0x24
 80038ec:	fb03 4505 	mla	r5, r3, r5, r4
 80038f0:	2300      	movs	r3, #0
 80038f2:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80038f6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80038fa:	b90b      	cbnz	r3, 8003900 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80038fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80038fe:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8003900:	bd38      	pop	{r3, r4, r5, pc}

08003902 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8003902:	f00d b8e7 	b.w	8010ad4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08003906 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8003906:	f00d ba48 	b.w	8010d9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800390a <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800390a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800390e:	b112      	cbz	r2, 8003916 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003910:	6803      	ldr	r3, [r0, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	4718      	bx	r3
    }
 8003916:	4770      	bx	lr

08003918 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003918:	4a12      	ldr	r2, [pc, #72]	@ (8003964 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800391a:	6953      	ldr	r3, [r2, #20]
 800391c:	03db      	lsls	r3, r3, #15
{
 800391e:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003920:	d51e      	bpl.n	8003960 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003922:	2300      	movs	r3, #0
 8003924:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003928:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800392c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003930:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003934:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003938:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800393c:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800393e:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003942:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003944:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003948:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800394a:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 800394e:	d2f9      	bcs.n	8003944 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003950:	3b20      	subs	r3, #32
 8003952:	f113 0f20 	cmn.w	r3, #32
 8003956:	d1f2      	bne.n	800393e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003958:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800395c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003960:	bd70      	pop	{r4, r5, r6, pc}
 8003962:	bf00      	nop
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003968:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800396a:	b131      	cbz	r1, 800397a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 800396c:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800396e:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003972:	4a04      	ldr	r2, [pc, #16]	@ (8003984 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003974:	4804      	ldr	r0, [pc, #16]	@ (8003988 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003976:	f021 fcd3 	bl	8025320 <__assert_func>
    }
 800397a:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 800397e:	bd08      	pop	{r3, pc}
 8003980:	08026e08 	.word	0x08026e08
 8003984:	08026e1c 	.word	0x08026e1c
 8003988:	08026fa6 	.word	0x08026fa6

0800398c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 800398c:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 800398e:	b131      	cbz	r1, 800399e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003992:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8003996:	4a06      	ldr	r2, [pc, #24]	@ (80039b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003998:	4806      	ldr	r0, [pc, #24]	@ (80039b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800399a:	f021 fcc1 	bl	8025320 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800399e:	6840      	ldr	r0, [r0, #4]
 80039a0:	4611      	mov	r1, r2
 80039a2:	6803      	ldr	r3, [r0, #0]
    }
 80039a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	4718      	bx	r3
 80039ac:	08026e08 	.word	0x08026e08
 80039b0:	08026ff0 	.word	0x08026ff0
 80039b4:	08026fa6 	.word	0x08026fa6

080039b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80039b8:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80039ba:	b129      	cbz	r1, 80039c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 80039bc:	4b03      	ldr	r3, [pc, #12]	@ (80039cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 80039be:	2179      	movs	r1, #121	@ 0x79
 80039c0:	4a03      	ldr	r2, [pc, #12]	@ (80039d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 80039c2:	4804      	ldr	r0, [pc, #16]	@ (80039d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 80039c4:	f021 fcac 	bl	8025320 <__assert_func>
    }
 80039c8:	68c0      	ldr	r0, [r0, #12]
 80039ca:	bd08      	pop	{r3, pc}
 80039cc:	08026e08 	.word	0x08026e08
 80039d0:	0802719e 	.word	0x0802719e
 80039d4:	08026fa6 	.word	0x08026fa6

080039d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80039d8:	b510      	push	{r4, lr}
 80039da:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80039dc:	b129      	cbz	r1, 80039ea <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80039de:	4b19      	ldr	r3, [pc, #100]	@ (8003a44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80039e0:	21a2      	movs	r1, #162	@ 0xa2
 80039e2:	4a19      	ldr	r2, [pc, #100]	@ (8003a48 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80039e4:	4819      	ldr	r0, [pc, #100]	@ (8003a4c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80039e6:	f021 fc9b 	bl	8025320 <__assert_func>
        switch (cmd)
 80039ea:	2a05      	cmp	r2, #5
 80039ec:	d815      	bhi.n	8003a1a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80039ee:	e8df f002 	tbb	[pc, r2]
 80039f2:	1103      	.short	0x1103
 80039f4:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80039f8:	6840      	ldr	r0, [r0, #4]
 80039fa:	6803      	ldr	r3, [r0, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	4798      	blx	r3
 8003a00:	b158      	cbz	r0, 8003a1a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8003a08:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 8003a0c:	2300      	movs	r3, #0
            stream.tickCount = 0;
 8003a0e:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8003a12:	e002      	b.n	8003a1a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 8003a1a:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8003a1c:	6203      	str	r3, [r0, #32]
 8003a1e:	e7f5      	b.n	8003a0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8003a20:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8003a28:	e7f0      	b.n	8003a0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8003a30:	2301      	movs	r3, #1
 8003a32:	6203      	str	r3, [r0, #32]
            break;
 8003a34:	e7f1      	b.n	8003a1a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8003a36:	3b00      	subs	r3, #0
 8003a38:	bf18      	it	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003a40:	e7eb      	b.n	8003a1a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003a42:	bf00      	nop
 8003a44:	08026e08 	.word	0x08026e08
 8003a48:	08027353 	.word	0x08027353
 8003a4c:	08026fa6 	.word	0x08026fa6

08003a50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003a50:	b510      	push	{r4, lr}
 8003a52:	460c      	mov	r4, r1
 8003a54:	4611      	mov	r1, r2
 8003a56:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8003a58:	b12c      	cbz	r4, 8003a66 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003a5c:	2190      	movs	r1, #144	@ 0x90
 8003a5e:	4a06      	ldr	r2, [pc, #24]	@ (8003a78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003a60:	4806      	ldr	r0, [pc, #24]	@ (8003a7c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003a62:	f021 fc5d 	bl	8025320 <__assert_func>
        stream.frameNumber = 0;
 8003a66:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003a68:	6840      	ldr	r0, [r0, #4]
 8003a6a:	6803      	ldr	r3, [r0, #0]
    }
 8003a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	4718      	bx	r3
 8003a74:	08026e08 	.word	0x08026e08
 8003a78:	08027527 	.word	0x08027527
 8003a7c:	08026fa6 	.word	0x08026fa6

08003a80 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003a80:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003a82:	b129      	cbz	r1, 8003a90 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003a84:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003a86:	2182      	movs	r1, #130	@ 0x82
 8003a88:	4a05      	ldr	r2, [pc, #20]	@ (8003aa0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8003a8a:	4806      	ldr	r0, [pc, #24]	@ (8003aa4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003a8c:	f021 fc48 	bl	8025320 <__assert_func>
        stream.tickCount = 0;
 8003a90:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003a94:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003a98:	bd08      	pop	{r3, pc}
 8003a9a:	bf00      	nop
 8003a9c:	08026e08 	.word	0x08026e08
 8003aa0:	08027702 	.word	0x08027702
 8003aa4:	08026fa6 	.word	0x08026fa6

08003aa8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8003aa8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003aac:	b510      	push	{r4, lr}
 8003aae:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003ab0:	b153      	cbz	r3, 8003ac8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab6:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003ab8:	f00a fc11 	bl	800e2de <osMutexAcquire>
            firstDrawThisFrame = false;
 8003abc:	2300      	movs	r3, #0
 8003abe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8003ac8:	bd10      	pop	{r4, pc}

08003aca <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003aca:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003ace:	b11a      	cbz	r2, 8003ad8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003ad0:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003ad4:	b102      	cbz	r2, 8003ad8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003ad6:	6018      	str	r0, [r3, #0]
        }
    }
 8003ad8:	4770      	bx	lr
	...

08003adc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003adc:	b510      	push	{r4, lr}
 8003ade:	4604      	mov	r4, r0
 8003ae0:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8003ae2:	b129      	cbz	r1, 8003af0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003ae4:	4b13      	ldr	r3, [pc, #76]	@ (8003b34 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8003ae6:	21d0      	movs	r1, #208	@ 0xd0
 8003ae8:	4a13      	ldr	r2, [pc, #76]	@ (8003b38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8003aea:	4814      	ldr	r0, [pc, #80]	@ (8003b3c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8003aec:	f021 fc18 	bl	8025320 <__assert_func>
        if (stream.isPlaying)
 8003af0:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003af4:	b133      	cbz	r3, 8003b04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003af6:	4b12      	ldr	r3, [pc, #72]	@ (8003b40 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8003afe:	6963      	ldr	r3, [r4, #20]
 8003b00:	4413      	add	r3, r2
 8003b02:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003b04:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8003b08:	b90b      	cbnz	r3, 8003b0e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 8003b0a:	2001      	movs	r0, #1
    }
 8003b0c:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8003b0e:	68a3      	ldr	r3, [r4, #8]
 8003b10:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8003b12:	6803      	ldr	r3, [r0, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8003b18:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8003b1a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 8003b1e:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d1f1      	bne.n	8003b0a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8003b26:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1ee      	bne.n	8003b0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8003b2e:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003b32:	e7eb      	b.n	8003b0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003b34:	08026e08 	.word	0x08026e08
 8003b38:	080278be 	.word	0x080278be
 8003b3c:	08026fa6 	.word	0x08026fa6
 8003b40:	24028e2c 	.word	0x24028e2c

08003b44 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003b44:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003b46:	4c1a      	ldr	r4, [pc, #104]	@ (8003bb0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003b48:	4605      	mov	r5, r0
    HAL::endFrame();
 8003b4a:	f00d f805 	bl	8010b58 <_ZN8touchgfx3HAL8endFrameEv>
 8003b4e:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003b52:	b913      	cbnz	r3, 8003b5a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003b54:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003b58:	b1ab      	cbz	r3, 8003b86 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003b5a:	69e1      	ldr	r1, [r4, #28]
 8003b5c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003b60:	4353      	muls	r3, r2
 8003b62:	6922      	ldr	r2, [r4, #16]
 8003b64:	434a      	muls	r2, r1
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d30d      	bcc.n	8003b86 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003b6a:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003b6e:	b138      	cbz	r0, 8003b80 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003b76:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003b78:	bf98      	it	ls
 8003b7a:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003b7e:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003b86:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003b88:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003b8a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003b8e:	f00a fc5e 	bl	800e44e <osSemaphoreRelease>
        if (uiHasMutex)
 8003b92:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003b96:	b12b      	cbz	r3, 8003ba4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003b98:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003b9a:	f00a fbc3 	bl	800e324 <osMutexRelease>
            uiHasMutex = false;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003ba4:	6868      	ldr	r0, [r5, #4]
 8003ba6:	6803      	ldr	r3, [r0, #0]
}
 8003ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	4718      	bx	r3
 8003bb0:	2400ec38 	.word	0x2400ec38

08003bb4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb4:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003bb6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003bbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003bc2:	f3bf 8f6f 	isb	sy
}
 8003bc6:	4770      	bx	lr
 8003bc8:	e000e100 	.word	0xe000e100

08003bcc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bcc:	4b02      	ldr	r3, [pc, #8]	@ (8003bd8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003bce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003bd2:	609a      	str	r2, [r3, #8]
}
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000e100 	.word	0xe000e100

08003bdc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003be0:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003be4:	b9d8      	cbnz	r0, 8003c1e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003be6:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003bea:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003bec:	2501      	movs	r5, #1
                streams[i] = Stream();
 8003bee:	60d8      	str	r0, [r3, #12]
 8003bf0:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003bf2:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003bf6:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003bf8:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003bfc:	6158      	str	r0, [r3, #20]
 8003bfe:	6198      	str	r0, [r3, #24]
 8003c00:	61d8      	str	r0, [r3, #28]
 8003c02:	6218      	str	r0, [r3, #32]
 8003c04:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003c06:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003c08:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003c0c:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003c10:	443c      	add	r4, r7
 8003c12:	42a2      	cmp	r2, r4
 8003c14:	d90a      	bls.n	8003c2c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003c18:	2152      	movs	r1, #82	@ 0x52
 8003c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c48 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8003c1c:	e003      	b.n	8003c26 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003c20:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003c24:	4a0a      	ldr	r2, [pc, #40]	@ (8003c50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003c26:	480b      	ldr	r0, [pc, #44]	@ (8003c54 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003c28:	f021 fb7a 	bl	8025320 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003c2c:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003c2e:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003c30:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003c34:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003c38:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8003c3a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003c3e:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003c40:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c44:	08027c16 	.word	0x08027c16
 8003c48:	08027c51 	.word	0x08027c51
 8003c4c:	08027a5f 	.word	0x08027a5f
 8003c50:	08027a8f 	.word	0x08027a8f
 8003c54:	08026fa6 	.word	0x08026fa6

08003c58 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003c58:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8003c5a:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003c5c:	4e12      	ldr	r6, [pc, #72]	@ (8003ca8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003c5e:	4604      	mov	r4, r0
 8003c60:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003c62:	4b12      	ldr	r3, [pc, #72]	@ (8003cac <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003c64:	6003      	str	r3, [r0, #0]
 8003c66:	6833      	ldr	r3, [r6, #0]
 8003c68:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003c6c:	b10a      	cbz	r2, 8003c72 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003c6e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003c70:	b900      	cbnz	r0, 8003c74 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003c72:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003c74:	6803      	ldr	r3, [r0, #0]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	4798      	blx	r3
 8003c7a:	1e43      	subs	r3, r0, #1
 8003c7c:	425d      	negs	r5, r3
 8003c7e:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003c80:	6833      	ldr	r3, [r6, #0]
 8003c82:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003c84:	b130      	cbz	r0, 8003c94 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003c86:	6803      	ldr	r3, [r0, #0]
 8003c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8a:	4798      	blx	r3
 8003c8c:	2801      	cmp	r0, #1
 8003c8e:	bf08      	it	eq
 8003c90:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003c94:	b92d      	cbnz	r5, 8003ca2 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003c96:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003c98:	2127      	movs	r1, #39	@ 0x27
 8003c9a:	4a06      	ldr	r2, [pc, #24]	@ (8003cb4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003c9c:	4806      	ldr	r0, [pc, #24]	@ (8003cb8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003c9e:	f021 fb3f 	bl	8025320 <__assert_func>
    }
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	bd70      	pop	{r4, r5, r6, pc}
 8003ca6:	bf00      	nop
 8003ca8:	24028e2c 	.word	0x24028e2c
 8003cac:	08027f04 	.word	0x08027f04
 8003cb0:	08027df4 	.word	0x08027df4
 8003cb4:	08027e52 	.word	0x08027e52
 8003cb8:	08027e8b 	.word	0x08027e8b

08003cbc <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003cbc:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003cbe:	4e24      	ldr	r6, [pc, #144]	@ (8003d50 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003cc0:	6835      	ldr	r5, [r6, #0]
 8003cc2:	f3bf 8f5b 	dmb	ish
 8003cc6:	f015 0501 	ands.w	r5, r5, #1
 8003cca:	d13f      	bne.n	8003d4c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003ccc:	4630      	mov	r0, r6
 8003cce:	f020 ffb0 	bl	8024c32 <__cxa_guard_acquire>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d03a      	beq.n	8003d4c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003cd6:	4c1f      	ldr	r4, [pc, #124]	@ (8003d54 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d58 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003cda:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003cde:	6125      	str	r5, [r4, #16]
 8003ce0:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003ce2:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003ce4:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003ce6:	e9c4 3500 	strd	r3, r5, [r4]
 8003cea:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003cee:	f014 f880 	bl	8017df2 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003cf2:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003cf6:	f00f f95f 	bl	8012fb8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003cfa:	4b18      	ldr	r3, [pc, #96]	@ (8003d5c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003cfc:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003cfe:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003d00:	4b17      	ldr	r3, [pc, #92]	@ (8003d60 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8003d02:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003d06:	f7ff ffa7 	bl	8003c58 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003d0a:	4b16      	ldr	r3, [pc, #88]	@ (8003d64 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003d0c:	4816      	ldr	r0, [pc, #88]	@ (8003d68 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003d0e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003d12:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003d14:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003d18:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003d1c:	2364      	movs	r3, #100	@ 0x64
 8003d1e:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003d22:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003d26:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003d30:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003d34:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003d38:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003d3e:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003d42:	f021 fb0b 	bl	802535c <atexit>
 8003d46:	4630      	mov	r0, r6
 8003d48:	f020 ff7f 	bl	8024c4a <__cxa_guard_release>
}
 8003d4c:	4801      	ldr	r0, [pc, #4]	@ (8003d54 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	2400eb78 	.word	0x2400eb78
 8003d54:	2400eb7c 	.word	0x2400eb7c
 8003d58:	080292cc 	.word	0x080292cc
 8003d5c:	08027f24 	.word	0x08027f24
 8003d60:	08027f9c 	.word	0x08027f9c
 8003d64:	08029318 	.word	0x08029318
 8003d68:	08003821 	.word	0x08003821
 8003d6c:	08029350 	.word	0x08029350

08003d70 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d74:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003d76:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003d78:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d80:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003d82:	f00a fb38 	bl	800e3f6 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003d86:	f04f 31ff 	mov.w	r1, #4294967295
 8003d8a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003d8c:	f00a faa7 	bl	800e2de <osMutexAcquire>
                if (stream.doDecode)
 8003d90:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003d94:	b343      	cbz	r3, 8003de8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003d96:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003d98:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003d9c:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003d9e:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003da2:	f1b8 0f00 	cmp.w	r8, #0
 8003da6:	d023      	beq.n	8003df0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	4641      	mov	r1, r8
 8003dac:	4628      	mov	r0, r5
 8003dae:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003dba:	9700      	str	r7, [sp, #0]
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003dc2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003dc6:	68a1      	ldr	r1, [r4, #8]
 8003dc8:	47c0      	blx	r8
                    stream.frameCount++;
 8003dca:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003dcc:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003dd4:	b1f0      	cbz	r0, 8003e14 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003dd6:	682b      	ldr	r3, [r5, #0]
 8003dd8:	4628      	mov	r0, r5
 8003dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ddc:	4798      	blx	r3
 8003dde:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003de0:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003de2:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003de4:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003de8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003dea:	f00a fa9b 	bl	800e324 <osMutexRelease>
        while (1)
 8003dee:	e7c5      	b.n	8003d7c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003df0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003df2:	2a00      	cmp	r2, #0
 8003df4:	d0de      	beq.n	8003db4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003df6:	4628      	mov	r0, r5
 8003df8:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003dfc:	4798      	blx	r3
 8003dfe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003e00:	4401      	add	r1, r0
 8003e02:	4628      	mov	r0, r5
 8003e04:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003e06:	6923      	ldr	r3, [r4, #16]
 8003e08:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8003e0a:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003e0e:	4413      	add	r3, r2
 8003e10:	6123      	str	r3, [r4, #16]
 8003e12:	e7cf      	b.n	8003db4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003e14:	2001      	movs	r0, #1
 8003e16:	e7e3      	b.n	8003de0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003e18 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003e18:	4801      	ldr	r0, [pc, #4]	@ (8003e20 <videoTaskFunc+0x8>)
{
 8003e1a:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003e1c:	f7ff ffa8 	bl	8003d70 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003e20:	2400ec38 	.word	0x2400ec38

08003e24 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003e24:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003e26:	4814      	ldr	r0, [pc, #80]	@ (8003e78 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003e28:	2500      	movs	r5, #0
 8003e2a:	f7fe fbeb 	bl	8002604 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003e2e:	4c13      	ldr	r4, [pc, #76]	@ (8003e7c <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003e30:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003e32:	462a      	mov	r2, r5
 8003e34:	4629      	mov	r1, r5
 8003e36:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003e3e:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003e40:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003e42:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003e44:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003e48:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003e4c:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003e50:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003e54:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003e58:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003e5c:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003e60:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003e64:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003e68:	f00a fa7b 	bl	800e362 <osSemaphoreNew>
 8003e6c:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f00a fa00 	bl	800e274 <osMutexNew>
 8003e74:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	2400ec80 	.word	0x2400ec80
 8003e7c:	2400ec38 	.word	0x2400ec38
 8003e80:	08027fe8 	.word	0x08027fe8

08003e84 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_01 = 4; // micross_100_4bpp
    static const touchgfx::FontId TYPOGRAPHY_02 = 5; // micross_66_4bpp
    static const uint16_t NUMBER_OF_FONTS = 6;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003e84:	4770      	bx	lr

08003e86 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003e86:	b508      	push	{r3, lr}
    switch (typography)
 8003e88:	2905      	cmp	r1, #5
 8003e8a:	d81c      	bhi.n	8003ec6 <_ZN23ApplicationFontProvider7getFontEt+0x40>
 8003e8c:	e8df f001 	tbb	[pc, r1]
 8003e90:	0f0b0703 	.word	0x0f0b0703
 8003e94:	1713      	.short	0x1713
    {
    case Typography::DEFAULT:
        // micross_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003e96:	f001 fc3b 	bl	8005710 <_ZN17TypedTextDatabase8getFontsEv>
 8003e9a:	6800      	ldr	r0, [r0, #0]
        // micross_66_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
    default:
        return 0;
    }
}
 8003e9c:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003e9e:	f001 fc37 	bl	8005710 <_ZN17TypedTextDatabase8getFontsEv>
 8003ea2:	6840      	ldr	r0, [r0, #4]
 8003ea4:	e7fa      	b.n	8003e9c <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003ea6:	f001 fc33 	bl	8005710 <_ZN17TypedTextDatabase8getFontsEv>
 8003eaa:	6880      	ldr	r0, [r0, #8]
 8003eac:	e7f6      	b.n	8003e9c <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003eae:	f001 fc2f 	bl	8005710 <_ZN17TypedTextDatabase8getFontsEv>
 8003eb2:	68c0      	ldr	r0, [r0, #12]
 8003eb4:	e7f2      	b.n	8003e9c <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003eb6:	f001 fc2b 	bl	8005710 <_ZN17TypedTextDatabase8getFontsEv>
 8003eba:	6900      	ldr	r0, [r0, #16]
 8003ebc:	e7ee      	b.n	8003e9c <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8003ebe:	f001 fc27 	bl	8005710 <_ZN17TypedTextDatabase8getFontsEv>
 8003ec2:	6940      	ldr	r0, [r0, #20]
 8003ec4:	e7ea      	b.n	8003e9c <_ZN23ApplicationFontProvider7getFontEt+0x16>
    switch (typography)
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e7e8      	b.n	8003e9c <_ZN23ApplicationFontProvider7getFontEt+0x16>

08003eca <_ZN23ApplicationFontProviderD0Ev>:
 8003eca:	b510      	push	{r4, lr}
 8003ecc:	4604      	mov	r4, r0
 8003ece:	2104      	movs	r1, #4
 8003ed0:	f020 fead 	bl	8024c2e <_ZdlPvj>
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	bd10      	pop	{r4, pc}

08003ed8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003ed8:	4800      	ldr	r0, [pc, #0]	@ (8003edc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003eda:	4770      	bx	lr
 8003edc:	08028038 	.word	0x08028038

08003ee0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	4770      	bx	lr

08003ee4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003ee4:	b513      	push	{r0, r1, r4, lr}
 8003ee6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003ee8:	b151      	cbz	r1, 8003f00 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003eea:	6803      	ldr	r3, [r0, #0]
 8003eec:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003eee:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003ef0:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003ef4:	689c      	ldr	r4, [r3, #8]
 8003ef6:	f10d 0303 	add.w	r3, sp, #3
 8003efa:	47a0      	blx	r4
        return glyph;
    }
 8003efc:	b002      	add	sp, #8
 8003efe:	bd10      	pop	{r4, pc}
            return 0;
 8003f00:	4608      	mov	r0, r1
 8003f02:	e7fb      	b.n	8003efc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003f04 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003f04:	89c0      	ldrh	r0, [r0, #14]
 8003f06:	4770      	bx	lr

08003f08 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003f08:	8a00      	ldrh	r0, [r0, #16]
 8003f0a:	4770      	bx	lr

08003f0c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003f0c:	88c0      	ldrh	r0, [r0, #6]
 8003f0e:	4770      	bx	lr

08003f10 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003f10:	8880      	ldrh	r0, [r0, #4]
 8003f12:	4770      	bx	lr

08003f14 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003f14:	7a80      	ldrb	r0, [r0, #10]
    }
 8003f16:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003f1a:	4770      	bx	lr

08003f1c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003f1c:	7a80      	ldrb	r0, [r0, #10]
    }
 8003f1e:	09c0      	lsrs	r0, r0, #7
 8003f20:	4770      	bx	lr

08003f22 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003f22:	2000      	movs	r0, #0
 8003f24:	4770      	bx	lr
	...

08003f28 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003f28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003f30 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	00000000 	.word	0x00000000

08003f34 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003f34:	4770      	bx	lr

08003f36 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003f36:	b510      	push	{r4, lr}
 8003f38:	4604      	mov	r4, r0
    }
 8003f3a:	2108      	movs	r1, #8
 8003f3c:	f020 fe77 	bl	8024c2e <_ZdlPvj>
 8003f40:	4620      	mov	r0, r4
 8003f42:	bd10      	pop	{r4, pc}

08003f44 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003f44:	4770      	bx	lr

08003f46 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003f46:	4770      	bx	lr

08003f48 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003f48:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003f4c:	6808      	ldr	r0, [r1, #0]
 8003f4e:	6849      	ldr	r1, [r1, #4]
 8003f50:	c303      	stmia	r3!, {r0, r1}
    }
 8003f52:	4770      	bx	lr

08003f54 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003f54:	4770      	bx	lr

08003f56 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003f56:	4770      	bx	lr

08003f58 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003f58:	6041      	str	r1, [r0, #4]
    }
 8003f5a:	4770      	bx	lr

08003f5c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003f5c:	4770      	bx	lr
	...

08003f60 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003f60:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003f62:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003f66:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003f70:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003f74:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	08004021 	.word	0x08004021

08003f80 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003f80:	2301      	movs	r3, #1
 8003f82:	7203      	strb	r3, [r0, #8]
    }
 8003f84:	4770      	bx	lr

08003f86 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003f86:	4770      	bx	lr

08003f88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003f88:	4770      	bx	lr

08003f8a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003f8a:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003f8c:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003f8e:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003f90:	68c2      	ldr	r2, [r0, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	1054      	asrs	r4, r2, #1
 8003f96:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003f9a:	07d2      	lsls	r2, r2, #31
 8003f9c:	bf48      	it	mi
 8003f9e:	590a      	ldrmi	r2, [r1, r4]
    }
 8003fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003fa4:	bf48      	it	mi
 8003fa6:	58d3      	ldrmi	r3, [r2, r3]
 8003fa8:	4718      	bx	r3

08003faa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003faa:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003fac:	6840      	ldr	r0, [r0, #4]
 8003fae:	b130      	cbz	r0, 8003fbe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	b91a      	cbnz	r2, 8003fbc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003fb4:	68d8      	ldr	r0, [r3, #12]
 8003fb6:	f000 0001 	and.w	r0, r0, #1
 8003fba:	4770      	bx	lr
 8003fbc:	2001      	movs	r0, #1
    }
 8003fbe:	4770      	bx	lr

08003fc0 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	210c      	movs	r1, #12
 8003fc6:	f020 fe32 	bl	8024c2e <_ZdlPvj>
 8003fca:	4620      	mov	r0, r4
 8003fcc:	bd10      	pop	{r4, pc}

08003fce <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003fce:	b510      	push	{r4, lr}
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	2110      	movs	r1, #16
 8003fd4:	f020 fe2b 	bl	8024c2e <_ZdlPvj>
 8003fd8:	4620      	mov	r0, r4
 8003fda:	bd10      	pop	{r4, pc}

08003fdc <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	4604      	mov	r4, r0
 8003fe0:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003fe4:	f020 fe23 	bl	8024c2e <_ZdlPvj>
 8003fe8:	4620      	mov	r0, r4
 8003fea:	bd10      	pop	{r4, pc}

08003fec <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003fec:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003fee:	f012 fb73 	bl	80166d8 <_ZN8touchgfx11Application11getInstanceEv>
 8003ff2:	6803      	ldr	r3, [r0, #0]
    }
 8003ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffa:	4718      	bx	r3

08003ffc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003ffc:	b510      	push	{r4, lr}
 8003ffe:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8004000:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8004004:	b158      	cbz	r0, 800401e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8004006:	6803      	ldr	r3, [r0, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	4798      	blx	r3
 800400c:	b138      	cbz	r0, 800401e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800400e:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8004012:	6803      	ldr	r3, [r0, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 800401e:	bd10      	pop	{r4, pc}

08004020 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8004020:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004024:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8004028:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800402a:	68b0      	ldr	r0, [r6, #8]
 800402c:	6803      	ldr	r3, [r0, #0]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	4798      	blx	r3
 8004032:	f643 33b3 	movw	r3, #15283	@ 0x3bb3
 8004036:	4298      	cmp	r0, r3
 8004038:	d805      	bhi.n	8004046 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 800403a:	4b44      	ldr	r3, [pc, #272]	@ (800414c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 800403c:	21a3      	movs	r1, #163	@ 0xa3
 800403e:	4a44      	ldr	r2, [pc, #272]	@ (8004150 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004040:	4844      	ldr	r0, [pc, #272]	@ (8004154 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8004042:	f021 f96d 	bl	8025320 <__assert_func>
 8004046:	6870      	ldr	r0, [r6, #4]
 8004048:	6803      	ldr	r3, [r0, #0]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4798      	blx	r3
 800404e:	280f      	cmp	r0, #15
 8004050:	d803      	bhi.n	800405a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8004052:	4b41      	ldr	r3, [pc, #260]	@ (8004158 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8004054:	21a4      	movs	r1, #164	@ 0xa4
 8004056:	4a3e      	ldr	r2, [pc, #248]	@ (8004150 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8004058:	e7f2      	b.n	8004040 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800405a:	68f0      	ldr	r0, [r6, #12]
 800405c:	6803      	ldr	r3, [r0, #0]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	4798      	blx	r3
 8004062:	280b      	cmp	r0, #11
 8004064:	d803      	bhi.n	800406e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 8004066:	4b3d      	ldr	r3, [pc, #244]	@ (800415c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8004068:	21a5      	movs	r1, #165	@ 0xa5
 800406a:	4a39      	ldr	r2, [pc, #228]	@ (8004150 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800406c:	e7e8      	b.n	8004040 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 800406e:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004164 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8004072:	f012 fb31 	bl	80166d8 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8004076:	3004      	adds	r0, #4
 8004078:	f012 fb53 	bl	8016722 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800407c:	f8d9 0000 	ldr.w	r0, [r9]
 8004080:	b110      	cbz	r0, 8004088 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8004082:	6803      	ldr	r3, [r0, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4798      	blx	r3
    if (*currentTrans)
 8004088:	f8d9 0000 	ldr.w	r0, [r9]
 800408c:	b110      	cbz	r0, 8004094 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 800408e:	6803      	ldr	r3, [r0, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4798      	blx	r3
    if (*currentScreen)
 8004094:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004168 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8004098:	f8d8 0000 	ldr.w	r0, [r8]
 800409c:	b110      	cbz	r0, 80040a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 800409e:	6803      	ldr	r3, [r0, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	4798      	blx	r3
    if (*currentPresenter)
 80040a4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80040a8:	b110      	cbz	r0, 80040b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 80040aa:	6803      	ldr	r3, [r0, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4798      	blx	r3
    if (*currentScreen)
 80040b0:	f8d8 0000 	ldr.w	r0, [r8]
 80040b4:	b110      	cbz	r0, 80040bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 80040b6:	6803      	ldr	r3, [r0, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4798      	blx	r3
    if (*currentPresenter)
 80040bc:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80040c0:	b110      	cbz	r0, 80040c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80040c2:	6803      	ldr	r3, [r0, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80040c8:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80040ca:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80040cc:	f04f 0b00 	mov.w	fp, #0
 80040d0:	6803      	ldr	r3, [r0, #0]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	4798      	blx	r3
 80040d6:	4b22      	ldr	r3, [pc, #136]	@ (8004160 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80040d8:	4604      	mov	r4, r0
 80040da:	f8c0 b004 	str.w	fp, [r0, #4]
 80040de:	f880 b008 	strb.w	fp, [r0, #8]
 80040e2:	4659      	mov	r1, fp
 80040e4:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80040e6:	68b0      	ldr	r0, [r6, #8]
 80040e8:	6803      	ldr	r3, [r0, #0]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	4798      	blx	r3
 80040ee:	4605      	mov	r5, r0
 80040f0:	f001 fca2 	bl	8005a38 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80040f4:	6870      	ldr	r0, [r6, #4]
 80040f6:	4659      	mov	r1, fp
 80040f8:	6803      	ldr	r3, [r0, #0]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	4798      	blx	r3
 80040fe:	4606      	mov	r6, r0
 8004100:	4629      	mov	r1, r5
 8004102:	f001 fc6d 	bl	80059e0 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8004106:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004108:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 800410c:	4628      	mov	r0, r5
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800410e:	f8ca 3004 	str.w	r3, [sl, #4]
 8004112:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8004114:	f8c6 a008 	str.w	sl, [r6, #8]
 8004118:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 800411a:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800411e:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8004122:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8004124:	4798      	blx	r3
    newPresenter->activate();
 8004126:	6833      	ldr	r3, [r6, #0]
 8004128:	4630      	mov	r0, r6
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800412e:	4621      	mov	r1, r4
 8004130:	4628      	mov	r0, r5
 8004132:	f014 fb8f 	bl	8018854 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	4620      	mov	r0, r4
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	4798      	blx	r3
    newTransition->invalidate();
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	4620      	mov	r0, r4
 8004142:	695b      	ldr	r3, [r3, #20]
}
 8004144:	b001      	add	sp, #4
 8004146:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414a:	4718      	bx	r3
 800414c:	0802805c 	.word	0x0802805c
 8004150:	080280ea 	.word	0x080280ea
 8004154:	080281bc 	.word	0x080281bc
 8004158:	08028211 	.word	0x08028211
 800415c:	080282b4 	.word	0x080282b4
 8004160:	080283cc 	.word	0x080283cc
 8004164:	24028e74 	.word	0x24028e74
 8004168:	24028e70 	.word	0x24028e70

0800416c <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800416c:	4b04      	ldr	r3, [pc, #16]	@ (8004180 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004174:	b10a      	cbz	r2, 800417a <_ZN8touchgfx3HAL3lcdEv+0xe>
 8004176:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004178:	b900      	cbnz	r0, 800417c <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 800417a:	6898      	ldr	r0, [r3, #8]
    }
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	24028e2c 	.word	0x24028e2c

08004184 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004186:	4617      	mov	r7, r2
 8004188:	4604      	mov	r4, r0
 800418a:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 800418c:	f012 fb6a 	bl	8016864 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8004190:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8004192:	2500      	movs	r5, #0
        instance = this;
 8004194:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004196:	4629      	mov	r1, r5
      model(m)
 8004198:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800419a:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 800419c:	4b11      	ldr	r3, [pc, #68]	@ (80041e4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800419e:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 80041a2:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80041aa:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80041ac:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 80041b0:	689b      	ldr	r3, [r3, #8]
      model(m)
 80041b2:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80041b6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80041b8:	4628      	mov	r0, r5
 80041ba:	f001 fa5d 	bl	8005678 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80041be:	f7ff ffd5 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 80041c2:	f01a fec8 	bl	801ef56 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80041c6:	f7ff ffd1 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 80041ca:	f01a ff3b 	bl	801f044 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 80041ce:	f7ff ffcd 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 80041d2:	f01a ff43 	bl	801f05c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 80041d6:	4620      	mov	r0, r4
 80041d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041da:	bf00      	nop
 80041dc:	24028e80 	.word	0x24028e80
 80041e0:	08028378 	.word	0x08028378
 80041e4:	08028360 	.word	0x08028360
 80041e8:	24028e2c 	.word	0x24028e2c

080041ec <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80041ec:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80041ee:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80041f2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80041fc:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8004200:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	08004021 	.word	0x08004021

0800420c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800420c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800420e:	4770      	bx	lr

08004210 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8004210:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004212:	4770      	bx	lr

08004214 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8004214:	4770      	bx	lr

08004216 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004216:	888b      	ldrh	r3, [r1, #4]
 8004218:	69c0      	ldr	r0, [r0, #28]
 800421a:	0adb      	lsrs	r3, r3, #11
 800421c:	680a      	ldr	r2, [r1, #0]
 800421e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8004222:	4410      	add	r0, r2
 8004224:	4770      	bx	lr

08004226 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004226:	b510      	push	{r4, lr}
 8004228:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 800422a:	b1ba      	cbz	r2, 800425c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800422c:	7b10      	ldrb	r0, [r2, #12]
 800422e:	b168      	cbz	r0, 800424c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004230:	7b53      	ldrb	r3, [r2, #13]
 8004232:	7ad2      	ldrb	r2, [r2, #11]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800423a:	431a      	orrs	r2, r3
 800423c:	6a23      	ldr	r3, [r4, #32]
 800423e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004242:	881a      	ldrh	r2, [r3, #0]
 8004244:	428a      	cmp	r2, r1
 8004246:	d102      	bne.n	800424e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004248:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 800424c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800424e:	d805      	bhi.n	800425c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004250:	3801      	subs	r0, #1
 8004252:	3304      	adds	r3, #4
 8004254:	b280      	uxth	r0, r0
 8004256:	2800      	cmp	r0, #0
 8004258:	d1f3      	bne.n	8004242 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800425a:	e7f7      	b.n	800424c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800425c:	2000      	movs	r0, #0
 800425e:	e7f5      	b.n	800424c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08004260 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004260:	b510      	push	{r4, lr}
 8004262:	4604      	mov	r4, r0
 8004264:	212c      	movs	r1, #44	@ 0x2c
 8004266:	f020 fce2 	bl	8024c2e <_ZdlPvj>
 800426a:	4620      	mov	r0, r4
 800426c:	bd10      	pop	{r4, pc}
	...

08004270 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004270:	b530      	push	{r4, r5, lr}
 8004272:	b08b      	sub	sp, #44	@ 0x2c
 8004274:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8004276:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800427a:	9508      	str	r5, [sp, #32]
 800427c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8004280:	9507      	str	r5, [sp, #28]
 8004282:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8004286:	9506      	str	r5, [sp, #24]
 8004288:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 800428c:	9505      	str	r5, [sp, #20]
 800428e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8004292:	9504      	str	r5, [sp, #16]
 8004294:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8004298:	9503      	str	r5, [sp, #12]
 800429a:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 800429e:	9502      	str	r5, [sp, #8]
 80042a0:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80042a4:	9501      	str	r5, [sp, #4]
 80042a6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80042aa:	9500      	str	r5, [sp, #0]
 80042ac:	f013 fe5e 	bl	8017f6c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 80042b2:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80042b4:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80042b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80042b8:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 80042ba:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80042bc:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80042be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80042c0:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 80042c2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80042c4:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80042c6:	b00b      	add	sp, #44	@ 0x2c
 80042c8:	bd30      	pop	{r4, r5, pc}
 80042ca:	bf00      	nop
 80042cc:	080283f0 	.word	0x080283f0

080042d0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80042d0:	4770      	bx	lr

080042d2 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80042d2:	4770      	bx	lr

080042d4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80042d4:	4770      	bx	lr

080042d6 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80042d6:	4770      	bx	lr

080042d8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80042d8:	4770      	bx	lr

080042da <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80042da:	b530      	push	{r4, r5, lr}
 80042dc:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80042de:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80042e0:	4604      	mov	r4, r0
        rect.width = width;
 80042e2:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 80042e4:	466d      	mov	r5, sp
 80042e6:	4601      	mov	r1, r0
 80042e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ec:	343c      	adds	r4, #60	@ 0x3c
 80042ee:	4628      	mov	r0, r5
 80042f0:	4798      	blx	r3
 80042f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80042fa:	b005      	add	sp, #20
 80042fc:	bd30      	pop	{r4, r5, pc}

080042fe <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80042fe:	b530      	push	{r4, r5, lr}
 8004300:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8004302:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8004304:	4604      	mov	r4, r0
        rect.height = height;
 8004306:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8004308:	466d      	mov	r5, sp
 800430a:	4601      	mov	r1, r0
 800430c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004310:	343c      	adds	r4, #60	@ 0x3c
 8004312:	4628      	mov	r0, r5
 8004314:	4798      	blx	r3
 8004316:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800431a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800431e:	b005      	add	sp, #20
 8004320:	bd30      	pop	{r4, r5, pc}

08004322 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8004322:	2200      	movs	r2, #0
 8004324:	8002      	strh	r2, [r0, #0]
 8004326:	8042      	strh	r2, [r0, #2]
 8004328:	8082      	strh	r2, [r0, #4]
 800432a:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800432c:	4770      	bx	lr

0800432e <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800432e:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8004332:	4770      	bx	lr

08004334 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8004334:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004336:	b570      	push	{r4, r5, r6, lr}
 8004338:	4604      	mov	r4, r0
        setX(x);
 800433a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800433c:	4615      	mov	r5, r2
        setX(x);
 800433e:	4798      	blx	r3
        setBaselineY(baselineY);
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	4620      	mov	r0, r4
 8004344:	4629      	mov	r1, r5
 8004346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8004348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800434c:	4718      	bx	r3

0800434e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800434e:	2000      	movs	r0, #0
 8004350:	4770      	bx	lr

08004352 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8004352:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8004354:	4770      	bx	lr

08004356 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8004356:	4770      	bx	lr

08004358 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004358:	4770      	bx	lr

0800435a <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800435a:	b510      	push	{r4, lr}
 800435c:	4604      	mov	r4, r0
 800435e:	214c      	movs	r1, #76	@ 0x4c
 8004360:	f020 fc65 	bl	8024c2e <_ZdlPvj>
 8004364:	4620      	mov	r0, r4
 8004366:	bd10      	pop	{r4, pc}

08004368 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8004368:	4b03      	ldr	r3, [pc, #12]	@ (8004378 <_ZN15Screen1ViewBaseD1Ev+0x10>)
 800436a:	b510      	push	{r4, lr}
 800436c:	4604      	mov	r4, r0
 800436e:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8004370:	f010 fcba 	bl	8014ce8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8004374:	4620      	mov	r0, r4
 8004376:	bd10      	pop	{r4, pc}
 8004378:	08028648 	.word	0x08028648

0800437c <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800437c:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <_ZN15Screen1ViewBaseD0Ev+0x1c>)
 800437e:	b510      	push	{r4, lr}
 8004380:	4604      	mov	r4, r0
 8004382:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8004384:	f010 fcb0 	bl	8014ce8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8004388:	f643 31b4 	movw	r1, #15284	@ 0x3bb4
 800438c:	4620      	mov	r0, r4
 800438e:	f020 fc4e 	bl	8024c2e <_ZdlPvj>
 8004392:	4620      	mov	r0, r4
 8004394:	bd10      	pop	{r4, pc}
 8004396:	bf00      	nop
 8004398:	08028648 	.word	0x08028648

0800439c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 800439c:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 800439e:	f7ff fab4 	bl	800390a <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80043a2:	bd08      	pop	{r3, pc}

080043a4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80043a4:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80043a6:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80043a8:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 80043aa:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80043ac:	4b11      	ldr	r3, [pc, #68]	@ (80043f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80043ae:	b28d      	uxth	r5, r1
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	b92b      	cbnz	r3, 80043c0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80043b4:	4b10      	ldr	r3, [pc, #64]	@ (80043f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80043b6:	216c      	movs	r1, #108	@ 0x6c
 80043b8:	4a10      	ldr	r2, [pc, #64]	@ (80043fc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80043ba:	4811      	ldr	r0, [pc, #68]	@ (8004400 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80043bc:	f020 ffb0 	bl	8025320 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80043c0:	4910      	ldr	r1, [pc, #64]	@ (8004404 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80043c2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80043c4:	8809      	ldrh	r1, [r1, #0]
 80043c6:	4291      	cmp	r1, r2
 80043c8:	d803      	bhi.n	80043d2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80043ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004408 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80043cc:	216d      	movs	r1, #109	@ 0x6d
 80043ce:	4a0b      	ldr	r2, [pc, #44]	@ (80043fc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80043d0:	e7f3      	b.n	80043ba <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80043d2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80043d6:	4b0d      	ldr	r3, [pc, #52]	@ (800440c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80043de:	6803      	ldr	r3, [r0, #0]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	4798      	blx	r3
 80043e4:	1a29      	subs	r1, r5, r0
 80043e6:	4633      	mov	r3, r6
 80043e8:	4620      	mov	r0, r4
 80043ea:	b209      	sxth	r1, r1
    }
 80043ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80043f0:	4718      	bx	r3
 80043f2:	bf00      	nop
 80043f4:	24028e84 	.word	0x24028e84
 80043f8:	08028450 	.word	0x08028450
 80043fc:	08028492 	.word	0x08028492
 8004400:	080284cd 	.word	0x080284cd
 8004404:	24028e88 	.word	0x24028e88
 8004408:	08028522 	.word	0x08028522
 800440c:	24028e8c 	.word	0x24028e8c

08004410 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8004410:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8004412:	b570      	push	{r4, r5, r6, lr}
 8004414:	4604      	mov	r4, r0
        setX(x);
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8004418:	4615      	mov	r5, r2
        setX(x);
 800441a:	4798      	blx	r3
        setY(y);
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8004424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8004428:	4718      	bx	r3

0800442a <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800442a:	b570      	push	{r4, r5, r6, lr}
 800442c:	4604      	mov	r4, r0
 800442e:	461d      	mov	r5, r3
 8004430:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8004434:	f7ff ffec 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	4629      	mov	r1, r5
 800443c:	4620      	mov	r0, r4
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	4798      	blx	r3
        setHeight(height);
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	4631      	mov	r1, r6
 8004446:	4620      	mov	r0, r4
 8004448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 800444a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 800444e:	4718      	bx	r3

08004450 <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8004450:	4a09      	ldr	r2, [pc, #36]	@ (8004478 <_ZN8touchgfx3BoxC1Ev+0x28>)
          touchable(false),
 8004452:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004456:	6002      	str	r2, [r0, #0]
 8004458:	2200      	movs	r2, #0
 800445a:	8481      	strh	r1, [r0, #36]	@ 0x24
 800445c:	21ff      	movs	r1, #255	@ 0xff
        : color(col)
 800445e:	6282      	str	r2, [r0, #40]	@ 0x28
 8004460:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
        : x(0), y(0), width(0), height(0)
 8004464:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004468:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 800446c:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8004470:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	08029604 	.word	0x08029604

0800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    PainterRGB888(colortype color = 0)
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	4604      	mov	r4, r0
 8004480:	460d      	mov	r5, r1
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8004482:	f7ff fbe9 	bl	8003c58 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8004486:	4b03      	ldr	r3, [pc, #12]	@ (8004494 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x18>)
    {
    }
 8004488:	4620      	mov	r0, r4
 800448a:	60e5      	str	r5, [r4, #12]
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	3324      	adds	r3, #36	@ 0x24
 8004490:	60a3      	str	r3, [r4, #8]
    }
 8004492:	bd38      	pop	{r3, r4, r5, pc}
 8004494:	08029318 	.word	0x08029318

08004498 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004498:	2200      	movs	r2, #0
 800449a:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800449e:	6082      	str	r2, [r0, #8]
 80044a0:	e9c0 2100 	strd	r2, r1, [r0]
        {
        }
 80044a4:	4770      	bx	lr
	...

080044a8 <_ZN8touchgfx8TextAreaC1Ev>:
          touchable(false),
 80044a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
        : x(0), y(0), width(0), height(0)
 80044ac:	2300      	movs	r3, #0
    TextArea()
 80044ae:	b510      	push	{r4, lr}
 80044b0:	8482      	strh	r2, [r0, #36]	@ 0x24
 80044b2:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80044b4:	4a0c      	ldr	r2, [pc, #48]	@ (80044e8 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
        : color(col)
 80044b6:	6303      	str	r3, [r0, #48]	@ 0x30
 80044b8:	6002      	str	r2, [r0, #0]
        : typedTextId(id)
 80044ba:	4a0c      	ldr	r2, [pc, #48]	@ (80044ec <_ZN8touchgfx8TextAreaC1Ev+0x44>)
 80044bc:	8703      	strh	r3, [r0, #56]	@ 0x38
 80044be:	6282      	str	r2, [r0, #40]	@ 0x28
 80044c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044c4:	8582      	strh	r2, [r0, #44]	@ 0x2c
 80044c6:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
        : x(0), y(0), width(0), height(0)
 80044ca:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80044ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
          nextSibling(0),
 80044d2:	e9c0 3305 	strd	r3, r3, [r0, #20]
          cachedAbsX(0),
 80044d6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80044da:	6342      	str	r2, [r0, #52]	@ 0x34
 80044dc:	303c      	adds	r0, #60	@ 0x3c
 80044de:	f7ff ffdb 	bl	8004498 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 80044e2:	4620      	mov	r0, r4
 80044e4:	bd10      	pop	{r4, pc}
 80044e6:	bf00      	nop
 80044e8:	08029574 	.word	0x08029574
 80044ec:	08028054 	.word	0x08028054

080044f0 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 80044f0:	b510      	push	{r4, lr}
 80044f2:	4604      	mov	r4, r0
        return TextArea::BoundingArea();
 80044f4:	f7ff ffd0 	bl	8004498 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 80044f8:	4620      	mov	r0, r4
 80044fa:	bd10      	pop	{r4, pc}

080044fc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 80044fc:	b510      	push	{r4, lr}
 80044fe:	4604      	mov	r4, r0
        : TextArea()
 8004500:	f7ff ffd2 	bl	80044a8 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8004504:	4b02      	ldr	r3, [pc, #8]	@ (8004510 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x14>)
    }
 8004506:	4620      	mov	r0, r4
        : TextAreaWithWildcardBase(), wc1(0)
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	2300      	movs	r3, #0
 800450c:	64a3      	str	r3, [r4, #72]	@ 0x48
    }
 800450e:	bd10      	pop	{r4, pc}
 8004510:	080285b8 	.word	0x080285b8

08004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setStart(T x, T y)
    {
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8004514:	0152      	lsls	r2, r2, #5
 8004516:	0149      	lsls	r1, r1, #5
 8004518:	f00f b838 	b.w	801358c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>

0800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setEnd(T x, T y)
    {
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800451c:	0152      	lsls	r2, r2, #5
 800451e:	0149      	lsls	r1, r1, #5
 8004520:	f00f b83f 	b.w	80135a2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>

08004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setLineWidth(T width)
 8004524:	b410      	push	{r4}
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
    {
        if (lineWidthQ5 == widthQ5)
 8004526:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8004528:	014a      	lsls	r2, r1, #5
 800452a:	ebb4 1f41 	cmp.w	r4, r1, lsl #5
 800452e:	d004      	beq.n	800453a <_ZN8touchgfx4Line12setLineWidthIiEEvT_+0x16>
    }
 8004530:	f85d 4b04 	ldr.w	r4, [sp], #4
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 8004534:	63c2      	str	r2, [r0, #60]	@ 0x3c

        updateCachedShape();
 8004536:	f00e bf33 	b.w	80133a0 <_ZN8touchgfx4Line17updateCachedShapeEv>
    }
 800453a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800453e:	4770      	bx	lr

08004540 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8004540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004544:	4604      	mov	r4, r0
 8004546:	b0b5      	sub	sp, #212	@ 0xd4
        : presenter(0)
 8004548:	2500      	movs	r5, #0
 800454a:	f013 ffd7 	bl	80184fc <_ZN8touchgfx6ScreenC1Ev>
 800454e:	4626      	mov	r6, r4
 8004550:	4be1      	ldr	r3, [pc, #900]	@ (80048d8 <_ZN15Screen1ViewBaseC1Ev+0x398>)
 8004552:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 8004556:	f104 0898 	add.w	r8, r4, #152	@ 0x98
 800455a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800455c:	f504 7b8e 	add.w	fp, r4, #284	@ 0x11c
 8004560:	f846 3b40 	str.w	r3, [r6], #64
 8004564:	4630      	mov	r0, r6
 8004566:	f7ff ff73 	bl	8004450 <_ZN8touchgfx3BoxC1Ev>
 800456a:	4648      	mov	r0, r9
 800456c:	f7ff ff70 	bl	8004450 <_ZN8touchgfx3BoxC1Ev>
 8004570:	4640      	mov	r0, r8
 8004572:	f00e fef5 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 8004576:	f504 7384 	add.w	r3, r4, #264	@ 0x108
 800457a:	4629      	mov	r1, r5
    __background.setPosition(0, 0, 800, 480);
 800457c:	f44f 77f0 	mov.w	r7, #480	@ 0x1e0
Screen1ViewBase::Screen1ViewBase()
 8004580:	4618      	mov	r0, r3
 8004582:	931f      	str	r3, [sp, #124]	@ 0x7c
 8004584:	f7ff ff7a 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8004588:	4658      	mov	r0, fp
 800458a:	f00e fee9 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 800458e:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 8004592:	4629      	mov	r1, r5
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8004594:	f104 0a04 	add.w	sl, r4, #4
 8004598:	4618      	mov	r0, r3
 800459a:	9320      	str	r3, [sp, #128]	@ 0x80
 800459c:	f7ff ff6e 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80045a0:	f504 73d0 	add.w	r3, r4, #416	@ 0x1a0
 80045a4:	4618      	mov	r0, r3
 80045a6:	9303      	str	r3, [sp, #12]
 80045a8:	f00e feda 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 80045ac:	f504 7304 	add.w	r3, r4, #528	@ 0x210
 80045b0:	4629      	mov	r1, r5
 80045b2:	4618      	mov	r0, r3
 80045b4:	9321      	str	r3, [sp, #132]	@ 0x84
 80045b6:	f7ff ff61 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80045ba:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 80045be:	4618      	mov	r0, r3
 80045c0:	9304      	str	r3, [sp, #16]
 80045c2:	f00e fecd 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 80045c6:	f504 7325 	add.w	r3, r4, #660	@ 0x294
 80045ca:	4629      	mov	r1, r5
 80045cc:	4618      	mov	r0, r3
 80045ce:	9322      	str	r3, [sp, #136]	@ 0x88
 80045d0:	f7ff ff54 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80045d4:	f504 732a 	add.w	r3, r4, #680	@ 0x2a8
 80045d8:	4618      	mov	r0, r3
 80045da:	9305      	str	r3, [sp, #20]
 80045dc:	f00e fec0 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 80045e0:	f504 7346 	add.w	r3, r4, #792	@ 0x318
 80045e4:	4629      	mov	r1, r5
 80045e6:	4618      	mov	r0, r3
 80045e8:	9323      	str	r3, [sp, #140]	@ 0x8c
 80045ea:	f7ff ff47 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80045ee:	f504 734b 	add.w	r3, r4, #812	@ 0x32c
 80045f2:	4618      	mov	r0, r3
 80045f4:	9306      	str	r3, [sp, #24]
 80045f6:	f00e feb3 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 80045fa:	f504 7367 	add.w	r3, r4, #924	@ 0x39c
 80045fe:	4629      	mov	r1, r5
 8004600:	4618      	mov	r0, r3
 8004602:	9324      	str	r3, [sp, #144]	@ 0x90
 8004604:	f7ff ff3a 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8004608:	f504 736c 	add.w	r3, r4, #944	@ 0x3b0
 800460c:	4618      	mov	r0, r3
 800460e:	9307      	str	r3, [sp, #28]
 8004610:	f00e fea6 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 8004614:	f504 6384 	add.w	r3, r4, #1056	@ 0x420
 8004618:	4629      	mov	r1, r5
 800461a:	4618      	mov	r0, r3
 800461c:	9325      	str	r3, [sp, #148]	@ 0x94
 800461e:	f7ff ff2d 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8004622:	f204 4334 	addw	r3, r4, #1076	@ 0x434
 8004626:	4618      	mov	r0, r3
 8004628:	9308      	str	r3, [sp, #32]
 800462a:	f00e fe99 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 800462e:	f204 43a4 	addw	r3, r4, #1188	@ 0x4a4
 8004632:	4629      	mov	r1, r5
 8004634:	4618      	mov	r0, r3
 8004636:	9326      	str	r3, [sp, #152]	@ 0x98
 8004638:	f7ff ff20 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 800463c:	f504 6397 	add.w	r3, r4, #1208	@ 0x4b8
 8004640:	4618      	mov	r0, r3
 8004642:	9309      	str	r3, [sp, #36]	@ 0x24
 8004644:	f00e fe8c 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 8004648:	f504 63a5 	add.w	r3, r4, #1320	@ 0x528
 800464c:	4629      	mov	r1, r5
 800464e:	4618      	mov	r0, r3
 8004650:	9327      	str	r3, [sp, #156]	@ 0x9c
 8004652:	f7ff ff13 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8004656:	f204 533c 	addw	r3, r4, #1340	@ 0x53c
 800465a:	4618      	mov	r0, r3
 800465c:	930a      	str	r3, [sp, #40]	@ 0x28
 800465e:	f00e fe7f 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 8004662:	f204 53ac 	addw	r3, r4, #1452	@ 0x5ac
 8004666:	4629      	mov	r1, r5
 8004668:	4618      	mov	r0, r3
 800466a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800466c:	f7ff ff06 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8004670:	f504 63b8 	add.w	r3, r4, #1472	@ 0x5c0
 8004674:	4618      	mov	r0, r3
 8004676:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004678:	f00e fe72 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 800467c:	f504 63c6 	add.w	r3, r4, #1584	@ 0x630
 8004680:	4629      	mov	r1, r5
 8004682:	4618      	mov	r0, r3
 8004684:	9329      	str	r3, [sp, #164]	@ 0xa4
 8004686:	f7ff fef9 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 800468a:	f204 6344 	addw	r3, r4, #1604	@ 0x644
 800468e:	4618      	mov	r0, r3
 8004690:	930c      	str	r3, [sp, #48]	@ 0x30
 8004692:	f00e fe65 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 8004696:	f204 63b4 	addw	r3, r4, #1716	@ 0x6b4
 800469a:	4629      	mov	r1, r5
 800469c:	4618      	mov	r0, r3
 800469e:	932a      	str	r3, [sp, #168]	@ 0xa8
 80046a0:	f7ff feec 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80046a4:	f504 63d9 	add.w	r3, r4, #1736	@ 0x6c8
 80046a8:	4618      	mov	r0, r3
 80046aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80046ac:	f00e fe58 	bl	8013360 <_ZN8touchgfx4LineC1Ev>
 80046b0:	f504 63e7 	add.w	r3, r4, #1848	@ 0x738
 80046b4:	4629      	mov	r1, r5
 80046b6:	4618      	mov	r0, r3
 80046b8:	932b      	str	r3, [sp, #172]	@ 0xac
 80046ba:	f7ff fedf 	bl	800447c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80046be:	f204 734c 	addw	r3, r4, #1868	@ 0x74c
 80046c2:	4618      	mov	r0, r3
 80046c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80046c6:	f7ff feef 	bl	80044a8 <_ZN8touchgfx8TextAreaC1Ev>
 80046ca:	f204 7394 	addw	r3, r4, #1940	@ 0x794
 80046ce:	4618      	mov	r0, r3
 80046d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80046d2:	f7ff fee9 	bl	80044a8 <_ZN8touchgfx8TextAreaC1Ev>
 80046d6:	f204 73dc 	addw	r3, r4, #2012	@ 0x7dc
 80046da:	4618      	mov	r0, r3
 80046dc:	9311      	str	r3, [sp, #68]	@ 0x44
 80046de:	f7ff fee3 	bl	80044a8 <_ZN8touchgfx8TextAreaC1Ev>
 80046e2:	f604 0324 	addw	r3, r4, #2084	@ 0x824
 80046e6:	4618      	mov	r0, r3
 80046e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80046ea:	f7ff fedd 	bl	80044a8 <_ZN8touchgfx8TextAreaC1Ev>
 80046ee:	f604 036c 	addw	r3, r4, #2156	@ 0x86c
 80046f2:	4618      	mov	r0, r3
 80046f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80046f6:	f7ff fed7 	bl	80044a8 <_ZN8touchgfx8TextAreaC1Ev>
 80046fa:	f604 03b4 	addw	r3, r4, #2228	@ 0x8b4
 80046fe:	4618      	mov	r0, r3
 8004700:	9314      	str	r3, [sp, #80]	@ 0x50
 8004702:	f7ff fed1 	bl	80044a8 <_ZN8touchgfx8TextAreaC1Ev>
 8004706:	f604 03fc 	addw	r3, r4, #2300	@ 0x8fc
 800470a:	4618      	mov	r0, r3
 800470c:	9315      	str	r3, [sp, #84]	@ 0x54
 800470e:	f7ff fecb 	bl	80044a8 <_ZN8touchgfx8TextAreaC1Ev>
 8004712:	f604 1344 	addw	r3, r4, #2372	@ 0x944
 8004716:	4618      	mov	r0, r3
 8004718:	9316      	str	r3, [sp, #88]	@ 0x58
 800471a:	f7ff feef 	bl	80044fc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800471e:	f504 6319 	add.w	r3, r4, #2448	@ 0x990
 8004722:	4618      	mov	r0, r3
 8004724:	9317      	str	r3, [sp, #92]	@ 0x5c
 8004726:	f7ff febf 	bl	80044a8 <_ZN8touchgfx8TextAreaC1Ev>
 800472a:	f604 13d8 	addw	r3, r4, #2520	@ 0x9d8
 800472e:	4618      	mov	r0, r3
 8004730:	9318      	str	r3, [sp, #96]	@ 0x60
 8004732:	f7ff fee3 	bl	80044fc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004736:	f604 2324 	addw	r3, r4, #2596	@ 0xa24
 800473a:	4618      	mov	r0, r3
 800473c:	9319      	str	r3, [sp, #100]	@ 0x64
 800473e:	f7ff fedd 	bl	80044fc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004742:	f504 6327 	add.w	r3, r4, #2672	@ 0xa70
 8004746:	4618      	mov	r0, r3
 8004748:	931a      	str	r3, [sp, #104]	@ 0x68
 800474a:	f7ff fed7 	bl	80044fc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800474e:	f604 23bc 	addw	r3, r4, #2748	@ 0xabc
 8004752:	4618      	mov	r0, r3
 8004754:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004756:	f7ff fed1 	bl	80044fc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800475a:	f604 3308 	addw	r3, r4, #2824	@ 0xb08
 800475e:	4618      	mov	r0, r3
 8004760:	931c      	str	r3, [sp, #112]	@ 0x70
 8004762:	f7ff fecb 	bl	80044fc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004766:	f604 3354 	addw	r3, r4, #2900	@ 0xb54
 800476a:	4618      	mov	r0, r3
 800476c:	931d      	str	r3, [sp, #116]	@ 0x74
 800476e:	f7ff fec5 	bl	80044fc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004772:	f504 633a 	add.w	r3, r4, #2976	@ 0xba0
 8004776:	4618      	mov	r0, r3
 8004778:	930e      	str	r3, [sp, #56]	@ 0x38
 800477a:	f7ff fe95 	bl	80044a8 <_ZN8touchgfx8TextAreaC1Ev>
 800477e:	f604 33e8 	addw	r3, r4, #3048	@ 0xbe8
 8004782:	4618      	mov	r0, r3
 8004784:	931e      	str	r3, [sp, #120]	@ 0x78
 8004786:	f7ff feb9 	bl	80044fc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800478a:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 800478e:	f604 40d4 	addw	r0, r4, #3284	@ 0xcd4
 8004792:	f010 fa9f 	bl	8014cd4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8004796:	462a      	mov	r2, r5
 8004798:	4630      	mov	r0, r6
 800479a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800479e:	4629      	mov	r1, r5
 80047a0:	9700      	str	r7, [sp, #0]
 80047a2:	f7ff fe42 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80047a6:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80047aa:	4631      	mov	r1, r6
 80047ac:	4650      	mov	r0, sl
 80047ae:	66a3      	str	r3, [r4, #104]	@ 0x68
 80047b0:	f04f 36ff 	mov.w	r6, #4294967295
 80047b4:	f00b fef4 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background_black.setPosition(0, 0, 800, 480);
 80047b8:	462a      	mov	r2, r5
 80047ba:	4648      	mov	r0, r9
 80047bc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80047c0:	4629      	mov	r1, r5
 80047c2:	9700      	str	r7, [sp, #0]
 80047c4:	f7ff fe31 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 80047c8:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80047cc:	4649      	mov	r1, r9
 80047ce:	4650      	mov	r0, sl
 80047d0:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 80047d4:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 80047d8:	f00b fee2 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line1.setPosition(0, 0, 800, 480);
 80047dc:	4640      	mov	r0, r8
 80047de:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80047e2:	462a      	mov	r2, r5
 80047e4:	4629      	mov	r1, r5
 80047e6:	9700      	str	r7, [sp, #0]
 80047e8:	f7ff fe1f 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
        canvasPainter = &painter;
 80047ec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
    line1.setStart(300, 340);
 80047ee:	4640      	mov	r0, r8
 80047f0:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 80047f4:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 80047f8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 80047fc:	f884 911a 	strb.w	r9, [r4, #282]	@ 0x11a
 8004800:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
        painterRed = Color::getRed(color);
 8004804:	f8a4 6118 	strh.w	r6, [r4, #280]	@ 0x118
 8004808:	f7ff fe84 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(300, 80);
 800480c:	2250      	movs	r2, #80	@ 0x50
 800480e:	4640      	mov	r0, r8
 8004810:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8004814:	f7ff fe82 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 8004818:	4640      	mov	r0, r8
 800481a:	2101      	movs	r1, #1
 800481c:	f7ff fe82 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8004820:	4640      	mov	r0, r8
 8004822:	2101      	movs	r1, #1
 8004824:	f00e fec8 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8004828:	4641      	mov	r1, r8
 800482a:	4650      	mov	r0, sl
        boundingArea = calculateBoundingArea();
 800482c:	f10d 08b0 	add.w	r8, sp, #176	@ 0xb0
 8004830:	f00b feb6 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line2.setPosition(0, 0, 800, 480);
 8004834:	4658      	mov	r0, fp
 8004836:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800483a:	462a      	mov	r2, r5
 800483c:	4629      	mov	r1, r5
 800483e:	9700      	str	r7, [sp, #0]
 8004840:	f7ff fdf3 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004844:	9b20      	ldr	r3, [sp, #128]	@ 0x80
    line2.setStart(500, 340);
 8004846:	4658      	mov	r0, fp
 8004848:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800484c:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 8004850:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004854:	f8a4 919c 	strh.w	r9, [r4, #412]	@ 0x19c
 8004858:	f8c4 6198 	str.w	r6, [r4, #408]	@ 0x198
        painterBlue = Color::getBlue(color);
 800485c:	f884 619e 	strb.w	r6, [r4, #414]	@ 0x19e
 8004860:	f7ff fe58 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line2.setEnd(500, 80);
 8004864:	2250      	movs	r2, #80	@ 0x50
 8004866:	4658      	mov	r0, fp
 8004868:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800486c:	f7ff fe56 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line2.setLineWidth(1);
 8004870:	4658      	mov	r0, fp
 8004872:	2101      	movs	r1, #1
 8004874:	f7ff fe56 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line2.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8004878:	4658      	mov	r0, fp
 800487a:	2101      	movs	r1, #1
 800487c:	f00e fe9c 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8004880:	4659      	mov	r1, fp
 8004882:	4650      	mov	r0, sl
 8004884:	f8df b054 	ldr.w	fp, [pc, #84]	@ 80048dc <_ZN15Screen1ViewBaseC1Ev+0x39c>
 8004888:	f00b fe8a 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line3.setPosition(0, 0, 800, 480);
 800488c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004890:	462a      	mov	r2, r5
 8004892:	4629      	mov	r1, r5
 8004894:	9803      	ldr	r0, [sp, #12]
 8004896:	9700      	str	r7, [sp, #0]
 8004898:	f7ff fdc7 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 800489c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
    line3.setStart(0, 105);
 800489e:	2269      	movs	r2, #105	@ 0x69
 80048a0:	4629      	mov	r1, r5
 80048a2:	f8c4 31c8 	str.w	r3, [r4, #456]	@ 0x1c8
 80048a6:	9803      	ldr	r0, [sp, #12]
 80048a8:	f884 9222 	strb.w	r9, [r4, #546]	@ 0x222
 80048ac:	f8c4 621c 	str.w	r6, [r4, #540]	@ 0x21c
        painterRed = Color::getRed(color);
 80048b0:	f8a4 6220 	strh.w	r6, [r4, #544]	@ 0x220
 80048b4:	f7ff fe2e 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line3.setEnd(800, 105);
 80048b8:	2269      	movs	r2, #105	@ 0x69
 80048ba:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80048be:	9803      	ldr	r0, [sp, #12]
 80048c0:	f7ff fe2c 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line3.setLineWidth(1);
 80048c4:	2101      	movs	r1, #1
 80048c6:	9803      	ldr	r0, [sp, #12]
 80048c8:	f7ff fe2c 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line3.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80048cc:	2101      	movs	r1, #1
 80048ce:	9803      	ldr	r0, [sp, #12]
 80048d0:	f00e fe72 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 80048d4:	e004      	b.n	80048e0 <_ZN15Screen1ViewBaseC1Ev+0x3a0>
 80048d6:	bf00      	nop
 80048d8:	08028648 	.word	0x08028648
 80048dc:	08028054 	.word	0x08028054
 80048e0:	9903      	ldr	r1, [sp, #12]
 80048e2:	4650      	mov	r0, sl
 80048e4:	f00b fe5c 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line4.setPosition(0, 0, 800, 480);
 80048e8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80048ec:	462a      	mov	r2, r5
 80048ee:	4629      	mov	r1, r5
 80048f0:	9804      	ldr	r0, [sp, #16]
 80048f2:	9700      	str	r7, [sp, #0]
 80048f4:	f7ff fd99 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 80048f8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
    line4.setStart(0, 340);
 80048fa:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 80048fe:	4629      	mov	r1, r5
 8004900:	f8c4 324c 	str.w	r3, [r4, #588]	@ 0x24c
 8004904:	9804      	ldr	r0, [sp, #16]
        painterBlue = Color::getBlue(color);
 8004906:	f884 92a6 	strb.w	r9, [r4, #678]	@ 0x2a6
 800490a:	f8c4 62a0 	str.w	r6, [r4, #672]	@ 0x2a0
        painterRed = Color::getRed(color);
 800490e:	f8a4 62a4 	strh.w	r6, [r4, #676]	@ 0x2a4
 8004912:	f7ff fdff 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line4.setEnd(800, 340);
 8004916:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800491a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800491e:	9804      	ldr	r0, [sp, #16]
 8004920:	f7ff fdfc 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line4.setLineWidth(1);
 8004924:	2101      	movs	r1, #1
 8004926:	9804      	ldr	r0, [sp, #16]
 8004928:	f7ff fdfc 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line4.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800492c:	2101      	movs	r1, #1
 800492e:	9804      	ldr	r0, [sp, #16]
 8004930:	f00e fe42 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8004934:	9904      	ldr	r1, [sp, #16]
 8004936:	4650      	mov	r0, sl
 8004938:	f00b fe32 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line5.setPosition(0, 0, 800, 480);
 800493c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004940:	462a      	mov	r2, r5
 8004942:	4629      	mov	r1, r5
 8004944:	9805      	ldr	r0, [sp, #20]
 8004946:	9700      	str	r7, [sp, #0]
 8004948:	f7ff fd6f 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 800494c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
    line5.setStart(0, 210);
 800494e:	22d2      	movs	r2, #210	@ 0xd2
 8004950:	4629      	mov	r1, r5
 8004952:	f8c4 32d0 	str.w	r3, [r4, #720]	@ 0x2d0
 8004956:	9805      	ldr	r0, [sp, #20]
        painterBlue = Color::getBlue(color);
 8004958:	f884 932a 	strb.w	r9, [r4, #810]	@ 0x32a
 800495c:	f8c4 6324 	str.w	r6, [r4, #804]	@ 0x324
        painterRed = Color::getRed(color);
 8004960:	f8a4 6328 	strh.w	r6, [r4, #808]	@ 0x328
 8004964:	f7ff fdd6 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line5.setEnd(300, 210);
 8004968:	22d2      	movs	r2, #210	@ 0xd2
 800496a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800496e:	9805      	ldr	r0, [sp, #20]
 8004970:	f7ff fdd4 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line5.setLineWidth(1);
 8004974:	2101      	movs	r1, #1
 8004976:	9805      	ldr	r0, [sp, #20]
 8004978:	f7ff fdd4 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line5.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800497c:	2101      	movs	r1, #1
 800497e:	9805      	ldr	r0, [sp, #20]
 8004980:	f00e fe1a 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8004984:	9905      	ldr	r1, [sp, #20]
 8004986:	4650      	mov	r0, sl
 8004988:	f00b fe0a 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line6.setPosition(0, 0, 800, 480);
 800498c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004990:	462a      	mov	r2, r5
 8004992:	4629      	mov	r1, r5
 8004994:	9806      	ldr	r0, [sp, #24]
 8004996:	9700      	str	r7, [sp, #0]
 8004998:	f7ff fd47 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 800499c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
    line6.setStart(500, 210);
 800499e:	22d2      	movs	r2, #210	@ 0xd2
 80049a0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80049a4:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 80049a8:	9806      	ldr	r0, [sp, #24]
        painterBlue = Color::getBlue(color);
 80049aa:	f884 93ae 	strb.w	r9, [r4, #942]	@ 0x3ae
 80049ae:	f8c4 63a8 	str.w	r6, [r4, #936]	@ 0x3a8
        painterRed = Color::getRed(color);
 80049b2:	f8a4 63ac 	strh.w	r6, [r4, #940]	@ 0x3ac
 80049b6:	f7ff fdad 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line6.setEnd(800, 210);
 80049ba:	22d2      	movs	r2, #210	@ 0xd2
 80049bc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80049c0:	9806      	ldr	r0, [sp, #24]
 80049c2:	f7ff fdab 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line6.setLineWidth(1);
 80049c6:	2101      	movs	r1, #1
 80049c8:	9806      	ldr	r0, [sp, #24]
 80049ca:	f7ff fdab 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line6.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80049ce:	2101      	movs	r1, #1
 80049d0:	9806      	ldr	r0, [sp, #24]
 80049d2:	f00e fdf1 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 80049d6:	9906      	ldr	r1, [sp, #24]
 80049d8:	4650      	mov	r0, sl
 80049da:	f00b fde1 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line7.setPosition(0, 0, 800, 480);
 80049de:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80049e2:	462a      	mov	r2, r5
 80049e4:	4629      	mov	r1, r5
 80049e6:	9807      	ldr	r0, [sp, #28]
 80049e8:	9700      	str	r7, [sp, #0]
 80049ea:	f7ff fd1e 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 80049ee:	9b25      	ldr	r3, [sp, #148]	@ 0x94
    line7.setStart(0, 80);
 80049f0:	2250      	movs	r2, #80	@ 0x50
 80049f2:	4629      	mov	r1, r5
 80049f4:	f8c4 33d8 	str.w	r3, [r4, #984]	@ 0x3d8
 80049f8:	9807      	ldr	r0, [sp, #28]
        painterBlue = Color::getBlue(color);
 80049fa:	f884 9432 	strb.w	r9, [r4, #1074]	@ 0x432
 80049fe:	f8c4 642c 	str.w	r6, [r4, #1068]	@ 0x42c
        painterRed = Color::getRed(color);
 8004a02:	f8a4 6430 	strh.w	r6, [r4, #1072]	@ 0x430
 8004a06:	f7ff fd85 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line7.setEnd(800, 80);
 8004a0a:	2250      	movs	r2, #80	@ 0x50
 8004a0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8004a10:	9807      	ldr	r0, [sp, #28]
 8004a12:	f7ff fd83 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line7.setLineWidth(1);
 8004a16:	2101      	movs	r1, #1
 8004a18:	9807      	ldr	r0, [sp, #28]
 8004a1a:	f7ff fd83 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line7.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8004a1e:	2101      	movs	r1, #1
 8004a20:	9807      	ldr	r0, [sp, #28]
 8004a22:	f00e fdc9 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8004a26:	9907      	ldr	r1, [sp, #28]
 8004a28:	4650      	mov	r0, sl
 8004a2a:	f00b fdb9 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line8.setPosition(0, 0, 800, 480);
 8004a2e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004a32:	462a      	mov	r2, r5
 8004a34:	4629      	mov	r1, r5
 8004a36:	9808      	ldr	r0, [sp, #32]
 8004a38:	9700      	str	r7, [sp, #0]
 8004a3a:	f7ff fcf6 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004a3e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
    line8.setStart(0, 365);
 8004a40:	f240 126d 	movw	r2, #365	@ 0x16d
 8004a44:	4629      	mov	r1, r5
 8004a46:	f8c4 345c 	str.w	r3, [r4, #1116]	@ 0x45c
 8004a4a:	9808      	ldr	r0, [sp, #32]
        painterBlue = Color::getBlue(color);
 8004a4c:	f884 94b6 	strb.w	r9, [r4, #1206]	@ 0x4b6
 8004a50:	f8c4 64b0 	str.w	r6, [r4, #1200]	@ 0x4b0
        painterRed = Color::getRed(color);
 8004a54:	f8a4 64b4 	strh.w	r6, [r4, #1204]	@ 0x4b4
 8004a58:	f7ff fd5c 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line8.setEnd(800, 365);
 8004a5c:	f240 126d 	movw	r2, #365	@ 0x16d
 8004a60:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8004a64:	9808      	ldr	r0, [sp, #32]
 8004a66:	f7ff fd59 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line8.setLineWidth(1);
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	9808      	ldr	r0, [sp, #32]
 8004a6e:	f7ff fd59 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line8.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8004a72:	2101      	movs	r1, #1
 8004a74:	9808      	ldr	r0, [sp, #32]
 8004a76:	f00e fd9f 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8004a7a:	9908      	ldr	r1, [sp, #32]
 8004a7c:	4650      	mov	r0, sl
 8004a7e:	f00b fd8f 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line9.setPosition(0, 0, 800, 480);
 8004a82:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004a86:	462a      	mov	r2, r5
 8004a88:	4629      	mov	r1, r5
 8004a8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a8c:	9700      	str	r7, [sp, #0]
 8004a8e:	f7ff fccc 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004a92:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
    line9.setStart(400, 480);
 8004a94:	463a      	mov	r2, r7
 8004a96:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004a9a:	f8c4 34e0 	str.w	r3, [r4, #1248]	@ 0x4e0
 8004a9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
        painterBlue = Color::getBlue(color);
 8004aa0:	f884 953a 	strb.w	r9, [r4, #1338]	@ 0x53a
 8004aa4:	f8c4 6534 	str.w	r6, [r4, #1332]	@ 0x534
        painterRed = Color::getRed(color);
 8004aa8:	f8a4 6538 	strh.w	r6, [r4, #1336]	@ 0x538
 8004aac:	f7ff fd32 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line9.setEnd(400, 340);
 8004ab0:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8004ab4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004ab8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004aba:	f7ff fd2f 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line9.setLineWidth(1);
 8004abe:	2101      	movs	r1, #1
 8004ac0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ac2:	f7ff fd2f 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line9.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004aca:	f00e fd75 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8004ace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ad0:	4650      	mov	r0, sl
 8004ad2:	f00b fd65 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line10.setPosition(0, 0, 800, 480);
 8004ad6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004ada:	462a      	mov	r2, r5
 8004adc:	4629      	mov	r1, r5
 8004ade:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004ae0:	9700      	str	r7, [sp, #0]
 8004ae2:	f7ff fca2 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004ae6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
    line10.setStart(200, 480);
 8004ae8:	463a      	mov	r2, r7
 8004aea:	21c8      	movs	r1, #200	@ 0xc8
 8004aec:	f8c4 3564 	str.w	r3, [r4, #1380]	@ 0x564
 8004af0:	980a      	ldr	r0, [sp, #40]	@ 0x28
        painterBlue = Color::getBlue(color);
 8004af2:	f884 95be 	strb.w	r9, [r4, #1470]	@ 0x5be
 8004af6:	f8c4 65b8 	str.w	r6, [r4, #1464]	@ 0x5b8
        painterRed = Color::getRed(color);
 8004afa:	f8a4 65bc 	strh.w	r6, [r4, #1468]	@ 0x5bc
 8004afe:	f7ff fd09 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(200, 340);
 8004b02:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8004b06:	21c8      	movs	r1, #200	@ 0xc8
 8004b08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004b0a:	f7ff fd07 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(1);
 8004b0e:	2101      	movs	r1, #1
 8004b10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004b12:	f7ff fd07 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8004b16:	2101      	movs	r1, #1
 8004b18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004b1a:	f00e fd4d 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8004b1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b20:	4650      	mov	r0, sl
 8004b22:	f00b fd3d 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line11.setPosition(0, 0, 800, 480);
 8004b26:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004b2a:	462a      	mov	r2, r5
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004b30:	9700      	str	r7, [sp, #0]
 8004b32:	f7ff fc7a 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004b36:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
    line11.setStart(600, 480);
 8004b38:	463a      	mov	r2, r7
 8004b3a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8004b3e:	f8c4 35e8 	str.w	r3, [r4, #1512]	@ 0x5e8
 8004b42:	980b      	ldr	r0, [sp, #44]	@ 0x2c
        painterBlue = Color::getBlue(color);
 8004b44:	f884 9642 	strb.w	r9, [r4, #1602]	@ 0x642
 8004b48:	f8c4 663c 	str.w	r6, [r4, #1596]	@ 0x63c
        painterRed = Color::getRed(color);
 8004b4c:	f8a4 6640 	strh.w	r6, [r4, #1600]	@ 0x640
 8004b50:	f7ff fce0 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(600, 340);
 8004b54:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8004b58:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8004b5c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004b5e:	f7ff fcdd 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(1);
 8004b62:	2101      	movs	r1, #1
 8004b64:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004b66:	f7ff fcdd 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004b6e:	f00e fd23 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8004b72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b74:	4650      	mov	r0, sl
 8004b76:	f00b fd13 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line12.setPosition(0, 0, 800, 480);
 8004b7a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004b7e:	462a      	mov	r2, r5
 8004b80:	4629      	mov	r1, r5
 8004b82:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004b84:	9700      	str	r7, [sp, #0]
 8004b86:	f7ff fc50 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004b8a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
    line12.setStart(0, 235);
 8004b8c:	22eb      	movs	r2, #235	@ 0xeb
 8004b8e:	4629      	mov	r1, r5
 8004b90:	f8c4 366c 	str.w	r3, [r4, #1644]	@ 0x66c
 8004b94:	980c      	ldr	r0, [sp, #48]	@ 0x30
        painterBlue = Color::getBlue(color);
 8004b96:	f884 96c6 	strb.w	r9, [r4, #1734]	@ 0x6c6
 8004b9a:	f8c4 66c0 	str.w	r6, [r4, #1728]	@ 0x6c0
        painterRed = Color::getRed(color);
 8004b9e:	f8a4 66c4 	strh.w	r6, [r4, #1732]	@ 0x6c4
 8004ba2:	f7ff fcb7 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line12.setEnd(300, 235);
 8004ba6:	22eb      	movs	r2, #235	@ 0xeb
 8004ba8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8004bac:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004bae:	f7ff fcb5 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line12.setLineWidth(1);
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004bb6:	f7ff fcb5 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line12.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8004bba:	2101      	movs	r1, #1
 8004bbc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004bbe:	f00e fcfb 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8004bc2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004bc4:	4650      	mov	r0, sl
 8004bc6:	f00b fceb 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line13.setPosition(0, 0, 800, 480);
 8004bca:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004bce:	462a      	mov	r2, r5
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004bd4:	9700      	str	r7, [sp, #0]
    Gear_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8UM2));
 8004bd6:	af31      	add	r7, sp, #196	@ 0xc4
    line13.setPosition(0, 0, 800, 480);
 8004bd8:	f7ff fc27 	bl	800442a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004bdc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
    line13.setStart(500, 235);
 8004bde:	22eb      	movs	r2, #235	@ 0xeb
 8004be0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004be4:	f8c4 36f0 	str.w	r3, [r4, #1776]	@ 0x6f0
 8004be8:	980d      	ldr	r0, [sp, #52]	@ 0x34
        painterBlue = Color::getBlue(color);
 8004bea:	f884 974a 	strb.w	r9, [r4, #1866]	@ 0x74a
 8004bee:	f8c4 6744 	str.w	r6, [r4, #1860]	@ 0x744
        painterRed = Color::getRed(color);
 8004bf2:	f8a4 6748 	strh.w	r6, [r4, #1864]	@ 0x748
 8004bf6:	f7ff fc8d 	bl	8004514 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line13.setEnd(800, 235);
 8004bfa:	22eb      	movs	r2, #235	@ 0xeb
 8004bfc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8004c00:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004c02:	f7ff fc8b 	bl	800451c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line13.setLineWidth(1);
 8004c06:	2101      	movs	r1, #1
 8004c08:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004c0a:	f7ff fc8b 	bl	8004524 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line13.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8004c0e:	2101      	movs	r1, #1
 8004c10:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004c12:	f00e fcd1 	bl	80135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8004c16:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004c18:	4650      	mov	r0, sl
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004c1a:	f8df 9234 	ldr.w	r9, [pc, #564]	@ 8004e50 <_ZN15Screen1ViewBaseC1Ev+0x910>
 8004c1e:	f00b fcbf 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Gear_text.setXY(372, 81);
 8004c22:	2251      	movs	r2, #81	@ 0x51
 8004c24:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8004c28:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004c2a:	f7ff fbf1 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 8004c2e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004c30:	4640      	mov	r0, r8
        color = newColor;
 8004c32:	f8c4 677c 	str.w	r6, [r4, #1916]	@ 0x77c
        linespace = space;
 8004c36:	f8a4 5780 	strh.w	r5, [r4, #1920]	@ 0x780
        boundingArea = calculateBoundingArea();
 8004c3a:	f00e fe5f 	bl	80138fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004c3e:	f504 63f1 	add.w	r3, r4, #1928	@ 0x788
 8004c42:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004c46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        : typedTextId(id)
 8004c4a:	2318      	movs	r3, #24
    Gear_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8UM2));
 8004c4c:	4639      	mov	r1, r7
 8004c4e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004c50:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 8004c54:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8004c58:	f00f f8f8 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004c5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004c5e:	4650      	mov	r0, sl
 8004c60:	f00b fc9e 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    rpm_text.setXY(629, 81);
 8004c64:	2251      	movs	r2, #81	@ 0x51
 8004c66:	f240 2175 	movw	r1, #629	@ 0x275
 8004c6a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004c6c:	f7ff fbd0 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 8004c70:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004c72:	4640      	mov	r0, r8
        color = newColor;
 8004c74:	f8c4 67c4 	str.w	r6, [r4, #1988]	@ 0x7c4
        linespace = space;
 8004c78:	f8a4 57c8 	strh.w	r5, [r4, #1992]	@ 0x7c8
        boundingArea = calculateBoundingArea();
 8004c7c:	f00e fe3e 	bl	80138fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004c80:	f504 63fa 	add.w	r3, r4, #2000	@ 0x7d0
 8004c84:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004c88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004c8c:	2316      	movs	r3, #22
    rpm_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IC86));
 8004c8e:	4639      	mov	r1, r7
 8004c90:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004c92:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 8004c96:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8004c9a:	f00f f8d7 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004c9e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004ca0:	4650      	mov	r0, sl
 8004ca2:	f00b fc7d 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    spd_text.setXY(631, 211);
 8004ca6:	22d3      	movs	r2, #211	@ 0xd3
 8004ca8:	f240 2177 	movw	r1, #631	@ 0x277
 8004cac:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004cae:	f7ff fbaf 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 8004cb2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004cb4:	4640      	mov	r0, r8
        color = newColor;
 8004cb6:	f8c4 680c 	str.w	r6, [r4, #2060]	@ 0x80c
        linespace = space;
 8004cba:	f8a4 5810 	strh.w	r5, [r4, #2064]	@ 0x810
        boundingArea = calculateBoundingArea();
 8004cbe:	f00e fe1d 	bl	80138fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004cc2:	f604 0318 	addw	r3, r4, #2072	@ 0x818
 8004cc6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004cca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004cce:	2315      	movs	r3, #21
    spd_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RBA9));
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004cd4:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 8004cd8:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8004cdc:	f00f f8b6 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004ce0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004ce2:	4650      	mov	r0, sl
 8004ce4:	f00b fc5c 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    oil_text.setXY(84, 342);
 8004ce8:	f44f 72ab 	mov.w	r2, #342	@ 0x156
 8004cec:	2154      	movs	r1, #84	@ 0x54
 8004cee:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004cf0:	f7ff fb8e 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 8004cf4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8004cf6:	4640      	mov	r0, r8
        color = newColor;
 8004cf8:	f8c4 6854 	str.w	r6, [r4, #2132]	@ 0x854
        linespace = space;
 8004cfc:	f8a4 5858 	strh.w	r5, [r4, #2136]	@ 0x858
        boundingArea = calculateBoundingArea();
 8004d00:	f00e fdfc 	bl	80138fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004d04:	f504 6306 	add.w	r3, r4, #2144	@ 0x860
 8004d08:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004d0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004d10:	2314      	movs	r3, #20
    oil_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LA13));
 8004d12:	4639      	mov	r1, r7
 8004d14:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004d16:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 8004d1a:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8004d1e:	f00f f895 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004d22:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8004d24:	4650      	mov	r0, sl
 8004d26:	f00b fc3b 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    water_text.setXY(265, 342);
 8004d2a:	f44f 72ab 	mov.w	r2, #342	@ 0x156
 8004d2e:	f240 1109 	movw	r1, #265	@ 0x109
 8004d32:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8004d34:	f7ff fb6c 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 8004d38:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004d3a:	4640      	mov	r0, r8
        color = newColor;
 8004d3c:	f8c4 689c 	str.w	r6, [r4, #2204]	@ 0x89c
        linespace = space;
 8004d40:	f8a4 58a0 	strh.w	r5, [r4, #2208]	@ 0x8a0
        boundingArea = calculateBoundingArea();
 8004d44:	f00e fdda 	bl	80138fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004d48:	f604 03a8 	addw	r3, r4, #2216	@ 0x8a8
 8004d4c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004d50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004d54:	2313      	movs	r3, #19
    water_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HL8X));
 8004d56:	4639      	mov	r1, r7
 8004d58:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8004d5a:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 8004d5e:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8004d62:	f00f f873 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004d66:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004d68:	4650      	mov	r0, sl
 8004d6a:	f00b fc19 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Lap_text.setXY(105, 81);
 8004d6e:	2251      	movs	r2, #81	@ 0x51
 8004d70:	2169      	movs	r1, #105	@ 0x69
 8004d72:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004d74:	f7ff fb4c 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 8004d78:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8004d7a:	4640      	mov	r0, r8
        color = newColor;
 8004d7c:	f8c4 68e4 	str.w	r6, [r4, #2276]	@ 0x8e4
        linespace = space;
 8004d80:	f8a4 58e8 	strh.w	r5, [r4, #2280]	@ 0x8e8
        boundingArea = calculateBoundingArea();
 8004d84:	f00e fdba 	bl	80138fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004d88:	f504 630f 	add.w	r3, r4, #2288	@ 0x8f0
 8004d8c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004d90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004d94:	2317      	movs	r3, #23
    Lap_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VC3H));
 8004d96:	4639      	mov	r1, r7
 8004d98:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004d9a:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 8004d9e:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8004da2:	f00f f853 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004da6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8004da8:	4650      	mov	r0, sl
 8004daa:	f00b fbf9 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Lap_text_1.setXY(112, 211);
 8004dae:	22d3      	movs	r2, #211	@ 0xd3
 8004db0:	2170      	movs	r1, #112	@ 0x70
 8004db2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004db4:	f7ff fb2c 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 8004db8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8004dba:	4640      	mov	r0, r8
        color = newColor;
 8004dbc:	f8c4 692c 	str.w	r6, [r4, #2348]	@ 0x92c
        linespace = space;
 8004dc0:	f8a4 5930 	strh.w	r5, [r4, #2352]	@ 0x930
        boundingArea = calculateBoundingArea();
 8004dc4:	f00e fd9a 	bl	80138fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004dc8:	f604 1338 	addw	r3, r4, #2360	@ 0x938
 8004dcc:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004dd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004dd4:	2302      	movs	r3, #2
    Lap_text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1XAB));
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004dda:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 8004dde:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8004de2:	f00f f833 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004de6:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8004de8:	4650      	mov	r0, sl
 8004dea:	f00b fbd9 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Gear_stat.setXY(345, 91);
 8004dee:	225b      	movs	r2, #91	@ 0x5b
 8004df0:	f240 1159 	movw	r1, #345	@ 0x159
 8004df4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8004df6:	f7ff fb0b 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
        return TextArea::BoundingArea();
 8004dfa:	4638      	mov	r0, r7
        color = newColor;
 8004dfc:	f8c4 6974 	str.w	r6, [r4, #2420]	@ 0x974
        linespace = space;
 8004e00:	f8a4 5978 	strh.w	r5, [r4, #2424]	@ 0x978
 8004e04:	f7ff fb48 	bl	8004498 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8004e08:	f504 6318 	add.w	r3, r4, #2432	@ 0x980
 8004e0c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004e10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(Gear_statBuffer, GEAR_STAT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_0W1A).getText());
 8004e14:	f604 4334 	addw	r3, r4, #3124	@ 0xc34
 8004e18:	9303      	str	r3, [sp, #12]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004e1a:	f8d9 3000 	ldr.w	r3, [r9]
 8004e1e:	b92b      	cbnz	r3, 8004e2c <_ZN15Screen1ViewBaseC1Ev+0x8ec>
 8004e20:	4b06      	ldr	r3, [pc, #24]	@ (8004e3c <_ZN15Screen1ViewBaseC1Ev+0x8fc>)
 8004e22:	2160      	movs	r1, #96	@ 0x60
 8004e24:	4a06      	ldr	r2, [pc, #24]	@ (8004e40 <_ZN15Screen1ViewBaseC1Ev+0x900>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004e26:	4807      	ldr	r0, [pc, #28]	@ (8004e44 <_ZN15Screen1ViewBaseC1Ev+0x904>)
 8004e28:	f020 fa7a 	bl	8025320 <__assert_func>
 8004e2c:	4b06      	ldr	r3, [pc, #24]	@ (8004e48 <_ZN15Screen1ViewBaseC1Ev+0x908>)
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	2b11      	cmp	r3, #17
 8004e32:	d80f      	bhi.n	8004e54 <_ZN15Screen1ViewBaseC1Ev+0x914>
 8004e34:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <_ZN15Screen1ViewBaseC1Ev+0x90c>)
 8004e36:	2161      	movs	r1, #97	@ 0x61
 8004e38:	4a01      	ldr	r2, [pc, #4]	@ (8004e40 <_ZN15Screen1ViewBaseC1Ev+0x900>)
 8004e3a:	e7f4      	b.n	8004e26 <_ZN15Screen1ViewBaseC1Ev+0x8e6>
 8004e3c:	08028450 	.word	0x08028450
 8004e40:	08028560 	.word	0x08028560
 8004e44:	080284cd 	.word	0x080284cd
 8004e48:	24028e88 	.word	0x24028e88
 8004e4c:	08028522 	.word	0x08028522
 8004e50:	24028e84 	.word	0x24028e84
        return texts->getText(typedTextId);
 8004e54:	4bd4      	ldr	r3, [pc, #848]	@ (80051a8 <_ZN15Screen1ViewBaseC1Ev+0xc68>)
 8004e56:	2111      	movs	r1, #17
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	f000 fc49 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
 8004e5e:	210a      	movs	r1, #10
 8004e60:	4603      	mov	r3, r0
 8004e62:	4ad2      	ldr	r2, [pc, #840]	@ (80051ac <_ZN15Screen1ViewBaseC1Ev+0xc6c>)
 8004e64:	9803      	ldr	r0, [sp, #12]
 8004e66:	f014 fffb 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8004e6a:	9a03      	ldr	r2, [sp, #12]
    Gear_stat.resizeToCurrentText();
 8004e6c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8004e6e:	f8c4 298c 	str.w	r2, [r4, #2444]	@ 0x98c
 8004e72:	f00e ffcb 	bl	8013e0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004e76:	2312      	movs	r3, #18
    Gear_stat.setTypedText(touchgfx::TypedText(T___SINGLEUSE_U7IV));
 8004e78:	4639      	mov	r1, r7
 8004e7a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8004e7c:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 8004e80:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8004e84:	f00e ffe2 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004e88:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8004e8a:	4650      	mov	r0, sl
 8004e8c:	f00b fb88 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    N_stat.setXY(328, 91);
 8004e90:	225b      	movs	r2, #91	@ 0x5b
 8004e92:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004e96:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004e98:	f7ff faba 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 8004e9c:	4640      	mov	r0, r8
 8004e9e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
        color = newColor;
 8004ea0:	f8c4 69c0 	str.w	r6, [r4, #2496]	@ 0x9c0
        linespace = space;
 8004ea4:	f8a4 59c4 	strh.w	r5, [r4, #2500]	@ 0x9c4
        boundingArea = calculateBoundingArea();
 8004ea8:	f00e fd28 	bl	80138fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004eac:	f604 13cc 	addw	r3, r4, #2508	@ 0x9cc
 8004eb0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004eb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004eb8:	f04f 0210 	mov.w	r2, #16
    N_stat.setTypedText(touchgfx::TypedText(T___SINGLEUSE_A2L4));
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	9817      	ldr	r0, [sp, #92]	@ 0x5c
    Unicode::snprintf(RpmBuffer, RPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_Z4F3).getText());
 8004ec0:	f604 4848 	addw	r8, r4, #3144	@ 0xc48
 8004ec4:	f8ad 20c8 	strh.w	r2, [sp, #200]	@ 0xc8
 8004ec8:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
    N_stat.setTypedText(touchgfx::TypedText(T___SINGLEUSE_A2L4));
 8004ecc:	f00e ffbe 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004ed0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8004ed2:	4650      	mov	r0, sl
        visible = vis;
 8004ed4:	f884 59b5 	strb.w	r5, [r4, #2485]	@ 0x9b5
 8004ed8:	f00b fb62 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Rpm.setXY(511, 92);
 8004edc:	225c      	movs	r2, #92	@ 0x5c
 8004ede:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8004ee2:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8004ee4:	f7ff fa94 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
        return TextArea::BoundingArea();
 8004ee8:	4638      	mov	r0, r7
        color = newColor;
 8004eea:	f8c4 6a08 	str.w	r6, [r4, #2568]	@ 0xa08
        linespace = space;
 8004eee:	f8a4 5a0c 	strh.w	r5, [r4, #2572]	@ 0xa0c
 8004ef2:	f7ff fad1 	bl	8004498 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8004ef6:	f604 2314 	addw	r3, r4, #2580	@ 0xa14
 8004efa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004efe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004f02:	f8d9 3000 	ldr.w	r3, [r9]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d08a      	beq.n	8004e20 <_ZN15Screen1ViewBaseC1Ev+0x8e0>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004f0a:	4aa9      	ldr	r2, [pc, #676]	@ (80051b0 <_ZN15Screen1ViewBaseC1Ev+0xc70>)
 8004f0c:	8813      	ldrh	r3, [r2, #0]
 8004f0e:	2b0e      	cmp	r3, #14
 8004f10:	d990      	bls.n	8004e34 <_ZN15Screen1ViewBaseC1Ev+0x8f4>
        return texts->getText(typedTextId);
 8004f12:	4ba5      	ldr	r3, [pc, #660]	@ (80051a8 <_ZN15Screen1ViewBaseC1Ev+0xc68>)
 8004f14:	210e      	movs	r1, #14
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	f000 fbea 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(RpmBuffer, RPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_Z4F3).getText());
 8004f1c:	4aa3      	ldr	r2, [pc, #652]	@ (80051ac <_ZN15Screen1ViewBaseC1Ev+0xc6c>)
 8004f1e:	4603      	mov	r3, r0
 8004f20:	210a      	movs	r1, #10
 8004f22:	4640      	mov	r0, r8
 8004f24:	f014 ff9c 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Rpm.resizeToCurrentText();
 8004f28:	9818      	ldr	r0, [sp, #96]	@ 0x60
        wc1 = value;
 8004f2a:	f8c4 8a20 	str.w	r8, [r4, #2592]	@ 0xa20
    Unicode::snprintf(SpdBuffer, SPD_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_KK41).getText());
 8004f2e:	f604 485c 	addw	r8, r4, #3164	@ 0xc5c
    Rpm.resizeToCurrentText();
 8004f32:	f00e ff6b 	bl	8013e0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004f36:	230f      	movs	r3, #15
    Rpm.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LOKH));
 8004f38:	4639      	mov	r1, r7
 8004f3a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8004f3c:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 8004f40:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8004f44:	f00e ff82 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004f48:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8004f4a:	4650      	mov	r0, sl
 8004f4c:	f00b fb28 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Spd.setXY(567, 221);
 8004f50:	22dd      	movs	r2, #221	@ 0xdd
 8004f52:	f240 2137 	movw	r1, #567	@ 0x237
 8004f56:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004f58:	f7ff fa5a 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
        return TextArea::BoundingArea();
 8004f5c:	4638      	mov	r0, r7
        color = newColor;
 8004f5e:	f8c4 6a54 	str.w	r6, [r4, #2644]	@ 0xa54
        linespace = space;
 8004f62:	f8a4 5a58 	strh.w	r5, [r4, #2648]	@ 0xa58
 8004f66:	f7ff fa97 	bl	8004498 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8004f6a:	f504 6326 	add.w	r3, r4, #2656	@ 0xa60
 8004f6e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004f72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004f76:	f8d9 3000 	ldr.w	r3, [r9]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f43f af50 	beq.w	8004e20 <_ZN15Screen1ViewBaseC1Ev+0x8e0>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004f80:	4a8b      	ldr	r2, [pc, #556]	@ (80051b0 <_ZN15Screen1ViewBaseC1Ev+0xc70>)
 8004f82:	8813      	ldrh	r3, [r2, #0]
 8004f84:	2b0c      	cmp	r3, #12
 8004f86:	f67f af55 	bls.w	8004e34 <_ZN15Screen1ViewBaseC1Ev+0x8f4>
        return texts->getText(typedTextId);
 8004f8a:	4b87      	ldr	r3, [pc, #540]	@ (80051a8 <_ZN15Screen1ViewBaseC1Ev+0xc68>)
 8004f8c:	210c      	movs	r1, #12
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	f000 fbae 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(SpdBuffer, SPD_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_KK41).getText());
 8004f94:	4a85      	ldr	r2, [pc, #532]	@ (80051ac <_ZN15Screen1ViewBaseC1Ev+0xc6c>)
 8004f96:	4603      	mov	r3, r0
 8004f98:	210a      	movs	r1, #10
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	f014 ff60 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Spd.resizeToCurrentText();
 8004fa0:	9819      	ldr	r0, [sp, #100]	@ 0x64
        wc1 = value;
 8004fa2:	f8c4 8a6c 	str.w	r8, [r4, #2668]	@ 0xa6c
    Unicode::snprintf(OilBuffer, OIL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_OE6Y).getText());
 8004fa6:	f504 6847 	add.w	r8, r4, #3184	@ 0xc70
    Spd.resizeToCurrentText();
 8004faa:	f00e ff2f 	bl	8013e0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004fae:	230d      	movs	r3, #13
    Spd.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X9E5));
 8004fb0:	4639      	mov	r1, r7
 8004fb2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004fb4:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 8004fb8:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8004fbc:	f00e ff46 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004fc0:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8004fc2:	4650      	mov	r0, sl
 8004fc4:	f00b faec 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Oil.setXY(16, 362);
 8004fc8:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8004fcc:	2110      	movs	r1, #16
 8004fce:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004fd0:	f7ff fa1e 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
        return TextArea::BoundingArea();
 8004fd4:	4638      	mov	r0, r7
        color = newColor;
 8004fd6:	f8c4 6aa0 	str.w	r6, [r4, #2720]	@ 0xaa0
        linespace = space;
 8004fda:	f8a4 5aa4 	strh.w	r5, [r4, #2724]	@ 0xaa4
 8004fde:	f7ff fa5b 	bl	8004498 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8004fe2:	f604 23ac 	addw	r3, r4, #2732	@ 0xaac
 8004fe6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004fea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004fee:	f8d9 3000 	ldr.w	r3, [r9]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f43f af14 	beq.w	8004e20 <_ZN15Screen1ViewBaseC1Ev+0x8e0>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004ff8:	4a6d      	ldr	r2, [pc, #436]	@ (80051b0 <_ZN15Screen1ViewBaseC1Ev+0xc70>)
 8004ffa:	8813      	ldrh	r3, [r2, #0]
 8004ffc:	2b0a      	cmp	r3, #10
 8004ffe:	f67f af19 	bls.w	8004e34 <_ZN15Screen1ViewBaseC1Ev+0x8f4>
        return texts->getText(typedTextId);
 8005002:	4b69      	ldr	r3, [pc, #420]	@ (80051a8 <_ZN15Screen1ViewBaseC1Ev+0xc68>)
 8005004:	210a      	movs	r1, #10
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	f000 fb72 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(OilBuffer, OIL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_OE6Y).getText());
 800500c:	4a67      	ldr	r2, [pc, #412]	@ (80051ac <_ZN15Screen1ViewBaseC1Ev+0xc6c>)
 800500e:	4603      	mov	r3, r0
 8005010:	210a      	movs	r1, #10
 8005012:	4640      	mov	r0, r8
 8005014:	f014 ff24 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Oil.resizeToCurrentText();
 8005018:	981a      	ldr	r0, [sp, #104]	@ 0x68
        wc1 = value;
 800501a:	f8c4 8ab8 	str.w	r8, [r4, #2744]	@ 0xab8
 800501e:	f00e fef5 	bl	8013e0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8005022:	230b      	movs	r3, #11
    Oil.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NX5V));
 8005024:	4639      	mov	r1, r7
 8005026:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8005028:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 800502c:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8005030:	f00e ff0c 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005034:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005036:	4650      	mov	r0, sl
 8005038:	f00b fab2 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Water.setXY(216, 362);
 800503c:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8005040:	21d8      	movs	r1, #216	@ 0xd8
 8005042:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8005044:	f7ff f9e4 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
        linespace = space;
 8005048:	f8a4 5af0 	strh.w	r5, [r4, #2800]	@ 0xaf0
        return TextArea::BoundingArea();
 800504c:	4638      	mov	r0, r7
        color = newColor;
 800504e:	f8c4 6aec 	str.w	r6, [r4, #2796]	@ 0xaec
 8005052:	f7ff fa21 	bl	8004498 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8005056:	f604 23f8 	addw	r3, r4, #2808	@ 0xaf8
    Unicode::snprintf(WaterBuffer, WATER_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8IFD).getText());
 800505a:	f604 4584 	addw	r5, r4, #3204	@ 0xc84
 800505e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005062:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005066:	f8d9 3000 	ldr.w	r3, [r9]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f43f aed8 	beq.w	8004e20 <_ZN15Screen1ViewBaseC1Ev+0x8e0>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005070:	4a4f      	ldr	r2, [pc, #316]	@ (80051b0 <_ZN15Screen1ViewBaseC1Ev+0xc70>)
 8005072:	8813      	ldrh	r3, [r2, #0]
 8005074:	2b08      	cmp	r3, #8
 8005076:	f67f aedd 	bls.w	8004e34 <_ZN15Screen1ViewBaseC1Ev+0x8f4>
        return texts->getText(typedTextId);
 800507a:	4b4b      	ldr	r3, [pc, #300]	@ (80051a8 <_ZN15Screen1ViewBaseC1Ev+0xc68>)
 800507c:	2108      	movs	r1, #8
        : typedTextId(id)
 800507e:	4e4d      	ldr	r6, [pc, #308]	@ (80051b4 <_ZN15Screen1ViewBaseC1Ev+0xc74>)
        color = newColor;
 8005080:	f04f 38ff 	mov.w	r8, #4294967295
        return texts->getText(typedTextId);
 8005084:	6818      	ldr	r0, [r3, #0]
        linespace = space;
 8005086:	2700      	movs	r7, #0
 8005088:	f000 fb32 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
 800508c:	4a47      	ldr	r2, [pc, #284]	@ (80051ac <_ZN15Screen1ViewBaseC1Ev+0xc6c>)
 800508e:	4603      	mov	r3, r0
 8005090:	210a      	movs	r1, #10
 8005092:	4628      	mov	r0, r5
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005094:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 80051b8 <_ZN15Screen1ViewBaseC1Ev+0xc78>
 8005098:	f014 fee2 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Water.resizeToCurrentText();
 800509c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
        wc1 = value;
 800509e:	f8c4 5b04 	str.w	r5, [r4, #2820]	@ 0xb04
    Water.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5NCV));
 80050a2:	ad31      	add	r5, sp, #196	@ 0xc4
    Water.resizeToCurrentText();
 80050a4:	f00e feb2 	bl	8013e0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 80050a8:	2309      	movs	r3, #9
    Water.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5NCV));
 80050aa:	4629      	mov	r1, r5
 80050ac:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80050ae:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
    Unicode::snprintf(Laptime_realtimeBuffer, LAPTIME_REALTIME_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_S2XC).getText());
 80050b2:	f604 4b98 	addw	fp, r4, #3224	@ 0xc98
 80050b6:	9631      	str	r6, [sp, #196]	@ 0xc4
    Water.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5NCV));
 80050b8:	f00e fec8 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80050bc:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80050be:	4650      	mov	r0, sl
 80050c0:	f00b fa6e 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Laptime_realtime.setXY(3, 116);
 80050c4:	2274      	movs	r2, #116	@ 0x74
 80050c6:	2103      	movs	r1, #3
 80050c8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80050ca:	f7ff f9a1 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
        return TextArea::BoundingArea();
 80050ce:	4628      	mov	r0, r5
        color = newColor;
 80050d0:	f8c4 8b38 	str.w	r8, [r4, #2872]	@ 0xb38
        linespace = space;
 80050d4:	f8a4 7b3c 	strh.w	r7, [r4, #2876]	@ 0xb3c
 80050d8:	f7ff f9de 	bl	8004498 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 80050dc:	f604 3344 	addw	r3, r4, #2884	@ 0xb44
 80050e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80050e8:	f8d9 3000 	ldr.w	r3, [r9]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f43f ae97 	beq.w	8004e20 <_ZN15Screen1ViewBaseC1Ev+0x8e0>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80050f2:	4a2f      	ldr	r2, [pc, #188]	@ (80051b0 <_ZN15Screen1ViewBaseC1Ev+0xc70>)
 80050f4:	8813      	ldrh	r3, [r2, #0]
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	f67f ae9c 	bls.w	8004e34 <_ZN15Screen1ViewBaseC1Ev+0x8f4>
        return texts->getText(typedTextId);
 80050fc:	4b2a      	ldr	r3, [pc, #168]	@ (80051a8 <_ZN15Screen1ViewBaseC1Ev+0xc68>)
 80050fe:	2106      	movs	r1, #6
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	f000 faf5 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(Laptime_realtimeBuffer, LAPTIME_REALTIME_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_S2XC).getText());
 8005106:	4a29      	ldr	r2, [pc, #164]	@ (80051ac <_ZN15Screen1ViewBaseC1Ev+0xc6c>)
 8005108:	4603      	mov	r3, r0
 800510a:	210a      	movs	r1, #10
 800510c:	4658      	mov	r0, fp
 800510e:	f014 fea7 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Laptime_realtime.resizeToCurrentText();
 8005112:	981c      	ldr	r0, [sp, #112]	@ 0x70
        wc1 = value;
 8005114:	f8c4 bb50 	str.w	fp, [r4, #2896]	@ 0xb50
    Unicode::snprintf(Laptime_previousBuffer, LAPTIME_PREVIOUS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6O34).getText());
 8005118:	f604 4bac 	addw	fp, r4, #3244	@ 0xcac
    Laptime_realtime.resizeToCurrentText();
 800511c:	f00e fe76 	bl	8013e0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8005120:	2307      	movs	r3, #7
    Laptime_realtime.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Y40W));
 8005122:	4629      	mov	r1, r5
 8005124:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8005126:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 800512a:	9631      	str	r6, [sp, #196]	@ 0xc4
 800512c:	f00e fe8e 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005130:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005132:	4650      	mov	r0, sl
 8005134:	f00b fa34 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Laptime_previous.setXY(3, 240);
 8005138:	22f0      	movs	r2, #240	@ 0xf0
 800513a:	2103      	movs	r1, #3
 800513c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800513e:	f7ff f967 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
        return TextArea::BoundingArea();
 8005142:	4628      	mov	r0, r5
        color = newColor;
 8005144:	f8c4 8b84 	str.w	r8, [r4, #2948]	@ 0xb84
        linespace = space;
 8005148:	f8a4 7b88 	strh.w	r7, [r4, #2952]	@ 0xb88
 800514c:	f7ff f9a4 	bl	8004498 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8005150:	f504 6339 	add.w	r3, r4, #2960	@ 0xb90
 8005154:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005158:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800515c:	f8d9 3000 	ldr.w	r3, [r9]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f43f ae5d 	beq.w	8004e20 <_ZN15Screen1ViewBaseC1Ev+0x8e0>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005166:	4a12      	ldr	r2, [pc, #72]	@ (80051b0 <_ZN15Screen1ViewBaseC1Ev+0xc70>)
 8005168:	8813      	ldrh	r3, [r2, #0]
 800516a:	2b03      	cmp	r3, #3
 800516c:	f67f ae62 	bls.w	8004e34 <_ZN15Screen1ViewBaseC1Ev+0x8f4>
        return texts->getText(typedTextId);
 8005170:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <_ZN15Screen1ViewBaseC1Ev+0xc68>)
 8005172:	2103      	movs	r1, #3
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	f000 fabb 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(Laptime_previousBuffer, LAPTIME_PREVIOUS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6O34).getText());
 800517a:	4a0c      	ldr	r2, [pc, #48]	@ (80051ac <_ZN15Screen1ViewBaseC1Ev+0xc6c>)
 800517c:	4603      	mov	r3, r0
 800517e:	210a      	movs	r1, #10
 8005180:	4658      	mov	r0, fp
 8005182:	f014 fe6d 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Laptime_previous.resizeToCurrentText();
 8005186:	981d      	ldr	r0, [sp, #116]	@ 0x74
        wc1 = value;
 8005188:	f8c4 bb9c 	str.w	fp, [r4, #2972]	@ 0xb9c
 800518c:	f10d 0bb0 	add.w	fp, sp, #176	@ 0xb0
 8005190:	f00e fe3c 	bl	8013e0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8005194:	2304      	movs	r3, #4
    Laptime_previous.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PFP7));
 8005196:	4629      	mov	r1, r5
 8005198:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800519a:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 800519e:	9631      	str	r6, [sp, #196]	@ 0xc4
 80051a0:	f00e fe54 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80051a4:	e00a      	b.n	80051bc <_ZN15Screen1ViewBaseC1Ev+0xc7c>
 80051a6:	bf00      	nop
 80051a8:	24028e90 	.word	0x24028e90
 80051ac:	080285ab 	.word	0x080285ab
 80051b0:	24028e88 	.word	0x24028e88
 80051b4:	08028054 	.word	0x08028054
 80051b8:	24028e84 	.word	0x24028e84
 80051bc:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80051be:	4650      	mov	r0, sl
 80051c0:	f00b f9ee 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Sd_detect.setXY(735, 10);
 80051c4:	220a      	movs	r2, #10
 80051c6:	f240 21df 	movw	r1, #735	@ 0x2df
 80051ca:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80051cc:	f7ff f920 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 80051d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80051d2:	4658      	mov	r0, fp
        color = newColor;
 80051d4:	f8c4 8bd0 	str.w	r8, [r4, #3024]	@ 0xbd0
        linespace = space;
 80051d8:	f8a4 7bd4 	strh.w	r7, [r4, #3028]	@ 0xbd4
        boundingArea = calculateBoundingArea();
 80051dc:	f00e fb8e 	bl	80138fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80051e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80051e2:	f101 033c 	add.w	r3, r1, #60	@ 0x3c
 80051e6:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80051ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80051ee:	2305      	movs	r3, #5
    Sd_detect.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1Q0Y));
 80051f0:	4629      	mov	r1, r5
 80051f2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80051f4:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 80051f8:	9631      	str	r6, [sp, #196]	@ 0xc4
 80051fa:	f00e fe27 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80051fe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005200:	4650      	mov	r0, sl
 8005202:	f00b f9cd 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    P_temp.setXY(697, 10);
 8005206:	220a      	movs	r2, #10
 8005208:	f240 21b9 	movw	r1, #697	@ 0x2b9
 800520c:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800520e:	f7ff f8ff 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8005212:	f8c4 8c18 	str.w	r8, [r4, #3096]	@ 0xc18
        return TextArea::BoundingArea();
 8005216:	4628      	mov	r0, r5
        linespace = space;
 8005218:	f8a4 7c1c 	strh.w	r7, [r4, #3100]	@ 0xc1c
 800521c:	f7ff f93c 	bl	8004498 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8005220:	f604 4324 	addw	r3, r4, #3108	@ 0xc24
    Unicode::snprintf(P_tempBuffer, P_TEMP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4EB9).getText());
 8005224:	f504 684c 	add.w	r8, r4, #3264	@ 0xcc0
 8005228:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800522c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005230:	f8d9 3000 	ldr.w	r3, [r9]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f43f adf3 	beq.w	8004e20 <_ZN15Screen1ViewBaseC1Ev+0x8e0>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800523a:	4a12      	ldr	r2, [pc, #72]	@ (8005284 <_ZN15Screen1ViewBaseC1Ev+0xd44>)
 800523c:	8813      	ldrh	r3, [r2, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f43f adf8 	beq.w	8004e34 <_ZN15Screen1ViewBaseC1Ev+0x8f4>
        return texts->getText(typedTextId);
 8005244:	4b10      	ldr	r3, [pc, #64]	@ (8005288 <_ZN15Screen1ViewBaseC1Ev+0xd48>)
 8005246:	4639      	mov	r1, r7
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	f000 fa51 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
 800524e:	4a0f      	ldr	r2, [pc, #60]	@ (800528c <_ZN15Screen1ViewBaseC1Ev+0xd4c>)
 8005250:	4603      	mov	r3, r0
 8005252:	210a      	movs	r1, #10
 8005254:	4640      	mov	r0, r8
 8005256:	f014 fe03 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    P_temp.resizeToCurrentText();
 800525a:	981e      	ldr	r0, [sp, #120]	@ 0x78
        wc1 = value;
 800525c:	f8c4 8c30 	str.w	r8, [r4, #3120]	@ 0xc30
 8005260:	f00e fdd4 	bl	8013e0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8005264:	2301      	movs	r3, #1
    P_temp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PP9J));
 8005266:	4629      	mov	r1, r5
 8005268:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800526a:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
 800526e:	9631      	str	r6, [sp, #196]	@ 0xc4
 8005270:	f00e fdec 	bl	8013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005274:	4650      	mov	r0, sl
 8005276:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8005278:	f00b f992 	bl	80105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800527c:	4620      	mov	r0, r4
 800527e:	b035      	add	sp, #212	@ 0xd4
 8005280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005284:	24028e88 	.word	0x24028e88
 8005288:	24028e90 	.word	0x24028e90
 800528c:	080285ab 	.word	0x080285ab

08005290 <__tcf_0>:
extern const touchgfx::FontContextualFormsTable micross_contextualFormsTable;
touchgfx::GeneratedFont& getFont_micross_100_4bpp();

touchgfx::GeneratedFont& getFont_micross_100_4bpp()
{
    static touchgfx::GeneratedFont micross_100_4bpp(glyphs_micross_100_4bpp, 91, 121, 100, 0, 0, 4, 1, 4, 2, unicodes_micross_100_4bpp, kerning_micross_100_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 8005290:	4770      	bx	lr
	...

08005294 <_Z24getFont_micross_100_4bppv>:
{
 8005294:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont micross_100_4bpp(glyphs_micross_100_4bpp, 91, 121, 100, 0, 0, 4, 1, 4, 2, unicodes_micross_100_4bpp, kerning_micross_100_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 8005296:	4d18      	ldr	r5, [pc, #96]	@ (80052f8 <_Z24getFont_micross_100_4bppv+0x64>)
{
 8005298:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont micross_100_4bpp(glyphs_micross_100_4bpp, 91, 121, 100, 0, 0, 4, 1, 4, 2, unicodes_micross_100_4bpp, kerning_micross_100_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 800529a:	682c      	ldr	r4, [r5, #0]
 800529c:	f3bf 8f5b 	dmb	ish
 80052a0:	f014 0401 	ands.w	r4, r4, #1
 80052a4:	d124      	bne.n	80052f0 <_Z24getFont_micross_100_4bppv+0x5c>
 80052a6:	4628      	mov	r0, r5
 80052a8:	f01f fcc3 	bl	8024c32 <__cxa_guard_acquire>
 80052ac:	b300      	cbz	r0, 80052f0 <_Z24getFont_micross_100_4bppv+0x5c>
 80052ae:	4b13      	ldr	r3, [pc, #76]	@ (80052fc <_Z24getFont_micross_100_4bppv+0x68>)
 80052b0:	2202      	movs	r2, #2
 80052b2:	4913      	ldr	r1, [pc, #76]	@ (8005300 <_Z24getFont_micross_100_4bppv+0x6c>)
 80052b4:	4813      	ldr	r0, [pc, #76]	@ (8005304 <_Z24getFont_micross_100_4bppv+0x70>)
 80052b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80052b8:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 80052bc:	233f      	movs	r3, #63	@ 0x3f
 80052be:	9309      	str	r3, [sp, #36]	@ 0x24
 80052c0:	4b11      	ldr	r3, [pc, #68]	@ (8005308 <_Z24getFont_micross_100_4bppv+0x74>)
 80052c2:	9308      	str	r3, [sp, #32]
 80052c4:	4b11      	ldr	r3, [pc, #68]	@ (800530c <_Z24getFont_micross_100_4bppv+0x78>)
 80052c6:	9307      	str	r3, [sp, #28]
 80052c8:	2304      	movs	r3, #4
 80052ca:	e9cd 3205 	strd	r3, r2, [sp, #20]
 80052ce:	2201      	movs	r2, #1
 80052d0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80052d4:	2364      	movs	r3, #100	@ 0x64
 80052d6:	225b      	movs	r2, #91	@ 0x5b
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	2379      	movs	r3, #121	@ 0x79
 80052dc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80052e0:	f7fe ffc6 	bl	8004270 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80052e4:	480a      	ldr	r0, [pc, #40]	@ (8005310 <_Z24getFont_micross_100_4bppv+0x7c>)
 80052e6:	f020 f839 	bl	802535c <atexit>
 80052ea:	4628      	mov	r0, r5
 80052ec:	f01f fcad 	bl	8024c4a <__cxa_guard_release>
    return micross_100_4bpp;
}
 80052f0:	4804      	ldr	r0, [pc, #16]	@ (8005304 <_Z24getFont_micross_100_4bppv+0x70>)
 80052f2:	b00f      	add	sp, #60	@ 0x3c
 80052f4:	bd30      	pop	{r4, r5, pc}
 80052f6:	bf00      	nop
 80052f8:	2400ecc8 	.word	0x2400ecc8
 80052fc:	08028674 	.word	0x08028674
 8005300:	080dead8 	.word	0x080dead8
 8005304:	2400eccc 	.word	0x2400eccc
 8005308:	080dfee8 	.word	0x080dfee8
 800530c:	080dff00 	.word	0x080dff00
 8005310:	08005291 	.word	0x08005291

08005314 <__tcf_0>:
extern const touchgfx::FontContextualFormsTable micross_contextualFormsTable;
touchgfx::GeneratedFont& getFont_micross_200_4bpp();

touchgfx::GeneratedFont& getFont_micross_200_4bpp()
{
    static touchgfx::GeneratedFont micross_200_4bpp(glyphs_micross_200_4bpp, 91, 242, 200, 0, 0, 4, 1, 7, 4, unicodes_micross_200_4bpp, kerning_micross_200_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 8005314:	4770      	bx	lr
	...

08005318 <_Z24getFont_micross_200_4bppv>:
{
 8005318:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont micross_200_4bpp(glyphs_micross_200_4bpp, 91, 242, 200, 0, 0, 4, 1, 7, 4, unicodes_micross_200_4bpp, kerning_micross_200_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 800531a:	4d18      	ldr	r5, [pc, #96]	@ (800537c <_Z24getFont_micross_200_4bppv+0x64>)
{
 800531c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont micross_200_4bpp(glyphs_micross_200_4bpp, 91, 242, 200, 0, 0, 4, 1, 7, 4, unicodes_micross_200_4bpp, kerning_micross_200_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 800531e:	682c      	ldr	r4, [r5, #0]
 8005320:	f3bf 8f5b 	dmb	ish
 8005324:	f014 0401 	ands.w	r4, r4, #1
 8005328:	d124      	bne.n	8005374 <_Z24getFont_micross_200_4bppv+0x5c>
 800532a:	4628      	mov	r0, r5
 800532c:	f01f fc81 	bl	8024c32 <__cxa_guard_acquire>
 8005330:	b300      	cbz	r0, 8005374 <_Z24getFont_micross_200_4bppv+0x5c>
 8005332:	4b13      	ldr	r3, [pc, #76]	@ (8005380 <_Z24getFont_micross_200_4bppv+0x68>)
 8005334:	2207      	movs	r2, #7
 8005336:	4913      	ldr	r1, [pc, #76]	@ (8005384 <_Z24getFont_micross_200_4bppv+0x6c>)
 8005338:	4813      	ldr	r0, [pc, #76]	@ (8005388 <_Z24getFont_micross_200_4bppv+0x70>)
 800533a:	940a      	str	r4, [sp, #40]	@ 0x28
 800533c:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 8005340:	233f      	movs	r3, #63	@ 0x3f
 8005342:	9309      	str	r3, [sp, #36]	@ 0x24
 8005344:	4b11      	ldr	r3, [pc, #68]	@ (800538c <_Z24getFont_micross_200_4bppv+0x74>)
 8005346:	9308      	str	r3, [sp, #32]
 8005348:	4b11      	ldr	r3, [pc, #68]	@ (8005390 <_Z24getFont_micross_200_4bppv+0x78>)
 800534a:	9307      	str	r3, [sp, #28]
 800534c:	2304      	movs	r3, #4
 800534e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005352:	2201      	movs	r2, #1
 8005354:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8005358:	23c8      	movs	r3, #200	@ 0xc8
 800535a:	225b      	movs	r2, #91	@ 0x5b
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	23f2      	movs	r3, #242	@ 0xf2
 8005360:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8005364:	f7fe ff84 	bl	8004270 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005368:	480a      	ldr	r0, [pc, #40]	@ (8005394 <_Z24getFont_micross_200_4bppv+0x7c>)
 800536a:	f01f fff7 	bl	802535c <atexit>
 800536e:	4628      	mov	r0, r5
 8005370:	f01f fc6b 	bl	8024c4a <__cxa_guard_release>
    return micross_200_4bpp;
}
 8005374:	4804      	ldr	r0, [pc, #16]	@ (8005388 <_Z24getFont_micross_200_4bppv+0x70>)
 8005376:	b00f      	add	sp, #60	@ 0x3c
 8005378:	bd30      	pop	{r4, r5, pc}
 800537a:	bf00      	nop
 800537c:	2400ecf8 	.word	0x2400ecf8
 8005380:	08028674 	.word	0x08028674
 8005384:	080defd4 	.word	0x080defd4
 8005388:	2400ecfc 	.word	0x2400ecfc
 800538c:	080dfeec 	.word	0x080dfeec
 8005390:	080dff04 	.word	0x080dff04
 8005394:	08005315 	.word	0x08005315

08005398 <__tcf_0>:

touchgfx::GeneratedFont& getFont_micross_20_4bpp();

touchgfx::GeneratedFont& getFont_micross_20_4bpp()
{
    static touchgfx::GeneratedFont micross_20_4bpp(glyphs_micross_20_4bpp, 91, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_micross_20_4bpp, kerning_micross_20_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 8005398:	4770      	bx	lr
	...

0800539c <_Z23getFont_micross_20_4bppv>:
{
 800539c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont micross_20_4bpp(glyphs_micross_20_4bpp, 91, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_micross_20_4bpp, kerning_micross_20_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 800539e:	4d17      	ldr	r5, [pc, #92]	@ (80053fc <_Z23getFont_micross_20_4bppv+0x60>)
{
 80053a0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont micross_20_4bpp(glyphs_micross_20_4bpp, 91, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_micross_20_4bpp, kerning_micross_20_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 80053a2:	682c      	ldr	r4, [r5, #0]
 80053a4:	f3bf 8f5b 	dmb	ish
 80053a8:	f014 0401 	ands.w	r4, r4, #1
 80053ac:	d123      	bne.n	80053f6 <_Z23getFont_micross_20_4bppv+0x5a>
 80053ae:	4628      	mov	r0, r5
 80053b0:	f01f fc3f 	bl	8024c32 <__cxa_guard_acquire>
 80053b4:	b1f8      	cbz	r0, 80053f6 <_Z23getFont_micross_20_4bppv+0x5a>
 80053b6:	4b12      	ldr	r3, [pc, #72]	@ (8005400 <_Z23getFont_micross_20_4bppv+0x64>)
 80053b8:	225b      	movs	r2, #91	@ 0x5b
 80053ba:	4912      	ldr	r1, [pc, #72]	@ (8005404 <_Z23getFont_micross_20_4bppv+0x68>)
 80053bc:	4812      	ldr	r0, [pc, #72]	@ (8005408 <_Z23getFont_micross_20_4bppv+0x6c>)
 80053be:	940a      	str	r4, [sp, #40]	@ 0x28
 80053c0:	9401      	str	r4, [sp, #4]
 80053c2:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 80053c6:	233f      	movs	r3, #63	@ 0x3f
 80053c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80053ca:	4b10      	ldr	r3, [pc, #64]	@ (800540c <_Z23getFont_micross_20_4bppv+0x70>)
 80053cc:	9308      	str	r3, [sp, #32]
 80053ce:	4b10      	ldr	r3, [pc, #64]	@ (8005410 <_Z23getFont_micross_20_4bppv+0x74>)
 80053d0:	9307      	str	r3, [sp, #28]
 80053d2:	2301      	movs	r3, #1
 80053d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80053d8:	9304      	str	r3, [sp, #16]
 80053da:	2304      	movs	r3, #4
 80053dc:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80053e0:	2314      	movs	r3, #20
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	2318      	movs	r3, #24
 80053e6:	f7fe ff43 	bl	8004270 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80053ea:	480a      	ldr	r0, [pc, #40]	@ (8005414 <_Z23getFont_micross_20_4bppv+0x78>)
 80053ec:	f01f ffb6 	bl	802535c <atexit>
 80053f0:	4628      	mov	r0, r5
 80053f2:	f01f fc2a 	bl	8024c4a <__cxa_guard_release>
    return micross_20_4bpp;
}
 80053f6:	4804      	ldr	r0, [pc, #16]	@ (8005408 <_Z23getFont_micross_20_4bppv+0x6c>)
 80053f8:	b00f      	add	sp, #60	@ 0x3c
 80053fa:	bd30      	pop	{r4, r5, pc}
 80053fc:	2400ed28 	.word	0x2400ed28
 8005400:	08028674 	.word	0x08028674
 8005404:	080df4d0 	.word	0x080df4d0
 8005408:	2400ed2c 	.word	0x2400ed2c
 800540c:	080dfef0 	.word	0x080dfef0
 8005410:	080dff08 	.word	0x080dff08
 8005414:	08005399 	.word	0x08005399

08005418 <__tcf_0>:
extern const touchgfx::FontContextualFormsTable micross_contextualFormsTable;
touchgfx::GeneratedFont& getFont_micross_66_4bpp();

touchgfx::GeneratedFont& getFont_micross_66_4bpp()
{
    static touchgfx::GeneratedFont micross_66_4bpp(glyphs_micross_66_4bpp, 91, 80, 66, 0, 0, 4, 1, 3, 2, unicodes_micross_66_4bpp, kerning_micross_66_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 8005418:	4770      	bx	lr
	...

0800541c <_Z23getFont_micross_66_4bppv>:
{
 800541c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont micross_66_4bpp(glyphs_micross_66_4bpp, 91, 80, 66, 0, 0, 4, 1, 3, 2, unicodes_micross_66_4bpp, kerning_micross_66_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 800541e:	4d18      	ldr	r5, [pc, #96]	@ (8005480 <_Z23getFont_micross_66_4bppv+0x64>)
{
 8005420:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont micross_66_4bpp(glyphs_micross_66_4bpp, 91, 80, 66, 0, 0, 4, 1, 3, 2, unicodes_micross_66_4bpp, kerning_micross_66_4bpp, 63, 0, 0, &micross_contextualFormsTable);
 8005422:	682c      	ldr	r4, [r5, #0]
 8005424:	f3bf 8f5b 	dmb	ish
 8005428:	f014 0401 	ands.w	r4, r4, #1
 800542c:	d125      	bne.n	800547a <_Z23getFont_micross_66_4bppv+0x5e>
 800542e:	4628      	mov	r0, r5
 8005430:	f01f fbff 	bl	8024c32 <__cxa_guard_acquire>
 8005434:	b308      	cbz	r0, 800547a <_Z23getFont_micross_66_4bppv+0x5e>
 8005436:	4b13      	ldr	r3, [pc, #76]	@ (8005484 <_Z23getFont_micross_66_4bppv+0x68>)
 8005438:	2202      	movs	r2, #2
 800543a:	2101      	movs	r1, #1
 800543c:	4812      	ldr	r0, [pc, #72]	@ (8005488 <_Z23getFont_micross_66_4bppv+0x6c>)
 800543e:	940a      	str	r4, [sp, #40]	@ 0x28
 8005440:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 8005444:	233f      	movs	r3, #63	@ 0x3f
 8005446:	9309      	str	r3, [sp, #36]	@ 0x24
 8005448:	4b10      	ldr	r3, [pc, #64]	@ (800548c <_Z23getFont_micross_66_4bppv+0x70>)
 800544a:	9308      	str	r3, [sp, #32]
 800544c:	4b10      	ldr	r3, [pc, #64]	@ (8005490 <_Z23getFont_micross_66_4bppv+0x74>)
 800544e:	9307      	str	r3, [sp, #28]
 8005450:	2303      	movs	r3, #3
 8005452:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8005456:	2304      	movs	r3, #4
 8005458:	225b      	movs	r2, #91	@ 0x5b
 800545a:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800545e:	2342      	movs	r3, #66	@ 0x42
 8005460:	490c      	ldr	r1, [pc, #48]	@ (8005494 <_Z23getFont_micross_66_4bppv+0x78>)
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	2350      	movs	r3, #80	@ 0x50
 8005466:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800546a:	f7fe ff01 	bl	8004270 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800546e:	480a      	ldr	r0, [pc, #40]	@ (8005498 <_Z23getFont_micross_66_4bppv+0x7c>)
 8005470:	f01f ff74 	bl	802535c <atexit>
 8005474:	4628      	mov	r0, r5
 8005476:	f01f fbe8 	bl	8024c4a <__cxa_guard_release>
    return micross_66_4bpp;
}
 800547a:	4803      	ldr	r0, [pc, #12]	@ (8005488 <_Z23getFont_micross_66_4bppv+0x6c>)
 800547c:	b00f      	add	sp, #60	@ 0x3c
 800547e:	bd30      	pop	{r4, r5, pc}
 8005480:	2400ed58 	.word	0x2400ed58
 8005484:	08028674 	.word	0x08028674
 8005488:	2400ed5c 	.word	0x2400ed5c
 800548c:	080dfef4 	.word	0x080dfef4
 8005490:	080dff0c 	.word	0x080dff0c
 8005494:	080df9cc 	.word	0x080df9cc
 8005498:	08005419 	.word	0x08005419

0800549c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800549c:	4770      	bx	lr
	...

080054a0 <_Z23getFont_verdana_10_4bppv>:
{
 80054a0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80054a2:	4d16      	ldr	r5, [pc, #88]	@ (80054fc <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 80054a4:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80054a6:	682c      	ldr	r4, [r5, #0]
 80054a8:	f3bf 8f5b 	dmb	ish
 80054ac:	f014 0401 	ands.w	r4, r4, #1
 80054b0:	d120      	bne.n	80054f4 <_Z23getFont_verdana_10_4bppv+0x54>
 80054b2:	4628      	mov	r0, r5
 80054b4:	f01f fbbd 	bl	8024c32 <__cxa_guard_acquire>
 80054b8:	b1e0      	cbz	r0, 80054f4 <_Z23getFont_verdana_10_4bppv+0x54>
 80054ba:	233f      	movs	r3, #63	@ 0x3f
 80054bc:	2201      	movs	r2, #1
 80054be:	4910      	ldr	r1, [pc, #64]	@ (8005500 <_Z23getFont_verdana_10_4bppv+0x60>)
 80054c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80054c2:	4b10      	ldr	r3, [pc, #64]	@ (8005504 <_Z23getFont_verdana_10_4bppv+0x64>)
 80054c4:	4810      	ldr	r0, [pc, #64]	@ (8005508 <_Z23getFont_verdana_10_4bppv+0x68>)
 80054c6:	9308      	str	r3, [sp, #32]
 80054c8:	4b10      	ldr	r3, [pc, #64]	@ (800550c <_Z23getFont_verdana_10_4bppv+0x6c>)
 80054ca:	940a      	str	r4, [sp, #40]	@ 0x28
 80054cc:	9405      	str	r4, [sp, #20]
 80054ce:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80054d2:	2304      	movs	r3, #4
 80054d4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80054d8:	230a      	movs	r3, #10
 80054da:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80054e4:	f7fe fec4 	bl	8004270 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80054e8:	4809      	ldr	r0, [pc, #36]	@ (8005510 <_Z23getFont_verdana_10_4bppv+0x70>)
 80054ea:	f01f ff37 	bl	802535c <atexit>
 80054ee:	4628      	mov	r0, r5
 80054f0:	f01f fbab 	bl	8024c4a <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80054f4:	4804      	ldr	r0, [pc, #16]	@ (8005508 <_Z23getFont_verdana_10_4bppv+0x68>)
 80054f6:	b00f      	add	sp, #60	@ 0x3c
 80054f8:	bd30      	pop	{r4, r5, pc}
 80054fa:	bf00      	nop
 80054fc:	2400ed88 	.word	0x2400ed88
 8005500:	080dfec8 	.word	0x080dfec8
 8005504:	080dfef8 	.word	0x080dfef8
 8005508:	2400ed8c 	.word	0x2400ed8c
 800550c:	080dff10 	.word	0x080dff10
 8005510:	0800549d 	.word	0x0800549d

08005514 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005514:	4770      	bx	lr
	...

08005518 <_Z23getFont_verdana_40_4bppv>:
{
 8005518:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800551a:	4d16      	ldr	r5, [pc, #88]	@ (8005574 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 800551c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800551e:	682c      	ldr	r4, [r5, #0]
 8005520:	f3bf 8f5b 	dmb	ish
 8005524:	f014 0401 	ands.w	r4, r4, #1
 8005528:	d120      	bne.n	800556c <_Z23getFont_verdana_40_4bppv+0x54>
 800552a:	4628      	mov	r0, r5
 800552c:	f01f fb81 	bl	8024c32 <__cxa_guard_acquire>
 8005530:	b1e0      	cbz	r0, 800556c <_Z23getFont_verdana_40_4bppv+0x54>
 8005532:	233f      	movs	r3, #63	@ 0x3f
 8005534:	2201      	movs	r2, #1
 8005536:	4910      	ldr	r1, [pc, #64]	@ (8005578 <_Z23getFont_verdana_40_4bppv+0x60>)
 8005538:	9309      	str	r3, [sp, #36]	@ 0x24
 800553a:	4b10      	ldr	r3, [pc, #64]	@ (800557c <_Z23getFont_verdana_40_4bppv+0x64>)
 800553c:	4810      	ldr	r0, [pc, #64]	@ (8005580 <_Z23getFont_verdana_40_4bppv+0x68>)
 800553e:	9308      	str	r3, [sp, #32]
 8005540:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8005542:	940a      	str	r4, [sp, #40]	@ 0x28
 8005544:	9405      	str	r4, [sp, #20]
 8005546:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800554a:	2304      	movs	r3, #4
 800554c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8005550:	2328      	movs	r3, #40	@ 0x28
 8005552:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800555c:	f7fe fe88 	bl	8004270 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005560:	4809      	ldr	r0, [pc, #36]	@ (8005588 <_Z23getFont_verdana_40_4bppv+0x70>)
 8005562:	f01f fefb 	bl	802535c <atexit>
 8005566:	4628      	mov	r0, r5
 8005568:	f01f fb6f 	bl	8024c4a <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800556c:	4804      	ldr	r0, [pc, #16]	@ (8005580 <_Z23getFont_verdana_40_4bppv+0x68>)
 800556e:	b00f      	add	sp, #60	@ 0x3c
 8005570:	bd30      	pop	{r4, r5, pc}
 8005572:	bf00      	nop
 8005574:	2400edb8 	.word	0x2400edb8
 8005578:	080dfed8 	.word	0x080dfed8
 800557c:	080dfefc 	.word	0x080dfefc
 8005580:	2400edbc 	.word	0x2400edbc
 8005584:	080dff14 	.word	0x080dff14
 8005588:	08005515 	.word	0x08005515

0800558c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 800558c:	2000      	movs	r0, #0
 800558e:	4770      	bx	lr

08005590 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8005590:	2000      	movs	r0, #0
 8005592:	4770      	bx	lr

08005594 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005594:	b40e      	push	{r1, r2, r3}
 8005596:	b503      	push	{r0, r1, lr}
 8005598:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800559a:	2100      	movs	r1, #0
{
 800559c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80055a0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80055a2:	f011 ffe7 	bl	8017574 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80055a6:	b002      	add	sp, #8
 80055a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055ac:	b003      	add	sp, #12
 80055ae:	4770      	bx	lr

080055b0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80055b0:	b40c      	push	{r2, r3}
 80055b2:	b507      	push	{r0, r1, r2, lr}
 80055b4:	ab04      	add	r3, sp, #16
 80055b6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80055ba:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80055bc:	f011 ffda 	bl	8017574 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80055c0:	b003      	add	sp, #12
 80055c2:	f85d eb04 	ldr.w	lr, [sp], #4
 80055c6:	b002      	add	sp, #8
 80055c8:	4770      	bx	lr
	...

080055cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80055cc:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 80055ce:	b510      	push	{r4, lr}
 80055d0:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80055d2:	b373      	cbz	r3, 8005632 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80055d4:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 80055d6:	b92b      	cbnz	r3, 80055e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80055d8:	4b18      	ldr	r3, [pc, #96]	@ (800563c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80055da:	21c5      	movs	r1, #197	@ 0xc5
 80055dc:	4a18      	ldr	r2, [pc, #96]	@ (8005640 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80055de:	4819      	ldr	r0, [pc, #100]	@ (8005644 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80055e0:	f01f fe9e 	bl	8025320 <__assert_func>
            return buffer[pos];
 80055e4:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80055e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80055ea:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80055ec:	b30b      	cbz	r3, 8005632 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80055ee:	f013 fe8f 	bl	8019310 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80055f2:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d803      	bhi.n	8005600 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80055f8:	4b13      	ldr	r3, [pc, #76]	@ (8005648 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80055fa:	21cb      	movs	r1, #203	@ 0xcb
 80055fc:	4a13      	ldr	r2, [pc, #76]	@ (800564c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80055fe:	e7ee      	b.n	80055de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8005600:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8005602:	f640 103f 	movw	r0, #2367	@ 0x93f
 8005606:	1c53      	adds	r3, r2, #1
 8005608:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800560a:	2b09      	cmp	r3, #9
 800560c:	4619      	mov	r1, r3
 800560e:	bf88      	it	hi
 8005610:	f1a3 010a 	subhi.w	r1, r3, #10
 8005614:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8005618:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800561a:	4281      	cmp	r1, r0
 800561c:	d109      	bne.n	8005632 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800561e:	2b0a      	cmp	r3, #10
 8005620:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8005624:	bf28      	it	cs
 8005626:	2300      	movcs	r3, #0
            return buffer[pos];
 8005628:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800562a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800562e:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8005630:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8005632:	4620      	mov	r0, r4
}
 8005634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8005638:	f013 bd6c 	b.w	8019114 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800563c:	08028aca 	.word	0x08028aca
 8005640:	08028ad3 	.word	0x08028ad3
 8005644:	08028b7e 	.word	0x08028b7e
 8005648:	08028bd6 	.word	0x08028bd6
 800564c:	08028be4 	.word	0x08028be4

08005650 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8005650:	f013 bd29 	b.w	80190a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08005654 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8005654:	b510      	push	{r4, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	ac02      	add	r4, sp, #8
 800565a:	e884 0006 	stmia.w	r4, {r1, r2}
 800565e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8005660:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8005662:	4621      	mov	r1, r4
    va_start(pArg, format);
 8005664:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	9b08      	ldr	r3, [sp, #32]
 800566e:	f010 fbd1 	bl	8015e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8005672:	b006      	add	sp, #24
 8005674:	bd10      	pop	{r4, pc}
	...

08005678 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8005678:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800567a:	bb18      	cbnz	r0, 80056c4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800567c:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800567e:	4813      	ldr	r0, [pc, #76]	@ (80056cc <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8005680:	681c      	ldr	r4, [r3, #0]
 8005682:	4913      	ldr	r1, [pc, #76]	@ (80056d0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8005684:	b1b4      	cbz	r4, 80056b4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	4422      	add	r2, r4
 800568a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800568c:	6862      	ldr	r2, [r4, #4]
 800568e:	4422      	add	r2, r4
 8005690:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8005692:	68a2      	ldr	r2, [r4, #8]
 8005694:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8005696:	4b0f      	ldr	r3, [pc, #60]	@ (80056d4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8005698:	2200      	movs	r2, #0
 800569a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800569c:	f000 f838 	bl	8005710 <_ZN17TypedTextDatabase8getFontsEv>
 80056a0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80056a2:	f000 f833 	bl	800570c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80056a6:	4b0c      	ldr	r3, [pc, #48]	@ (80056d8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80056a8:	601c      	str	r4, [r3, #0]
        fonts = f;
 80056aa:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80056ac:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80056ae:	4b0c      	ldr	r3, [pc, #48]	@ (80056e0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80056b0:	8018      	strh	r0, [r3, #0]
    }
}
 80056b2:	e007      	b.n	80056c4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80056b4:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80056b6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80056b8:	4b0b      	ldr	r3, [pc, #44]	@ (80056e8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80056ba:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80056bc:	4b0b      	ldr	r3, [pc, #44]	@ (80056ec <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80056be:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80056c0:	2c00      	cmp	r4, #0
 80056c2:	d1e8      	bne.n	8005696 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80056c4:	bd38      	pop	{r3, r4, r5, pc}
 80056c6:	bf00      	nop
 80056c8:	2400edf4 	.word	0x2400edf4
 80056cc:	2400edec 	.word	0x2400edec
 80056d0:	2400ede8 	.word	0x2400ede8
 80056d4:	2400edf0 	.word	0x2400edf0
 80056d8:	24028e84 	.word	0x24028e84
 80056dc:	24028e8c 	.word	0x24028e8c
 80056e0:	24028e88 	.word	0x24028e88
 80056e4:	90000064 	.word	0x90000064
 80056e8:	90000000 	.word	0x90000000
 80056ec:	900000f0 	.word	0x900000f0

080056f0 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80056f0:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80056f8:	4b03      	ldr	r3, [pc, #12]	@ (8005708 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80056fa:	681b      	ldr	r3, [r3, #0]
}
 80056fc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	2400ede8 	.word	0x2400ede8
 8005708:	2400edec 	.word	0x2400edec

0800570c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800570c:	2019      	movs	r0, #25
 800570e:	4770      	bx	lr

08005710 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8005710:	4800      	ldr	r0, [pc, #0]	@ (8005714 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8005712:	4770      	bx	lr
 8005714:	2400edf8 	.word	0x2400edf8

08005718 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 5:
        touchgfx_fonts[5] = &(getFont_micross_66_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8005718:	b510      	push	{r4, lr}
};
 800571a:	4c0a      	ldr	r4, [pc, #40]	@ (8005744 <_GLOBAL__sub_I_touchgfx_fonts+0x2c>)
    &(getFont_micross_20_4bpp()),
 800571c:	f7ff fe3e 	bl	800539c <_Z23getFont_micross_20_4bppv>
};
 8005720:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8005722:	f7ff fef9 	bl	8005518 <_Z23getFont_verdana_40_4bppv>
};
 8005726:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8005728:	f7ff feba 	bl	80054a0 <_Z23getFont_verdana_10_4bppv>
};
 800572c:	60a0      	str	r0, [r4, #8]
    &(getFont_micross_200_4bpp()),
 800572e:	f7ff fdf3 	bl	8005318 <_Z24getFont_micross_200_4bppv>
};
 8005732:	60e0      	str	r0, [r4, #12]
    &(getFont_micross_100_4bpp()),
 8005734:	f7ff fdae 	bl	8005294 <_Z24getFont_micross_100_4bppv>
};
 8005738:	6120      	str	r0, [r4, #16]
    &(getFont_micross_66_4bpp())
 800573a:	f7ff fe6f 	bl	800541c <_Z23getFont_micross_66_4bppv>
};
 800573e:	6160      	str	r0, [r4, #20]
} // namespace TypedTextDatabase
 8005740:	bd10      	pop	{r4, pc}
 8005742:	bf00      	nop
 8005744:	2400edf8 	.word	0x2400edf8

08005748 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8005748:	b510      	push	{r4, lr}
    pointArray = 0;
 800574a:	2400      	movs	r4, #0
 800574c:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 800574e:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8005750:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8005752:	601c      	str	r4, [r3, #0]
}
 8005754:	bd10      	pop	{r4, pc}

08005756 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8005756:	4770      	bx	lr

08005758 <_ZN19FrontendApplicationD0Ev>:
 8005758:	b510      	push	{r4, lr}
 800575a:	4604      	mov	r4, r0
 800575c:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8005760:	f01f fa65 	bl	8024c2e <_ZdlPvj>
 8005764:	4620      	mov	r0, r4
 8005766:	bd10      	pop	{r4, pc}

08005768 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8005768:	b510      	push	{r4, lr}
 800576a:	4604      	mov	r4, r0
    {
        model.tick();
 800576c:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8005770:	f000 f852 	bl	8005818 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8005774:	4620      	mov	r0, r4
    }
 8005776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 800577a:	f011 b82f 	b.w	80167dc <_ZN8touchgfx11Application15handleTickEventEv>
	...

08005780 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8005780:	b510      	push	{r4, lr}
 8005782:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8005784:	f7fe fcfe 	bl	8004184 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005788:	4b01      	ldr	r3, [pc, #4]	@ (8005790 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800578a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 800578c:	6023      	str	r3, [r4, #0]
}
 800578e:	bd10      	pop	{r4, pc}
 8005790:	08028cc0 	.word	0x08028cc0

08005794 <_ZN5ModelC1Ev>:
    FourthGear,
    FifthGear,
    SixthGear
} GearState;
*/
Model::Model() : modelListener(0), ADC_VAL_2(50)
 8005794:	2132      	movs	r1, #50	@ 0x32
 8005796:	2200      	movs	r2, #0
 8005798:	e9c0 1200 	strd	r1, r2, [r0]
{

}
 800579c:	4770      	bx	lr
	...

080057a0 <_Z11get_Oiltempv>:
	modelListener->updateStopwatch(stopwatch_time);

}

int get_Oiltemp(void)
{
 80057a0:	b510      	push	{r4, lr}
    int adc_value_2 = 0;
    int ADC_VAL_2 = 0;
    HAL_ADC_Start(&hadc2);
 80057a2:	480d      	ldr	r0, [pc, #52]	@ (80057d8 <_Z11get_Oiltempv+0x38>)
 80057a4:	f002 fdb0 	bl	8008308 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK)
 80057a8:	210a      	movs	r1, #10
 80057aa:	480b      	ldr	r0, [pc, #44]	@ (80057d8 <_Z11get_Oiltempv+0x38>)
 80057ac:	f002 f91a 	bl	80079e4 <HAL_ADC_PollForConversion>
 80057b0:	b978      	cbnz	r0, 80057d2 <_Z11get_Oiltempv+0x32>
    {
        adc_value_2 = HAL_ADC_GetValue(&hadc2);
 80057b2:	4809      	ldr	r0, [pc, #36]	@ (80057d8 <_Z11get_Oiltempv+0x38>)
 80057b4:	f002 f9a4 	bl	8007b00 <HAL_ADC_GetValue>
 80057b8:	4604      	mov	r4, r0
    }
    HAL_ADC_Stop(&hadc2);
 80057ba:	4807      	ldr	r0, [pc, #28]	@ (80057d8 <_Z11get_Oiltempv+0x38>)
 80057bc:	f002 fe57 	bl	800846e <HAL_ADC_Stop>
			return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
 80057c0:	f240 102d 	movw	r0, #301	@ 0x12d
 80057c4:	4360      	muls	r0, r4
 80057c6:	bf44      	itt	mi
 80057c8:	f500 407f 	addmi.w	r0, r0, #65280	@ 0xff00
 80057cc:	30ff      	addmi	r0, #255	@ 0xff
    ADC_VAL_2 = map(adc_value_2, 0, 65535, 0, 300);

    return ADC_VAL_2;
}
 80057ce:	1400      	asrs	r0, r0, #16
 80057d0:	bd10      	pop	{r4, pc}
    int adc_value_2 = 0;
 80057d2:	2400      	movs	r4, #0
 80057d4:	e7f1      	b.n	80057ba <_Z11get_Oiltempv+0x1a>
 80057d6:	bf00      	nop
 80057d8:	24000758 	.word	0x24000758

080057dc <_Z13get_Watertempv>:

int get_Watertemp(void)
{
 80057dc:	b510      	push	{r4, lr}
    int adc_value_1 = 0;
    int ADC_VAL_1 = 0;
    HAL_ADC_Start(&hadc1);
 80057de:	480d      	ldr	r0, [pc, #52]	@ (8005814 <_Z13get_Watertempv+0x38>)
 80057e0:	f002 fd92 	bl	8008308 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80057e4:	210a      	movs	r1, #10
 80057e6:	480b      	ldr	r0, [pc, #44]	@ (8005814 <_Z13get_Watertempv+0x38>)
 80057e8:	f002 f8fc 	bl	80079e4 <HAL_ADC_PollForConversion>
 80057ec:	b978      	cbnz	r0, 800580e <_Z13get_Watertempv+0x32>
    {
        adc_value_1 = HAL_ADC_GetValue(&hadc1);
 80057ee:	4809      	ldr	r0, [pc, #36]	@ (8005814 <_Z13get_Watertempv+0x38>)
 80057f0:	f002 f986 	bl	8007b00 <HAL_ADC_GetValue>
 80057f4:	4604      	mov	r4, r0
    }
    HAL_ADC_Stop(&hadc1);
 80057f6:	4807      	ldr	r0, [pc, #28]	@ (8005814 <_Z13get_Watertempv+0x38>)
 80057f8:	f002 fe39 	bl	800846e <HAL_ADC_Stop>
			return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
 80057fc:	f240 102d 	movw	r0, #301	@ 0x12d
 8005800:	4360      	muls	r0, r4
 8005802:	bf44      	itt	mi
 8005804:	f500 407f 	addmi.w	r0, r0, #65280	@ 0xff00
 8005808:	30ff      	addmi	r0, #255	@ 0xff
	ADC_VAL_1 = map(adc_value_1, 0, 65535, 0 , 300);

	return ADC_VAL_1;
}
 800580a:	1400      	asrs	r0, r0, #16
 800580c:	bd10      	pop	{r4, pc}
    int adc_value_1 = 0;
 800580e:	2400      	movs	r4, #0
 8005810:	e7f1      	b.n	80057f6 <_Z13get_Watertempv+0x1a>
 8005812:	bf00      	nop
 8005814:	240007bc 	.word	0x240007bc

08005818 <_ZN5Model4tickEv>:
{
 8005818:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800581c:	4605      	mov	r5, r0
	int oil_temp = get_Oiltemp();
 800581e:	f7ff ffbf 	bl	80057a0 <_Z11get_Oiltempv>
 8005822:	4601      	mov	r1, r0
    modelListener->setADC_2(oil_temp);
 8005824:	6868      	ldr	r0, [r5, #4]
 8005826:	6802      	ldr	r2, [r0, #0]
 8005828:	6912      	ldr	r2, [r2, #16]
 800582a:	4790      	blx	r2
    int water_temp = get_Watertemp();
 800582c:	f7ff ffd6 	bl	80057dc <_Z13get_Watertempv>
 8005830:	4601      	mov	r1, r0
    modelListener->setADC_3(water_temp);
 8005832:	6868      	ldr	r0, [r5, #4]
 8005834:	6802      	ldr	r2, [r0, #0]
 8005836:	6952      	ldr	r2, [r2, #20]
 8005838:	4790      	blx	r2
	HAL_ADC_Start(&hadc3);
 800583a:	4837      	ldr	r0, [pc, #220]	@ (8005918 <_ZN5Model4tickEv+0x100>)
 800583c:	f002 fd64 	bl	8008308 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 10);
 8005840:	210a      	movs	r1, #10
 8005842:	4835      	ldr	r0, [pc, #212]	@ (8005918 <_ZN5Model4tickEv+0x100>)
 8005844:	f002 f8ce 	bl	80079e4 <HAL_ADC_PollForConversion>
	uint32_t raw_Ptemperature = HAL_ADC_GetValue(&hadc3);
 8005848:	4833      	ldr	r0, [pc, #204]	@ (8005918 <_ZN5Model4tickEv+0x100>)
 800584a:	f002 f959 	bl	8007b00 <HAL_ADC_GetValue>
 800584e:	4604      	mov	r4, r0
	HAL_ADC_Stop(&hadc3);
 8005850:	4831      	ldr	r0, [pc, #196]	@ (8005918 <_ZN5Model4tickEv+0x100>)
 8005852:	f002 fe0c 	bl	800846e <HAL_ADC_Stop>
    int vsense = (raw_Ptemperature * vref) / 65535;  // 16-bit ADC (0~65535)
 8005856:	f640 43e4 	movw	r3, #3300	@ 0xce4
    modelListener->p_temp(p_temperature);
 800585a:	6868      	ldr	r0, [r5, #4]
    int vsense = (raw_Ptemperature * vref) / 65535;  // 16-bit ADC (0~65535)
 800585c:	fb03 f104 	mul.w	r1, r3, r4
 8005860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005864:	fbb1 f1f3 	udiv	r1, r1, r3
    int p_temperature = (V25 - vsense) / Avg_Slope + 25;
 8005868:	2319      	movs	r3, #25
 800586a:	f5c1 713e 	rsb	r1, r1, #760	@ 0x2f8
 800586e:	fb91 f1f3 	sdiv	r1, r1, r3
    modelListener->p_temp(p_temperature);
 8005872:	6803      	ldr	r3, [r0, #0]
 8005874:	3119      	adds	r1, #25
 8005876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005878:	4798      	blx	r3
    osMessageQueueGet(gearStateQueueHandle, &receivedGearState, NULL, osWaitForever);
 800587a:	4828      	ldr	r0, [pc, #160]	@ (800591c <_ZN5Model4tickEv+0x104>)
 800587c:	f04f 33ff 	mov.w	r3, #4294967295
 8005880:	a901      	add	r1, sp, #4
 8005882:	2200      	movs	r2, #0
 8005884:	6800      	ldr	r0, [r0, #0]
 8005886:	f008 fe77 	bl	800e578 <osMessageQueueGet>
    switch(receivedGearState)
 800588a:	6868      	ldr	r0, [r5, #4]
 800588c:	9901      	ldr	r1, [sp, #4]
    	default: modelListener->setGears(receivedGearState), modelListener->setNstate(0);
 800588e:	6803      	ldr	r3, [r0, #0]
    switch(receivedGearState)
 8005890:	2900      	cmp	r1, #0
 8005892:	d12e      	bne.n	80058f2 <_ZN5Model4tickEv+0xda>
    	case 0: modelListener->setNstate(1);
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2101      	movs	r1, #1
    	default: modelListener->setGears(receivedGearState), modelListener->setNstate(0);
 8005898:	4798      	blx	r3
    modelListener->sd_state(false);
 800589a:	6868      	ldr	r0, [r5, #4]
 800589c:	2100      	movs	r1, #0
 800589e:	4e20      	ldr	r6, [pc, #128]	@ (8005920 <_ZN5Model4tickEv+0x108>)
 80058a0:	6803      	ldr	r3, [r0, #0]
 80058a2:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 8005930 <_ZN5Model4tickEv+0x118>
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	4798      	blx	r3
	int currentTickTime = HAL_GetTick();
 80058aa:	f002 f86b 	bl	8007984 <HAL_GetTick>
	int deltaTime = currentTickTime - lastTickTime;
 80058ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005924 <_ZN5Model4tickEv+0x10c>)
	int currentTickTime = HAL_GetTick();
 80058b0:	4604      	mov	r4, r0
	if (HAL_GPIO_ReadPin(GPIOK, JOY_LEFT_Pin) == GPIO_PIN_RESET)
 80058b2:	2110      	movs	r1, #16
	int deltaTime = currentTickTime - lastTickTime;
 80058b4:	681f      	ldr	r7, [r3, #0]
	lastTickTime = currentTickTime;
 80058b6:	6018      	str	r0, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOK, JOY_LEFT_Pin) == GPIO_PIN_RESET)
 80058b8:	481b      	ldr	r0, [pc, #108]	@ (8005928 <_ZN5Model4tickEv+0x110>)
 80058ba:	f003 fff9 	bl	80098b0 <HAL_GPIO_ReadPin>
 80058be:	b9f8      	cbnz	r0, 8005900 <_ZN5Model4tickEv+0xe8>
		running = 1;
 80058c0:	2301      	movs	r3, #1
		stopwatch_time = 0;
 80058c2:	6030      	str	r0, [r6, #0]
		modelListener->updateprevtime(previous_time);
 80058c4:	6868      	ldr	r0, [r5, #4]
		running = 1;
 80058c6:	f888 3000 	strb.w	r3, [r8]
		modelListener->updateprevtime(previous_time);
 80058ca:	4b18      	ldr	r3, [pc, #96]	@ (800592c <_ZN5Model4tickEv+0x114>)
 80058cc:	6819      	ldr	r1, [r3, #0]
 80058ce:	6803      	ldr	r3, [r0, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	4798      	blx	r3
	if (running)
 80058d4:	f898 3000 	ldrb.w	r3, [r8]
 80058d8:	b11b      	cbz	r3, 80058e2 <_ZN5Model4tickEv+0xca>
		stopwatch_time += deltaTime;
 80058da:	6833      	ldr	r3, [r6, #0]
	int deltaTime = currentTickTime - lastTickTime;
 80058dc:	1be4      	subs	r4, r4, r7
		stopwatch_time += deltaTime;
 80058de:	441c      	add	r4, r3
 80058e0:	6034      	str	r4, [r6, #0]
	modelListener->updateStopwatch(stopwatch_time);
 80058e2:	6868      	ldr	r0, [r5, #4]
 80058e4:	6831      	ldr	r1, [r6, #0]
 80058e6:	6803      	ldr	r3, [r0, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	4798      	blx	r3
}
 80058ec:	b002      	add	sp, #8
 80058ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	default: modelListener->setGears(receivedGearState), modelListener->setNstate(0);
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4798      	blx	r3
 80058f6:	6868      	ldr	r0, [r5, #4]
 80058f8:	2100      	movs	r1, #0
 80058fa:	6803      	ldr	r3, [r0, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	e7cb      	b.n	8005898 <_ZN5Model4tickEv+0x80>
	else if (HAL_GPIO_ReadPin(GPIOK, JOY_RIGHT_Pin) == GPIO_PIN_RESET)
 8005900:	2120      	movs	r1, #32
 8005902:	4809      	ldr	r0, [pc, #36]	@ (8005928 <_ZN5Model4tickEv+0x110>)
 8005904:	f003 ffd4 	bl	80098b0 <HAL_GPIO_ReadPin>
 8005908:	2800      	cmp	r0, #0
 800590a:	d1e3      	bne.n	80058d4 <_ZN5Model4tickEv+0xbc>
		running = 0;
 800590c:	f888 0000 	strb.w	r0, [r8]
		previous_time = stopwatch_time;
 8005910:	4b06      	ldr	r3, [pc, #24]	@ (800592c <_ZN5Model4tickEv+0x114>)
 8005912:	6832      	ldr	r2, [r6, #0]
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e7dd      	b.n	80058d4 <_ZN5Model4tickEv+0xbc>
 8005918:	240006f4 	.word	0x240006f4
 800591c:	24000398 	.word	0x24000398
 8005920:	2400ee1c 	.word	0x2400ee1c
 8005924:	2400ee10 	.word	0x2400ee10
 8005928:	58022800 	.word	0x58022800
 800592c:	2400ee14 	.word	0x2400ee14
 8005930:	2400ee18 	.word	0x2400ee18

08005934 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8005934:	4770      	bx	lr

08005936 <_ZThn4_N16Screen1PresenterD1Ev>:
 8005936:	3804      	subs	r0, #4
 8005938:	4770      	bx	lr

0800593a <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800593a:	4770      	bx	lr

0800593c <_ZN16Screen1Presenter8setGearsEi>:

}

void Screen1Presenter::setGears (int gear_state)
{
	view.setGears (gear_state);
 800593c:	68c0      	ldr	r0, [r0, #12]
 800593e:	6803      	ldr	r3, [r0, #0]
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	4718      	bx	r3

08005944 <_ZThn4_N16Screen1Presenter8setGearsEi>:

    virtual void setGears(int gear_state);
 8005944:	f1a0 0004 	sub.w	r0, r0, #4
 8005948:	f7ff bff8 	b.w	800593c <_ZN16Screen1Presenter8setGearsEi>

0800594c <_ZN16Screen1Presenter9setNstateEb>:
}

void Screen1Presenter::setNstate (bool nlevel)
{
	view.setNstate(nlevel);
 800594c:	68c0      	ldr	r0, [r0, #12]
 800594e:	6803      	ldr	r3, [r0, #0]
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	4718      	bx	r3

08005954 <_ZThn4_N16Screen1Presenter9setNstateEb>:
    virtual void setNstate(bool nlevel);
 8005954:	f1a0 0004 	sub.w	r0, r0, #4
 8005958:	f7ff bff8 	b.w	800594c <_ZN16Screen1Presenter9setNstateEb>

0800595c <_ZN16Screen1Presenter8setADC_2Ei>:
}

void Screen1Presenter::setADC_2(int ADC_2)
{
	view.setADC_2(ADC_2);
 800595c:	68c0      	ldr	r0, [r0, #12]
 800595e:	6803      	ldr	r3, [r0, #0]
 8005960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005962:	4718      	bx	r3

08005964 <_ZThn4_N16Screen1Presenter8setADC_2Ei>:
    virtual void setADC_2 (int ADC_2);
 8005964:	f1a0 0004 	sub.w	r0, r0, #4
 8005968:	f7ff bff8 	b.w	800595c <_ZN16Screen1Presenter8setADC_2Ei>

0800596c <_ZN16Screen1Presenter14updateprevtimeEi>:
}

void Screen1Presenter::updateprevtime(int previous_time)
{
	view.updateprevtime(previous_time);
 800596c:	68c0      	ldr	r0, [r0, #12]
 800596e:	6803      	ldr	r3, [r0, #0]
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	4718      	bx	r3

08005974 <_ZThn4_N16Screen1Presenter14updateprevtimeEi>:
    virtual void setADC_3 (int ADC_3);
    virtual void updateStopwatch(int stopwatch_time);
    virtual void updateprevtime(int previous_time);
 8005974:	f1a0 0004 	sub.w	r0, r0, #4
 8005978:	f7ff bff8 	b.w	800596c <_ZN16Screen1Presenter14updateprevtimeEi>

0800597c <_ZN16Screen1Presenter15updateStopwatchEi>:
}

void Screen1Presenter::updateStopwatch(int stopwatch_time)
{
	view.updateStopwatch(stopwatch_time);
 800597c:	68c0      	ldr	r0, [r0, #12]
 800597e:	6803      	ldr	r3, [r0, #0]
 8005980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005982:	4718      	bx	r3

08005984 <_ZThn4_N16Screen1Presenter15updateStopwatchEi>:
    virtual void updateStopwatch(int stopwatch_time);
 8005984:	f1a0 0004 	sub.w	r0, r0, #4
 8005988:	f7ff bff8 	b.w	800597c <_ZN16Screen1Presenter15updateStopwatchEi>

0800598c <_ZN16Screen1Presenter8sd_stateEb>:
}

void Screen1Presenter::sd_state(bool sdDetected)
{
	view.sd_state(sdDetected);
 800598c:	68c0      	ldr	r0, [r0, #12]
 800598e:	6803      	ldr	r3, [r0, #0]
 8005990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005992:	4718      	bx	r3

08005994 <_ZThn4_N16Screen1Presenter8sd_stateEb>:
    virtual void sd_state(bool sdDetected);
 8005994:	f1a0 0004 	sub.w	r0, r0, #4
 8005998:	f7ff bff8 	b.w	800598c <_ZN16Screen1Presenter8sd_stateEb>

0800599c <_ZN16Screen1Presenter6setRPMEi>:
}

void Screen1Presenter::setRPM(int rpm)
{
	view.setRPM(rpm);
 800599c:	68c0      	ldr	r0, [r0, #12]
 800599e:	6803      	ldr	r3, [r0, #0]
 80059a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a2:	4718      	bx	r3

080059a4 <_ZThn4_N16Screen1Presenter6setRPMEi>:
    virtual void setRPM(int rpm);
 80059a4:	f1a0 0004 	sub.w	r0, r0, #4
 80059a8:	f7ff bff8 	b.w	800599c <_ZN16Screen1Presenter6setRPMEi>

080059ac <_ZN16Screen1Presenter8setADC_3Ei>:
}

void Screen1Presenter::setADC_3(int ADC_3)
{
	view.setADC_3(ADC_3);
 80059ac:	68c0      	ldr	r0, [r0, #12]
 80059ae:	6803      	ldr	r3, [r0, #0]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b2:	4718      	bx	r3

080059b4 <_ZThn4_N16Screen1Presenter8setADC_3Ei>:
    virtual void setADC_3 (int ADC_3);
 80059b4:	f1a0 0004 	sub.w	r0, r0, #4
 80059b8:	f7ff bff8 	b.w	80059ac <_ZN16Screen1Presenter8setADC_3Ei>

080059bc <_ZN16Screen1Presenter6p_tempEi>:
}

void Screen1Presenter::p_temp(int p_temperature)
{
	view.p_temp(p_temperature);
 80059bc:	68c0      	ldr	r0, [r0, #12]
 80059be:	6803      	ldr	r3, [r0, #0]
 80059c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c2:	4718      	bx	r3

080059c4 <_ZThn4_N16Screen1Presenter6p_tempEi>:
    virtual void p_temp(int p_temperature);
 80059c4:	f1a0 0004 	sub.w	r0, r0, #4
 80059c8:	f7ff bff8 	b.w	80059bc <_ZN16Screen1Presenter6p_tempEi>

080059cc <_ZN16Screen1PresenterD0Ev>:
    virtual ~Screen1Presenter() {}
 80059cc:	b510      	push	{r4, lr}
 80059ce:	4604      	mov	r4, r0
 80059d0:	2110      	movs	r1, #16
 80059d2:	f01f f92c 	bl	8024c2e <_ZdlPvj>
 80059d6:	4620      	mov	r0, r4
 80059d8:	bd10      	pop	{r4, pc}

080059da <_ZThn4_N16Screen1PresenterD0Ev>:
 80059da:	f1a0 0004 	sub.w	r0, r0, #4
 80059de:	e7f5      	b.n	80059cc <_ZN16Screen1PresenterD0Ev>

080059e0 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80059e0:	2200      	movs	r2, #0
    : view(v)
 80059e2:	60c1      	str	r1, [r0, #12]
 80059e4:	6082      	str	r2, [r0, #8]
 80059e6:	4a02      	ldr	r2, [pc, #8]	@ (80059f0 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 80059e8:	6002      	str	r2, [r0, #0]
 80059ea:	323c      	adds	r2, #60	@ 0x3c
 80059ec:	6042      	str	r2, [r0, #4]
}
 80059ee:	4770      	bx	lr
 80059f0:	08028d14 	.word	0x08028d14

080059f4 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80059f4:	4770      	bx	lr
	...

080059f8 <_ZN11Screen1View6p_tempEi>:
	Unicode::snprintf(RpmBuffer, RPM_SIZE, "%d", rpm);
	Rpm.invalidate();
}

void Screen1View::p_temp(int p_temperature)
{
 80059f8:	460b      	mov	r3, r1
	Unicode::snprintf(P_tempBuffer, P_TEMP_SIZE, "%d", p_temperature);
 80059fa:	4a03      	ldr	r2, [pc, #12]	@ (8005a08 <_ZN11Screen1View6p_tempEi+0x10>)
 80059fc:	210a      	movs	r1, #10
 80059fe:	f500 604c 	add.w	r0, r0, #3264	@ 0xcc0
 8005a02:	f014 ba2d 	b.w	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8005a06:	bf00      	nop
 8005a08:	08028d84 	.word	0x08028d84

08005a0c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8005a0c:	4b03      	ldr	r3, [pc, #12]	@ (8005a1c <_ZN11Screen1ViewD1Ev+0x10>)
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	4604      	mov	r4, r0
 8005a12:	6003      	str	r3, [r0, #0]
 8005a14:	f7fe fca8 	bl	8004368 <_ZN15Screen1ViewBaseD1Ev>
 8005a18:	4620      	mov	r0, r4
 8005a1a:	bd10      	pop	{r4, pc}
 8005a1c:	08028d9c 	.word	0x08028d9c

08005a20 <_ZN11Screen1ViewD0Ev>:
 8005a20:	b510      	push	{r4, lr}
 8005a22:	4604      	mov	r4, r0
 8005a24:	f7ff fff2 	bl	8005a0c <_ZN11Screen1ViewD1Ev>
 8005a28:	f643 31b4 	movw	r1, #15284	@ 0x3bb4
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f01f f8fe 	bl	8024c2e <_ZdlPvj>
 8005a32:	4620      	mov	r0, r4
 8005a34:	bd10      	pop	{r4, pc}
	...

08005a38 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	f7fe fd80 	bl	8004540 <_ZN15Screen1ViewBaseC1Ev>
 8005a40:	4b01      	ldr	r3, [pc, #4]	@ (8005a48 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8005a42:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8005a44:	6023      	str	r3, [r4, #0]
}
 8005a46:	bd10      	pop	{r4, pc}
 8005a48:	08028d9c 	.word	0x08028d9c

08005a4c <_Z14getRGBFromTempiRhS_S_>:
	}
}

void getRGBFromTemp(int value, uint8_t& r, uint8_t& g, uint8_t& b)
{
    if (value < 60)
 8005a4c:	283b      	cmp	r0, #59	@ 0x3b
{
 8005a4e:	b530      	push	{r4, r5, lr}
    if (value < 60)
 8005a50:	dd08      	ble.n	8005a64 <_Z14getRGBFromTempiRhS_S_+0x18>
    {
        r = 255; g = 255; b = 255; // 흰색
    }
    else if (value < 90)
 8005a52:	2859      	cmp	r0, #89	@ 0x59
 8005a54:	dd0d      	ble.n	8005a72 <_Z14getRGBFromTempiRhS_S_+0x26>
    {
        r = 0; g = 255; b = 0;     // 초록색
    }
    else if (value < 110)
 8005a56:	286d      	cmp	r0, #109	@ 0x6d
 8005a58:	f04f 00ff 	mov.w	r0, #255	@ 0xff
 8005a5c:	dd0b      	ble.n	8005a76 <_Z14getRGBFromTempiRhS_S_+0x2a>
 8005a5e:	2400      	movs	r4, #0
 8005a60:	2500      	movs	r5, #0
 8005a62:	e002      	b.n	8005a6a <_Z14getRGBFromTempiRhS_S_+0x1e>
 8005a64:	20ff      	movs	r0, #255	@ 0xff
 8005a66:	24ff      	movs	r4, #255	@ 0xff
 8005a68:	4605      	mov	r5, r0
        r = 255; g = 255; b = 255; // 흰색
 8005a6a:	7008      	strb	r0, [r1, #0]
 8005a6c:	7014      	strb	r4, [r2, #0]
 8005a6e:	701d      	strb	r5, [r3, #0]
    }
    else
    {
        r = 255; g = 0; b = 0;     // 빨간색
    }
}
 8005a70:	bd30      	pop	{r4, r5, pc}
 8005a72:	2000      	movs	r0, #0
 8005a74:	e7f7      	b.n	8005a66 <_Z14getRGBFromTempiRhS_S_+0x1a>
 8005a76:	24a5      	movs	r4, #165	@ 0xa5
 8005a78:	e7f2      	b.n	8005a60 <_Z14getRGBFromTempiRhS_S_+0x14>

08005a7a <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8005a7a:	f7fe bc6c 	b.w	8004356 <_ZN15Screen1ViewBase11setupScreenEv>
	...

08005a80 <_ZN11Screen1View8setGearsEi>:
{
 8005a80:	b510      	push	{r4, lr}
 8005a82:	4604      	mov	r4, r0
 8005a84:	460b      	mov	r3, r1
	Unicode::snprintf(Gear_statBuffer, GEAR_STAT_SIZE, "%d", gear_state);
 8005a86:	4a06      	ldr	r2, [pc, #24]	@ (8005aa0 <_ZN11Screen1View8setGearsEi+0x20>)
 8005a88:	210a      	movs	r1, #10
 8005a8a:	f600 4034 	addw	r0, r0, #3124	@ 0xc34
 8005a8e:	f014 f9e7 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Gear_stat.invalidate();
 8005a92:	f604 1044 	addw	r0, r4, #2372	@ 0x944
}
 8005a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Gear_stat.invalidate();
 8005a9a:	f011 be96 	b.w	80177ca <_ZNK8touchgfx8Drawable10invalidateEv>
 8005a9e:	bf00      	nop
 8005aa0:	08028d84 	.word	0x08028d84

08005aa4 <_ZN11Screen1View9setNstateEb>:
{
 8005aa4:	b538      	push	{r3, r4, r5, lr}
	Gear_stat.setVisible(!nlevel);
 8005aa6:	f081 0301 	eor.w	r3, r1, #1
{
 8005aaa:	4604      	mov	r4, r0
 8005aac:	460d      	mov	r5, r1
	Gear_stat.invalidate();
 8005aae:	f600 1044 	addw	r0, r0, #2372	@ 0x944
 8005ab2:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
 8005ab6:	f011 fe88 	bl	80177ca <_ZNK8touchgfx8Drawable10invalidateEv>
	N_stat.invalidate();
 8005aba:	f504 6019 	add.w	r0, r4, #2448	@ 0x990
 8005abe:	f884 59b5 	strb.w	r5, [r4, #2485]	@ 0x9b5
}
 8005ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	N_stat.invalidate();
 8005ac6:	f011 be80 	b.w	80177ca <_ZNK8touchgfx8Drawable10invalidateEv>
	...

08005acc <_ZN11Screen1View8setADC_2Ei>:
{
 8005acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ace:	460d      	mov	r5, r1
 8005ad0:	4604      	mov	r4, r0
	getRGBFromTemp(ADC_2, r, g, b); //Temperature-based text color
 8005ad2:	f10d 0307 	add.w	r3, sp, #7
 8005ad6:	f10d 0206 	add.w	r2, sp, #6
 8005ada:	f10d 0105 	add.w	r1, sp, #5
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f7ff ffb4 	bl	8005a4c <_Z14getRGBFromTempiRhS_S_>
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005ae4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8005ae8:	f89d 3005 	ldrb.w	r3, [sp, #5]
	Unicode::snprintf(OilBuffer, OIL_SIZE, "%d", ADC_2);
 8005aec:	210a      	movs	r1, #10
 8005aee:	0212      	lsls	r2, r2, #8
 8005af0:	f504 6047 	add.w	r0, r4, #3184	@ 0xc70
 8005af4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005af8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	462b      	mov	r3, r5
 8005b00:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
        color = newColor;
 8005b04:	f8c4 2aa0 	str.w	r2, [r4, #2720]	@ 0xaa0
 8005b08:	4a04      	ldr	r2, [pc, #16]	@ (8005b1c <_ZN11Screen1View8setADC_2Ei+0x50>)
 8005b0a:	f014 f9a9 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Oil.invalidate();
 8005b0e:	f504 6027 	add.w	r0, r4, #2672	@ 0xa70
}
 8005b12:	b003      	add	sp, #12
 8005b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	Oil.invalidate();
 8005b18:	f011 be57 	b.w	80177ca <_ZNK8touchgfx8Drawable10invalidateEv>
 8005b1c:	08028d84 	.word	0x08028d84

08005b20 <_ZN11Screen1View8setADC_3Ei>:
{
 8005b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b22:	460d      	mov	r5, r1
 8005b24:	4604      	mov	r4, r0
	getRGBFromTemp(ADC_3, r, g, b); //Temperature-based text color
 8005b26:	f10d 0307 	add.w	r3, sp, #7
 8005b2a:	f10d 0206 	add.w	r2, sp, #6
 8005b2e:	f10d 0105 	add.w	r1, sp, #5
 8005b32:	4628      	mov	r0, r5
 8005b34:	f7ff ff8a 	bl	8005a4c <_Z14getRGBFromTempiRhS_S_>
 8005b38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8005b3c:	f89d 3005 	ldrb.w	r3, [sp, #5]
	Unicode::snprintf(WaterBuffer, WATER_SIZE, "%d", ADC_3);
 8005b40:	210a      	movs	r1, #10
 8005b42:	0212      	lsls	r2, r2, #8
 8005b44:	f604 4084 	addw	r0, r4, #3204	@ 0xc84
 8005b48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	462b      	mov	r3, r5
 8005b54:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 8005b58:	f8c4 2aec 	str.w	r2, [r4, #2796]	@ 0xaec
 8005b5c:	4a04      	ldr	r2, [pc, #16]	@ (8005b70 <_ZN11Screen1View8setADC_3Ei+0x50>)
 8005b5e:	f014 f97f 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Water.invalidate();
 8005b62:	f604 20bc 	addw	r0, r4, #2748	@ 0xabc
}
 8005b66:	b003      	add	sp, #12
 8005b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	Water.invalidate();
 8005b6c:	f011 be2d 	b.w	80177ca <_ZNK8touchgfx8Drawable10invalidateEv>
 8005b70:	08028d84 	.word	0x08028d84

08005b74 <_ZN11Screen1View8sd_stateEb>:
 8005b74:	f880 1bc5 	strb.w	r1, [r0, #3013]	@ 0xbc5
	Sd_detect.invalidate();
 8005b78:	f500 603a 	add.w	r0, r0, #2976	@ 0xba0
 8005b7c:	f011 be25 	b.w	80177ca <_ZNK8touchgfx8Drawable10invalidateEv>

08005b80 <_ZN11Screen1View6setRPMEi>:
{
 8005b80:	b510      	push	{r4, lr}
 8005b82:	4604      	mov	r4, r0
 8005b84:	460b      	mov	r3, r1
	Unicode::snprintf(RpmBuffer, RPM_SIZE, "%d", rpm);
 8005b86:	4a06      	ldr	r2, [pc, #24]	@ (8005ba0 <_ZN11Screen1View6setRPMEi+0x20>)
 8005b88:	210a      	movs	r1, #10
 8005b8a:	f600 4048 	addw	r0, r0, #3144	@ 0xc48
 8005b8e:	f014 f967 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Rpm.invalidate();
 8005b92:	f604 10d8 	addw	r0, r4, #2520	@ 0x9d8
}
 8005b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Rpm.invalidate();
 8005b9a:	f011 be16 	b.w	80177ca <_ZNK8touchgfx8Drawable10invalidateEv>
 8005b9e:	bf00      	nop
 8005ba0:	08028d84 	.word	0x08028d84

08005ba4 <_ZN11Screen1View14updateprevtimeEi>:
{
 8005ba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if((previous_time / 1000) % 60 < 10)
 8005ba6:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 8005baa:	233c      	movs	r3, #60	@ 0x3c
{
 8005bac:	4604      	mov	r4, r0
			Unicode::snprintf(Laptime_previousBuffer, LAPTIME_PREVIOUS_SIZE,  "0%d:0%d.%d",
 8005bae:	f600 40ac 	addw	r0, r0, #3244	@ 0xcac
		if((previous_time / 1000) % 60 < 10)
 8005bb2:	fb91 f5f6 	sdiv	r5, r1, r6
 8005bb6:	fb95 f2f3 	sdiv	r2, r5, r3
 8005bba:	fb03 5212 	mls	r2, r3, r2, r5
			Unicode::snprintf(Laptime_previousBuffer, LAPTIME_PREVIOUS_SIZE,  "0%d:0%d.%d",
 8005bbe:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005bc2:	fb06 1515 	mls	r5, r6, r5, r1
	if(previous_time / 60000 < 10)
 8005bc6:	4e0d      	ldr	r6, [pc, #52]	@ (8005bfc <_ZN11Screen1View14updateprevtimeEi+0x58>)
			Laptime_previous.invalidate();
 8005bc8:	f604 3454 	addw	r4, r4, #2900	@ 0xb54
	if(previous_time / 60000 < 10)
 8005bcc:	42b1      	cmp	r1, r6
			Unicode::snprintf(Laptime_previousBuffer, LAPTIME_PREVIOUS_SIZE,  "0%d:0%d.%d",
 8005bce:	fb91 f3f3 	sdiv	r3, r1, r3
 8005bd2:	e9cd 2500 	strd	r2, r5, [sp]
	if(previous_time / 60000 < 10)
 8005bd6:	dc0c      	bgt.n	8005bf2 <_ZN11Screen1View14updateprevtimeEi+0x4e>
		if((previous_time / 1000) % 60 < 10)
 8005bd8:	2a09      	cmp	r2, #9
			Unicode::snprintf(Laptime_previousBuffer, LAPTIME_PREVIOUS_SIZE,  "0%d:0%d.%d",
 8005bda:	bfd4      	ite	le
 8005bdc:	4a08      	ldrle	r2, [pc, #32]	@ (8005c00 <_ZN11Screen1View14updateprevtimeEi+0x5c>)
			Unicode::snprintf(Laptime_previousBuffer, LAPTIME_PREVIOUS_SIZE,  "0%d:%d.%d",
 8005bde:	4a09      	ldrgt	r2, [pc, #36]	@ (8005c04 <_ZN11Screen1View14updateprevtimeEi+0x60>)
			Unicode::snprintf(Laptime_previousBuffer, LAPTIME_PREVIOUS_SIZE,  "%d:%d.%d",
 8005be0:	210a      	movs	r1, #10
 8005be2:	f014 f93d 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			Laptime_previous.invalidate();
 8005be6:	4620      	mov	r0, r4
}
 8005be8:	b002      	add	sp, #8
 8005bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			Laptime_previous.invalidate();
 8005bee:	f011 bdec 	b.w	80177ca <_ZNK8touchgfx8Drawable10invalidateEv>
		if((previous_time / 1000) % 60 < 10)
 8005bf2:	2a09      	cmp	r2, #9
			Unicode::snprintf(Laptime_previousBuffer, LAPTIME_PREVIOUS_SIZE,  "%d:0%d.%d",
 8005bf4:	bfd4      	ite	le
 8005bf6:	4a04      	ldrle	r2, [pc, #16]	@ (8005c08 <_ZN11Screen1View14updateprevtimeEi+0x64>)
			Unicode::snprintf(Laptime_previousBuffer, LAPTIME_PREVIOUS_SIZE,  "%d:%d.%d",
 8005bf8:	4a04      	ldrgt	r2, [pc, #16]	@ (8005c0c <_ZN11Screen1View14updateprevtimeEi+0x68>)
 8005bfa:	e7f1      	b.n	8005be0 <_ZN11Screen1View14updateprevtimeEi+0x3c>
 8005bfc:	000927bf 	.word	0x000927bf
 8005c00:	08028d7c 	.word	0x08028d7c
 8005c04:	08028d87 	.word	0x08028d87
 8005c08:	08028d7d 	.word	0x08028d7d
 8005c0c:	08028d88 	.word	0x08028d88

08005c10 <_ZN11Screen1View15updateStopwatchEi>:
{
 8005c10:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if((stopwatch_time / 1000) % 60 < 10)
 8005c12:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 8005c16:	233c      	movs	r3, #60	@ 0x3c
{
 8005c18:	4604      	mov	r4, r0
			Unicode::snprintf(Laptime_realtimeBuffer, LAPTIME_REALTIME_SIZE,  "0%d:0%d.%d",
 8005c1a:	f600 4098 	addw	r0, r0, #3224	@ 0xc98
		if((stopwatch_time / 1000) % 60 < 10)
 8005c1e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005c22:	fb95 f2f3 	sdiv	r2, r5, r3
 8005c26:	fb03 5212 	mls	r2, r3, r2, r5
			Unicode::snprintf(Laptime_realtimeBuffer, LAPTIME_REALTIME_SIZE,  "0%d:0%d.%d",
 8005c2a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005c2e:	fb06 1515 	mls	r5, r6, r5, r1
	if(stopwatch_time / 60000 < 10)
 8005c32:	4e0d      	ldr	r6, [pc, #52]	@ (8005c68 <_ZN11Screen1View15updateStopwatchEi+0x58>)
			Laptime_realtime.invalidate();
 8005c34:	f604 3408 	addw	r4, r4, #2824	@ 0xb08
	if(stopwatch_time / 60000 < 10)
 8005c38:	42b1      	cmp	r1, r6
			Unicode::snprintf(Laptime_realtimeBuffer, LAPTIME_REALTIME_SIZE,  "0%d:0%d.%d",
 8005c3a:	fb91 f3f3 	sdiv	r3, r1, r3
 8005c3e:	e9cd 2500 	strd	r2, r5, [sp]
	if(stopwatch_time / 60000 < 10)
 8005c42:	dc0c      	bgt.n	8005c5e <_ZN11Screen1View15updateStopwatchEi+0x4e>
		if((stopwatch_time / 1000) % 60 < 10)
 8005c44:	2a09      	cmp	r2, #9
			Unicode::snprintf(Laptime_realtimeBuffer, LAPTIME_REALTIME_SIZE,  "0%d:0%d.%d",
 8005c46:	bfd4      	ite	le
 8005c48:	4a08      	ldrle	r2, [pc, #32]	@ (8005c6c <_ZN11Screen1View15updateStopwatchEi+0x5c>)
			Unicode::snprintf(Laptime_realtimeBuffer, LAPTIME_REALTIME_SIZE,  "0%d:%d.%d",
 8005c4a:	4a09      	ldrgt	r2, [pc, #36]	@ (8005c70 <_ZN11Screen1View15updateStopwatchEi+0x60>)
			Unicode::snprintf(Laptime_realtimeBuffer, LAPTIME_REALTIME_SIZE,  "%d:%d.%d",
 8005c4c:	210a      	movs	r1, #10
 8005c4e:	f014 f907 	bl	8019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			Laptime_realtime.invalidate();
 8005c52:	4620      	mov	r0, r4
}
 8005c54:	b002      	add	sp, #8
 8005c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			Laptime_realtime.invalidate();
 8005c5a:	f011 bdb6 	b.w	80177ca <_ZNK8touchgfx8Drawable10invalidateEv>
		if((stopwatch_time / 1000) % 60 < 10)
 8005c5e:	2a09      	cmp	r2, #9
			Unicode::snprintf(Laptime_realtimeBuffer, LAPTIME_REALTIME_SIZE,  "%d:0%d.%d",
 8005c60:	bfd4      	ite	le
 8005c62:	4a04      	ldrle	r2, [pc, #16]	@ (8005c74 <_ZN11Screen1View15updateStopwatchEi+0x64>)
			Unicode::snprintf(Laptime_realtimeBuffer, LAPTIME_REALTIME_SIZE,  "%d:%d.%d",
 8005c64:	4a04      	ldrgt	r2, [pc, #16]	@ (8005c78 <_ZN11Screen1View15updateStopwatchEi+0x68>)
 8005c66:	e7f1      	b.n	8005c4c <_ZN11Screen1View15updateStopwatchEi+0x3c>
 8005c68:	000927bf 	.word	0x000927bf
 8005c6c:	08028d7c 	.word	0x08028d7c
 8005c70:	08028d87 	.word	0x08028d87
 8005c74:	08028d7d 	.word	0x08028d7d
 8005c78:	08028d88 	.word	0x08028d88

08005c7c <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8005c7c:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8005c7e:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8005c82:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8005c84:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8005c86:	2302      	movs	r3, #2
 8005c88:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8005c8a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8005c8e:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8005c92:	4770      	bx	lr

08005c94 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8005c94:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8005c98:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8005c9a:	bf04      	itt	eq
 8005c9c:	2300      	moveq	r3, #0
 8005c9e:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	4770      	bx	lr

08005ca6 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	4770      	bx	lr

08005caa <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005caa:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005cac:	6904      	ldr	r4, [r0, #16]
 8005cae:	8900      	ldrh	r0, [r0, #8]
 8005cb0:	46a4      	mov	ip, r4
}
 8005cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005cb6:	4760      	bx	ip

08005cb8 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005cb8:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005cba:	68c4      	ldr	r4, [r0, #12]
 8005cbc:	8900      	ldrh	r0, [r0, #8]
 8005cbe:	46a4      	mov	ip, r4
}
 8005cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005cc4:	4760      	bx	ip

08005cc6 <FT6X06_GestureConfig>:
{
 8005cc6:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8005cc8:	f100 0518 	add.w	r5, r0, #24
{
 8005ccc:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8005cce:	7809      	ldrb	r1, [r1, #0]
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f000 f911 	bl	8005ef8 <ft6x06_radian_value>
 8005cd6:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8005cd8:	7931      	ldrb	r1, [r6, #4]
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f000 f918 	bl	8005f10 <ft6x06_offset_left_right>
 8005ce0:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8005ce2:	7a31      	ldrb	r1, [r6, #8]
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f000 f91f 	bl	8005f28 <ft6x06_offset_up_down>
 8005cea:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8005cec:	7b31      	ldrb	r1, [r6, #12]
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f000 f926 	bl	8005f40 <ft6x06_disatnce_left_right>
 8005cf4:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8005cf6:	7c31      	ldrb	r1, [r6, #16]
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 f92d 	bl	8005f58 <ft6x06_distance_up_down>
 8005cfe:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8005d00:	7d31      	ldrb	r1, [r6, #20]
 8005d02:	4628      	mov	r0, r5
 8005d04:	f000 f934 	bl	8005f70 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8005d08:	42c4      	cmn	r4, r0
}
 8005d0a:	bf14      	ite	ne
 8005d0c:	f04f 30ff 	movne.w	r0, #4294967295
 8005d10:	2000      	moveq	r0, #0
 8005d12:	bd70      	pop	{r4, r5, r6, pc}

08005d14 <FT6X06_ReadID>:
{
 8005d14:	b513      	push	{r0, r1, r4, lr}
 8005d16:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8005d18:	3018      	adds	r0, #24
 8005d1a:	f10d 0107 	add.w	r1, sp, #7
 8005d1e:	f000 f93f 	bl	8005fa0 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8005d22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005d26:	6023      	str	r3, [r4, #0]
}
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd10      	pop	{r4, pc}

08005d2c <FT6X06_GetState>:
{
 8005d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005d2e:	f100 0518 	add.w	r5, r0, #24
{
 8005d32:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005d34:	a901      	add	r1, sp, #4
 8005d36:	4628      	mov	r0, r5
 8005d38:	f000 f8d1 	bl	8005ede <ft6x06_td_status>
 8005d3c:	bb08      	cbnz	r0, 8005d82 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8005d3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	bf98      	it	ls
 8005d46:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005d48:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8005d4a:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005d4c:	2103      	movs	r1, #3
 8005d4e:	4628      	mov	r0, r5
 8005d50:	eb0d 0203 	add.w	r2, sp, r3
 8005d54:	f000 f8b0 	bl	8005eb8 <ft6x06_read_reg>
 8005d58:	b9b0      	cbnz	r0, 8005d88 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005d5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005d5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d68:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005d6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005d6e:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005d70:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60a3      	str	r3, [r4, #8]
}
 8005d7e:	b003      	add	sp, #12
 8005d80:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005d82:	f04f 30ff 	mov.w	r0, #4294967295
 8005d86:	e7df      	b.n	8005d48 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005d8c:	e7f7      	b.n	8005d7e <FT6X06_GetState+0x52>

08005d8e <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8005d8e:	3018      	adds	r0, #24
 8005d90:	f000 b8a0 	b.w	8005ed4 <ft6x06_gest_id>

08005d94 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8005d94:	2101      	movs	r1, #1
 8005d96:	3018      	adds	r0, #24
 8005d98:	f000 b8f6 	b.w	8005f88 <ft6x06_g_mode>

08005d9c <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	3018      	adds	r0, #24
 8005da0:	f000 b8f2 	b.w	8005f88 <ft6x06_g_mode>

08005da4 <FT6X06_Init>:
{
 8005da4:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8005da6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8005daa:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8005dac:	b96b      	cbnz	r3, 8005dca <FT6X06_Init+0x26>
    pObj->IO.Init();
 8005dae:	6803      	ldr	r3, [r0, #0]
 8005db0:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7ff fff2 	bl	8005d9c <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8005db8:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8005dba:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8005dbe:	bf18      	it	ne
 8005dc0:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8005dc2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8005dc6:	4240      	negs	r0, r0
}
 8005dc8:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 8005dca:	2000      	movs	r0, #0
  return ret;
 8005dcc:	e7fc      	b.n	8005dc8 <FT6X06_Init+0x24>

08005dce <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8005dce:	2000      	movs	r0, #0
 8005dd0:	4770      	bx	lr

08005dd2 <FT6X06_GetMultiTouchState>:
{
 8005dd2:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005dd4:	f100 0518 	add.w	r5, r0, #24
{
 8005dd8:	b085      	sub	sp, #20
 8005dda:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005ddc:	4628      	mov	r0, r5
 8005dde:	a901      	add	r1, sp, #4
 8005de0:	f000 f87d 	bl	8005ede <ft6x06_td_status>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d145      	bne.n	8005e74 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8005de8:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	bf98      	it	ls
 8005df0:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8005df2:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005df4:	230c      	movs	r3, #12
 8005df6:	aa01      	add	r2, sp, #4
 8005df8:	2103      	movs	r1, #3
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 f85c 	bl	8005eb8 <ft6x06_read_reg>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d13a      	bne.n	8005e7a <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005e04:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005e08:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8005e0c:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8005e0e:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005e10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8005e14:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005e16:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005e18:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005e1c:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005e20:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005e22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005e26:	021b      	lsls	r3, r3, #8
 8005e28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005e2c:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005e2e:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005e32:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8005e34:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005e38:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8005e3a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005e42:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8005e44:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005e46:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8005e4a:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005e4c:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8005e4e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005e52:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8005e54:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8005e62:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005e66:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8005e68:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8005e70:	b005      	add	sp, #20
 8005e72:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	e7bb      	b.n	8005df2 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8005e7e:	e7f7      	b.n	8005e70 <FT6X06_GetMultiTouchState+0x9e>

08005e80 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8005e80:	b190      	cbz	r0, 8005ea8 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8005e82:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8005e84:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005e86:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8005e88:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8005e8a:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8005e8c:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005e8e:	68ca      	ldr	r2, [r1, #12]
 8005e90:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005e92:	690a      	ldr	r2, [r1, #16]
 8005e94:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8005e96:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8005e98:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8005e9a:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8005e9c:	4a04      	ldr	r2, [pc, #16]	@ (8005eb0 <FT6X06_RegisterBusIO+0x30>)
 8005e9e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8005ea0:	4a04      	ldr	r2, [pc, #16]	@ (8005eb4 <FT6X06_RegisterBusIO+0x34>)
 8005ea2:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8005ea4:	b103      	cbz	r3, 8005ea8 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8005ea6:	4718      	bx	r3
}
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	08005cab 	.word	0x08005cab
 8005eb4:	08005cb9 	.word	0x08005cb9

08005eb8 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8005eb8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005eba:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005ebe:	46a4      	mov	ip, r4
}
 8005ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005ec4:	4760      	bx	ip

08005ec6 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8005ec6:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005ec8:	6804      	ldr	r4, [r0, #0]
 8005eca:	6880      	ldr	r0, [r0, #8]
 8005ecc:	46a4      	mov	ip, r4
}
 8005ece:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005ed2:	4760      	bx	ip

08005ed4 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005ed4:	2301      	movs	r3, #1
{
 8005ed6:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005ed8:	4619      	mov	r1, r3
 8005eda:	f7ff bfed 	b.w	8005eb8 <ft6x06_read_reg>

08005ede <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005ede:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005ee0:	460a      	mov	r2, r1
{
 8005ee2:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	2102      	movs	r1, #2
 8005ee8:	f7ff ffe6 	bl	8005eb8 <ft6x06_read_reg>
  
  if(ret == 0)
 8005eec:	b918      	cbnz	r0, 8005ef6 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8005eee:	7823      	ldrb	r3, [r4, #0]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8005ef6:	bd10      	pop	{r4, pc}

08005ef8 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005ef8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8005efa:	2301      	movs	r3, #1
{
 8005efc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8005f00:	f10d 0207 	add.w	r2, sp, #7
 8005f04:	2191      	movs	r1, #145	@ 0x91
 8005f06:	f7ff ffde 	bl	8005ec6 <ft6x06_write_reg>
}
 8005f0a:	b003      	add	sp, #12
 8005f0c:	f85d fb04 	ldr.w	pc, [sp], #4

08005f10 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005f10:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8005f12:	2301      	movs	r3, #1
{
 8005f14:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8005f18:	f10d 0207 	add.w	r2, sp, #7
 8005f1c:	2192      	movs	r1, #146	@ 0x92
 8005f1e:	f7ff ffd2 	bl	8005ec6 <ft6x06_write_reg>
}
 8005f22:	b003      	add	sp, #12
 8005f24:	f85d fb04 	ldr.w	pc, [sp], #4

08005f28 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005f28:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8005f2a:	2301      	movs	r3, #1
{
 8005f2c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8005f30:	f10d 0207 	add.w	r2, sp, #7
 8005f34:	2193      	movs	r1, #147	@ 0x93
 8005f36:	f7ff ffc6 	bl	8005ec6 <ft6x06_write_reg>
}
 8005f3a:	b003      	add	sp, #12
 8005f3c:	f85d fb04 	ldr.w	pc, [sp], #4

08005f40 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005f40:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8005f42:	2301      	movs	r3, #1
{
 8005f44:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8005f48:	f10d 0207 	add.w	r2, sp, #7
 8005f4c:	2194      	movs	r1, #148	@ 0x94
 8005f4e:	f7ff ffba 	bl	8005ec6 <ft6x06_write_reg>
}
 8005f52:	b003      	add	sp, #12
 8005f54:	f85d fb04 	ldr.w	pc, [sp], #4

08005f58 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005f58:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005f5a:	2301      	movs	r3, #1
{
 8005f5c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005f60:	f10d 0207 	add.w	r2, sp, #7
 8005f64:	2195      	movs	r1, #149	@ 0x95
 8005f66:	f7ff ffae 	bl	8005ec6 <ft6x06_write_reg>
}
 8005f6a:	b003      	add	sp, #12
 8005f6c:	f85d fb04 	ldr.w	pc, [sp], #4

08005f70 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005f70:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005f72:	2301      	movs	r3, #1
{
 8005f74:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005f78:	f10d 0207 	add.w	r2, sp, #7
 8005f7c:	2196      	movs	r1, #150	@ 0x96
 8005f7e:	f7ff ffa2 	bl	8005ec6 <ft6x06_write_reg>
}
 8005f82:	b003      	add	sp, #12
 8005f84:	f85d fb04 	ldr.w	pc, [sp], #4

08005f88 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005f88:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8005f8a:	2301      	movs	r3, #1
{
 8005f8c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8005f90:	f10d 0207 	add.w	r2, sp, #7
 8005f94:	21a4      	movs	r1, #164	@ 0xa4
 8005f96:	f7ff ff96 	bl	8005ec6 <ft6x06_write_reg>
}
 8005f9a:	b003      	add	sp, #12
 8005f9c:	f85d fb04 	ldr.w	pc, [sp], #4

08005fa0 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005fa0:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	21a8      	movs	r1, #168	@ 0xa8
 8005fa6:	f7ff bf87 	b.w	8005eb8 <ft6x06_read_reg>
	...

08005fac <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8005fac:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4b07      	ldr	r3, [pc, #28]	@ (8005fd0 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8005fb2:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8005fb6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005fb8:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005fba:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8005fbc:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005fbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fc2:	f007 fcf1 	bl	800d9a8 <HAL_SDRAM_SendCommand>
 8005fc6:	3800      	subs	r0, #0
 8005fc8:	bf18      	it	ne
 8005fca:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005fcc:	4240      	negs	r0, r0
 8005fce:	bd08      	pop	{r3, pc}
 8005fd0:	2400ee20 	.word	0x2400ee20

08005fd4 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8005fd4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	4b08      	ldr	r3, [pc, #32]	@ (8005ffc <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8005fda:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8005fde:	2101      	movs	r1, #1
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fea:	4619      	mov	r1, r3
 8005fec:	f007 fcdc 	bl	800d9a8 <HAL_SDRAM_SendCommand>
 8005ff0:	3800      	subs	r0, #0
 8005ff2:	bf18      	it	ne
 8005ff4:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005ff6:	4240      	negs	r0, r0
 8005ff8:	bd08      	pop	{r3, pc}
 8005ffa:	bf00      	nop
 8005ffc:	2400ee20 	.word	0x2400ee20

08006000 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8006000:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8006002:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8006006:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8006008:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 800600a:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800600c:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 800600e:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8006010:	6991      	ldr	r1, [r2, #24]
 8006012:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8006014:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8006016:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8006018:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800601a:	4907      	ldr	r1, [pc, #28]	@ (8006038 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 800601c:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 800601e:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8006020:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8006022:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8006026:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800602a:	f007 fcbd 	bl	800d9a8 <HAL_SDRAM_SendCommand>
 800602e:	3800      	subs	r0, #0
 8006030:	bf18      	it	ne
 8006032:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8006034:	4240      	negs	r0, r0
 8006036:	bd10      	pop	{r4, pc}
 8006038:	2400ee20 	.word	0x2400ee20

0800603c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800603c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 800603e:	4b08      	ldr	r3, [pc, #32]	@ (8006060 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8006040:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8006044:	2108      	movs	r1, #8
 8006046:	2200      	movs	r2, #0
 8006048:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800604c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006050:	4619      	mov	r1, r3
 8006052:	f007 fca9 	bl	800d9a8 <HAL_SDRAM_SendCommand>
 8006056:	3800      	subs	r0, #0
 8006058:	bf18      	it	ne
 800605a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800605c:	4240      	negs	r0, r0
 800605e:	bd08      	pop	{r3, pc}
 8006060:	2400ee20 	.word	0x2400ee20

08006064 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8006064:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8006066:	f007 fcbe 	bl	800d9e6 <HAL_SDRAM_ProgramRefreshRate>
 800606a:	3800      	subs	r0, #0
 800606c:	bf18      	it	ne
 800606e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8006070:	4240      	negs	r0, r0
 8006072:	bd08      	pop	{r3, pc}

08006074 <IS42S32800J_Init>:
{
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8006078:	6809      	ldr	r1, [r1, #0]
{
 800607a:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800607c:	f7ff ff96 	bl	8005fac <IS42S32800J_ClockEnable>
 8006080:	b110      	cbz	r0, 8006088 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8006082:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006086:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8006088:	f001 fc7c 	bl	8007984 <HAL_GetTick>
 800608c:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800608e:	f001 fc79 	bl	8007984 <HAL_GetTick>
 8006092:	4286      	cmp	r6, r0
 8006094:	d0fb      	beq.n	800608e <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8006096:	6821      	ldr	r1, [r4, #0]
 8006098:	4628      	mov	r0, r5
 800609a:	f7ff ff9b 	bl	8005fd4 <IS42S32800J_Precharge>
 800609e:	2800      	cmp	r0, #0
 80060a0:	d1ef      	bne.n	8006082 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80060a2:	4628      	mov	r0, r5
 80060a4:	e9d4 1200 	ldrd	r1, r2, [r4]
 80060a8:	f7ff ffc8 	bl	800603c <IS42S32800J_RefreshMode>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d1e8      	bne.n	8006082 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80060b0:	4621      	mov	r1, r4
 80060b2:	4628      	mov	r0, r5
 80060b4:	f7ff ffa4 	bl	8006000 <IS42S32800J_ModeRegConfig>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d1e2      	bne.n	8006082 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 80060bc:	68a1      	ldr	r1, [r4, #8]
 80060be:	4628      	mov	r0, r5
 80060c0:	f7ff ffd0 	bl	8006064 <IS42S32800J_RefreshRate>
 80060c4:	3800      	subs	r0, #0
 80060c6:	bf18      	it	ne
 80060c8:	2001      	movne	r0, #1
 80060ca:	4240      	negs	r0, r0
  return ret;
 80060cc:	e7db      	b.n	8006086 <IS42S32800J_Init+0x12>

080060ce <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80060ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80060d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80060d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80060da:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80060de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80060e2:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 80060e6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80060ea:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 80060ec:	2000      	movs	r0, #0
 80060ee:	4770      	bx	lr

080060f0 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80060f0:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80060f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 80060f6:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80060f8:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80060fc:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80060fe:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006100:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8006102:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8006104:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006106:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8006108:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800610a:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800610c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 800610e:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006110:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8006112:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006114:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006116:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800611a:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 800611e:	2310      	movs	r3, #16
 8006120:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006122:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006126:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8006128:	f240 1301 	movw	r3, #257	@ 0x101
 800612c:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800612e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006132:	f005 fcb4 	bl	800ba9e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8006136:	2800      	cmp	r0, #0

}
 8006138:	bf14      	ite	ne
 800613a:	f06f 0004 	mvnne.w	r0, #4
 800613e:	2000      	moveq	r0, #0
 8006140:	b015      	add	sp, #84	@ 0x54
 8006142:	f85d fb04 	ldr.w	pc, [sp], #4

08006146 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006146:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006148:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800614c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800614e:	bf08      	it	eq
 8006150:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8006154:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006156:	bf18      	it	ne
 8006158:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 800615c:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800615e:	a906      	add	r1, sp, #24
{
 8006160:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006162:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8006164:	2306      	movs	r3, #6
 8006166:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006168:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800616a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800616e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8006170:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006172:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006174:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006178:	f005 fb90 	bl	800b89c <HAL_QSPI_Command>
 800617c:	bb20      	cbnz	r0, 80061c8 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800617e:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8006182:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006184:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006186:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800618a:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800618c:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800618e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8006192:	f04f 0310 	mov.w	r3, #16
 8006196:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800619a:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800619e:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80061a0:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80061a4:	bf14      	ite	ne
 80061a6:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 80061aa:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80061ae:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80061b0:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80061b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80061b6:	f005 fc72 	bl	800ba9e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 80061ba:	2800      	cmp	r0, #0
 80061bc:	bf14      	ite	ne
 80061be:	f06f 0004 	mvnne.w	r0, #4
 80061c2:	2000      	moveq	r0, #0
}
 80061c4:	b015      	add	sp, #84	@ 0x54
 80061c6:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 80061c8:	f06f 0001 	mvn.w	r0, #1
 80061cc:	e7fa      	b.n	80061c4 <MT25TL01G_WriteEnable+0x7e>

080061ce <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80061ce:	2903      	cmp	r1, #3
{
 80061d0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80061d2:	bf08      	it	eq
 80061d4:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80061d8:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80061da:	bf18      	it	ne
 80061dc:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80061e0:	4604      	mov	r4, r0
 80061e2:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80061e4:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80061e6:	23b7      	movs	r3, #183	@ 0xb7
 80061e8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80061ea:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80061ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80061f0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80061f2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80061f4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80061f6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80061fa:	f7ff ffa4 	bl	8006146 <MT25TL01G_WriteEnable>
 80061fe:	b118      	cbz	r0, 8006208 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8006200:	f06f 0001 	mvn.w	r0, #1
}
 8006204:	b00f      	add	sp, #60	@ 0x3c
 8006206:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800620c:	4669      	mov	r1, sp
 800620e:	4620      	mov	r0, r4
 8006210:	f005 fb44 	bl	800b89c <HAL_QSPI_Command>
 8006214:	2800      	cmp	r0, #0
 8006216:	d1f3      	bne.n	8006200 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8006218:	4629      	mov	r1, r5
 800621a:	4620      	mov	r0, r4
 800621c:	f7ff ff68 	bl	80060f0 <MT25TL01G_AutoPollingMemReady>
 8006220:	2800      	cmp	r0, #0
 8006222:	d0ef      	beq.n	8006204 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8006224:	e7ec      	b.n	8006200 <MT25TL01G_Enter4BytesAddressMode+0x32>

08006226 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8006226:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006228:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 800622c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800622e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006232:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8006234:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006236:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8006238:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800623a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800623c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8006240:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8006242:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006244:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006246:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800624a:	f005 fb27 	bl	800b89c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800624e:	2800      	cmp	r0, #0
}
 8006250:	bf14      	ite	ne
 8006252:	f06f 0001 	mvnne.w	r0, #1
 8006256:	2000      	moveq	r0, #0
 8006258:	b00f      	add	sp, #60	@ 0x3c
 800625a:	f85d fb04 	ldr.w	pc, [sp], #4

0800625e <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800625e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006260:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8006264:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006266:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800626a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800626c:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800626e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8006270:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006272:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006274:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8006278:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800627a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800627c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800627e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006282:	f005 fb0b 	bl	800b89c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8006286:	2800      	cmp	r0, #0
}
 8006288:	bf14      	ite	ne
 800628a:	f06f 0001 	mvnne.w	r0, #1
 800628e:	2000      	moveq	r0, #0
 8006290:	b00f      	add	sp, #60	@ 0x3c
 8006292:	f85d fb04 	ldr.w	pc, [sp], #4

08006296 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8006296:	b500      	push	{lr}
 8006298:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800629a:	2903      	cmp	r1, #3
 800629c:	d80e      	bhi.n	80062bc <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 800629e:	e8df f001 	tbb	[pc, r1]
 80062a2:	2902      	.short	0x2902
 80062a4:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80062a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062aa:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 80062ac:	230e      	movs	r3, #14
 80062ae:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80062b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062b4:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80062b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80062ba:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80062bc:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80062be:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80062c2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80062c6:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80062c8:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80062ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80062ce:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80062d0:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80062d2:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80062d6:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80062d8:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80062da:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80062dc:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80062e0:	f005 fc2e 	bl	800bb40 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 80062e4:	2800      	cmp	r0, #0
}
 80062e6:	bf14      	ite	ne
 80062e8:	f06f 0005 	mvnne.w	r0, #5
 80062ec:	2000      	moveq	r0, #0
 80062ee:	b011      	add	sp, #68	@ 0x44
 80062f0:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80062f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062f8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 80062fa:	233d      	movs	r3, #61	@ 0x3d
 80062fc:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80062fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006302:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8006304:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006308:	e7d7      	b.n	80062ba <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800630a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800630e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8006310:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8006312:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8006314:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006318:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800631a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800631e:	e7cc      	b.n	80062ba <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006320:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006324:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8006326:	23ed      	movs	r3, #237	@ 0xed
 8006328:	e7f3      	b.n	8006312 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

0800632a <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800632a:	b500      	push	{lr}
 800632c:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800632e:	2903      	cmp	r1, #3
 8006330:	d80e      	bhi.n	8006350 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8006332:	e8df f001 	tbb	[pc, r1]
 8006336:	2502      	.short	0x2502
 8006338:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800633a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800633e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8006340:	230c      	movs	r3, #12
 8006342:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8006344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006348:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800634a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800634e:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8006350:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8006352:	466a      	mov	r2, sp
 8006354:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8006356:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8006358:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800635c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800635e:	2300      	movs	r3, #0
 8006360:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006362:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006364:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8006368:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800636c:	f005 fbe8 	bl	800bb40 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8006370:	2800      	cmp	r0, #0
}
 8006372:	bf14      	ite	ne
 8006374:	f06f 0005 	mvnne.w	r0, #5
 8006378:	2000      	moveq	r0, #0
 800637a:	b011      	add	sp, #68	@ 0x44
 800637c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006384:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8006386:	23bc      	movs	r3, #188	@ 0xbc
 8006388:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800638a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800638e:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8006390:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006394:	e7db      	b.n	800634e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006396:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800639a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800639c:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800639e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80063a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80063a4:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80063a6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80063aa:	e7d0      	b.n	800634e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80063ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80063b0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80063b2:	23eb      	movs	r3, #235	@ 0xeb
 80063b4:	e7f3      	b.n	800639e <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

080063b6 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80063b6:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80063b8:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80063bc:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80063be:	bf18      	it	ne
 80063c0:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80063c4:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80063c6:	bf08      	it	eq
 80063c8:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80063cc:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80063ce:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80063d0:	2366      	movs	r3, #102	@ 0x66
 80063d2:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80063d4:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80063d6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80063da:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80063dc:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80063de:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80063e0:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80063e4:	f005 fa5a 	bl	800b89c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80063e8:	2800      	cmp	r0, #0
}
 80063ea:	bf14      	ite	ne
 80063ec:	f06f 0001 	mvnne.w	r0, #1
 80063f0:	2000      	moveq	r0, #0
 80063f2:	b00f      	add	sp, #60	@ 0x3c
 80063f4:	f85d fb04 	ldr.w	pc, [sp], #4

080063f8 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80063f8:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80063fa:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80063fe:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006400:	bf18      	it	ne
 8006402:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8006406:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006408:	bf08      	it	eq
 800640a:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800640e:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006410:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8006412:	2399      	movs	r3, #153	@ 0x99
 8006414:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006416:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006418:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800641c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800641e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006420:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006422:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006426:	f005 fa39 	bl	800b89c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800642a:	2800      	cmp	r0, #0
}
 800642c:	bf14      	ite	ne
 800642e:	f06f 0001 	mvnne.w	r0, #1
 8006432:	2000      	moveq	r0, #0
 8006434:	b00f      	add	sp, #60	@ 0x3c
 8006436:	f85d fb04 	ldr.w	pc, [sp], #4

0800643a <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800643a:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800643c:	6884      	ldr	r4, [r0, #8]
 800643e:	8800      	ldrh	r0, [r0, #0]
 8006440:	46a4      	mov	ip, r4
}
 8006442:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006446:	4760      	bx	ip

08006448 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006448:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800644a:	6844      	ldr	r4, [r0, #4]
 800644c:	8800      	ldrh	r0, [r0, #0]
 800644e:	46a4      	mov	ip, r4
}
 8006450:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006454:	4760      	bx	ip

08006456 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8006456:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8006458:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800645a:	4604      	mov	r4, r0
 800645c:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 800645e:	4798      	blx	r3
 8006460:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006462:	68e3      	ldr	r3, [r4, #12]
 8006464:	4798      	blx	r3
 8006466:	1b83      	subs	r3, r0, r6
 8006468:	42ab      	cmp	r3, r5
 800646a:	d3fa      	bcc.n	8006462 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 800646c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006470 <OTM8009A_Init>:
{
 8006470:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006474:	2300      	movs	r3, #0
 8006476:	f100 0510 	add.w	r5, r0, #16
{
 800647a:	4607      	mov	r7, r0
 800647c:	460e      	mov	r6, r1
 800647e:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006480:	4619      	mov	r1, r3
 8006482:	4ade      	ldr	r2, [pc, #888]	@ (80067fc <OTM8009A_Init+0x38c>)
 8006484:	4628      	mov	r0, r5
 8006486:	f000 fb99 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800648a:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800648c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800648e:	4adc      	ldr	r2, [pc, #880]	@ (8006800 <OTM8009A_Init+0x390>)
 8006490:	21ff      	movs	r1, #255	@ 0xff
 8006492:	4628      	mov	r0, r5
 8006494:	f000 fb92 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006498:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800649a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800649c:	4ad9      	ldr	r2, [pc, #868]	@ (8006804 <OTM8009A_Init+0x394>)
 800649e:	4619      	mov	r1, r3
 80064a0:	4628      	mov	r0, r5
 80064a2:	f000 fb8b 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80064a6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80064a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80064aa:	4ad7      	ldr	r2, [pc, #860]	@ (8006808 <OTM8009A_Init+0x398>)
 80064ac:	21ff      	movs	r1, #255	@ 0xff
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 fb84 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80064b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80064b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80064b8:	4ad2      	ldr	r2, [pc, #840]	@ (8006804 <OTM8009A_Init+0x394>)
 80064ba:	4619      	mov	r1, r3
 80064bc:	4628      	mov	r0, r5
 80064be:	f000 fb7d 	bl	8006bbc <otm8009a_write_reg>
 80064c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80064c4:	2300      	movs	r3, #0
 80064c6:	4ad1      	ldr	r2, [pc, #836]	@ (800680c <OTM8009A_Init+0x39c>)
 80064c8:	21c4      	movs	r1, #196	@ 0xc4
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 fb76 	bl	8006bbc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80064d0:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80064d2:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80064d4:	4638      	mov	r0, r7
 80064d6:	f7ff ffbe 	bl	8006456 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80064da:	2300      	movs	r3, #0
 80064dc:	4acc      	ldr	r2, [pc, #816]	@ (8006810 <OTM8009A_Init+0x3a0>)
 80064de:	4628      	mov	r0, r5
 80064e0:	4619      	mov	r1, r3
 80064e2:	f000 fb6b 	bl	8006bbc <otm8009a_write_reg>
 80064e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80064e8:	2300      	movs	r3, #0
 80064ea:	4aca      	ldr	r2, [pc, #808]	@ (8006814 <OTM8009A_Init+0x3a4>)
 80064ec:	21c4      	movs	r1, #196	@ 0xc4
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 fb64 	bl	8006bbc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80064f4:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80064f6:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80064f8:	4638      	mov	r0, r7
 80064fa:	f7ff ffac 	bl	8006456 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80064fe:	2300      	movs	r3, #0
 8006500:	4ac5      	ldr	r2, [pc, #788]	@ (8006818 <OTM8009A_Init+0x3a8>)
 8006502:	4628      	mov	r0, r5
 8006504:	4619      	mov	r1, r3
 8006506:	f000 fb59 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800650a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800650c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800650e:	4ac3      	ldr	r2, [pc, #780]	@ (800681c <OTM8009A_Init+0x3ac>)
 8006510:	21c5      	movs	r1, #197	@ 0xc5
 8006512:	4628      	mov	r0, r5
 8006514:	f000 fb52 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8006518:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800651a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800651c:	4ac0      	ldr	r2, [pc, #768]	@ (8006820 <OTM8009A_Init+0x3b0>)
 800651e:	4619      	mov	r1, r3
 8006520:	4628      	mov	r0, r5
 8006522:	f000 fb4b 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006526:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8006528:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800652a:	4abe      	ldr	r2, [pc, #760]	@ (8006824 <OTM8009A_Init+0x3b4>)
 800652c:	21c5      	movs	r1, #197	@ 0xc5
 800652e:	4628      	mov	r0, r5
 8006530:	f000 fb44 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006534:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006536:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006538:	4abb      	ldr	r2, [pc, #748]	@ (8006828 <OTM8009A_Init+0x3b8>)
 800653a:	4619      	mov	r1, r3
 800653c:	4628      	mov	r0, r5
 800653e:	f000 fb3d 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006542:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006544:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006546:	4ab9      	ldr	r2, [pc, #740]	@ (800682c <OTM8009A_Init+0x3bc>)
 8006548:	21c0      	movs	r1, #192	@ 0xc0
 800654a:	4628      	mov	r0, r5
 800654c:	f000 fb36 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006550:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006552:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006554:	4aa9      	ldr	r2, [pc, #676]	@ (80067fc <OTM8009A_Init+0x38c>)
 8006556:	4619      	mov	r1, r3
 8006558:	4628      	mov	r0, r5
 800655a:	f000 fb2f 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800655e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006560:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8006562:	4ab3      	ldr	r2, [pc, #716]	@ (8006830 <OTM8009A_Init+0x3c0>)
 8006564:	21d9      	movs	r1, #217	@ 0xd9
 8006566:	4628      	mov	r0, r5
 8006568:	f000 fb28 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800656c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800656e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006570:	4ab0      	ldr	r2, [pc, #704]	@ (8006834 <OTM8009A_Init+0x3c4>)
 8006572:	4619      	mov	r1, r3
 8006574:	4628      	mov	r0, r5
 8006576:	f000 fb21 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800657a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800657c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800657e:	4aae      	ldr	r2, [pc, #696]	@ (8006838 <OTM8009A_Init+0x3c8>)
 8006580:	21c1      	movs	r1, #193	@ 0xc1
 8006582:	4628      	mov	r0, r5
 8006584:	f000 fb1a 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006588:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800658a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800658c:	4aab      	ldr	r2, [pc, #684]	@ (800683c <OTM8009A_Init+0x3cc>)
 800658e:	4619      	mov	r1, r3
 8006590:	4628      	mov	r0, r5
 8006592:	f000 fb13 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006596:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006598:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800659a:	4aa9      	ldr	r2, [pc, #676]	@ (8006840 <OTM8009A_Init+0x3d0>)
 800659c:	21c5      	movs	r1, #197	@ 0xc5
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 fb0c 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80065a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80065a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80065a8:	4aa6      	ldr	r2, [pc, #664]	@ (8006844 <OTM8009A_Init+0x3d4>)
 80065aa:	4619      	mov	r1, r3
 80065ac:	4628      	mov	r0, r5
 80065ae:	f000 fb05 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80065b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80065b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80065b6:	4a9b      	ldr	r2, [pc, #620]	@ (8006824 <OTM8009A_Init+0x3b4>)
 80065b8:	21c5      	movs	r1, #197	@ 0xc5
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 fafe 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80065c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065c4:	4a8d      	ldr	r2, [pc, #564]	@ (80067fc <OTM8009A_Init+0x38c>)
 80065c6:	4619      	mov	r1, r3
 80065c8:	4628      	mov	r0, r5
 80065ca:	f000 faf7 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80065ce:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80065d2:	4a9d      	ldr	r2, [pc, #628]	@ (8006848 <OTM8009A_Init+0x3d8>)
 80065d4:	21d8      	movs	r1, #216	@ 0xd8
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 faf0 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80065dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80065de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80065e0:	4a9a      	ldr	r2, [pc, #616]	@ (800684c <OTM8009A_Init+0x3dc>)
 80065e2:	4619      	mov	r1, r3
 80065e4:	4628      	mov	r0, r5
 80065e6:	f000 fae9 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80065ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80065ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80065ee:	4a98      	ldr	r2, [pc, #608]	@ (8006850 <OTM8009A_Init+0x3e0>)
 80065f0:	21c5      	movs	r1, #197	@ 0xc5
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 fae2 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80065f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80065fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80065fc:	4a95      	ldr	r2, [pc, #596]	@ (8006854 <OTM8009A_Init+0x3e4>)
 80065fe:	4619      	mov	r1, r3
 8006600:	4628      	mov	r0, r5
 8006602:	f000 fadb 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006606:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8006608:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800660a:	4a93      	ldr	r2, [pc, #588]	@ (8006858 <OTM8009A_Init+0x3e8>)
 800660c:	21c0      	movs	r1, #192	@ 0xc0
 800660e:	4628      	mov	r0, r5
 8006610:	f000 fad4 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006614:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006616:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006618:	4a90      	ldr	r2, [pc, #576]	@ (800685c <OTM8009A_Init+0x3ec>)
 800661a:	4619      	mov	r1, r3
 800661c:	4628      	mov	r0, r5
 800661e:	f000 facd 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006622:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006624:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006626:	4a8e      	ldr	r2, [pc, #568]	@ (8006860 <OTM8009A_Init+0x3f0>)
 8006628:	21c5      	movs	r1, #197	@ 0xc5
 800662a:	4628      	mov	r0, r5
 800662c:	f000 fac6 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006630:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006632:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006634:	4a8b      	ldr	r2, [pc, #556]	@ (8006864 <OTM8009A_Init+0x3f4>)
 8006636:	4619      	mov	r1, r3
 8006638:	4628      	mov	r0, r5
 800663a:	f000 fabf 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800663e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006640:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006642:	4a89      	ldr	r2, [pc, #548]	@ (8006868 <OTM8009A_Init+0x3f8>)
 8006644:	21c4      	movs	r1, #196	@ 0xc4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 fab8 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800664c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800664e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006650:	4a78      	ldr	r2, [pc, #480]	@ (8006834 <OTM8009A_Init+0x3c4>)
 8006652:	4619      	mov	r1, r3
 8006654:	4628      	mov	r0, r5
 8006656:	f000 fab1 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800665a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800665c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800665e:	4a83      	ldr	r2, [pc, #524]	@ (800686c <OTM8009A_Init+0x3fc>)
 8006660:	21c1      	movs	r1, #193	@ 0xc1
 8006662:	4628      	mov	r0, r5
 8006664:	f000 faaa 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006668:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800666a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800666c:	4a80      	ldr	r2, [pc, #512]	@ (8006870 <OTM8009A_Init+0x400>)
 800666e:	4619      	mov	r1, r3
 8006670:	4628      	mov	r0, r5
 8006672:	f000 faa3 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006676:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006678:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800667a:	4a7e      	ldr	r2, [pc, #504]	@ (8006874 <OTM8009A_Init+0x404>)
 800667c:	21b3      	movs	r1, #179	@ 0xb3
 800667e:	4628      	mov	r0, r5
 8006680:	f000 fa9c 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006684:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006686:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006688:	4a5e      	ldr	r2, [pc, #376]	@ (8006804 <OTM8009A_Init+0x394>)
 800668a:	4619      	mov	r1, r3
 800668c:	4628      	mov	r0, r5
 800668e:	f000 fa95 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006692:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006694:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006696:	4a78      	ldr	r2, [pc, #480]	@ (8006878 <OTM8009A_Init+0x408>)
 8006698:	21ce      	movs	r1, #206	@ 0xce
 800669a:	4628      	mov	r0, r5
 800669c:	f000 fa8e 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80066a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80066a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80066a4:	4a75      	ldr	r2, [pc, #468]	@ (800687c <OTM8009A_Init+0x40c>)
 80066a6:	4619      	mov	r1, r3
 80066a8:	4628      	mov	r0, r5
 80066aa:	f000 fa87 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80066ae:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80066b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80066b2:	4a73      	ldr	r2, [pc, #460]	@ (8006880 <OTM8009A_Init+0x410>)
 80066b4:	21ce      	movs	r1, #206	@ 0xce
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 fa80 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80066bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80066be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80066c0:	4a70      	ldr	r2, [pc, #448]	@ (8006884 <OTM8009A_Init+0x414>)
 80066c2:	4619      	mov	r1, r3
 80066c4:	4628      	mov	r0, r5
 80066c6:	f000 fa79 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80066ca:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80066cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80066ce:	4a6e      	ldr	r2, [pc, #440]	@ (8006888 <OTM8009A_Init+0x418>)
 80066d0:	21ce      	movs	r1, #206	@ 0xce
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 fa72 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80066d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80066da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80066dc:	4a6b      	ldr	r2, [pc, #428]	@ (800688c <OTM8009A_Init+0x41c>)
 80066de:	4619      	mov	r1, r3
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 fa6b 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80066e6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80066e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80066ea:	4a69      	ldr	r2, [pc, #420]	@ (8006890 <OTM8009A_Init+0x420>)
 80066ec:	21cf      	movs	r1, #207	@ 0xcf
 80066ee:	4628      	mov	r0, r5
 80066f0:	f000 fa64 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80066f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80066f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80066f8:	4a66      	ldr	r2, [pc, #408]	@ (8006894 <OTM8009A_Init+0x424>)
 80066fa:	4619      	mov	r1, r3
 80066fc:	4628      	mov	r0, r5
 80066fe:	f000 fa5d 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006702:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006704:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006706:	4a64      	ldr	r2, [pc, #400]	@ (8006898 <OTM8009A_Init+0x428>)
 8006708:	21cf      	movs	r1, #207	@ 0xcf
 800670a:	4628      	mov	r0, r5
 800670c:	f000 fa56 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006710:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006712:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006714:	4a3b      	ldr	r2, [pc, #236]	@ (8006804 <OTM8009A_Init+0x394>)
 8006716:	4619      	mov	r1, r3
 8006718:	4628      	mov	r0, r5
 800671a:	f000 fa4f 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800671e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006720:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006722:	4a5e      	ldr	r2, [pc, #376]	@ (800689c <OTM8009A_Init+0x42c>)
 8006724:	21cb      	movs	r1, #203	@ 0xcb
 8006726:	4628      	mov	r0, r5
 8006728:	f000 fa48 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800672c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800672e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006730:	4a5b      	ldr	r2, [pc, #364]	@ (80068a0 <OTM8009A_Init+0x430>)
 8006732:	4619      	mov	r1, r3
 8006734:	4628      	mov	r0, r5
 8006736:	f000 fa41 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800673a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800673c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800673e:	4a59      	ldr	r2, [pc, #356]	@ (80068a4 <OTM8009A_Init+0x434>)
 8006740:	21cb      	movs	r1, #203	@ 0xcb
 8006742:	4628      	mov	r0, r5
 8006744:	f000 fa3a 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006748:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800674a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800674c:	4a4b      	ldr	r2, [pc, #300]	@ (800687c <OTM8009A_Init+0x40c>)
 800674e:	4619      	mov	r1, r3
 8006750:	4628      	mov	r0, r5
 8006752:	f000 fa33 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006756:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006758:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800675a:	4a53      	ldr	r2, [pc, #332]	@ (80068a8 <OTM8009A_Init+0x438>)
 800675c:	21cb      	movs	r1, #203	@ 0xcb
 800675e:	4628      	mov	r0, r5
 8006760:	f000 fa2c 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006764:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006766:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006768:	4a46      	ldr	r2, [pc, #280]	@ (8006884 <OTM8009A_Init+0x414>)
 800676a:	4619      	mov	r1, r3
 800676c:	4628      	mov	r0, r5
 800676e:	f000 fa25 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006772:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006774:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006776:	4a4d      	ldr	r2, [pc, #308]	@ (80068ac <OTM8009A_Init+0x43c>)
 8006778:	21cb      	movs	r1, #203	@ 0xcb
 800677a:	4628      	mov	r0, r5
 800677c:	f000 fa1e 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006780:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006782:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006784:	4a41      	ldr	r2, [pc, #260]	@ (800688c <OTM8009A_Init+0x41c>)
 8006786:	4619      	mov	r1, r3
 8006788:	4628      	mov	r0, r5
 800678a:	f000 fa17 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800678e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006790:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006792:	4a47      	ldr	r2, [pc, #284]	@ (80068b0 <OTM8009A_Init+0x440>)
 8006794:	21cb      	movs	r1, #203	@ 0xcb
 8006796:	4628      	mov	r0, r5
 8006798:	f000 fa10 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800679c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800679e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80067a0:	4a3c      	ldr	r2, [pc, #240]	@ (8006894 <OTM8009A_Init+0x424>)
 80067a2:	4619      	mov	r1, r3
 80067a4:	4628      	mov	r0, r5
 80067a6:	f000 fa09 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80067aa:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80067ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80067ae:	4a41      	ldr	r2, [pc, #260]	@ (80068b4 <OTM8009A_Init+0x444>)
 80067b0:	21cb      	movs	r1, #203	@ 0xcb
 80067b2:	4628      	mov	r0, r5
 80067b4:	f000 fa02 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80067b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80067ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80067bc:	4a3e      	ldr	r2, [pc, #248]	@ (80068b8 <OTM8009A_Init+0x448>)
 80067be:	4619      	mov	r1, r3
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 f9fb 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80067c6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80067c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80067ca:	4a3c      	ldr	r2, [pc, #240]	@ (80068bc <OTM8009A_Init+0x44c>)
 80067cc:	21cb      	movs	r1, #203	@ 0xcb
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 f9f4 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80067d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80067d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80067d8:	4a39      	ldr	r2, [pc, #228]	@ (80068c0 <OTM8009A_Init+0x450>)
 80067da:	4619      	mov	r1, r3
 80067dc:	4628      	mov	r0, r5
 80067de:	f000 f9ed 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80067e2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80067e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80067e6:	4a37      	ldr	r2, [pc, #220]	@ (80068c4 <OTM8009A_Init+0x454>)
 80067e8:	21cb      	movs	r1, #203	@ 0xcb
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 f9e6 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80067f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80067f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80067f4:	4a03      	ldr	r2, [pc, #12]	@ (8006804 <OTM8009A_Init+0x394>)
 80067f6:	4619      	mov	r1, r3
 80067f8:	4628      	mov	r0, r5
 80067fa:	e065      	b.n	80068c8 <OTM8009A_Init+0x458>
 80067fc:	08028ef9 	.word	0x08028ef9
 8006800:	08028ef5 	.word	0x08028ef5
 8006804:	08028efa 	.word	0x08028efa
 8006808:	08028ef3 	.word	0x08028ef3
 800680c:	08028efb 	.word	0x08028efb
 8006810:	08028efc 	.word	0x08028efc
 8006814:	08028efd 	.word	0x08028efd
 8006818:	08028efe 	.word	0x08028efe
 800681c:	08028eff 	.word	0x08028eff
 8006820:	08028f00 	.word	0x08028f00
 8006824:	08028f01 	.word	0x08028f01
 8006828:	08028f02 	.word	0x08028f02
 800682c:	08028f03 	.word	0x08028f03
 8006830:	08028f04 	.word	0x08028f04
 8006834:	08028f07 	.word	0x08028f07
 8006838:	08028f08 	.word	0x08028f08
 800683c:	08028f09 	.word	0x08028f09
 8006840:	08028f0a 	.word	0x08028f0a
 8006844:	08028f0b 	.word	0x08028f0b
 8006848:	08028ef1 	.word	0x08028ef1
 800684c:	08028f0c 	.word	0x08028f0c
 8006850:	08028f0d 	.word	0x08028f0d
 8006854:	08028f0e 	.word	0x08028f0e
 8006858:	08028f0f 	.word	0x08028f0f
 800685c:	08028f10 	.word	0x08028f10
 8006860:	08028f11 	.word	0x08028f11
 8006864:	08028f05 	.word	0x08028f05
 8006868:	08028f12 	.word	0x08028f12
 800686c:	08028f13 	.word	0x08028f13
 8006870:	08028f14 	.word	0x08028f14
 8006874:	08028eef 	.word	0x08028eef
 8006878:	08028ee9 	.word	0x08028ee9
 800687c:	08028f15 	.word	0x08028f15
 8006880:	08028edb 	.word	0x08028edb
 8006884:	08028f16 	.word	0x08028f16
 8006888:	08028ecd 	.word	0x08028ecd
 800688c:	08028f17 	.word	0x08028f17
 8006890:	08028ec3 	.word	0x08028ec3
 8006894:	08028f18 	.word	0x08028f18
 8006898:	08028f25 	.word	0x08028f25
 800689c:	08028eb9 	.word	0x08028eb9
 80068a0:	08028f19 	.word	0x08028f19
 80068a4:	08028eaa 	.word	0x08028eaa
 80068a8:	08028e9b 	.word	0x08028e9b
 80068ac:	08028e91 	.word	0x08028e91
 80068b0:	08028e82 	.word	0x08028e82
 80068b4:	08028e73 	.word	0x08028e73
 80068b8:	08028f1a 	.word	0x08028f1a
 80068bc:	08028e69 	.word	0x08028e69
 80068c0:	08028f1b 	.word	0x08028f1b
 80068c4:	08028e5f 	.word	0x08028e5f
 80068c8:	f000 f978 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80068cc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80068ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80068d0:	4a8e      	ldr	r2, [pc, #568]	@ (8006b0c <OTM8009A_Init+0x69c>)
 80068d2:	21cc      	movs	r1, #204	@ 0xcc
 80068d4:	4628      	mov	r0, r5
 80068d6:	f000 f971 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80068da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80068dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80068de:	4a8c      	ldr	r2, [pc, #560]	@ (8006b10 <OTM8009A_Init+0x6a0>)
 80068e0:	4619      	mov	r1, r3
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 f96a 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80068e8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80068ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80068ec:	4a89      	ldr	r2, [pc, #548]	@ (8006b14 <OTM8009A_Init+0x6a4>)
 80068ee:	21cc      	movs	r1, #204	@ 0xcc
 80068f0:	4628      	mov	r0, r5
 80068f2:	f000 f963 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80068f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80068f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80068fa:	4a87      	ldr	r2, [pc, #540]	@ (8006b18 <OTM8009A_Init+0x6a8>)
 80068fc:	4619      	mov	r1, r3
 80068fe:	4628      	mov	r0, r5
 8006900:	f000 f95c 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006904:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006906:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006908:	4a84      	ldr	r2, [pc, #528]	@ (8006b1c <OTM8009A_Init+0x6ac>)
 800690a:	21cc      	movs	r1, #204	@ 0xcc
 800690c:	4628      	mov	r0, r5
 800690e:	f000 f955 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006912:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006914:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006916:	4a82      	ldr	r2, [pc, #520]	@ (8006b20 <OTM8009A_Init+0x6b0>)
 8006918:	4619      	mov	r1, r3
 800691a:	4628      	mov	r0, r5
 800691c:	f000 f94e 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006920:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006922:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006924:	4a7f      	ldr	r2, [pc, #508]	@ (8006b24 <OTM8009A_Init+0x6b4>)
 8006926:	21cc      	movs	r1, #204	@ 0xcc
 8006928:	4628      	mov	r0, r5
 800692a:	f000 f947 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800692e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006930:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006932:	4a7d      	ldr	r2, [pc, #500]	@ (8006b28 <OTM8009A_Init+0x6b8>)
 8006934:	4619      	mov	r1, r3
 8006936:	4628      	mov	r0, r5
 8006938:	f000 f940 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800693c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800693e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006940:	4a7a      	ldr	r2, [pc, #488]	@ (8006b2c <OTM8009A_Init+0x6bc>)
 8006942:	21cc      	movs	r1, #204	@ 0xcc
 8006944:	4628      	mov	r0, r5
 8006946:	f000 f939 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800694a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800694c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800694e:	4a78      	ldr	r2, [pc, #480]	@ (8006b30 <OTM8009A_Init+0x6c0>)
 8006950:	4619      	mov	r1, r3
 8006952:	4628      	mov	r0, r5
 8006954:	f000 f932 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006958:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800695a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800695c:	4a75      	ldr	r2, [pc, #468]	@ (8006b34 <OTM8009A_Init+0x6c4>)
 800695e:	21cc      	movs	r1, #204	@ 0xcc
 8006960:	4628      	mov	r0, r5
 8006962:	f000 f92b 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006966:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006968:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800696a:	4a73      	ldr	r2, [pc, #460]	@ (8006b38 <OTM8009A_Init+0x6c8>)
 800696c:	4619      	mov	r1, r3
 800696e:	4628      	mov	r0, r5
 8006970:	f000 f924 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006974:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006976:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006978:	4a70      	ldr	r2, [pc, #448]	@ (8006b3c <OTM8009A_Init+0x6cc>)
 800697a:	21c5      	movs	r1, #197	@ 0xc5
 800697c:	4628      	mov	r0, r5
 800697e:	f000 f91d 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006982:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006984:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006986:	4a6e      	ldr	r2, [pc, #440]	@ (8006b40 <OTM8009A_Init+0x6d0>)
 8006988:	4619      	mov	r1, r3
 800698a:	4628      	mov	r0, r5
 800698c:	f000 f916 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006990:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006992:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006994:	4a6b      	ldr	r2, [pc, #428]	@ (8006b44 <OTM8009A_Init+0x6d4>)
 8006996:	21f5      	movs	r1, #245	@ 0xf5
 8006998:	4628      	mov	r0, r5
 800699a:	f000 f90f 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800699e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80069a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80069a2:	4a69      	ldr	r2, [pc, #420]	@ (8006b48 <OTM8009A_Init+0x6d8>)
 80069a4:	4619      	mov	r1, r3
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 f908 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80069ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80069ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80069b0:	4a66      	ldr	r2, [pc, #408]	@ (8006b4c <OTM8009A_Init+0x6dc>)
 80069b2:	21c6      	movs	r1, #198	@ 0xc6
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 f901 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80069ba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80069bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80069be:	4a64      	ldr	r2, [pc, #400]	@ (8006b50 <OTM8009A_Init+0x6e0>)
 80069c0:	4619      	mov	r1, r3
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 f8fa 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80069c8:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80069ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80069cc:	4a61      	ldr	r2, [pc, #388]	@ (8006b54 <OTM8009A_Init+0x6e4>)
 80069ce:	21ff      	movs	r1, #255	@ 0xff
 80069d0:	4628      	mov	r0, r5
 80069d2:	f000 f8f3 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80069d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80069d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80069da:	4a5d      	ldr	r2, [pc, #372]	@ (8006b50 <OTM8009A_Init+0x6e0>)
 80069dc:	4619      	mov	r1, r3
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 f8ec 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80069e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80069e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80069e8:	4a59      	ldr	r2, [pc, #356]	@ (8006b50 <OTM8009A_Init+0x6e0>)
 80069ea:	4619      	mov	r1, r3
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 f8e5 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80069f2:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80069f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80069f6:	4a58      	ldr	r2, [pc, #352]	@ (8006b58 <OTM8009A_Init+0x6e8>)
 80069f8:	21e1      	movs	r1, #225	@ 0xe1
 80069fa:	4628      	mov	r0, r5
 80069fc:	f000 f8de 	bl	8006bbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006a00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006a02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006a04:	4a52      	ldr	r2, [pc, #328]	@ (8006b50 <OTM8009A_Init+0x6e0>)
 8006a06:	4619      	mov	r1, r3
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f000 f8d7 	bl	8006bbc <otm8009a_write_reg>
 8006a0e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8006a10:	2310      	movs	r3, #16
 8006a12:	4a52      	ldr	r2, [pc, #328]	@ (8006b5c <OTM8009A_Init+0x6ec>)
 8006a14:	21e2      	movs	r1, #226	@ 0xe2
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 f8d0 	bl	8006bbc <otm8009a_write_reg>
 8006a1c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8006a1e:	2300      	movs	r3, #0
 8006a20:	4a4f      	ldr	r2, [pc, #316]	@ (8006b60 <OTM8009A_Init+0x6f0>)
 8006a22:	2111      	movs	r1, #17
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 f8c9 	bl	8006bbc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8006a2a:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8006a2c:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8006a2e:	4638      	mov	r0, r7
 8006a30:	f7ff fd11 	bl	8006456 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8006a34:	4f4b      	ldr	r7, [pc, #300]	@ (8006b64 <OTM8009A_Init+0x6f4>)
 8006a36:	2e00      	cmp	r6, #0
 8006a38:	d061      	beq.n	8006afe <OTM8009A_Init+0x68e>
 8006a3a:	2e02      	cmp	r6, #2
 8006a3c:	d107      	bne.n	8006a4e <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4a49      	ldr	r2, [pc, #292]	@ (8006b68 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8006a42:	213a      	movs	r1, #58	@ 0x3a
 8006a44:	4628      	mov	r0, r5
 8006a46:	f000 f8b9 	bl	8006bbc <otm8009a_write_reg>
 8006a4a:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8006a4c:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8006a4e:	f1b8 0f01 	cmp.w	r8, #1
 8006a52:	d157      	bne.n	8006b04 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006a54:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006a56:	f10d 0207 	add.w	r2, sp, #7
 8006a5a:	2136      	movs	r1, #54	@ 0x36
 8006a5c:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006a5e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006a62:	2300      	movs	r3, #0
 8006a64:	f000 f8aa 	bl	8006bbc <otm8009a_write_reg>
 8006a68:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006a6a:	2304      	movs	r3, #4
 8006a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b6c <OTM8009A_Init+0x6fc>)
 8006a6e:	212a      	movs	r1, #42	@ 0x2a
 8006a70:	4628      	mov	r0, r5
 8006a72:	f000 f8a3 	bl	8006bbc <otm8009a_write_reg>
 8006a76:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006a78:	2304      	movs	r3, #4
 8006a7a:	4a3d      	ldr	r2, [pc, #244]	@ (8006b70 <OTM8009A_Init+0x700>)
 8006a7c:	212b      	movs	r1, #43	@ 0x2b
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 f89c 	bl	8006bbc <otm8009a_write_reg>
 8006a84:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006a86:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8006a8a:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4a39      	ldr	r2, [pc, #228]	@ (8006b74 <OTM8009A_Init+0x704>)
 8006a90:	2151      	movs	r1, #81	@ 0x51
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f892 	bl	8006bbc <otm8009a_write_reg>
 8006a98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8006a9a:	4633      	mov	r3, r6
 8006a9c:	4a36      	ldr	r2, [pc, #216]	@ (8006b78 <OTM8009A_Init+0x708>)
 8006a9e:	2153      	movs	r1, #83	@ 0x53
 8006aa0:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8006aa2:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8006aa4:	f000 f88a 	bl	8006bbc <otm8009a_write_reg>
 8006aa8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8006aaa:	4633      	mov	r3, r6
 8006aac:	4a33      	ldr	r2, [pc, #204]	@ (8006b7c <OTM8009A_Init+0x70c>)
 8006aae:	2155      	movs	r1, #85	@ 0x55
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	f000 f883 	bl	8006bbc <otm8009a_write_reg>
 8006ab6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006ab8:	4633      	mov	r3, r6
 8006aba:	4a31      	ldr	r2, [pc, #196]	@ (8006b80 <OTM8009A_Init+0x710>)
 8006abc:	215e      	movs	r1, #94	@ 0x5e
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f000 f87c 	bl	8006bbc <otm8009a_write_reg>
 8006ac4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006ac6:	4633      	mov	r3, r6
 8006ac8:	4a2e      	ldr	r2, [pc, #184]	@ (8006b84 <OTM8009A_Init+0x714>)
 8006aca:	2129      	movs	r1, #41	@ 0x29
 8006acc:	4628      	mov	r0, r5
 8006ace:	f000 f875 	bl	8006bbc <otm8009a_write_reg>
 8006ad2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006ad4:	4633      	mov	r3, r6
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b50 <OTM8009A_Init+0x6e0>)
 8006ada:	4628      	mov	r0, r5
 8006adc:	f000 f86e 	bl	8006bbc <otm8009a_write_reg>
 8006ae0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8006ae2:	4633      	mov	r3, r6
 8006ae4:	4a28      	ldr	r2, [pc, #160]	@ (8006b88 <OTM8009A_Init+0x718>)
 8006ae6:	212c      	movs	r1, #44	@ 0x2c
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 f867 	bl	8006bbc <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8006aee:	42c4      	cmn	r4, r0
}
 8006af0:	bf14      	ite	ne
 8006af2:	f04f 30ff 	movne.w	r0, #4294967295
 8006af6:	4630      	moveq	r0, r6
 8006af8:	b002      	add	sp, #8
 8006afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8006afe:	4633      	mov	r3, r6
 8006b00:	4a22      	ldr	r2, [pc, #136]	@ (8006b8c <OTM8009A_Init+0x71c>)
 8006b02:	e79e      	b.n	8006a42 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8006b04:	2300      	movs	r3, #0
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	e7bf      	b.n	8006a8a <OTM8009A_Init+0x61a>
 8006b0a:	bf00      	nop
 8006b0c:	08028e55 	.word	0x08028e55
 8006b10:	08028f19 	.word	0x08028f19
 8006b14:	08028e46 	.word	0x08028e46
 8006b18:	08028f15 	.word	0x08028f15
 8006b1c:	08028e37 	.word	0x08028e37
 8006b20:	08028f16 	.word	0x08028f16
 8006b24:	08028e2d 	.word	0x08028e2d
 8006b28:	08028f17 	.word	0x08028f17
 8006b2c:	08028e1e 	.word	0x08028e1e
 8006b30:	08028f18 	.word	0x08028f18
 8006b34:	08028e0f 	.word	0x08028e0f
 8006b38:	08028f05 	.word	0x08028f05
 8006b3c:	08028f26 	.word	0x08028f26
 8006b40:	08028f27 	.word	0x08028f27
 8006b44:	08028f28 	.word	0x08028f28
 8006b48:	08028f29 	.word	0x08028f29
 8006b4c:	08028f2a 	.word	0x08028f2a
 8006b50:	08028ef9 	.word	0x08028ef9
 8006b54:	08028e0c 	.word	0x08028e0c
 8006b58:	08028dfc 	.word	0x08028dfc
 8006b5c:	08028dec 	.word	0x08028dec
 8006b60:	08028f1c 	.word	0x08028f1c
 8006b64:	2400ee30 	.word	0x2400ee30
 8006b68:	08028f1d 	.word	0x08028f1d
 8006b6c:	08028f2f 	.word	0x08028f2f
 8006b70:	08028f2b 	.word	0x08028f2b
 8006b74:	08028f1f 	.word	0x08028f1f
 8006b78:	08028f20 	.word	0x08028f20
 8006b7c:	08028f21 	.word	0x08028f21
 8006b80:	08028f22 	.word	0x08028f22
 8006b84:	08028f23 	.word	0x08028f23
 8006b88:	08028f24 	.word	0x08028f24
 8006b8c:	08028f1e 	.word	0x08028f1e

08006b90 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8006b90:	b160      	cbz	r0, 8006bac <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006b92:	684b      	ldr	r3, [r1, #4]
 8006b94:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006b96:	688b      	ldr	r3, [r1, #8]
 8006b98:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8006b9a:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8006b9c:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8006b9e:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8006ba0:	4b04      	ldr	r3, [pc, #16]	@ (8006bb4 <OTM8009A_RegisterBusIO+0x24>)
 8006ba2:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8006ba4:	4b04      	ldr	r3, [pc, #16]	@ (8006bb8 <OTM8009A_RegisterBusIO+0x28>)
 8006ba6:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8006ba8:	2000      	movs	r0, #0
 8006baa:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	0800643b 	.word	0x0800643b
 8006bb8:	08006449 	.word	0x08006449

08006bbc <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8006bbc:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006bbe:	6804      	ldr	r4, [r0, #0]
 8006bc0:	6880      	ldr	r0, [r0, #8]
 8006bc2:	46a4      	mov	ip, r4
}
 8006bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006bc8:	4760      	bx	ip
	...

08006bcc <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8006bcc:	4a10      	ldr	r2, [pc, #64]	@ (8006c10 <BSP_I2C4_DeInit+0x44>)
{
 8006bce:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8006bd0:	6813      	ldr	r3, [r2, #0]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8006bd6:	b10b      	cbz	r3, 8006bdc <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8006bd8:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8006bda:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8006bdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006be0:	480c      	ldr	r0, [pc, #48]	@ (8006c14 <BSP_I2C4_DeInit+0x48>)
 8006be2:	f002 fdc9 	bl	8009778 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8006be6:	480b      	ldr	r0, [pc, #44]	@ (8006c14 <BSP_I2C4_DeInit+0x48>)
 8006be8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006bec:	f002 fdc4 	bl	8009778 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8006bf0:	4a09      	ldr	r2, [pc, #36]	@ (8006c18 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006bf2:	480a      	ldr	r0, [pc, #40]	@ (8006c1c <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8006bf4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8006bf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bfc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006c00:	f003 f80a 	bl	8009c18 <HAL_I2C_DeInit>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d0e7      	beq.n	8006bd8 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8006c08:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006c0c:	e7e5      	b.n	8006bda <BSP_I2C4_DeInit+0xe>
 8006c0e:	bf00      	nop
 8006c10:	2400f894 	.word	0x2400f894
 8006c14:	58020c00 	.word	0x58020c00
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	2400ee3c 	.word	0x2400ee3c

08006c20 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006c20:	2300      	movs	r3, #0
 8006c22:	2201      	movs	r2, #1
{
 8006c24:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8006c26:	6041      	str	r1, [r0, #4]
{
 8006c28:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006c2a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006c2c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8006c30:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006c34:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8006c38:	f002 ff98 	bl	8009b6c <HAL_I2C_Init>
 8006c3c:	4601      	mov	r1, r0
 8006c3e:	b108      	cbz	r0, 8006c44 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8006c40:	2001      	movs	r0, #1
}
 8006c42:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8006c44:	4620      	mov	r0, r4
 8006c46:	f003 f9be 	bl	8009fc6 <HAL_I2CEx_ConfigAnalogFilter>
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d1f7      	bne.n	8006c40 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8006c50:	4620      	mov	r0, r4
 8006c52:	f003 f9de 	bl	800a012 <HAL_I2CEx_ConfigDigitalFilter>
 8006c56:	3800      	subs	r0, #0
 8006c58:	bf18      	it	ne
 8006c5a:	2001      	movne	r0, #1
 8006c5c:	e7f1      	b.n	8006c42 <MX_I2C4_Init+0x22>
	...

08006c60 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8006c60:	4ba1      	ldr	r3, [pc, #644]	@ (8006ee8 <BSP_I2C4_Init+0x288>)
 8006c62:	48a2      	ldr	r0, [pc, #648]	@ (8006eec <BSP_I2C4_Init+0x28c>)
{
 8006c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8006c68:	6003      	str	r3, [r0, #0]
{
 8006c6a:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 8006c6c:	4ba0      	ldr	r3, [pc, #640]	@ (8006ef0 <BSP_I2C4_Init+0x290>)
 8006c6e:	681c      	ldr	r4, [r3, #0]
 8006c70:	b11c      	cbz	r4, 8006c7a <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8006c72:	2000      	movs	r0, #0
}
 8006c74:	b013      	add	sp, #76	@ 0x4c
 8006c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8006c7e:	f003 f99d 	bl	8009fbc <HAL_I2C_GetState>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d1f5      	bne.n	8006c72 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006c86:	4d9b      	ldr	r5, [pc, #620]	@ (8006ef4 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006c88:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8006c8c:	2702      	movs	r7, #2
 8006c8e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006c90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006c94:	a90d      	add	r1, sp, #52	@ 0x34
 8006c96:	4898      	ldr	r0, [pc, #608]	@ (8006ef8 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006c98:	f043 0308 	orr.w	r3, r3, #8
 8006c9c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006ca0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006caa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006cac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006cb0:	f043 0308 	orr.w	r3, r3, #8
 8006cb4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006cb8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006cbc:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8006cca:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006cce:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006cd2:	f002 fc69 	bl	80095a8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8006cd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006cda:	a90d      	add	r1, sp, #52	@ 0x34
 8006cdc:	4886      	ldr	r0, [pc, #536]	@ (8006ef8 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8006cde:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006ce0:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006ce4:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006ce8:	f002 fc5e 	bl	80095a8 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8006cec:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8006cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf4:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8006cf8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8006cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d00:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8006d04:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8006d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d0c:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8006d10:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8006d14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d18:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006d1c:	f005 fc48 	bl	800c5b0 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d06f      	beq.n	8006e04 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006d24:	4b75      	ldr	r3, [pc, #468]	@ (8006efc <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 8006d26:	4622      	mov	r2, r4
 8006d28:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8006d2a:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006d2e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006d32:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 8006f04 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006d36:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8006d3a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8006d3e:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8006d42:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006d44:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006d48:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8006d4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8006d50:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8006d54:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006d56:	4b6a      	ldr	r3, [pc, #424]	@ (8006f00 <BSP_I2C4_Init+0x2a0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
{
 8006d5a:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006d5c:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8006d60:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8006d64:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8006d68:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8006d6c:	d35d      	bcc.n	8006e2a <BSP_I2C4_Init+0x1ca>
 8006d6e:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006d70:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006d72:	9d00      	ldr	r5, [sp, #0]
 8006d74:	42bd      	cmp	r5, r7
 8006d76:	d852      	bhi.n	8006e1e <BSP_I2C4_Init+0x1be>
 8006d78:	42be      	cmp	r6, r7
 8006d7a:	d350      	bcc.n	8006e1e <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8006d7c:	4591      	cmp	r9, r2
 8006d7e:	d04e      	beq.n	8006e1e <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006d80:	2514      	movs	r5, #20
 8006d82:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8006d86:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8006d88:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006d8a:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006d8e:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006d90:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8006d94:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006d98:	d93e      	bls.n	8006e18 <BSP_I2C4_Init+0x1b8>
 8006d9a:	4a59      	ldr	r2, [pc, #356]	@ (8006f00 <BSP_I2C4_Init+0x2a0>)
 8006d9c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006d9e:	4b58      	ldr	r3, [pc, #352]	@ (8006f00 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006da0:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8006da4:	f04f 32ff 	mov.w	r2, #4294967295
 8006da8:	4956      	ldr	r1, [pc, #344]	@ (8006f04 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006daa:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006dac:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006dae:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006db0:	0043      	lsls	r3, r0, #1
 8006db2:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8006db6:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8006dba:	f10b 0b01 	add.w	fp, fp, #1
 8006dbe:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 8006dc2:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8006dc6:	9508      	str	r5, [sp, #32]
 8006dc8:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006dca:	9b05      	ldr	r3, [sp, #20]
 8006dcc:	429f      	cmp	r7, r3
 8006dce:	d138      	bne.n	8006e42 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8006dd0:	9b01      	ldr	r3, [sp, #4]
 8006dd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dd4:	d816      	bhi.n	8006e04 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006dd6:	2114      	movs	r1, #20
 8006dd8:	9a01      	ldr	r2, [sp, #4]
 8006dda:	4b4a      	ldr	r3, [pc, #296]	@ (8006f04 <BSP_I2C4_Init+0x2a4>)
 8006ddc:	434a      	muls	r2, r1
 8006dde:	1899      	adds	r1, r3, r2
 8006de0:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8006de2:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006de4:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8006de8:	684b      	ldr	r3, [r1, #4]
 8006dea:	051b      	lsls	r3, r3, #20
 8006dec:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006df0:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8006df2:	688b      	ldr	r3, [r1, #8]
 8006df4:	041b      	lsls	r3, r3, #16
 8006df6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006dfa:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8006dfc:	68cb      	ldr	r3, [r1, #12]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006e02:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006e04:	4621      	mov	r1, r4
 8006e06:	4839      	ldr	r0, [pc, #228]	@ (8006eec <BSP_I2C4_Init+0x28c>)
 8006e08:	f7ff ff0a 	bl	8006c20 <MX_I2C4_Init>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f43f af30 	beq.w	8006c72 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8006e12:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006e16:	e72d      	b.n	8006c74 <BSP_I2C4_Init+0x14>
 8006e18:	4691      	mov	r9, r2
 8006e1a:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006e1e:	f10e 0e01 	add.w	lr, lr, #1
 8006e22:	440f      	add	r7, r1
 8006e24:	f1be 0f10 	cmp.w	lr, #16
 8006e28:	d1a3      	bne.n	8006d72 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006e2a:	f1bc 0f10 	cmp.w	ip, #16
 8006e2e:	4488      	add	r8, r1
 8006e30:	d196      	bne.n	8006d60 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006e32:	3201      	adds	r2, #1
 8006e34:	4401      	add	r1, r0
 8006e36:	2a10      	cmp	r2, #16
 8006e38:	d18f      	bne.n	8006d5a <BSP_I2C4_Init+0xfa>
 8006e3a:	f1ba 0f00 	cmp.w	sl, #0
 8006e3e:	d1ac      	bne.n	8006d9a <BSP_I2C4_Init+0x13a>
 8006e40:	e7ad      	b.n	8006d9e <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006e42:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006e44:	f04f 0c00 	mov.w	ip, #0
 8006e48:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006e4a:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006e4e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8006e50:	441d      	add	r5, r3
 8006e52:	441e      	add	r6, r3
 8006e54:	9503      	str	r5, [sp, #12]
 8006e56:	ebab 0503 	sub.w	r5, fp, r3
 8006e5a:	9607      	str	r6, [sp, #28]
 8006e5c:	006d      	lsls	r5, r5, #1
 8006e5e:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006e60:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006e62:	f240 5214 	movw	r2, #1300	@ 0x514
 8006e66:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006e6a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006e6e:	4295      	cmp	r5, r2
 8006e70:	d92f      	bls.n	8006ed2 <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006e72:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006e76:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8006e7a:	d22a      	bcs.n	8006ed2 <BSP_I2C4_Init+0x272>
 8006e7c:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006e7e:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006e82:	f8dd 9000 	ldr.w	r9, [sp]
 8006e86:	442e      	add	r6, r5
 8006e88:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006e8c:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8006e90:	f240 4212 	movw	r2, #1042	@ 0x412
 8006e94:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8006e98:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006e9c:	4592      	cmp	sl, r2
 8006e9e:	d811      	bhi.n	8006ec4 <BSP_I2C4_Init+0x264>
 8006ea0:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8006ea4:	d30e      	bcc.n	8006ec4 <BSP_I2C4_Init+0x264>
 8006ea6:	4580      	cmp	r8, r0
 8006ea8:	d90c      	bls.n	8006ec4 <BSP_I2C4_Init+0x264>
              error = -error;
 8006eaa:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8006eae:	bf28      	it	cs
 8006eb0:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8006eb2:	9a02      	ldr	r2, [sp, #8]
 8006eb4:	4592      	cmp	sl, r2
 8006eb6:	d205      	bcs.n	8006ec4 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8006eb8:	9a04      	ldr	r2, [sp, #16]
 8006eba:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8006ebc:	9a06      	ldr	r2, [sp, #24]
 8006ebe:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8006ec2:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006ec4:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8006ec8:	4498      	add	r8, r3
 8006eca:	441e      	add	r6, r3
 8006ecc:	eba9 0903 	sub.w	r9, r9, r3
 8006ed0:	d1dc      	bne.n	8006e8c <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006ed2:	9a00      	ldr	r2, [sp, #0]
 8006ed4:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8006ed8:	441d      	add	r5, r3
 8006eda:	eba2 0203 	sub.w	r2, r2, r3
 8006ede:	9200      	str	r2, [sp, #0]
 8006ee0:	d1bf      	bne.n	8006e62 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006ee2:	3701      	adds	r7, #1
 8006ee4:	3114      	adds	r1, #20
 8006ee6:	e770      	b.n	8006dca <BSP_I2C4_Init+0x16a>
 8006ee8:	58001c00 	.word	0x58001c00
 8006eec:	2400ee3c 	.word	0x2400ee3c
 8006ef0:	2400f894 	.word	0x2400f894
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	58020c00 	.word	0x58020c00
 8006efc:	3b9aca00 	.word	0x3b9aca00
 8006f00:	2400ee90 	.word	0x2400ee90
 8006f04:	2400ee94 	.word	0x2400ee94

08006f08 <BSP_I2C4_WriteReg>:
{
 8006f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006f0a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8006f0e:	9200      	str	r2, [sp, #0]
 8006f10:	460a      	mov	r2, r1
 8006f12:	4601      	mov	r1, r0
 8006f14:	4808      	ldr	r0, [pc, #32]	@ (8006f38 <BSP_I2C4_WriteReg+0x30>)
 8006f16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f002 fe96 	bl	8009c4c <HAL_I2C_Mem_Write>
 8006f20:	b140      	cbz	r0, 8006f34 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006f22:	4805      	ldr	r0, [pc, #20]	@ (8006f38 <BSP_I2C4_WriteReg+0x30>)
 8006f24:	f003 f84d 	bl	8009fc2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006f28:	2804      	cmp	r0, #4
 8006f2a:	bf14      	ite	ne
 8006f2c:	f06f 0003 	mvnne.w	r0, #3
 8006f30:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8006f34:	b004      	add	sp, #16
 8006f36:	bd10      	pop	{r4, pc}
 8006f38:	2400ee3c 	.word	0x2400ee3c

08006f3c <BSP_I2C4_ReadReg>:
{
 8006f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006f3e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8006f42:	9200      	str	r2, [sp, #0]
 8006f44:	460a      	mov	r2, r1
 8006f46:	4601      	mov	r1, r0
 8006f48:	4808      	ldr	r0, [pc, #32]	@ (8006f6c <BSP_I2C4_ReadReg+0x30>)
 8006f4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f002 ff56 	bl	8009e00 <HAL_I2C_Mem_Read>
 8006f54:	b140      	cbz	r0, 8006f68 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006f56:	4805      	ldr	r0, [pc, #20]	@ (8006f6c <BSP_I2C4_ReadReg+0x30>)
 8006f58:	f003 f833 	bl	8009fc2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006f5c:	2804      	cmp	r0, #4
 8006f5e:	bf14      	ite	ne
 8006f60:	f06f 0003 	mvnne.w	r0, #3
 8006f64:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8006f68:	b004      	add	sp, #16
 8006f6a:	bd10      	pop	{r4, pc}
 8006f6c:	2400ee3c 	.word	0x2400ee3c

08006f70 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8006f70:	f000 bd08 	b.w	8007984 <HAL_GetTick>

08006f74 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8006f74:	4a09      	ldr	r2, [pc, #36]	@ (8006f9c <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006f76:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8006f7a:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8006f7c:	684a      	ldr	r2, [r1, #4]
 8006f7e:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8006f80:	2201      	movs	r2, #1
 8006f82:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8006f84:	688a      	ldr	r2, [r1, #8]
 8006f86:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8006f88:	680a      	ldr	r2, [r1, #0]
 8006f8a:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8006f92:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8006f94:	68ca      	ldr	r2, [r1, #12]
 8006f96:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8006f98:	f004 bc34 	b.w	800b804 <HAL_QSPI_Init>
 8006f9c:	52005000 	.word	0x52005000

08006fa0 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8006fa0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006fa2:	b988      	cbnz	r0, 8006fc8 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006fa4:	4c0a      	ldr	r4, [pc, #40]	@ (8006fd0 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8006fa6:	480b      	ldr	r0, [pc, #44]	@ (8006fd4 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006fa8:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006faa:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006fac:	b94b      	cbnz	r3, 8006fc2 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006fae:	f7ff f9bc 	bl	800632a <MT25TL01G_EnableMemoryMappedModeSTR>
 8006fb2:	b110      	cbz	r0, 8006fba <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006fb4:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8006fb8:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006fba:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8006fbc:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006fbe:	7023      	strb	r3, [r4, #0]
 8006fc0:	e7fa      	b.n	8006fb8 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006fc2:	f7ff f968 	bl	8006296 <MT25TL01G_EnableMemoryMappedModeDTR>
 8006fc6:	e7f4      	b.n	8006fb2 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8006fc8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006fcc:	e7f4      	b.n	8006fb8 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8006fce:	bf00      	nop
 8006fd0:	2400f898 	.word	0x2400f898
 8006fd4:	24000428 	.word	0x24000428

08006fd8 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	460c      	mov	r4, r1
 8006fdc:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006fde:	bb30      	cbnz	r0, 800702e <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8006fe0:	4d17      	ldr	r5, [pc, #92]	@ (8007040 <BSP_QSPI_ConfigFlash+0x68>)
 8006fe2:	782b      	ldrb	r3, [r5, #0]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d025      	beq.n	8007034 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006fe8:	fab2 f382 	clz	r3, r2
 8006fec:	4e15      	ldr	r6, [pc, #84]	@ (8007044 <BSP_QSPI_ConfigFlash+0x6c>)
 8006fee:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8006ff0:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8006ff6:	f004 fc05 	bl	800b804 <HAL_QSPI_Init>
 8006ffa:	b9f0      	cbnz	r0, 800703a <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8006ffc:	786b      	ldrb	r3, [r5, #1]
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d10f      	bne.n	8007022 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8007002:	2c03      	cmp	r4, #3
 8007004:	d105      	bne.n	8007012 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8007006:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8007008:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800700a:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800700c:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800700e:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8007010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8007012:	4630      	mov	r0, r6
 8007014:	f7ff f923 	bl	800625e <MT25TL01G_ExitQPIMode>
 8007018:	2800      	cmp	r0, #0
 800701a:	d0f4      	beq.n	8007006 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800701c:	f06f 0004 	mvn.w	r0, #4
 8007020:	e7f6      	b.n	8007010 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8007022:	2c03      	cmp	r4, #3
 8007024:	d1ef      	bne.n	8007006 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8007026:	4630      	mov	r0, r6
 8007028:	f7ff f8fd 	bl	8006226 <MT25TL01G_EnterQPIMode>
 800702c:	e7f4      	b.n	8007018 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 800702e:	f06f 0001 	mvn.w	r0, #1
 8007032:	e7ed      	b.n	8007010 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8007034:	f06f 0019 	mvn.w	r0, #25
 8007038:	e7ea      	b.n	8007010 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800703a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800703e:	e7e7      	b.n	8007010 <BSP_QSPI_ConfigFlash+0x38>
 8007040:	2400f898 	.word	0x2400f898
 8007044:	24000428 	.word	0x24000428

08007048 <BSP_QSPI_Init>:
{
 8007048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800704c:	460c      	mov	r4, r1
 800704e:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8007050:	2800      	cmp	r0, #0
 8007052:	f040 81ac 	bne.w	80073ae <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8007056:	4d03      	ldr	r5, [pc, #12]	@ (8007064 <BSP_QSPI_Init+0x1c>)
 8007058:	782f      	ldrb	r7, [r5, #0]
 800705a:	b12f      	cbz	r7, 8007068 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 800705c:	2000      	movs	r0, #0
}
 800705e:	b024      	add	sp, #144	@ 0x90
 8007060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007064:	2400f898 	.word	0x2400f898
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8007068:	4bc3      	ldr	r3, [pc, #780]	@ (8007378 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800706a:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800706e:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8007070:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8007072:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8007076:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800707a:	48c0      	ldr	r0, [pc, #768]	@ (800737c <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800707c:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8007080:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007084:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007088:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800708c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8007090:	9201      	str	r2, [sp, #4]
 8007092:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8007094:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007096:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800709a:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 800709c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800709e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070a2:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 80070a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070a8:	f042 0202 	orr.w	r2, r2, #2
 80070ac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80070b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070b4:	f002 0202 	and.w	r2, r2, #2
 80070b8:	9202      	str	r2, [sp, #8]
 80070ba:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80070bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80070c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070cc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80070d0:	9203      	str	r2, [sp, #12]
 80070d2:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80070d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070d8:	f042 0208 	orr.w	r2, r2, #8
 80070dc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80070e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070e4:	f002 0208 	and.w	r2, r2, #8
 80070e8:	9204      	str	r2, [sp, #16]
 80070ea:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80070ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070f0:	f042 0220 	orr.w	r2, r2, #32
 80070f4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80070f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070fc:	f002 0220 	and.w	r2, r2, #32
 8007100:	9205      	str	r2, [sp, #20]
 8007102:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8007104:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007108:	f042 0220 	orr.w	r2, r2, #32
 800710c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007110:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007114:	f002 0220 	and.w	r2, r2, #32
 8007118:	9206      	str	r2, [sp, #24]
 800711a:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800711c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007120:	f042 0220 	orr.w	r2, r2, #32
 8007124:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007128:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800712c:	f002 0220 	and.w	r2, r2, #32
 8007130:	9207      	str	r2, [sp, #28]
 8007132:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8007134:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800713c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007140:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007144:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007148:	9208      	str	r2, [sp, #32]
 800714a:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800714c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007150:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007154:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007158:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800715c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8007160:	9209      	str	r2, [sp, #36]	@ 0x24
 8007162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8007164:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007168:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800716c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007170:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007174:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8007178:	920a      	str	r2, [sp, #40]	@ 0x28
 800717a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800717c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007184:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007188:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800718c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007190:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007192:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8007194:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007198:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800719c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80071a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80071aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80071ac:	2302      	movs	r3, #2
 80071ae:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b2:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80071b4:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80071b6:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80071ba:	f002 f9f5 	bl	80095a8 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80071be:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80071c0:	a916      	add	r1, sp, #88	@ 0x58
 80071c2:	486f      	ldr	r0, [pc, #444]	@ (8007380 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80071c4:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80071c6:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80071ca:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80071ce:	f002 f9eb 	bl	80095a8 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80071d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80071d6:	a916      	add	r1, sp, #88	@ 0x58
 80071d8:	486a      	ldr	r0, [pc, #424]	@ (8007384 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80071da:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80071dc:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80071de:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80071e0:	f002 f9e2 	bl	80095a8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80071e4:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80071e6:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80071ea:	4867      	ldr	r0, [pc, #412]	@ (8007388 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80071ec:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80071f0:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80071f2:	f002 f9d9 	bl	80095a8 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80071f6:	a916      	add	r1, sp, #88	@ 0x58
 80071f8:	4864      	ldr	r0, [pc, #400]	@ (800738c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80071fa:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80071fe:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8007202:	f002 f9d1 	bl	80095a8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8007206:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8007208:	a916      	add	r1, sp, #88	@ 0x58
 800720a:	485f      	ldr	r0, [pc, #380]	@ (8007388 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800720c:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800720e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8007210:	f002 f9ca 	bl	80095a8 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8007214:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8007216:	a916      	add	r1, sp, #88	@ 0x58
 8007218:	485c      	ldr	r0, [pc, #368]	@ (800738c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800721a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800721c:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800721e:	f002 f9c3 	bl	80095a8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8007222:	a916      	add	r1, sp, #88	@ 0x58
 8007224:	4856      	ldr	r0, [pc, #344]	@ (8007380 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8007226:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800722a:	f002 f9bd 	bl	80095a8 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800722e:	a916      	add	r1, sp, #88	@ 0x58
 8007230:	4856      	ldr	r0, [pc, #344]	@ (800738c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8007232:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8007236:	f002 f9b7 	bl	80095a8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800723a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800723e:	a916      	add	r1, sp, #88	@ 0x58
 8007240:	484f      	ldr	r0, [pc, #316]	@ (8007380 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8007242:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8007244:	f002 f9b0 	bl	80095a8 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8007248:	463a      	mov	r2, r7
 800724a:	210f      	movs	r1, #15
 800724c:	205c      	movs	r0, #92	@ 0x5c
 800724e:	f001 fb55 	bl	80088fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8007252:	205c      	movs	r0, #92	@ 0x5c
 8007254:	f001 fb84 	bl	8008960 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8007258:	a811      	add	r0, sp, #68	@ 0x44
 800725a:	f7fe ff38 	bl	80060ce <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800725e:	7863      	ldrb	r3, [r4, #1]
 8007260:	4a4b      	ldr	r2, [pc, #300]	@ (8007390 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8007262:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8007266:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800726a:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800726c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800726e:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8007272:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8007276:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800727a:	a90d      	add	r1, sp, #52	@ 0x34
 800727c:	4845      	ldr	r0, [pc, #276]	@ (8007394 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800727e:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8007280:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8007282:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8007284:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8007286:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8007288:	f7ff fe74 	bl	8006f74 <MX_QSPI_Init>
 800728c:	2800      	cmp	r0, #0
 800728e:	f040 8091 	bne.w	80073b4 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8007292:	2103      	movs	r1, #3
 8007294:	483f      	ldr	r0, [pc, #252]	@ (8007394 <BSP_QSPI_Init+0x34c>)
 8007296:	f7ff f88e 	bl	80063b6 <MT25TL01G_ResetEnable>
 800729a:	2800      	cmp	r0, #0
 800729c:	f040 8084 	bne.w	80073a8 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80072a0:	2103      	movs	r1, #3
 80072a2:	483c      	ldr	r0, [pc, #240]	@ (8007394 <BSP_QSPI_Init+0x34c>)
 80072a4:	f7ff f8a8 	bl	80063f8 <MT25TL01G_ResetMemory>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d17d      	bne.n	80073a8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80072ac:	7869      	ldrb	r1, [r5, #1]
 80072ae:	4839      	ldr	r0, [pc, #228]	@ (8007394 <BSP_QSPI_Init+0x34c>)
 80072b0:	f7fe ff1e 	bl	80060f0 <MT25TL01G_AutoPollingMemReady>
 80072b4:	4601      	mov	r1, r0
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d176      	bne.n	80073a8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80072ba:	4836      	ldr	r0, [pc, #216]	@ (8007394 <BSP_QSPI_Init+0x34c>)
 80072bc:	f7ff f87b 	bl	80063b6 <MT25TL01G_ResetEnable>
 80072c0:	4601      	mov	r1, r0
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d170      	bne.n	80073a8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80072c6:	4833      	ldr	r0, [pc, #204]	@ (8007394 <BSP_QSPI_Init+0x34c>)
 80072c8:	f7ff f896 	bl	80063f8 <MT25TL01G_ResetMemory>
 80072cc:	4601      	mov	r1, r0
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d16a      	bne.n	80073a8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80072d2:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80072d4:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80072d6:	482f      	ldr	r0, [pc, #188]	@ (8007394 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80072d8:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80072da:	f7fe ff09 	bl	80060f0 <MT25TL01G_AutoPollingMemReady>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d162      	bne.n	80073a8 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80072e2:	7869      	ldrb	r1, [r5, #1]
 80072e4:	482b      	ldr	r0, [pc, #172]	@ (8007394 <BSP_QSPI_Init+0x34c>)
 80072e6:	f7fe ff72 	bl	80061ce <MT25TL01G_Enter4BytesAddressMode>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d15c      	bne.n	80073a8 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80072ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 80072f2:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 80072f6:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80072f8:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80072fc:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80072fe:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007300:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8007302:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8007304:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8007308:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 800730a:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800730c:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007310:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007314:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007318:	481e      	ldr	r0, [pc, #120]	@ (8007394 <BSP_QSPI_Init+0x34c>)
 800731a:	f004 fabf 	bl	800b89c <HAL_QSPI_Command>
 800731e:	2800      	cmp	r0, #0
 8007320:	d142      	bne.n	80073a8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007326:	f10d 0102 	add.w	r1, sp, #2
 800732a:	481a      	ldr	r0, [pc, #104]	@ (8007394 <BSP_QSPI_Init+0x34c>)
 800732c:	f004 fb57 	bl	800b9de <HAL_QSPI_Receive>
 8007330:	2800      	cmp	r0, #0
 8007332:	d139      	bne.n	80073a8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007334:	7869      	ldrb	r1, [r5, #1]
 8007336:	4817      	ldr	r0, [pc, #92]	@ (8007394 <BSP_QSPI_Init+0x34c>)
 8007338:	f7fe ff05 	bl	8006146 <MT25TL01G_WriteEnable>
 800733c:	bba0      	cbnz	r0, 80073a8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800733e:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007344:	a916      	add	r1, sp, #88	@ 0x58
 8007346:	4813      	ldr	r0, [pc, #76]	@ (8007394 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8007348:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800734a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800734e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007352:	051b      	lsls	r3, r3, #20
 8007354:	0d1b      	lsrs	r3, r3, #20
 8007356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800735a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800735e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007362:	f004 fa9b 	bl	800b89c <HAL_QSPI_Command>
 8007366:	b9f8      	cbnz	r0, 80073a8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800736c:	f10d 0102 	add.w	r1, sp, #2
 8007370:	4808      	ldr	r0, [pc, #32]	@ (8007394 <BSP_QSPI_Init+0x34c>)
 8007372:	f004 fad8 	bl	800b926 <HAL_QSPI_Transmit>
 8007376:	e00f      	b.n	8007398 <BSP_QSPI_Init+0x350>
 8007378:	58024400 	.word	0x58024400
 800737c:	58020400 	.word	0x58020400
 8007380:	58021800 	.word	0x58021800
 8007384:	58020c00 	.word	0x58020c00
 8007388:	58021c00 	.word	0x58021c00
 800738c:	58021400 	.word	0x58021400
 8007390:	08028f34 	.word	0x08028f34
 8007394:	24000428 	.word	0x24000428
 8007398:	b930      	cbnz	r0, 80073a8 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800739a:	7862      	ldrb	r2, [r4, #1]
 800739c:	7821      	ldrb	r1, [r4, #0]
 800739e:	f7ff fe1b 	bl	8006fd8 <BSP_QSPI_ConfigFlash>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f43f ae5a 	beq.w	800705c <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80073a8:	f06f 0004 	mvn.w	r0, #4
 80073ac:	e657      	b.n	800705e <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 80073ae:	f06f 0001 	mvn.w	r0, #1
 80073b2:	e654      	b.n	800705e <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 80073b4:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80073b8:	e651      	b.n	800705e <BSP_QSPI_Init+0x16>
 80073ba:	bf00      	nop

080073bc <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 80073bc:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80073be:	4604      	mov	r4, r0
 80073c0:	b970      	cbnz	r0, 80073e0 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 80073c2:	4b09      	ldr	r3, [pc, #36]	@ (80073e8 <BSP_SDRAM_DeInit+0x2c>)
 80073c4:	4809      	ldr	r0, [pc, #36]	@ (80073ec <BSP_SDRAM_DeInit+0x30>)
 80073c6:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 80073c8:	f006 fae0 	bl	800d98c <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 80073cc:	207a      	movs	r0, #122	@ 0x7a
 80073ce:	f001 fad5 	bl	800897c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80073d2:	4807      	ldr	r0, [pc, #28]	@ (80073f0 <BSP_SDRAM_DeInit+0x34>)
 80073d4:	4b07      	ldr	r3, [pc, #28]	@ (80073f4 <BSP_SDRAM_DeInit+0x38>)
 80073d6:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80073d8:	f003 ff98 	bl	800b30c <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 80073dc:	4620      	mov	r0, r4
}
 80073de:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80073e0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80073e4:	e7fb      	b.n	80073de <BSP_SDRAM_DeInit+0x22>
 80073e6:	bf00      	nop
 80073e8:	52004140 	.word	0x52004140
 80073ec:	2400f99c 	.word	0x2400f99c
 80073f0:	2400f8a4 	.word	0x2400f8a4
 80073f4:	52000040 	.word	0x52000040

080073f8 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80073f8:	2201      	movs	r2, #1
 80073fa:	4915      	ldr	r1, [pc, #84]	@ (8007450 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80073fc:	4b15      	ldr	r3, [pc, #84]	@ (8007454 <MX_SDRAM_Init+0x5c>)
{
 80073fe:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8007400:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8007404:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8007406:	2104      	movs	r1, #4
 8007408:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800740a:	2440      	movs	r4, #64	@ 0x40
{
 800740c:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800740e:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8007412:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8007416:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800741a:	2200      	movs	r2, #0
 800741c:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8007420:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8007424:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8007428:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800742a:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 800742c:	2207      	movs	r2, #7
 800742e:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8007430:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8007434:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8007436:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8007438:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800743c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8007440:	f006 fa7c 	bl	800d93c <HAL_SDRAM_Init>
}
 8007444:	3800      	subs	r0, #0
 8007446:	bf18      	it	ne
 8007448:	2001      	movne	r0, #1
 800744a:	b008      	add	sp, #32
 800744c:	bd10      	pop	{r4, pc}
 800744e:	bf00      	nop
 8007450:	52004140 	.word	0x52004140
 8007454:	2400f99c 	.word	0x2400f99c

08007458 <BSP_SDRAM_Init>:
{
 8007458:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800745a:	4605      	mov	r5, r0
{
 800745c:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 800745e:	2800      	cmp	r0, #0
 8007460:	f040 80dd 	bne.w	800761e <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8007464:	4b71      	ldr	r3, [pc, #452]	@ (800762c <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007466:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007468:	a909      	add	r1, sp, #36	@ 0x24
 800746a:	4871      	ldr	r0, [pc, #452]	@ (8007630 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800746c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8007470:	4c70      	ldr	r4, [pc, #448]	@ (8007634 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8007472:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8007476:	4e70      	ldr	r6, [pc, #448]	@ (8007638 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8007478:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800747c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007480:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007484:	9201      	str	r2, [sp, #4]
 8007486:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8007488:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800748c:	f042 0201 	orr.w	r2, r2, #1
 8007490:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007494:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007498:	f002 0201 	and.w	r2, r2, #1
 800749c:	9202      	str	r2, [sp, #8]
 800749e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074a4:	f042 0208 	orr.w	r2, r2, #8
 80074a8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80074ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074b0:	f002 0208 	and.w	r2, r2, #8
 80074b4:	9203      	str	r2, [sp, #12]
 80074b6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80074b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074bc:	f042 0210 	orr.w	r2, r2, #16
 80074c0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80074c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074c8:	f002 0210 	and.w	r2, r2, #16
 80074cc:	9204      	str	r2, [sp, #16]
 80074ce:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80074d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074d4:	f042 0220 	orr.w	r2, r2, #32
 80074d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80074dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074e0:	f002 0220 	and.w	r2, r2, #32
 80074e4:	9205      	str	r2, [sp, #20]
 80074e6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80074e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074f0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80074f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074f8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80074fc:	9206      	str	r2, [sp, #24]
 80074fe:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007500:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007504:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007508:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800750c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007510:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8007514:	9207      	str	r2, [sp, #28]
 8007516:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8007518:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800751c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007520:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007524:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8007526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800752a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800752e:	9308      	str	r3, [sp, #32]
 8007530:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007532:	2301      	movs	r3, #1
 8007534:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007538:	230c      	movs	r3, #12
 800753a:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800753e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8007542:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007544:	f002 f830 	bl	80095a8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007548:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800754c:	a909      	add	r1, sp, #36	@ 0x24
 800754e:	483b      	ldr	r0, [pc, #236]	@ (800763c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007550:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007552:	f002 f829 	bl	80095a8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007556:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800755a:	a909      	add	r1, sp, #36	@ 0x24
 800755c:	4838      	ldr	r0, [pc, #224]	@ (8007640 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800755e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007560:	f002 f822 	bl	80095a8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8007564:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007568:	a909      	add	r1, sp, #36	@ 0x24
 800756a:	4836      	ldr	r0, [pc, #216]	@ (8007644 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800756c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800756e:	f002 f81b 	bl	80095a8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8007572:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8007576:	a909      	add	r1, sp, #36	@ 0x24
 8007578:	4833      	ldr	r0, [pc, #204]	@ (8007648 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800757a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800757c:	f002 f814 	bl	80095a8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8007580:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8007584:	a909      	add	r1, sp, #36	@ 0x24
 8007586:	4831      	ldr	r0, [pc, #196]	@ (800764c <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8007588:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800758a:	f002 f80d 	bl	80095a8 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800758e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007592:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8007596:	f240 2002 	movw	r0, #514	@ 0x202
 800759a:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800759e:	6334      	str	r4, [r6, #48]	@ 0x30
 80075a0:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80075a2:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80075a6:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80075aa:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80075ac:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80075ae:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 80075b0:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80075b2:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80075b6:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80075ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80075be:	4b24      	ldr	r3, [pc, #144]	@ (8007650 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80075c0:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80075c2:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80075c4:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80075c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80075cc:	f003 fe9e 	bl	800b30c <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 80075d0:	4620      	mov	r0, r4
 80075d2:	f003 fe2c 	bl	800b22e <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80075d6:	462a      	mov	r2, r5
 80075d8:	210f      	movs	r1, #15
 80075da:	207a      	movs	r0, #122	@ 0x7a
 80075dc:	f001 f98e 	bl	80088fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80075e0:	207a      	movs	r0, #122	@ 0x7a
 80075e2:	f001 f9bd 	bl	8008960 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80075e6:	4630      	mov	r0, r6
 80075e8:	f7ff ff06 	bl	80073f8 <MX_SDRAM_Init>
 80075ec:	b9d0      	cbnz	r0, 8007624 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80075ee:	4919      	ldr	r1, [pc, #100]	@ (8007654 <BSP_SDRAM_Init+0x1fc>)
 80075f0:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80075f2:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80075f6:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80075fa:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80075fc:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8007600:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8007602:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8007606:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800760a:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800760c:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800760e:	f7fe fd31 	bl	8006074 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8007612:	2800      	cmp	r0, #0
 8007614:	bf18      	it	ne
 8007616:	f06f 0004 	mvnne.w	r0, #4
}
 800761a:	b00f      	add	sp, #60	@ 0x3c
 800761c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800761e:	f06f 0001 	mvn.w	r0, #1
 8007622:	e7fa      	b.n	800761a <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007628:	e7f7      	b.n	800761a <BSP_SDRAM_Init+0x1c2>
 800762a:	bf00      	nop
 800762c:	58024400 	.word	0x58024400
 8007630:	58020c00 	.word	0x58020c00
 8007634:	2400f910 	.word	0x2400f910
 8007638:	2400f99c 	.word	0x2400f99c
 800763c:	58021000 	.word	0x58021000
 8007640:	58021400 	.word	0x58021400
 8007644:	58021800 	.word	0x58021800
 8007648:	58021c00 	.word	0x58021c00
 800764c:	58022000 	.word	0x58022000
 8007650:	52000040 	.word	0x52000040
 8007654:	2400f97c 	.word	0x2400f97c

08007658 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8007658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	460c      	mov	r4, r1
 800765e:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8007660:	4606      	mov	r6, r0
 8007662:	2800      	cmp	r0, #0
 8007664:	d15c      	bne.n	8007720 <BSP_TS_Init+0xc8>
 8007666:	680b      	ldr	r3, [r1, #0]
 8007668:	1e5a      	subs	r2, r3, #1
 800766a:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 800766e:	d257      	bcs.n	8007720 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007670:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8007672:	1e51      	subs	r1, r2, #1
 8007674:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8007678:	d252      	bcs.n	8007720 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800767a:	4293      	cmp	r3, r2
 800767c:	bf28      	it	cs
 800767e:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007680:	68e2      	ldr	r2, [r4, #12]
 8007682:	429a      	cmp	r2, r3
 8007684:	d84c      	bhi.n	8007720 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8007686:	2370      	movs	r3, #112	@ 0x70
 8007688:	2254      	movs	r2, #84	@ 0x54
 800768a:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800768e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007764 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8007692:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8007696:	4b2e      	ldr	r3, [pc, #184]	@ (8007750 <BSP_TS_Init+0xf8>)
 8007698:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800769a:	4b2e      	ldr	r3, [pc, #184]	@ (8007754 <BSP_TS_Init+0xfc>)
 800769c:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800769e:	4b2e      	ldr	r3, [pc, #184]	@ (8007758 <BSP_TS_Init+0x100>)
 80076a0:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80076a2:	4b2e      	ldr	r3, [pc, #184]	@ (800775c <BSP_TS_Init+0x104>)
 80076a4:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 80076a6:	4b2e      	ldr	r3, [pc, #184]	@ (8007760 <BSP_TS_Init+0x108>)
 80076a8:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80076aa:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80076ae:	a906      	add	r1, sp, #24
 80076b0:	482c      	ldr	r0, [pc, #176]	@ (8007764 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80076b2:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80076b6:	f7fe fbe3 	bl	8005e80 <FT6X06_RegisterBusIO>
 80076ba:	b9c0      	cbnz	r0, 80076ee <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 80076bc:	4669      	mov	r1, sp
 80076be:	4829      	ldr	r0, [pc, #164]	@ (8007764 <BSP_TS_Init+0x10c>)
 80076c0:	f7fe fb28 	bl	8005d14 <FT6X06_ReadID>
 80076c4:	b998      	cbnz	r0, 80076ee <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 80076c6:	9b00      	ldr	r3, [sp, #0]
 80076c8:	2b11      	cmp	r3, #17
 80076ca:	d110      	bne.n	80076ee <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 80076cc:	a903      	add	r1, sp, #12
 80076ce:	4825      	ldr	r0, [pc, #148]	@ (8007764 <BSP_TS_Init+0x10c>)
 80076d0:	f7fe fad4 	bl	8005c7c <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 80076d4:	4f24      	ldr	r7, [pc, #144]	@ (8007768 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80076d6:	4b25      	ldr	r3, [pc, #148]	@ (800776c <BSP_TS_Init+0x114>)
 80076d8:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007774 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80076dc:	4821      	ldr	r0, [pc, #132]	@ (8007764 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80076de:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 80076e2:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4798      	blx	r3
 80076ea:	4605      	mov	r5, r0
 80076ec:	b1d8      	cbz	r0, 8007726 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 80076ee:	b116      	cbz	r6, 80076f6 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 80076f0:	f04f 35ff 	mov.w	r5, #4294967295
 80076f4:	e010      	b.n	8007718 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 80076f6:	2601      	movs	r6, #1
 80076f8:	e7d7      	b.n	80076aa <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80076fa:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80076fc:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80076fe:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8007700:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007702:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8007704:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007706:	68e3      	ldr	r3, [r4, #12]
 8007708:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800770a:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800770c:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800770e:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007710:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007712:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007714:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8007718:	4628      	mov	r0, r5
 800771a:	b00c      	add	sp, #48	@ 0x30
 800771c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007720:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8007724:	e7f8      	b.n	8007718 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8007726:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007728:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800772a:	4e11      	ldr	r6, [pc, #68]	@ (8007770 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800772c:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800772e:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8007730:	6863      	ldr	r3, [r4, #4]
 8007732:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8007734:	68a3      	ldr	r3, [r4, #8]
 8007736:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8007738:	68e3      	ldr	r3, [r4, #12]
 800773a:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800773c:	f8d8 3000 	ldr.w	r3, [r8]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	4798      	blx	r3
 8007744:	2800      	cmp	r0, #0
 8007746:	dad8      	bge.n	80076fa <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007748:	f06f 0504 	mvn.w	r5, #4
 800774c:	e7e4      	b.n	8007718 <BSP_TS_Init+0xc0>
 800774e:	bf00      	nop
 8007750:	08006c61 	.word	0x08006c61
 8007754:	08006bcd 	.word	0x08006bcd
 8007758:	08006f3d 	.word	0x08006f3d
 800775c:	08006f09 	.word	0x08006f09
 8007760:	08006f71 	.word	0x08006f71
 8007764:	2400f9d0 	.word	0x2400f9d0
 8007768:	2400f9f8 	.word	0x2400f9f8
 800776c:	24000038 	.word	0x24000038
 8007770:	2400f9fc 	.word	0x2400f9fc
 8007774:	2400fa24 	.word	0x2400fa24

08007778 <BSP_TS_GetState>:
{
 8007778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777a:	460c      	mov	r4, r1
 800777c:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 800777e:	2800      	cmp	r0, #0
 8007780:	d14d      	bne.n	800781e <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8007782:	4b28      	ldr	r3, [pc, #160]	@ (8007824 <BSP_TS_GetState+0xac>)
 8007784:	a901      	add	r1, sp, #4
 8007786:	4a28      	ldr	r2, [pc, #160]	@ (8007828 <BSP_TS_GetState+0xb0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6810      	ldr	r0, [r2, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	4798      	blx	r3
 8007790:	2800      	cmp	r0, #0
 8007792:	db41      	blt.n	8007818 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8007794:	4925      	ldr	r1, [pc, #148]	@ (800782c <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8007796:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8007798:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800779a:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 800779c:	2e00      	cmp	r6, #0
 800779e:	d037      	beq.n	8007810 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80077a0:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 80077a2:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80077a6:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 80077aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80077ae:	bf1e      	ittt	ne
 80077b0:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 80077b2:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 80077b4:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80077b6:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 80077ba:	bf1c      	itt	ne
 80077bc:	f10e 3cff 	addne.w	ip, lr, #4294967295
 80077c0:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80077c4:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80077c8:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80077ca:	bf44      	itt	mi
 80077cc:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 80077d0:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80077d2:	680f      	ldr	r7, [r1, #0]
 80077d4:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80077d6:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80077d8:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80077da:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80077dc:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80077de:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80077e2:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80077e6:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80077e8:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80077ea:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80077ec:	bf8c      	ite	hi
 80077ee:	eba2 0c05 	subhi.w	ip, r2, r5
 80077f2:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80077f6:	4283      	cmp	r3, r0
 80077f8:	bf8c      	ite	hi
 80077fa:	1a1e      	subhi	r6, r3, r0
 80077fc:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80077fe:	4567      	cmp	r7, ip
 8007800:	d301      	bcc.n	8007806 <BSP_TS_GetState+0x8e>
 8007802:	42b7      	cmp	r7, r6
 8007804:	d205      	bcs.n	8007812 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8007806:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8007808:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800780a:	2000      	movs	r0, #0
}
 800780c:	b005      	add	sp, #20
 800780e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8007810:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007812:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8007816:	e7f8      	b.n	800780a <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007818:	f06f 0004 	mvn.w	r0, #4
 800781c:	e7f6      	b.n	800780c <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800781e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8007822:	e7f3      	b.n	800780c <BSP_TS_GetState+0x94>
 8007824:	2400fa24 	.word	0x2400fa24
 8007828:	2400f9f8 	.word	0x2400f9f8
 800782c:	2400f9fc 	.word	0x2400f9fc

08007830 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007830:	4b2d      	ldr	r3, [pc, #180]	@ (80078e8 <SystemInit+0xb8>)
 8007832:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007836:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800783a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	f042 0210 	orr.w	r2, r2, #16
 8007844:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007846:	4a29      	ldr	r2, [pc, #164]	@ (80078ec <SystemInit+0xbc>)
 8007848:	6813      	ldr	r3, [r2, #0]
 800784a:	f003 030f 	and.w	r3, r3, #15
 800784e:	2b06      	cmp	r3, #6
 8007850:	d805      	bhi.n	800785e <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007852:	6813      	ldr	r3, [r2, #0]
 8007854:	f023 030f 	bic.w	r3, r3, #15
 8007858:	f043 0307 	orr.w	r3, r3, #7
 800785c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800785e:	4b24      	ldr	r3, [pc, #144]	@ (80078f0 <SystemInit+0xc0>)
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007868:	2200      	movs	r2, #0
 800786a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800786c:	4a21      	ldr	r2, [pc, #132]	@ (80078f4 <SystemInit+0xc4>)
 800786e:	6819      	ldr	r1, [r3, #0]
 8007870:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007872:	491e      	ldr	r1, [pc, #120]	@ (80078ec <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8007874:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007876:	680a      	ldr	r2, [r1, #0]
 8007878:	0712      	lsls	r2, r2, #28
 800787a:	d505      	bpl.n	8007888 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800787c:	680a      	ldr	r2, [r1, #0]
 800787e:	f022 020f 	bic.w	r2, r2, #15
 8007882:	f042 0207 	orr.w	r2, r2, #7
 8007886:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007888:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800788a:	491b      	ldr	r1, [pc, #108]	@ (80078f8 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 800788c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800788e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8007890:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8007892:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007894:	4919      	ldr	r1, [pc, #100]	@ (80078fc <SystemInit+0xcc>)
 8007896:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007898:	4919      	ldr	r1, [pc, #100]	@ (8007900 <SystemInit+0xd0>)
 800789a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800789c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800789e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80078a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80078a2:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80078a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80078a6:	6819      	ldr	r1, [r3, #0]
 80078a8:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80078ac:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80078ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80078b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80078b4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80078b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80078c0:	4b10      	ldr	r3, [pc, #64]	@ (8007904 <SystemInit+0xd4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	0c1b      	lsrs	r3, r3, #16
 80078c6:	041b      	lsls	r3, r3, #16
 80078c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078cc:	d203      	bcs.n	80078d6 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80078ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007908 <SystemInit+0xd8>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80078d6:	4b0d      	ldr	r3, [pc, #52]	@ (800790c <SystemInit+0xdc>)
 80078d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80078dc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80078de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80078e2:	4b01      	ldr	r3, [pc, #4]	@ (80078e8 <SystemInit+0xb8>)
 80078e4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80078e6:	4770      	bx	lr
 80078e8:	e000ed00 	.word	0xe000ed00
 80078ec:	52002000 	.word	0x52002000
 80078f0:	58024400 	.word	0x58024400
 80078f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80078f8:	02020200 	.word	0x02020200
 80078fc:	01ff0000 	.word	0x01ff0000
 8007900:	01010280 	.word	0x01010280
 8007904:	5c001000 	.word	0x5c001000
 8007908:	51008000 	.word	0x51008000
 800790c:	52004000 	.word	0x52004000

08007910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007910:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007912:	2003      	movs	r0, #3
 8007914:	f000 ffe0 	bl	80088d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007918:	f004 fc4e 	bl	800c1b8 <HAL_RCC_GetSysClockFreq>
 800791c:	490f      	ldr	r1, [pc, #60]	@ (800795c <HAL_Init+0x4c>)
 800791e:	4a10      	ldr	r2, [pc, #64]	@ (8007960 <HAL_Init+0x50>)
 8007920:	698b      	ldr	r3, [r1, #24]
 8007922:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007926:	5cd3      	ldrb	r3, [r2, r3]
 8007928:	f003 031f 	and.w	r3, r3, #31
 800792c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800792e:	698b      	ldr	r3, [r1, #24]
 8007930:	f003 030f 	and.w	r3, r3, #15
 8007934:	5cd3      	ldrb	r3, [r2, r3]
 8007936:	4a0b      	ldr	r2, [pc, #44]	@ (8007964 <HAL_Init+0x54>)
 8007938:	f003 031f 	and.w	r3, r3, #31
 800793c:	fa20 f303 	lsr.w	r3, r0, r3
 8007940:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007942:	4b09      	ldr	r3, [pc, #36]	@ (8007968 <HAL_Init+0x58>)
 8007944:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007946:	2000      	movs	r0, #0
 8007948:	f7fa f8ac 	bl	8001aa4 <HAL_InitTick>
 800794c:	4604      	mov	r4, r0
 800794e:	b918      	cbnz	r0, 8007958 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007950:	f7f9 fcda 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007954:	4620      	mov	r0, r4
 8007956:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007958:	2401      	movs	r4, #1
 800795a:	e7fb      	b.n	8007954 <HAL_Init+0x44>
 800795c:	58024400 	.word	0x58024400
 8007960:	08028f3c 	.word	0x08028f3c
 8007964:	24000068 	.word	0x24000068
 8007968:	2400006c 	.word	0x2400006c

0800796c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800796c:	4a03      	ldr	r2, [pc, #12]	@ (800797c <HAL_IncTick+0x10>)
 800796e:	4b04      	ldr	r3, [pc, #16]	@ (8007980 <HAL_IncTick+0x14>)
 8007970:	6811      	ldr	r1, [r2, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	440b      	add	r3, r1
 8007976:	6013      	str	r3, [r2, #0]
}
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	2400fa28 	.word	0x2400fa28
 8007980:	24000070 	.word	0x24000070

08007984 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007984:	4b01      	ldr	r3, [pc, #4]	@ (800798c <HAL_GetTick+0x8>)
 8007986:	6818      	ldr	r0, [r3, #0]
}
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	2400fa28 	.word	0x2400fa28

08007990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007994:	f7ff fff6 	bl	8007984 <HAL_GetTick>
 8007998:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800799a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800799c:	bf1e      	ittt	ne
 800799e:	4b04      	ldrne	r3, [pc, #16]	@ (80079b0 <HAL_Delay+0x20>)
 80079a0:	781b      	ldrbne	r3, [r3, #0]
 80079a2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80079a4:	f7ff ffee 	bl	8007984 <HAL_GetTick>
 80079a8:	1b43      	subs	r3, r0, r5
 80079aa:	42a3      	cmp	r3, r4
 80079ac:	d3fa      	bcc.n	80079a4 <HAL_Delay+0x14>
  {
  }
}
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	24000070 	.word	0x24000070

080079b4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80079b4:	4b01      	ldr	r3, [pc, #4]	@ (80079bc <HAL_GetREVID+0x8>)
 80079b6:	6818      	ldr	r0, [r3, #0]
}
 80079b8:	0c00      	lsrs	r0, r0, #16
 80079ba:	4770      	bx	lr
 80079bc:	5c001000 	.word	0x5c001000

080079c0 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80079c0:	4a03      	ldr	r2, [pc, #12]	@ (80079d0 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80079c2:	6853      	ldr	r3, [r2, #4]
 80079c4:	ea23 0300 	bic.w	r3, r3, r0
 80079c8:	430b      	orrs	r3, r1
 80079ca:	6053      	str	r3, [r2, #4]
}
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	58000400 	.word	0x58000400

080079d4 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80079d4:	6880      	ldr	r0, [r0, #8]
}
 80079d6:	f000 0001 	and.w	r0, r0, #1
 80079da:	4770      	bx	lr

080079dc <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80079dc:	6880      	ldr	r0, [r0, #8]
}
 80079de:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80079e2:	4770      	bx	lr

080079e4 <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80079e4:	6803      	ldr	r3, [r0, #0]
 80079e6:	4a43      	ldr	r2, [pc, #268]	@ (8007af4 <HAL_ADC_PollForConversion+0x110>)
 80079e8:	4293      	cmp	r3, r2
{
 80079ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ee:	4604      	mov	r4, r0
 80079f0:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80079f2:	d01e      	beq.n	8007a32 <HAL_ADC_PollForConversion+0x4e>
 80079f4:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 80079f8:	483f      	ldr	r0, [pc, #252]	@ (8007af8 <HAL_ADC_PollForConversion+0x114>)
 80079fa:	4940      	ldr	r1, [pc, #256]	@ (8007afc <HAL_ADC_PollForConversion+0x118>)
 80079fc:	f502 4286 	add.w	r2, r2, #17152	@ 0x4300
 8007a00:	4283      	cmp	r3, r0
 8007a02:	bf08      	it	eq
 8007a04:	460a      	moveq	r2, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8007a06:	6925      	ldr	r5, [r4, #16]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007a08:	6897      	ldr	r7, [r2, #8]
 8007a0a:	2d08      	cmp	r5, #8
 8007a0c:	f007 071f 	and.w	r7, r7, #31
 8007a10:	d024      	beq.n	8007a5c <HAL_ADC_PollForConversion+0x78>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007a12:	f240 2221 	movw	r2, #545	@ 0x221
 8007a16:	40fa      	lsrs	r2, r7
 8007a18:	07d1      	lsls	r1, r2, #31
 8007a1a:	d50c      	bpl.n	8007a36 <HAL_ADC_PollForConversion+0x52>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007a22:	d01a      	beq.n	8007a5a <HAL_ADC_PollForConversion+0x76>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a24:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8007a26:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a28:	f043 0320 	orr.w	r3, r3, #32
 8007a2c:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007a32:	4a32      	ldr	r2, [pc, #200]	@ (8007afc <HAL_ADC_PollForConversion+0x118>)
 8007a34:	e7e7      	b.n	8007a06 <HAL_ADC_PollForConversion+0x22>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007a36:	4a2f      	ldr	r2, [pc, #188]	@ (8007af4 <HAL_ADC_PollForConversion+0x110>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d00c      	beq.n	8007a56 <HAL_ADC_PollForConversion+0x72>
 8007a3c:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 8007a40:	482d      	ldr	r0, [pc, #180]	@ (8007af8 <HAL_ADC_PollForConversion+0x114>)
 8007a42:	492e      	ldr	r1, [pc, #184]	@ (8007afc <HAL_ADC_PollForConversion+0x118>)
 8007a44:	f502 4286 	add.w	r2, r2, #17152	@ 0x4300
 8007a48:	4283      	cmp	r3, r0
 8007a4a:	bf08      	it	eq
 8007a4c:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8007a4e:	6893      	ldr	r3, [r2, #8]
 8007a50:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8007a54:	e7e5      	b.n	8007a22 <HAL_ADC_PollForConversion+0x3e>
 8007a56:	4a29      	ldr	r2, [pc, #164]	@ (8007afc <HAL_ADC_PollForConversion+0x118>)
 8007a58:	e7f9      	b.n	8007a4e <HAL_ADC_PollForConversion+0x6a>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8007a5a:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 8007a5c:	f7ff ff92 	bl	8007984 <HAL_GetTick>
 8007a60:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	422a      	tst	r2, r5
 8007a68:	d025      	beq.n	8007ab6 <HAL_ADC_PollForConversion+0xd2>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007a6a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a70:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8007a78:	d10f      	bne.n	8007a9a <HAL_ADC_PollForConversion+0xb6>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8007a7a:	7d62      	ldrb	r2, [r4, #21]
 8007a7c:	b96a      	cbnz	r2, 8007a9a <HAL_ADC_PollForConversion+0xb6>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	0716      	lsls	r6, r2, #28
 8007a82:	d50a      	bpl.n	8007a9a <HAL_ADC_PollForConversion+0xb6>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007a84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a8a:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007a8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a8e:	04d0      	lsls	r0, r2, #19
 8007a90:	d403      	bmi.n	8007a9a <HAL_ADC_PollForConversion+0xb6>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a92:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a94:	f042 0201 	orr.w	r2, r2, #1
 8007a98:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007a9a:	4a17      	ldr	r2, [pc, #92]	@ (8007af8 <HAL_ADC_PollForConversion+0x114>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d104      	bne.n	8007aaa <HAL_ADC_PollForConversion+0xc6>
 8007aa0:	f240 2221 	movw	r2, #545	@ 0x221
 8007aa4:	40fa      	lsrs	r2, r7
 8007aa6:	07d1      	lsls	r1, r2, #31
 8007aa8:	d51b      	bpl.n	8007ae2 <HAL_ADC_PollForConversion+0xfe>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007aaa:	68da      	ldr	r2, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8007aac:	2d08      	cmp	r5, #8
 8007aae:	d11b      	bne.n	8007ae8 <HAL_ADC_PollForConversion+0x104>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8007ab0:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	e7bb      	b.n	8007a2e <HAL_ADC_PollForConversion+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8007ab6:	1c72      	adds	r2, r6, #1
 8007ab8:	d0d4      	beq.n	8007a64 <HAL_ADC_PollForConversion+0x80>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8007aba:	f7ff ff63 	bl	8007984 <HAL_GetTick>
 8007abe:	eba0 0008 	sub.w	r0, r0, r8
 8007ac2:	42b0      	cmp	r0, r6
 8007ac4:	d801      	bhi.n	8007aca <HAL_ADC_PollForConversion+0xe6>
 8007ac6:	2e00      	cmp	r6, #0
 8007ac8:	d1cb      	bne.n	8007a62 <HAL_ADC_PollForConversion+0x7e>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	402b      	ands	r3, r5
 8007ad0:	d1c7      	bne.n	8007a62 <HAL_ADC_PollForConversion+0x7e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007ad2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
          return HAL_TIMEOUT;
 8007ad4:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 8007ad6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007ada:	f042 0204 	orr.w	r2, r2, #4
 8007ade:	6562      	str	r2, [r4, #84]	@ 0x54
          return HAL_TIMEOUT;
 8007ae0:	e7a5      	b.n	8007a2e <HAL_ADC_PollForConversion+0x4a>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007ae2:	4a04      	ldr	r2, [pc, #16]	@ (8007af4 <HAL_ADC_PollForConversion+0x110>)
 8007ae4:	68d2      	ldr	r2, [r2, #12]
 8007ae6:	e7e1      	b.n	8007aac <HAL_ADC_PollForConversion+0xc8>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8007ae8:	0452      	lsls	r2, r2, #17
 8007aea:	d4e2      	bmi.n	8007ab2 <HAL_ADC_PollForConversion+0xce>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007aec:	220c      	movs	r2, #12
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	e7df      	b.n	8007ab2 <HAL_ADC_PollForConversion+0xce>
 8007af2:	bf00      	nop
 8007af4:	40022000 	.word	0x40022000
 8007af8:	40022100 	.word	0x40022100
 8007afc:	40022300 	.word	0x40022300

08007b00 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8007b00:	6803      	ldr	r3, [r0, #0]
 8007b02:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8007b04:	4770      	bx	lr

08007b06 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8007b06:	4770      	bx	lr

08007b08 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8007b08:	4770      	bx	lr

08007b0a <HAL_ADC_ErrorCallback>:
  *           "HAL_ADC_Start_DMA()"
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8007b0a:	4770      	bx	lr

08007b0c <HAL_ADC_IRQHandler>:
{
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007b0e:	6802      	ldr	r2, [r0, #0]
{
 8007b10:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007b12:	4b92      	ldr	r3, [pc, #584]	@ (8007d5c <HAL_ADC_IRQHandler+0x250>)
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007b14:	6816      	ldr	r6, [r2, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007b16:	429a      	cmp	r2, r3
  uint32_t tmp_ier = hadc->Instance->IER;
 8007b18:	6855      	ldr	r5, [r2, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007b1a:	f000 8106 	beq.w	8007d2a <HAL_ADC_IRQHandler+0x21e>
 8007b1e:	f103 53c0 	add.w	r3, r3, #402653184	@ 0x18000000
 8007b22:	488f      	ldr	r0, [pc, #572]	@ (8007d60 <HAL_ADC_IRQHandler+0x254>)
 8007b24:	498f      	ldr	r1, [pc, #572]	@ (8007d64 <HAL_ADC_IRQHandler+0x258>)
 8007b26:	f503 4386 	add.w	r3, r3, #17152	@ 0x4300
 8007b2a:	4282      	cmp	r2, r0
 8007b2c:	bf08      	it	eq
 8007b2e:	460b      	moveq	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007b30:	689f      	ldr	r7, [r3, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007b32:	07b0      	lsls	r0, r6, #30
 8007b34:	f007 071f 	and.w	r7, r7, #31
 8007b38:	d50e      	bpl.n	8007b58 <HAL_ADC_IRQHandler+0x4c>
 8007b3a:	07a9      	lsls	r1, r5, #30
 8007b3c:	d50c      	bpl.n	8007b58 <HAL_ADC_IRQHandler+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007b40:	06da      	lsls	r2, r3, #27
 8007b42:	d403      	bmi.n	8007b4c <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007b44:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007b46:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007b4a:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 fe5b 	bl	8008808 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	2202      	movs	r2, #2
 8007b56:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007b58:	0773      	lsls	r3, r6, #29
 8007b5a:	d501      	bpl.n	8007b60 <HAL_ADC_IRQHandler+0x54>
 8007b5c:	0768      	lsls	r0, r5, #29
 8007b5e:	d403      	bmi.n	8007b68 <HAL_ADC_IRQHandler+0x5c>
 8007b60:	0731      	lsls	r1, r6, #28
 8007b62:	d537      	bpl.n	8007bd4 <HAL_ADC_IRQHandler+0xc8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007b64:	072a      	lsls	r2, r5, #28
 8007b66:	d535      	bpl.n	8007bd4 <HAL_ADC_IRQHandler+0xc8>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b68:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007b6a:	06db      	lsls	r3, r3, #27
 8007b6c:	d403      	bmi.n	8007b76 <HAL_ADC_IRQHandler+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007b6e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007b70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b74:	6563      	str	r3, [r4, #84]	@ 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007b76:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8007b7e:	d123      	bne.n	8007bc8 <HAL_ADC_IRQHandler+0xbc>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007b80:	4a77      	ldr	r2, [pc, #476]	@ (8007d60 <HAL_ADC_IRQHandler+0x254>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d105      	bne.n	8007b92 <HAL_ADC_IRQHandler+0x86>
 8007b86:	f240 2221 	movw	r2, #545	@ 0x221
 8007b8a:	40fa      	lsrs	r2, r7
 8007b8c:	07d0      	lsls	r0, r2, #31
 8007b8e:	f140 80ce 	bpl.w	8007d2e <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007b92:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007b94:	0491      	lsls	r1, r2, #18
 8007b96:	d417      	bmi.n	8007bc8 <HAL_ADC_IRQHandler+0xbc>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	0712      	lsls	r2, r2, #28
 8007b9c:	d514      	bpl.n	8007bc8 <HAL_ADC_IRQHandler+0xbc>
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff ff1c 	bl	80079dc <LL_ADC_REG_IsConversionOngoing>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	f040 80c5 	bne.w	8007d34 <HAL_ADC_IRQHandler+0x228>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	f022 020c 	bic.w	r2, r2, #12
 8007bb0:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007bb2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bb8:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007bba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007bbc:	04d8      	lsls	r0, r3, #19
 8007bbe:	d403      	bmi.n	8007bc8 <HAL_ADC_IRQHandler+0xbc>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007bc0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007bc2:	f043 0301 	orr.w	r3, r3, #1
 8007bc6:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f7ff ff9c 	bl	8007b06 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	220c      	movs	r2, #12
 8007bd2:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007bd4:	06b1      	lsls	r1, r6, #26
 8007bd6:	d501      	bpl.n	8007bdc <HAL_ADC_IRQHandler+0xd0>
 8007bd8:	06aa      	lsls	r2, r5, #26
 8007bda:	d403      	bmi.n	8007be4 <HAL_ADC_IRQHandler+0xd8>
 8007bdc:	0673      	lsls	r3, r6, #25
 8007bde:	d53c      	bpl.n	8007c5a <HAL_ADC_IRQHandler+0x14e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007be0:	0668      	lsls	r0, r5, #25
 8007be2:	d53a      	bpl.n	8007c5a <HAL_ADC_IRQHandler+0x14e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007be4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007be6:	06d9      	lsls	r1, r3, #27
 8007be8:	d403      	bmi.n	8007bf2 <HAL_ADC_IRQHandler+0xe6>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007bea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007bec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007bf0:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007bf2:	6823      	ldr	r3, [r4, #0]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007bf4:	4a5a      	ldr	r2, [pc, #360]	@ (8007d60 <HAL_ADC_IRQHandler+0x254>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007bf6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007bf8:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007bfa:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007bfc:	f401 71c0 	and.w	r1, r1, #384	@ 0x180
 8007c00:	f040 80a1 	bne.w	8007d46 <HAL_ADC_IRQHandler+0x23a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007c04:	22c1      	movs	r2, #193	@ 0xc1
 8007c06:	40fa      	lsrs	r2, r7
 8007c08:	07d2      	lsls	r2, r2, #31
 8007c0a:	f100 809c 	bmi.w	8007d46 <HAL_ADC_IRQHandler+0x23a>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007c0e:	4a53      	ldr	r2, [pc, #332]	@ (8007d5c <HAL_ADC_IRQHandler+0x250>)
 8007c10:	68d2      	ldr	r2, [r2, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007c12:	b9e1      	cbnz	r1, 8007c4e <HAL_ADC_IRQHandler+0x142>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007c14:	0191      	lsls	r1, r2, #6
 8007c16:	d505      	bpl.n	8007c24 <HAL_ADC_IRQHandler+0x118>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007c18:	f402 5100 	and.w	r1, r2, #8192	@ 0x2000
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007c1c:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007c20:	4301      	orrs	r1, r0
 8007c22:	d114      	bne.n	8007c4e <HAL_ADC_IRQHandler+0x142>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007c24:	6819      	ldr	r1, [r3, #0]
 8007c26:	0649      	lsls	r1, r1, #25
 8007c28:	d511      	bpl.n	8007c4e <HAL_ADC_IRQHandler+0x142>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007c2a:	0292      	lsls	r2, r2, #10
 8007c2c:	d40f      	bmi.n	8007c4e <HAL_ADC_IRQHandler+0x142>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	0710      	lsls	r0, r2, #28
 8007c32:	f100 808a 	bmi.w	8007d4a <HAL_ADC_IRQHandler+0x23e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007c3c:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007c3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007c40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c44:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007c46:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007c48:	05d9      	lsls	r1, r3, #23
 8007c4a:	f140 808d 	bpl.w	8007d68 <HAL_ADC_IRQHandler+0x25c>
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 fdd6 	bl	8008800 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	2260      	movs	r2, #96	@ 0x60
 8007c58:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007c5a:	0632      	lsls	r2, r6, #24
 8007c5c:	d50b      	bpl.n	8007c76 <HAL_ADC_IRQHandler+0x16a>
 8007c5e:	062b      	lsls	r3, r5, #24
 8007c60:	d509      	bpl.n	8007c76 <HAL_ADC_IRQHandler+0x16a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c62:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007c64:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c6a:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007c6c:	f7ff ff4c 	bl	8007b08 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	2280      	movs	r2, #128	@ 0x80
 8007c74:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007c76:	05f0      	lsls	r0, r6, #23
 8007c78:	d50c      	bpl.n	8007c94 <HAL_ADC_IRQHandler+0x188>
 8007c7a:	05e9      	lsls	r1, r5, #23
 8007c7c:	d50a      	bpl.n	8007c94 <HAL_ADC_IRQHandler+0x188>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007c7e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007c80:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c86:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007c88:	f000 fdbc 	bl	8008804 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c92:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007c94:	05b2      	lsls	r2, r6, #22
 8007c96:	d50c      	bpl.n	8007cb2 <HAL_ADC_IRQHandler+0x1a6>
 8007c98:	05ab      	lsls	r3, r5, #22
 8007c9a:	d50a      	bpl.n	8007cb2 <HAL_ADC_IRQHandler+0x1a6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007c9c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007c9e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ca4:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007ca6:	f000 fdae 	bl	8008806 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cb0:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007cb2:	06f0      	lsls	r0, r6, #27
 8007cb4:	d524      	bpl.n	8007d00 <HAL_ADC_IRQHandler+0x1f4>
 8007cb6:	06e9      	lsls	r1, r5, #27
 8007cb8:	d522      	bpl.n	8007d00 <HAL_ADC_IRQHandler+0x1f4>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007cba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007cbc:	b193      	cbz	r3, 8007ce4 <HAL_ADC_IRQHandler+0x1d8>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007cbe:	6822      	ldr	r2, [r4, #0]
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007cc0:	2f00      	cmp	r7, #0
 8007cc2:	d058      	beq.n	8007d76 <HAL_ADC_IRQHandler+0x26a>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007cc4:	4b25      	ldr	r3, [pc, #148]	@ (8007d5c <HAL_ADC_IRQHandler+0x250>)
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d053      	beq.n	8007d72 <HAL_ADC_IRQHandler+0x266>
 8007cca:	f103 53c0 	add.w	r3, r3, #402653184	@ 0x18000000
 8007cce:	4824      	ldr	r0, [pc, #144]	@ (8007d60 <HAL_ADC_IRQHandler+0x254>)
 8007cd0:	4924      	ldr	r1, [pc, #144]	@ (8007d64 <HAL_ADC_IRQHandler+0x258>)
 8007cd2:	f503 4386 	add.w	r3, r3, #17152	@ 0x4300
 8007cd6:	4282      	cmp	r2, r0
 8007cd8:	bf08      	it	eq
 8007cda:	460b      	moveq	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8007ce2:	d00a      	beq.n	8007cfa <HAL_ADC_IRQHandler+0x1ee>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007ce4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_ADC_ErrorCallback(hadc);
 8007ce6:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007ce8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007cec:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007cee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007cf0:	f043 0302 	orr.w	r3, r3, #2
 8007cf4:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 8007cf6:	f7ff ff08 	bl	8007b0a <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	2210      	movs	r2, #16
 8007cfe:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007d00:	0572      	lsls	r2, r6, #21
 8007d02:	d53c      	bpl.n	8007d7e <HAL_ADC_IRQHandler+0x272>
 8007d04:	056b      	lsls	r3, r5, #21
 8007d06:	d53a      	bpl.n	8007d7e <HAL_ADC_IRQHandler+0x272>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007d08:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007d0e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d14:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007d16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d18:	f043 0308 	orr.w	r3, r3, #8
 8007d1c:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	601a      	str	r2, [r3, #0]
}
 8007d22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007d26:	f000 bd6c 	b.w	8008802 <HAL_ADCEx_InjectedQueueOverflowCallback>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007d64 <HAL_ADC_IRQHandler+0x258>)
 8007d2c:	e700      	b.n	8007b30 <HAL_ADC_IRQHandler+0x24>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007d2e:	4a0b      	ldr	r2, [pc, #44]	@ (8007d5c <HAL_ADC_IRQHandler+0x250>)
 8007d30:	68d2      	ldr	r2, [r2, #12]
 8007d32:	e72f      	b.n	8007b94 <HAL_ADC_IRQHandler+0x88>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d34:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007d36:	f043 0310 	orr.w	r3, r3, #16
 8007d3a:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d3e:	f043 0301 	orr.w	r3, r3, #1
 8007d42:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007d44:	e740      	b.n	8007bc8 <HAL_ADC_IRQHandler+0xbc>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	e763      	b.n	8007c12 <HAL_ADC_IRQHandler+0x106>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d4a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007d4c:	f043 0310 	orr.w	r3, r3, #16
 8007d50:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d54:	f043 0301 	orr.w	r3, r3, #1
 8007d58:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007d5a:	e778      	b.n	8007c4e <HAL_ADC_IRQHandler+0x142>
 8007d5c:	40022000 	.word	0x40022000
 8007d60:	40022100 	.word	0x40022100
 8007d64:	40022300 	.word	0x40022300
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d68:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007d6a:	f043 0301 	orr.w	r3, r3, #1
 8007d6e:	6563      	str	r3, [r4, #84]	@ 0x54
 8007d70:	e76d      	b.n	8007c4e <HAL_ADC_IRQHandler+0x142>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007d72:	4b03      	ldr	r3, [pc, #12]	@ (8007d80 <HAL_ADC_IRQHandler+0x274>)
 8007d74:	e7b2      	b.n	8007cdc <HAL_ADC_IRQHandler+0x1d0>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8007d76:	68d3      	ldr	r3, [r2, #12]
 8007d78:	f013 0f03 	tst.w	r3, #3
 8007d7c:	e7b1      	b.n	8007ce2 <HAL_ADC_IRQHandler+0x1d6>
}
 8007d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d80:	40022300 	.word	0x40022300

08007d84 <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007d84:	2300      	movs	r3, #0
{
 8007d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8007d88:	9301      	str	r3, [sp, #4]
{
 8007d8a:	4605      	mov	r5, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007d8c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	f000 81eb 	beq.w	800816c <HAL_ADC_ConfigChannel+0x3e8>
 8007d96:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d98:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8007d9a:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7ff fe1c 	bl	80079dc <LL_ADC_REG_IsConversionOngoing>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	f040 811c 	bne.w	8007fe2 <HAL_ADC_ConfigChannel+0x25e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8007daa:	680a      	ldr	r2, [r1, #0]
 8007dac:	2a00      	cmp	r2, #0
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007dae:	ea4f 6092 	mov.w	r0, r2, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8007db2:	db07      	blt.n	8007dc4 <HAL_ADC_ConfigChannel+0x40>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007db4:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8007db8:	2e00      	cmp	r6, #0
 8007dba:	d177      	bne.n	8007eac <HAL_ADC_ConfigChannel+0x128>
 8007dbc:	4084      	lsls	r4, r0
 8007dbe:	69da      	ldr	r2, [r3, #28]
 8007dc0:	4322      	orrs	r2, r4
 8007dc2:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007dc4:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007dc6:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
  MODIFY_REG(*preg,
 8007dca:	271f      	movs	r7, #31
 8007dcc:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007dd0:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 8007dd2:	f004 041f 	and.w	r4, r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007dd6:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8007dda:	40a7      	lsls	r7, r4
 8007ddc:	40a0      	lsls	r0, r4
 8007dde:	f85c 2006 	ldr.w	r2, [ip, r6]
 8007de2:	ea22 0207 	bic.w	r2, r2, r7
 8007de6:	4302      	orrs	r2, r0
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007de8:	4618      	mov	r0, r3
 8007dea:	f84c 2006 	str.w	r2, [ip, r6]
 8007dee:	f7ff fdf5 	bl	80079dc <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	f002 0208 	and.w	r2, r2, #8
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007df8:	4302      	orrs	r2, r0
 8007dfa:	d14b      	bne.n	8007e94 <HAL_ADC_ConfigChannel+0x110>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007dfc:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007dfe:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8007e02:	2607      	movs	r6, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007e04:	0dc4      	lsrs	r4, r0, #23
  MODIFY_REG(*preg,
 8007e06:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007e0a:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8007e0e:	4086      	lsls	r6, r0
 8007e10:	593a      	ldr	r2, [r7, r4]
 8007e12:	ea22 0206 	bic.w	r2, r2, r6
 8007e16:	688e      	ldr	r6, [r1, #8]
 8007e18:	4086      	lsls	r6, r0
 8007e1a:	4332      	orrs	r2, r6
 8007e1c:	513a      	str	r2, [r7, r4]
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007e1e:	4a94      	ldr	r2, [pc, #592]	@ (8008070 <HAL_ADC_ConfigChannel+0x2ec>)
 8007e20:	6948      	ldr	r0, [r1, #20]
 8007e22:	6812      	ldr	r2, [r2, #0]
 8007e24:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8007e28:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	d146      	bne.n	8007ebe <HAL_ADC_ConfigChannel+0x13a>
 8007e30:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8007e34:	0052      	lsls	r2, r2, #1
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007e36:	690f      	ldr	r7, [r1, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007e38:	4090      	lsls	r0, r2
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007e3a:	680c      	ldr	r4, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007e3c:	2f04      	cmp	r7, #4
 8007e3e:	d046      	beq.n	8007ece <HAL_ADC_ConfigChannel+0x14a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007e40:	f103 0660 	add.w	r6, r3, #96	@ 0x60
    MODIFY_REG(*preg,
 8007e44:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8007e48:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 8007e4c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007e50:	4322      	orrs	r2, r4
 8007e52:	4302      	orrs	r2, r0
 8007e54:	f846 2027 	str.w	r2, [r6, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007e58:	7e48      	ldrb	r0, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007e5a:	690c      	ldr	r4, [r1, #16]
 8007e5c:	1e47      	subs	r7, r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007e5e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007e62:	4278      	negs	r0, r7
 8007e64:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007e68:	4178      	adcs	r0, r7
 8007e6a:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 8007e6e:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007e72:	7e0a      	ldrb	r2, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007e74:	690c      	ldr	r4, [r1, #16]
 8007e76:	f102 3cff 	add.w	ip, r2, #4294967295
 8007e7a:	6918      	ldr	r0, [r3, #16]
 8007e7c:	f004 041f 	and.w	r4, r4, #31
 8007e80:	f1dc 0200 	rsbs	r2, ip, #0
 8007e84:	f420 40f0 	bic.w	r0, r0, #30720	@ 0x7800
 8007e88:	eb42 020c 	adc.w	r2, r2, ip
 8007e8c:	02d2      	lsls	r2, r2, #11
 8007e8e:	40a2      	lsls	r2, r4
 8007e90:	4302      	orrs	r2, r0
 8007e92:	611a      	str	r2, [r3, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff fd9d 	bl	80079d4 <LL_ADC_IsEnabled>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d03d      	beq.n	8007f1c <HAL_ADC_ConfigChannel+0x198>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ea0:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8007ea8:	b003      	add	sp, #12
 8007eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eac:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8007eb0:	fab2 f282 	clz	r2, r2
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007eb4:	2401      	movs	r4, #1
 8007eb6:	f002 021f 	and.w	r2, r2, #31
 8007eba:	4094      	lsls	r4, r2
 8007ebc:	e77f      	b.n	8007dbe <HAL_ADC_ConfigChannel+0x3a>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007ebe:	f012 0f10 	tst.w	r2, #16
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	d0b4      	beq.n	8007e30 <HAL_ADC_ConfigChannel+0xac>
 8007ec6:	0852      	lsrs	r2, r2, #1
 8007ec8:	f002 0208 	and.w	r2, r2, #8
 8007ecc:	e7b3      	b.n	8007e36 <HAL_ADC_ConfigChannel+0xb2>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007ece:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007ed0:	06a0      	lsls	r0, r4, #26
 8007ed2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8007ed6:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8007eda:	d103      	bne.n	8007ee4 <HAL_ADC_ConfigChannel+0x160>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007edc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007ede:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007ee2:	661a      	str	r2, [r3, #96]	@ 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007ee4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007ee6:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8007eea:	4290      	cmp	r0, r2
 8007eec:	d103      	bne.n	8007ef6 <HAL_ADC_ConfigChannel+0x172>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007eee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007ef0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007ef4:	665a      	str	r2, [r3, #100]	@ 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007ef6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007ef8:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8007efc:	4290      	cmp	r0, r2
 8007efe:	d103      	bne.n	8007f08 <HAL_ADC_ConfigChannel+0x184>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007f00:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007f02:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007f06:	669a      	str	r2, [r3, #104]	@ 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007f08:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007f0a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8007f0e:	4290      	cmp	r0, r2
 8007f10:	d1c0      	bne.n	8007e94 <HAL_ADC_ConfigChannel+0x110>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007f12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007f14:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007f18:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007f1a:	e7bb      	b.n	8007e94 <HAL_ADC_ConfigChannel+0x110>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007f1c:	680c      	ldr	r4, [r1, #0]
 8007f1e:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8007f20:	f3c4 0013 	ubfx	r0, r4, #0, #20
 8007f24:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007f28:	f006 0718 	and.w	r7, r6, #24
 8007f2c:	ea21 0100 	bic.w	r1, r1, r0
 8007f30:	4850      	ldr	r0, [pc, #320]	@ (8008074 <HAL_ADC_ConfigChannel+0x2f0>)
 8007f32:	40f8      	lsrs	r0, r7
 8007f34:	4020      	ands	r0, r4
 8007f36:	4301      	orrs	r1, r0
 8007f38:	f8c3 10c0 	str.w	r1, [r3, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007f3c:	494e      	ldr	r1, [pc, #312]	@ (8008078 <HAL_ADC_ConfigChannel+0x2f4>)
 8007f3e:	428e      	cmp	r6, r1
 8007f40:	d134      	bne.n	8007fac <HAL_ADC_ConfigChannel+0x228>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8007f42:	494e      	ldr	r1, [pc, #312]	@ (800807c <HAL_ADC_ConfigChannel+0x2f8>)
 8007f44:	428b      	cmp	r3, r1
 8007f46:	d152      	bne.n	8007fee <HAL_ADC_ConfigChannel+0x26a>
 8007f48:	494d      	ldr	r1, [pc, #308]	@ (8008080 <HAL_ADC_ConfigChannel+0x2fc>)
 8007f4a:	428c      	cmp	r4, r1
 8007f4c:	d078      	beq.n	8008040 <HAL_ADC_ConfigChannel+0x2bc>
 8007f4e:	494d      	ldr	r1, [pc, #308]	@ (8008084 <HAL_ADC_ConfigChannel+0x300>)
 8007f50:	428c      	cmp	r4, r1
 8007f52:	d077      	beq.n	8008044 <HAL_ADC_ConfigChannel+0x2c0>
 8007f54:	494c      	ldr	r1, [pc, #304]	@ (8008088 <HAL_ADC_ConfigChannel+0x304>)
 8007f56:	428c      	cmp	r4, r1
 8007f58:	d076      	beq.n	8008048 <HAL_ADC_ConfigChannel+0x2c4>
 8007f5a:	494c      	ldr	r1, [pc, #304]	@ (800808c <HAL_ADC_ConfigChannel+0x308>)
 8007f5c:	428c      	cmp	r4, r1
 8007f5e:	d075      	beq.n	800804c <HAL_ADC_ConfigChannel+0x2c8>
 8007f60:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8007f64:	3110      	adds	r1, #16
 8007f66:	428c      	cmp	r4, r1
 8007f68:	d072      	beq.n	8008050 <HAL_ADC_ConfigChannel+0x2cc>
 8007f6a:	4949      	ldr	r1, [pc, #292]	@ (8008090 <HAL_ADC_ConfigChannel+0x30c>)
 8007f6c:	428c      	cmp	r4, r1
 8007f6e:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8007f72:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8007f76:	d06d      	beq.n	8008054 <HAL_ADC_ConfigChannel+0x2d0>
 8007f78:	428c      	cmp	r4, r1
 8007f7a:	d05d      	beq.n	8008038 <HAL_ADC_ConfigChannel+0x2b4>
 8007f7c:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8007f80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f84:	428c      	cmp	r4, r1
 8007f86:	d055      	beq.n	8008034 <HAL_ADC_ConfigChannel+0x2b0>
 8007f88:	4942      	ldr	r1, [pc, #264]	@ (8008094 <HAL_ADC_ConfigChannel+0x310>)
 8007f8a:	428c      	cmp	r4, r1
 8007f8c:	d056      	beq.n	800803c <HAL_ADC_ConfigChannel+0x2b8>
 8007f8e:	4842      	ldr	r0, [pc, #264]	@ (8008098 <HAL_ADC_ConfigChannel+0x314>)
 8007f90:	4942      	ldr	r1, [pc, #264]	@ (800809c <HAL_ADC_ConfigChannel+0x318>)
 8007f92:	4284      	cmp	r4, r0
 8007f94:	bf08      	it	eq
 8007f96:	460a      	moveq	r2, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8007f98:	f3c2 0113 	ubfx	r1, r2, #0, #20
 8007f9c:	2900      	cmp	r1, #0
 8007f9e:	d15b      	bne.n	8008058 <HAL_ADC_ConfigChannel+0x2d4>
 8007fa0:	0e91      	lsrs	r1, r2, #26
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	408a      	lsls	r2, r1
 8007fa6:	69d9      	ldr	r1, [r3, #28]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	61da      	str	r2, [r3, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007fac:	2c00      	cmp	r4, #0
 8007fae:	f6bf af77 	bge.w	8007ea0 <HAL_ADC_ConfigChannel+0x11c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007fb2:	4932      	ldr	r1, [pc, #200]	@ (800807c <HAL_ADC_ConfigChannel+0x2f8>)
 8007fb4:	428b      	cmp	r3, r1
 8007fb6:	d059      	beq.n	800806c <HAL_ADC_ConfigChannel+0x2e8>
 8007fb8:	4e39      	ldr	r6, [pc, #228]	@ (80080a0 <HAL_ADC_ConfigChannel+0x31c>)
 8007fba:	4a3a      	ldr	r2, [pc, #232]	@ (80080a4 <HAL_ADC_ConfigChannel+0x320>)
 8007fbc:	483a      	ldr	r0, [pc, #232]	@ (80080a8 <HAL_ADC_ConfigChannel+0x324>)
 8007fbe:	42b3      	cmp	r3, r6
 8007fc0:	bf08      	it	eq
 8007fc2:	4602      	moveq	r2, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007fc4:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007fc6:	6892      	ldr	r2, [r2, #8]
 8007fc8:	d002      	beq.n	8007fd0 <HAL_ADC_ConfigChannel+0x24c>
 8007fca:	4935      	ldr	r1, [pc, #212]	@ (80080a0 <HAL_ADC_ConfigChannel+0x31c>)
 8007fcc:	428b      	cmp	r3, r1
 8007fce:	d17d      	bne.n	80080cc <HAL_ADC_ConfigChannel+0x348>
 8007fd0:	482a      	ldr	r0, [pc, #168]	@ (800807c <HAL_ADC_ConfigChannel+0x2f8>)
 8007fd2:	f7ff fcff 	bl	80079d4 <LL_ADC_IsEnabled>
 8007fd6:	4601      	mov	r1, r0
 8007fd8:	4831      	ldr	r0, [pc, #196]	@ (80080a0 <HAL_ADC_ConfigChannel+0x31c>)
 8007fda:	f7ff fcfb 	bl	80079d4 <LL_ADC_IsEnabled>
 8007fde:	4301      	orrs	r1, r0
 8007fe0:	d079      	beq.n	80080d6 <HAL_ADC_ConfigChannel+0x352>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007fe2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8007fe4:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007fe6:	f043 0320 	orr.w	r3, r3, #32
 8007fea:	656b      	str	r3, [r5, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 8007fec:	e759      	b.n	8007ea2 <HAL_ADC_ConfigChannel+0x11e>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8007fee:	492c      	ldr	r1, [pc, #176]	@ (80080a0 <HAL_ADC_ConfigChannel+0x31c>)
 8007ff0:	428b      	cmp	r3, r1
 8007ff2:	d1d1      	bne.n	8007f98 <HAL_ADC_ConfigChannel+0x214>
 8007ff4:	4922      	ldr	r1, [pc, #136]	@ (8008080 <HAL_ADC_ConfigChannel+0x2fc>)
 8007ff6:	428c      	cmp	r4, r1
 8007ff8:	d022      	beq.n	8008040 <HAL_ADC_ConfigChannel+0x2bc>
 8007ffa:	4922      	ldr	r1, [pc, #136]	@ (8008084 <HAL_ADC_ConfigChannel+0x300>)
 8007ffc:	428c      	cmp	r4, r1
 8007ffe:	d021      	beq.n	8008044 <HAL_ADC_ConfigChannel+0x2c0>
 8008000:	4921      	ldr	r1, [pc, #132]	@ (8008088 <HAL_ADC_ConfigChannel+0x304>)
 8008002:	428c      	cmp	r4, r1
 8008004:	d020      	beq.n	8008048 <HAL_ADC_ConfigChannel+0x2c4>
 8008006:	4921      	ldr	r1, [pc, #132]	@ (800808c <HAL_ADC_ConfigChannel+0x308>)
 8008008:	428c      	cmp	r4, r1
 800800a:	d01f      	beq.n	800804c <HAL_ADC_ConfigChannel+0x2c8>
 800800c:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8008010:	3110      	adds	r1, #16
 8008012:	428c      	cmp	r4, r1
 8008014:	d01c      	beq.n	8008050 <HAL_ADC_ConfigChannel+0x2cc>
 8008016:	491e      	ldr	r1, [pc, #120]	@ (8008090 <HAL_ADC_ConfigChannel+0x30c>)
 8008018:	428c      	cmp	r4, r1
 800801a:	d01b      	beq.n	8008054 <HAL_ADC_ConfigChannel+0x2d0>
 800801c:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8008020:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8008024:	428c      	cmp	r4, r1
 8008026:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 800802a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800802e:	d003      	beq.n	8008038 <HAL_ADC_ConfigChannel+0x2b4>
 8008030:	428c      	cmp	r4, r1
 8008032:	d1ac      	bne.n	8007f8e <HAL_ADC_ConfigChannel+0x20a>
 8008034:	4a1d      	ldr	r2, [pc, #116]	@ (80080ac <HAL_ADC_ConfigChannel+0x328>)
 8008036:	e7af      	b.n	8007f98 <HAL_ADC_ConfigChannel+0x214>
 8008038:	4a1d      	ldr	r2, [pc, #116]	@ (80080b0 <HAL_ADC_ConfigChannel+0x32c>)
 800803a:	e7ad      	b.n	8007f98 <HAL_ADC_ConfigChannel+0x214>
 800803c:	4a1d      	ldr	r2, [pc, #116]	@ (80080b4 <HAL_ADC_ConfigChannel+0x330>)
 800803e:	e7ab      	b.n	8007f98 <HAL_ADC_ConfigChannel+0x214>
 8008040:	2201      	movs	r2, #1
 8008042:	e7a9      	b.n	8007f98 <HAL_ADC_ConfigChannel+0x214>
 8008044:	4a1c      	ldr	r2, [pc, #112]	@ (80080b8 <HAL_ADC_ConfigChannel+0x334>)
 8008046:	e7a7      	b.n	8007f98 <HAL_ADC_ConfigChannel+0x214>
 8008048:	4a1c      	ldr	r2, [pc, #112]	@ (80080bc <HAL_ADC_ConfigChannel+0x338>)
 800804a:	e7a5      	b.n	8007f98 <HAL_ADC_ConfigChannel+0x214>
 800804c:	4a1c      	ldr	r2, [pc, #112]	@ (80080c0 <HAL_ADC_ConfigChannel+0x33c>)
 800804e:	e7a3      	b.n	8007f98 <HAL_ADC_ConfigChannel+0x214>
 8008050:	4a1c      	ldr	r2, [pc, #112]	@ (80080c4 <HAL_ADC_ConfigChannel+0x340>)
 8008052:	e7a1      	b.n	8007f98 <HAL_ADC_ConfigChannel+0x214>
 8008054:	4a1c      	ldr	r2, [pc, #112]	@ (80080c8 <HAL_ADC_ConfigChannel+0x344>)
 8008056:	e79f      	b.n	8007f98 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008058:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800805c:	fab2 f282 	clz	r2, r2
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8008060:	2101      	movs	r1, #1
 8008062:	f002 021f 	and.w	r2, r2, #31
 8008066:	fa01 f202 	lsl.w	r2, r1, r2
 800806a:	e79c      	b.n	8007fa6 <HAL_ADC_ConfigChannel+0x222>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800806c:	4a0e      	ldr	r2, [pc, #56]	@ (80080a8 <HAL_ADC_ConfigChannel+0x324>)
 800806e:	e7a9      	b.n	8007fc4 <HAL_ADC_ConfigChannel+0x240>
 8008070:	5c001000 	.word	0x5c001000
 8008074:	000fffff 	.word	0x000fffff
 8008078:	47ff0000 	.word	0x47ff0000
 800807c:	40022000 	.word	0x40022000
 8008080:	04300002 	.word	0x04300002
 8008084:	08600004 	.word	0x08600004
 8008088:	0c900008 	.word	0x0c900008
 800808c:	10c00010 	.word	0x10c00010
 8008090:	2a000400 	.word	0x2a000400
 8008094:	43210000 	.word	0x43210000
 8008098:	4b840000 	.word	0x4b840000
 800809c:	4fb80000 	.word	0x4fb80000
 80080a0:	40022100 	.word	0x40022100
 80080a4:	58026300 	.word	0x58026300
 80080a8:	40022300 	.word	0x40022300
 80080ac:	36902000 	.word	0x36902000
 80080b0:	32601000 	.word	0x32601000
 80080b4:	47520000 	.word	0x47520000
 80080b8:	19200040 	.word	0x19200040
 80080bc:	1d500080 	.word	0x1d500080
 80080c0:	21800100 	.word	0x21800100
 80080c4:	25b00200 	.word	0x25b00200
 80080c8:	2e300800 	.word	0x2e300800
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80080cc:	4828      	ldr	r0, [pc, #160]	@ (8008170 <HAL_ADC_ConfigChannel+0x3ec>)
 80080ce:	f7ff fc81 	bl	80079d4 <LL_ADC_IsEnabled>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d185      	bne.n	8007fe2 <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80080d6:	4827      	ldr	r0, [pc, #156]	@ (8008174 <HAL_ADC_ConfigChannel+0x3f0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80080d8:	f002 71e0 	and.w	r1, r2, #29360128	@ 0x1c00000
 80080dc:	4284      	cmp	r4, r0
 80080de:	d11e      	bne.n	800811e <HAL_ADC_ConfigChannel+0x39a>
 80080e0:	0214      	lsls	r4, r2, #8
 80080e2:	f53f aedd 	bmi.w	8007ea0 <HAL_ADC_ConfigChannel+0x11c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80080e6:	4a22      	ldr	r2, [pc, #136]	@ (8008170 <HAL_ADC_ConfigChannel+0x3ec>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	f47f aed9 	bne.w	8007ea0 <HAL_ADC_ConfigChannel+0x11c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80080ee:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 80080f2:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80080f6:	430b      	orrs	r3, r1
 80080f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80080fc:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008100:	4b1d      	ldr	r3, [pc, #116]	@ (8008178 <HAL_ADC_ConfigChannel+0x3f4>)
 8008102:	4a1e      	ldr	r2, [pc, #120]	@ (800817c <HAL_ADC_ConfigChannel+0x3f8>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	fbb3 f3f2 	udiv	r3, r3, r2
 800810a:	3301      	adds	r3, #1
 800810c:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 800810e:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8008110:	9b01      	ldr	r3, [sp, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f43f aec4 	beq.w	8007ea0 <HAL_ADC_ConfigChannel+0x11c>
                wait_loop_index--;
 8008118:	9b01      	ldr	r3, [sp, #4]
 800811a:	3b01      	subs	r3, #1
 800811c:	e7f7      	b.n	800810e <HAL_ADC_ConfigChannel+0x38a>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800811e:	4818      	ldr	r0, [pc, #96]	@ (8008180 <HAL_ADC_ConfigChannel+0x3fc>)
 8008120:	4284      	cmp	r4, r0
 8008122:	d110      	bne.n	8008146 <HAL_ADC_ConfigChannel+0x3c2>
 8008124:	01d0      	lsls	r0, r2, #7
 8008126:	f53f aebb 	bmi.w	8007ea0 <HAL_ADC_ConfigChannel+0x11c>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800812a:	4a11      	ldr	r2, [pc, #68]	@ (8008170 <HAL_ADC_ConfigChannel+0x3ec>)
 800812c:	4293      	cmp	r3, r2
 800812e:	f47f aeb7 	bne.w	8007ea0 <HAL_ADC_ConfigChannel+0x11c>
 8008132:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 8008136:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800813a:	430b      	orrs	r3, r1
 800813c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008140:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
}
 8008144:	e6ac      	b.n	8007ea0 <HAL_ADC_ConfigChannel+0x11c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008146:	480f      	ldr	r0, [pc, #60]	@ (8008184 <HAL_ADC_ConfigChannel+0x400>)
 8008148:	4284      	cmp	r4, r0
 800814a:	f47f aea9 	bne.w	8007ea0 <HAL_ADC_ConfigChannel+0x11c>
 800814e:	0252      	lsls	r2, r2, #9
 8008150:	f53f aea6 	bmi.w	8007ea0 <HAL_ADC_ConfigChannel+0x11c>
            if (ADC_VREFINT_INSTANCE(hadc))
 8008154:	4a06      	ldr	r2, [pc, #24]	@ (8008170 <HAL_ADC_ConfigChannel+0x3ec>)
 8008156:	4293      	cmp	r3, r2
 8008158:	f47f aea2 	bne.w	8007ea0 <HAL_ADC_ConfigChannel+0x11c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800815c:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 8008160:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8008164:	430b      	orrs	r3, r1
 8008166:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800816a:	e7e9      	b.n	8008140 <HAL_ADC_ConfigChannel+0x3bc>
  __HAL_LOCK(hadc);
 800816c:	2002      	movs	r0, #2
 800816e:	e69b      	b.n	8007ea8 <HAL_ADC_ConfigChannel+0x124>
 8008170:	58026000 	.word	0x58026000
 8008174:	cb840000 	.word	0xcb840000
 8008178:	2400006c 	.word	0x2400006c
 800817c:	00030d40 	.word	0x00030d40
 8008180:	c7520000 	.word	0xc7520000
 8008184:	cfb80000 	.word	0xcfb80000

08008188 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008188:	6803      	ldr	r3, [r0, #0]
{
 800818a:	b570      	push	{r4, r5, r6, lr}
 800818c:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fc24 	bl	80079dc <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008194:	689a      	ldr	r2, [r3, #8]
 8008196:	f002 0208 	and.w	r2, r2, #8
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800819a:	4302      	orrs	r2, r0
 800819c:	d101      	bne.n	80081a2 <ADC_ConversionStop+0x1a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800819e:	2000      	movs	r0, #0
}
 80081a0:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	0192      	lsls	r2, r2, #6
 80081a6:	d53a      	bpl.n	800821e <ADC_ConversionStop+0x96>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80081a8:	8aa0      	ldrh	r0, [r4, #20]
 80081aa:	f240 1201 	movw	r2, #257	@ 0x101
 80081ae:	4290      	cmp	r0, r2
 80081b0:	d135      	bne.n	800821e <ADC_ConversionStop+0x96>
 80081b2:	4a27      	ldr	r2, [pc, #156]	@ (8008250 <ADC_ConversionStop+0xc8>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80081b4:	6819      	ldr	r1, [r3, #0]
 80081b6:	064e      	lsls	r6, r1, #25
 80081b8:	d525      	bpl.n	8008206 <ADC_ConversionStop+0x7e>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80081ba:	2240      	movs	r2, #64	@ 0x40
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80081bc:	2101      	movs	r1, #1
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80081be:	601a      	str	r2, [r3, #0]
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff fc0b 	bl	80079dc <LL_ADC_REG_IsConversionOngoing>
 80081c6:	b150      	cbz	r0, 80081de <ADC_ConversionStop+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80081c8:	689a      	ldr	r2, [r3, #8]
 80081ca:	0795      	lsls	r5, r2, #30
 80081cc:	d407      	bmi.n	80081de <ADC_ConversionStop+0x56>
  MODIFY_REG(ADCx->CR,
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80081d4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80081d8:	f042 0210 	orr.w	r2, r2, #16
 80081dc:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80081de:	2901      	cmp	r1, #1
 80081e0:	d11f      	bne.n	8008222 <ADC_ConversionStop+0x9a>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80081e2:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80081e4:	f7ff fbce 	bl	8007984 <HAL_GetTick>
 80081e8:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	422b      	tst	r3, r5
 80081f0:	d0d5      	beq.n	800819e <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80081f2:	f7ff fbc7 	bl	8007984 <HAL_GetTick>
 80081f6:	1b80      	subs	r0, r0, r6
 80081f8:	2805      	cmp	r0, #5
 80081fa:	d9f6      	bls.n	80081ea <ADC_ConversionStop+0x62>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	422b      	tst	r3, r5
 8008202:	d0f2      	beq.n	80081ea <ADC_ConversionStop+0x62>
 8008204:	e001      	b.n	800820a <ADC_ConversionStop+0x82>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008206:	3a01      	subs	r2, #1
 8008208:	d1d4      	bne.n	80081b4 <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800820a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 800820c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800820e:	f043 0310 	orr.w	r3, r3, #16
 8008212:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008214:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 800821c:	e7c0      	b.n	80081a0 <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800821e:	2902      	cmp	r1, #2
 8008220:	d1ce      	bne.n	80081c0 <ADC_ConversionStop+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	0710      	lsls	r0, r2, #28
 8008226:	d50a      	bpl.n	800823e <ADC_ConversionStop+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	0792      	lsls	r2, r2, #30
 800822c:	d407      	bmi.n	800823e <ADC_ConversionStop+0xb6>
  MODIFY_REG(ADCx->CR,
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008234:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8008238:	f042 0220 	orr.w	r2, r2, #32
 800823c:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 800823e:	2902      	cmp	r1, #2
 8008240:	d003      	beq.n	800824a <ADC_ConversionStop+0xc2>
 8008242:	2903      	cmp	r1, #3
 8008244:	d1cd      	bne.n	80081e2 <ADC_ConversionStop+0x5a>
 8008246:	250c      	movs	r5, #12
 8008248:	e7cc      	b.n	80081e4 <ADC_ConversionStop+0x5c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800824a:	2508      	movs	r5, #8
 800824c:	e7ca      	b.n	80081e4 <ADC_ConversionStop+0x5c>
 800824e:	bf00      	nop
 8008250:	000cdc01 	.word	0x000cdc01

08008254 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008254:	6802      	ldr	r2, [r0, #0]
{
 8008256:	b570      	push	{r4, r5, r6, lr}
 8008258:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800825a:	4610      	mov	r0, r2
 800825c:	f7ff fbba 	bl	80079d4 <LL_ADC_IsEnabled>
 8008260:	b108      	cbz	r0, 8008266 <ADC_Enable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008262:	2000      	movs	r0, #0
}
 8008264:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008266:	6891      	ldr	r1, [r2, #8]
 8008268:	4b22      	ldr	r3, [pc, #136]	@ (80082f4 <ADC_Enable+0xa0>)
 800826a:	4219      	tst	r1, r3
 800826c:	d009      	beq.n	8008282 <ADC_Enable+0x2e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800826e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8008270:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008272:	f043 0310 	orr.w	r3, r3, #16
 8008276:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008278:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800827a:	f043 0301 	orr.w	r3, r3, #1
 800827e:	65a3      	str	r3, [r4, #88]	@ 0x58
            return HAL_ERROR;
 8008280:	e7f0      	b.n	8008264 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 8008282:	6893      	ldr	r3, [r2, #8]
 8008284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008288:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800828c:	f043 0301 	orr.w	r3, r3, #1
 8008290:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8008292:	f7ff fb77 	bl	8007984 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008296:	6822      	ldr	r2, [r4, #0]
 8008298:	4b17      	ldr	r3, [pc, #92]	@ (80082f8 <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 800829a:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800829c:	4917      	ldr	r1, [pc, #92]	@ (80082fc <ADC_Enable+0xa8>)
 800829e:	429a      	cmp	r2, r3
 80082a0:	d00e      	beq.n	80082c0 <ADC_Enable+0x6c>
 80082a2:	f103 53c0 	add.w	r3, r3, #402653184	@ 0x18000000
 80082a6:	4816      	ldr	r0, [pc, #88]	@ (8008300 <ADC_Enable+0xac>)
 80082a8:	f503 4386 	add.w	r3, r3, #17152	@ 0x4300
 80082ac:	428a      	cmp	r2, r1
 80082ae:	bf08      	it	eq
 80082b0:	4603      	moveq	r3, r0
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80082b2:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	d101      	bne.n	80082bc <ADC_Enable+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80082b8:	06d9      	lsls	r1, r3, #27
 80082ba:	d1d2      	bne.n	8008262 <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 80082bc:	4e11      	ldr	r6, [pc, #68]	@ (8008304 <ADC_Enable+0xb0>)
 80082be:	e013      	b.n	80082e8 <ADC_Enable+0x94>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80082c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008300 <ADC_Enable+0xac>)
 80082c2:	e7f6      	b.n	80082b2 <ADC_Enable+0x5e>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80082c4:	4610      	mov	r0, r2
 80082c6:	f7ff fb85 	bl	80079d4 <LL_ADC_IsEnabled>
 80082ca:	b920      	cbnz	r0, 80082d6 <ADC_Enable+0x82>
 80082cc:	6893      	ldr	r3, [r2, #8]
 80082ce:	4033      	ands	r3, r6
 80082d0:	f043 0301 	orr.w	r3, r3, #1
 80082d4:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80082d6:	f7ff fb55 	bl	8007984 <HAL_GetTick>
 80082da:	1b40      	subs	r0, r0, r5
 80082dc:	2802      	cmp	r0, #2
 80082de:	d903      	bls.n	80082e8 <ADC_Enable+0x94>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	07da      	lsls	r2, r3, #31
 80082e6:	d5c2      	bpl.n	800826e <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	07db      	lsls	r3, r3, #31
 80082ee:	d5e9      	bpl.n	80082c4 <ADC_Enable+0x70>
 80082f0:	e7b7      	b.n	8008262 <ADC_Enable+0xe>
 80082f2:	bf00      	nop
 80082f4:	8000003f 	.word	0x8000003f
 80082f8:	40022000 	.word	0x40022000
 80082fc:	40022100 	.word	0x40022100
 8008300:	40022300 	.word	0x40022300
 8008304:	7fffffc0 	.word	0x7fffffc0

08008308 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008308:	4b3b      	ldr	r3, [pc, #236]	@ (80083f8 <HAL_ADC_Start+0xf0>)
{
 800830a:	b570      	push	{r4, r5, r6, lr}
 800830c:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800830e:	6800      	ldr	r0, [r0, #0]
 8008310:	4298      	cmp	r0, r3
 8008312:	d057      	beq.n	80083c4 <HAL_ADC_Start+0xbc>
 8008314:	f103 53c0 	add.w	r3, r3, #402653184	@ 0x18000000
 8008318:	4938      	ldr	r1, [pc, #224]	@ (80083fc <HAL_ADC_Start+0xf4>)
 800831a:	4a39      	ldr	r2, [pc, #228]	@ (8008400 <HAL_ADC_Start+0xf8>)
 800831c:	f503 4386 	add.w	r3, r3, #17152	@ 0x4300
 8008320:	4288      	cmp	r0, r1
 8008322:	bf08      	it	eq
 8008324:	4613      	moveq	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008326:	689e      	ldr	r6, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008328:	f7ff fb58 	bl	80079dc <LL_ADC_REG_IsConversionOngoing>
 800832c:	4605      	mov	r5, r0
 800832e:	2800      	cmp	r0, #0
 8008330:	d15f      	bne.n	80083f2 <HAL_ADC_Start+0xea>
    __HAL_LOCK(hadc);
 8008332:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8008336:	2b01      	cmp	r3, #1
 8008338:	d05b      	beq.n	80083f2 <HAL_ADC_Start+0xea>
 800833a:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800833c:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800833e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8008342:	f7ff ff87 	bl	8008254 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8008346:	2800      	cmp	r0, #0
 8008348:	d150      	bne.n	80083ec <HAL_ADC_Start+0xe4>
      ADC_STATE_CLR_SET(hadc->State,
 800834a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800834c:	f006 011f 	and.w	r1, r6, #31
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008350:	4a2a      	ldr	r2, [pc, #168]	@ (80083fc <HAL_ADC_Start+0xf4>)
      ADC_STATE_CLR_SET(hadc->State,
 8008352:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008356:	f023 0301 	bic.w	r3, r3, #1
 800835a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800835e:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	4293      	cmp	r3, r2
 8008364:	d130      	bne.n	80083c8 <HAL_ADC_Start+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008366:	bb89      	cbnz	r1, 80083cc <HAL_ADC_Start+0xc4>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008368:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800836c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 800836e:	f425 1580 	bic.w	r5, r5, #1048576	@ 0x100000
 8008372:	6565      	str	r5, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008374:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8008376:	f415 5580 	ands.w	r5, r5, #4096	@ 0x1000
 800837a:	d002      	beq.n	8008382 <HAL_ADC_Start+0x7a>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800837c:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 800837e:	f025 0506 	bic.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8008382:	65a5      	str	r5, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008384:	251c      	movs	r5, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008386:	4293      	cmp	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008388:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 800838a:	f04f 0500 	mov.w	r5, #0
 800838e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008392:	d005      	beq.n	80083a0 <HAL_ADC_Start+0x98>
 8008394:	f240 2521 	movw	r5, #545	@ 0x221
 8008398:	fa25 f101 	lsr.w	r1, r5, r1
 800839c:	07c9      	lsls	r1, r1, #31
 800839e:	d517      	bpl.n	80083d0 <HAL_ADC_Start+0xc8>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	0192      	lsls	r2, r2, #6
 80083a4:	d505      	bpl.n	80083b2 <HAL_ADC_Start+0xaa>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80083a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083a8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80083ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80083b0:	6562      	str	r2, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80083b8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80083bc:	f042 0204 	orr.w	r2, r2, #4
 80083c0:	609a      	str	r2, [r3, #8]
}
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80083c4:	4b0e      	ldr	r3, [pc, #56]	@ (8008400 <HAL_ADC_Start+0xf8>)
 80083c6:	e7ae      	b.n	8008326 <HAL_ADC_Start+0x1e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80083c8:	461a      	mov	r2, r3
 80083ca:	e7cf      	b.n	800836c <HAL_ADC_Start+0x64>
 80083cc:	4a0a      	ldr	r2, [pc, #40]	@ (80083f8 <HAL_ADC_Start+0xf0>)
 80083ce:	e7d1      	b.n	8008374 <HAL_ADC_Start+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80083d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80083d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083d6:	6563      	str	r3, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80083d8:	68d3      	ldr	r3, [r2, #12]
 80083da:	019b      	lsls	r3, r3, #6
 80083dc:	d5f1      	bpl.n	80083c2 <HAL_ADC_Start+0xba>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80083de:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80083e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80083e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80083e8:	6563      	str	r3, [r4, #84]	@ 0x54
 80083ea:	e7ea      	b.n	80083c2 <HAL_ADC_Start+0xba>
      __HAL_UNLOCK(hadc);
 80083ec:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 80083f0:	e7e7      	b.n	80083c2 <HAL_ADC_Start+0xba>
    __HAL_LOCK(hadc);
 80083f2:	2002      	movs	r0, #2
 80083f4:	e7e5      	b.n	80083c2 <HAL_ADC_Start+0xba>
 80083f6:	bf00      	nop
 80083f8:	40022000 	.word	0x40022000
 80083fc:	40022100 	.word	0x40022100
 8008400:	40022300 	.word	0x40022300

08008404 <ADC_Disable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008404:	6802      	ldr	r2, [r0, #0]
{
 8008406:	b538      	push	{r3, r4, r5, lr}
 8008408:	4604      	mov	r4, r0

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800840a:	4610      	mov	r0, r2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800840c:	6893      	ldr	r3, [r2, #8]
 800840e:	f7ff fae1 	bl	80079d4 <LL_ADC_IsEnabled>
 8008412:	b908      	cbnz	r0, 8008418 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008414:	2000      	movs	r0, #0
}
 8008416:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8008418:	0799      	lsls	r1, r3, #30
 800841a:	d4fb      	bmi.n	8008414 <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800841c:	6893      	ldr	r3, [r2, #8]
 800841e:	f003 030d 	and.w	r3, r3, #13
 8008422:	2b01      	cmp	r3, #1
 8008424:	d119      	bne.n	800845a <ADC_Disable+0x56>
  MODIFY_REG(ADCx->CR,
 8008426:	6893      	ldr	r3, [r2, #8]
 8008428:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800842c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008430:	f043 0302 	orr.w	r3, r3, #2
 8008434:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008436:	2303      	movs	r3, #3
 8008438:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800843a:	f7ff faa3 	bl	8007984 <HAL_GetTick>
 800843e:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	07db      	lsls	r3, r3, #31
 8008446:	d5e5      	bpl.n	8008414 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008448:	f7ff fa9c 	bl	8007984 <HAL_GetTick>
 800844c:	1b40      	subs	r0, r0, r5
 800844e:	2802      	cmp	r0, #2
 8008450:	d9f6      	bls.n	8008440 <ADC_Disable+0x3c>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	07da      	lsls	r2, r3, #31
 8008458:	d5f2      	bpl.n	8008440 <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800845a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 800845c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800845e:	f043 0310 	orr.w	r3, r3, #16
 8008462:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008464:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008466:	f043 0301 	orr.w	r3, r3, #1
 800846a:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 800846c:	e7d3      	b.n	8008416 <ADC_Disable+0x12>

0800846e <HAL_ADC_Stop>:
{
 800846e:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8008470:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8008474:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8008476:	2b01      	cmp	r3, #1
 8008478:	d016      	beq.n	80084a8 <HAL_ADC_Stop+0x3a>
 800847a:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800847c:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 800847e:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008482:	f7ff fe81 	bl	8008188 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8008486:	b958      	cbnz	r0, 80084a0 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8008488:	4620      	mov	r0, r4
 800848a:	f7ff ffbb 	bl	8008404 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800848e:	b938      	cbnz	r0, 80084a0 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8008490:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008492:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008496:	f023 0301 	bic.w	r3, r3, #1
 800849a:	f043 0301 	orr.w	r3, r3, #1
 800849e:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 80084a0:	2300      	movs	r3, #0
 80084a2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80084a6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80084a8:	2002      	movs	r0, #2
 80084aa:	e7fc      	b.n	80084a6 <HAL_ADC_Stop+0x38>

080084ac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80084ac:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80084ae:	4a43      	ldr	r2, [pc, #268]	@ (80085bc <ADC_ConfigureBoostMode+0x110>)
{
 80084b0:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80084b2:	6803      	ldr	r3, [r0, #0]
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d003      	beq.n	80084c0 <ADC_ConfigureBoostMode+0x14>
 80084b8:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80084bc:	4293      	cmp	r3, r2
 80084be:	d125      	bne.n	800850c <ADC_ConfigureBoostMode+0x60>
 80084c0:	4b3f      	ldr	r3, [pc, #252]	@ (80085c0 <ADC_ConfigureBoostMode+0x114>)
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80084c8:	bf14      	ite	ne
 80084ca:	2301      	movne	r3, #1
 80084cc:	2300      	moveq	r3, #0
 80084ce:	b9fb      	cbnz	r3, 8008510 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80084d0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80084d4:	2100      	movs	r1, #0
 80084d6:	f005 f8b5 	bl	800d644 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80084da:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80084dc:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 80084de:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80084e2:	d04a      	beq.n	800857a <ADC_ConfigureBoostMode+0xce>
 80084e4:	d83f      	bhi.n	8008566 <ADC_ConfigureBoostMode+0xba>
 80084e6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80084ea:	d044      	beq.n	8008576 <ADC_ConfigureBoostMode+0xca>
 80084ec:	d836      	bhi.n	800855c <ADC_ConfigureBoostMode+0xb0>
 80084ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084f2:	d008      	beq.n	8008506 <ADC_ConfigureBoostMode+0x5a>
 80084f4:	d82c      	bhi.n	8008550 <ADC_ConfigureBoostMode+0xa4>
 80084f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80084fa:	d004      	beq.n	8008506 <ADC_ConfigureBoostMode+0x5a>
 80084fc:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008500:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8008504:	d116      	bne.n	8008534 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008506:	0c9b      	lsrs	r3, r3, #18
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	e00f      	b.n	800852c <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800850c:	4b2d      	ldr	r3, [pc, #180]	@ (80085c4 <ADC_ConfigureBoostMode+0x118>)
 800850e:	e7d8      	b.n	80084c2 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8008510:	f004 f81a 	bl	800c548 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8008514:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8008516:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8008518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800851c:	d005      	beq.n	800852a <ADC_ConfigureBoostMode+0x7e>
 800851e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008522:	d006      	beq.n	8008532 <ADC_ConfigureBoostMode+0x86>
 8008524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008528:	d104      	bne.n	8008534 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800852a:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800852c:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8008530:	e000      	b.n	8008534 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 8008532:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8008534:	f7ff fa3e 	bl	80079b4 <HAL_GetREVID>
 8008538:	f241 0303 	movw	r3, #4099	@ 0x1003
 800853c:	4298      	cmp	r0, r3
 800853e:	682b      	ldr	r3, [r5, #0]
 8008540:	d823      	bhi.n	800858a <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8008542:	4a21      	ldr	r2, [pc, #132]	@ (80085c8 <ADC_ConfigureBoostMode+0x11c>)
 8008544:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008546:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8008548:	d91b      	bls.n	8008582 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800854a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800854e:	e01a      	b.n	8008586 <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 8008550:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008554:	d0d7      	beq.n	8008506 <ADC_ConfigureBoostMode+0x5a>
 8008556:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800855a:	e7d3      	b.n	8008504 <ADC_ConfigureBoostMode+0x58>
 800855c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008560:	d1e8      	bne.n	8008534 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 8008562:	0944      	lsrs	r4, r0, #5
        break;
 8008564:	e7e6      	b.n	8008534 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 8008566:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800856a:	d008      	beq.n	800857e <ADC_ConfigureBoostMode+0xd2>
 800856c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8008570:	d1e0      	bne.n	8008534 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 8008572:	0a04      	lsrs	r4, r0, #8
        break;
 8008574:	e7de      	b.n	8008534 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 8008576:	0904      	lsrs	r4, r0, #4
        break;
 8008578:	e7dc      	b.n	8008534 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 800857a:	0984      	lsrs	r4, r0, #6
        break;
 800857c:	e7da      	b.n	8008534 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 800857e:	09c4      	lsrs	r4, r0, #7
        break;
 8008580:	e7d8      	b.n	8008534 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008582:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008586:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008588:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 800858a:	4a10      	ldr	r2, [pc, #64]	@ (80085cc <ADC_ConfigureBoostMode+0x120>)
 800858c:	4294      	cmp	r4, r2
 800858e:	d803      	bhi.n	8008598 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008596:	e7f6      	b.n	8008586 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8008598:	4a0d      	ldr	r2, [pc, #52]	@ (80085d0 <ADC_ConfigureBoostMode+0x124>)
 800859a:	4294      	cmp	r4, r2
 800859c:	d803      	bhi.n	80085a6 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80085a4:	e7d1      	b.n	800854a <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 80085a6:	4a0b      	ldr	r2, [pc, #44]	@ (80085d4 <ADC_ConfigureBoostMode+0x128>)
 80085a8:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	bf96      	itet	ls
 80085ae:	f422 7240 	bicls.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80085b2:	f442 7240 	orrhi.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80085b6:	f442 7200 	orrls.w	r2, r2, #512	@ 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80085ba:	e7e4      	b.n	8008586 <ADC_ConfigureBoostMode+0xda>
 80085bc:	40022000 	.word	0x40022000
 80085c0:	40022300 	.word	0x40022300
 80085c4:	58026300 	.word	0x58026300
 80085c8:	01312d00 	.word	0x01312d00
 80085cc:	00bebc21 	.word	0x00bebc21
 80085d0:	017d7841 	.word	0x017d7841
 80085d4:	02faf081 	.word	0x02faf081

080085d8 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 80085d8:	2300      	movs	r3, #0
{
 80085da:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 80085dc:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80085de:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80085e0:	2800      	cmp	r0, #0
 80085e2:	f000 80f0 	beq.w	80087c6 <HAL_ADC_Init+0x1ee>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80085e6:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80085e8:	b925      	cbnz	r5, 80085f4 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 80085ea:	f7f8 fea5 	bl	8001338 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80085ee:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 80085f0:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80085f4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	0090      	lsls	r0, r2, #2
 80085fa:	d505      	bpl.n	8008608 <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80085fc:	689a      	ldr	r2, [r3, #8]
 80085fe:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8008602:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8008606:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008608:	689a      	ldr	r2, [r3, #8]
 800860a:	00d1      	lsls	r1, r2, #3
 800860c:	f140 809d 	bpl.w	800874a <HAL_ADC_Init+0x172>
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	00d2      	lsls	r2, r2, #3
 8008614:	f100 80af 	bmi.w	8008776 <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008618:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800861a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800861c:	f042 0210 	orr.w	r2, r2, #16
 8008620:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008622:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8008624:	f042 0201 	orr.w	r2, r2, #1
 8008628:	65a2      	str	r2, [r4, #88]	@ 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff f9d6 	bl	80079dc <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008630:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008632:	f002 0210 	and.w	r2, r2, #16
 8008636:	4302      	orrs	r2, r0
 8008638:	f040 80c1 	bne.w	80087be <HAL_ADC_Init+0x1e6>
    ADC_STATE_CLR_SET(hadc->State,
 800863c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800863e:	4618      	mov	r0, r3
    ADC_STATE_CLR_SET(hadc->State,
 8008640:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8008644:	f042 0202 	orr.w	r2, r2, #2
 8008648:	6562      	str	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800864a:	f7ff f9c3 	bl	80079d4 <LL_ADC_IsEnabled>
 800864e:	b980      	cbnz	r0, 8008672 <HAL_ADC_Init+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008650:	4e5e      	ldr	r6, [pc, #376]	@ (80087cc <HAL_ADC_Init+0x1f4>)
 8008652:	495f      	ldr	r1, [pc, #380]	@ (80087d0 <HAL_ADC_Init+0x1f8>)
 8008654:	42b3      	cmp	r3, r6
 8008656:	d002      	beq.n	800865e <HAL_ADC_Init+0x86>
 8008658:	428b      	cmp	r3, r1
 800865a:	f040 808e 	bne.w	800877a <HAL_ADC_Init+0x1a2>
 800865e:	485b      	ldr	r0, [pc, #364]	@ (80087cc <HAL_ADC_Init+0x1f4>)
 8008660:	f7ff f9b8 	bl	80079d4 <LL_ADC_IsEnabled>
 8008664:	4602      	mov	r2, r0
 8008666:	485a      	ldr	r0, [pc, #360]	@ (80087d0 <HAL_ADC_Init+0x1f8>)
 8008668:	f7ff f9b4 	bl	80079d4 <LL_ADC_IsEnabled>
 800866c:	4302      	orrs	r2, r0
 800866e:	f000 8092 	beq.w	8008796 <HAL_ADC_Init+0x1be>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8008672:	f7ff f99f 	bl	80079b4 <HAL_GetREVID>
 8008676:	f241 0303 	movw	r3, #4099	@ 0x1003
 800867a:	7f21      	ldrb	r1, [r4, #28]
 800867c:	4298      	cmp	r0, r3
 800867e:	7d62      	ldrb	r2, [r4, #21]
 8008680:	68a0      	ldr	r0, [r4, #8]
 8008682:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008684:	f240 808d 	bls.w	80087a2 <HAL_ADC_Init+0x1ca>
 8008688:	2810      	cmp	r0, #16
 800868a:	f040 808a 	bne.w	80087a2 <HAL_ADC_Init+0x1ca>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800868e:	0352      	lsls	r2, r2, #13
 8008690:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008694:	431a      	orrs	r2, r3
 8008696:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800869a:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800869c:	bf02      	ittt	eq
 800869e:	6a22      	ldreq	r2, [r4, #32]
 80086a0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80086a4:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80086a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80086aa:	b122      	cbz	r2, 80086b6 <HAL_ADC_Init+0xde>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80086ac:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80086b0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80086b2:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80086b4:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	4946      	ldr	r1, [pc, #280]	@ (80087d4 <HAL_ADC_Init+0x1fc>)
 80086ba:	68d0      	ldr	r0, [r2, #12]
 80086bc:	4001      	ands	r1, r0
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086be:	4610      	mov	r0, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80086c0:	4319      	orrs	r1, r3
 80086c2:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086c4:	f7ff f98a 	bl	80079dc <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80086c8:	6893      	ldr	r3, [r2, #8]
 80086ca:	f003 0308 	and.w	r3, r3, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80086ce:	4303      	orrs	r3, r0
 80086d0:	d127      	bne.n	8008722 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80086d2:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80086d4:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80086d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086da:	f023 0303 	bic.w	r3, r3, #3
 80086de:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 80086e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80086e4:	430b      	orrs	r3, r1
 80086e6:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80086e8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d15e      	bne.n	80087ae <HAL_ADC_Init+0x1d6>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80086f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80086f2:	6910      	ldr	r0, [r2, #16]
 80086f4:	1e59      	subs	r1, r3, #1
 80086f6:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	@ 0x40
 80086fa:	4333      	orrs	r3, r6
 80086fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008700:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008702:	430b      	orrs	r3, r1
 8008704:	4934      	ldr	r1, [pc, #208]	@ (80087d8 <HAL_ADC_Init+0x200>)
 8008706:	4001      	ands	r1, r0
 8008708:	430b      	orrs	r3, r1
 800870a:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800870e:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8008710:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8008712:	6913      	ldr	r3, [r2, #16]
 8008714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008716:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800871a:	430b      	orrs	r3, r1
 800871c:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 800871e:	f7ff fec5 	bl	80084ac <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008722:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008724:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008726:	2b01      	cmp	r3, #1
 8008728:	d145      	bne.n	80087b6 <HAL_ADC_Init+0x1de>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800872a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800872c:	69a3      	ldr	r3, [r4, #24]
 800872e:	f021 010f 	bic.w	r1, r1, #15
 8008732:	3b01      	subs	r3, #1
 8008734:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008736:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008738:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800873a:	f023 0303 	bic.w	r3, r3, #3
 800873e:	f043 0301 	orr.w	r3, r3, #1
 8008742:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8008744:	4628      	mov	r0, r5
 8008746:	b002      	add	sp, #8
 8008748:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800874a:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800874c:	4923      	ldr	r1, [pc, #140]	@ (80087dc <HAL_ADC_Init+0x204>)
 800874e:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8008752:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8008756:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800875a:	609a      	str	r2, [r3, #8]
 800875c:	4a20      	ldr	r2, [pc, #128]	@ (80087e0 <HAL_ADC_Init+0x208>)
 800875e:	6812      	ldr	r2, [r2, #0]
 8008760:	fbb2 f2f1 	udiv	r2, r2, r1
 8008764:	3201      	adds	r2, #1
      wait_loop_index--;
 8008766:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8008768:	9a01      	ldr	r2, [sp, #4]
 800876a:	2a00      	cmp	r2, #0
 800876c:	f43f af50 	beq.w	8008610 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8008770:	9a01      	ldr	r2, [sp, #4]
 8008772:	3a01      	subs	r2, #1
 8008774:	e7f7      	b.n	8008766 <HAL_ADC_Init+0x18e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008776:	2500      	movs	r5, #0
 8008778:	e757      	b.n	800862a <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800877a:	481a      	ldr	r0, [pc, #104]	@ (80087e4 <HAL_ADC_Init+0x20c>)
 800877c:	f7ff f92a 	bl	80079d4 <LL_ADC_IsEnabled>
 8008780:	2800      	cmp	r0, #0
 8008782:	f47f af76 	bne.w	8008672 <HAL_ADC_Init+0x9a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008786:	4a18      	ldr	r2, [pc, #96]	@ (80087e8 <HAL_ADC_Init+0x210>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008788:	6893      	ldr	r3, [r2, #8]
 800878a:	6861      	ldr	r1, [r4, #4]
 800878c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8008790:	430b      	orrs	r3, r1
 8008792:	6093      	str	r3, [r2, #8]
}
 8008794:	e76d      	b.n	8008672 <HAL_ADC_Init+0x9a>
 8008796:	42b3      	cmp	r3, r6
 8008798:	d001      	beq.n	800879e <HAL_ADC_Init+0x1c6>
 800879a:	428b      	cmp	r3, r1
 800879c:	d1f3      	bne.n	8008786 <HAL_ADC_Init+0x1ae>
 800879e:	4a13      	ldr	r2, [pc, #76]	@ (80087ec <HAL_ADC_Init+0x214>)
 80087a0:	e7f2      	b.n	8008788 <HAL_ADC_Init+0x1b0>
                  hadc->Init.Overrun                                                    |
 80087a2:	4303      	orrs	r3, r0
 80087a4:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80087a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80087ac:	e775      	b.n	800869a <HAL_ADC_Init+0xc2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80087ae:	6913      	ldr	r3, [r2, #16]
 80087b0:	f023 0301 	bic.w	r3, r3, #1
 80087b4:	e7ab      	b.n	800870e <HAL_ADC_Init+0x136>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80087b6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80087b8:	f023 030f 	bic.w	r3, r3, #15
 80087bc:	e7bb      	b.n	8008736 <HAL_ADC_Init+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80087c0:	f043 0310 	orr.w	r3, r3, #16
 80087c4:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 80087c6:	2501      	movs	r5, #1
 80087c8:	e7bc      	b.n	8008744 <HAL_ADC_Init+0x16c>
 80087ca:	bf00      	nop
 80087cc:	40022000 	.word	0x40022000
 80087d0:	40022100 	.word	0x40022100
 80087d4:	fff0c003 	.word	0xfff0c003
 80087d8:	fc00f81e 	.word	0xfc00f81e
 80087dc:	00030d40 	.word	0x00030d40
 80087e0:	2400006c 	.word	0x2400006c
 80087e4:	58026000 	.word	0x58026000
 80087e8:	58026300 	.word	0x58026300
 80087ec:	40022300 	.word	0x40022300

080087f0 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80087f0:	6880      	ldr	r0, [r0, #8]
}
 80087f2:	f000 0001 	and.w	r0, r0, #1
 80087f6:	4770      	bx	lr

080087f8 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80087f8:	6880      	ldr	r0, [r0, #8]
}
 80087fa:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80087fe:	4770      	bx	lr

08008800 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008800:	4770      	bx	lr

08008802 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 8008802:	4770      	bx	lr

08008804 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8008804:	4770      	bx	lr

08008806 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8008806:	4770      	bx	lr

08008808 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8008808:	4770      	bx	lr
	...

0800880c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800880c:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800880e:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 8008812:	b09a      	sub	sp, #104	@ 0x68
 8008814:	4603      	mov	r3, r0
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008816:	680c      	ldr	r4, [r1, #0]
  __HAL_LOCK(hadc);
 8008818:	2a01      	cmp	r2, #1
 800881a:	d054      	beq.n	80088c6 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 800881c:	2201      	movs	r2, #1

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800881e:	4e2b      	ldr	r6, [pc, #172]	@ (80088cc <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  __HAL_LOCK(hadc);
 8008820:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008824:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008826:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008828:	9016      	str	r0, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800882a:	42b5      	cmp	r5, r6
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800882c:	9017      	str	r0, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800882e:	d10e      	bne.n	800884e <HAL_ADCEx_MultiModeConfigChannel+0x42>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008830:	4827      	ldr	r0, [pc, #156]	@ (80088d0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8008832:	f7ff ffe1 	bl	80087f8 <LL_ADC_REG_IsConversionOngoing>
 8008836:	4606      	mov	r6, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008838:	4628      	mov	r0, r5
 800883a:	f7ff ffdd 	bl	80087f8 <LL_ADC_REG_IsConversionOngoing>
 800883e:	4330      	orrs	r0, r6
 8008840:	d00e      	beq.n	8008860 <HAL_ADCEx_MultiModeConfigChannel+0x54>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008842:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008844:	4610      	mov	r0, r2
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008846:	f041 0120 	orr.w	r1, r1, #32
 800884a:	6559      	str	r1, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800884c:	e023      	b.n	8008896 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800884e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8008850:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008854:	4610      	mov	r0, r2
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008856:	f041 0120 	orr.w	r1, r1, #32
 800885a:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800885c:	b01a      	add	sp, #104	@ 0x68
 800885e:	bd70      	pop	{r4, r5, r6, pc}
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008860:	4a1c      	ldr	r2, [pc, #112]	@ (80088d4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8008862:	b1e4      	cbz	r4, 800889e <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008864:	6890      	ldr	r0, [r2, #8]
 8008866:	684e      	ldr	r6, [r1, #4]
 8008868:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 800886c:	4330      	orrs	r0, r6
 800886e:	6090      	str	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008870:	4628      	mov	r0, r5
 8008872:	f7ff ffbd 	bl	80087f0 <LL_ADC_IsEnabled>
 8008876:	4605      	mov	r5, r0
 8008878:	4815      	ldr	r0, [pc, #84]	@ (80088d0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 800887a:	f7ff ffb9 	bl	80087f0 <LL_ADC_IsEnabled>
 800887e:	4305      	orrs	r5, r0
 8008880:	d108      	bne.n	8008894 <HAL_ADCEx_MultiModeConfigChannel+0x88>
        MODIFY_REG(tmpADC_Common->CCR,
 8008882:	6889      	ldr	r1, [r1, #8]
 8008884:	6890      	ldr	r0, [r2, #8]
 8008886:	430c      	orrs	r4, r1
 8008888:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 800888c:	f021 010f 	bic.w	r1, r1, #15
 8008890:	430c      	orrs	r4, r1
 8008892:	6094      	str	r4, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008894:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return tmp_hal_status;
 800889c:	e7de      	b.n	800885c <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800889e:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80088a0:	4628      	mov	r0, r5
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80088a2:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 80088a6:	6091      	str	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80088a8:	f7ff ffa2 	bl	80087f0 <LL_ADC_IsEnabled>
 80088ac:	4601      	mov	r1, r0
 80088ae:	4808      	ldr	r0, [pc, #32]	@ (80088d0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80088b0:	f7ff ff9e 	bl	80087f0 <LL_ADC_IsEnabled>
 80088b4:	4301      	orrs	r1, r0
 80088b6:	d1ed      	bne.n	8008894 <HAL_ADCEx_MultiModeConfigChannel+0x88>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80088b8:	6891      	ldr	r1, [r2, #8]
 80088ba:	f421 6171 	bic.w	r1, r1, #3856	@ 0xf10
 80088be:	f021 010f 	bic.w	r1, r1, #15
 80088c2:	6091      	str	r1, [r2, #8]
 80088c4:	e7e6      	b.n	8008894 <HAL_ADCEx_MultiModeConfigChannel+0x88>
  __HAL_LOCK(hadc);
 80088c6:	2002      	movs	r0, #2
 80088c8:	e7c8      	b.n	800885c <HAL_ADCEx_MultiModeConfigChannel+0x50>
 80088ca:	bf00      	nop
 80088cc:	40022000 	.word	0x40022000
 80088d0:	40022100 	.word	0x40022100
 80088d4:	40022300 	.word	0x40022300

080088d8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088d8:	4907      	ldr	r1, [pc, #28]	@ (80088f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80088da:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088dc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80088de:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80088e6:	0412      	lsls	r2, r2, #16
 80088e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80088ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80088ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80088f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80088f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80088f6:	4770      	bx	lr
 80088f8:	e000ed00 	.word	0xe000ed00

080088fc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088fc:	4b16      	ldr	r3, [pc, #88]	@ (8008958 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088fe:	b530      	push	{r4, r5, lr}
 8008900:	68dc      	ldr	r4, [r3, #12]
 8008902:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008906:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800890a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800890c:	2b04      	cmp	r3, #4
 800890e:	bf28      	it	cs
 8008910:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008912:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008914:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008918:	bf8c      	ite	hi
 800891a:	3c03      	subhi	r4, #3
 800891c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800891e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8008922:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008924:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008928:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800892c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008930:	fa03 f304 	lsl.w	r3, r3, r4
 8008934:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008938:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800893c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800893e:	db06      	blt.n	800894e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008940:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8008944:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8008948:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800894c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800894e:	f000 000f 	and.w	r0, r0, #15
 8008952:	4a02      	ldr	r2, [pc, #8]	@ (800895c <HAL_NVIC_SetPriority+0x60>)
 8008954:	5413      	strb	r3, [r2, r0]
 8008956:	e7f9      	b.n	800894c <HAL_NVIC_SetPriority+0x50>
 8008958:	e000ed00 	.word	0xe000ed00
 800895c:	e000ed14 	.word	0xe000ed14

08008960 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008960:	2800      	cmp	r0, #0
 8008962:	db07      	blt.n	8008974 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008964:	2301      	movs	r3, #1
 8008966:	0941      	lsrs	r1, r0, #5
 8008968:	f000 001f 	and.w	r0, r0, #31
 800896c:	4a02      	ldr	r2, [pc, #8]	@ (8008978 <HAL_NVIC_EnableIRQ+0x18>)
 800896e:	4083      	lsls	r3, r0
 8008970:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	e000e100 	.word	0xe000e100

0800897c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800897c:	2800      	cmp	r0, #0
 800897e:	db0c      	blt.n	800899a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008980:	0943      	lsrs	r3, r0, #5
 8008982:	2201      	movs	r2, #1
 8008984:	f000 001f 	and.w	r0, r0, #31
 8008988:	4904      	ldr	r1, [pc, #16]	@ (800899c <HAL_NVIC_DisableIRQ+0x20>)
 800898a:	3320      	adds	r3, #32
 800898c:	4082      	lsls	r2, r0
 800898e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008996:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800899a:	4770      	bx	lr
 800899c:	e000e100 	.word	0xe000e100

080089a0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80089a0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80089a4:	4b04      	ldr	r3, [pc, #16]	@ (80089b8 <HAL_MPU_Disable+0x18>)
 80089a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089a8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80089ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	e000ed00 	.word	0xe000ed00

080089bc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80089bc:	4b06      	ldr	r3, [pc, #24]	@ (80089d8 <HAL_MPU_Enable+0x1c>)
 80089be:	f040 0001 	orr.w	r0, r0, #1
 80089c2:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80089c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089c8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80089cc:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80089ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80089d2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80089d6:	4770      	bx	lr
 80089d8:	e000ed00 	.word	0xe000ed00

080089dc <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80089dc:	7843      	ldrb	r3, [r0, #1]
 80089de:	4a14      	ldr	r2, [pc, #80]	@ (8008a30 <HAL_MPU_ConfigRegion+0x54>)
 80089e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80089e4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80089e8:	f023 0301 	bic.w	r3, r3, #1
 80089ec:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80089f0:	6843      	ldr	r3, [r0, #4]
 80089f2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80089f6:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80089f8:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80089fa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80089fc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008a00:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008a02:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008a04:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008a06:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008a0a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008a0c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008a10:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008a12:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008a16:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008a18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008a1c:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008a1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008a22:	7a01      	ldrb	r1, [r0, #8]
 8008a24:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008a28:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	e000ed00 	.word	0xe000ed00

08008a34 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008a34:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008a36:	4604      	mov	r4, r0
 8008a38:	b908      	cbnz	r0, 8008a3e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8008a3a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008a3c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008a3e:	7f43      	ldrb	r3, [r0, #29]
 8008a40:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008a44:	b913      	cbnz	r3, 8008a4c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8008a46:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8008a48:	f7f8 fcf4 	bl	8001434 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008a50:	7923      	ldrb	r3, [r4, #4]
 8008a52:	b9e3      	cbnz	r3, 8008a8e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	4a13      	ldr	r2, [pc, #76]	@ (8008aa4 <HAL_CRC_Init+0x70>)
 8008a58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	f022 0218 	bic.w	r2, r2, #24
 8008a60:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008a62:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008a64:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008a66:	b9d2      	cbnz	r2, 8008a9e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008a68:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008a6c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8008a6e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	6961      	ldr	r1, [r4, #20]
 8008a74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008a78:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008a7a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008a7c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a84:	430a      	orrs	r2, r1
 8008a86:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8008a8c:	e7d6      	b.n	8008a3c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008a8e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 f808 	bl	8008aa8 <HAL_CRCEx_Polynomial_Set>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d0e2      	beq.n	8008a62 <HAL_CRC_Init+0x2e>
 8008a9c:	e7cd      	b.n	8008a3a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008a9e:	6922      	ldr	r2, [r4, #16]
 8008aa0:	e7e4      	b.n	8008a6c <HAL_CRC_Init+0x38>
 8008aa2:	bf00      	nop
 8008aa4:	04c11db7 	.word	0x04c11db7

08008aa8 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008aa8:	07cb      	lsls	r3, r1, #31
{
 8008aaa:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008aac:	d50d      	bpl.n	8008aca <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008aae:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	d31d      	bcc.n	8008af0 <HAL_CRCEx_Polynomial_Set+0x48>
 8008ab4:	fa21 f403 	lsr.w	r4, r1, r3
 8008ab8:	07e4      	lsls	r4, r4, #31
 8008aba:	d5f9      	bpl.n	8008ab0 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8008abc:	2a10      	cmp	r2, #16
 8008abe:	d013      	beq.n	8008ae8 <HAL_CRCEx_Polynomial_Set+0x40>
 8008ac0:	2a10      	cmp	r2, #16
 8008ac2:	d804      	bhi.n	8008ace <HAL_CRCEx_Polynomial_Set+0x26>
 8008ac4:	b13a      	cbz	r2, 8008ad6 <HAL_CRCEx_Polynomial_Set+0x2e>
 8008ac6:	2a08      	cmp	r2, #8
 8008ac8:	d010      	beq.n	8008aec <HAL_CRCEx_Polynomial_Set+0x44>
 8008aca:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8008acc:	e00b      	b.n	8008ae6 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8008ace:	2a18      	cmp	r2, #24
 8008ad0:	d1fb      	bne.n	8008aca <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8008ad2:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8008ad4:	d8f9      	bhi.n	8008aca <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008ad6:	6800      	ldr	r0, [r0, #0]
 8008ad8:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008ada:	6883      	ldr	r3, [r0, #8]
 8008adc:	f023 0318 	bic.w	r3, r3, #24
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	6083      	str	r3, [r0, #8]
 8008ae4:	2000      	movs	r0, #0
}
 8008ae6:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8008ae8:	2b07      	cmp	r3, #7
 8008aea:	e7f3      	b.n	8008ad4 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8008aec:	2b0f      	cmp	r3, #15
 8008aee:	e7f1      	b.n	8008ad4 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8008af0:	2a10      	cmp	r2, #16
 8008af2:	d1e5      	bne.n	8008ac0 <HAL_CRCEx_Polynomial_Set+0x18>
 8008af4:	e7e9      	b.n	8008aca <HAL_CRCEx_Polynomial_Set+0x22>

08008af6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008af6:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008af8:	4604      	mov	r4, r0
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d036      	beq.n	8008b6c <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008afe:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8008b02:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008b06:	b91b      	cbnz	r3, 8008b10 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008b08:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008b0c:	f7f8 fcaa 	bl	8001464 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008b10:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008b12:	69e0      	ldr	r0, [r4, #28]
 8008b14:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008b16:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008b1e:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008b20:	6819      	ldr	r1, [r3, #0]
 8008b22:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8008b26:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008b2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008b30:	68a2      	ldr	r2, [r4, #8]
 8008b32:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8008b36:	4302      	orrs	r2, r0
 8008b38:	f021 0101 	bic.w	r1, r1, #1
 8008b3c:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008b3e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008b40:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008b42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b44:	0c12      	lsrs	r2, r2, #16
 8008b46:	0412      	lsls	r2, r2, #16
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008b4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008b4e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8008b52:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8008b56:	0552      	lsls	r2, r2, #21
 8008b58:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008b5c:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008b62:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008b64:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008b66:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8008b6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008b6c:	2001      	movs	r0, #1
 8008b6e:	e7fc      	b.n	8008b6a <HAL_DMA2D_Init+0x74>

08008b70 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8008b70:	4770      	bx	lr

08008b72 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8008b72:	4770      	bx	lr

08008b74 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008b74:	6803      	ldr	r3, [r0, #0]
{
 8008b76:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008b78:	685e      	ldr	r6, [r3, #4]
{
 8008b7a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008b7c:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008b7e:	07f2      	lsls	r2, r6, #31
 8008b80:	d514      	bpl.n	8008bac <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008b82:	05e9      	lsls	r1, r5, #23
 8008b84:	d512      	bpl.n	8008bac <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b8c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008b8e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8008b90:	f042 0201 	orr.w	r2, r2, #1
 8008b94:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008b96:	2201      	movs	r2, #1
 8008b98:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008b9a:	2304      	movs	r3, #4
 8008b9c:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8008ba6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008ba8:	b103      	cbz	r3, 8008bac <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8008baa:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008bac:	06b2      	lsls	r2, r6, #26
 8008bae:	d516      	bpl.n	8008bde <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008bb0:	04ab      	lsls	r3, r5, #18
 8008bb2:	d514      	bpl.n	8008bde <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bbc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008bc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bc4:	f043 0302 	orr.w	r3, r3, #2
 8008bc8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008bca:	2304      	movs	r3, #4
 8008bcc:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8008bd6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008bd8:	b10b      	cbz	r3, 8008bde <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8008bda:	4620      	mov	r0, r4
 8008bdc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008bde:	0730      	lsls	r0, r6, #28
 8008be0:	d516      	bpl.n	8008c10 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008be2:	0529      	lsls	r1, r5, #20
 8008be4:	d514      	bpl.n	8008c10 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008bee:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008bf0:	2208      	movs	r2, #8
 8008bf2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008bf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bf6:	f043 0304 	orr.w	r3, r3, #4
 8008bfa:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008c02:	2300      	movs	r3, #0
 8008c04:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8008c08:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008c0a:	b10b      	cbz	r3, 8008c10 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008c10:	0772      	lsls	r2, r6, #29
 8008c12:	d50b      	bpl.n	8008c2c <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008c14:	056b      	lsls	r3, r5, #21
 8008c16:	d509      	bpl.n	8008c2c <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008c18:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008c1a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c22:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008c24:	2204      	movs	r2, #4
 8008c26:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008c28:	f7ff ffa2 	bl	8008b70 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008c2c:	07b0      	lsls	r0, r6, #30
 8008c2e:	d514      	bpl.n	8008c5a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008c30:	05a9      	lsls	r1, r5, #22
 8008c32:	d512      	bpl.n	8008c5a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008c3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008c3e:	2202      	movs	r2, #2
 8008c40:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008c42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c44:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008c46:	2301      	movs	r3, #1
 8008c48:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8008c52:	6a23      	ldr	r3, [r4, #32]
 8008c54:	b10b      	cbz	r3, 8008c5a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8008c56:	4620      	mov	r0, r4
 8008c58:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008c5a:	06f2      	lsls	r2, r6, #27
 8008c5c:	d513      	bpl.n	8008c86 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008c5e:	04eb      	lsls	r3, r5, #19
 8008c60:	d511      	bpl.n	8008c86 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008c62:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008c64:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008c6e:	2210      	movs	r2, #16
 8008c70:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008c72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c74:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008c76:	2301      	movs	r3, #1
 8008c78:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008c82:	f7ff ff76 	bl	8008b72 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8008c86:	bd70      	pop	{r4, r5, r6, pc}

08008c88 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8008c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	460d      	mov	r5, r1
 8008c90:	4614      	mov	r4, r2
 8008c92:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c94:	f7fe fe76 	bl	8007984 <HAL_GetTick>
 8008c98:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008c9e:	07d2      	lsls	r2, r2, #31
 8008ca0:	d50a      	bpl.n	8008cb8 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008ca2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8008ca6:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8008ca8:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008caa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008cae:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8008cb2:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8008cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008cb8:	f7fe fe64 	bl	8007984 <HAL_GetTick>
 8008cbc:	eba0 0008 	sub.w	r0, r0, r8
 8008cc0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008cc4:	d9e9      	bls.n	8008c9a <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8008cc6:	2003      	movs	r0, #3
 8008cc8:	e7f4      	b.n	8008cb4 <DSI_ShortWrite.constprop.0+0x2c>

08008cca <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008cca:	7c03      	ldrb	r3, [r0, #16]
{
 8008ccc:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d05b      	beq.n	8008d8a <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8008cd2:	6803      	ldr	r3, [r0, #0]
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008cda:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008cde:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8008ce0:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008ce2:	d507      	bpl.n	8008cf4 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008ce4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008ce8:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8008cec:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8008cf0:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8008cf4:	0788      	lsls	r0, r1, #30
 8008cf6:	d505      	bpl.n	8008d04 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008cf8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008cfc:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8008d00:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8008d04:	0748      	lsls	r0, r1, #29
 8008d06:	d505      	bpl.n	8008d14 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8008d08:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008d0c:	f040 0001 	orr.w	r0, r0, #1
 8008d10:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8008d14:	0708      	lsls	r0, r1, #28
 8008d16:	d505      	bpl.n	8008d24 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8008d18:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008d1c:	f040 0002 	orr.w	r0, r0, #2
 8008d20:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8008d24:	06c8      	lsls	r0, r1, #27
 8008d26:	d505      	bpl.n	8008d34 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8008d28:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008d2c:	f040 000c 	orr.w	r0, r0, #12
 8008d30:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8008d34:	0688      	lsls	r0, r1, #26
 8008d36:	d505      	bpl.n	8008d44 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8008d38:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008d3c:	f040 0010 	orr.w	r0, r0, #16
 8008d40:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8008d44:	0648      	lsls	r0, r1, #25
 8008d46:	d505      	bpl.n	8008d54 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8008d48:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008d4c:	f040 0020 	orr.w	r0, r0, #32
 8008d50:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008d54:	0608      	lsls	r0, r1, #24
 8008d56:	d505      	bpl.n	8008d64 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8008d58:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008d5c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8008d60:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008d64:	05c8      	lsls	r0, r1, #23
 8008d66:	d505      	bpl.n	8008d74 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008d68:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008d6c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8008d70:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8008d74:	0589      	lsls	r1, r1, #22
 8008d76:	d505      	bpl.n	8008d84 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008d78:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8008d7c:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8008d80:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8008d84:	2000      	movs	r0, #0
 8008d86:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8008d88:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008d8a:	2002      	movs	r0, #2
}
 8008d8c:	4770      	bx	lr
	...

08008d90 <HAL_DSI_Init>:
{
 8008d90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008d92:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8008d94:	4604      	mov	r4, r0
 8008d96:	2800      	cmp	r0, #0
 8008d98:	f000 80ea 	beq.w	8008f70 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008d9c:	7c43      	ldrb	r3, [r0, #17]
 8008d9e:	b90b      	cbnz	r3, 8008da4 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8008da0:	f7f8 fb84 	bl	80014ac <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008da4:	2303      	movs	r3, #3
 8008da6:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8008da8:	2300      	movs	r3, #0
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8008db2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008db6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8008dba:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008dbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8008dc6:	f7fe fddd 	bl	8007984 <HAL_GetTick>
 8008dca:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008dcc:	6822      	ldr	r2, [r4, #0]
 8008dce:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8008dd2:	04d9      	lsls	r1, r3, #19
 8008dd4:	d56e      	bpl.n	8008eb4 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008dd6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008dda:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8008dde:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8008de2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008de6:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008dea:	e9d5 0300 	ldrd	r0, r3, [r5]
 8008dee:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008df0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008df4:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008df6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8008dfa:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008dfc:	430b      	orrs	r3, r1
 8008dfe:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008e02:	2300      	movs	r3, #0
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8008e12:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8008e1e:	f7fe fdb7 	bl	8007990 <HAL_Delay>
  tickstart = HAL_GetTick();
 8008e22:	f7fe fdaf 	bl	8007984 <HAL_GetTick>
 8008e26:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008e2e:	05d2      	lsls	r2, r2, #23
 8008e30:	d548      	bpl.n	8008ec4 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8008e32:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008e34:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 8008e36:	9202      	str	r2, [sp, #8]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	f042 0201 	orr.w	r2, r2, #1
 8008e3e:	605a      	str	r2, [r3, #4]
 8008e40:	685a      	ldr	r2, [r3, #4]
 8008e42:	f002 0201 	and.w	r2, r2, #1
 8008e46:	9202      	str	r2, [sp, #8]
 8008e48:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008e50:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008e56:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008e58:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8008e5a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008e5e:	f042 0202 	orr.w	r2, r2, #2
 8008e62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8008e66:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008e6a:	f042 0204 	orr.w	r2, r2, #4
 8008e6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008e72:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008e76:	f022 0203 	bic.w	r2, r2, #3
 8008e7a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008e7e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008e82:	430a      	orrs	r2, r1
 8008e84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8008e88:	f7fe fd7c 	bl	8007984 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8008e8c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008e8e:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8008e90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e94:	079b      	lsls	r3, r3, #30
 8008e96:	d025      	beq.n	8008ee4 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e9e:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8008ea2:	2b94      	cmp	r3, #148	@ 0x94
 8008ea4:	d025      	beq.n	8008ef2 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008ea6:	f7fe fd6d 	bl	8007984 <HAL_GetTick>
 8008eaa:	1b80      	subs	r0, r0, r6
 8008eac:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008eb0:	d9f2      	bls.n	8008e98 <HAL_DSI_Init+0x108>
 8008eb2:	e014      	b.n	8008ede <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008eb4:	f7fe fd66 	bl	8007984 <HAL_GetTick>
 8008eb8:	1b80      	subs	r0, r0, r6
 8008eba:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008ebe:	d985      	bls.n	8008dcc <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8008ec0:	2003      	movs	r0, #3
 8008ec2:	e053      	b.n	8008f6c <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008ec4:	f7fe fd5e 	bl	8007984 <HAL_GetTick>
 8008ec8:	1b80      	subs	r0, r0, r6
 8008eca:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008ece:	d9ab      	bls.n	8008e28 <HAL_DSI_Init+0x98>
 8008ed0:	e7f6      	b.n	8008ec0 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008ed2:	f7fe fd57 	bl	8007984 <HAL_GetTick>
 8008ed6:	1b80      	subs	r0, r0, r6
 8008ed8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008edc:	d902      	bls.n	8008ee4 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8008ede:	2300      	movs	r3, #0
 8008ee0:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8008ee2:	e7ed      	b.n	8008ec0 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008eea:	f003 0314 	and.w	r3, r3, #20
 8008eee:	2b14      	cmp	r3, #20
 8008ef0:	d1ef      	bne.n	8008ed2 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008ef2:	686b      	ldr	r3, [r5, #4]
 8008ef4:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8008ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8008f74 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 8008efa:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	bf38      	it	cc
 8008f00:	2301      	movcc	r3, #1
 8008f02:	435a      	muls	r2, r3
 8008f04:	68ab      	ldr	r3, [r5, #8]
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	409a      	lsls	r2, r3
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	434b      	muls	r3, r1
 8008f10:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8008f1a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8008f1e:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008f22:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8008f26:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008f28:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008f2a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8008f2e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008f32:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 8008f36:	9003      	str	r0, [sp, #12]
 8008f38:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 8008f3a:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8008f3c:	f022 0201 	bic.w	r2, r2, #1
 8008f40:	605a      	str	r2, [r3, #4]
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	f002 0201 	and.w	r2, r2, #1
 8008f48:	9203      	str	r2, [sp, #12]
 8008f4a:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008f4c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008f50:	f022 0203 	bic.w	r2, r2, #3
 8008f54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008f58:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	f042 0201 	orr.w	r2, r2, #1
 8008f62:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 8008f66:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008f68:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8008f6a:	7463      	strb	r3, [r4, #17]
}
 8008f6c:	b004      	add	sp, #16
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008f70:	2001      	movs	r0, #1
 8008f72:	e7fb      	b.n	8008f6c <HAL_DSI_Init+0x1dc>
 8008f74:	003d0900 	.word	0x003d0900

08008f78 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8008f78:	4770      	bx	lr

08008f7a <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008f7a:	6803      	ldr	r3, [r0, #0]
 8008f7c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008f80:	07d1      	lsls	r1, r2, #31
{
 8008f82:	b510      	push	{r4, lr}
 8008f84:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008f86:	d508      	bpl.n	8008f9a <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8008f88:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008f8c:	07d2      	lsls	r2, r2, #31
 8008f8e:	d504      	bpl.n	8008f9a <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8008f90:	2201      	movs	r2, #1
 8008f92:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8008f96:	f7f9 fa11 	bl	80023bc <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008fa0:	0791      	lsls	r1, r2, #30
 8008fa2:	d509      	bpl.n	8008fb8 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8008fa4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008fa8:	0792      	lsls	r2, r2, #30
 8008faa:	d505      	bpl.n	8008fb8 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008fac:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008fae:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008fb0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008fb4:	f7f9 fa34 	bl	8002420 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8008fb8:	69a3      	ldr	r3, [r4, #24]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d04e      	beq.n	800905c <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8008fbe:	6821      	ldr	r1, [r4, #0]
 8008fc0:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8008fc4:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8008fc8:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8008fca:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008fce:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8008fd2:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008fd4:	b291      	uxth	r1, r2
 8008fd6:	b119      	cbz	r1, 8008fe0 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8008fd8:	6961      	ldr	r1, [r4, #20]
 8008fda:	f041 0101 	orr.w	r1, r1, #1
 8008fde:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8008fe0:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8008fe4:	d003      	beq.n	8008fee <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8008fe6:	6962      	ldr	r2, [r4, #20]
 8008fe8:	f042 0202 	orr.w	r2, r2, #2
 8008fec:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8008fee:	07d8      	lsls	r0, r3, #31
 8008ff0:	d503      	bpl.n	8008ffa <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8008ff2:	6962      	ldr	r2, [r4, #20]
 8008ff4:	f042 0204 	orr.w	r2, r2, #4
 8008ff8:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8008ffa:	0799      	lsls	r1, r3, #30
 8008ffc:	d503      	bpl.n	8009006 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8008ffe:	6962      	ldr	r2, [r4, #20]
 8009000:	f042 0208 	orr.w	r2, r2, #8
 8009004:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8009006:	f013 0f0c 	tst.w	r3, #12
 800900a:	d003      	beq.n	8009014 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800900c:	6962      	ldr	r2, [r4, #20]
 800900e:	f042 0210 	orr.w	r2, r2, #16
 8009012:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8009014:	06da      	lsls	r2, r3, #27
 8009016:	d503      	bpl.n	8009020 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8009018:	6962      	ldr	r2, [r4, #20]
 800901a:	f042 0220 	orr.w	r2, r2, #32
 800901e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8009020:	0698      	lsls	r0, r3, #26
 8009022:	d503      	bpl.n	800902c <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8009024:	6962      	ldr	r2, [r4, #20]
 8009026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800902a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800902c:	0659      	lsls	r1, r3, #25
 800902e:	d503      	bpl.n	8009038 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8009030:	6962      	ldr	r2, [r4, #20]
 8009032:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009036:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8009038:	061a      	lsls	r2, r3, #24
 800903a:	d503      	bpl.n	8009044 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800903c:	6962      	ldr	r2, [r4, #20]
 800903e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009042:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8009044:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8009048:	d003      	beq.n	8009052 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800904a:	6963      	ldr	r3, [r4, #20]
 800904c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009050:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8009052:	6963      	ldr	r3, [r4, #20]
 8009054:	b113      	cbz	r3, 800905c <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8009056:	4620      	mov	r0, r4
 8009058:	f7ff ff8e 	bl	8008f78 <HAL_DSI_ErrorCallback>
}
 800905c:	bd10      	pop	{r4, pc}

0800905e <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800905e:	7c02      	ldrb	r2, [r0, #16]
{
 8009060:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8009062:	2a01      	cmp	r2, #1
 8009064:	d00a      	beq.n	800907c <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8009066:	6802      	ldr	r2, [r0, #0]
 8009068:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800906a:	f020 0003 	bic.w	r0, r0, #3
 800906e:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8009070:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8009072:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009074:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8009076:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8009078:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800907a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800907c:	2002      	movs	r0, #2
}
 800907e:	4770      	bx	lr

08009080 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8009080:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009082:	7c03      	ldrb	r3, [r0, #16]
{
 8009084:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8009086:	2b01      	cmp	r3, #1
 8009088:	d069      	beq.n	800915e <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800908a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800908c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800908e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009090:	f042 0201 	orr.w	r2, r2, #1
 8009094:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8009096:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800909a:	f022 0201 	bic.w	r2, r2, #1
 800909e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80090a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80090a6:	f042 0201 	orr.w	r2, r2, #1
 80090aa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	f022 0203 	bic.w	r2, r2, #3
 80090b4:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	4302      	orrs	r2, r0
 80090ba:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80090bc:	695a      	ldr	r2, [r3, #20]
 80090be:	f022 0207 	bic.w	r2, r2, #7
 80090c2:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80090c4:	6958      	ldr	r0, [r3, #20]
 80090c6:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 80090ca:	432a      	orrs	r2, r5
 80090cc:	694d      	ldr	r5, [r1, #20]
 80090ce:	432a      	orrs	r2, r5
 80090d0:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80090d2:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80090d4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80090d6:	691a      	ldr	r2, [r3, #16]
 80090d8:	f022 020f 	bic.w	r2, r2, #15
 80090dc:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	4302      	orrs	r2, r0
 80090e2:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80090e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80090e8:	f022 020e 	bic.w	r2, r2, #14
 80090ec:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80090f0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80090f4:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80090f8:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80090fa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80090fe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009100:	0c12      	lsrs	r2, r2, #16
 8009102:	0412      	lsls	r2, r2, #16
 8009104:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8009106:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009108:	4302      	orrs	r2, r0
 800910a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800910c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8009110:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009114:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8009118:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800911c:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8009120:	432a      	orrs	r2, r5
 8009122:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8009124:	432a      	orrs	r2, r5
 8009126:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8009128:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800912a:	432a      	orrs	r2, r5
 800912c:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800912e:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8009130:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8009134:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009136:	f022 0201 	bic.w	r2, r2, #1
 800913a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800913c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800913e:	430a      	orrs	r2, r1
 8009140:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8009142:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8009146:	f042 0201 	orr.w	r2, r2, #1
 800914a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800914e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8009152:	f042 0202 	orr.w	r2, r2, #2
 8009156:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 800915a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800915c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800915e:	2002      	movs	r0, #2
 8009160:	e7fc      	b.n	800915c <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08009164 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8009164:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009166:	7c03      	ldrb	r3, [r0, #16]
{
 8009168:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800916a:	2b01      	cmp	r3, #1
 800916c:	d029      	beq.n	80091c2 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800916e:	6800      	ldr	r0, [r0, #0]
 8009170:	4b15      	ldr	r3, [pc, #84]	@ (80091c8 <HAL_DSI_ConfigCommand+0x64>)
 8009172:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8009174:	4023      	ands	r3, r4
 8009176:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8009178:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800917a:	e9d1 3500 	ldrd	r3, r5, [r1]
 800917e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8009180:	688d      	ldr	r5, [r1, #8]
 8009182:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8009184:	68cd      	ldr	r5, [r1, #12]
 8009186:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8009188:	690d      	ldr	r5, [r1, #16]
 800918a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800918c:	694d      	ldr	r5, [r1, #20]
 800918e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8009190:	698d      	ldr	r5, [r1, #24]
 8009192:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8009194:	69cd      	ldr	r5, [r1, #28]
 8009196:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8009198:	6a0d      	ldr	r5, [r1, #32]
 800919a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800919c:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800919e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80091a0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80091a2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80091a4:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80091a6:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 80091a8:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80091aa:	4323      	orrs	r3, r4
 80091ac:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80091ae:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80091b0:	f023 0302 	bic.w	r3, r3, #2
 80091b4:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80091b6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80091b8:	430b      	orrs	r3, r1
 80091ba:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80091bc:	2000      	movs	r0, #0
 80091be:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 80091c0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80091c2:	2002      	movs	r0, #2
 80091c4:	e7fc      	b.n	80091c0 <HAL_DSI_ConfigCommand+0x5c>
 80091c6:	bf00      	nop
 80091c8:	fef080ff 	.word	0xfef080ff

080091cc <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80091cc:	7c02      	ldrb	r2, [r0, #16]
{
 80091ce:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80091d0:	2a01      	cmp	r2, #1
 80091d2:	d00a      	beq.n	80091ea <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80091d4:	6802      	ldr	r2, [r0, #0]
 80091d6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80091d8:	f020 001f 	bic.w	r0, r0, #31
 80091dc:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80091de:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80091e0:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80091e2:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 80091e4:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 80091e6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80091e8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80091ea:	2002      	movs	r0, #2
}
 80091ec:	4770      	bx	lr

080091ee <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80091ee:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80091f0:	7c03      	ldrb	r3, [r0, #16]
{
 80091f2:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d034      	beq.n	8009262 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80091f8:	e9d1 0300 	ldrd	r0, r3, [r1]
 80091fc:	4298      	cmp	r0, r3
 80091fe:	bf38      	it	cc
 8009200:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009208:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800920c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8009210:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009214:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009218:	4302      	orrs	r2, r0
 800921a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800921e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009222:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8009226:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800922a:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800922e:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009232:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009234:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8009238:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800923a:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800923c:	432a      	orrs	r2, r5
 800923e:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009240:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009242:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8009246:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800924a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800924e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8009252:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009256:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800925a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 800925e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8009260:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009262:	2002      	movs	r0, #2
 8009264:	e7fc      	b.n	8009260 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08009268 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8009268:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800926a:	7c03      	ldrb	r3, [r0, #16]
{
 800926c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800926e:	2b01      	cmp	r3, #1
 8009270:	d05b      	beq.n	800932a <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009272:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009274:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009276:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009278:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800927a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800927e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009286:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009288:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800928a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800928c:	b292      	uxth	r2, r2
 800928e:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009290:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8009292:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009296:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8009298:	4a25      	ldr	r2, [pc, #148]	@ (8009330 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800929a:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800929c:	4010      	ands	r0, r2
 800929e:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80092a0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80092a2:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80092a4:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80092a6:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80092a8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80092aa:	4010      	ands	r0, r2
 80092ac:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80092ae:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80092b0:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80092b2:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80092b4:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80092b6:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80092ba:	4010      	ands	r0, r2
 80092bc:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80092c0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80092c4:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80092c6:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80092c8:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80092cc:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80092d0:	4010      	ands	r0, r2
 80092d2:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80092d6:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80092da:	4328      	orrs	r0, r5
 80092dc:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80092e0:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80092e4:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80092e8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80092ec:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80092f0:	698d      	ldr	r5, [r1, #24]
 80092f2:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80092f4:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80092f6:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80092f8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80092fc:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8009300:	4010      	ands	r0, r2
 8009302:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8009306:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800930a:	4328      	orrs	r0, r5
 800930c:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009310:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8009314:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009316:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009318:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800931c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009320:	430a      	orrs	r2, r1
 8009322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 8009326:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8009328:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800932a:	2002      	movs	r0, #2
 800932c:	e7fc      	b.n	8009328 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800932e:	bf00      	nop
 8009330:	ffff0000 	.word	0xffff0000

08009334 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009334:	7c03      	ldrb	r3, [r0, #16]
{
 8009336:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8009338:	2b01      	cmp	r3, #1
 800933a:	d01c      	beq.n	8009376 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800933c:	6802      	ldr	r2, [r0, #0]
 800933e:	2300      	movs	r3, #0
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	6851      	ldr	r1, [r2, #4]
 8009344:	f041 0101 	orr.w	r1, r1, #1
 8009348:	6051      	str	r1, [r2, #4]
 800934a:	6851      	ldr	r1, [r2, #4]
 800934c:	f001 0101 	and.w	r1, r1, #1
 8009350:	9100      	str	r1, [sp, #0]
 8009352:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 800935a:	f041 0108 	orr.w	r1, r1, #8
 800935e:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8009362:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009366:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8009368:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800936a:	f002 0208 	and.w	r2, r2, #8
 800936e:	9201      	str	r2, [sp, #4]
 8009370:	9a01      	ldr	r2, [sp, #4]
}
 8009372:	b002      	add	sp, #8
 8009374:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009376:	2002      	movs	r0, #2
 8009378:	e7fb      	b.n	8009372 <HAL_DSI_Start+0x3e>

0800937a <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800937a:	7c02      	ldrb	r2, [r0, #16]
{
 800937c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800937e:	2a01      	cmp	r2, #1
 8009380:	d009      	beq.n	8009396 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8009382:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009384:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8009386:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800938a:	f042 0204 	orr.w	r2, r2, #4
 800938e:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8009392:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8009394:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009396:	2002      	movs	r0, #2
}
 8009398:	4770      	bx	lr

0800939a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800939a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800939c:	7c05      	ldrb	r5, [r0, #16]
{
 800939e:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80093a0:	2d01      	cmp	r5, #1
 80093a2:	d009      	beq.n	80093b8 <HAL_DSI_ShortWrite+0x1e>
 80093a4:	2501      	movs	r5, #1
 80093a6:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80093a8:	9d06      	ldr	r5, [sp, #24]
 80093aa:	9500      	str	r5, [sp, #0]
 80093ac:	f7ff fc6c 	bl	8008c88 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80093b0:	2300      	movs	r3, #0
 80093b2:	7423      	strb	r3, [r4, #16]

  return status;
}
 80093b4:	b003      	add	sp, #12
 80093b6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80093b8:	2002      	movs	r0, #2
 80093ba:	e7fb      	b.n	80093b4 <HAL_DSI_ShortWrite+0x1a>

080093bc <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 80093bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c0:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80093c2:	7c03      	ldrb	r3, [r0, #16]
{
 80093c4:	4606      	mov	r6, r0
 80093c6:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 80093c8:	2b01      	cmp	r3, #1
{
 80093ca:	4615      	mov	r5, r2
 80093cc:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 80093d0:	d052      	beq.n	8009478 <HAL_DSI_LongWrite+0xbc>
 80093d2:	2301      	movs	r3, #1
 80093d4:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80093d6:	f7fe fad5 	bl	8007984 <HAL_GetTick>
 80093da:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80093dc:	6832      	ldr	r2, [r6, #0]
 80093de:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80093e0:	f013 0a01 	ands.w	sl, r3, #1
 80093e4:	d019      	beq.n	800941a <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80093e6:	2c03      	cmp	r4, #3
 80093e8:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 80093ea:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80093ee:	bf28      	it	cs
 80093f0:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80093f2:	4283      	cmp	r3, r0
 80093f4:	d11d      	bne.n	8009432 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80093f6:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 80093f8:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 80093fa:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80093fe:	bb10      	cbnz	r0, 8009446 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8009400:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009402:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8009406:	0223      	lsls	r3, r4, #8
 8009408:	0224      	lsls	r4, r4, #8
 800940a:	b29b      	uxth	r3, r3
 800940c:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8009410:	431d      	orrs	r5, r3
 8009412:	4325      	orrs	r5, r4
 8009414:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009416:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8009418:	e009      	b.n	800942e <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800941a:	f7fe fab3 	bl	8007984 <HAL_GetTick>
 800941e:	eba0 000b 	sub.w	r0, r0, fp
 8009422:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009426:	d9d9      	bls.n	80093dc <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8009428:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800942a:	f886 a010 	strb.w	sl, [r6, #16]
}
 800942e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8009432:	f818 1003 	ldrb.w	r1, [r8, r3]
 8009436:	3301      	adds	r3, #1
 8009438:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 800943c:	fa01 f10c 	lsl.w	r1, r1, ip
 8009440:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8009444:	e7d5      	b.n	80093f2 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009446:	2804      	cmp	r0, #4
    fifoword = 0U;
 8009448:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800944c:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 800944e:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009450:	bf28      	it	cs
 8009452:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009456:	f813 8001 	ldrb.w	r8, [r3, r1]
 800945a:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800945e:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009460:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8009464:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009466:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800946a:	d1f4      	bne.n	8009456 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 800946c:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8009470:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8009472:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8009476:	e7c2      	b.n	80093fe <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8009478:	2002      	movs	r0, #2
 800947a:	e7d8      	b.n	800942e <HAL_DSI_LongWrite+0x72>

0800947c <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800947c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009480:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009482:	7c03      	ldrb	r3, [r0, #16]
{
 8009484:	4605      	mov	r5, r0
 8009486:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8009488:	2b01      	cmp	r3, #1
{
 800948a:	4617      	mov	r7, r2
 800948c:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009490:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8009494:	d06f      	beq.n	8009576 <HAL_DSI_Read+0xfa>
 8009496:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8009498:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800949a:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800949c:	d90d      	bls.n	80094ba <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800949e:	f3c6 2307 	ubfx	r3, r6, #8, #8
 80094a2:	2237      	movs	r2, #55	@ 0x37
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	b2f3      	uxtb	r3, r6
 80094a8:	f7ff fbee 	bl	8008c88 <DSI_ShortWrite.constprop.0>
 80094ac:	b128      	cbz	r0, 80094ba <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80094ae:	2300      	movs	r3, #0

      return HAL_ERROR;
 80094b0:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 80094b2:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 80094b4:	b003      	add	sp, #12
 80094b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80094ba:	f1b9 0f06 	cmp.w	r9, #6
 80094be:	d10f      	bne.n	80094e0 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80094c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80094c2:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80094c4:	021b      	lsls	r3, r3, #8
 80094c6:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 80094ca:	f043 0306 	orr.w	r3, r3, #6
 80094ce:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 80094d0:	f7fe fa58 	bl	8007984 <HAL_GetTick>
 80094d4:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 80094d6:	2e00      	cmp	r6, #0
 80094d8:	dc27      	bgt.n	800952a <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 80094da:	2000      	movs	r0, #0
 80094dc:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 80094de:	e7e9      	b.n	80094b4 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80094e0:	f1b9 0f04 	cmp.w	r9, #4
 80094e4:	d105      	bne.n	80094f2 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80094e6:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 80094e8:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80094ea:	f044 0404 	orr.w	r4, r4, #4
 80094ee:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 80094f0:	e7ee      	b.n	80094d0 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80094f2:	f1b9 0f14 	cmp.w	r9, #20
 80094f6:	d108      	bne.n	800950a <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80094f8:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80094fc:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80094fe:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009500:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8009504:	f044 0414 	orr.w	r4, r4, #20
 8009508:	e7f1      	b.n	80094ee <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800950a:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 800950e:	d1ce      	bne.n	80094ae <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8009510:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009514:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8009516:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009518:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800951c:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009520:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8009524:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8009528:	e7e1      	b.n	80094ee <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800952a:	682a      	ldr	r2, [r5, #0]
 800952c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800952e:	f013 0310 	ands.w	r3, r3, #16
 8009532:	d10d      	bne.n	8009550 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8009534:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8009536:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8009538:	4632      	mov	r2, r6
 800953a:	bf28      	it	cs
 800953c:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800953e:	00d9      	lsls	r1, r3, #3
 8009540:	fa20 f101 	lsr.w	r1, r0, r1
 8009544:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8009546:	3301      	adds	r3, #1
 8009548:	429a      	cmp	r2, r3
 800954a:	d1f8      	bne.n	800953e <HAL_DSI_Read+0xc2>
        pdata++;
 800954c:	4417      	add	r7, r2
        datasize--;
 800954e:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009550:	f7fe fa18 	bl	8007984 <HAL_GetTick>
 8009554:	1b00      	subs	r0, r0, r4
 8009556:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800955a:	d903      	bls.n	8009564 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800955c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800955e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8009560:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8009562:	e7a7      	b.n	80094b4 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009568:	0652      	lsls	r2, r2, #25
 800956a:	d4b4      	bmi.n	80094d6 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800956c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009570:	069b      	lsls	r3, r3, #26
 8009572:	d49c      	bmi.n	80094ae <HAL_DSI_Read+0x32>
 8009574:	e7af      	b.n	80094d6 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8009576:	2002      	movs	r0, #2
 8009578:	e79c      	b.n	80094b4 <HAL_DSI_Read+0x38>

0800957a <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800957a:	7c02      	ldrb	r2, [r0, #16]
{
 800957c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800957e:	2a01      	cmp	r2, #1
 8009580:	d00f      	beq.n	80095a2 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8009582:	6802      	ldr	r2, [r0, #0]
 8009584:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8009588:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 800958c:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8009590:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8009594:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009598:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800959a:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 800959e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80095a0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80095a2:	2002      	movs	r0, #2
}
 80095a4:	4770      	bx	lr
	...

080095a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80095a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80095ac:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095ae:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8009774 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80095b2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80095b6:	680a      	ldr	r2, [r1, #0]
 80095b8:	fa32 f503 	lsrs.w	r5, r2, r3
 80095bc:	d102      	bne.n	80095c4 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80095be:	b003      	add	sp, #12
 80095c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80095c4:	2501      	movs	r5, #1
 80095c6:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 80095ca:	ea18 0202 	ands.w	r2, r8, r2
 80095ce:	f000 80bb 	beq.w	8009748 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80095d2:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80095d4:	2703      	movs	r7, #3
 80095d6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80095da:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80095de:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80095e2:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80095e4:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80095e8:	2f01      	cmp	r7, #1
 80095ea:	d834      	bhi.n	8009656 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80095ec:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80095ee:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80095f2:	68cf      	ldr	r7, [r1, #12]
 80095f4:	fa07 f70e 	lsl.w	r7, r7, lr
 80095f8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80095fc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80095fe:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009600:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009604:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8009608:	409f      	lsls	r7, r3
 800960a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800960e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8009610:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009612:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009614:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009618:	688f      	ldr	r7, [r1, #8]
 800961a:	fa07 f70e 	lsl.w	r7, r7, lr
 800961e:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8009622:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009624:	d119      	bne.n	800965a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8009626:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800962a:	f003 0a07 	and.w	sl, r3, #7
 800962e:	f04f 0b0f 	mov.w	fp, #15
 8009632:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8009636:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800963a:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800963e:	fa0b fb0a 	lsl.w	fp, fp, sl
 8009642:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009646:	690f      	ldr	r7, [r1, #16]
 8009648:	fa07 f70a 	lsl.w	r7, r7, sl
 800964c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8009650:	f8c8 7020 	str.w	r7, [r8, #32]
 8009654:	e001      	b.n	800965a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009656:	2d03      	cmp	r5, #3
 8009658:	d1da      	bne.n	8009610 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800965a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800965c:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009660:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009664:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009668:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 800966c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800966e:	d06b      	beq.n	8009748 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009670:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8009674:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009678:	f003 0c03 	and.w	ip, r3, #3
 800967c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009680:	f045 0502 	orr.w	r5, r5, #2
 8009684:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009688:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800968c:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8009690:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8009694:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009698:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800969c:	f005 0502 	and.w	r5, r5, #2
 80096a0:	9501      	str	r5, [sp, #4]
 80096a2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80096a4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80096a6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80096aa:	4d31      	ldr	r5, [pc, #196]	@ (8009770 <HAL_GPIO_Init+0x1c8>)
 80096ac:	42a8      	cmp	r0, r5
 80096ae:	d04d      	beq.n	800974c <HAL_GPIO_Init+0x1a4>
 80096b0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80096b4:	42a8      	cmp	r0, r5
 80096b6:	d04b      	beq.n	8009750 <HAL_GPIO_Init+0x1a8>
 80096b8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80096bc:	42a8      	cmp	r0, r5
 80096be:	d049      	beq.n	8009754 <HAL_GPIO_Init+0x1ac>
 80096c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80096c4:	42a8      	cmp	r0, r5
 80096c6:	d047      	beq.n	8009758 <HAL_GPIO_Init+0x1b0>
 80096c8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80096cc:	42a8      	cmp	r0, r5
 80096ce:	d045      	beq.n	800975c <HAL_GPIO_Init+0x1b4>
 80096d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80096d4:	42a8      	cmp	r0, r5
 80096d6:	d043      	beq.n	8009760 <HAL_GPIO_Init+0x1b8>
 80096d8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80096dc:	42a8      	cmp	r0, r5
 80096de:	d041      	beq.n	8009764 <HAL_GPIO_Init+0x1bc>
 80096e0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80096e4:	42a8      	cmp	r0, r5
 80096e6:	d03f      	beq.n	8009768 <HAL_GPIO_Init+0x1c0>
 80096e8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80096ec:	42a8      	cmp	r0, r5
 80096ee:	d03d      	beq.n	800976c <HAL_GPIO_Init+0x1c4>
 80096f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80096f4:	42a8      	cmp	r0, r5
 80096f6:	bf14      	ite	ne
 80096f8:	250a      	movne	r5, #10
 80096fa:	2509      	moveq	r5, #9
 80096fc:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009700:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009704:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009708:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800970a:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800970e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8009710:	bf0c      	ite	eq
 8009712:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009714:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009716:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 800971a:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800971c:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800971e:	bf0c      	ite	eq
 8009720:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009722:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009724:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8009728:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800972a:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800972e:	bf0c      	ite	eq
 8009730:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009732:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009734:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8009736:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800973a:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800973e:	bf54      	ite	pl
 8009740:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8009742:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8009744:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8009748:	3301      	adds	r3, #1
 800974a:	e734      	b.n	80095b6 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800974c:	2500      	movs	r5, #0
 800974e:	e7d5      	b.n	80096fc <HAL_GPIO_Init+0x154>
 8009750:	2501      	movs	r5, #1
 8009752:	e7d3      	b.n	80096fc <HAL_GPIO_Init+0x154>
 8009754:	2502      	movs	r5, #2
 8009756:	e7d1      	b.n	80096fc <HAL_GPIO_Init+0x154>
 8009758:	2503      	movs	r5, #3
 800975a:	e7cf      	b.n	80096fc <HAL_GPIO_Init+0x154>
 800975c:	2504      	movs	r5, #4
 800975e:	e7cd      	b.n	80096fc <HAL_GPIO_Init+0x154>
 8009760:	2505      	movs	r5, #5
 8009762:	e7cb      	b.n	80096fc <HAL_GPIO_Init+0x154>
 8009764:	2506      	movs	r5, #6
 8009766:	e7c9      	b.n	80096fc <HAL_GPIO_Init+0x154>
 8009768:	2507      	movs	r5, #7
 800976a:	e7c7      	b.n	80096fc <HAL_GPIO_Init+0x154>
 800976c:	2508      	movs	r5, #8
 800976e:	e7c5      	b.n	80096fc <HAL_GPIO_Init+0x154>
 8009770:	58020000 	.word	0x58020000
 8009774:	58024400 	.word	0x58024400

08009778 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800977c:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800977e:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009782:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009786:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800978a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 800978e:	fa31 f302 	lsrs.w	r3, r1, r2
 8009792:	d101      	bne.n	8009798 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8009794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009798:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 800979c:	ea1c 0601 	ands.w	r6, ip, r1
 80097a0:	d070      	beq.n	8009884 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80097a2:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80097a6:	f002 0703 	and.w	r7, r2, #3
 80097aa:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 80097ae:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 80097b0:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80097b4:	fa08 f907 	lsl.w	r9, r8, r7
 80097b8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80097bc:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80097c0:	4b3a      	ldr	r3, [pc, #232]	@ (80098ac <HAL_GPIO_DeInit+0x134>)
 80097c2:	4298      	cmp	r0, r3
 80097c4:	d060      	beq.n	8009888 <HAL_GPIO_DeInit+0x110>
 80097c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097ca:	4298      	cmp	r0, r3
 80097cc:	d05e      	beq.n	800988c <HAL_GPIO_DeInit+0x114>
 80097ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097d2:	4298      	cmp	r0, r3
 80097d4:	d05c      	beq.n	8009890 <HAL_GPIO_DeInit+0x118>
 80097d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097da:	4298      	cmp	r0, r3
 80097dc:	d05a      	beq.n	8009894 <HAL_GPIO_DeInit+0x11c>
 80097de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097e2:	4298      	cmp	r0, r3
 80097e4:	d058      	beq.n	8009898 <HAL_GPIO_DeInit+0x120>
 80097e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097ea:	4298      	cmp	r0, r3
 80097ec:	d056      	beq.n	800989c <HAL_GPIO_DeInit+0x124>
 80097ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097f2:	4298      	cmp	r0, r3
 80097f4:	d054      	beq.n	80098a0 <HAL_GPIO_DeInit+0x128>
 80097f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097fa:	4298      	cmp	r0, r3
 80097fc:	d052      	beq.n	80098a4 <HAL_GPIO_DeInit+0x12c>
 80097fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009802:	4298      	cmp	r0, r3
 8009804:	d050      	beq.n	80098a8 <HAL_GPIO_DeInit+0x130>
 8009806:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800980a:	4298      	cmp	r0, r3
 800980c:	bf0c      	ite	eq
 800980e:	2309      	moveq	r3, #9
 8009810:	230a      	movne	r3, #10
 8009812:	40bb      	lsls	r3, r7
 8009814:	4573      	cmp	r3, lr
 8009816:	d117      	bne.n	8009848 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009818:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800981c:	ea23 0306 	bic.w	r3, r3, r6
 8009820:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009824:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009828:	ea23 0306 	bic.w	r3, r3, r6
 800982c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8009830:	6863      	ldr	r3, [r4, #4]
 8009832:	ea23 0306 	bic.w	r3, r3, r6
 8009836:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	ea23 0306 	bic.w	r3, r3, r6
 800983e:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009840:	68ab      	ldr	r3, [r5, #8]
 8009842:	ea23 0309 	bic.w	r3, r3, r9
 8009846:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009848:	0053      	lsls	r3, r2, #1
 800984a:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800984c:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800984e:	fa0b f303 	lsl.w	r3, fp, r3
 8009852:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8009856:	431d      	orrs	r5, r3
 8009858:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800985a:	f002 0507 	and.w	r5, r2, #7
 800985e:	6a37      	ldr	r7, [r6, #32]
 8009860:	00ad      	lsls	r5, r5, #2
 8009862:	fa08 f505 	lsl.w	r5, r8, r5
 8009866:	ea27 0705 	bic.w	r7, r7, r5
 800986a:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800986c:	68c5      	ldr	r5, [r0, #12]
 800986e:	ea25 0503 	bic.w	r5, r5, r3
 8009872:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009874:	6845      	ldr	r5, [r0, #4]
 8009876:	ea25 050c 	bic.w	r5, r5, ip
 800987a:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800987c:	6885      	ldr	r5, [r0, #8]
 800987e:	ea25 0303 	bic.w	r3, r5, r3
 8009882:	6083      	str	r3, [r0, #8]
    position++;
 8009884:	3201      	adds	r2, #1
 8009886:	e782      	b.n	800978e <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009888:	2300      	movs	r3, #0
 800988a:	e7c2      	b.n	8009812 <HAL_GPIO_DeInit+0x9a>
 800988c:	2301      	movs	r3, #1
 800988e:	e7c0      	b.n	8009812 <HAL_GPIO_DeInit+0x9a>
 8009890:	2302      	movs	r3, #2
 8009892:	e7be      	b.n	8009812 <HAL_GPIO_DeInit+0x9a>
 8009894:	2303      	movs	r3, #3
 8009896:	e7bc      	b.n	8009812 <HAL_GPIO_DeInit+0x9a>
 8009898:	2304      	movs	r3, #4
 800989a:	e7ba      	b.n	8009812 <HAL_GPIO_DeInit+0x9a>
 800989c:	2305      	movs	r3, #5
 800989e:	e7b8      	b.n	8009812 <HAL_GPIO_DeInit+0x9a>
 80098a0:	2306      	movs	r3, #6
 80098a2:	e7b6      	b.n	8009812 <HAL_GPIO_DeInit+0x9a>
 80098a4:	2307      	movs	r3, #7
 80098a6:	e7b4      	b.n	8009812 <HAL_GPIO_DeInit+0x9a>
 80098a8:	2308      	movs	r3, #8
 80098aa:	e7b2      	b.n	8009812 <HAL_GPIO_DeInit+0x9a>
 80098ac:	58020000 	.word	0x58020000

080098b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80098b0:	6903      	ldr	r3, [r0, #16]
 80098b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80098b4:	bf14      	ite	ne
 80098b6:	2001      	movne	r0, #1
 80098b8:	2000      	moveq	r0, #0
 80098ba:	4770      	bx	lr

080098bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80098bc:	b10a      	cbz	r2, 80098c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80098be:	6181      	str	r1, [r0, #24]
  }
}
 80098c0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80098c2:	0409      	lsls	r1, r1, #16
 80098c4:	e7fb      	b.n	80098be <HAL_GPIO_WritePin+0x2>

080098c6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80098c6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80098c8:	ea01 0203 	and.w	r2, r1, r3
 80098cc:	ea21 0103 	bic.w	r1, r1, r3
 80098d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098d4:	6181      	str	r1, [r0, #24]
}
 80098d6:	4770      	bx	lr

080098d8 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80098d8:	4b04      	ldr	r3, [pc, #16]	@ (80098ec <HAL_HSEM_FastTake+0x14>)
 80098da:	3020      	adds	r0, #32
 80098dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 80098e0:	4b03      	ldr	r3, [pc, #12]	@ (80098f0 <HAL_HSEM_FastTake+0x18>)
 80098e2:	1ac0      	subs	r0, r0, r3
 80098e4:	bf18      	it	ne
 80098e6:	2001      	movne	r0, #1
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	58026400 	.word	0x58026400
 80098f0:	80000300 	.word	0x80000300

080098f4 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80098f4:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 80098f8:	4b01      	ldr	r3, [pc, #4]	@ (8009900 <HAL_HSEM_Release+0xc>)
 80098fa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80098fe:	4770      	bx	lr
 8009900:	58026400 	.word	0x58026400

08009904 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009904:	6803      	ldr	r3, [r0, #0]
 8009906:	699a      	ldr	r2, [r3, #24]
 8009908:	0791      	lsls	r1, r2, #30
 800990a:	d501      	bpl.n	8009910 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800990c:	2200      	movs	r2, #0
 800990e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009910:	699a      	ldr	r2, [r3, #24]
 8009912:	07d2      	lsls	r2, r2, #31
 8009914:	d403      	bmi.n	800991e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009916:	699a      	ldr	r2, [r3, #24]
 8009918:	f042 0201 	orr.w	r2, r2, #1
 800991c:	619a      	str	r2, [r3, #24]
  }
}
 800991e:	4770      	bx	lr

08009920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009920:	b530      	push	{r4, r5, lr}
 8009922:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009924:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009928:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800992a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800992c:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800992e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8009932:	4a05      	ldr	r2, [pc, #20]	@ (8009948 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009934:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8009936:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800993a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800993e:	ea20 0002 	bic.w	r0, r0, r2
 8009942:	4303      	orrs	r3, r0
 8009944:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009946:	bd30      	pop	{r4, r5, pc}
 8009948:	03ff63ff 	.word	0x03ff63ff

0800994c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800994c:	6803      	ldr	r3, [r0, #0]
{
 800994e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8009952:	699c      	ldr	r4, [r3, #24]
{
 8009954:	4605      	mov	r5, r0
 8009956:	460f      	mov	r7, r1
 8009958:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800995a:	f014 0410 	ands.w	r4, r4, #16
 800995e:	d06f      	beq.n	8009a40 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8009960:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009962:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8009964:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009966:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	699a      	ldr	r2, [r3, #24]
 800996c:	0690      	lsls	r0, r2, #26
 800996e:	d461      	bmi.n	8009a34 <I2C_IsErrorOccurred+0xe8>
 8009970:	f1b8 0f00 	cmp.w	r8, #0
 8009974:	d035      	beq.n	80099e2 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8009976:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800997a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800997c:	682e      	ldr	r6, [r5, #0]
 800997e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009980:	05d9      	lsls	r1, r3, #23
 8009982:	d505      	bpl.n	8009990 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009984:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8009988:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800998c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800998e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009990:	055a      	lsls	r2, r3, #21
 8009992:	d505      	bpl.n	80099a0 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009994:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8009998:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800999c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800999e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80099a0:	059b      	lsls	r3, r3, #22
 80099a2:	d54f      	bpl.n	8009a44 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80099a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80099a8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80099ac:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 80099ae:	4628      	mov	r0, r5
 80099b0:	f7ff ffa8 	bl	8009904 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80099b4:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 80099b6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80099b8:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80099bc:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80099c0:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80099c4:	f023 0301 	bic.w	r3, r3, #1
 80099c8:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 80099ca:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80099cc:	4323      	orrs	r3, r4
 80099ce:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80099d0:	2320      	movs	r3, #32
 80099d2:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80099dc:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80099e0:	e032      	b.n	8009a48 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80099e2:	1c7a      	adds	r2, r7, #1
 80099e4:	d0c1      	beq.n	800996a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80099e6:	f7fd ffcd 	bl	8007984 <HAL_GetTick>
 80099ea:	1b80      	subs	r0, r0, r6
 80099ec:	42b8      	cmp	r0, r7
 80099ee:	d801      	bhi.n	80099f4 <I2C_IsErrorOccurred+0xa8>
 80099f0:	2f00      	cmp	r7, #0
 80099f2:	d1b9      	bne.n	8009968 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80099f8:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80099fc:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80099fe:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a00:	0400      	lsls	r0, r0, #16
 8009a02:	d50a      	bpl.n	8009a1a <I2C_IsErrorOccurred+0xce>
 8009a04:	0449      	lsls	r1, r1, #17
 8009a06:	d408      	bmi.n	8009a1a <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8009a08:	2a20      	cmp	r2, #32
 8009a0a:	d006      	beq.n	8009a1a <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a12:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8009a14:	f7fd ffb6 	bl	8007984 <HAL_GetTick>
 8009a18:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a1a:	682b      	ldr	r3, [r5, #0]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	069b      	lsls	r3, r3, #26
 8009a20:	d4a2      	bmi.n	8009968 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a22:	f7fd ffaf 	bl	8007984 <HAL_GetTick>
 8009a26:	1b80      	subs	r0, r0, r6
 8009a28:	2819      	cmp	r0, #25
 8009a2a:	d9f6      	bls.n	8009a1a <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009a2c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8009a2e:	f04f 0801 	mov.w	r8, #1
 8009a32:	e799      	b.n	8009968 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8009a34:	f1b8 0f00 	cmp.w	r8, #0
 8009a38:	d19d      	bne.n	8009976 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	61da      	str	r2, [r3, #28]
 8009a3e:	e79a      	b.n	8009976 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8009a40:	4620      	mov	r0, r4
 8009a42:	e79b      	b.n	800997c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d1b2      	bne.n	80099ae <I2C_IsErrorOccurred+0x62>
}
 8009a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a4c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	4604      	mov	r4, r0
 8009a50:	460d      	mov	r5, r1
 8009a52:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	079b      	lsls	r3, r3, #30
 8009a5a:	d501      	bpl.n	8009a60 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e01f      	b.n	8009aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a60:	4632      	mov	r2, r6
 8009a62:	4629      	mov	r1, r5
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7ff ff71 	bl	800994c <I2C_IsErrorOccurred>
 8009a6a:	b9c0      	cbnz	r0, 8009a9e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8009a6c:	1c6a      	adds	r2, r5, #1
 8009a6e:	d0f1      	beq.n	8009a54 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a70:	f7fd ff88 	bl	8007984 <HAL_GetTick>
 8009a74:	1b80      	subs	r0, r0, r6
 8009a76:	42a8      	cmp	r0, r5
 8009a78:	d801      	bhi.n	8009a7e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8009a7a:	2d00      	cmp	r5, #0
 8009a7c:	d1ea      	bne.n	8009a54 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009a7e:	6823      	ldr	r3, [r4, #0]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	f013 0302 	ands.w	r3, r3, #2
 8009a86:	d1e5      	bne.n	8009a54 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a88:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8009a8a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a8e:	f042 0220 	orr.w	r2, r2, #32
 8009a92:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a94:	2220      	movs	r2, #32
 8009a96:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a9a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8009a9e:	2001      	movs	r0, #1
}
 8009aa0:	bd70      	pop	{r4, r5, r6, pc}

08009aa2 <I2C_WaitOnFlagUntilTimeout>:
{
 8009aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009aaa:	4604      	mov	r4, r0
 8009aac:	460f      	mov	r7, r1
 8009aae:	4616      	mov	r6, r2
 8009ab0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	ea37 0303 	bics.w	r3, r7, r3
 8009aba:	bf0c      	ite	eq
 8009abc:	2301      	moveq	r3, #1
 8009abe:	2300      	movne	r3, #0
 8009ac0:	42b3      	cmp	r3, r6
 8009ac2:	d001      	beq.n	8009ac8 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	e025      	b.n	8009b14 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ac8:	4642      	mov	r2, r8
 8009aca:	4629      	mov	r1, r5
 8009acc:	4620      	mov	r0, r4
 8009ace:	f7ff ff3d 	bl	800994c <I2C_IsErrorOccurred>
 8009ad2:	b9f0      	cbnz	r0, 8009b12 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8009ad4:	1c6b      	adds	r3, r5, #1
 8009ad6:	d0ec      	beq.n	8009ab2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ad8:	f7fd ff54 	bl	8007984 <HAL_GetTick>
 8009adc:	eba0 0008 	sub.w	r0, r0, r8
 8009ae0:	42a8      	cmp	r0, r5
 8009ae2:	d801      	bhi.n	8009ae8 <I2C_WaitOnFlagUntilTimeout+0x46>
 8009ae4:	2d00      	cmp	r5, #0
 8009ae6:	d1e4      	bne.n	8009ab2 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	ea37 0303 	bics.w	r3, r7, r3
 8009af0:	bf0c      	ite	eq
 8009af2:	2301      	moveq	r3, #1
 8009af4:	2300      	movne	r3, #0
 8009af6:	42b3      	cmp	r3, r6
 8009af8:	d1db      	bne.n	8009ab2 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009afa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009afc:	f043 0320 	orr.w	r3, r3, #32
 8009b00:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b02:	2320      	movs	r3, #32
 8009b04:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8009b0e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009b12:	2001      	movs	r0, #1
}
 8009b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b18 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	460d      	mov	r5, r1
 8009b1e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	069b      	lsls	r3, r3, #26
 8009b26:	d501      	bpl.n	8009b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8009b28:	2000      	movs	r0, #0
 8009b2a:	e01d      	b.n	8009b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	4629      	mov	r1, r5
 8009b30:	4620      	mov	r0, r4
 8009b32:	f7ff ff0b 	bl	800994c <I2C_IsErrorOccurred>
 8009b36:	b9b0      	cbnz	r0, 8009b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b38:	f7fd ff24 	bl	8007984 <HAL_GetTick>
 8009b3c:	1b80      	subs	r0, r0, r6
 8009b3e:	42a8      	cmp	r0, r5
 8009b40:	d801      	bhi.n	8009b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8009b42:	2d00      	cmp	r5, #0
 8009b44:	d1ec      	bne.n	8009b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	f013 0320 	ands.w	r3, r3, #32
 8009b4e:	d1e7      	bne.n	8009b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b50:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009b52:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b56:	f042 0220 	orr.w	r2, r2, #32
 8009b5a:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b62:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8009b66:	2001      	movs	r0, #1
}
 8009b68:	bd70      	pop	{r4, r5, r6, pc}

08009b6a <HAL_I2C_MspInit>:
}
 8009b6a:	4770      	bx	lr

08009b6c <HAL_I2C_Init>:
{
 8009b6c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009b6e:	4604      	mov	r4, r0
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d04e      	beq.n	8009c12 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009b74:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009b78:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009b7c:	b91b      	cbnz	r3, 8009b86 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8009b7e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8009b82:	f7ff fff2 	bl	8009b6a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b86:	2324      	movs	r3, #36	@ 0x24
 8009b88:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	f022 0201 	bic.w	r2, r2, #1
 8009b94:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b96:	6862      	ldr	r2, [r4, #4]
 8009b98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009b9c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ba4:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009ba6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009baa:	2901      	cmp	r1, #1
 8009bac:	d106      	bne.n	8009bbc <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009bae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009bb2:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009bba:	e007      	b.n	8009bcc <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009bbc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009bc0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009bc2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009bc4:	d1f6      	bne.n	8009bb4 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009bc6:	685a      	ldr	r2, [r3, #4]
 8009bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009bcc:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bce:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8009bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009bda:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009bdc:	68da      	ldr	r2, [r3, #12]
 8009bde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009be2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009be4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8009be8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009bea:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009bec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009bf0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009bf2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	f042 0201 	orr.w	r2, r2, #1
 8009c00:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8009c02:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c04:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009c06:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c0a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c0c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8009c10:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009c12:	2001      	movs	r0, #1
 8009c14:	e7fc      	b.n	8009c10 <HAL_I2C_Init+0xa4>

08009c16 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8009c16:	4770      	bx	lr

08009c18 <HAL_I2C_DeInit>:
{
 8009c18:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	b198      	cbz	r0, 8009c46 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8009c1e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c20:	2324      	movs	r3, #36	@ 0x24
 8009c22:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009c26:	6813      	ldr	r3, [r2, #0]
 8009c28:	f023 0301 	bic.w	r3, r3, #1
 8009c2c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8009c2e:	f7ff fff2 	bl	8009c16 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c32:	2000      	movs	r0, #0
 8009c34:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8009c36:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8009c3a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c3e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c40:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8009c44:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009c46:	2001      	movs	r0, #1
 8009c48:	e7fc      	b.n	8009c44 <HAL_I2C_DeInit+0x2c>
	...

08009c4c <HAL_I2C_Mem_Write>:
{
 8009c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c52:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009c56:	4604      	mov	r4, r0
 8009c58:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c5a:	2b20      	cmp	r3, #32
{
 8009c5c:	4616      	mov	r6, r2
 8009c5e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8009c62:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c66:	f040 80c6 	bne.w	8009df6 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8009c6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c6c:	b113      	cbz	r3, 8009c74 <HAL_I2C_Mem_Write+0x28>
 8009c6e:	f1ba 0f00 	cmp.w	sl, #0
 8009c72:	d106      	bne.n	8009c82 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009c74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c78:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8009c7a:	2001      	movs	r0, #1
}
 8009c7c:	b003      	add	sp, #12
 8009c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009c82:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	f000 80b5 	beq.w	8009df6 <HAL_I2C_Mem_Write+0x1aa>
 8009c8c:	f04f 0b01 	mov.w	fp, #1
 8009c90:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009c94:	f7fd fe76 	bl	8007984 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c98:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009c9a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c9c:	9000      	str	r0, [sp, #0]
 8009c9e:	465a      	mov	r2, fp
 8009ca0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f7ff fefc 	bl	8009aa2 <I2C_WaitOnFlagUntilTimeout>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d1e5      	bne.n	8009c7a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009cae:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8009cb0:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009cb2:	fa5f f289 	uxtb.w	r2, r9
 8009cb6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009cb8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009cbc:	2340      	movs	r3, #64	@ 0x40
 8009cbe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8009cc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cc4:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009cc6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009cc8:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009cca:	4b4c      	ldr	r3, [pc, #304]	@ (8009dfc <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8009ccc:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009cd6:	f7ff fe23 	bl	8009920 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cda:	462a      	mov	r2, r5
 8009cdc:	4641      	mov	r1, r8
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f7ff feb4 	bl	8009a4c <I2C_WaitOnTXISFlagUntilTimeout>
 8009ce4:	bb18      	cbnz	r0, 8009d2e <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ce6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cea:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cec:	d115      	bne.n	8009d1a <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cee:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	2180      	movs	r1, #128	@ 0x80
 8009cf4:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cf6:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009cf8:	4643      	mov	r3, r8
 8009cfa:	9500      	str	r5, [sp, #0]
 8009cfc:	f7ff fed1 	bl	8009aa2 <I2C_WaitOnFlagUntilTimeout>
 8009d00:	b9a8      	cbnz	r0, 8009d2e <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d02:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	2bff      	cmp	r3, #255	@ 0xff
 8009d08:	d815      	bhi.n	8009d36 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009d0a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009d0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8009d10:	b292      	uxth	r2, r2
 8009d12:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009d14:	b2d2      	uxtb	r2, r2
 8009d16:	9000      	str	r0, [sp, #0]
 8009d18:	e012      	b.n	8009d40 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d1a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d20:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d22:	462a      	mov	r2, r5
 8009d24:	f7ff fe92 	bl	8009a4c <I2C_WaitOnTXISFlagUntilTimeout>
 8009d28:	b908      	cbnz	r0, 8009d2e <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	e7df      	b.n	8009cee <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009d34:	e7a1      	b.n	8009c7a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d36:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009d38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d3c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009d3e:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009d40:	4639      	mov	r1, r7
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff fdec 	bl	8009920 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d48:	462a      	mov	r2, r5
 8009d4a:	4641      	mov	r1, r8
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f7ff fe7d 	bl	8009a4c <I2C_WaitOnTXISFlagUntilTimeout>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d191      	bne.n	8009c7a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009d56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009d5e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009d60:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009d62:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009d64:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009d66:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009d68:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009d6a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009d6c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009d6e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d70:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009d72:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	b1b3      	cbz	r3, 8009da6 <HAL_I2C_Mem_Write+0x15a>
 8009d78:	b9aa      	cbnz	r2, 8009da6 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d7a:	4643      	mov	r3, r8
 8009d7c:	2180      	movs	r1, #128	@ 0x80
 8009d7e:	4620      	mov	r0, r4
 8009d80:	9500      	str	r5, [sp, #0]
 8009d82:	f7ff fe8e 	bl	8009aa2 <I2C_WaitOnFlagUntilTimeout>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	f47f af77 	bne.w	8009c7a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d8c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	2bff      	cmp	r3, #255	@ 0xff
 8009d92:	d928      	bls.n	8009de6 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d94:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d9a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d9c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d9e:	4639      	mov	r1, r7
 8009da0:	4620      	mov	r0, r4
 8009da2:	f7ff fdbd 	bl	8009920 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009da6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1cc      	bne.n	8009d48 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dae:	462a      	mov	r2, r5
 8009db0:	4641      	mov	r1, r8
 8009db2:	4620      	mov	r0, r4
 8009db4:	f7ff feb0 	bl	8009b18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	f47f af5e 	bne.w	8009c7a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	2120      	movs	r1, #32
 8009dc2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009dca:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009dce:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009dd2:	f022 0201 	bic.w	r2, r2, #1
 8009dd6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009dd8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009ddc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009de0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009de4:	e74a      	b.n	8009c7c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009de6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009de8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8009dec:	b292      	uxth	r2, r2
 8009dee:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009df0:	b2d2      	uxtb	r2, r2
 8009df2:	9000      	str	r0, [sp, #0]
 8009df4:	e7d3      	b.n	8009d9e <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8009df6:	2002      	movs	r0, #2
 8009df8:	e740      	b.n	8009c7c <HAL_I2C_Mem_Write+0x30>
 8009dfa:	bf00      	nop
 8009dfc:	80002000 	.word	0x80002000

08009e00 <HAL_I2C_Mem_Read>:
{
 8009e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e06:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e0e:	2b20      	cmp	r3, #32
{
 8009e10:	4616      	mov	r6, r2
 8009e12:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8009e16:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e1a:	f040 80c9 	bne.w	8009fb0 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8009e1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e20:	b113      	cbz	r3, 8009e28 <HAL_I2C_Mem_Read+0x28>
 8009e22:	f1ba 0f00 	cmp.w	sl, #0
 8009e26:	d106      	bne.n	8009e36 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009e28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e2c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8009e2e:	2001      	movs	r0, #1
}
 8009e30:	b003      	add	sp, #12
 8009e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009e36:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	f000 80b8 	beq.w	8009fb0 <HAL_I2C_Mem_Read+0x1b0>
 8009e40:	f04f 0b01 	mov.w	fp, #1
 8009e44:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009e48:	f7fd fd9c 	bl	8007984 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e4c:	2319      	movs	r3, #25
 8009e4e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8009e50:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e52:	465a      	mov	r2, fp
 8009e54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f7ff fe22 	bl	8009aa2 <I2C_WaitOnFlagUntilTimeout>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d1e4      	bne.n	8009e2e <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e64:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8009e66:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e68:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e6a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e6e:	2240      	movs	r2, #64	@ 0x40
 8009e70:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8009e74:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e76:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e78:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009e7a:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e7c:	4a4d      	ldr	r2, [pc, #308]	@ (8009fb4 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8009e7e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e82:	9200      	str	r2, [sp, #0]
 8009e84:	fa5f f289 	uxtb.w	r2, r9
 8009e88:	f7ff fd4a 	bl	8009920 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e8c:	462a      	mov	r2, r5
 8009e8e:	4641      	mov	r1, r8
 8009e90:	4620      	mov	r0, r4
 8009e92:	f7ff fddb 	bl	8009a4c <I2C_WaitOnTXISFlagUntilTimeout>
 8009e96:	bb20      	cbnz	r0, 8009ee2 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e98:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e9c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e9e:	d116      	bne.n	8009ece <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009ea0:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2140      	movs	r1, #64	@ 0x40
 8009ea6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009ea8:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009eaa:	4643      	mov	r3, r8
 8009eac:	9500      	str	r5, [sp, #0]
 8009eae:	f7ff fdf8 	bl	8009aa2 <I2C_WaitOnFlagUntilTimeout>
 8009eb2:	b9b0      	cbnz	r0, 8009ee2 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009eb4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	2bff      	cmp	r3, #255	@ 0xff
 8009eba:	4b3f      	ldr	r3, [pc, #252]	@ (8009fb8 <HAL_I2C_Mem_Read+0x1b8>)
 8009ebc:	d815      	bhi.n	8009eea <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009ebe:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009ec0:	b292      	uxth	r2, r2
 8009ec2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ec4:	b2d2      	uxtb	r2, r2
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ecc:	e012      	b.n	8009ef4 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009ece:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ed0:	4641      	mov	r1, r8
 8009ed2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009ed4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ed6:	462a      	mov	r2, r5
 8009ed8:	f7ff fdb8 	bl	8009a4c <I2C_WaitOnTXISFlagUntilTimeout>
 8009edc:	b908      	cbnz	r0, 8009ee2 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	e7de      	b.n	8009ea0 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009ee8:	e7a1      	b.n	8009e2e <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009eea:	22ff      	movs	r2, #255	@ 0xff
 8009eec:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ef4:	4639      	mov	r1, r7
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f7ff fd12 	bl	8009920 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009efc:	4643      	mov	r3, r8
 8009efe:	2200      	movs	r2, #0
 8009f00:	2104      	movs	r1, #4
 8009f02:	4620      	mov	r0, r4
 8009f04:	9500      	str	r5, [sp, #0]
 8009f06:	f7ff fdcc 	bl	8009aa2 <I2C_WaitOnFlagUntilTimeout>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d18f      	bne.n	8009e2e <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f12:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009f14:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009f16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8009f18:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009f1a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8009f1c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8009f1e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009f20:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009f22:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009f24:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009f26:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f2c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	b1b3      	cbz	r3, 8009f60 <HAL_I2C_Mem_Read+0x160>
 8009f32:	b9aa      	cbnz	r2, 8009f60 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f34:	4643      	mov	r3, r8
 8009f36:	2180      	movs	r1, #128	@ 0x80
 8009f38:	4620      	mov	r0, r4
 8009f3a:	9500      	str	r5, [sp, #0]
 8009f3c:	f7ff fdb1 	bl	8009aa2 <I2C_WaitOnFlagUntilTimeout>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f47f af74 	bne.w	8009e2e <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f46:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	2bff      	cmp	r3, #255	@ 0xff
 8009f4c:	d928      	bls.n	8009fa0 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f4e:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009f50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f54:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009f56:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f58:	4639      	mov	r1, r7
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f7ff fce0 	bl	8009920 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009f60:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1c9      	bne.n	8009efc <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f68:	462a      	mov	r2, r5
 8009f6a:	4641      	mov	r1, r8
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f7ff fdd3 	bl	8009b18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	f47f af5b 	bne.w	8009e2e <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	2120      	movs	r1, #32
 8009f7c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009f84:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009f88:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009f8c:	f022 0201 	bic.w	r2, r2, #1
 8009f90:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009f92:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009f96:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009f9a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009f9e:	e747      	b.n	8009e30 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009fa0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009fa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009faa:	b2d2      	uxtb	r2, r2
 8009fac:	9000      	str	r0, [sp, #0]
 8009fae:	e7d3      	b.n	8009f58 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8009fb0:	2002      	movs	r0, #2
 8009fb2:	e73d      	b.n	8009e30 <HAL_I2C_Mem_Read+0x30>
 8009fb4:	80002000 	.word	0x80002000
 8009fb8:	80002400 	.word	0x80002400

08009fbc <HAL_I2C_GetState>:
  return hi2c->State;
 8009fbc:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8009fc0:	4770      	bx	lr

08009fc2 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8009fc2:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8009fc4:	4770      	bx	lr

08009fc6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009fc6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fc8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8009fcc:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fce:	2a20      	cmp	r2, #32
 8009fd0:	b2d4      	uxtb	r4, r2
 8009fd2:	d11c      	bne.n	800a00e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fd4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8009fd8:	2a01      	cmp	r2, #1
 8009fda:	d018      	beq.n	800a00e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fdc:	2224      	movs	r2, #36	@ 0x24
 8009fde:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fe2:	6802      	ldr	r2, [r0, #0]
 8009fe4:	6810      	ldr	r0, [r2, #0]
 8009fe6:	f020 0001 	bic.w	r0, r0, #1
 8009fea:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009fec:	6810      	ldr	r0, [r2, #0]
 8009fee:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8009ff2:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009ff4:	6810      	ldr	r0, [r2, #0]
 8009ff6:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ff8:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8009ffa:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009ffc:	6811      	ldr	r1, [r2, #0]
 8009ffe:	f041 0101 	orr.w	r1, r1, #1
 800a002:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a004:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800a008:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a00c:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800a00e:	2002      	movs	r0, #2
 800a010:	e7fc      	b.n	800a00c <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800a012 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a012:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a014:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800a018:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a01a:	2a20      	cmp	r2, #32
 800a01c:	b2d4      	uxtb	r4, r2
 800a01e:	d11b      	bne.n	800a058 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a020:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800a024:	2a01      	cmp	r2, #1
 800a026:	d017      	beq.n	800a058 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a028:	2224      	movs	r2, #36	@ 0x24
 800a02a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a02e:	6802      	ldr	r2, [r0, #0]
 800a030:	6810      	ldr	r0, [r2, #0]
 800a032:	f020 0001 	bic.w	r0, r0, #1
 800a036:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a038:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a03a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a03e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a042:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 800a044:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800a046:	6811      	ldr	r1, [r2, #0]
 800a048:	f041 0101 	orr.w	r1, r1, #1
 800a04c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a04e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800a052:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a056:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800a058:	2002      	movs	r0, #2
 800a05a:	e7fc      	b.n	800a056 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800a05c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800a05c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800a05e:	2401      	movs	r4, #1
 800a060:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800a062:	2500      	movs	r5, #0
 800a064:	194e      	adds	r6, r1, r5
 800a066:	443d      	add	r5, r7
 800a068:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800a06a:	42be      	cmp	r6, r7
 800a06c:	d112      	bne.n	800a094 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800a06e:	2c10      	cmp	r4, #16
 800a070:	d108      	bne.n	800a084 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800a072:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a074:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800a076:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 800a078:	601d      	str	r5, [r3, #0]
  p = 0;
 800a07a:	4623      	mov	r3, r4
  si = Huffsize[0];
 800a07c:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800a07e:	5cc8      	ldrb	r0, [r1, r3]
 800a080:	b9d8      	cbnz	r0, 800a0ba <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800a082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 800a084:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800a086:	3401      	adds	r4, #1
 800a088:	19ee      	adds	r6, r5, r7
 800a08a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800a08e:	d9e9      	bls.n	800a064 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 800a090:	2001      	movs	r0, #1
 800a092:	e7f6      	b.n	800a082 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 800a094:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 800a098:	e7e7      	b.n	800a06a <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800a09a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800a09e:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800a0a0:	5cc8      	ldrb	r0, [r1, r3]
 800a0a2:	19dc      	adds	r4, r3, r7
 800a0a4:	42a8      	cmp	r0, r5
 800a0a6:	d0f8      	beq.n	800a09a <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 800a0a8:	2d1f      	cmp	r5, #31
 800a0aa:	d8f1      	bhi.n	800a090 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a0ac:	fa06 f005 	lsl.w	r0, r6, r5
 800a0b0:	42a0      	cmp	r0, r4
 800a0b2:	d9ed      	bls.n	800a090 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800a0b4:	0064      	lsls	r4, r4, #1
    si++;
 800a0b6:	3501      	adds	r5, #1
 800a0b8:	e7e1      	b.n	800a07e <JPEG_Bits_To_SizeCodes+0x22>
 800a0ba:	1ae7      	subs	r7, r4, r3
 800a0bc:	e7f0      	b.n	800a0a0 <JPEG_Bits_To_SizeCodes+0x44>

0800a0be <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800a0be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c0:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800a0c4:	460d      	mov	r5, r1
 800a0c6:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a0c8:	ab01      	add	r3, sp, #4
 800a0ca:	aa43      	add	r2, sp, #268	@ 0x10c
 800a0cc:	a902      	add	r1, sp, #8
 800a0ce:	f7ff ffc5 	bl	800a05c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a0d2:	b938      	cbnz	r0, 800a0e4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800a0d4:	9e01      	ldr	r6, [sp, #4]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	f104 010f 	add.w	r1, r4, #15
 800a0dc:	360f      	adds	r6, #15
 800a0de:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800a0e0:	42a1      	cmp	r1, r4
 800a0e2:	d102      	bne.n	800a0ea <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a0e4:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800a0ea:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800a0ee:	2e0b      	cmp	r6, #11
 800a0f0:	d80a      	bhi.n	800a108 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a0f2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800a0f6:	f852 cb04 	ldr.w	ip, [r2], #4
 800a0fa:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a0fe:	f813 7b01 	ldrb.w	r7, [r3], #1
 800a102:	3f01      	subs	r7, #1
 800a104:	55af      	strb	r7, [r5, r6]
      k++;
 800a106:	e7eb      	b.n	800a0e0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a108:	2001      	movs	r0, #1
 800a10a:	e7eb      	b.n	800a0e4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800a10c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a10c:	4603      	mov	r3, r0
 800a10e:	4608      	mov	r0, r1
 800a110:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a112:	681c      	ldr	r4, [r3, #0]
{
 800a114:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a116:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d125      	bne.n	800a16a <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a11e:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a122:	a901      	add	r1, sp, #4
 800a124:	f7ff ffcb 	bl	800a0be <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800a128:	b9e8      	cbnz	r0, 800a166 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800a12a:	aa01      	add	r2, sp, #4
 800a12c:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800a130:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800a134:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800a136:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800a138:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a13a:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800a13c:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a13e:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800a142:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a144:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a146:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a14a:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800a14e:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a150:	7b13      	ldrb	r3, [r2, #12]
 800a152:	021b      	lsls	r3, r3, #8
 800a154:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a158:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a15a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a15e:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a162:	42b4      	cmp	r4, r6
 800a164:	d1e9      	bne.n	800a13a <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a166:	b011      	add	sp, #68	@ 0x44
 800a168:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a16a:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800a16e:	429a      	cmp	r2, r3
 800a170:	d102      	bne.n	800a178 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a172:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800a176:	e7d4      	b.n	800a122 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800a178:	2001      	movs	r0, #1
 800a17a:	e7f4      	b.n	800a166 <JPEG_Set_HuffDC_Mem+0x5a>

0800a17c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a180:	6804      	ldr	r4, [r0, #0]
{
 800a182:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800a186:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a188:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d149      	bne.n	800a224 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a190:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a194:	466b      	mov	r3, sp
 800a196:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800a19a:	a901      	add	r1, sp, #4
 800a19c:	4630      	mov	r0, r6
 800a19e:	f7ff ff5d 	bl	800a05c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d13a      	bne.n	800a21c <JPEG_Set_HuffAC_Mem+0xa0>
 800a1a6:	9b00      	ldr	r3, [sp, #0]
 800a1a8:	460d      	mov	r5, r1
 800a1aa:	f106 0c0f 	add.w	ip, r6, #15
 800a1ae:	4617      	mov	r7, r2
 800a1b0:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a1b2:	f04f 0e0a 	mov.w	lr, #10
 800a1b6:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a1b8:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800a1ba:	4561      	cmp	r1, ip
 800a1bc:	d139      	bne.n	800a232 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800a1be:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800a1c2:	a942      	add	r1, sp, #264	@ 0x108
 800a1c4:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800a1c8:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800a1ca:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800a1cc:	6063      	str	r3, [r4, #4]
 800a1ce:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800a1d0:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800a1d4:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800a1d8:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800a1da:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a1de:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800a1e0:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a1e4:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800a1e6:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a1ea:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a1ec:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800a1f0:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a1f2:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800a1f6:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a1f8:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a1fa:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a1fe:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800a202:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a204:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800a208:	021b      	lsls	r3, r3, #8
 800a20a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a20e:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a214:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a218:	42b4      	cmp	r4, r6
 800a21a:	d1e7      	bne.n	800a1ec <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a21c:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800a220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a224:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800a228:	429a      	cmp	r2, r3
 800a22a:	d10f      	bne.n	800a24c <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a22c:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800a230:	e7b0      	b.n	800a194 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800a232:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800a236:	b15b      	cbz	r3, 800a250 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a238:	2bf0      	cmp	r3, #240	@ 0xf0
 800a23a:	d015      	beq.n	800a268 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800a23c:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 800a23e:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a242:	3b01      	subs	r3, #1
 800a244:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a248:	2ba1      	cmp	r3, #161	@ 0xa1
 800a24a:	d902      	bls.n	800a252 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800a24c:	2001      	movs	r0, #1
 800a24e:	e7e5      	b.n	800a21c <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 800a250:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a252:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800a256:	f857 8b04 	ldr.w	r8, [r7], #4
 800a25a:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a25e:	f815 2b01 	ldrb.w	r2, [r5], #1
 800a262:	3a01      	subs	r2, #1
 800a264:	54f2      	strb	r2, [r6, r3]
      k++;
 800a266:	e7a8      	b.n	800a1ba <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800a268:	23a1      	movs	r3, #161	@ 0xa1
 800a26a:	e7f2      	b.n	800a252 <JPEG_Set_HuffAC_Mem+0xd6>

0800a26c <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a26c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a26e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a272:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a274:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a276:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a278:	f002 0203 	and.w	r2, r2, #3
 800a27c:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a27e:	685a      	ldr	r2, [r3, #4]
 800a280:	bf0c      	ite	eq
 800a282:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a286:	f022 0208 	bicne.w	r2, r2, #8
 800a28a:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	f022 0201 	bic.w	r2, r2, #1
 800a292:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a294:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a296:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a29a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a29c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a29e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a2a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a2a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a2aa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a2ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2ae:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a2b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	f042 0201 	orr.w	r2, r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a2bc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800a2be:	f002 020c 	and.w	r2, r2, #12
 800a2c2:	2a08      	cmp	r2, #8
 800a2c4:	d104      	bne.n	800a2d0 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800a2c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2c8:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a2cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800a2ce:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a2d0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800a2d2:	f002 020c 	and.w	r2, r2, #12
 800a2d6:	2a0c      	cmp	r2, #12
 800a2d8:	d1f9      	bne.n	800a2ce <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a2da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2dc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a2e0:	e7f4      	b.n	800a2cc <JPEG_Init_Process+0x60>
	...

0800a2e4 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a2e6:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 800a2e8:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a2ea:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a2ec:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a2ee:	42aa      	cmp	r2, r5
 800a2f0:	d313      	bcc.n	800a31a <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800a2f2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a2f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800a2f6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a2f8:	428b      	cmp	r3, r1
 800a2fa:	d30e      	bcc.n	800a31a <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800a2fc:	4f18      	ldr	r7, [pc, #96]	@ (800a360 <JPEG_DMA_StartProcess+0x7c>)
 800a2fe:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800a300:	4f18      	ldr	r7, [pc, #96]	@ (800a364 <JPEG_DMA_StartProcess+0x80>)
 800a302:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800a304:	4e18      	ldr	r6, [pc, #96]	@ (800a368 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800a306:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800a308:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800a30a:	4e18      	ldr	r6, [pc, #96]	@ (800a36c <JPEG_DMA_StartProcess+0x88>)
 800a30c:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800a30e:	b105      	cbz	r5, 800a312 <JPEG_DMA_StartProcess+0x2e>
 800a310:	b931      	cbnz	r1, 800a320 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a312:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a314:	f043 0304 	orr.w	r3, r3, #4
 800a318:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800a31a:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800a31c:	b003      	add	sp, #12
 800a31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a320:	fbb2 f6f5 	udiv	r6, r2, r5
 800a324:	fb05 2516 	mls	r5, r5, r6, r2
 800a328:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a32a:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a32c:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800a32e:	fbb3 f2f1 	udiv	r2, r3, r1
 800a332:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a336:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800a338:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a33a:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800a33c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a33e:	9500      	str	r5, [sp, #0]
 800a340:	69e2      	ldr	r2, [r4, #28]
 800a342:	f001 f82a 	bl	800b39a <HAL_MDMA_Start_IT>
 800a346:	2800      	cmp	r0, #0
 800a348:	d1e3      	bne.n	800a312 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a34a:	6822      	ldr	r2, [r4, #0]
 800a34c:	9500      	str	r5, [sp, #0]
 800a34e:	3240      	adds	r2, #64	@ 0x40
 800a350:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a352:	69a1      	ldr	r1, [r4, #24]
 800a354:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a356:	f001 f820 	bl	800b39a <HAL_MDMA_Start_IT>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	d0de      	beq.n	800a31c <JPEG_DMA_StartProcess+0x38>
 800a35e:	e7d8      	b.n	800a312 <JPEG_DMA_StartProcess+0x2e>
 800a360:	0800a8a7 	.word	0x0800a8a7
 800a364:	0800a79f 	.word	0x0800a79f
 800a368:	0800ad65 	.word	0x0800ad65
 800a36c:	0800ad57 	.word	0x0800ad57

0800a370 <HAL_JPEG_Init>:
{
 800a370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800a372:	4605      	mov	r5, r0
 800a374:	2800      	cmp	r0, #0
 800a376:	f000 80f2 	beq.w	800a55e <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800a37a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800a37e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a382:	b91b      	cbnz	r3, 800a38c <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800a384:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800a388:	f7f7 f8e0 	bl	800154c <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800a38c:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800a38e:	2302      	movs	r3, #2
 800a390:	4a86      	ldr	r2, [pc, #536]	@ (800a5ac <HAL_JPEG_Init+0x23c>)
 800a392:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800a396:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800a39a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a39c:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800a3a0:	f043 0301 	orr.w	r3, r3, #1
 800a3a4:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	f023 0301 	bic.w	r3, r3, #1
 800a3ac:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a3ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a3b0:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800a3b4:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a3b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a3b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a3bc:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a3be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a3c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a3c4:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a3c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a3c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a3cc:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800a3ce:	4b78      	ldr	r3, [pc, #480]	@ (800a5b0 <HAL_JPEG_Init+0x240>)
 800a3d0:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800a3d2:	4b78      	ldr	r3, [pc, #480]	@ (800a5b4 <HAL_JPEG_Init+0x244>)
 800a3d4:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800a3d6:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800a3d8:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a3dc:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800a3de:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a3e0:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a3e2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a3e4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a3e8:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a3ea:	4333      	orrs	r3, r6
 800a3ec:	7c56      	ldrb	r6, [r2, #17]
 800a3ee:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a3f2:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800a3f6:	4281      	cmp	r1, r0
 800a3f8:	d1f0      	bne.n	800a3dc <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a3fa:	4b6f      	ldr	r3, [pc, #444]	@ (800a5b8 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a3fc:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800a400:	4a6e      	ldr	r2, [pc, #440]	@ (800a5bc <HAL_JPEG_Init+0x24c>)
 800a402:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a406:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800a40a:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a40e:	4610      	mov	r0, r2
 800a410:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a412:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800a416:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800a41a:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a41e:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800a420:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a422:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a426:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a428:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a42c:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a430:	ea43 030c 	orr.w	r3, r3, ip
 800a434:	f890 c011 	ldrb.w	ip, [r0, #17]
 800a438:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a43c:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800a440:	42be      	cmp	r6, r7
 800a442:	d1ec      	bne.n	800a41e <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 800a444:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a448:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800a44c:	0c1b      	lsrs	r3, r3, #16
 800a44e:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a450:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800a454:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800a458:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a45c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800a460:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a462:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a466:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a468:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a46c:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a470:	4333      	orrs	r3, r6
 800a472:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800a476:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a47a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800a47e:	4281      	cmp	r1, r0
 800a480:	d1ec      	bne.n	800a45c <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800a482:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800a486:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800a48a:	4a4d      	ldr	r2, [pc, #308]	@ (800a5c0 <HAL_JPEG_Init+0x250>)
 800a48c:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800a490:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a492:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800a496:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800a49a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800a49e:	4013      	ands	r3, r2
  *address = value;
 800a4a0:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800a4aa:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800a4ae:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800a4b2:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800a4b6:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800a4ba:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a4bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800a4c0:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800a4c4:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800a4c8:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a4ca:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800a4ce:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800a4d2:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a4d6:	4b3b      	ldr	r3, [pc, #236]	@ (800a5c4 <HAL_JPEG_Init+0x254>)
 800a4d8:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800a4dc:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800a4e0:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800a4e4:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800a4e8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a4ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800a4ee:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800a4f2:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800a4f6:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a4f8:	4a33      	ldr	r2, [pc, #204]	@ (800a5c8 <HAL_JPEG_Init+0x258>)
 800a4fa:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800a4fe:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800a502:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a506:	4b31      	ldr	r3, [pc, #196]	@ (800a5cc <HAL_JPEG_Init+0x25c>)
 800a508:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800a50c:	4b30      	ldr	r3, [pc, #192]	@ (800a5d0 <HAL_JPEG_Init+0x260>)
 800a50e:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800a512:	4b30      	ldr	r3, [pc, #192]	@ (800a5d4 <HAL_JPEG_Init+0x264>)
 800a514:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 800a518:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800a51c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a51e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800a522:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a526:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 800a52a:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a52c:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a530:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a532:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a536:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a53a:	4333      	orrs	r3, r6
 800a53c:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800a540:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a544:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800a548:	4281      	cmp	r1, r0
 800a54a:	d1ec      	bne.n	800a526 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a54c:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800a550:	491a      	ldr	r1, [pc, #104]	@ (800a5bc <HAL_JPEG_Init+0x24c>)
 800a552:	4628      	mov	r0, r5
 800a554:	f7ff fe12 	bl	800a17c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a558:	b118      	cbz	r0, 800a562 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800a55a:	2301      	movs	r3, #1
 800a55c:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800a55e:	2001      	movs	r0, #1
}
 800a560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a562:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800a566:	4918      	ldr	r1, [pc, #96]	@ (800a5c8 <HAL_JPEG_Init+0x258>)
 800a568:	4628      	mov	r0, r5
 800a56a:	f7ff fe07 	bl	800a17c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a56e:	2800      	cmp	r0, #0
 800a570:	d1f3      	bne.n	800a55a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a572:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800a576:	490d      	ldr	r1, [pc, #52]	@ (800a5ac <HAL_JPEG_Init+0x23c>)
 800a578:	4628      	mov	r0, r5
 800a57a:	f7ff fdc7 	bl	800a10c <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800a57e:	2800      	cmp	r0, #0
 800a580:	d1eb      	bne.n	800a55a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a582:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800a586:	4914      	ldr	r1, [pc, #80]	@ (800a5d8 <HAL_JPEG_Init+0x268>)
 800a588:	4628      	mov	r0, r5
 800a58a:	f7ff fdbf 	bl	800a10c <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800a58e:	2800      	cmp	r0, #0
 800a590:	d1e3      	bne.n	800a55a <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800a592:	6863      	ldr	r3, [r4, #4]
 800a594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a598:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a59a:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800a59c:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800a59e:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a5a0:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800a5a4:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800a5a6:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800a5a8:	e7da      	b.n	800a560 <HAL_JPEG_Init+0x1f0>
 800a5aa:	bf00      	nop
 800a5ac:	0802918c 	.word	0x0802918c
 800a5b0:	08028f8c 	.word	0x08028f8c
 800a5b4:	08028f4c 	.word	0x08028f4c
 800a5b8:	0b0a0908 	.word	0x0b0a0908
 800a5bc:	080290be 	.word	0x080290be
 800a5c0:	ffff0000 	.word	0xffff0000
 800a5c4:	09080706 	.word	0x09080706
 800a5c8:	0802900c 	.word	0x0802900c
 800a5cc:	01000404 	.word	0x01000404
 800a5d0:	05070403 	.word	0x05070403
 800a5d4:	04040201 	.word	0x04040201
 800a5d8:	08029170 	.word	0x08029170

0800a5dc <HAL_JPEG_GetInfo>:
{
 800a5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d06f      	beq.n	800a6c4 <HAL_JPEG_GetInfo+0xe8>
 800a5e4:	2900      	cmp	r1, #0
 800a5e6:	d06d      	beq.n	800a6c4 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800a5e8:	6804      	ldr	r4, [r0, #0]
 800a5ea:	6863      	ldr	r3, [r4, #4]
 800a5ec:	f003 0303 	and.w	r3, r3, #3
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d047      	beq.n	800a684 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800a5f4:	6863      	ldr	r3, [r4, #4]
 800a5f6:	f013 0303 	ands.w	r3, r3, #3
 800a5fa:	d005      	beq.n	800a608 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800a5fc:	6863      	ldr	r3, [r4, #4]
 800a5fe:	f003 0303 	and.w	r3, r3, #3
 800a602:	2b03      	cmp	r3, #3
 800a604:	d15e      	bne.n	800a6c4 <HAL_JPEG_GetInfo+0xe8>
 800a606:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a608:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800a60a:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a60c:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a610:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a612:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a614:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800a616:	68e2      	ldr	r2, [r4, #12]
 800a618:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a61c:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a61e:	d13c      	bne.n	800a69a <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a620:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a622:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a624:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a628:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a62a:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a62c:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a62e:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a632:	d129      	bne.n	800a688 <HAL_JPEG_GetInfo+0xac>
 800a634:	4313      	orrs	r3, r2
 800a636:	f013 0f0f 	tst.w	r3, #15
 800a63a:	bf0c      	ite	eq
 800a63c:	2301      	moveq	r3, #1
 800a63e:	2300      	movne	r3, #0
 800a640:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800a642:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	3450      	adds	r4, #80	@ 0x50
 800a648:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800a6c8 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800a64c:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a64e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800a652:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800a656:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800a65a:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800a65e:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a660:	fa29 f206 	lsr.w	r2, r9, r6
 800a664:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800a666:	2a01      	cmp	r2, #1
 800a668:	d119      	bne.n	800a69e <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800a66a:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800a66c:	3608      	adds	r6, #8
 800a66e:	3701      	adds	r7, #1
 800a670:	2e20      	cmp	r6, #32
 800a672:	d1f5      	bne.n	800a660 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800a674:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a676:	2d40      	cmp	r5, #64	@ 0x40
 800a678:	d1ed      	bne.n	800a656 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800a67a:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800a67c:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800a67e:	610b      	str	r3, [r1, #16]
}
 800a680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a684:	2310      	movs	r3, #16
 800a686:	e7bf      	b.n	800a608 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a688:	2d03      	cmp	r5, #3
 800a68a:	d106      	bne.n	800a69a <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a68c:	4313      	orrs	r3, r2
 800a68e:	f013 0f0f 	tst.w	r3, #15
 800a692:	bf0c      	ite	eq
 800a694:	2301      	moveq	r3, #1
 800a696:	2300      	movne	r3, #0
 800a698:	e7d3      	b.n	800a642 <HAL_JPEG_GetInfo+0x66>
 800a69a:	2300      	movs	r3, #0
 800a69c:	e7d1      	b.n	800a642 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a69e:	fb0e fb02 	mul.w	fp, lr, r2
 800a6a2:	f897 a000 	ldrb.w	sl, [r7]
 800a6a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6a8:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800a6ac:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800a6b0:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800a6b2:	bf8b      	itete	hi
 800a6b4:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800a6b8:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800a6bc:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800a6be:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800a6c2:	e7d3      	b.n	800a66c <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800a6c4:	2001      	movs	r0, #1
 800a6c6:	e7db      	b.n	800a680 <HAL_JPEG_GetInfo+0xa4>
 800a6c8:	08028fcc 	.word	0x08028fcc

0800a6cc <HAL_JPEG_Decode_DMA>:
{
 800a6cc:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	b348      	cbz	r0, 800a726 <HAL_JPEG_Decode_DMA+0x5a>
 800a6d2:	b341      	cbz	r1, 800a726 <HAL_JPEG_Decode_DMA+0x5a>
 800a6d4:	b33b      	cbz	r3, 800a726 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800a6d6:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800a6da:	2d01      	cmp	r5, #1
 800a6dc:	d028      	beq.n	800a730 <HAL_JPEG_Decode_DMA+0x64>
 800a6de:	2501      	movs	r5, #1
 800a6e0:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800a6e4:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800a6e8:	2d01      	cmp	r5, #1
 800a6ea:	d11e      	bne.n	800a72a <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a6ec:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800a6ee:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a6f0:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800a6f4:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800a6f6:	f025 050f 	bic.w	r5, r5, #15
 800a6fa:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a6fc:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800a6fe:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800a702:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a706:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 800a708:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800a70a:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800a70c:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800a70e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800a710:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800a712:	f7ff fdab 	bl	800a26c <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800a716:	f7ff fde5 	bl	800a2e4 <JPEG_DMA_StartProcess>
 800a71a:	b128      	cbz	r0, 800a728 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a71c:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800a71e:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a722:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800a726:	2001      	movs	r0, #1
}
 800a728:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800a72a:	2300      	movs	r3, #0
 800a72c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800a730:	2002      	movs	r0, #2
 800a732:	e7f9      	b.n	800a728 <HAL_JPEG_Decode_DMA+0x5c>

0800a734 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a734:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a736:	f003 030c 	and.w	r3, r3, #12
 800a73a:	2b0c      	cmp	r3, #12
 800a73c:	d10d      	bne.n	800a75a <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a73e:	07cb      	lsls	r3, r1, #31
 800a740:	d503      	bpl.n	800a74a <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a742:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a744:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a748:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a74a:	0789      	lsls	r1, r1, #30
 800a74c:	d503      	bpl.n	800a756 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a74e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a750:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a754:	6543      	str	r3, [r0, #84]	@ 0x54
}
 800a756:	2000      	movs	r0, #0
 800a758:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a75a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a75c:	f003 030c 	and.w	r3, r3, #12
 800a760:	2b08      	cmp	r3, #8
 800a762:	d1f8      	bne.n	800a756 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a764:	f011 0301 	ands.w	r3, r1, #1
 800a768:	d004      	beq.n	800a774 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a76a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a76c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a770:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800a772:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a774:	078a      	lsls	r2, r1, #30
 800a776:	d505      	bpl.n	800a784 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a778:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a77a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a77e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a782:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800a784:	6801      	ldr	r1, [r0, #0]
 800a786:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800a788:	ea22 0303 	bic.w	r3, r2, r3
 800a78c:	630b      	str	r3, [r1, #48]	@ 0x30
 800a78e:	e7e2      	b.n	800a756 <HAL_JPEG_Pause+0x22>

0800a790 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800a790:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800a792:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800a794:	4770      	bx	lr

0800a796 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800a796:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800a798:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800a79a:	4770      	bx	lr

0800a79c <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800a79c:	4770      	bx	lr

0800a79e <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a79e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 800a7a0:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a7a2:	6803      	ldr	r3, [r0, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	f022 0201 	bic.w	r2, r2, #1
 800a7aa:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a7ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7ae:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a7b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a7ba:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800a7bc:	f043 0304 	orr.w	r3, r3, #4
 800a7c0:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800a7c2:	f7f8 fa07 	bl	8002bd4 <HAL_JPEG_ErrorCallback>
}
 800a7c6:	bd08      	pop	{r3, pc}

0800a7c8 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a7c8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800a7ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a7d0:	b922      	cbnz	r2, 800a7dc <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	f7ff ffae 	bl	800a734 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800a7d8:	2200      	movs	r2, #0
 800a7da:	e004      	b.n	800a7e6 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a7dc:	6a03      	ldr	r3, [r0, #32]
 800a7de:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a7e0:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a7e2:	d924      	bls.n	800a82e <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a7e4:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a7e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a7e8:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800a7ec:	d11e      	bne.n	800a82c <JPEG_ReadInputData+0x64>
 800a7ee:	b1ea      	cbz	r2, 800a82c <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800a7f0:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800a7f4:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800a7f6:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800a7fa:	d827      	bhi.n	800a84c <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a7fc:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800a7fe:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a800:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a802:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a804:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 800a806:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a808:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a80a:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a80e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a812:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a814:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a818:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a81c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a820:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800a822:	6a22      	ldr	r2, [r4, #32]
 800a824:	f102 0204 	add.w	r2, r2, #4
 800a828:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a82a:	d1e8      	bne.n	800a7fe <JPEG_ReadInputData+0x36>
}
 800a82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a82e:	429a      	cmp	r2, r3
 800a830:	d1d2      	bne.n	800a7d8 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a832:	6a01      	ldr	r1, [r0, #32]
 800a834:	f7f8 f960 	bl	8002af8 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800a838:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a83a:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a83c:	bf84      	itt	hi
 800a83e:	f023 0303 	bichi.w	r3, r3, #3
 800a842:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800a844:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800a846:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800a848:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800a84a:	e7cc      	b.n	800a7e6 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800a84c:	2a03      	cmp	r2, #3
 800a84e:	d918      	bls.n	800a882 <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a850:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800a852:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a854:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a856:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a858:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800a85a:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a85c:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a85e:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a862:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a866:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a868:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a86c:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a870:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a874:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800a876:	6a22      	ldr	r2, [r4, #32]
 800a878:	f102 0204 	add.w	r2, r2, #4
 800a87c:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a87e:	d1e8      	bne.n	800a852 <JPEG_ReadInputData+0x8a>
 800a880:	e7d4      	b.n	800a82c <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800a882:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a884:	6a25      	ldr	r5, [r4, #32]
 800a886:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 800a888:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a88a:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800a88c:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a88e:	fa05 f506 	lsl.w	r5, r5, r6
 800a892:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 800a896:	6a25      	ldr	r5, [r4, #32]
 800a898:	f105 0501 	add.w	r5, r5, #1
 800a89c:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800a89e:	d1f1      	bne.n	800a884 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800a8a0:	6822      	ldr	r2, [r4, #0]
 800a8a2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800a8a4:	e7c2      	b.n	800a82c <JPEG_ReadInputData+0x64>

0800a8a6 <JPEG_MDMAInCpltCallback>:
{
 800a8a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a8a8:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a8aa:	6822      	ldr	r2, [r4, #0]
 800a8ac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a8ae:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800a8b2:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800a8b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a8b6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a8ba:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800a8be:	041b      	lsls	r3, r3, #16
 800a8c0:	0c1b      	lsrs	r3, r3, #16
 800a8c2:	2b0c      	cmp	r3, #12
 800a8c4:	d11a      	bne.n	800a8fc <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a8c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a8c8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a8ca:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a8cc:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a8ce:	695a      	ldr	r2, [r3, #20]
 800a8d0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a8d2:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800a8d6:	1a9b      	subs	r3, r3, r2
 800a8d8:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a8da:	6a21      	ldr	r1, [r4, #32]
 800a8dc:	f7f8 f90c 	bl	8002af8 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800a8e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a8e2:	42ab      	cmp	r3, r5
 800a8e4:	d327      	bcc.n	800a936 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 800a8e6:	b95d      	cbnz	r5, 800a900 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a8e8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800a8ea:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a8ec:	f043 0304 	orr.w	r3, r3, #4
 800a8f0:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a8f2:	2306      	movs	r3, #6
 800a8f4:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800a8f8:	f7f8 f96c 	bl	8002bd4 <HAL_JPEG_ErrorCallback>
}
 800a8fc:	b003      	add	sp, #12
 800a8fe:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a900:	fbb3 f2f5 	udiv	r2, r3, r5
 800a904:	fb05 3212 	mls	r2, r5, r2, r3
 800a908:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800a90a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a90c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a90e:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a910:	04db      	lsls	r3, r3, #19
 800a912:	d40a      	bmi.n	800a92a <JPEG_MDMAInCpltCallback+0x84>
 800a914:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a916:	b143      	cbz	r3, 800a92a <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a918:	2101      	movs	r1, #1
 800a91a:	3240      	adds	r2, #64	@ 0x40
 800a91c:	9100      	str	r1, [sp, #0]
 800a91e:	69a1      	ldr	r1, [r4, #24]
 800a920:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a922:	f000 fd3a 	bl	800b39a <HAL_MDMA_Start_IT>
 800a926:	2800      	cmp	r0, #0
 800a928:	d1de      	bne.n	800a8e8 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a92a:	6822      	ldr	r2, [r4, #0]
 800a92c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a92e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a932:	6313      	str	r3, [r2, #48]	@ 0x30
 800a934:	e7e2      	b.n	800a8fc <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0e8      	beq.n	800a90c <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800a93a:	079a      	lsls	r2, r3, #30
 800a93c:	d0e6      	beq.n	800a90c <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	3304      	adds	r3, #4
 800a944:	e7e1      	b.n	800a90a <JPEG_MDMAInCpltCallback+0x64>

0800a946 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a946:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a94a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a94e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800a950:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a952:	4293      	cmp	r3, r2
 800a954:	d32a      	bcc.n	800a9ac <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800a956:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800a958:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800a95a:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a95c:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800a95e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800a960:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a962:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a964:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a966:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a968:	69e0      	ldr	r0, [r4, #28]
 800a96a:	4428      	add	r0, r5
 800a96c:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800a970:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a972:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a974:	69e0      	ldr	r0, [r4, #28]
 800a976:	4428      	add	r0, r5
 800a978:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a97c:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a980:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a982:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a984:	69e0      	ldr	r0, [r4, #28]
 800a986:	4428      	add	r0, r5
 800a988:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800a98a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a98c:	f103 0304 	add.w	r3, r3, #4
 800a990:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a992:	d1e1      	bne.n	800a958 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a994:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a996:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a998:	429a      	cmp	r2, r3
 800a99a:	d106      	bne.n	800a9aa <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a99c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a99e:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f7f8 f8c7 	bl	8002b34 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800a9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a9ac:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d9fb      	bls.n	800a9aa <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a9b2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a9b4:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a9b6:	1a9b      	subs	r3, r3, r2
 800a9b8:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800a9ba:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a9bc:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800a9be:	d105      	bne.n	800a9cc <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a9c0:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a9c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a9c4:	429f      	cmp	r7, r3
 800a9c6:	d119      	bne.n	800a9fc <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a9c8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a9ca:	e7e9      	b.n	800a9a0 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800a9cc:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800a9ce:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800a9d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a9d2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a9d4:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a9d6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a9d8:	69e1      	ldr	r1, [r4, #28]
 800a9da:	4429      	add	r1, r5
 800a9dc:	0a1d      	lsrs	r5, r3, #8
 800a9de:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a9e0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a9e2:	69e1      	ldr	r1, [r4, #28]
 800a9e4:	4429      	add	r1, r5
 800a9e6:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a9e8:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a9ea:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a9ec:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a9ee:	69e1      	ldr	r1, [r4, #28]
 800a9f0:	4429      	add	r1, r5
 800a9f2:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800a9f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a9fa:	e7de      	b.n	800a9ba <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a9fc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a9fe:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800aa00:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800aa02:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800aa04:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800aa06:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800aa08:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800aa0a:	d114      	bne.n	800aa36 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa0c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7f8 f890 	bl	8002b34 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800aa18:	1d2b      	adds	r3, r5, #4
 800aa1a:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d8c4      	bhi.n	800a9aa <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800aa20:	00da      	lsls	r2, r3, #3
 800aa22:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800aa24:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800aa26:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800aa28:	fa26 f202 	lsr.w	r2, r6, r2
 800aa2c:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800aa2e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aa30:	3201      	adds	r2, #1
 800aa32:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800aa34:	e7f2      	b.n	800aa1c <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800aa36:	f002 0303 	and.w	r3, r2, #3
 800aa3a:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800aa3e:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800aa40:	00db      	lsls	r3, r3, #3
 800aa42:	fa26 f303 	lsr.w	r3, r6, r3
 800aa46:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800aa4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800aa50:	e7d9      	b.n	800aa06 <JPEG_StoreOutputData+0xc0>

0800aa52 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa52:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800aa54:	f003 0303 	and.w	r3, r3, #3
 800aa58:	2b02      	cmp	r3, #2
{
 800aa5a:	b510      	push	{r4, lr}
 800aa5c:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa5e:	d114      	bne.n	800aa8a <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800aa60:	6803      	ldr	r3, [r0, #0]
 800aa62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa64:	065b      	lsls	r3, r3, #25
 800aa66:	d510      	bpl.n	800aa8a <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800aa68:	1d01      	adds	r1, r0, #4
 800aa6a:	f7ff fdb7 	bl	800a5dc <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800aa6e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800aa70:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800aa72:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800aa74:	f7f8 f80a 	bl	8002a8c <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa80:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800aa82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa88:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800aa8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aa8c:	04d9      	lsls	r1, r3, #19
 800aa8e:	d407      	bmi.n	800aaa0 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa94:	0792      	lsls	r2, r2, #30
 800aa96:	d544      	bpl.n	800ab22 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800aa98:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f7ff fe94 	bl	800a7c8 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800aaa0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aaa2:	0499      	lsls	r1, r3, #18
 800aaa4:	d407      	bmi.n	800aab6 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaaa:	0712      	lsls	r2, r2, #28
 800aaac:	d53e      	bpl.n	800ab2c <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800aaae:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800aab0:	4620      	mov	r0, r4
 800aab2:	f7ff ff48 	bl	800a946 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaba:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800aabe:	2a20      	cmp	r2, #32
 800aac0:	d13c      	bne.n	800ab3c <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	f022 0201 	bic.w	r2, r2, #1
 800aac8:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800aaca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aacc:	f002 020c 	and.w	r2, r2, #12
 800aad0:	2a08      	cmp	r2, #8
 800aad2:	d103      	bne.n	800aadc <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aad6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aada:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aadc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aade:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aae2:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800aae4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aae6:	b133      	cbz	r3, 800aaf6 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aae8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aaea:	4620      	mov	r0, r4
 800aaec:	69e1      	ldr	r1, [r4, #28]
 800aaee:	f7f8 f821 	bl	8002b34 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800aaf6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aaf8:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aafa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aafc:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab00:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab04:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab06:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800ab08:	f04f 0200 	mov.w	r2, #0
 800ab0c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ab10:	f04f 0201 	mov.w	r2, #1
 800ab14:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab18:	d10d      	bne.n	800ab36 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ab1a:	f7f8 f85d 	bl	8002bd8 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800ab1e:	2001      	movs	r0, #1
}
 800ab20:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800ab22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab24:	0758      	lsls	r0, r3, #29
 800ab26:	d5bb      	bpl.n	800aaa0 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800ab28:	2101      	movs	r1, #1
 800ab2a:	e7b6      	b.n	800aa9a <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ab2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab2e:	06db      	lsls	r3, r3, #27
 800ab30:	d5c1      	bpl.n	800aab6 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800ab32:	2101      	movs	r1, #1
 800ab34:	e7bc      	b.n	800aab0 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ab36:	f7ff fe31 	bl	800a79c <HAL_JPEG_EncodeCpltCallback>
 800ab3a:	e7f0      	b.n	800ab1e <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	e7ef      	b.n	800ab20 <JPEG_Process+0xce>

0800ab40 <JPEG_DMA_PollResidualData>:
{
 800ab40:	b570      	push	{r4, r5, r6, lr}
 800ab42:	4604      	mov	r4, r0
 800ab44:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ab46:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ab48:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ab4a:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800ab4e:	d122      	bne.n	800ab96 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ab50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab52:	06d0      	lsls	r0, r2, #27
 800ab54:	d51f      	bpl.n	800ab96 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800ab56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800ab58:	69e1      	ldr	r1, [r4, #28]
 800ab5a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ab5c:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800ab5e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ab60:	69e2      	ldr	r2, [r4, #28]
 800ab62:	440a      	add	r2, r1
 800ab64:	0a19      	lsrs	r1, r3, #8
 800ab66:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800ab68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ab6a:	69e2      	ldr	r2, [r4, #28]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800ab70:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800ab72:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800ab74:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ab76:	69e2      	ldr	r2, [r4, #28]
 800ab78:	440a      	add	r2, r1
 800ab7a:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800ab7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ab7e:	3304      	adds	r3, #4
 800ab80:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800ab82:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ab84:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d105      	bne.n	800ab96 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ab8a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	69e1      	ldr	r1, [r4, #28]
 800ab90:	f7f7 ffd0 	bl	8002b34 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800ab94:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800ab96:	3e01      	subs	r6, #1
 800ab98:	d1d5      	bne.n	800ab46 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800ab9a:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800ab9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800ab9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800aba0:	06c9      	lsls	r1, r1, #27
 800aba2:	d501      	bpl.n	800aba8 <JPEG_DMA_PollResidualData+0x68>
 800aba4:	0492      	lsls	r2, r2, #18
 800aba6:	d420      	bmi.n	800abea <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	f022 0201 	bic.w	r2, r2, #1
 800abae:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800abb0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800abb2:	b133      	cbz	r3, 800abc2 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800abb4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800abb6:	4620      	mov	r0, r4
 800abb8:	69e1      	ldr	r1, [r4, #28]
 800abba:	f7f7 ffbb 	bl	8002b34 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800abc2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800abc4:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800abc6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800abc8:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800abcc:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800abd0:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800abd2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800abd4:	f04f 0200 	mov.w	r2, #0
 800abd8:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800abdc:	f04f 0201 	mov.w	r2, #1
 800abe0:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800abe4:	d102      	bne.n	800abec <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800abe6:	f7f7 fff7 	bl	8002bd8 <HAL_JPEG_DecodeCpltCallback>
}
 800abea:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800abec:	f7ff fdd6 	bl	800a79c <HAL_JPEG_EncodeCpltCallback>
}
 800abf0:	e7fb      	b.n	800abea <JPEG_DMA_PollResidualData+0xaa>

0800abf2 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800abf2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800abf4:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800abf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abfa:	4604      	mov	r4, r0
 800abfc:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800abfe:	d014      	beq.n	800ac2a <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ac00:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ac02:	f003 030c 	and.w	r3, r3, #12
 800ac06:	2b0c      	cmp	r3, #12
 800ac08:	d146      	bne.n	800ac98 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ac0a:	07cb      	lsls	r3, r1, #31
 800ac0c:	d520      	bpl.n	800ac50 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ac0e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ac10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac14:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ac16:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800ac18:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800ac1a:	b941      	cbnz	r1, 800ac2e <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ac1c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ac1e:	f043 0304 	orr.w	r3, r3, #4
 800ac22:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ac24:	2306      	movs	r3, #6
 800ac26:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800ac2a:	2001      	movs	r0, #1
 800ac2c:	e01d      	b.n	800ac6a <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800ac2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ac30:	fbb3 f2f1 	udiv	r2, r3, r1
 800ac34:	fb01 3212 	mls	r2, r1, r2, r3
 800ac38:	1a9b      	subs	r3, r3, r2
 800ac3a:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800ac3c:	b143      	cbz	r3, 800ac50 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ac3e:	6822      	ldr	r2, [r4, #0]
 800ac40:	2101      	movs	r1, #1
 800ac42:	3240      	adds	r2, #64	@ 0x40
 800ac44:	9100      	str	r1, [sp, #0]
 800ac46:	69a1      	ldr	r1, [r4, #24]
 800ac48:	f000 fba7 	bl	800b39a <HAL_MDMA_Start_IT>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d1e5      	bne.n	800ac1c <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ac50:	07a8      	lsls	r0, r5, #30
 800ac52:	d509      	bpl.n	800ac68 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ac54:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ac56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ac5a:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ac5c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ac5e:	0419      	lsls	r1, r3, #16
 800ac60:	d505      	bpl.n	800ac6e <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800ac62:	4620      	mov	r0, r4
 800ac64:	f7ff ff6c 	bl	800ab40 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 800ac68:	2000      	movs	r0, #0
}
 800ac6a:	b003      	add	sp, #12
 800ac6c:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800ac6e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ac70:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800ac72:	2900      	cmp	r1, #0
 800ac74:	d0d2      	beq.n	800ac1c <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800ac76:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac78:	fbb3 f2f1 	udiv	r2, r3, r1
 800ac7c:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ac80:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800ac82:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ac84:	2201      	movs	r2, #1
 800ac86:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800ac88:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ac8a:	9200      	str	r2, [sp, #0]
 800ac8c:	69e2      	ldr	r2, [r4, #28]
 800ac8e:	f000 fb84 	bl	800b39a <HAL_MDMA_Start_IT>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d0e8      	beq.n	800ac68 <HAL_JPEG_Resume+0x76>
 800ac96:	e7c1      	b.n	800ac1c <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ac98:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ac9a:	f003 030c 	and.w	r3, r3, #12
 800ac9e:	2b08      	cmp	r3, #8
 800aca0:	d1e2      	bne.n	800ac68 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800aca2:	f011 0301 	ands.w	r3, r1, #1
 800aca6:	d004      	beq.n	800acb2 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800aca8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800acaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acae:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800acb0:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800acb2:	07aa      	lsls	r2, r5, #30
 800acb4:	d505      	bpl.n	800acc2 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800acb6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800acb8:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800acbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800acc0:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800acc2:	6821      	ldr	r1, [r4, #0]
 800acc4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800acc6:	4313      	orrs	r3, r2
 800acc8:	630b      	str	r3, [r1, #48]	@ 0x30
 800acca:	e7cd      	b.n	800ac68 <HAL_JPEG_Resume+0x76>

0800accc <JPEG_DMA_EndProcess>:
{
 800accc:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800acce:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800acd0:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800acd2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800ace0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d105      	bne.n	800acf2 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ace6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800ace8:	69c1      	ldr	r1, [r0, #28]
 800acea:	f7f7 ff23 	bl	8002b34 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800acf6:	f015 0510 	ands.w	r5, r5, #16
 800acfa:	d124      	bne.n	800ad46 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800acfc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800acfe:	b12b      	cbz	r3, 800ad0c <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad00:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ad02:	4620      	mov	r0, r4
 800ad04:	69e1      	ldr	r1, [r4, #28]
 800ad06:	f7f7 ff15 	bl	8002b34 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ad0a:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ad0c:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ad0e:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ad10:	6813      	ldr	r3, [r2, #0]
 800ad12:	f023 0301 	bic.w	r3, r3, #1
 800ad16:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800ad18:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ad1a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ad1c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ad20:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ad24:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ad26:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800ad28:	f04f 0200 	mov.w	r2, #0
 800ad2c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ad30:	f04f 0201 	mov.w	r2, #1
 800ad34:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ad38:	d102      	bne.n	800ad40 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ad3a:	f7f7 ff4d 	bl	8002bd8 <HAL_JPEG_DecodeCpltCallback>
}
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ad40:	f7ff fd2c 	bl	800a79c <HAL_JPEG_EncodeCpltCallback>
 800ad44:	e7fb      	b.n	800ad3e <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ad46:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ad48:	049b      	lsls	r3, r3, #18
 800ad4a:	d4f8      	bmi.n	800ad3e <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 800ad4c:	4620      	mov	r0, r4
}
 800ad4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800ad52:	f7ff bef5 	b.w	800ab40 <JPEG_DMA_PollResidualData>

0800ad56 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800ad56:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ad58:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ad5a:	041b      	lsls	r3, r3, #16
 800ad5c:	d501      	bpl.n	800ad62 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800ad5e:	f7ff bfb5 	b.w	800accc <JPEG_DMA_EndProcess>
}
 800ad62:	4770      	bx	lr

0800ad64 <JPEG_MDMAOutCpltCallback>:
{
 800ad64:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800ad66:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad6c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ad70:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800ad72:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad74:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800ad78:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800ad7c:	0412      	lsls	r2, r2, #16
 800ad7e:	0c12      	lsrs	r2, r2, #16
 800ad80:	2a0c      	cmp	r2, #12
 800ad82:	d125      	bne.n	800add0 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800ad84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad86:	069a      	lsls	r2, r3, #26
 800ad88:	d424      	bmi.n	800add4 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800ad8a:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800ad90:	695a      	ldr	r2, [r3, #20]
 800ad92:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ad94:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800ad98:	1a9b      	subs	r3, r3, r2
 800ad9a:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad9c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ad9e:	f7f7 fec9 	bl	8002b34 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ada2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ada4:	049b      	lsls	r3, r3, #18
 800ada6:	d415      	bmi.n	800add4 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ada8:	6821      	ldr	r1, [r4, #0]
 800adaa:	2301      	movs	r3, #1
 800adac:	3144      	adds	r1, #68	@ 0x44
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800adb2:	69e2      	ldr	r2, [r4, #28]
 800adb4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800adb6:	f000 faf0 	bl	800b39a <HAL_MDMA_Start_IT>
 800adba:	b158      	cbz	r0, 800add4 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800adbc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800adbe:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800adc0:	f043 0304 	orr.w	r3, r3, #4
 800adc4:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800adc6:	2306      	movs	r3, #6
 800adc8:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800adcc:	f7f7 ff02 	bl	8002bd4 <HAL_JPEG_ErrorCallback>
}
 800add0:	b002      	add	sp, #8
 800add2:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800add4:	6822      	ldr	r2, [r4, #0]
 800add6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800add8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800addc:	6313      	str	r3, [r2, #48]	@ 0x30
 800adde:	e7f7      	b.n	800add0 <JPEG_MDMAOutCpltCallback+0x6c>

0800ade0 <HAL_JPEG_IRQHandler>:
{
 800ade0:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800ade2:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800ade6:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800ade8:	3b03      	subs	r3, #3
 800adea:	2b01      	cmp	r3, #1
 800adec:	d850      	bhi.n	800ae90 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800adee:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800adf0:	f003 030c 	and.w	r3, r3, #12
 800adf4:	2b08      	cmp	r3, #8
 800adf6:	d103      	bne.n	800ae00 <HAL_JPEG_IRQHandler+0x20>
}
 800adf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800adfc:	f7ff be29 	b.w	800aa52 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ae00:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ae02:	f003 030c 	and.w	r3, r3, #12
 800ae06:	2b0c      	cmp	r3, #12
 800ae08:	d142      	bne.n	800ae90 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ae0a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ae0c:	f003 0303 	and.w	r3, r3, #3
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d114      	bne.n	800ae3e <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800ae14:	6803      	ldr	r3, [r0, #0]
 800ae16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae18:	0659      	lsls	r1, r3, #25
 800ae1a:	d510      	bpl.n	800ae3e <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ae1c:	1d01      	adds	r1, r0, #4
 800ae1e:	f7ff fbdd 	bl	800a5dc <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800ae22:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ae24:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800ae26:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ae28:	f7f7 fe30 	bl	8002a8c <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ae34:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ae36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae3c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae42:	0692      	lsls	r2, r2, #26
 800ae44:	d524      	bpl.n	800ae90 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800ae46:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800ae48:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800ae4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae4e:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	f022 0201 	bic.w	r2, r2, #1
 800ae56:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ae58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae5a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ae5e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ae60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae62:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ae66:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800ae68:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d101      	bne.n	800ae74 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800ae70:	f000 fadc 	bl	800b42c <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800ae74:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ae76:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d103      	bne.n	800ae86 <HAL_JPEG_IRQHandler+0xa6>
}
 800ae7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800ae82:	f000 bad3 	b.w	800b42c <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800ae86:	4620      	mov	r0, r4
}
 800ae88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800ae8c:	f7ff bf1e 	b.w	800accc <JPEG_DMA_EndProcess>
}
 800ae90:	bd10      	pop	{r4, pc}

0800ae92 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae92:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ae94:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae96:	3284      	adds	r2, #132	@ 0x84
 800ae98:	1883      	adds	r3, r0, r2
{
 800ae9a:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ae9c:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae9e:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800aea0:	684c      	ldr	r4, [r1, #4]
 800aea2:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800aea6:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800aeaa:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800aeac:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800aeae:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800aeb0:	f106 0c01 	add.w	ip, r6, #1
 800aeb4:	68c5      	ldr	r5, [r0, #12]
 800aeb6:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800aeba:	4465      	add	r5, ip
 800aebc:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800aec0:	605d      	str	r5, [r3, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800aec2:	68c7      	ldr	r7, [r0, #12]
 800aec4:	68cd      	ldr	r5, [r1, #12]
 800aec6:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800aeca:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800aecc:	689d      	ldr	r5, [r3, #8]
 800aece:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800aed2:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800aed4:	688d      	ldr	r5, [r1, #8]
 800aed6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800aeda:	3501      	adds	r5, #1
 800aedc:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 800aee0:	4465      	add	r5, ip

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800aee2:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800aee6:	ea45 4507 	orr.w	r5, r5, r7, lsl #16

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800aeea:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800aeec:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800aeee:	691d      	ldr	r5, [r3, #16]
 800aef0:	f025 0507 	bic.w	r5, r5, #7
 800aef4:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800aef6:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800aefa:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800aefe:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800af02:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800af06:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800af0a:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800af0e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800af12:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800af14:	695d      	ldr	r5, [r3, #20]
 800af16:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800af1a:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800af1c:	694d      	ldr	r5, [r1, #20]
 800af1e:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800af20:	69dd      	ldr	r5, [r3, #28]
 800af22:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800af26:	f025 0507 	bic.w	r5, r5, #7
 800af2a:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800af2c:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800af30:	433d      	orrs	r5, r7
 800af32:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800af34:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800af36:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800af38:	f1bc 0f00 	cmp.w	ip, #0
 800af3c:	d024      	beq.n	800af88 <LTDC_SetConfig+0xf6>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800af3e:	f1bc 0f01 	cmp.w	ip, #1
 800af42:	d023      	beq.n	800af8c <LTDC_SetConfig+0xfa>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800af44:	f1ac 0502 	sub.w	r5, ip, #2
 800af48:	2d02      	cmp	r5, #2
 800af4a:	d921      	bls.n	800af90 <LTDC_SetConfig+0xfe>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800af4c:	f1bc 0f07 	cmp.w	ip, #7
 800af50:	bf14      	ite	ne
 800af52:	2501      	movne	r5, #1
 800af54:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800af56:	6adf      	ldr	r7, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800af58:	1ba4      	subs	r4, r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800af5a:	f007 27e0 	and.w	r7, r7, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800af5e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800af60:	62df      	str	r7, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800af62:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800af64:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800af66:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800af68:	436f      	muls	r7, r5
 800af6a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800af6e:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800af70:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800af72:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800af76:	f024 0407 	bic.w	r4, r4, #7
 800af7a:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800af7c:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800af7e:	5883      	ldr	r3, [r0, r2]
 800af80:	f043 0301 	orr.w	r3, r3, #1
 800af84:	5083      	str	r3, [r0, r2]
}
 800af86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 4U;
 800af88:	2504      	movs	r5, #4
 800af8a:	e7e4      	b.n	800af56 <LTDC_SetConfig+0xc4>
    tmp = 3U;
 800af8c:	2503      	movs	r5, #3
 800af8e:	e7e2      	b.n	800af56 <LTDC_SetConfig+0xc4>
    tmp = 2U;
 800af90:	2502      	movs	r5, #2
 800af92:	e7e0      	b.n	800af56 <LTDC_SetConfig+0xc4>

0800af94 <HAL_LTDC_Init>:
{
 800af94:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800af96:	4604      	mov	r4, r0
 800af98:	2800      	cmp	r0, #0
 800af9a:	d04e      	beq.n	800b03a <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800af9c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800afa0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800afa4:	b91b      	cbnz	r3, 800afae <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800afa6:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800afaa:	f7f6 fb55 	bl	8001658 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800afae:	2302      	movs	r3, #2
 800afb0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	699a      	ldr	r2, [r3, #24]
 800afb8:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800afbc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800afbe:	6999      	ldr	r1, [r3, #24]
 800afc0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800afc4:	4302      	orrs	r2, r0
 800afc6:	68e0      	ldr	r0, [r4, #12]
 800afc8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800afca:	6920      	ldr	r0, [r4, #16]
 800afcc:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800afce:	430a      	orrs	r2, r1
 800afd0:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800afd2:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800afd6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800afda:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800afdc:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 800afe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800afe4:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800afe6:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 800afea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800afee:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800aff0:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 800aff4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800aff8:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800affa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800affc:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b000:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b004:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b008:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b00a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800b00c:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800b010:	432a      	orrs	r2, r5
 800b012:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b016:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b018:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b01c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b01e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b020:	f042 0206 	orr.w	r2, r2, #6
 800b024:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800b026:	699a      	ldr	r2, [r3, #24]
 800b028:	f042 0201 	orr.w	r2, r2, #1
 800b02c:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800b02e:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b030:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800b034:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800b038:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b03a:	2001      	movs	r0, #1
 800b03c:	e7fc      	b.n	800b038 <HAL_LTDC_Init+0xa4>

0800b03e <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800b03e:	4770      	bx	lr

0800b040 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800b040:	4770      	bx	lr

0800b042 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800b042:	4770      	bx	lr

0800b044 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b044:	6803      	ldr	r3, [r0, #0]
{
 800b046:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b048:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800b04a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b04c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b04e:	0772      	lsls	r2, r6, #29
 800b050:	d514      	bpl.n	800b07c <HAL_LTDC_IRQHandler+0x38>
 800b052:	0769      	lsls	r1, r5, #29
 800b054:	d512      	bpl.n	800b07c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b058:	f022 0204 	bic.w	r2, r2, #4
 800b05c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b05e:	2204      	movs	r2, #4
 800b060:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b062:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800b066:	f043 0301 	orr.w	r3, r3, #1
 800b06a:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800b06e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b070:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b074:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b078:	f7ff ffe1 	bl	800b03e <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b07c:	07b2      	lsls	r2, r6, #30
 800b07e:	d516      	bpl.n	800b0ae <HAL_LTDC_IRQHandler+0x6a>
 800b080:	07ab      	lsls	r3, r5, #30
 800b082:	d514      	bpl.n	800b0ae <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b084:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800b086:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b08a:	f022 0202 	bic.w	r2, r2, #2
 800b08e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b090:	2202      	movs	r2, #2
 800b092:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b094:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800b098:	4313      	orrs	r3, r2
 800b09a:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b09e:	2304      	movs	r3, #4
 800b0a0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b0aa:	f7ff ffc8 	bl	800b03e <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b0ae:	07f0      	lsls	r0, r6, #31
 800b0b0:	d510      	bpl.n	800b0d4 <HAL_LTDC_IRQHandler+0x90>
 800b0b2:	07e9      	lsls	r1, r5, #31
 800b0b4:	d50e      	bpl.n	800b0d4 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b0b6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800b0b8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b0ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0bc:	f022 0201 	bic.w	r2, r2, #1
 800b0c0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800b0c6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800b0c8:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b0cc:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800b0d0:	f7ff ffb6 	bl	800b040 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b0d4:	0732      	lsls	r2, r6, #28
 800b0d6:	d511      	bpl.n	800b0fc <HAL_LTDC_IRQHandler+0xb8>
 800b0d8:	072b      	lsls	r3, r5, #28
 800b0da:	d50f      	bpl.n	800b0fc <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b0dc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b0de:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b0e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0e2:	f022 0208 	bic.w	r2, r2, #8
 800b0e6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b0e8:	2208      	movs	r2, #8
 800b0ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b0f8:	f7ff ffa3 	bl	800b042 <HAL_LTDC_ReloadEventCallback>
}
 800b0fc:	bd70      	pop	{r4, r5, r6, pc}

0800b0fe <HAL_LTDC_ConfigLayer>:
{
 800b0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800b102:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800b106:	4606      	mov	r6, r0
 800b108:	460f      	mov	r7, r1
 800b10a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	f04f 0002 	mov.w	r0, #2
 800b112:	d01f      	beq.n	800b154 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b114:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800b116:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b11a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b11c:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b120:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800b124:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b128:	3438      	adds	r4, #56	@ 0x38
 800b12a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b12c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b12e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b136:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b138:	4630      	mov	r0, r6
 800b13a:	4662      	mov	r2, ip
 800b13c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b13e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b140:	f7ff fea7 	bl	800ae92 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b144:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800b146:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b148:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b14c:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b150:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800b154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b158 <HAL_LTDC_SetPitch>:
{
 800b158:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800b15a:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800b15e:	2b01      	cmp	r3, #1
 800b160:	f04f 0302 	mov.w	r3, #2
 800b164:	d02c      	beq.n	800b1c0 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b166:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b168:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b16c:	fb04 0402 	mla	r4, r4, r2, r0
 800b170:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b172:	b33c      	cbz	r4, 800b1c4 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b174:	2c01      	cmp	r4, #1
 800b176:	d027      	beq.n	800b1c8 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b178:	1ea5      	subs	r5, r4, #2
 800b17a:	429d      	cmp	r5, r3
 800b17c:	d902      	bls.n	800b184 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800b17e:	2c07      	cmp	r4, #7
 800b180:	bf18      	it	ne
 800b182:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b184:	01d2      	lsls	r2, r2, #7
 800b186:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800b188:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b18a:	3284      	adds	r2, #132	@ 0x84
 800b18c:	4422      	add	r2, r4
 800b18e:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800b190:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800b194:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800b198:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b19a:	4c0c      	ldr	r4, [pc, #48]	@ (800b1cc <HAL_LTDC_SetPitch+0x74>)
 800b19c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b19e:	f045 0501 	orr.w	r5, r5, #1
 800b1a2:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800b1a4:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800b1a6:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800b1aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b1ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b1ae:	f043 0301 	orr.w	r3, r3, #1
 800b1b2:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800b1c4:	2304      	movs	r3, #4
 800b1c6:	e7dd      	b.n	800b184 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	e7db      	b.n	800b184 <HAL_LTDC_SetPitch+0x2c>
 800b1cc:	50001000 	.word	0x50001000

0800b1d0 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b1d0:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b1d2:	6804      	ldr	r4, [r0, #0]
 800b1d4:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b1d8:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b1dc:	6965      	ldr	r5, [r4, #20]
 800b1de:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800b1e2:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800b1e6:	ea45 0503 	orr.w	r5, r5, r3
 800b1ea:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800b1ec:	9d03      	ldr	r5, [sp, #12]
 800b1ee:	6963      	ldr	r3, [r4, #20]
 800b1f0:	f105 35ff 	add.w	r5, r5, #4294967295
 800b1f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1f8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800b1fc:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800b1fe:	f04f 031f 	mov.w	r3, #31
 800b202:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800b204:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800b206:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800b208:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b20a:	bf0c      	ite	eq
 800b20c:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800b210:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b214:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800b218:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800b21a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b21c:	bf0c      	ite	eq
 800b21e:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800b222:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800b226:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800b228:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800b22a:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800b22c:	bd30      	pop	{r4, r5, pc}

0800b22e <HAL_MDMA_Init>:
{
 800b22e:	b538      	push	{r3, r4, r5, lr}
 800b230:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b232:	f7fc fba7 	bl	8007984 <HAL_GetTick>
 800b236:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800b238:	2c00      	cmp	r4, #0
 800b23a:	d061      	beq.n	800b300 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800b23c:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800b23e:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800b240:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800b244:	2302      	movs	r3, #2
 800b246:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800b24a:	68d3      	ldr	r3, [r2, #12]
 800b24c:	f023 0301 	bic.w	r3, r3, #1
 800b250:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	68da      	ldr	r2, [r3, #12]
 800b256:	07d2      	lsls	r2, r2, #31
 800b258:	d448      	bmi.n	800b2ec <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800b25a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800b25e:	430a      	orrs	r2, r1
 800b260:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b262:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800b266:	430a      	orrs	r2, r1
 800b268:	69e1      	ldr	r1, [r4, #28]
 800b26a:	430a      	orrs	r2, r1
 800b26c:	6a21      	ldr	r1, [r4, #32]
 800b26e:	430a      	orrs	r2, r1
 800b270:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b272:	430a      	orrs	r2, r1
 800b274:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b276:	430a      	orrs	r2, r1
 800b278:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b27a:	430a      	orrs	r2, r1
 800b27c:	68a1      	ldr	r1, [r4, #8]
 800b27e:	430a      	orrs	r2, r1
 800b280:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800b282:	3901      	subs	r1, #1
 800b284:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b288:	6861      	ldr	r1, [r4, #4]
 800b28a:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b28e:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b290:	d103      	bne.n	800b29a <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800b292:	691a      	ldr	r2, [r3, #16]
 800b294:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800b298:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800b29a:	2200      	movs	r2, #0
 800b29c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800b29e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	da04      	bge.n	800b2ae <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b2a4:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800b2a6:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b2a8:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800b2ac:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800b2ae:	b292      	uxth	r2, r2
 800b2b0:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800b2b2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b2b4:	2a00      	cmp	r2, #0
 800b2b6:	da25      	bge.n	800b304 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800b2b8:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800b2ba:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800b2bc:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800b2c0:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b2c2:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b2c4:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800b2c8:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b2cc:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800b2ce:	f04f 0200 	mov.w	r2, #0
 800b2d2:	d019      	beq.n	800b308 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800b2d4:	b2c9      	uxtb	r1, r1
 800b2d6:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800b2d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800b2da:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b2dc:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800b2de:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800b2e0:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800b2e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800b2e6:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800b2ea:	e00a      	b.n	800b302 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b2ec:	f7fc fb4a 	bl	8007984 <HAL_GetTick>
 800b2f0:	1b40      	subs	r0, r0, r5
 800b2f2:	2805      	cmp	r0, #5
 800b2f4:	d9ad      	bls.n	800b252 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800b2f6:	2340      	movs	r3, #64	@ 0x40
 800b2f8:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800b300:	2001      	movs	r0, #1
}
 800b302:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b304:	6a18      	ldr	r0, [r3, #32]
 800b306:	e7dd      	b.n	800b2c4 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800b308:	629a      	str	r2, [r3, #40]	@ 0x28
 800b30a:	e7e5      	b.n	800b2d8 <HAL_MDMA_Init+0xaa>

0800b30c <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800b30c:	b1d8      	cbz	r0, 800b346 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800b30e:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800b310:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800b312:	68d3      	ldr	r3, [r2, #12]
 800b314:	f023 0301 	bic.w	r3, r3, #1
 800b318:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800b31e:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800b320:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800b322:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800b324:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800b326:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800b328:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800b32a:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800b32c:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800b32e:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800b330:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b332:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800b334:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800b336:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800b33a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800b33e:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800b342:	4618      	mov	r0, r3
 800b344:	4770      	bx	lr
    return HAL_ERROR;
 800b346:	2001      	movs	r0, #1
}
 800b348:	4770      	bx	lr

0800b34a <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800b34a:	4603      	mov	r3, r0
{
 800b34c:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800b34e:	b300      	cbz	r0, 800b392 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800b350:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800b354:	2801      	cmp	r0, #1
 800b356:	d01e      	beq.n	800b396 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800b358:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b35a:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800b35e:	42a5      	cmp	r5, r4
 800b360:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800b362:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b366:	d112      	bne.n	800b38e <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800b368:	681c      	ldr	r4, [r3, #0]
 800b36a:	6925      	ldr	r5, [r4, #16]
 800b36c:	006d      	lsls	r5, r5, #1
 800b36e:	d407      	bmi.n	800b380 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800b370:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800b372:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b374:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800b376:	b939      	cbnz	r1, 800b388 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b378:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800b37c:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b37e:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800b380:	2200      	movs	r2, #0
 800b382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b386:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800b388:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b38c:	e7f6      	b.n	800b37c <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800b38e:	4620      	mov	r0, r4
 800b390:	e7f6      	b.n	800b380 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800b392:	2001      	movs	r0, #1
 800b394:	e7f7      	b.n	800b386 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800b396:	2002      	movs	r0, #2
 800b398:	e7f5      	b.n	800b386 <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800b39a <HAL_MDMA_Start_IT>:
{
 800b39a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800b39c:	4604      	mov	r4, r0
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d042      	beq.n	800b428 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800b3a2:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800b3a6:	2d01      	cmp	r5, #1
 800b3a8:	d03c      	beq.n	800b424 <HAL_MDMA_Start_IT+0x8a>
 800b3aa:	2501      	movs	r5, #1
 800b3ac:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b3b0:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800b3b4:	2d01      	cmp	r5, #1
 800b3b6:	f04f 0500 	mov.w	r5, #0
 800b3ba:	d131      	bne.n	800b420 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800b3bc:	2602      	movs	r6, #2
 800b3be:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b3c2:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800b3c4:	6805      	ldr	r5, [r0, #0]
 800b3c6:	68ee      	ldr	r6, [r5, #12]
 800b3c8:	f026 0601 	bic.w	r6, r6, #1
 800b3cc:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800b3ce:	9e06      	ldr	r6, [sp, #24]
 800b3d0:	9600      	str	r6, [sp, #0]
 800b3d2:	f7ff fefd 	bl	800b1d0 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800b3d6:	68eb      	ldr	r3, [r5, #12]
 800b3d8:	f043 0306 	orr.w	r3, r3, #6
 800b3dc:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800b3de:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800b3e0:	b11b      	cbz	r3, 800b3ea <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800b3e2:	68eb      	ldr	r3, [r5, #12]
 800b3e4:	f043 0310 	orr.w	r3, r3, #16
 800b3e8:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b3ea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b3ec:	b11b      	cbz	r3, 800b3f6 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800b3ee:	68eb      	ldr	r3, [r5, #12]
 800b3f0:	f043 0308 	orr.w	r3, r3, #8
 800b3f4:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800b3f6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b3f8:	b11b      	cbz	r3, 800b402 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800b3fa:	68eb      	ldr	r3, [r5, #12]
 800b3fc:	f043 0320 	orr.w	r3, r3, #32
 800b400:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800b402:	68eb      	ldr	r3, [r5, #12]
 800b404:	f043 0301 	orr.w	r3, r3, #1
 800b408:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b40a:	6863      	ldr	r3, [r4, #4]
 800b40c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b410:	d103      	bne.n	800b41a <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800b412:	68eb      	ldr	r3, [r5, #12]
 800b414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b418:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800b41a:	2000      	movs	r0, #0
}
 800b41c:	b002      	add	sp, #8
 800b41e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800b420:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800b424:	2002      	movs	r0, #2
 800b426:	e7f9      	b.n	800b41c <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800b428:	2001      	movs	r0, #1
 800b42a:	e7f7      	b.n	800b41c <HAL_MDMA_Start_IT+0x82>

0800b42c <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800b42c:	b128      	cbz	r0, 800b43a <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b42e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b432:	2b02      	cmp	r3, #2
 800b434:	d003      	beq.n	800b43e <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b436:	2380      	movs	r3, #128	@ 0x80
 800b438:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800b43a:	2001      	movs	r0, #1
 800b43c:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800b43e:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b440:	2304      	movs	r3, #4
 800b442:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800b446:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800b448:	68d3      	ldr	r3, [r2, #12]
 800b44a:	f023 0301 	bic.w	r3, r3, #1
 800b44e:	60d3      	str	r3, [r2, #12]
}
 800b450:	4770      	bx	lr
	...

0800b454 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800b454:	2300      	movs	r3, #0
{
 800b456:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800b458:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b45a:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800b45e:	4b58      	ldr	r3, [pc, #352]	@ (800b5c0 <HAL_MDMA_IRQHandler+0x16c>)
{
 800b460:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b462:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800b464:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b466:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b468:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b46a:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800b46e:	3a40      	subs	r2, #64	@ 0x40
 800b470:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800b474:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b478:	4202      	tst	r2, r0
 800b47a:	f000 809e 	beq.w	800b5ba <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	07d1      	lsls	r1, r2, #31
 800b482:	d529      	bpl.n	800b4d8 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800b484:	68da      	ldr	r2, [r3, #12]
 800b486:	0792      	lsls	r2, r2, #30
 800b488:	d526      	bpl.n	800b4d8 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800b48a:	68da      	ldr	r2, [r3, #12]
 800b48c:	f022 0202 	bic.w	r2, r2, #2
 800b490:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800b492:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800b494:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800b496:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800b498:	bf54      	ite	pl
 800b49a:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800b49e:	f041 0102 	orrmi.w	r1, r1, #2
 800b4a2:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800b4a4:	0591      	lsls	r1, r2, #22
 800b4a6:	d503      	bpl.n	800b4b0 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800b4a8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800b4aa:	f041 0104 	orr.w	r1, r1, #4
 800b4ae:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800b4b0:	05d0      	lsls	r0, r2, #23
 800b4b2:	d503      	bpl.n	800b4bc <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800b4b4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800b4b6:	f041 0108 	orr.w	r1, r1, #8
 800b4ba:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800b4bc:	0551      	lsls	r1, r2, #21
 800b4be:	d503      	bpl.n	800b4c8 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800b4c0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800b4c2:	f041 0110 	orr.w	r1, r1, #16
 800b4c6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800b4c8:	0512      	lsls	r2, r2, #20
 800b4ca:	d503      	bpl.n	800b4d4 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800b4cc:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800b4ce:	f042 0220 	orr.w	r2, r2, #32
 800b4d2:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	06d0      	lsls	r0, r2, #27
 800b4dc:	d508      	bpl.n	800b4f0 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800b4de:	68da      	ldr	r2, [r3, #12]
 800b4e0:	0691      	lsls	r1, r2, #26
 800b4e2:	d505      	bpl.n	800b4f0 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800b4e4:	2210      	movs	r2, #16
 800b4e6:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800b4e8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b4ea:	b10b      	cbz	r3, 800b4f0 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	0712      	lsls	r2, r2, #28
 800b4f6:	d508      	bpl.n	800b50a <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800b4f8:	68da      	ldr	r2, [r3, #12]
 800b4fa:	06d0      	lsls	r0, r2, #27
 800b4fc:	d505      	bpl.n	800b50a <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800b4fe:	2208      	movs	r2, #8
 800b500:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800b502:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800b504:	b10b      	cbz	r3, 800b50a <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800b506:	4620      	mov	r0, r4
 800b508:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	0751      	lsls	r1, r2, #29
 800b510:	d508      	bpl.n	800b524 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800b512:	68da      	ldr	r2, [r3, #12]
 800b514:	0712      	lsls	r2, r2, #28
 800b516:	d505      	bpl.n	800b524 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800b518:	2204      	movs	r2, #4
 800b51a:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b51c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b51e:	b10b      	cbz	r3, 800b524 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800b520:	4620      	mov	r0, r4
 800b522:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	0790      	lsls	r0, r2, #30
 800b52a:	d524      	bpl.n	800b576 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800b52c:	68da      	ldr	r2, [r3, #12]
 800b52e:	0751      	lsls	r1, r2, #29
 800b530:	d521      	bpl.n	800b576 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b532:	68da      	ldr	r2, [r3, #12]
 800b534:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800b538:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800b53a:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800b53e:	2a04      	cmp	r2, #4
 800b540:	f04f 0200 	mov.w	r2, #0
 800b544:	d10c      	bne.n	800b560 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800b546:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800b548:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800b54c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800b550:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800b552:	2b00      	cmp	r3, #0
 800b554:	d031      	beq.n	800b5ba <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800b556:	4620      	mov	r0, r4
}
 800b558:	b003      	add	sp, #12
 800b55a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800b55e:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800b560:	2102      	movs	r1, #2
 800b562:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800b564:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800b566:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800b56a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800b56e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b570:	b10b      	cbz	r3, 800b576 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800b572:	4620      	mov	r0, r4
 800b574:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800b576:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800b578:	b1fb      	cbz	r3, 800b5ba <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800b57a:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800b57e:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b582:	2304      	movs	r3, #4
 800b584:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	68da      	ldr	r2, [r3, #12]
 800b58c:	f022 0201 	bic.w	r2, r2, #1
 800b590:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800b592:	9a01      	ldr	r2, [sp, #4]
 800b594:	3201      	adds	r2, #1
 800b596:	42aa      	cmp	r2, r5
 800b598:	9201      	str	r2, [sp, #4]
 800b59a:	d802      	bhi.n	800b5a2 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800b59c:	68da      	ldr	r2, [r3, #12]
 800b59e:	07d2      	lsls	r2, r2, #31
 800b5a0:	d4f7      	bmi.n	800b592 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b5ac:	bf4c      	ite	mi
 800b5ae:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800b5b0:	2301      	movpl	r3, #1
 800b5b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800b5b6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b5b8:	e7cb      	b.n	800b552 <HAL_MDMA_IRQHandler+0xfe>
}
 800b5ba:	b003      	add	sp, #12
 800b5bc:	bd30      	pop	{r4, r5, pc}
 800b5be:	bf00      	nop
 800b5c0:	2400006c 	.word	0x2400006c

0800b5c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b5c4:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b5c6:	4d1c      	ldr	r5, [pc, #112]	@ (800b638 <HAL_PWREx_ConfigSupply+0x74>)
{
 800b5c8:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b5ca:	68eb      	ldr	r3, [r5, #12]
 800b5cc:	f003 0307 	and.w	r3, r3, #7
 800b5d0:	2b06      	cmp	r3, #6
 800b5d2:	d006      	beq.n	800b5e2 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b5d4:	68e8      	ldr	r0, [r5, #12]
 800b5d6:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800b5da:	1b00      	subs	r0, r0, r4
 800b5dc:	bf18      	it	ne
 800b5de:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800b5e0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b5e2:	68eb      	ldr	r3, [r5, #12]
 800b5e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b5e8:	4303      	orrs	r3, r0
 800b5ea:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800b5ec:	f7fc f9ca 	bl	8007984 <HAL_GetTick>
 800b5f0:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b5f2:	686b      	ldr	r3, [r5, #4]
 800b5f4:	049a      	lsls	r2, r3, #18
 800b5f6:	d508      	bpl.n	800b60a <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b5f8:	f1a4 031d 	sub.w	r3, r4, #29
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d90c      	bls.n	800b61a <HAL_PWREx_ConfigSupply+0x56>
 800b600:	3c2d      	subs	r4, #45	@ 0x2d
 800b602:	2c01      	cmp	r4, #1
 800b604:	d909      	bls.n	800b61a <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800b606:	2000      	movs	r0, #0
 800b608:	e7ea      	b.n	800b5e0 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b60a:	f7fc f9bb 	bl	8007984 <HAL_GetTick>
 800b60e:	1b80      	subs	r0, r0, r6
 800b610:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b614:	d9ed      	bls.n	800b5f2 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800b616:	2001      	movs	r0, #1
 800b618:	e7e2      	b.n	800b5e0 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800b61a:	f7fc f9b3 	bl	8007984 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b61e:	4d06      	ldr	r5, [pc, #24]	@ (800b638 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800b620:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b622:	68eb      	ldr	r3, [r5, #12]
 800b624:	03db      	lsls	r3, r3, #15
 800b626:	d4ee      	bmi.n	800b606 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b628:	f7fc f9ac 	bl	8007984 <HAL_GetTick>
 800b62c:	1b00      	subs	r0, r0, r4
 800b62e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b632:	d9f6      	bls.n	800b622 <HAL_PWREx_ConfigSupply+0x5e>
 800b634:	e7ef      	b.n	800b616 <HAL_PWREx_ConfigSupply+0x52>
 800b636:	bf00      	nop
 800b638:	58024800 	.word	0x58024800

0800b63c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b640:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b642:	b135      	cbz	r5, 800b652 <QSPI_Config+0x16>
 800b644:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800b648:	d003      	beq.n	800b652 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b64a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800b64c:	6804      	ldr	r4, [r0, #0]
 800b64e:	3b01      	subs	r3, #1
 800b650:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b652:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b656:	e9d1 7807 	ldrd	r7, r8, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b65a:	f1ba 0f00 	cmp.w	sl, #0
 800b65e:	d04c      	beq.n	800b6fa <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b660:	694c      	ldr	r4, [r1, #20]
 800b662:	ea45 0a0a 	orr.w	sl, r5, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b666:	6806      	ldr	r6, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b668:	680b      	ldr	r3, [r1, #0]
 800b66a:	04a4      	lsls	r4, r4, #18
 800b66c:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
 800b670:	ea4a 0a02 	orr.w	sl, sl, r2
 800b674:	e9d1 0e0b 	ldrd	r0, lr, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b678:	f1b8 0f00 	cmp.w	r8, #0
 800b67c:	d026      	beq.n	800b6cc <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b67e:	688d      	ldr	r5, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b680:	f8d1 9010 	ldr.w	r9, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b684:	61f5      	str	r5, [r6, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b686:	ea4a 0508 	orr.w	r5, sl, r8
 800b68a:	b19f      	cbz	r7, 800b6b4 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b68c:	433b      	orrs	r3, r7
 800b68e:	4303      	orrs	r3, r0
 800b690:	68c8      	ldr	r0, [r1, #12]
 800b692:	ea43 030e 	orr.w	r3, r3, lr
 800b696:	ea43 030c 	orr.w	r3, r3, ip
 800b69a:	ea43 0309 	orr.w	r3, r3, r9
 800b69e:	4303      	orrs	r3, r0
 800b6a0:	4323      	orrs	r3, r4
 800b6a2:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b6a4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b6a8:	6173      	str	r3, [r6, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b6aa:	d001      	beq.n	800b6b0 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b6ac:	684b      	ldr	r3, [r1, #4]
 800b6ae:	61b3      	str	r3, [r6, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800b6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b6b4:	4303      	orrs	r3, r0
 800b6b6:	ea43 030e 	orr.w	r3, r3, lr
 800b6ba:	ea43 030c 	orr.w	r3, r3, ip
 800b6be:	ea43 0309 	orr.w	r3, r3, r9
 800b6c2:	4323      	orrs	r3, r4
 800b6c4:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b6c6:	6173      	str	r3, [r6, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800b6c8:	61b7      	str	r7, [r6, #24]
 800b6ca:	e7f1      	b.n	800b6b0 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b6cc:	b15f      	cbz	r7, 800b6e6 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b6ce:	433b      	orrs	r3, r7
 800b6d0:	4303      	orrs	r3, r0
 800b6d2:	68c8      	ldr	r0, [r1, #12]
 800b6d4:	ea43 030e 	orr.w	r3, r3, lr
 800b6d8:	ea43 030c 	orr.w	r3, r3, ip
 800b6dc:	4303      	orrs	r3, r0
 800b6de:	4323      	orrs	r3, r4
 800b6e0:	ea43 030a 	orr.w	r3, r3, sl
 800b6e4:	e7de      	b.n	800b6a4 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b6e6:	4303      	orrs	r3, r0
 800b6e8:	ea43 030e 	orr.w	r3, r3, lr
 800b6ec:	ea43 050c 	orr.w	r5, r3, ip
 800b6f0:	ea45 0304 	orr.w	r3, r5, r4
 800b6f4:	ea43 030a 	orr.w	r3, r3, sl
 800b6f8:	e7e5      	b.n	800b6c6 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b6fa:	f1b8 0f00 	cmp.w	r8, #0
 800b6fe:	d02d      	beq.n	800b75c <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b700:	688b      	ldr	r3, [r1, #8]
 800b702:	ea45 0508 	orr.w	r5, r5, r8
 800b706:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b708:	694e      	ldr	r6, [r1, #20]
 800b70a:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b70c:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b70e:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b712:	04b6      	lsls	r6, r6, #18
 800b714:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b716:	e9d1 9e0b 	ldrd	r9, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b71a:	b1a7      	cbz	r7, 800b746 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b71c:	433b      	orrs	r3, r7
 800b71e:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b720:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b724:	ea43 0309 	orr.w	r3, r3, r9
 800b728:	ea43 030e 	orr.w	r3, r3, lr
 800b72c:	ea43 030c 	orr.w	r3, r3, ip
 800b730:	ea43 0300 	orr.w	r3, r3, r0
 800b734:	ea43 0306 	orr.w	r3, r3, r6
 800b738:	ea43 0305 	orr.w	r3, r3, r5
 800b73c:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b73e:	d0b7      	beq.n	800b6b0 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b740:	684b      	ldr	r3, [r1, #4]
 800b742:	61a3      	str	r3, [r4, #24]
 800b744:	e7b4      	b.n	800b6b0 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b746:	ea43 0209 	orr.w	r2, r3, r9
 800b74a:	ea42 020e 	orr.w	r2, r2, lr
 800b74e:	ea42 020c 	orr.w	r2, r2, ip
 800b752:	4332      	orrs	r2, r6
 800b754:	432a      	orrs	r2, r5
 800b756:	6162      	str	r2, [r4, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800b758:	61a7      	str	r7, [r4, #24]
 800b75a:	e7a9      	b.n	800b6b0 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b75c:	b1d7      	cbz	r7, 800b794 <QSPI_Config+0x158>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b75e:	ea45 0307 	orr.w	r3, r5, r7
 800b762:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800b764:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b766:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b76a:	ea43 0302 	orr.w	r3, r3, r2
 800b76e:	ea43 0304 	orr.w	r3, r3, r4
 800b772:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800b774:	ea43 0304 	orr.w	r3, r3, r4
 800b778:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800b77a:	ea43 0304 	orr.w	r3, r3, r4
 800b77e:	68cc      	ldr	r4, [r1, #12]
 800b780:	ea43 0304 	orr.w	r3, r3, r4
 800b784:	694c      	ldr	r4, [r1, #20]
 800b786:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800b78a:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b78c:	d090      	beq.n	800b6b0 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b78e:	684b      	ldr	r3, [r1, #4]
 800b790:	6183      	str	r3, [r0, #24]
 800b792:	e78d      	b.n	800b6b0 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b794:	2d00      	cmp	r5, #0
 800b796:	d08b      	beq.n	800b6b0 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b798:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800b79a:	6800      	ldr	r0, [r0, #0]
 800b79c:	432b      	orrs	r3, r5
 800b79e:	431a      	orrs	r2, r3
 800b7a0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800b7a2:	431a      	orrs	r2, r3
 800b7a4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	694b      	ldr	r3, [r1, #20]
 800b7aa:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800b7ae:	6142      	str	r2, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800b7b0:	6187      	str	r7, [r0, #24]
}
 800b7b2:	e77d      	b.n	800b6b0 <QSPI_Config+0x74>

0800b7b4 <QSPI_WaitFlagStateUntilTimeout>:
{
 800b7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b7bc:	4604      	mov	r4, r0
 800b7be:	460e      	mov	r6, r1
 800b7c0:	4615      	mov	r5, r2
 800b7c2:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b7c4:	6822      	ldr	r2, [r4, #0]
 800b7c6:	6893      	ldr	r3, [r2, #8]
 800b7c8:	4233      	tst	r3, r6
 800b7ca:	bf14      	ite	ne
 800b7cc:	2301      	movne	r3, #1
 800b7ce:	2300      	moveq	r3, #0
 800b7d0:	42ab      	cmp	r3, r5
 800b7d2:	d101      	bne.n	800b7d8 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	e012      	b.n	800b7fe <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800b7d8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b7dc:	d0f3      	beq.n	800b7c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7de:	f7fc f8d1 	bl	8007984 <HAL_GetTick>
 800b7e2:	1bc0      	subs	r0, r0, r7
 800b7e4:	4540      	cmp	r0, r8
 800b7e6:	d802      	bhi.n	800b7ee <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800b7e8:	f1b8 0f00 	cmp.w	r8, #0
 800b7ec:	d1ea      	bne.n	800b7c4 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b7ee:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b7f0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b7f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b7f6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b7f8:	f043 0301 	orr.w	r3, r3, #1
 800b7fc:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800b7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b804 <HAL_QSPI_Init>:
{
 800b804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b806:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b808:	f7fc f8bc 	bl	8007984 <HAL_GetTick>
 800b80c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800b80e:	2c00      	cmp	r4, #0
 800b810:	d03f      	beq.n	800b892 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b812:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b816:	b92b      	cbnz	r3, 800b824 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800b818:	4620      	mov	r0, r4
 800b81a:	f7f5 ff5b 	bl	80016d4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800b81e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b822:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b824:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b826:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b828:	68a3      	ldr	r3, [r4, #8]
 800b82a:	680a      	ldr	r2, [r1, #0]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800b832:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b836:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b838:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b83a:	2200      	movs	r2, #0
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	2120      	movs	r1, #32
 800b840:	462b      	mov	r3, r5
 800b842:	f7ff ffb7 	bl	800b7b4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800b846:	bb10      	cbnz	r0, 800b88e <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b848:	6822      	ldr	r2, [r4, #0]
 800b84a:	69e5      	ldr	r5, [r4, #28]
 800b84c:	68e3      	ldr	r3, [r4, #12]
 800b84e:	6811      	ldr	r1, [r2, #0]
 800b850:	432b      	orrs	r3, r5
 800b852:	6a25      	ldr	r5, [r4, #32]
 800b854:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800b858:	432b      	orrs	r3, r5
 800b85a:	6865      	ldr	r5, [r4, #4]
 800b85c:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800b860:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800b864:	430b      	orrs	r3, r1
 800b866:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b868:	6855      	ldr	r5, [r2, #4]
 800b86a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800b86e:	430b      	orrs	r3, r1
 800b870:	6921      	ldr	r1, [r4, #16]
 800b872:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b876:	4908      	ldr	r1, [pc, #32]	@ (800b898 <HAL_QSPI_Init+0x94>)
 800b878:	4029      	ands	r1, r5
 800b87a:	430b      	orrs	r3, r1
 800b87c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800b87e:	6813      	ldr	r3, [r2, #0]
 800b880:	f043 0301 	orr.w	r3, r3, #1
 800b884:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800b886:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b888:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800b88a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800b88e:	b003      	add	sp, #12
 800b890:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800b892:	2001      	movs	r0, #1
 800b894:	e7fb      	b.n	800b88e <HAL_QSPI_Init+0x8a>
 800b896:	bf00      	nop
 800b898:	ffe0f8fe 	.word	0xffe0f8fe

0800b89c <HAL_QSPI_Command>:
{
 800b89c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	468a      	mov	sl, r1
 800b8a4:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800b8a6:	f7fc f86d 	bl	8007984 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b8aa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b8ae:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d036      	beq.n	800b922 <HAL_QSPI_Command+0x86>
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	2602      	movs	r6, #2
 800b8b8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b8bc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	fa5f f983 	uxtb.w	r9, r3
 800b8c6:	d128      	bne.n	800b91a <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b8c8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2120      	movs	r1, #32
 800b8ce:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b8d0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b8d2:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b8d6:	f8cd 8000 	str.w	r8, [sp]
 800b8da:	f7ff ff6b 	bl	800b7b4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b8de:	4605      	mov	r5, r0
 800b8e0:	b9a0      	cbnz	r0, 800b90c <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	4651      	mov	r1, sl
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f7ff fea8 	bl	800b63c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800b8ec:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800b8f0:	b953      	cbnz	r3, 800b908 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b8f2:	463b      	mov	r3, r7
 800b8f4:	464a      	mov	r2, r9
 800b8f6:	4631      	mov	r1, r6
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f8cd 8000 	str.w	r8, [sp]
 800b8fe:	f7ff ff59 	bl	800b7b4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b902:	b960      	cbnz	r0, 800b91e <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b904:	6823      	ldr	r3, [r4, #0]
 800b906:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800b908:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b90c:	2300      	movs	r3, #0
 800b90e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b912:	4628      	mov	r0, r5
 800b914:	b002      	add	sp, #8
 800b916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800b91a:	4635      	mov	r5, r6
 800b91c:	e7f6      	b.n	800b90c <HAL_QSPI_Command+0x70>
 800b91e:	4605      	mov	r5, r0
 800b920:	e7f4      	b.n	800b90c <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800b922:	2502      	movs	r5, #2
 800b924:	e7f5      	b.n	800b912 <HAL_QSPI_Command+0x76>

0800b926 <HAL_QSPI_Transmit>:
{
 800b926:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b92a:	4604      	mov	r4, r0
 800b92c:	4688      	mov	r8, r1
 800b92e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800b930:	f7fc f828 	bl	8007984 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b934:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b938:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b93a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d04c      	beq.n	800b9da <HAL_QSPI_Transmit+0xb4>
 800b940:	2301      	movs	r3, #1
 800b942:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b946:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	b2d8      	uxtb	r0, r3
 800b94e:	d142      	bne.n	800b9d6 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b950:	2300      	movs	r3, #0
 800b952:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800b954:	f1b8 0f00 	cmp.w	r8, #0
 800b958:	d038      	beq.n	800b9cc <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b95a:	2312      	movs	r3, #18
 800b95c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b960:	692b      	ldr	r3, [r5, #16]
 800b962:	3301      	adds	r3, #1
 800b964:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b966:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800b968:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b96c:	3301      	adds	r3, #1
 800b96e:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b970:	696b      	ldr	r3, [r5, #20]
 800b972:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800b976:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800b978:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b97a:	b99b      	cbnz	r3, 800b9a4 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b97c:	4633      	mov	r3, r6
 800b97e:	2201      	movs	r2, #1
 800b980:	2102      	movs	r1, #2
 800b982:	4620      	mov	r0, r4
 800b984:	9700      	str	r7, [sp, #0]
 800b986:	f7ff ff15 	bl	800b7b4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b98a:	b910      	cbnz	r0, 800b992 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	2202      	movs	r2, #2
 800b990:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800b992:	2301      	movs	r3, #1
 800b994:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b998:	2300      	movs	r3, #0
 800b99a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b99e:	b002      	add	sp, #8
 800b9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b9a4:	4633      	mov	r3, r6
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	2104      	movs	r1, #4
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	9700      	str	r7, [sp, #0]
 800b9ae:	f7ff ff01 	bl	800b7b4 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	d1ed      	bne.n	800b992 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b9b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800b9be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800b9c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b9ca:	e7d5      	b.n	800b978 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b9cc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b9ce:	f043 0308 	orr.w	r3, r3, #8
 800b9d2:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800b9d4:	e7e0      	b.n	800b998 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800b9d6:	2002      	movs	r0, #2
 800b9d8:	e7de      	b.n	800b998 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800b9da:	2002      	movs	r0, #2
 800b9dc:	e7df      	b.n	800b99e <HAL_QSPI_Transmit+0x78>

0800b9de <HAL_QSPI_Receive>:
{
 800b9de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	4617      	mov	r7, r2
 800b9e6:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800b9e8:	f7fb ffcc 	bl	8007984 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b9ec:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800b9ee:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b9f0:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800b9f2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d04f      	beq.n	800ba9a <HAL_QSPI_Receive+0xbc>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ba00:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	b2d8      	uxtb	r0, r3
 800ba08:	d145      	bne.n	800ba96 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800ba0e:	f1b8 0f00 	cmp.w	r8, #0
 800ba12:	d03b      	beq.n	800ba8c <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800ba14:	2322      	movs	r3, #34	@ 0x22
 800ba16:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ba1a:	692b      	ldr	r3, [r5, #16]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ba20:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800ba22:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ba26:	3301      	adds	r3, #1
 800ba28:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800ba2a:	6969      	ldr	r1, [r5, #20]
 800ba2c:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800ba30:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800ba34:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800ba36:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800ba38:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ba3a:	b99b      	cbnz	r3, 800ba64 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ba3c:	4633      	mov	r3, r6
 800ba3e:	2201      	movs	r2, #1
 800ba40:	2102      	movs	r1, #2
 800ba42:	4620      	mov	r0, r4
 800ba44:	9700      	str	r7, [sp, #0]
 800ba46:	f7ff feb5 	bl	800b7b4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800ba4a:	b910      	cbnz	r0, 800ba52 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ba4c:	6823      	ldr	r3, [r4, #0]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800ba52:	2301      	movs	r3, #1
 800ba54:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ba5e:	b002      	add	sp, #8
 800ba60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800ba64:	4633      	mov	r3, r6
 800ba66:	2201      	movs	r2, #1
 800ba68:	2106      	movs	r1, #6
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	9700      	str	r7, [sp, #0]
 800ba6e:	f7ff fea1 	bl	800b7b4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d1ed      	bne.n	800ba52 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ba76:	f895 2020 	ldrb.w	r2, [r5, #32]
 800ba7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ba7c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800ba7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ba80:	3301      	adds	r3, #1
 800ba82:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800ba84:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ba86:	3b01      	subs	r3, #1
 800ba88:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ba8a:	e7d5      	b.n	800ba38 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ba8c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ba8e:	f043 0308 	orr.w	r3, r3, #8
 800ba92:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800ba94:	e7e0      	b.n	800ba58 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800ba96:	2002      	movs	r0, #2
 800ba98:	e7de      	b.n	800ba58 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800ba9a:	2002      	movs	r0, #2
 800ba9c:	e7df      	b.n	800ba5e <HAL_QSPI_Receive+0x80>

0800ba9e <HAL_QSPI_AutoPolling>:
{
 800ba9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800baa2:	4604      	mov	r4, r0
 800baa4:	461f      	mov	r7, r3
 800baa6:	4689      	mov	r9, r1
 800baa8:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800baaa:	f7fb ff6b 	bl	8007984 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800baae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800bab2:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d041      	beq.n	800bb3c <HAL_QSPI_AutoPolling+0x9e>
 800bab8:	2301      	movs	r3, #1
 800baba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800babe:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	fa5f f883 	uxtb.w	r8, r3
 800bac8:	d136      	bne.n	800bb38 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800baca:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bacc:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bace:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bad0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800bad2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bad6:	4603      	mov	r3, r0
 800bad8:	9700      	str	r7, [sp, #0]
 800bada:	4620      	mov	r0, r4
 800badc:	f7ff fe6a 	bl	800b7b4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800bae0:	bb20      	cbnz	r0, 800bb2c <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800bae2:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800bae4:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800bae6:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800bae8:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800baea:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800baec:	686b      	ldr	r3, [r5, #4]
 800baee:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800baf0:	68ab      	ldr	r3, [r5, #8]
 800baf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800baf4:	6813      	ldr	r3, [r2, #0]
 800baf6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800bafa:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800bafc:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800bafe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bb02:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800bb04:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800bb08:	68eb      	ldr	r3, [r5, #12]
 800bb0a:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800bb0e:	f7ff fd95 	bl	800b63c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800bb12:	4633      	mov	r3, r6
 800bb14:	4642      	mov	r2, r8
 800bb16:	2108      	movs	r1, #8
 800bb18:	4620      	mov	r0, r4
 800bb1a:	9700      	str	r7, [sp, #0]
 800bb1c:	f7ff fe4a 	bl	800b7b4 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800bb20:	b920      	cbnz	r0, 800bb2c <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	2208      	movs	r2, #8
 800bb26:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800bb28:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800bb32:	b003      	add	sp, #12
 800bb34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800bb38:	2002      	movs	r0, #2
 800bb3a:	e7f7      	b.n	800bb2c <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800bb3c:	2002      	movs	r0, #2
 800bb3e:	e7f8      	b.n	800bb32 <HAL_QSPI_AutoPolling+0x94>

0800bb40 <HAL_QSPI_MemoryMapped>:
{
 800bb40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb42:	4604      	mov	r4, r0
 800bb44:	4616      	mov	r6, r2
 800bb46:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800bb48:	f7fb ff1c 	bl	8007984 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800bb4c:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800bb50:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800bb52:	2a01      	cmp	r2, #1
 800bb54:	d033      	beq.n	800bbbe <HAL_QSPI_MemoryMapped+0x7e>
 800bb56:	2201      	movs	r2, #1
 800bb58:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bb5c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800bb60:	2a01      	cmp	r2, #1
 800bb62:	d12a      	bne.n	800bbba <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bb64:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800bb66:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bb68:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bb6a:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800bb6c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bb70:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bb72:	9100      	str	r1, [sp, #0]
 800bb74:	2120      	movs	r1, #32
 800bb76:	f7ff fe1d 	bl	800b7b4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	b9b8      	cbnz	r0, 800bbae <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	6872      	ldr	r2, [r6, #4]
 800bb82:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800bb84:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800bb86:	f020 0008 	bic.w	r0, r0, #8
 800bb8a:	ea40 0002 	orr.w	r0, r0, r2
 800bb8e:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800bb90:	d107      	bne.n	800bba2 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800bb92:	6832      	ldr	r2, [r6, #0]
 800bb94:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800bb96:	2210      	movs	r2, #16
 800bb98:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800bba0:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800bba2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800bba6:	4639      	mov	r1, r7
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7ff fd47 	bl	800b63c <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800bbae:	2300      	movs	r3, #0
 800bbb0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	b003      	add	sp, #12
 800bbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800bbba:	2502      	movs	r5, #2
 800bbbc:	e7f7      	b.n	800bbae <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800bbbe:	2502      	movs	r5, #2
 800bbc0:	e7f8      	b.n	800bbb4 <HAL_QSPI_MemoryMapped+0x74>
	...

0800bbc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d074      	beq.n	800bcb6 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bbcc:	6803      	ldr	r3, [r0, #0]
 800bbce:	07d8      	lsls	r0, r3, #31
 800bbd0:	d45e      	bmi.n	800bc90 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	0799      	lsls	r1, r3, #30
 800bbd6:	f100 80ad 	bmi.w	800bd34 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bbda:	6823      	ldr	r3, [r4, #0]
 800bbdc:	06da      	lsls	r2, r3, #27
 800bbde:	d527      	bpl.n	800bc30 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bbe0:	4a9c      	ldr	r2, [pc, #624]	@ (800be54 <HAL_RCC_OscConfig+0x290>)
 800bbe2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bbe4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bbe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bbea:	2b08      	cmp	r3, #8
 800bbec:	d007      	beq.n	800bbfe <HAL_RCC_OscConfig+0x3a>
 800bbee:	2b18      	cmp	r3, #24
 800bbf0:	f040 8103 	bne.w	800bdfa <HAL_RCC_OscConfig+0x236>
 800bbf4:	f001 0303 	and.w	r3, r1, #3
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	f040 80fe 	bne.w	800bdfa <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bbfe:	6813      	ldr	r3, [r2, #0]
 800bc00:	05db      	lsls	r3, r3, #23
 800bc02:	d502      	bpl.n	800bc0a <HAL_RCC_OscConfig+0x46>
 800bc04:	69e3      	ldr	r3, [r4, #28]
 800bc06:	2b80      	cmp	r3, #128	@ 0x80
 800bc08:	d155      	bne.n	800bcb6 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc0a:	f7fb fed3 	bl	80079b4 <HAL_GetREVID>
 800bc0e:	f241 0303 	movw	r3, #4099	@ 0x1003
 800bc12:	6a21      	ldr	r1, [r4, #32]
 800bc14:	4298      	cmp	r0, r3
 800bc16:	4b8f      	ldr	r3, [pc, #572]	@ (800be54 <HAL_RCC_OscConfig+0x290>)
 800bc18:	f200 80e8 	bhi.w	800bdec <HAL_RCC_OscConfig+0x228>
 800bc1c:	685a      	ldr	r2, [r3, #4]
 800bc1e:	2920      	cmp	r1, #32
 800bc20:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800bc24:	bf0c      	ite	eq
 800bc26:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800bc2a:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800bc2e:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	0719      	lsls	r1, r3, #28
 800bc34:	f100 8123 	bmi.w	800be7e <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	069a      	lsls	r2, r3, #26
 800bc3c:	f100 8144 	bmi.w	800bec8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	075d      	lsls	r5, r3, #29
 800bc44:	d51e      	bpl.n	800bc84 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bc46:	4d84      	ldr	r5, [pc, #528]	@ (800be58 <HAL_RCC_OscConfig+0x294>)
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc4e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc50:	f7fb fe98 	bl	8007984 <HAL_GetTick>
 800bc54:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc56:	682b      	ldr	r3, [r5, #0]
 800bc58:	05da      	lsls	r2, r3, #23
 800bc5a:	f140 815a 	bpl.w	800bf12 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc5e:	68a3      	ldr	r3, [r4, #8]
 800bc60:	4d7c      	ldr	r5, [pc, #496]	@ (800be54 <HAL_RCC_OscConfig+0x290>)
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	f040 815c 	bne.w	800bf20 <HAL_RCC_OscConfig+0x35c>
 800bc68:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800bc6a:	f043 0301 	orr.w	r3, r3, #1
 800bc6e:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc70:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800bc74:	f7fb fe86 	bl	8007984 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc78:	4e76      	ldr	r6, [pc, #472]	@ (800be54 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800bc7a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc7c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800bc7e:	079b      	lsls	r3, r3, #30
 800bc80:	f140 8174 	bpl.w	800bf6c <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc84:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800bc86:	2900      	cmp	r1, #0
 800bc88:	f040 8177 	bne.w	800bf7a <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	e02b      	b.n	800bce8 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc90:	4a70      	ldr	r2, [pc, #448]	@ (800be54 <HAL_RCC_OscConfig+0x290>)
 800bc92:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc94:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bc9a:	2b10      	cmp	r3, #16
 800bc9c:	d005      	beq.n	800bcaa <HAL_RCC_OscConfig+0xe6>
 800bc9e:	2b18      	cmp	r3, #24
 800bca0:	d10b      	bne.n	800bcba <HAL_RCC_OscConfig+0xf6>
 800bca2:	f001 0303 	and.w	r3, r1, #3
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d107      	bne.n	800bcba <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bcaa:	6813      	ldr	r3, [r2, #0]
 800bcac:	039a      	lsls	r2, r3, #14
 800bcae:	d590      	bpl.n	800bbd2 <HAL_RCC_OscConfig+0xe>
 800bcb0:	6863      	ldr	r3, [r4, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d18d      	bne.n	800bbd2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800bcb6:	2001      	movs	r0, #1
 800bcb8:	e016      	b.n	800bce8 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bcba:	6863      	ldr	r3, [r4, #4]
 800bcbc:	4d65      	ldr	r5, [pc, #404]	@ (800be54 <HAL_RCC_OscConfig+0x290>)
 800bcbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcc2:	d112      	bne.n	800bcea <HAL_RCC_OscConfig+0x126>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bcca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bccc:	f7fb fe5a 	bl	8007984 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bcd0:	4e60      	ldr	r6, [pc, #384]	@ (800be54 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800bcd2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bcd4:	6833      	ldr	r3, [r6, #0]
 800bcd6:	039b      	lsls	r3, r3, #14
 800bcd8:	f53f af7b 	bmi.w	800bbd2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bcdc:	f7fb fe52 	bl	8007984 <HAL_GetTick>
 800bce0:	1b40      	subs	r0, r0, r5
 800bce2:	2864      	cmp	r0, #100	@ 0x64
 800bce4:	d9f6      	bls.n	800bcd4 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800bce6:	2003      	movs	r0, #3
}
 800bce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bcea:	b9a3      	cbnz	r3, 800bd16 <HAL_RCC_OscConfig+0x152>
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bcf2:	602b      	str	r3, [r5, #0]
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bcfa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bcfc:	f7fb fe42 	bl	8007984 <HAL_GetTick>
 800bd00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd02:	682b      	ldr	r3, [r5, #0]
 800bd04:	039f      	lsls	r7, r3, #14
 800bd06:	f57f af64 	bpl.w	800bbd2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd0a:	f7fb fe3b 	bl	8007984 <HAL_GetTick>
 800bd0e:	1b80      	subs	r0, r0, r6
 800bd10:	2864      	cmp	r0, #100	@ 0x64
 800bd12:	d9f6      	bls.n	800bd02 <HAL_RCC_OscConfig+0x13e>
 800bd14:	e7e7      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bd1a:	682b      	ldr	r3, [r5, #0]
 800bd1c:	d103      	bne.n	800bd26 <HAL_RCC_OscConfig+0x162>
 800bd1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bd22:	602b      	str	r3, [r5, #0]
 800bd24:	e7ce      	b.n	800bcc4 <HAL_RCC_OscConfig+0x100>
 800bd26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd2a:	602b      	str	r3, [r5, #0]
 800bd2c:	682b      	ldr	r3, [r5, #0]
 800bd2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd32:	e7ca      	b.n	800bcca <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd34:	4947      	ldr	r1, [pc, #284]	@ (800be54 <HAL_RCC_OscConfig+0x290>)
 800bd36:	68e2      	ldr	r2, [r4, #12]
 800bd38:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bd3a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bd3c:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800bd40:	d003      	beq.n	800bd4a <HAL_RCC_OscConfig+0x186>
 800bd42:	2b18      	cmp	r3, #24
 800bd44:	d12a      	bne.n	800bd9c <HAL_RCC_OscConfig+0x1d8>
 800bd46:	0780      	lsls	r0, r0, #30
 800bd48:	d128      	bne.n	800bd9c <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd4a:	680b      	ldr	r3, [r1, #0]
 800bd4c:	075b      	lsls	r3, r3, #29
 800bd4e:	d501      	bpl.n	800bd54 <HAL_RCC_OscConfig+0x190>
 800bd50:	2a00      	cmp	r2, #0
 800bd52:	d0b0      	beq.n	800bcb6 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bd54:	4d3f      	ldr	r5, [pc, #252]	@ (800be54 <HAL_RCC_OscConfig+0x290>)
 800bd56:	682b      	ldr	r3, [r5, #0]
 800bd58:	f023 0319 	bic.w	r3, r3, #25
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bd60:	f7fb fe10 	bl	8007984 <HAL_GetTick>
 800bd64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bd66:	682b      	ldr	r3, [r5, #0]
 800bd68:	075f      	lsls	r7, r3, #29
 800bd6a:	d511      	bpl.n	800bd90 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd6c:	f7fb fe22 	bl	80079b4 <HAL_GetREVID>
 800bd70:	f241 0303 	movw	r3, #4099	@ 0x1003
 800bd74:	6922      	ldr	r2, [r4, #16]
 800bd76:	4298      	cmp	r0, r3
 800bd78:	686b      	ldr	r3, [r5, #4]
 800bd7a:	d822      	bhi.n	800bdc2 <HAL_RCC_OscConfig+0x1fe>
 800bd7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bd80:	2a40      	cmp	r2, #64	@ 0x40
 800bd82:	bf0c      	ite	eq
 800bd84:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800bd88:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800bd8c:	606b      	str	r3, [r5, #4]
 800bd8e:	e724      	b.n	800bbda <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd90:	f7fb fdf8 	bl	8007984 <HAL_GetTick>
 800bd94:	1b80      	subs	r0, r0, r6
 800bd96:	2802      	cmp	r0, #2
 800bd98:	d9e5      	bls.n	800bd66 <HAL_RCC_OscConfig+0x1a2>
 800bd9a:	e7a4      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bd9c:	4d2d      	ldr	r5, [pc, #180]	@ (800be54 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bd9e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bda0:	b1a2      	cbz	r2, 800bdcc <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bda2:	f023 0319 	bic.w	r3, r3, #25
 800bda6:	4313      	orrs	r3, r2
 800bda8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bdaa:	f7fb fdeb 	bl	8007984 <HAL_GetTick>
 800bdae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdb0:	682b      	ldr	r3, [r5, #0]
 800bdb2:	0758      	lsls	r0, r3, #29
 800bdb4:	d4da      	bmi.n	800bd6c <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bdb6:	f7fb fde5 	bl	8007984 <HAL_GetTick>
 800bdba:	1b80      	subs	r0, r0, r6
 800bdbc:	2802      	cmp	r0, #2
 800bdbe:	d9f7      	bls.n	800bdb0 <HAL_RCC_OscConfig+0x1ec>
 800bdc0:	e791      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdc2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800bdc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bdca:	e7df      	b.n	800bd8c <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800bdcc:	f023 0301 	bic.w	r3, r3, #1
 800bdd0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bdd2:	f7fb fdd7 	bl	8007984 <HAL_GetTick>
 800bdd6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bdd8:	682b      	ldr	r3, [r5, #0]
 800bdda:	0759      	lsls	r1, r3, #29
 800bddc:	f57f aefd 	bpl.w	800bbda <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bde0:	f7fb fdd0 	bl	8007984 <HAL_GetTick>
 800bde4:	1b80      	subs	r0, r0, r6
 800bde6:	2802      	cmp	r0, #2
 800bde8:	d9f6      	bls.n	800bdd8 <HAL_RCC_OscConfig+0x214>
 800bdea:	e77c      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bdec:	68da      	ldr	r2, [r3, #12]
 800bdee:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800bdf2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bdf6:	60da      	str	r2, [r3, #12]
 800bdf8:	e71a      	b.n	800bc30 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bdfa:	69e3      	ldr	r3, [r4, #28]
 800bdfc:	4d15      	ldr	r5, [pc, #84]	@ (800be54 <HAL_RCC_OscConfig+0x290>)
 800bdfe:	b36b      	cbz	r3, 800be5c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be06:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800be08:	f7fb fdbc 	bl	8007984 <HAL_GetTick>
 800be0c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800be0e:	682b      	ldr	r3, [r5, #0]
 800be10:	05df      	lsls	r7, r3, #23
 800be12:	d511      	bpl.n	800be38 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800be14:	f7fb fdce 	bl	80079b4 <HAL_GetREVID>
 800be18:	f241 0303 	movw	r3, #4099	@ 0x1003
 800be1c:	6a22      	ldr	r2, [r4, #32]
 800be1e:	4298      	cmp	r0, r3
 800be20:	d810      	bhi.n	800be44 <HAL_RCC_OscConfig+0x280>
 800be22:	686b      	ldr	r3, [r5, #4]
 800be24:	2a20      	cmp	r2, #32
 800be26:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800be2a:	bf0c      	ite	eq
 800be2c:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800be30:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800be34:	606b      	str	r3, [r5, #4]
 800be36:	e6fb      	b.n	800bc30 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800be38:	f7fb fda4 	bl	8007984 <HAL_GetTick>
 800be3c:	1b80      	subs	r0, r0, r6
 800be3e:	2802      	cmp	r0, #2
 800be40:	d9e5      	bls.n	800be0e <HAL_RCC_OscConfig+0x24a>
 800be42:	e750      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800be44:	68eb      	ldr	r3, [r5, #12]
 800be46:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800be4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800be4e:	60eb      	str	r3, [r5, #12]
 800be50:	e6ee      	b.n	800bc30 <HAL_RCC_OscConfig+0x6c>
 800be52:	bf00      	nop
 800be54:	58024400 	.word	0x58024400
 800be58:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800be64:	f7fb fd8e 	bl	8007984 <HAL_GetTick>
 800be68:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800be6a:	682b      	ldr	r3, [r5, #0]
 800be6c:	05d8      	lsls	r0, r3, #23
 800be6e:	f57f aedf 	bpl.w	800bc30 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800be72:	f7fb fd87 	bl	8007984 <HAL_GetTick>
 800be76:	1b80      	subs	r0, r0, r6
 800be78:	2802      	cmp	r0, #2
 800be7a:	d9f6      	bls.n	800be6a <HAL_RCC_OscConfig+0x2a6>
 800be7c:	e733      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800be7e:	6963      	ldr	r3, [r4, #20]
 800be80:	4da5      	ldr	r5, [pc, #660]	@ (800c118 <HAL_RCC_OscConfig+0x554>)
 800be82:	b183      	cbz	r3, 800bea6 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800be84:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800be86:	f043 0301 	orr.w	r3, r3, #1
 800be8a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800be8c:	f7fb fd7a 	bl	8007984 <HAL_GetTick>
 800be90:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800be92:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800be94:	079b      	lsls	r3, r3, #30
 800be96:	f53f aecf 	bmi.w	800bc38 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be9a:	f7fb fd73 	bl	8007984 <HAL_GetTick>
 800be9e:	1b80      	subs	r0, r0, r6
 800bea0:	2802      	cmp	r0, #2
 800bea2:	d9f6      	bls.n	800be92 <HAL_RCC_OscConfig+0x2ce>
 800bea4:	e71f      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800bea6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800bea8:	f023 0301 	bic.w	r3, r3, #1
 800beac:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800beae:	f7fb fd69 	bl	8007984 <HAL_GetTick>
 800beb2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800beb4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800beb6:	079f      	lsls	r7, r3, #30
 800beb8:	f57f aebe 	bpl.w	800bc38 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bebc:	f7fb fd62 	bl	8007984 <HAL_GetTick>
 800bec0:	1b80      	subs	r0, r0, r6
 800bec2:	2802      	cmp	r0, #2
 800bec4:	d9f6      	bls.n	800beb4 <HAL_RCC_OscConfig+0x2f0>
 800bec6:	e70e      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bec8:	69a3      	ldr	r3, [r4, #24]
 800beca:	4d93      	ldr	r5, [pc, #588]	@ (800c118 <HAL_RCC_OscConfig+0x554>)
 800becc:	b183      	cbz	r3, 800bef0 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800bece:	682b      	ldr	r3, [r5, #0]
 800bed0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bed4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800bed6:	f7fb fd55 	bl	8007984 <HAL_GetTick>
 800beda:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	0498      	lsls	r0, r3, #18
 800bee0:	f53f aeae 	bmi.w	800bc40 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bee4:	f7fb fd4e 	bl	8007984 <HAL_GetTick>
 800bee8:	1b80      	subs	r0, r0, r6
 800beea:	2802      	cmp	r0, #2
 800beec:	d9f6      	bls.n	800bedc <HAL_RCC_OscConfig+0x318>
 800beee:	e6fa      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800bef0:	682b      	ldr	r3, [r5, #0]
 800bef2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bef6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800bef8:	f7fb fd44 	bl	8007984 <HAL_GetTick>
 800befc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800befe:	682b      	ldr	r3, [r5, #0]
 800bf00:	0499      	lsls	r1, r3, #18
 800bf02:	f57f ae9d 	bpl.w	800bc40 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bf06:	f7fb fd3d 	bl	8007984 <HAL_GetTick>
 800bf0a:	1b80      	subs	r0, r0, r6
 800bf0c:	2802      	cmp	r0, #2
 800bf0e:	d9f6      	bls.n	800befe <HAL_RCC_OscConfig+0x33a>
 800bf10:	e6e9      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf12:	f7fb fd37 	bl	8007984 <HAL_GetTick>
 800bf16:	1b80      	subs	r0, r0, r6
 800bf18:	2864      	cmp	r0, #100	@ 0x64
 800bf1a:	f67f ae9c 	bls.w	800bc56 <HAL_RCC_OscConfig+0x92>
 800bf1e:	e6e2      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf20:	b9b3      	cbnz	r3, 800bf50 <HAL_RCC_OscConfig+0x38c>
 800bf22:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf24:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf28:	f023 0301 	bic.w	r3, r3, #1
 800bf2c:	672b      	str	r3, [r5, #112]	@ 0x70
 800bf2e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800bf30:	f023 0304 	bic.w	r3, r3, #4
 800bf34:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800bf36:	f7fb fd25 	bl	8007984 <HAL_GetTick>
 800bf3a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bf3c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800bf3e:	0798      	lsls	r0, r3, #30
 800bf40:	f57f aea0 	bpl.w	800bc84 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf44:	f7fb fd1e 	bl	8007984 <HAL_GetTick>
 800bf48:	1b80      	subs	r0, r0, r6
 800bf4a:	42b8      	cmp	r0, r7
 800bf4c:	d9f6      	bls.n	800bf3c <HAL_RCC_OscConfig+0x378>
 800bf4e:	e6ca      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf50:	2b05      	cmp	r3, #5
 800bf52:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800bf54:	d103      	bne.n	800bf5e <HAL_RCC_OscConfig+0x39a>
 800bf56:	f043 0304 	orr.w	r3, r3, #4
 800bf5a:	672b      	str	r3, [r5, #112]	@ 0x70
 800bf5c:	e684      	b.n	800bc68 <HAL_RCC_OscConfig+0xa4>
 800bf5e:	f023 0301 	bic.w	r3, r3, #1
 800bf62:	672b      	str	r3, [r5, #112]	@ 0x70
 800bf64:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800bf66:	f023 0304 	bic.w	r3, r3, #4
 800bf6a:	e680      	b.n	800bc6e <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf6c:	f7fb fd0a 	bl	8007984 <HAL_GetTick>
 800bf70:	1b40      	subs	r0, r0, r5
 800bf72:	42b8      	cmp	r0, r7
 800bf74:	f67f ae82 	bls.w	800bc7c <HAL_RCC_OscConfig+0xb8>
 800bf78:	e6b5      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bf7a:	4d67      	ldr	r5, [pc, #412]	@ (800c118 <HAL_RCC_OscConfig+0x554>)
 800bf7c:	692b      	ldr	r3, [r5, #16]
 800bf7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf82:	2b18      	cmp	r3, #24
 800bf84:	d07a      	beq.n	800c07c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800bf86:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf88:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800bf8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bf8e:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf90:	d167      	bne.n	800c062 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800bf92:	f7fb fcf7 	bl	8007984 <HAL_GetTick>
 800bf96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	0199      	lsls	r1, r3, #6
 800bf9c:	d45b      	bmi.n	800c056 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bf9e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800bfa0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bfa2:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800bfa6:	f023 0303 	bic.w	r3, r3, #3
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bfae:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800bfb2:	62ab      	str	r3, [r5, #40]	@ 0x28
 800bfb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bfb6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	3a01      	subs	r2, #1
 800bfbc:	025b      	lsls	r3, r3, #9
 800bfbe:	0412      	lsls	r2, r2, #16
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800bfca:	3a01      	subs	r2, #1
 800bfcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800bfd4:	3a01      	subs	r2, #1
 800bfd6:	0612      	lsls	r2, r2, #24
 800bfd8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800bfe0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800bfe2:	f023 0301 	bic.w	r3, r3, #1
 800bfe6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bfe8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800bfea:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800bfec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bff0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bff4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bff8:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bffa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800bffc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800bffe:	f023 030c 	bic.w	r3, r3, #12
 800c002:	4313      	orrs	r3, r2
 800c004:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c006:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c008:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800c00a:	f023 0302 	bic.w	r3, r3, #2
 800c00e:	4313      	orrs	r3, r2
 800c010:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c012:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c018:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c01a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c01c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c020:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c022:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c028:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800c02a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c02c:	f043 0301 	orr.w	r3, r3, #1
 800c030:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800c032:	682b      	ldr	r3, [r5, #0]
 800c034:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c038:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c03a:	f7fb fca3 	bl	8007984 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c03e:	4d36      	ldr	r5, [pc, #216]	@ (800c118 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800c040:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c042:	682b      	ldr	r3, [r5, #0]
 800c044:	019a      	lsls	r2, r3, #6
 800c046:	f53f ae21 	bmi.w	800bc8c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c04a:	f7fb fc9b 	bl	8007984 <HAL_GetTick>
 800c04e:	1b00      	subs	r0, r0, r4
 800c050:	2802      	cmp	r0, #2
 800c052:	d9f6      	bls.n	800c042 <HAL_RCC_OscConfig+0x47e>
 800c054:	e647      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c056:	f7fb fc95 	bl	8007984 <HAL_GetTick>
 800c05a:	1b80      	subs	r0, r0, r6
 800c05c:	2802      	cmp	r0, #2
 800c05e:	d99b      	bls.n	800bf98 <HAL_RCC_OscConfig+0x3d4>
 800c060:	e641      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800c062:	f7fb fc8f 	bl	8007984 <HAL_GetTick>
 800c066:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c068:	682b      	ldr	r3, [r5, #0]
 800c06a:	019b      	lsls	r3, r3, #6
 800c06c:	f57f ae0e 	bpl.w	800bc8c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c070:	f7fb fc88 	bl	8007984 <HAL_GetTick>
 800c074:	1b00      	subs	r0, r0, r4
 800c076:	2802      	cmp	r0, #2
 800c078:	d9f6      	bls.n	800c068 <HAL_RCC_OscConfig+0x4a4>
 800c07a:	e634      	b.n	800bce6 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c07c:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c07e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c080:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c082:	f43f ae18 	beq.w	800bcb6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c086:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c08a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800c08c:	4281      	cmp	r1, r0
 800c08e:	f47f ae12 	bne.w	800bcb6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c092:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c096:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c098:	428a      	cmp	r2, r1
 800c09a:	f47f ae0c 	bne.w	800bcb6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c09e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800c0a0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800c0a4:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c0a6:	4291      	cmp	r1, r2
 800c0a8:	f47f ae05 	bne.w	800bcb6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c0ac:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800c0ae:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800c0b2:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c0b4:	4291      	cmp	r1, r2
 800c0b6:	f47f adfe 	bne.w	800bcb6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c0ba:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c0bc:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800c0c0:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c0c2:	4291      	cmp	r1, r2
 800c0c4:	f47f adf7 	bne.w	800bcb6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c0c8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c0ca:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c0ce:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	f47f adf0 	bne.w	800bcb6 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c0d6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c0d8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c0da:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	f43f add4 	beq.w	800bc8c <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800c0e4:	4d0c      	ldr	r5, [pc, #48]	@ (800c118 <HAL_RCC_OscConfig+0x554>)
 800c0e6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c0e8:	f023 0301 	bic.w	r3, r3, #1
 800c0ec:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800c0ee:	f7fb fc49 	bl	8007984 <HAL_GetTick>
 800c0f2:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c0f4:	f7fb fc46 	bl	8007984 <HAL_GetTick>
 800c0f8:	42b0      	cmp	r0, r6
 800c0fa:	d0fb      	beq.n	800c0f4 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c0fc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c0fe:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800c100:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c104:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c108:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c10c:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800c10e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c110:	f043 0301 	orr.w	r3, r3, #1
 800c114:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800c116:	e5b9      	b.n	800bc8c <HAL_RCC_OscConfig+0xc8>
 800c118:	58024400 	.word	0x58024400

0800c11c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800c11c:	b570      	push	{r4, r5, r6, lr}
 800c11e:	4c23      	ldr	r4, [pc, #140]	@ (800c1ac <HAL_RCC_MCOConfig+0x90>)
 800c120:	b088      	sub	sp, #32
 800c122:	460e      	mov	r6, r1
 800c124:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800c126:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800c12a:	b9f8      	cbnz	r0, 800c16c <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800c12c:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c130:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c134:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800c136:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800c13a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c13e:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800c140:	f003 0301 	and.w	r3, r3, #1
 800c144:	9301      	str	r3, [sp, #4]
 800c146:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c148:	2302      	movs	r3, #2
 800c14a:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c14e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c150:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c154:	4816      	ldr	r0, [pc, #88]	@ (800c1b0 <HAL_RCC_MCOConfig+0x94>)
 800c156:	f7fd fa27 	bl	80095a8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800c15a:	6923      	ldr	r3, [r4, #16]
 800c15c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800c160:	ea43 0106 	orr.w	r1, r3, r6
 800c164:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c166:	6121      	str	r1, [r4, #16]
  }
}
 800c168:	b008      	add	sp, #32
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800c16c:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c170:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c174:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c176:	480f      	ldr	r0, [pc, #60]	@ (800c1b4 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800c178:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800c17c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800c180:	f003 0304 	and.w	r3, r3, #4
 800c184:	9302      	str	r3, [sp, #8]
 800c186:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c188:	2302      	movs	r3, #2
 800c18a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c18e:	2300      	movs	r3, #0
 800c190:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c194:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c196:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c198:	f7fd fa06 	bl	80095a8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c19c:	6923      	ldr	r3, [r4, #16]
 800c19e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800c1a2:	ea43 0106 	orr.w	r1, r3, r6
 800c1a6:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800c1aa:	e7dc      	b.n	800c166 <HAL_RCC_MCOConfig+0x4a>
 800c1ac:	58024400 	.word	0x58024400
 800c1b0:	58020000 	.word	0x58020000
 800c1b4:	58020800 	.word	0x58020800

0800c1b8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c1b8:	4b49      	ldr	r3, [pc, #292]	@ (800c2e0 <HAL_RCC_GetSysClockFreq+0x128>)
 800c1ba:	691a      	ldr	r2, [r3, #16]
 800c1bc:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800c1c0:	2a10      	cmp	r2, #16
{
 800c1c2:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c1c4:	f000 8088 	beq.w	800c2d8 <HAL_RCC_GetSysClockFreq+0x120>
 800c1c8:	2a18      	cmp	r2, #24
 800c1ca:	d00c      	beq.n	800c1e6 <HAL_RCC_GetSysClockFreq+0x2e>
 800c1cc:	2a00      	cmp	r2, #0
 800c1ce:	f040 8085 	bne.w	800c2dc <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	4843      	ldr	r0, [pc, #268]	@ (800c2e4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800c1d6:	f012 0f20 	tst.w	r2, #32
 800c1da:	d003      	beq.n	800c1e4 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c1e2:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800c1e4:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1e6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c1e8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c1ea:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800c1ec:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c1f0:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c1f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800c1f6:	d0f5      	beq.n	800c1e4 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c1f8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c1fc:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c200:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c204:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c208:	4362      	muls	r2, r4
 800c20a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800c20e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c214:	ee06 2a90 	vmov	s13, r2
 800c218:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800c21c:	d04e      	beq.n	800c2bc <HAL_RCC_GetSysClockFreq+0x104>
 800c21e:	2902      	cmp	r1, #2
 800c220:	d03e      	beq.n	800c2a0 <HAL_RCC_GetSysClockFreq+0xe8>
 800c222:	2900      	cmp	r1, #0
 800c224:	d14a      	bne.n	800c2bc <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	0692      	lsls	r2, r2, #26
 800c22a:	d527      	bpl.n	800c27c <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c22c:	6819      	ldr	r1, [r3, #0]
 800c22e:	4a2d      	ldr	r2, [pc, #180]	@ (800c2e4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800c230:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c236:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c23c:	ee07 2a90 	vmov	s15, r2
 800c240:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800c244:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800c248:	ee07 3a10 	vmov	s14, r3
 800c24c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c250:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c254:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c258:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c25c:	4b20      	ldr	r3, [pc, #128]	@ (800c2e0 <HAL_RCC_GetSysClockFreq+0x128>)
 800c25e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c260:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c264:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c266:	ee07 3a10 	vmov	s14, r3
 800c26a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800c26e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c272:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c276:	ee17 0a90 	vmov	r0, s15
 800c27a:	e7b3      	b.n	800c1e4 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c27c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c282:	ee07 3a90 	vmov	s15, r3
 800c286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c28e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c292:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c2e8 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c296:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c29a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800c29e:	e7dd      	b.n	800c25c <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a6:	ee07 3a90 	vmov	s15, r3
 800c2aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2b2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c2b6:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800c2ec <HAL_RCC_GetSysClockFreq+0x134>
 800c2ba:	e7ec      	b.n	800c296 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2c2:	ee07 3a90 	vmov	s15, r3
 800c2c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c2d2:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800c2f0 <HAL_RCC_GetSysClockFreq+0x138>
 800c2d6:	e7de      	b.n	800c296 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c2d8:	4806      	ldr	r0, [pc, #24]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800c2da:	e783      	b.n	800c1e4 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800c2dc:	4806      	ldr	r0, [pc, #24]	@ (800c2f8 <HAL_RCC_GetSysClockFreq+0x140>)
 800c2de:	e781      	b.n	800c1e4 <HAL_RCC_GetSysClockFreq+0x2c>
 800c2e0:	58024400 	.word	0x58024400
 800c2e4:	03d09000 	.word	0x03d09000
 800c2e8:	4c742400 	.word	0x4c742400
 800c2ec:	4bbebc20 	.word	0x4bbebc20
 800c2f0:	4a742400 	.word	0x4a742400
 800c2f4:	017d7840 	.word	0x017d7840
 800c2f8:	003d0900 	.word	0x003d0900

0800c2fc <HAL_RCC_ClockConfig>:
{
 800c2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c300:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800c302:	4604      	mov	r4, r0
 800c304:	b910      	cbnz	r0, 800c30c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800c306:	2001      	movs	r0, #1
}
 800c308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c30c:	4a88      	ldr	r2, [pc, #544]	@ (800c530 <HAL_RCC_ClockConfig+0x234>)
 800c30e:	6813      	ldr	r3, [r2, #0]
 800c310:	f003 030f 	and.w	r3, r3, #15
 800c314:	428b      	cmp	r3, r1
 800c316:	f0c0 8093 	bcc.w	800c440 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c31a:	6823      	ldr	r3, [r4, #0]
 800c31c:	075f      	lsls	r7, r3, #29
 800c31e:	f100 809b 	bmi.w	800c458 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c322:	071e      	lsls	r6, r3, #28
 800c324:	d50b      	bpl.n	800c33e <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c326:	4983      	ldr	r1, [pc, #524]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c328:	6960      	ldr	r0, [r4, #20]
 800c32a:	69ca      	ldr	r2, [r1, #28]
 800c32c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c330:	4290      	cmp	r0, r2
 800c332:	d904      	bls.n	800c33e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c334:	69ca      	ldr	r2, [r1, #28]
 800c336:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c33a:	4302      	orrs	r2, r0
 800c33c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c33e:	06d8      	lsls	r0, r3, #27
 800c340:	d50b      	bpl.n	800c35a <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c342:	497c      	ldr	r1, [pc, #496]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c344:	69a0      	ldr	r0, [r4, #24]
 800c346:	69ca      	ldr	r2, [r1, #28]
 800c348:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c34c:	4290      	cmp	r0, r2
 800c34e:	d904      	bls.n	800c35a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c350:	69ca      	ldr	r2, [r1, #28]
 800c352:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c356:	4302      	orrs	r2, r0
 800c358:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c35a:	0699      	lsls	r1, r3, #26
 800c35c:	d50b      	bpl.n	800c376 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c35e:	4975      	ldr	r1, [pc, #468]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c360:	69e0      	ldr	r0, [r4, #28]
 800c362:	6a0a      	ldr	r2, [r1, #32]
 800c364:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c368:	4290      	cmp	r0, r2
 800c36a:	d904      	bls.n	800c376 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c36c:	6a0a      	ldr	r2, [r1, #32]
 800c36e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c372:	4302      	orrs	r2, r0
 800c374:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c376:	079a      	lsls	r2, r3, #30
 800c378:	d50b      	bpl.n	800c392 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c37a:	496e      	ldr	r1, [pc, #440]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c37c:	68e0      	ldr	r0, [r4, #12]
 800c37e:	698a      	ldr	r2, [r1, #24]
 800c380:	f002 020f 	and.w	r2, r2, #15
 800c384:	4290      	cmp	r0, r2
 800c386:	d904      	bls.n	800c392 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c388:	698a      	ldr	r2, [r1, #24]
 800c38a:	f022 020f 	bic.w	r2, r2, #15
 800c38e:	4302      	orrs	r2, r0
 800c390:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c392:	07df      	lsls	r7, r3, #31
 800c394:	d46e      	bmi.n	800c474 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c396:	6823      	ldr	r3, [r4, #0]
 800c398:	079e      	lsls	r6, r3, #30
 800c39a:	f100 80a1 	bmi.w	800c4e0 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c39e:	4964      	ldr	r1, [pc, #400]	@ (800c530 <HAL_RCC_ClockConfig+0x234>)
 800c3a0:	680a      	ldr	r2, [r1, #0]
 800c3a2:	f002 020f 	and.w	r2, r2, #15
 800c3a6:	42aa      	cmp	r2, r5
 800c3a8:	f200 80a8 	bhi.w	800c4fc <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c3ac:	0758      	lsls	r0, r3, #29
 800c3ae:	f100 80b1 	bmi.w	800c514 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3b2:	0719      	lsls	r1, r3, #28
 800c3b4:	d50b      	bpl.n	800c3ce <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c3b6:	495f      	ldr	r1, [pc, #380]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c3b8:	6960      	ldr	r0, [r4, #20]
 800c3ba:	69ca      	ldr	r2, [r1, #28]
 800c3bc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c3c0:	4290      	cmp	r0, r2
 800c3c2:	d204      	bcs.n	800c3ce <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c3c4:	69ca      	ldr	r2, [r1, #28]
 800c3c6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c3ca:	4302      	orrs	r2, r0
 800c3cc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3ce:	06da      	lsls	r2, r3, #27
 800c3d0:	d50b      	bpl.n	800c3ea <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c3d2:	4958      	ldr	r1, [pc, #352]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c3d4:	69a0      	ldr	r0, [r4, #24]
 800c3d6:	69ca      	ldr	r2, [r1, #28]
 800c3d8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c3dc:	4290      	cmp	r0, r2
 800c3de:	d204      	bcs.n	800c3ea <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c3e0:	69ca      	ldr	r2, [r1, #28]
 800c3e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c3e6:	4302      	orrs	r2, r0
 800c3e8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c3ea:	069b      	lsls	r3, r3, #26
 800c3ec:	d50b      	bpl.n	800c406 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c3ee:	4a51      	ldr	r2, [pc, #324]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c3f0:	69e1      	ldr	r1, [r4, #28]
 800c3f2:	6a13      	ldr	r3, [r2, #32]
 800c3f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c3f8:	4299      	cmp	r1, r3
 800c3fa:	d204      	bcs.n	800c406 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c3fc:	6a13      	ldr	r3, [r2, #32]
 800c3fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c402:	430b      	orrs	r3, r1
 800c404:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c406:	f7ff fed7 	bl	800c1b8 <HAL_RCC_GetSysClockFreq>
 800c40a:	494a      	ldr	r1, [pc, #296]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c40c:	4a4a      	ldr	r2, [pc, #296]	@ (800c538 <HAL_RCC_ClockConfig+0x23c>)
 800c40e:	698b      	ldr	r3, [r1, #24]
 800c410:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c414:	5cd3      	ldrb	r3, [r2, r3]
 800c416:	f003 031f 	and.w	r3, r3, #31
 800c41a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c41c:	698b      	ldr	r3, [r1, #24]
 800c41e:	f003 030f 	and.w	r3, r3, #15
 800c422:	5cd3      	ldrb	r3, [r2, r3]
 800c424:	4a45      	ldr	r2, [pc, #276]	@ (800c53c <HAL_RCC_ClockConfig+0x240>)
 800c426:	f003 031f 	and.w	r3, r3, #31
 800c42a:	fa20 f303 	lsr.w	r3, r0, r3
 800c42e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800c430:	4b43      	ldr	r3, [pc, #268]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c432:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800c434:	4b43      	ldr	r3, [pc, #268]	@ (800c544 <HAL_RCC_ClockConfig+0x248>)
}
 800c436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800c43a:	6818      	ldr	r0, [r3, #0]
 800c43c:	f7f5 bb32 	b.w	8001aa4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c440:	6813      	ldr	r3, [r2, #0]
 800c442:	f023 030f 	bic.w	r3, r3, #15
 800c446:	430b      	orrs	r3, r1
 800c448:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c44a:	6813      	ldr	r3, [r2, #0]
 800c44c:	f003 030f 	and.w	r3, r3, #15
 800c450:	428b      	cmp	r3, r1
 800c452:	f47f af58 	bne.w	800c306 <HAL_RCC_ClockConfig+0xa>
 800c456:	e760      	b.n	800c31a <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c458:	4936      	ldr	r1, [pc, #216]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c45a:	6920      	ldr	r0, [r4, #16]
 800c45c:	698a      	ldr	r2, [r1, #24]
 800c45e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c462:	4290      	cmp	r0, r2
 800c464:	f67f af5d 	bls.w	800c322 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c468:	698a      	ldr	r2, [r1, #24]
 800c46a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c46e:	4302      	orrs	r2, r0
 800c470:	618a      	str	r2, [r1, #24]
 800c472:	e756      	b.n	800c322 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c474:	4b2f      	ldr	r3, [pc, #188]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c476:	68a1      	ldr	r1, [r4, #8]
 800c478:	699a      	ldr	r2, [r3, #24]
 800c47a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800c47e:	430a      	orrs	r2, r1
 800c480:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c482:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c484:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c486:	2902      	cmp	r1, #2
 800c488:	d11d      	bne.n	800c4c6 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c48a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c48e:	f43f af3a 	beq.w	800c306 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c492:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c494:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c498:	4f26      	ldr	r7, [pc, #152]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c49a:	f022 0207 	bic.w	r2, r2, #7
 800c49e:	430a      	orrs	r2, r1
 800c4a0:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800c4a2:	f7fb fa6f 	bl	8007984 <HAL_GetTick>
 800c4a6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	6862      	ldr	r2, [r4, #4]
 800c4ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c4b0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800c4b4:	f43f af6f 	beq.w	800c396 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4b8:	f7fb fa64 	bl	8007984 <HAL_GetTick>
 800c4bc:	1b80      	subs	r0, r0, r6
 800c4be:	4540      	cmp	r0, r8
 800c4c0:	d9f2      	bls.n	800c4a8 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800c4c2:	2003      	movs	r0, #3
 800c4c4:	e720      	b.n	800c308 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c4c6:	2903      	cmp	r1, #3
 800c4c8:	d102      	bne.n	800c4d0 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c4ca:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800c4ce:	e7de      	b.n	800c48e <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c4d0:	2901      	cmp	r1, #1
 800c4d2:	d102      	bne.n	800c4da <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c4d4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800c4d8:	e7d9      	b.n	800c48e <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c4da:	f012 0f04 	tst.w	r2, #4
 800c4de:	e7d6      	b.n	800c48e <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c4e0:	4914      	ldr	r1, [pc, #80]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c4e2:	68e0      	ldr	r0, [r4, #12]
 800c4e4:	698a      	ldr	r2, [r1, #24]
 800c4e6:	f002 020f 	and.w	r2, r2, #15
 800c4ea:	4290      	cmp	r0, r2
 800c4ec:	f4bf af57 	bcs.w	800c39e <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4f0:	698a      	ldr	r2, [r1, #24]
 800c4f2:	f022 020f 	bic.w	r2, r2, #15
 800c4f6:	4302      	orrs	r2, r0
 800c4f8:	618a      	str	r2, [r1, #24]
 800c4fa:	e750      	b.n	800c39e <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4fc:	680a      	ldr	r2, [r1, #0]
 800c4fe:	f022 020f 	bic.w	r2, r2, #15
 800c502:	432a      	orrs	r2, r5
 800c504:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c506:	680a      	ldr	r2, [r1, #0]
 800c508:	f002 020f 	and.w	r2, r2, #15
 800c50c:	42aa      	cmp	r2, r5
 800c50e:	f47f aefa 	bne.w	800c306 <HAL_RCC_ClockConfig+0xa>
 800c512:	e74b      	b.n	800c3ac <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c514:	4907      	ldr	r1, [pc, #28]	@ (800c534 <HAL_RCC_ClockConfig+0x238>)
 800c516:	6920      	ldr	r0, [r4, #16]
 800c518:	698a      	ldr	r2, [r1, #24]
 800c51a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c51e:	4290      	cmp	r0, r2
 800c520:	f4bf af47 	bcs.w	800c3b2 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c524:	698a      	ldr	r2, [r1, #24]
 800c526:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c52a:	4302      	orrs	r2, r0
 800c52c:	618a      	str	r2, [r1, #24]
 800c52e:	e740      	b.n	800c3b2 <HAL_RCC_ClockConfig+0xb6>
 800c530:	52002000 	.word	0x52002000
 800c534:	58024400 	.word	0x58024400
 800c538:	08028f3c 	.word	0x08028f3c
 800c53c:	24000068 	.word	0x24000068
 800c540:	2400006c 	.word	0x2400006c
 800c544:	24000074 	.word	0x24000074

0800c548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c548:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c54a:	f7ff fe35 	bl	800c1b8 <HAL_RCC_GetSysClockFreq>
 800c54e:	4a0b      	ldr	r2, [pc, #44]	@ (800c57c <HAL_RCC_GetHCLKFreq+0x34>)
 800c550:	490b      	ldr	r1, [pc, #44]	@ (800c580 <HAL_RCC_GetHCLKFreq+0x38>)
 800c552:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c554:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c556:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c55a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c55e:	5ccb      	ldrb	r3, [r1, r3]
 800c560:	f003 031f 	and.w	r3, r3, #31
 800c564:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c568:	5c88      	ldrb	r0, [r1, r2]
 800c56a:	4a06      	ldr	r2, [pc, #24]	@ (800c584 <HAL_RCC_GetHCLKFreq+0x3c>)
 800c56c:	f000 001f 	and.w	r0, r0, #31
 800c570:	fa23 f000 	lsr.w	r0, r3, r0
 800c574:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c576:	4a04      	ldr	r2, [pc, #16]	@ (800c588 <HAL_RCC_GetHCLKFreq+0x40>)
 800c578:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800c57a:	bd08      	pop	{r3, pc}
 800c57c:	58024400 	.word	0x58024400
 800c580:	08028f3c 	.word	0x08028f3c
 800c584:	24000068 	.word	0x24000068
 800c588:	2400006c 	.word	0x2400006c

0800c58c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c58c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c58e:	f7ff ffdb 	bl	800c548 <HAL_RCC_GetHCLKFreq>
 800c592:	4b05      	ldr	r3, [pc, #20]	@ (800c5a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c594:	4a05      	ldr	r2, [pc, #20]	@ (800c5ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800c596:	69db      	ldr	r3, [r3, #28]
 800c598:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c59c:	5cd3      	ldrb	r3, [r2, r3]
 800c59e:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c5a2:	40d8      	lsrs	r0, r3
 800c5a4:	bd08      	pop	{r3, pc}
 800c5a6:	bf00      	nop
 800c5a8:	58024400 	.word	0x58024400
 800c5ac:	08028f3c 	.word	0x08028f3c

0800c5b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c5b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c5b2:	f7ff ffc9 	bl	800c548 <HAL_RCC_GetHCLKFreq>
 800c5b6:	4b05      	ldr	r3, [pc, #20]	@ (800c5cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 800c5b8:	4a05      	ldr	r2, [pc, #20]	@ (800c5d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c5ba:	69db      	ldr	r3, [r3, #28]
 800c5bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c5c0:	5cd3      	ldrb	r3, [r2, r3]
 800c5c2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c5c6:	40d8      	lsrs	r0, r3
 800c5c8:	bd08      	pop	{r3, pc}
 800c5ca:	bf00      	nop
 800c5cc:	58024400 	.word	0x58024400
 800c5d0:	08028f3c 	.word	0x08028f3c

0800c5d4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c5d4:	233f      	movs	r3, #63	@ 0x3f
 800c5d6:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c5d8:	4b11      	ldr	r3, [pc, #68]	@ (800c620 <HAL_RCC_GetClockConfig+0x4c>)
 800c5da:	691a      	ldr	r2, [r3, #16]
 800c5dc:	f002 0207 	and.w	r2, r2, #7
 800c5e0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800c5e2:	699a      	ldr	r2, [r3, #24]
 800c5e4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800c5e8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800c5ea:	699a      	ldr	r2, [r3, #24]
 800c5ec:	f002 020f 	and.w	r2, r2, #15
 800c5f0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800c5f2:	699a      	ldr	r2, [r3, #24]
 800c5f4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c5f8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800c5fa:	69da      	ldr	r2, [r3, #28]
 800c5fc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c600:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800c602:	69da      	ldr	r2, [r3, #28]
 800c604:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c608:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800c60a:	6a1b      	ldr	r3, [r3, #32]
 800c60c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c610:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c612:	4b04      	ldr	r3, [pc, #16]	@ (800c624 <HAL_RCC_GetClockConfig+0x50>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 030f 	and.w	r3, r3, #15
 800c61a:	600b      	str	r3, [r1, #0]
}
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	58024400 	.word	0x58024400
 800c624:	52002000 	.word	0x52002000

0800c628 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c62a:	4c3a      	ldr	r4, [pc, #232]	@ (800c714 <RCCEx_PLL2_Config+0xec>)
{
 800c62c:	4606      	mov	r6, r0
 800c62e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c630:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c632:	f003 0303 	and.w	r3, r3, #3
 800c636:	2b03      	cmp	r3, #3
 800c638:	d069      	beq.n	800c70e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c640:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c642:	f7fb f99f 	bl	8007984 <HAL_GetTick>
 800c646:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c648:	6823      	ldr	r3, [r4, #0]
 800c64a:	011a      	lsls	r2, r3, #4
 800c64c:	d44b      	bmi.n	800c6e6 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c64e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c650:	6832      	ldr	r2, [r6, #0]
 800c652:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c656:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800c65a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c65c:	68b3      	ldr	r3, [r6, #8]
 800c65e:	68f2      	ldr	r2, [r6, #12]
 800c660:	3b01      	subs	r3, #1
 800c662:	3a01      	subs	r2, #1
 800c664:	025b      	lsls	r3, r3, #9
 800c666:	0412      	lsls	r2, r2, #16
 800c668:	b29b      	uxth	r3, r3
 800c66a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c66e:	4313      	orrs	r3, r2
 800c670:	6872      	ldr	r2, [r6, #4]
 800c672:	3a01      	subs	r2, #1
 800c674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c678:	4313      	orrs	r3, r2
 800c67a:	6932      	ldr	r2, [r6, #16]
 800c67c:	3a01      	subs	r2, #1
 800c67e:	0612      	lsls	r2, r2, #24
 800c680:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c684:	4313      	orrs	r3, r2
 800c686:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c688:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c68a:	6972      	ldr	r2, [r6, #20]
 800c68c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c690:	4313      	orrs	r3, r2
 800c692:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c694:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c696:	69b2      	ldr	r2, [r6, #24]
 800c698:	f023 0320 	bic.w	r3, r3, #32
 800c69c:	4313      	orrs	r3, r2
 800c69e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c6a0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c6a2:	f023 0310 	bic.w	r3, r3, #16
 800c6a6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c6a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c6aa:	69f2      	ldr	r2, [r6, #28]
 800c6ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6b0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c6b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c6b8:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c6ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c6bc:	f043 0310 	orr.w	r3, r3, #16
 800c6c0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c6c2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800c6c4:	b9b5      	cbnz	r5, 800c6f4 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c6c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c6cc:	4c11      	ldr	r4, [pc, #68]	@ (800c714 <RCCEx_PLL2_Config+0xec>)
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c6d4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6d6:	f7fb f955 	bl	8007984 <HAL_GetTick>
 800c6da:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	011b      	lsls	r3, r3, #4
 800c6e0:	d50f      	bpl.n	800c702 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	e005      	b.n	800c6f2 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c6e6:	f7fb f94d 	bl	8007984 <HAL_GetTick>
 800c6ea:	1bc0      	subs	r0, r0, r7
 800c6ec:	2802      	cmp	r0, #2
 800c6ee:	d9ab      	bls.n	800c648 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800c6f0:	2003      	movs	r0, #3
}
 800c6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800c6f4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c6f6:	bf0c      	ite	eq
 800c6f8:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6fc:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800c700:	e7e3      	b.n	800c6ca <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c702:	f7fb f93f 	bl	8007984 <HAL_GetTick>
 800c706:	1b40      	subs	r0, r0, r5
 800c708:	2802      	cmp	r0, #2
 800c70a:	d9e7      	bls.n	800c6dc <RCCEx_PLL2_Config+0xb4>
 800c70c:	e7f0      	b.n	800c6f0 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800c70e:	2001      	movs	r0, #1
 800c710:	e7ef      	b.n	800c6f2 <RCCEx_PLL2_Config+0xca>
 800c712:	bf00      	nop
 800c714:	58024400 	.word	0x58024400

0800c718 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c71a:	4c3a      	ldr	r4, [pc, #232]	@ (800c804 <RCCEx_PLL3_Config+0xec>)
{
 800c71c:	4606      	mov	r6, r0
 800c71e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c720:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c722:	f003 0303 	and.w	r3, r3, #3
 800c726:	2b03      	cmp	r3, #3
 800c728:	d069      	beq.n	800c7fe <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c730:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c732:	f7fb f927 	bl	8007984 <HAL_GetTick>
 800c736:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	009a      	lsls	r2, r3, #2
 800c73c:	d44b      	bmi.n	800c7d6 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c73e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c740:	6832      	ldr	r2, [r6, #0]
 800c742:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800c746:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800c74a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c74c:	68b3      	ldr	r3, [r6, #8]
 800c74e:	68f2      	ldr	r2, [r6, #12]
 800c750:	3b01      	subs	r3, #1
 800c752:	3a01      	subs	r2, #1
 800c754:	025b      	lsls	r3, r3, #9
 800c756:	0412      	lsls	r2, r2, #16
 800c758:	b29b      	uxth	r3, r3
 800c75a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c75e:	4313      	orrs	r3, r2
 800c760:	6872      	ldr	r2, [r6, #4]
 800c762:	3a01      	subs	r2, #1
 800c764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c768:	4313      	orrs	r3, r2
 800c76a:	6932      	ldr	r2, [r6, #16]
 800c76c:	3a01      	subs	r2, #1
 800c76e:	0612      	lsls	r2, r2, #24
 800c770:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c774:	4313      	orrs	r3, r2
 800c776:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c778:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c77a:	6972      	ldr	r2, [r6, #20]
 800c77c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c780:	4313      	orrs	r3, r2
 800c782:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c784:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c786:	69b2      	ldr	r2, [r6, #24]
 800c788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c78c:	4313      	orrs	r3, r2
 800c78e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c790:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c792:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c796:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c798:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c79a:	69f2      	ldr	r2, [r6, #28]
 800c79c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c7a0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c7a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c7a8:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c7aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c7ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c7b0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c7b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800c7b4:	b9b5      	cbnz	r5, 800c7e4 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c7b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c7ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c7bc:	4c11      	ldr	r4, [pc, #68]	@ (800c804 <RCCEx_PLL3_Config+0xec>)
 800c7be:	6823      	ldr	r3, [r4, #0]
 800c7c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c7c4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7c6:	f7fb f8dd 	bl	8007984 <HAL_GetTick>
 800c7ca:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	d50f      	bpl.n	800c7f2 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	e005      	b.n	800c7e2 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c7d6:	f7fb f8d5 	bl	8007984 <HAL_GetTick>
 800c7da:	1bc0      	subs	r0, r0, r7
 800c7dc:	2802      	cmp	r0, #2
 800c7de:	d9ab      	bls.n	800c738 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800c7e0:	2003      	movs	r0, #3
}
 800c7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800c7e4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c7e6:	bf0c      	ite	eq
 800c7e8:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c7ec:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800c7f0:	e7e3      	b.n	800c7ba <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c7f2:	f7fb f8c7 	bl	8007984 <HAL_GetTick>
 800c7f6:	1b40      	subs	r0, r0, r5
 800c7f8:	2802      	cmp	r0, #2
 800c7fa:	d9e7      	bls.n	800c7cc <RCCEx_PLL3_Config+0xb4>
 800c7fc:	e7f0      	b.n	800c7e0 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800c7fe:	2001      	movs	r0, #1
 800c800:	e7ef      	b.n	800c7e2 <RCCEx_PLL3_Config+0xca>
 800c802:	bf00      	nop
 800c804:	58024400 	.word	0x58024400

0800c808 <HAL_RCCEx_PeriphCLKConfig>:
{
 800c808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c80c:	6803      	ldr	r3, [r0, #0]
{
 800c80e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c810:	011c      	lsls	r4, r3, #4
 800c812:	d51e      	bpl.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c814:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800c816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c81a:	d02a      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800c81c:	d80f      	bhi.n	800c83e <HAL_RCCEx_PeriphCLKConfig+0x36>
 800c81e:	b1d3      	cbz	r3, 800c856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800c820:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c824:	d01d      	beq.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800c826:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c828:	682b      	ldr	r3, [r5, #0]
 800c82a:	05d8      	lsls	r0, r3, #23
 800c82c:	d54f      	bpl.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c82e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800c830:	2b04      	cmp	r3, #4
 800c832:	d84b      	bhi.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800c834:	e8df f003 	tbb	[pc, r3]
 800c838:	27443d22 	.word	0x27443d22
 800c83c:	27          	.byte	0x27
 800c83d:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c83e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c842:	d1f0      	bne.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c844:	4a86      	ldr	r2, [pc, #536]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c846:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800c848:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c84a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c84e:	430b      	orrs	r3, r1
 800c850:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c852:	2600      	movs	r6, #0
 800c854:	e7e8      	b.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c856:	4a82      	ldr	r2, [pc, #520]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c858:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c85a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c85e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c860:	e7f0      	b.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c862:	2102      	movs	r1, #2
 800c864:	3008      	adds	r0, #8
 800c866:	f7ff fedf 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c86a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d1db      	bne.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800c870:	e7e8      	b.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c872:	2102      	movs	r1, #2
 800c874:	3028      	adds	r0, #40	@ 0x28
 800c876:	f7ff ff4f 	bl	800c718 <RCCEx_PLL3_Config>
 800c87a:	e7f6      	b.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c87c:	4a78      	ldr	r2, [pc, #480]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c87e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c884:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c886:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800c888:	bb1c      	cbnz	r4, 800c8d2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c88a:	4a75      	ldr	r2, [pc, #468]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c88c:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800c88e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c890:	f023 0307 	bic.w	r3, r3, #7
 800c894:	430b      	orrs	r3, r1
 800c896:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c898:	682b      	ldr	r3, [r5, #0]
 800c89a:	0599      	lsls	r1, r3, #22
 800c89c:	d528      	bpl.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800c89e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800c8a0:	2b80      	cmp	r3, #128	@ 0x80
 800c8a2:	d043      	beq.n	800c92c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800c8a4:	d817      	bhi.n	800c8d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800c8a6:	b3a3      	cbz	r3, 800c912 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800c8a8:	2b40      	cmp	r3, #64	@ 0x40
 800c8aa:	d038      	beq.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800c8ac:	2601      	movs	r6, #1
 800c8ae:	4634      	mov	r4, r6
 800c8b0:	e01e      	b.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	f105 0008 	add.w	r0, r5, #8
 800c8b8:	f7ff feb6 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8bc:	4604      	mov	r4, r0
        break;
 800c8be:	e7e3      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c8c6:	f7ff ff27 	bl	800c718 <RCCEx_PLL3_Config>
 800c8ca:	e7f7      	b.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c8cc:	2601      	movs	r6, #1
 800c8ce:	4634      	mov	r4, r6
 800c8d0:	e7e2      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c8d2:	4626      	mov	r6, r4
 800c8d4:	e7e0      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800c8d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800c8d8:	d002      	beq.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800c8da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8de:	d1e5      	bne.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800c8e0:	bb54      	cbnz	r4, 800c938 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c8e2:	4a5f      	ldr	r2, [pc, #380]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c8e4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c8e6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c8e8:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800c8ec:	430b      	orrs	r3, r1
 800c8ee:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	055a      	lsls	r2, r3, #21
 800c8f4:	d531      	bpl.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800c8f6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800c8fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c8fe:	d049      	beq.n	800c994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c900:	d81c      	bhi.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x134>
 800c902:	2b00      	cmp	r3, #0
 800c904:	d039      	beq.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800c906:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c90a:	d03c      	beq.n	800c986 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800c90c:	2601      	movs	r6, #1
 800c90e:	4634      	mov	r4, r6
 800c910:	e023      	b.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c912:	4a53      	ldr	r2, [pc, #332]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c914:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c91a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800c91c:	e7e0      	b.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c91e:	2100      	movs	r1, #0
 800c920:	f105 0008 	add.w	r0, r5, #8
 800c924:	f7ff fe80 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c928:	4604      	mov	r4, r0
        break;
 800c92a:	e7d9      	b.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c92c:	2100      	movs	r1, #0
 800c92e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c932:	f7ff fef1 	bl	800c718 <RCCEx_PLL3_Config>
 800c936:	e7f7      	b.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800c938:	4626      	mov	r6, r4
 800c93a:	e7d9      	b.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800c93c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c940:	d002      	beq.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800c942:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c946:	d1e1      	bne.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800c948:	bb54      	cbnz	r4, 800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c94a:	4a45      	ldr	r2, [pc, #276]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c94c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800c950:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c952:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800c956:	430b      	orrs	r3, r1
 800c958:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c95a:	682b      	ldr	r3, [r5, #0]
 800c95c:	051b      	lsls	r3, r3, #20
 800c95e:	d530      	bpl.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800c960:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800c964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c968:	d045      	beq.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c96a:	d81b      	bhi.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800c96c:	b3b3      	cbz	r3, 800c9dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800c96e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c972:	d039      	beq.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800c974:	2601      	movs	r6, #1
 800c976:	4634      	mov	r4, r6
 800c978:	e023      	b.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c97a:	4a39      	ldr	r2, [pc, #228]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c97c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c97e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c982:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800c984:	e7e0      	b.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c986:	2100      	movs	r1, #0
 800c988:	f105 0008 	add.w	r0, r5, #8
 800c98c:	f7ff fe4c 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c990:	4604      	mov	r4, r0
        break;
 800c992:	e7d9      	b.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c994:	2100      	movs	r1, #0
 800c996:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c99a:	f7ff febd 	bl	800c718 <RCCEx_PLL3_Config>
 800c99e:	e7f7      	b.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800c9a0:	4626      	mov	r6, r4
 800c9a2:	e7da      	b.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800c9a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c9a8:	d002      	beq.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c9aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c9ae:	d1e1      	bne.n	800c974 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800c9b0:	bb3c      	cbnz	r4, 800ca02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c9b2:	4a2b      	ldr	r2, [pc, #172]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c9b4:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800c9b8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c9ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800c9be:	430b      	orrs	r3, r1
 800c9c0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c9c2:	682b      	ldr	r3, [r5, #0]
 800c9c4:	019f      	lsls	r7, r3, #6
 800c9c6:	d528      	bpl.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800c9c8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800c9ca:	2b20      	cmp	r3, #32
 800c9cc:	d03e      	beq.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800c9ce:	d81a      	bhi.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800c9d0:	b1db      	cbz	r3, 800ca0a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c9d2:	2b10      	cmp	r3, #16
 800c9d4:	d034      	beq.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800c9d6:	2601      	movs	r6, #1
 800c9d8:	4634      	mov	r4, r6
 800c9da:	e01e      	b.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9dc:	4a20      	ldr	r2, [pc, #128]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c9de:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c9e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800c9e6:	e7e3      	b.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	f105 0008 	add.w	r0, r5, #8
 800c9ee:	f7ff fe1b 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9f2:	4604      	mov	r4, r0
        break;
 800c9f4:	e7dc      	b.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c9fc:	f7ff fe8c 	bl	800c718 <RCCEx_PLL3_Config>
 800ca00:	e7f7      	b.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ca02:	4626      	mov	r6, r4
 800ca04:	e7dd      	b.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800ca06:	2b30      	cmp	r3, #48	@ 0x30
 800ca08:	d1e5      	bne.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800ca0a:	bb34      	cbnz	r4, 800ca5a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ca0c:	4a14      	ldr	r2, [pc, #80]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ca0e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ca10:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ca12:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800ca16:	430b      	orrs	r3, r1
 800ca18:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ca1a:	682b      	ldr	r3, [r5, #0]
 800ca1c:	04d8      	lsls	r0, r3, #19
 800ca1e:	d530      	bpl.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800ca20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca26:	f000 8097 	beq.w	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800ca2a:	d81b      	bhi.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 8086 	beq.w	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800ca32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca36:	f000 8088 	beq.w	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ca3a:	2601      	movs	r6, #1
 800ca3c:	4634      	mov	r4, r6
 800ca3e:	e020      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca40:	4a07      	ldr	r2, [pc, #28]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ca42:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ca44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ca4a:	e7de      	b.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca4c:	2102      	movs	r1, #2
 800ca4e:	f105 0008 	add.w	r0, r5, #8
 800ca52:	f7ff fde9 	bl	800c628 <RCCEx_PLL2_Config>
 800ca56:	4604      	mov	r4, r0
        break;
 800ca58:	e7d7      	b.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ca5a:	4626      	mov	r6, r4
 800ca5c:	e7dd      	b.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800ca5e:	bf00      	nop
 800ca60:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800ca64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ca68:	d002      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800ca6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca6e:	d1e4      	bne.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800ca70:	2c00      	cmp	r4, #0
 800ca72:	d177      	bne.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ca74:	4a9e      	ldr	r2, [pc, #632]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ca76:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800ca78:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ca7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca7e:	430b      	orrs	r3, r1
 800ca80:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ca82:	682b      	ldr	r3, [r5, #0]
 800ca84:	0499      	lsls	r1, r3, #18
 800ca86:	d50c      	bpl.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800ca88:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800ca8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca8e:	f000 8083 	beq.w	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800ca92:	d869      	bhi.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d06f      	beq.n	800cb78 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800ca98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca9c:	d075      	beq.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ca9e:	2601      	movs	r6, #1
 800caa0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800caa2:	682b      	ldr	r3, [r5, #0]
 800caa4:	045a      	lsls	r2, r3, #17
 800caa6:	d50e      	bpl.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800caa8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800caac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cab0:	f000 8093 	beq.w	800cbda <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800cab4:	d878      	bhi.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d07e      	beq.n	800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800caba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cabe:	f000 8085 	beq.w	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800cac2:	2601      	movs	r6, #1
 800cac4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800cac6:	682b      	ldr	r3, [r5, #0]
 800cac8:	015b      	lsls	r3, r3, #5
 800caca:	d515      	bpl.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800cacc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800cace:	b14b      	cbz	r3, 800cae4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800cad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cad4:	f040 8089 	bne.w	800cbea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cad8:	2101      	movs	r1, #1
 800cada:	f105 0008 	add.w	r0, r5, #8
 800cade:	f7ff fda3 	bl	800c628 <RCCEx_PLL2_Config>
 800cae2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800cae4:	2c00      	cmp	r4, #0
 800cae6:	f040 8083 	bne.w	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800caea:	4a81      	ldr	r2, [pc, #516]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800caec:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800caee:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800caf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800caf4:	430b      	orrs	r3, r1
 800caf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	041f      	lsls	r7, r3, #16
 800cafc:	d511      	bpl.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800cafe:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800cb00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb04:	d076      	beq.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800cb06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb0a:	d079      	beq.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d17e      	bne.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800cb10:	2c00      	cmp	r4, #0
 800cb12:	d17f      	bne.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cb14:	4a76      	ldr	r2, [pc, #472]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cb16:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800cb18:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800cb1a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800cb1e:	430b      	orrs	r3, r1
 800cb20:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cb22:	682b      	ldr	r3, [r5, #0]
 800cb24:	01d8      	lsls	r0, r3, #7
 800cb26:	f140 8085 	bpl.w	800cc34 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800cb2a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	f200 80e5 	bhi.w	800ccfc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800cb32:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cb36:	0076      	.short	0x0076
 800cb38:	00d50071 	.word	0x00d50071
 800cb3c:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb3e:	4a6c      	ldr	r2, [pc, #432]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cb40:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cb42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb46:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800cb48:	e792      	b.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	f105 0008 	add.w	r0, r5, #8
 800cb50:	f7ff fd6a 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb54:	4604      	mov	r4, r0
        break;
 800cb56:	e78b      	b.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb58:	2100      	movs	r1, #0
 800cb5a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cb5e:	f7ff fddb 	bl	800c718 <RCCEx_PLL3_Config>
 800cb62:	e7f7      	b.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800cb64:	4626      	mov	r6, r4
 800cb66:	e78c      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800cb68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cb6c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800cb70:	d002      	beq.n	800cb78 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800cb72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cb76:	d192      	bne.n	800ca9e <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800cb78:	b9a4      	cbnz	r4, 800cba4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cb7a:	4a5d      	ldr	r2, [pc, #372]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cb7c:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800cb7e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800cb80:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800cb84:	430b      	orrs	r3, r1
 800cb86:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb88:	e78b      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	f105 0008 	add.w	r0, r5, #8
 800cb90:	f7ff fd4a 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb94:	4604      	mov	r4, r0
        break;
 800cb96:	e7ef      	b.n	800cb78 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb98:	2101      	movs	r1, #1
 800cb9a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cb9e:	f7ff fdbb 	bl	800c718 <RCCEx_PLL3_Config>
 800cba2:	e7f7      	b.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800cba4:	4626      	mov	r6, r4
 800cba6:	e77c      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800cba8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800cbac:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800cbb0:	d002      	beq.n	800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800cbb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cbb6:	d184      	bne.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800cbb8:	b9ac      	cbnz	r4, 800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cbba:	4a4d      	ldr	r2, [pc, #308]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cbbc:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800cbc0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cbc2:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800cbc6:	430b      	orrs	r3, r1
 800cbc8:	6593      	str	r3, [r2, #88]	@ 0x58
 800cbca:	e77c      	b.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cbcc:	2101      	movs	r1, #1
 800cbce:	f105 0008 	add.w	r0, r5, #8
 800cbd2:	f7ff fd29 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cbd6:	4604      	mov	r4, r0
        break;
 800cbd8:	e7ee      	b.n	800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cbda:	2101      	movs	r1, #1
 800cbdc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cbe0:	f7ff fd9a 	bl	800c718 <RCCEx_PLL3_Config>
 800cbe4:	e7f7      	b.n	800cbd6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800cbe6:	4626      	mov	r6, r4
 800cbe8:	e76d      	b.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800cbea:	2601      	movs	r6, #1
 800cbec:	4634      	mov	r4, r6
 800cbee:	e783      	b.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800cbf0:	4626      	mov	r6, r4
 800cbf2:	e781      	b.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbf4:	4a3e      	ldr	r2, [pc, #248]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cbf6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cbf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cbfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800cbfe:	e787      	b.n	800cb10 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc00:	2101      	movs	r1, #1
 800cc02:	f105 0008 	add.w	r0, r5, #8
 800cc06:	f7ff fd0f 	bl	800c628 <RCCEx_PLL2_Config>
 800cc0a:	4604      	mov	r4, r0
        break;
 800cc0c:	e780      	b.n	800cb10 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800cc0e:	2601      	movs	r6, #1
 800cc10:	4634      	mov	r4, r6
 800cc12:	e786      	b.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800cc14:	4626      	mov	r6, r4
 800cc16:	e784      	b.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc18:	4a35      	ldr	r2, [pc, #212]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cc1a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cc1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800cc22:	2c00      	cmp	r4, #0
 800cc24:	d16d      	bne.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cc26:	4a32      	ldr	r2, [pc, #200]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cc28:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800cc2a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800cc2c:	f023 0303 	bic.w	r3, r3, #3
 800cc30:	430b      	orrs	r3, r1
 800cc32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cc34:	682b      	ldr	r3, [r5, #0]
 800cc36:	0259      	lsls	r1, r3, #9
 800cc38:	d539      	bpl.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cc3a:	4f2e      	ldr	r7, [pc, #184]	@ (800ccf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc42:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800cc44:	f7fa fe9e 	bl	8007984 <HAL_GetTick>
 800cc48:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	05da      	lsls	r2, r3, #23
 800cc4e:	d55a      	bpl.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800cc50:	2c00      	cmp	r4, #0
 800cc52:	d176      	bne.n	800cd42 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cc54:	4b26      	ldr	r3, [pc, #152]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cc56:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800cc5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cc5c:	4042      	eors	r2, r0
 800cc5e:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800cc62:	d00b      	beq.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cc64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800cc66:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cc68:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800cc6c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800cc70:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cc72:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800cc74:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800cc78:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800cc7a:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cc7c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800cc80:	d04a      	beq.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cc82:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800cc86:	491a      	ldr	r1, [pc, #104]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cc88:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800cc8c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800cc90:	d153      	bne.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0x532>
 800cc92:	6908      	ldr	r0, [r1, #16]
 800cc94:	4a18      	ldr	r2, [pc, #96]	@ (800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800cc96:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800cc9a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800cc9e:	4302      	orrs	r2, r0
 800cca0:	610a      	str	r2, [r1, #16]
 800cca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cca6:	4a12      	ldr	r2, [pc, #72]	@ (800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cca8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800ccaa:	430b      	orrs	r3, r1
 800ccac:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ccae:	682b      	ldr	r3, [r5, #0]
 800ccb0:	07d8      	lsls	r0, r3, #31
 800ccb2:	d50a      	bpl.n	800ccca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800ccb4:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800ccb8:	2b10      	cmp	r3, #16
 800ccba:	d05b      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800ccbc:	d843      	bhi.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d047      	beq.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800ccc2:	2b08      	cmp	r3, #8
 800ccc4:	d04f      	beq.n	800cd66 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800ccc6:	2601      	movs	r6, #1
 800ccc8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ccca:	682b      	ldr	r3, [r5, #0]
 800cccc:	0799      	lsls	r1, r3, #30
 800ccce:	d567      	bpl.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ccd0:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800ccd2:	2b05      	cmp	r3, #5
 800ccd4:	d87a      	bhi.n	800cdcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800ccd6:	e8df f003 	tbb	[pc, r3]
 800ccda:	555b      	.short	0x555b
 800ccdc:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cce0:	2102      	movs	r1, #2
 800cce2:	f105 0008 	add.w	r0, r5, #8
 800cce6:	f7ff fc9f 	bl	800c628 <RCCEx_PLL2_Config>
 800ccea:	4604      	mov	r4, r0
        break;
 800ccec:	e799      	b.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ccee:	bf00      	nop
 800ccf0:	58024400 	.word	0x58024400
 800ccf4:	58024800 	.word	0x58024800
 800ccf8:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800ccfc:	2601      	movs	r6, #1
 800ccfe:	4634      	mov	r4, r6
 800cd00:	e798      	b.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800cd02:	4626      	mov	r6, r4
 800cd04:	e796      	b.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd06:	f7fa fe3d 	bl	8007984 <HAL_GetTick>
 800cd0a:	eba0 0008 	sub.w	r0, r0, r8
 800cd0e:	2864      	cmp	r0, #100	@ 0x64
 800cd10:	d99b      	bls.n	800cc4a <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800cd12:	2603      	movs	r6, #3
 800cd14:	4634      	mov	r4, r6
 800cd16:	e7ca      	b.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800cd18:	f7fa fe34 	bl	8007984 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd1c:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800cd20:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd22:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd26:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800cd2a:	079b      	lsls	r3, r3, #30
 800cd2c:	d4a9      	bmi.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd2e:	f7fa fe29 	bl	8007984 <HAL_GetTick>
 800cd32:	1bc0      	subs	r0, r0, r7
 800cd34:	4548      	cmp	r0, r9
 800cd36:	d9f6      	bls.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800cd38:	e7eb      	b.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cd3a:	690a      	ldr	r2, [r1, #16]
 800cd3c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800cd40:	e7ae      	b.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800cd42:	4626      	mov	r6, r4
 800cd44:	e7b3      	b.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800cd46:	f023 0208 	bic.w	r2, r3, #8
 800cd4a:	2a20      	cmp	r2, #32
 800cd4c:	d001      	beq.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800cd4e:	2b18      	cmp	r3, #24
 800cd50:	d1b9      	bne.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800cd52:	b9ac      	cbnz	r4, 800cd80 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cd54:	4a20      	ldr	r2, [pc, #128]	@ (800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800cd56:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800cd5a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800cd5c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800cd60:	430b      	orrs	r3, r1
 800cd62:	6553      	str	r3, [r2, #84]	@ 0x54
 800cd64:	e7b1      	b.n	800ccca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd66:	2101      	movs	r1, #1
 800cd68:	f105 0008 	add.w	r0, r5, #8
 800cd6c:	f7ff fc5c 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd70:	4604      	mov	r4, r0
        break;
 800cd72:	e7ee      	b.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd74:	2101      	movs	r1, #1
 800cd76:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cd7a:	f7ff fccd 	bl	800c718 <RCCEx_PLL3_Config>
 800cd7e:	e7f7      	b.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800cd80:	4626      	mov	r6, r4
 800cd82:	e7a2      	b.n	800ccca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd84:	2101      	movs	r1, #1
 800cd86:	f105 0008 	add.w	r0, r5, #8
 800cd8a:	f7ff fc4d 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd8e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800cd90:	b9fc      	cbnz	r4, 800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cd92:	4a11      	ldr	r2, [pc, #68]	@ (800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800cd94:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800cd96:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800cd98:	f023 0307 	bic.w	r3, r3, #7
 800cd9c:	430b      	orrs	r3, r1
 800cd9e:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	075a      	lsls	r2, r3, #29
 800cda4:	d52b      	bpl.n	800cdfe <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cda6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800cdaa:	2b05      	cmp	r3, #5
 800cdac:	f200 816e 	bhi.w	800d08c <HAL_RCCEx_PeriphCLKConfig+0x884>
 800cdb0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cdb4:	0014001a 	.word	0x0014001a
 800cdb8:	001a0166 	.word	0x001a0166
 800cdbc:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cdc6:	f7ff fca7 	bl	800c718 <RCCEx_PLL3_Config>
 800cdca:	e7e0      	b.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cdcc:	2601      	movs	r6, #1
 800cdce:	4634      	mov	r4, r6
 800cdd0:	e7e6      	b.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800cdd2:	4626      	mov	r6, r4
 800cdd4:	e7e4      	b.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800cdd6:	bf00      	nop
 800cdd8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cddc:	2101      	movs	r1, #1
 800cdde:	f105 0008 	add.w	r0, r5, #8
 800cde2:	f7ff fc21 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cde6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800cde8:	2c00      	cmp	r4, #0
 800cdea:	f040 8152 	bne.w	800d092 <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cdee:	4aaa      	ldr	r2, [pc, #680]	@ (800d098 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cdf0:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800cdf4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cdf6:	f023 0307 	bic.w	r3, r3, #7
 800cdfa:	430b      	orrs	r3, r1
 800cdfc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cdfe:	682b      	ldr	r3, [r5, #0]
 800ce00:	069b      	lsls	r3, r3, #26
 800ce02:	d510      	bpl.n	800ce26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ce04:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800ce08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce0c:	f000 8160 	beq.w	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800ce10:	f200 8144 	bhi.w	800d09c <HAL_RCCEx_PeriphCLKConfig+0x894>
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f000 814a 	beq.w	800d0ae <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800ce1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce1e:	f000 8150 	beq.w	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800ce22:	2601      	movs	r6, #1
 800ce24:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ce26:	682b      	ldr	r3, [r5, #0]
 800ce28:	065f      	lsls	r7, r3, #25
 800ce2a:	d510      	bpl.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ce2c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800ce30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce34:	f000 816e 	beq.w	800d114 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800ce38:	f200 8152 	bhi.w	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 8158 	beq.w	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800ce42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce46:	f000 815e 	beq.w	800d106 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800ce4a:	2601      	movs	r6, #1
 800ce4c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ce4e:	682b      	ldr	r3, [r5, #0]
 800ce50:	0618      	lsls	r0, r3, #24
 800ce52:	d510      	bpl.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ce54:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800ce58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce5c:	f000 817c 	beq.w	800d158 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800ce60:	f200 8160 	bhi.w	800d124 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f000 8166 	beq.w	800d136 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800ce6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce6e:	f000 816c 	beq.w	800d14a <HAL_RCCEx_PeriphCLKConfig+0x942>
 800ce72:	2601      	movs	r6, #1
 800ce74:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ce76:	682b      	ldr	r3, [r5, #0]
 800ce78:	0719      	lsls	r1, r3, #28
 800ce7a:	d514      	bpl.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ce7c:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800ce80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce84:	d107      	bne.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ce86:	2102      	movs	r1, #2
 800ce88:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ce8c:	f7ff fc44 	bl	800c718 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800ce90:	2800      	cmp	r0, #0
 800ce92:	bf18      	it	ne
 800ce94:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ce96:	4a80      	ldr	r2, [pc, #512]	@ (800d098 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ce98:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800ce9c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ce9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800cea2:	430b      	orrs	r3, r1
 800cea4:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cea6:	682b      	ldr	r3, [r5, #0]
 800cea8:	06da      	lsls	r2, r3, #27
 800ceaa:	d514      	bpl.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ceac:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800ceb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ceb4:	d107      	bne.n	800cec6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ceb6:	2102      	movs	r1, #2
 800ceb8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cebc:	f7ff fc2c 	bl	800c718 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800cec0:	2800      	cmp	r0, #0
 800cec2:	bf18      	it	ne
 800cec4:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cec6:	4a74      	ldr	r2, [pc, #464]	@ (800d098 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cec8:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800cecc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ced2:	430b      	orrs	r3, r1
 800ced4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ced6:	682b      	ldr	r3, [r5, #0]
 800ced8:	031b      	lsls	r3, r3, #12
 800ceda:	d51b      	bpl.n	800cf14 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800cedc:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800cee0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800cee4:	f000 8140 	beq.w	800d168 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cee8:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800ceec:	d007      	beq.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800ceee:	2900      	cmp	r1, #0
 800cef0:	f040 8140 	bne.w	800d174 <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cef4:	f105 0008 	add.w	r0, r5, #8
 800cef8:	f7ff fb96 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cefc:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800cefe:	2c00      	cmp	r4, #0
 800cf00:	f040 813b 	bne.w	800d17a <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cf04:	4a64      	ldr	r2, [pc, #400]	@ (800d098 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cf06:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800cf0a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cf0c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800cf10:	430b      	orrs	r3, r1
 800cf12:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	035f      	lsls	r7, r3, #13
 800cf18:	d50f      	bpl.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800cf1a:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800cf1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cf22:	f000 813b 	beq.w	800d19c <HAL_RCCEx_PeriphCLKConfig+0x994>
 800cf26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cf2a:	f000 812d 	beq.w	800d188 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800cf2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf32:	f000 8124 	beq.w	800d17e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800cf36:	2601      	movs	r6, #1
 800cf38:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cf3a:	682b      	ldr	r3, [r5, #0]
 800cf3c:	03d8      	lsls	r0, r3, #15
 800cf3e:	d509      	bpl.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800cf40:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 8133 	beq.w	800d1ae <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800cf48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf4c:	f000 813d 	beq.w	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800cf50:	2601      	movs	r6, #1
 800cf52:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cf54:	682b      	ldr	r3, [r5, #0]
 800cf56:	0099      	lsls	r1, r3, #2
 800cf58:	d507      	bpl.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cf5a:	2102      	movs	r1, #2
 800cf5c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cf60:	f7ff fbda 	bl	800c718 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800cf64:	2800      	cmp	r0, #0
 800cf66:	bf18      	it	ne
 800cf68:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cf6a:	e9d5 3100 	ldrd	r3, r1, [r5]
 800cf6e:	039a      	lsls	r2, r3, #14
 800cf70:	f140 8143 	bpl.w	800d1fa <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800cf74:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800cf78:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800cf7c:	f000 813f 	beq.w	800d1fe <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800cf80:	f200 812c 	bhi.w	800d1dc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	f000 812f 	beq.w	800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800cf8a:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cf8c:	02df      	lsls	r7, r3, #11
 800cf8e:	d506      	bpl.n	800cf9e <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cf90:	4841      	ldr	r0, [pc, #260]	@ (800d098 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cf92:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800cf94:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800cf96:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800cf9a:	4332      	orrs	r2, r6
 800cf9c:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cf9e:	00de      	lsls	r6, r3, #3
 800cfa0:	d507      	bpl.n	800cfb2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cfa2:	483d      	ldr	r0, [pc, #244]	@ (800d098 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cfa4:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800cfa8:	6902      	ldr	r2, [r0, #16]
 800cfaa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cfae:	4332      	orrs	r2, r6
 800cfb0:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cfb2:	0298      	lsls	r0, r3, #10
 800cfb4:	d506      	bpl.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cfb6:	4838      	ldr	r0, [pc, #224]	@ (800d098 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cfb8:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800cfba:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800cfbc:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800cfc0:	4332      	orrs	r2, r6
 800cfc2:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cfc4:	005a      	lsls	r2, r3, #1
 800cfc6:	d509      	bpl.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cfc8:	4a33      	ldr	r2, [pc, #204]	@ (800d098 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cfca:	6910      	ldr	r0, [r2, #16]
 800cfcc:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800cfd0:	6110      	str	r0, [r2, #16]
 800cfd2:	6910      	ldr	r0, [r2, #16]
 800cfd4:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800cfd8:	4330      	orrs	r0, r6
 800cfda:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	da06      	bge.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cfe0:	482d      	ldr	r0, [pc, #180]	@ (800d098 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cfe2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800cfe4:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800cfe6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800cfea:	4332      	orrs	r2, r6
 800cfec:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cfee:	021f      	lsls	r7, r3, #8
 800cff0:	d507      	bpl.n	800d002 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cff2:	4a29      	ldr	r2, [pc, #164]	@ (800d098 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cff4:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800cff8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800cffa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800cffe:	4303      	orrs	r3, r0
 800d000:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d002:	07ce      	lsls	r6, r1, #31
 800d004:	d506      	bpl.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d006:	2100      	movs	r1, #0
 800d008:	f105 0008 	add.w	r0, r5, #8
 800d00c:	f7ff fb0c 	bl	800c628 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d010:	4607      	mov	r7, r0
 800d012:	b900      	cbnz	r0, 800d016 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800d014:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d016:	686b      	ldr	r3, [r5, #4]
 800d018:	079c      	lsls	r4, r3, #30
 800d01a:	d506      	bpl.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d01c:	2101      	movs	r1, #1
 800d01e:	f105 0008 	add.w	r0, r5, #8
 800d022:	f7ff fb01 	bl	800c628 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d026:	4606      	mov	r6, r0
 800d028:	b900      	cbnz	r0, 800d02c <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800d02a:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d02c:	686b      	ldr	r3, [r5, #4]
 800d02e:	0758      	lsls	r0, r3, #29
 800d030:	d506      	bpl.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d032:	2102      	movs	r1, #2
 800d034:	f105 0008 	add.w	r0, r5, #8
 800d038:	f7ff faf6 	bl	800c628 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d03c:	4604      	mov	r4, r0
 800d03e:	b900      	cbnz	r0, 800d042 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800d040:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d042:	686b      	ldr	r3, [r5, #4]
 800d044:	0719      	lsls	r1, r3, #28
 800d046:	d506      	bpl.n	800d056 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d048:	2100      	movs	r1, #0
 800d04a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d04e:	f7ff fb63 	bl	800c718 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d052:	4606      	mov	r6, r0
 800d054:	b900      	cbnz	r0, 800d058 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800d056:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d058:	686b      	ldr	r3, [r5, #4]
 800d05a:	06da      	lsls	r2, r3, #27
 800d05c:	d506      	bpl.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d05e:	2101      	movs	r1, #1
 800d060:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d064:	f7ff fb58 	bl	800c718 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d068:	4604      	mov	r4, r0
 800d06a:	b900      	cbnz	r0, 800d06e <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800d06c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d06e:	686b      	ldr	r3, [r5, #4]
 800d070:	069b      	lsls	r3, r3, #26
 800d072:	f100 80ca 	bmi.w	800d20a <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800d076:	1e20      	subs	r0, r4, #0
 800d078:	bf18      	it	ne
 800d07a:	2001      	movne	r0, #1
}
 800d07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d080:	2101      	movs	r1, #1
 800d082:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d086:	f7ff fb47 	bl	800c718 <RCCEx_PLL3_Config>
 800d08a:	e6ac      	b.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d08c:	2601      	movs	r6, #1
 800d08e:	4634      	mov	r4, r6
 800d090:	e6b5      	b.n	800cdfe <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800d092:	4626      	mov	r6, r4
 800d094:	e6b3      	b.n	800cdfe <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800d096:	bf00      	nop
 800d098:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d09c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d0a0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800d0a4:	d003      	beq.n	800d0ae <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800d0a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d0aa:	f47f aeba 	bne.w	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800d0ae:	b9ac      	cbnz	r4, 800d0dc <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d0b0:	4a5b      	ldr	r2, [pc, #364]	@ (800d220 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d0b2:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800d0b6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d0b8:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800d0bc:	430b      	orrs	r3, r1
 800d0be:	6553      	str	r3, [r2, #84]	@ 0x54
 800d0c0:	e6b1      	b.n	800ce26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	f105 0008 	add.w	r0, r5, #8
 800d0c8:	f7ff faae 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d0cc:	4604      	mov	r4, r0
        break;
 800d0ce:	e7ee      	b.n	800d0ae <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d0d0:	2102      	movs	r1, #2
 800d0d2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d0d6:	f7ff fb1f 	bl	800c718 <RCCEx_PLL3_Config>
 800d0da:	e7f7      	b.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800d0dc:	4626      	mov	r6, r4
 800d0de:	e6a2      	b.n	800ce26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d0e0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d0e4:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800d0e8:	d003      	beq.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800d0ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d0ee:	f47f aeac 	bne.w	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800d0f2:	b9ac      	cbnz	r4, 800d120 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d0f4:	4a4a      	ldr	r2, [pc, #296]	@ (800d220 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d0f6:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800d0fa:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d0fc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800d100:	430b      	orrs	r3, r1
 800d102:	6593      	str	r3, [r2, #88]	@ 0x58
 800d104:	e6a3      	b.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d106:	2100      	movs	r1, #0
 800d108:	f105 0008 	add.w	r0, r5, #8
 800d10c:	f7ff fa8c 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d110:	4604      	mov	r4, r0
        break;
 800d112:	e7ee      	b.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d114:	2102      	movs	r1, #2
 800d116:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d11a:	f7ff fafd 	bl	800c718 <RCCEx_PLL3_Config>
 800d11e:	e7f7      	b.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800d120:	4626      	mov	r6, r4
 800d122:	e694      	b.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d124:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d128:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800d12c:	d003      	beq.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800d12e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d132:	f47f ae9e 	bne.w	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800d136:	b9ac      	cbnz	r4, 800d164 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d138:	4a39      	ldr	r2, [pc, #228]	@ (800d220 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d13a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800d13e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d140:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800d144:	430b      	orrs	r3, r1
 800d146:	6593      	str	r3, [r2, #88]	@ 0x58
 800d148:	e695      	b.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d14a:	2100      	movs	r1, #0
 800d14c:	f105 0008 	add.w	r0, r5, #8
 800d150:	f7ff fa6a 	bl	800c628 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d154:	4604      	mov	r4, r0
        break;
 800d156:	e7ee      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d158:	2102      	movs	r1, #2
 800d15a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d15e:	f7ff fadb 	bl	800c718 <RCCEx_PLL3_Config>
 800d162:	e7f7      	b.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800d164:	4626      	mov	r6, r4
 800d166:	e686      	b.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d168:	2102      	movs	r1, #2
 800d16a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d16e:	f7ff fad3 	bl	800c718 <RCCEx_PLL3_Config>
 800d172:	e6c3      	b.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800d174:	2601      	movs	r6, #1
 800d176:	4634      	mov	r4, r6
 800d178:	e6cc      	b.n	800cf14 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800d17a:	4626      	mov	r6, r4
 800d17c:	e6ca      	b.n	800cf14 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d17e:	4a28      	ldr	r2, [pc, #160]	@ (800d220 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d180:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d186:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d188:	b97c      	cbnz	r4, 800d1aa <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d18a:	4a25      	ldr	r2, [pc, #148]	@ (800d220 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d18c:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800d190:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d192:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800d196:	430b      	orrs	r3, r1
 800d198:	6553      	str	r3, [r2, #84]	@ 0x54
 800d19a:	e6ce      	b.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d19c:	2101      	movs	r1, #1
 800d19e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d1a2:	f7ff fab9 	bl	800c718 <RCCEx_PLL3_Config>
 800d1a6:	4604      	mov	r4, r0
        break;
 800d1a8:	e7ee      	b.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800d1aa:	4626      	mov	r6, r4
 800d1ac:	e6c5      	b.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1ae:	4a1c      	ldr	r2, [pc, #112]	@ (800d220 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d1b0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d1b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d1b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d1b8:	b974      	cbnz	r4, 800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d1ba:	4a19      	ldr	r2, [pc, #100]	@ (800d220 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d1bc:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800d1be:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800d1c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d1c4:	430b      	orrs	r3, r1
 800d1c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d1c8:	e6c4      	b.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d1ca:	2102      	movs	r1, #2
 800d1cc:	f105 0008 	add.w	r0, r5, #8
 800d1d0:	f7ff fa2a 	bl	800c628 <RCCEx_PLL2_Config>
 800d1d4:	4604      	mov	r4, r0
        break;
 800d1d6:	e7ef      	b.n	800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800d1d8:	4626      	mov	r6, r4
 800d1da:	e6bb      	b.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800d1dc:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800d1e0:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800d1e4:	f47f aed1 	bne.w	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800d1e8:	2c00      	cmp	r4, #0
 800d1ea:	f47f aecf 	bne.w	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d1ee:	4c0c      	ldr	r4, [pc, #48]	@ (800d220 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d1f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800d1f6:	4302      	orrs	r2, r0
 800d1f8:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800d1fa:	4634      	mov	r4, r6
 800d1fc:	e6c6      	b.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1fe:	4f08      	ldr	r7, [pc, #32]	@ (800d220 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d202:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d206:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800d208:	e7ee      	b.n	800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d20a:	2102      	movs	r1, #2
 800d20c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d210:	f7ff fa82 	bl	800c718 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d214:	2800      	cmp	r0, #0
 800d216:	f43f af2e 	beq.w	800d076 <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800d21a:	2001      	movs	r0, #1
 800d21c:	e72e      	b.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0x874>
 800d21e:	bf00      	nop
 800d220:	58024400 	.word	0x58024400

0800d224 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800d224:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d226:	f7ff f98f 	bl	800c548 <HAL_RCC_GetHCLKFreq>
 800d22a:	4b05      	ldr	r3, [pc, #20]	@ (800d240 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800d22c:	4a05      	ldr	r2, [pc, #20]	@ (800d244 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800d22e:	6a1b      	ldr	r3, [r3, #32]
 800d230:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d234:	5cd3      	ldrb	r3, [r2, r3]
 800d236:	f003 031f 	and.w	r3, r3, #31
}
 800d23a:	40d8      	lsrs	r0, r3
 800d23c:	bd08      	pop	{r3, pc}
 800d23e:	bf00      	nop
 800d240:	58024400 	.word	0x58024400
 800d244:	08028f3c 	.word	0x08028f3c

0800d248 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d248:	494f      	ldr	r1, [pc, #316]	@ (800d388 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800d24a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d24c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d24e:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d250:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800d252:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d256:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d25a:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800d25c:	f000 8090 	beq.w	800d380 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d260:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d264:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d268:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d26c:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d274:	4353      	muls	r3, r2
    switch (pllsource)
 800d276:	2c01      	cmp	r4, #1
 800d278:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d27c:	ee06 3a90 	vmov	s13, r3
 800d280:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800d284:	d06e      	beq.n	800d364 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800d286:	2c02      	cmp	r4, #2
 800d288:	d05e      	beq.n	800d348 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800d28a:	2c00      	cmp	r4, #0
 800d28c:	d16a      	bne.n	800d364 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d28e:	680b      	ldr	r3, [r1, #0]
 800d290:	069b      	lsls	r3, r3, #26
 800d292:	d547      	bpl.n	800d324 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d294:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d296:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d298:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800d29c:	4a3b      	ldr	r2, [pc, #236]	@ (800d38c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2a2:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2a4:	ee07 2a90 	vmov	s15, r2
 800d2a8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800d2ac:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800d2b0:	ee07 3a10 	vmov	s14, r3
 800d2b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d2b8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d2bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d2c0:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d2c4:	4a30      	ldr	r2, [pc, #192]	@ (800d388 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800d2c6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800d2c8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d2cc:	ee07 3a10 	vmov	s14, r3
 800d2d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d2d4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d2d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d2dc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800d2e0:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d2e4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800d2e6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d2ea:	ee07 3a10 	vmov	s14, r3
 800d2ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d2f2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d2f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d2fa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800d2fe:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d302:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800d304:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d308:	ee06 3a90 	vmov	s13, r3
 800d30c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d310:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d314:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d318:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800d31c:	ee17 3a90 	vmov	r3, s15
 800d320:	6083      	str	r3, [r0, #8]
}
 800d322:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d324:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800d326:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800d390 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800d32a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d32e:	ee07 3a90 	vmov	s15, r3
 800d332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d33a:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d33e:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800d342:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800d346:	e7bd      	b.n	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d348:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800d34a:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800d394 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800d34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d352:	ee07 3a90 	vmov	s15, r3
 800d356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d35e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d362:	e7ec      	b.n	800d33e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d364:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800d366:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800d36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d36e:	ee07 3a90 	vmov	s15, r3
 800d372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d37a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d37e:	e7de      	b.n	800d33e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d380:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d384:	e7cc      	b.n	800d320 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800d386:	bf00      	nop
 800d388:	58024400 	.word	0x58024400
 800d38c:	03d09000 	.word	0x03d09000
 800d390:	4c742400 	.word	0x4c742400
 800d394:	4bbebc20 	.word	0x4bbebc20
 800d398:	4a742400 	.word	0x4a742400

0800d39c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d39c:	494f      	ldr	r1, [pc, #316]	@ (800d4dc <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800d39e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d3a0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d3a2:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d3a4:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800d3a6:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d3aa:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d3ae:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800d3b0:	f000 8090 	beq.w	800d4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3b4:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d3b8:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d3bc:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d3c0:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d3c8:	4353      	muls	r3, r2
    switch (pllsource)
 800d3ca:	2c01      	cmp	r4, #1
 800d3cc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3d0:	ee06 3a90 	vmov	s13, r3
 800d3d4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800d3d8:	d06e      	beq.n	800d4b8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800d3da:	2c02      	cmp	r4, #2
 800d3dc:	d05e      	beq.n	800d49c <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800d3de:	2c00      	cmp	r4, #0
 800d3e0:	d16a      	bne.n	800d4b8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3e2:	680b      	ldr	r3, [r1, #0]
 800d3e4:	069b      	lsls	r3, r3, #26
 800d3e6:	d547      	bpl.n	800d478 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3e8:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3ec:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800d3f0:	4a3b      	ldr	r2, [pc, #236]	@ (800d4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3f6:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3f8:	ee07 2a90 	vmov	s15, r2
 800d3fc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800d400:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800d404:	ee07 3a10 	vmov	s14, r3
 800d408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d40c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d410:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d414:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d418:	4a30      	ldr	r2, [pc, #192]	@ (800d4dc <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800d41a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800d41c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d420:	ee07 3a10 	vmov	s14, r3
 800d424:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d428:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d42c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d430:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800d434:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d438:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800d43a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d43e:	ee07 3a10 	vmov	s14, r3
 800d442:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d446:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d44a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d44e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800d452:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d456:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800d458:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d45c:	ee06 3a90 	vmov	s13, r3
 800d460:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d464:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d468:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d46c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800d470:	ee17 3a90 	vmov	r3, s15
 800d474:	6083      	str	r3, [r0, #8]
}
 800d476:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d478:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d47a:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800d4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800d47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d482:	ee07 3a90 	vmov	s15, r3
 800d486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d48a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d48e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d492:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800d496:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800d49a:	e7bd      	b.n	800d418 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d49c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d49e:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800d4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800d4a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4a6:	ee07 3a90 	vmov	s15, r3
 800d4aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4b2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d4b6:	e7ec      	b.n	800d492 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4ba:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800d4ec <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800d4be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c2:	ee07 3a90 	vmov	s15, r3
 800d4c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d4d2:	e7de      	b.n	800d492 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d4d4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d4d8:	e7cc      	b.n	800d474 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800d4da:	bf00      	nop
 800d4dc:	58024400 	.word	0x58024400
 800d4e0:	03d09000 	.word	0x03d09000
 800d4e4:	4c742400 	.word	0x4c742400
 800d4e8:	4bbebc20 	.word	0x4bbebc20
 800d4ec:	4a742400 	.word	0x4a742400

0800d4f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d4f0:	494f      	ldr	r1, [pc, #316]	@ (800d630 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800d4f2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d4f4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d4f6:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d4f8:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll1m != 0U)
 800d4fa:	f416 7f7c 	tst.w	r6, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d4fe:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d502:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  if (pll1m != 0U)
 800d504:	f000 8090 	beq.w	800d628 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d508:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d50c:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d510:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d514:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d518:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d51c:	4353      	muls	r3, r2
    switch (pllsource)
 800d51e:	2c01      	cmp	r4, #1
 800d520:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d524:	ee06 3a90 	vmov	s13, r3
 800d528:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800d52c:	d04e      	beq.n	800d5cc <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800d52e:	2c02      	cmp	r4, #2
 800d530:	d05e      	beq.n	800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 800d532:	2c00      	cmp	r4, #0
 800d534:	d16a      	bne.n	800d60c <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d536:	680b      	ldr	r3, [r1, #0]
 800d538:	069b      	lsls	r3, r3, #26
 800d53a:	d567      	bpl.n	800d60c <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d53c:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d53e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d540:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800d544:	4a3b      	ldr	r2, [pc, #236]	@ (800d634 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d546:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d54a:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d54c:	ee07 2a90 	vmov	s15, r2
 800d550:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800d554:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800d558:	ee07 3a10 	vmov	s14, r3
 800d55c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d560:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d564:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d568:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d56c:	4a30      	ldr	r2, [pc, #192]	@ (800d630 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800d56e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800d570:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d574:	ee07 3a10 	vmov	s14, r3
 800d578:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d57c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d580:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d584:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800d588:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d58c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800d58e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d592:	ee07 3a10 	vmov	s14, r3
 800d596:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d59a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d59e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d5a2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800d5a6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d5aa:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800d5ac:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d5b0:	ee06 3a90 	vmov	s13, r3
 800d5b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d5b8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d5bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d5c0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800d5c4:	ee17 3a90 	vmov	r3, s15
 800d5c8:	6083      	str	r3, [r0, #8]
}
 800d5ca:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5cc:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800d5ce:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800d638 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800d5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d6:	ee07 3a90 	vmov	s15, r3
 800d5da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5e2:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5e6:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800d5ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800d5ee:	e7bd      	b.n	800d56c <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5f0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800d5f2:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800d63c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800d5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5fa:	ee07 3a90 	vmov	s15, r3
 800d5fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d606:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d60a:	e7ec      	b.n	800d5e6 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d60c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800d60e:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800d612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d616:	ee07 3a90 	vmov	s15, r3
 800d61a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d622:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d626:	e7de      	b.n	800d5e6 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d628:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d62c:	e7cc      	b.n	800d5c8 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800d62e:	bf00      	nop
 800d630:	58024400 	.word	0x58024400
 800d634:	03d09000 	.word	0x03d09000
 800d638:	4a742400 	.word	0x4a742400
 800d63c:	4bbebc20 	.word	0x4bbebc20
 800d640:	4c742400 	.word	0x4c742400

0800d644 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800d644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d646:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 800d64a:	430b      	orrs	r3, r1
 800d64c:	d114      	bne.n	800d678 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d64e:	4b9e      	ldr	r3, [pc, #632]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d650:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d652:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 800d656:	2a04      	cmp	r2, #4
 800d658:	d82f      	bhi.n	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800d65a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d65e:	0108      	.short	0x0108
 800d660:	0005001d 	.word	0x0005001d
 800d664:	00490165 	.word	0x00490165
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d668:	6818      	ldr	r0, [r3, #0]
 800d66a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800d66e:	d01b      	beq.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d670:	a801      	add	r0, sp, #4
 800d672:	f7ff fe93 	bl	800d39c <HAL_RCCEx_GetPLL3ClockFreq>
 800d676:	e016      	b.n	800d6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800d678:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 800d67c:	430b      	orrs	r3, r1
 800d67e:	d11e      	bne.n	800d6be <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800d680:	4b91      	ldr	r3, [pc, #580]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d682:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d684:	f402 72e0 	and.w	r2, r2, #448	@ 0x1c0
    switch (saiclocksource)
 800d688:	2a80      	cmp	r2, #128	@ 0x80
 800d68a:	d0ed      	beq.n	800d668 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800d68c:	d80f      	bhi.n	800d6ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800d68e:	2a00      	cmp	r2, #0
 800d690:	f000 80ed 	beq.w	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800d694:	2a40      	cmp	r2, #64	@ 0x40
    switch (srcclk)
 800d696:	d110      	bne.n	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d698:	6818      	ldr	r0, [r3, #0]
 800d69a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800d69e:	d003      	beq.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6a0:	a801      	add	r0, sp, #4
 800d6a2:	f7ff fdd1 	bl	800d248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d6a6:	9801      	ldr	r0, [sp, #4]
}
 800d6a8:	b005      	add	sp, #20
 800d6aa:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800d6ae:	2ac0      	cmp	r2, #192	@ 0xc0
 800d6b0:	f000 813a 	beq.w	800d928 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800d6b4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    switch (saiclocksource)
 800d6b8:	d01a      	beq.n	800d6f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = 0;
 800d6ba:	2000      	movs	r0, #0
  return frequency;
 800d6bc:	e7f4      	b.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d6be:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800d6c2:	430b      	orrs	r3, r1
 800d6c4:	d133      	bne.n	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d6c6:	4b80      	ldr	r3, [pc, #512]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d6c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d6ca:	f402 0260 	and.w	r2, r2, #14680064	@ 0xe00000
    switch (saiclocksource)
 800d6ce:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800d6d2:	d0c9      	beq.n	800d668 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800d6d4:	d805      	bhi.n	800d6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800d6d6:	2a00      	cmp	r2, #0
 800d6d8:	f000 80c9 	beq.w	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800d6dc:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 800d6e0:	e7d9      	b.n	800d696 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800d6e2:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 800d6e6:	f000 811f 	beq.w	800d928 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800d6ea:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800d6ee:	e7e3      	b.n	800d6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d6f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d6f2:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d6f4:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d6f8:	0748      	lsls	r0, r1, #29
 800d6fa:	d506      	bpl.n	800d70a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800d6fc:	b92a      	cbnz	r2, 800d70a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6fe:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d700:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d704:	4871      	ldr	r0, [pc, #452]	@ (800d8cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d706:	40d8      	lsrs	r0, r3
 800d708:	e7ce      	b.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d70a:	4b6f      	ldr	r3, [pc, #444]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d70c:	6819      	ldr	r1, [r3, #0]
 800d70e:	05c9      	lsls	r1, r1, #23
 800d710:	d503      	bpl.n	800d71a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800d712:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 800d716:	f000 8109 	beq.w	800d92c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d71a:	6818      	ldr	r0, [r3, #0]
 800d71c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800d720:	d0c2      	beq.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSE_VALUE;
 800d722:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800d726:	486a      	ldr	r0, [pc, #424]	@ (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d728:	bf18      	it	ne
 800d72a:	2000      	movne	r0, #0
 800d72c:	e7bc      	b.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d72e:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 800d732:	430b      	orrs	r3, r1
 800d734:	d125      	bne.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d736:	4b64      	ldr	r3, [pc, #400]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d738:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d73a:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
    switch (saiclocksource)
 800d73e:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 800d742:	d091      	beq.n	800d668 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800d744:	d805      	bhi.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d746:	2a00      	cmp	r2, #0
 800d748:	f000 8091 	beq.w	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800d74c:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800d750:	e7a1      	b.n	800d696 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800d752:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 800d756:	f000 80e7 	beq.w	800d928 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800d75a:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
    switch (srcclk)
 800d75e:	d1ac      	bne.n	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d760:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d762:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d764:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d768:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d76a:	0748      	lsls	r0, r1, #29
 800d76c:	d501      	bpl.n	800d772 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 800d76e:	2a00      	cmp	r2, #0
 800d770:	d0c6      	beq.n	800d700 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d772:	05d9      	lsls	r1, r3, #23
 800d774:	d503      	bpl.n	800d77e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800d776:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 800d77a:	f000 80d7 	beq.w	800d92c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d77e:	4b52      	ldr	r3, [pc, #328]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d780:	e7cb      	b.n	800d71a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d782:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 800d786:	430b      	orrs	r3, r1
 800d788:	d114      	bne.n	800d7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d78a:	4b4f      	ldr	r3, [pc, #316]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d78c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d78e:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    switch (srcclk)
 800d792:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800d796:	f43f af67 	beq.w	800d668 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800d79a:	d804      	bhi.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800d79c:	2a00      	cmp	r2, #0
 800d79e:	d066      	beq.n	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800d7a0:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800d7a4:	e777      	b.n	800d696 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800d7a6:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 800d7aa:	f000 80bd 	beq.w	800d928 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800d7ae:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800d7b2:	e7d4      	b.n	800d75e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d7b4:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 800d7b8:	430b      	orrs	r3, r1
 800d7ba:	d134      	bne.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d7bc:	4a42      	ldr	r2, [pc, #264]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d7be:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d7c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 800d7c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d7c8:	f000 808a 	beq.w	800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800d7cc:	d80d      	bhi.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 800d7ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7d2:	d016      	beq.n	800d802 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800d7d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d7d8:	d01c      	beq.n	800d814 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f47f af6d 	bne.w	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 800d7e0:	b005      	add	sp, #20
 800d7e2:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800d7e6:	f7fe bed1 	b.w	800c58c <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 800d7ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d7ee:	d07e      	beq.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 800d7f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
    switch (srcclk)
 800d7f4:	f47f af61 	bne.w	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d7f8:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 800d7fa:	4b35      	ldr	r3, [pc, #212]	@ (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d7fc:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800d800:	e079      	b.n	800d8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d802:	6810      	ldr	r0, [r2, #0]
 800d804:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800d808:	f43f af4e 	beq.w	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d80c:	a801      	add	r0, sp, #4
 800d80e:	f7ff fd1b 	bl	800d248 <HAL_RCCEx_GetPLL2ClockFreq>
 800d812:	e034      	b.n	800d87e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d814:	6810      	ldr	r0, [r2, #0]
 800d816:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800d81a:	f43f af45 	beq.w	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d81e:	a801      	add	r0, sp, #4
 800d820:	f7ff fdbc 	bl	800d39c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d824:	e02b      	b.n	800d87e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d826:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 800d82a:	430b      	orrs	r3, r1
 800d82c:	d117      	bne.n	800d85e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d82e:	4b26      	ldr	r3, [pc, #152]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d830:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d832:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
    switch (srcclk)
 800d836:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800d83a:	d006      	beq.n	800d84a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 800d83c:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 800d840:	d08e      	beq.n	800d760 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 800d842:	2a00      	cmp	r2, #0
 800d844:	f47f af39 	bne.w	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800d848:	e726      	b.n	800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d84a:	6818      	ldr	r0, [r3, #0]
 800d84c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800d850:	f43f af2a 	beq.w	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d854:	a801      	add	r0, sp, #4
 800d856:	f7ff fda1 	bl	800d39c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d85a:	9803      	ldr	r0, [sp, #12]
 800d85c:	e724      	b.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d85e:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 800d862:	430b      	orrs	r3, r1
 800d864:	d116      	bne.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d866:	4b18      	ldr	r3, [pc, #96]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d868:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 800d86a:	03d2      	lsls	r2, r2, #15
 800d86c:	d409      	bmi.n	800d882 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d86e:	6818      	ldr	r0, [r3, #0]
 800d870:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800d874:	f43f af18 	beq.w	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d878:	a801      	add	r0, sp, #4
 800d87a:	f7ff fe39 	bl	800d4f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d87e:	9802      	ldr	r0, [sp, #8]
 800d880:	e712      	b.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d882:	6818      	ldr	r0, [r3, #0]
 800d884:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800d888:	f43f af0e 	beq.w	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d88c:	a801      	add	r0, sp, #4
 800d88e:	f7ff fcdb 	bl	800d248 <HAL_RCCEx_GetPLL2ClockFreq>
 800d892:	e7e2      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d894:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 800d898:	430b      	orrs	r3, r1
 800d89a:	d12f      	bne.n	800d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d89c:	4a0a      	ldr	r2, [pc, #40]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d89e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d8a0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800d8a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d8a8:	d01a      	beq.n	800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800d8aa:	d813      	bhi.n	800d8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 800d8ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d8b0:	d0a7      	beq.n	800d802 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800d8b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d8b6:	d0ad      	beq.n	800d814 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f47f aefe 	bne.w	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 800d8be:	b005      	add	sp, #20
 800d8c0:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d8c4:	f7ff bcae 	b.w	800d224 <HAL_RCCEx_GetD3PCLK1Freq>
 800d8c8:	58024400 	.word	0x58024400
 800d8cc:	03d09000 	.word	0x03d09000
 800d8d0:	017d7840 	.word	0x017d7840
    switch (srcclk)
 800d8d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8d8:	d009      	beq.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 800d8da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d8de:	e789      	b.n	800d7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d8e0:	6810      	ldr	r0, [r2, #0]
 800d8e2:	f010 0004 	ands.w	r0, r0, #4
 800d8e6:	f43f aedf 	beq.w	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8ea:	6813      	ldr	r3, [r2, #0]
 800d8ec:	e708      	b.n	800d700 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d8ee:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 800d8f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d930 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800d8f2:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
          frequency = HSE_VALUE;
 800d8f6:	bf18      	it	ne
 800d8f8:	4618      	movne	r0, r3
 800d8fa:	e6d5      	b.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d8fc:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 800d900:	4308      	orrs	r0, r1
 800d902:	f47f aeda 	bne.w	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d906:	4a0b      	ldr	r2, [pc, #44]	@ (800d934 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800d908:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d90a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 800d90e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d912:	d007      	beq.n	800d924 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800d914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d918:	f43f af73 	beq.w	800d802 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f47f aecc 	bne.w	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800d922:	e769      	b.n	800d7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d924:	6810      	ldr	r0, [r2, #0]
 800d926:	e7a3      	b.n	800d870 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d928:	4803      	ldr	r0, [pc, #12]	@ (800d938 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800d92a:	e6bd      	b.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = CSI_VALUE;
 800d92c:	4800      	ldr	r0, [pc, #0]	@ (800d930 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800d92e:	e6bb      	b.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800d930:	003d0900 	.word	0x003d0900
 800d934:	58024400 	.word	0x58024400
 800d938:	00bb8000 	.word	0x00bb8000

0800d93c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d93c:	b538      	push	{r3, r4, r5, lr}
 800d93e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d940:	4604      	mov	r4, r0
 800d942:	b1f0      	cbz	r0, 800d982 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d944:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800d948:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d94c:	b91b      	cbnz	r3, 800d956 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d94e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d952:	f7f3 ffc3 	bl	80018dc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d956:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d958:	1d21      	adds	r1, r4, #4
 800d95a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d95c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d960:	f000 fb5b 	bl	800e01a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d964:	6862      	ldr	r2, [r4, #4]
 800d966:	4629      	mov	r1, r5
 800d968:	6820      	ldr	r0, [r4, #0]
 800d96a:	f000 fb8e 	bl	800e08a <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d96e:	4a06      	ldr	r2, [pc, #24]	@ (800d988 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800d970:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800d972:	6813      	ldr	r3, [r2, #0]
 800d974:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d978:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d97a:	2301      	movs	r3, #1
 800d97c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800d980:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d982:	2001      	movs	r0, #1
 800d984:	e7fc      	b.n	800d980 <HAL_SDRAM_Init+0x44>
 800d986:	bf00      	nop
 800d988:	52004000 	.word	0x52004000

0800d98c <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800d98c:	b510      	push	{r4, lr}
 800d98e:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800d990:	f7f4 f83e 	bl	8001a10 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800d994:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d998:	f000 fbad 	bl	800e0f6 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800d99c:	2000      	movs	r0, #0
 800d99e:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800d9a2:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800d9a6:	bd10      	pop	{r4, pc}

0800d9a8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d9a8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d9aa:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d9b2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d9b4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800d9b6:	d010      	beq.n	800d9da <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d9b8:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800d9bc:	2c01      	cmp	r4, #1
 800d9be:	d110      	bne.n	800d9e2 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9c0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d9c2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9c4:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d9c8:	f000 fba4 	bl	800e114 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9cc:	6833      	ldr	r3, [r6, #0]
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	d104      	bne.n	800d9dc <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d9d2:	2305      	movs	r3, #5
 800d9d4:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d9d8:	2000      	movs	r0, #0
}
 800d9da:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d9dc:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800d9e0:	e7fa      	b.n	800d9d8 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800d9e2:	2001      	movs	r0, #1
 800d9e4:	e7f9      	b.n	800d9da <HAL_SDRAM_SendCommand+0x32>

0800d9e6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d9e6:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d9e8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800d9ec:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	b2d8      	uxtb	r0, r3
 800d9f2:	d00d      	beq.n	800da10 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d9f4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	b2dd      	uxtb	r5, r3
 800d9fc:	d109      	bne.n	800da12 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9fe:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800da00:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da02:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800da06:	f000 fb97 	bl	800e138 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800da0a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800da0c:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800da10:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800da12:	2001      	movs	r0, #1
 800da14:	e7fc      	b.n	800da10 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800da16 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800da16:	4770      	bx	lr

0800da18 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da18:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d12f      	bne.n	800da80 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da20:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da22:	4a18      	ldr	r2, [pc, #96]	@ (800da84 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800da24:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da28:	6803      	ldr	r3, [r0, #0]
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d01a      	beq.n	800da64 <HAL_TIM_Base_Start+0x4c>
 800da2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da32:	d017      	beq.n	800da64 <HAL_TIM_Base_Start+0x4c>
 800da34:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800da38:	4293      	cmp	r3, r2
 800da3a:	d013      	beq.n	800da64 <HAL_TIM_Base_Start+0x4c>
 800da3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800da40:	4293      	cmp	r3, r2
 800da42:	d00f      	beq.n	800da64 <HAL_TIM_Base_Start+0x4c>
 800da44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800da48:	4293      	cmp	r3, r2
 800da4a:	d00b      	beq.n	800da64 <HAL_TIM_Base_Start+0x4c>
 800da4c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800da50:	4293      	cmp	r3, r2
 800da52:	d007      	beq.n	800da64 <HAL_TIM_Base_Start+0x4c>
 800da54:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800da58:	4293      	cmp	r3, r2
 800da5a:	d003      	beq.n	800da64 <HAL_TIM_Base_Start+0x4c>
 800da5c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800da60:	4293      	cmp	r3, r2
 800da62:	d107      	bne.n	800da74 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da64:	6899      	ldr	r1, [r3, #8]
 800da66:	4a08      	ldr	r2, [pc, #32]	@ (800da88 <HAL_TIM_Base_Start+0x70>)
 800da68:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da6a:	2a06      	cmp	r2, #6
 800da6c:	d006      	beq.n	800da7c <HAL_TIM_Base_Start+0x64>
 800da6e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800da72:	d003      	beq.n	800da7c <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	f042 0201 	orr.w	r2, r2, #1
 800da7a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800da7c:	2000      	movs	r0, #0
 800da7e:	4770      	bx	lr
    return HAL_ERROR;
 800da80:	2001      	movs	r0, #1
}
 800da82:	4770      	bx	lr
 800da84:	40010000 	.word	0x40010000
 800da88:	00010007 	.word	0x00010007

0800da8c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da8c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800da90:	2b01      	cmp	r3, #1
 800da92:	d133      	bne.n	800dafc <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da94:	2302      	movs	r3, #2
 800da96:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da9a:	6803      	ldr	r3, [r0, #0]
 800da9c:	68da      	ldr	r2, [r3, #12]
 800da9e:	f042 0201 	orr.w	r2, r2, #1
 800daa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800daa4:	4a16      	ldr	r2, [pc, #88]	@ (800db00 <HAL_TIM_Base_Start_IT+0x74>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d01a      	beq.n	800dae0 <HAL_TIM_Base_Start_IT+0x54>
 800daaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800daae:	d017      	beq.n	800dae0 <HAL_TIM_Base_Start_IT+0x54>
 800dab0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d013      	beq.n	800dae0 <HAL_TIM_Base_Start_IT+0x54>
 800dab8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d00f      	beq.n	800dae0 <HAL_TIM_Base_Start_IT+0x54>
 800dac0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d00b      	beq.n	800dae0 <HAL_TIM_Base_Start_IT+0x54>
 800dac8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800dacc:	4293      	cmp	r3, r2
 800dace:	d007      	beq.n	800dae0 <HAL_TIM_Base_Start_IT+0x54>
 800dad0:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d003      	beq.n	800dae0 <HAL_TIM_Base_Start_IT+0x54>
 800dad8:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800dadc:	4293      	cmp	r3, r2
 800dade:	d107      	bne.n	800daf0 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dae0:	6899      	ldr	r1, [r3, #8]
 800dae2:	4a08      	ldr	r2, [pc, #32]	@ (800db04 <HAL_TIM_Base_Start_IT+0x78>)
 800dae4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dae6:	2a06      	cmp	r2, #6
 800dae8:	d006      	beq.n	800daf8 <HAL_TIM_Base_Start_IT+0x6c>
 800daea:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800daee:	d003      	beq.n	800daf8 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	f042 0201 	orr.w	r2, r2, #1
 800daf6:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800daf8:	2000      	movs	r0, #0
 800dafa:	4770      	bx	lr
    return HAL_ERROR;
 800dafc:	2001      	movs	r0, #1
}
 800dafe:	4770      	bx	lr
 800db00:	40010000 	.word	0x40010000
 800db04:	00010007 	.word	0x00010007

0800db08 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800db08:	4770      	bx	lr

0800db0a <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800db0a:	4770      	bx	lr

0800db0c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800db0c:	4770      	bx	lr

0800db0e <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800db0e:	4770      	bx	lr

0800db10 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800db10:	6803      	ldr	r3, [r0, #0]
{
 800db12:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800db14:	68dd      	ldr	r5, [r3, #12]
{
 800db16:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800db18:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800db1a:	07b2      	lsls	r2, r6, #30
 800db1c:	d50d      	bpl.n	800db3a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800db1e:	07a9      	lsls	r1, r5, #30
 800db20:	d50b      	bpl.n	800db3a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db22:	f06f 0202 	mvn.w	r2, #2
 800db26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db28:	2201      	movs	r2, #1
 800db2a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db2c:	699b      	ldr	r3, [r3, #24]
 800db2e:	079a      	lsls	r2, r3, #30
 800db30:	d075      	beq.n	800dc1e <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800db32:	f7ff ffea 	bl	800db0a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db36:	2300      	movs	r3, #0
 800db38:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800db3a:	0773      	lsls	r3, r6, #29
 800db3c:	d510      	bpl.n	800db60 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800db3e:	0768      	lsls	r0, r5, #29
 800db40:	d50e      	bpl.n	800db60 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800db48:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db4c:	2202      	movs	r2, #2
 800db4e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db50:	699b      	ldr	r3, [r3, #24]
 800db52:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800db56:	d068      	beq.n	800dc2a <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800db58:	f7ff ffd7 	bl	800db0a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db5c:	2300      	movs	r3, #0
 800db5e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800db60:	0731      	lsls	r1, r6, #28
 800db62:	d50f      	bpl.n	800db84 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800db64:	072a      	lsls	r2, r5, #28
 800db66:	d50d      	bpl.n	800db84 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800db68:	6823      	ldr	r3, [r4, #0]
 800db6a:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800db6e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800db70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800db72:	2204      	movs	r2, #4
 800db74:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800db76:	69db      	ldr	r3, [r3, #28]
 800db78:	079b      	lsls	r3, r3, #30
 800db7a:	d05c      	beq.n	800dc36 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800db7c:	f7ff ffc5 	bl	800db0a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db80:	2300      	movs	r3, #0
 800db82:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800db84:	06f1      	lsls	r1, r6, #27
 800db86:	d510      	bpl.n	800dbaa <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800db88:	06ea      	lsls	r2, r5, #27
 800db8a:	d50e      	bpl.n	800dbaa <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800db8c:	6823      	ldr	r3, [r4, #0]
 800db8e:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800db92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800db94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db96:	2208      	movs	r2, #8
 800db98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db9a:	69db      	ldr	r3, [r3, #28]
 800db9c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800dba0:	d04f      	beq.n	800dc42 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800dba2:	f7ff ffb2 	bl	800db0a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dba6:	2300      	movs	r3, #0
 800dba8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dbaa:	07f3      	lsls	r3, r6, #31
 800dbac:	d508      	bpl.n	800dbc0 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dbae:	07e8      	lsls	r0, r5, #31
 800dbb0:	d506      	bpl.n	800dbc0 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dbb2:	6823      	ldr	r3, [r4, #0]
 800dbb4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800dbb8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dbba:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800dbbc:	f7f3 fb98 	bl	80012f0 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dbc0:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800dbc4:	d008      	beq.n	800dbd8 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dbc6:	0629      	lsls	r1, r5, #24
 800dbc8:	d506      	bpl.n	800dbd8 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dbca:	6823      	ldr	r3, [r4, #0]
 800dbcc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800dbd0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dbd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800dbd4:	f000 fa1f 	bl	800e016 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dbd8:	05f2      	lsls	r2, r6, #23
 800dbda:	d508      	bpl.n	800dbee <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dbdc:	062b      	lsls	r3, r5, #24
 800dbde:	d506      	bpl.n	800dbee <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dbe0:	6823      	ldr	r3, [r4, #0]
 800dbe2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800dbe6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dbe8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800dbea:	f000 fa15 	bl	800e018 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dbee:	0670      	lsls	r0, r6, #25
 800dbf0:	d508      	bpl.n	800dc04 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dbf2:	0669      	lsls	r1, r5, #25
 800dbf4:	d506      	bpl.n	800dc04 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800dbfc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dbfe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800dc00:	f7ff ff85 	bl	800db0e <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dc04:	06b2      	lsls	r2, r6, #26
 800dc06:	d522      	bpl.n	800dc4e <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dc08:	06ab      	lsls	r3, r5, #26
 800dc0a:	d520      	bpl.n	800dc4e <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800dc12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dc14:	611a      	str	r2, [r3, #16]
}
 800dc16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800dc1a:	f000 b9fb 	b.w	800e014 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc1e:	f7ff ff73 	bl	800db08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc22:	4620      	mov	r0, r4
 800dc24:	f7ff ff72 	bl	800db0c <HAL_TIM_PWM_PulseFinishedCallback>
 800dc28:	e785      	b.n	800db36 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc2a:	f7ff ff6d 	bl	800db08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f7ff ff6c 	bl	800db0c <HAL_TIM_PWM_PulseFinishedCallback>
 800dc34:	e792      	b.n	800db5c <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc36:	f7ff ff67 	bl	800db08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f7ff ff66 	bl	800db0c <HAL_TIM_PWM_PulseFinishedCallback>
 800dc40:	e79e      	b.n	800db80 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc42:	f7ff ff61 	bl	800db08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc46:	4620      	mov	r0, r4
 800dc48:	f7ff ff60 	bl	800db0c <HAL_TIM_PWM_PulseFinishedCallback>
 800dc4c:	e7ab      	b.n	800dba6 <HAL_TIM_IRQHandler+0x96>
}
 800dc4e:	bd70      	pop	{r4, r5, r6, pc}

0800dc50 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc50:	4a32      	ldr	r2, [pc, #200]	@ (800dd1c <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800dc52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc54:	4290      	cmp	r0, r2
 800dc56:	d012      	beq.n	800dc7e <TIM_Base_SetConfig+0x2e>
 800dc58:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800dc5c:	d00f      	beq.n	800dc7e <TIM_Base_SetConfig+0x2e>
 800dc5e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800dc62:	4290      	cmp	r0, r2
 800dc64:	d00b      	beq.n	800dc7e <TIM_Base_SetConfig+0x2e>
 800dc66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dc6a:	4290      	cmp	r0, r2
 800dc6c:	d007      	beq.n	800dc7e <TIM_Base_SetConfig+0x2e>
 800dc6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dc72:	4290      	cmp	r0, r2
 800dc74:	d003      	beq.n	800dc7e <TIM_Base_SetConfig+0x2e>
 800dc76:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800dc7a:	4290      	cmp	r0, r2
 800dc7c:	d119      	bne.n	800dcb2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800dc7e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800dc84:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc86:	4a25      	ldr	r2, [pc, #148]	@ (800dd1c <TIM_Base_SetConfig+0xcc>)
 800dc88:	4290      	cmp	r0, r2
 800dc8a:	d01d      	beq.n	800dcc8 <TIM_Base_SetConfig+0x78>
 800dc8c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800dc90:	d01a      	beq.n	800dcc8 <TIM_Base_SetConfig+0x78>
 800dc92:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800dc96:	4290      	cmp	r0, r2
 800dc98:	d016      	beq.n	800dcc8 <TIM_Base_SetConfig+0x78>
 800dc9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dc9e:	4290      	cmp	r0, r2
 800dca0:	d012      	beq.n	800dcc8 <TIM_Base_SetConfig+0x78>
 800dca2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dca6:	4290      	cmp	r0, r2
 800dca8:	d00e      	beq.n	800dcc8 <TIM_Base_SetConfig+0x78>
 800dcaa:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800dcae:	4290      	cmp	r0, r2
 800dcb0:	d00a      	beq.n	800dcc8 <TIM_Base_SetConfig+0x78>
 800dcb2:	4a1b      	ldr	r2, [pc, #108]	@ (800dd20 <TIM_Base_SetConfig+0xd0>)
 800dcb4:	4290      	cmp	r0, r2
 800dcb6:	d007      	beq.n	800dcc8 <TIM_Base_SetConfig+0x78>
 800dcb8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dcbc:	4290      	cmp	r0, r2
 800dcbe:	d003      	beq.n	800dcc8 <TIM_Base_SetConfig+0x78>
 800dcc0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dcc4:	4290      	cmp	r0, r2
 800dcc6:	d103      	bne.n	800dcd0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dcc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dccc:	68ca      	ldr	r2, [r1, #12]
 800dcce:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dcd0:	694a      	ldr	r2, [r1, #20]
 800dcd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dcd6:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dcd8:	688a      	ldr	r2, [r1, #8]
 800dcda:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dcdc:	680a      	ldr	r2, [r1, #0]
 800dcde:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dce0:	4a0e      	ldr	r2, [pc, #56]	@ (800dd1c <TIM_Base_SetConfig+0xcc>)
 800dce2:	4290      	cmp	r0, r2
 800dce4:	d00f      	beq.n	800dd06 <TIM_Base_SetConfig+0xb6>
 800dce6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dcea:	4290      	cmp	r0, r2
 800dcec:	d00b      	beq.n	800dd06 <TIM_Base_SetConfig+0xb6>
 800dcee:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800dcf2:	4290      	cmp	r0, r2
 800dcf4:	d007      	beq.n	800dd06 <TIM_Base_SetConfig+0xb6>
 800dcf6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dcfa:	4290      	cmp	r0, r2
 800dcfc:	d003      	beq.n	800dd06 <TIM_Base_SetConfig+0xb6>
 800dcfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd02:	4290      	cmp	r0, r2
 800dd04:	d101      	bne.n	800dd0a <TIM_Base_SetConfig+0xba>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd06:	690a      	ldr	r2, [r1, #16]
 800dd08:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800dd0a:	6802      	ldr	r2, [r0, #0]
 800dd0c:	f042 0204 	orr.w	r2, r2, #4
 800dd10:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd12:	2201      	movs	r2, #1
 800dd14:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800dd16:	6003      	str	r3, [r0, #0]
}
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	40010000 	.word	0x40010000
 800dd20:	40014000 	.word	0x40014000

0800dd24 <HAL_TIM_Base_Init>:
{
 800dd24:	b510      	push	{r4, lr}
  if (htim == NULL)
 800dd26:	4604      	mov	r4, r0
 800dd28:	b350      	cbz	r0, 800dd80 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800dd2a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800dd2e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800dd32:	b91b      	cbnz	r3, 800dd3c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800dd34:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800dd38:	f7ff fe6d 	bl	800da16 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800dd3c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd3e:	6820      	ldr	r0, [r4, #0]
 800dd40:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800dd42:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd46:	f7ff ff83 	bl	800dc50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd4a:	2301      	movs	r3, #1
  return HAL_OK;
 800dd4c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd4e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd52:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800dd56:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800dd5a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800dd5e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800dd62:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd6a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800dd6e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800dd72:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800dd76:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800dd7a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800dd7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800dd80:	2001      	movs	r0, #1
 800dd82:	e7fc      	b.n	800dd7e <HAL_TIM_Base_Init+0x5a>

0800dd84 <HAL_TIM_IC_Init>:
{
 800dd84:	b510      	push	{r4, lr}
  if (htim == NULL)
 800dd86:	4604      	mov	r4, r0
 800dd88:	b350      	cbz	r0, 800dde0 <HAL_TIM_IC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800dd8a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800dd8e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800dd92:	b91b      	cbnz	r3, 800dd9c <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800dd94:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 800dd98:	f7f3 fd60 	bl	800185c <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800dd9c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd9e:	6820      	ldr	r0, [r4, #0]
 800dda0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800dda2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dda6:	f7ff ff53 	bl	800dc50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ddaa:	2301      	movs	r3, #1
  return HAL_OK;
 800ddac:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ddae:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddb2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800ddb6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800ddba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800ddbe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800ddc2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ddc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ddce:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ddd2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800ddd6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ddda:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800ddde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800dde0:	2001      	movs	r0, #1
 800dde2:	e7fc      	b.n	800ddde <HAL_TIM_IC_Init+0x5a>

0800dde4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800dde4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dde6:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800dde8:	4e1a      	ldr	r6, [pc, #104]	@ (800de54 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddea:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ddec:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddee:	f024 0401 	bic.w	r4, r4, #1
 800ddf2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddf4:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ddf6:	d029      	beq.n	800de4c <TIM_TI1_SetConfig+0x68>
 800ddf8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ddfc:	d026      	beq.n	800de4c <TIM_TI1_SetConfig+0x68>
 800ddfe:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 800de02:	42b0      	cmp	r0, r6
 800de04:	d022      	beq.n	800de4c <TIM_TI1_SetConfig+0x68>
 800de06:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800de0a:	42b0      	cmp	r0, r6
 800de0c:	d01e      	beq.n	800de4c <TIM_TI1_SetConfig+0x68>
 800de0e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800de12:	42b0      	cmp	r0, r6
 800de14:	d01a      	beq.n	800de4c <TIM_TI1_SetConfig+0x68>
 800de16:	f506 4678 	add.w	r6, r6, #63488	@ 0xf800
 800de1a:	42b0      	cmp	r0, r6
 800de1c:	d016      	beq.n	800de4c <TIM_TI1_SetConfig+0x68>
 800de1e:	f5a6 466c 	sub.w	r6, r6, #60416	@ 0xec00
 800de22:	42b0      	cmp	r0, r6
 800de24:	d012      	beq.n	800de4c <TIM_TI1_SetConfig+0x68>
 800de26:	f506 3694 	add.w	r6, r6, #75776	@ 0x12800
 800de2a:	42b0      	cmp	r0, r6
 800de2c:	d00e      	beq.n	800de4c <TIM_TI1_SetConfig+0x68>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800de2e:	f044 0201 	orr.w	r2, r4, #1
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800de32:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800de34:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800de38:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de40:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800de44:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de46:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800de48:	6201      	str	r1, [r0, #32]
}
 800de4a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800de4c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800de50:	4322      	orrs	r2, r4
 800de52:	e7ee      	b.n	800de32 <TIM_TI1_SetConfig+0x4e>
 800de54:	40010000 	.word	0x40010000

0800de58 <HAL_TIM_IC_ConfigChannel>:
{
 800de58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800de5a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800de5e:	4605      	mov	r5, r0
 800de60:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 800de62:	2b01      	cmp	r3, #1
 800de64:	f000 8089 	beq.w	800df7a <HAL_TIM_IC_ConfigChannel+0x122>
 800de68:	2001      	movs	r0, #1
 800de6a:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 800de6e:	b992      	cbnz	r2, 800de96 <HAL_TIM_IC_ConfigChannel+0x3e>
    TIM_TI1_SetConfig(htim->Instance,
 800de70:	6828      	ldr	r0, [r5, #0]
 800de72:	68cb      	ldr	r3, [r1, #12]
 800de74:	e9d1 1200 	ldrd	r1, r2, [r1]
 800de78:	f7ff ffb4 	bl	800dde4 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800de7c:	6983      	ldr	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800de7e:	68a2      	ldr	r2, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800de80:	f023 030c 	bic.w	r3, r3, #12
 800de84:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800de86:	6983      	ldr	r3, [r0, #24]
 800de88:	4313      	orrs	r3, r2
 800de8a:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800de8c:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800de8e:	2300      	movs	r3, #0
 800de90:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 800de94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800de96:	2a04      	cmp	r2, #4
 800de98:	d124      	bne.n	800dee4 <HAL_TIM_IC_ConfigChannel+0x8c>
    TIM_TI2_SetConfig(htim->Instance,
 800de9a:	682b      	ldr	r3, [r5, #0]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800de9c:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de9e:	6a18      	ldr	r0, [r3, #32]
 800dea0:	f020 0010 	bic.w	r0, r0, #16
                      sConfig->ICSelection,
 800dea4:	e9d1 2700 	ldrd	r2, r7, [r1]
                      sConfig->ICFilter);
 800dea8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800deaa:	6218      	str	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800deac:	0112      	lsls	r2, r2, #4
  tmpccmr1 = TIMx->CCMR1;
 800deae:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800deb0:	0309      	lsls	r1, r1, #12
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800deb2:	f002 02a0 	and.w	r2, r2, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800deb6:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800deba:	b289      	uxth	r1, r1
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800debc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dec0:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800dec4:	4301      	orrs	r1, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dec6:	f026 00a0 	bic.w	r0, r6, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800deca:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800decc:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800dece:	68a1      	ldr	r1, [r4, #8]
  TIMx->CCER = tmpccer;
 800ded0:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ded2:	699a      	ldr	r2, [r3, #24]
 800ded4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ded8:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800deda:	699a      	ldr	r2, [r3, #24]
 800dedc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dee0:	619a      	str	r2, [r3, #24]
 800dee2:	e7d3      	b.n	800de8c <HAL_TIM_IC_ConfigChannel+0x34>
  else if (Channel == TIM_CHANNEL_3)
 800dee4:	2a08      	cmp	r2, #8
 800dee6:	d122      	bne.n	800df2e <HAL_TIM_IC_ConfigChannel+0xd6>
    TIM_TI3_SetConfig(htim->Instance,
 800dee8:	682b      	ldr	r3, [r5, #0]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800deea:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800deec:	6a1f      	ldr	r7, [r3, #32]
 800deee:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
                      sConfig->ICSelection,
 800def2:	e9d1 2000 	ldrd	r2, r0, [r1]
                      sConfig->ICFilter);
 800def6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800def8:	621f      	str	r7, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800defa:	0212      	lsls	r2, r2, #8
  tmpccmr2 = TIMx->CCMR2;
 800defc:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800defe:	0109      	lsls	r1, r1, #4
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800df00:	f402 6220 	and.w	r2, r2, #2560	@ 0xa00
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800df04:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800df08:	b2c9      	uxtb	r1, r1
  tmpccmr2 |= TIM_ICSelection;
 800df0a:	4338      	orrs	r0, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800df0c:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800df10:	4301      	orrs	r1, r0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800df12:	f426 6020 	bic.w	r0, r6, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800df16:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800df18:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800df1a:	68a1      	ldr	r1, [r4, #8]
  TIMx->CCER = tmpccer;
 800df1c:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800df1e:	69da      	ldr	r2, [r3, #28]
 800df20:	f022 020c 	bic.w	r2, r2, #12
 800df24:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800df26:	69da      	ldr	r2, [r3, #28]
 800df28:	430a      	orrs	r2, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800df2a:	61da      	str	r2, [r3, #28]
 800df2c:	e7ae      	b.n	800de8c <HAL_TIM_IC_ConfigChannel+0x34>
  else if (Channel == TIM_CHANNEL_4)
 800df2e:	2a0c      	cmp	r2, #12
 800df30:	d1ad      	bne.n	800de8e <HAL_TIM_IC_ConfigChannel+0x36>
    TIM_TI4_SetConfig(htim->Instance,
 800df32:	682b      	ldr	r3, [r5, #0]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800df34:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800df36:	6a18      	ldr	r0, [r3, #32]
 800df38:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
                      sConfig->ICSelection,
 800df3c:	e9d1 2700 	ldrd	r2, r7, [r1]
                      sConfig->ICFilter);
 800df40:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800df42:	6218      	str	r0, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800df44:	0312      	lsls	r2, r2, #12
  tmpccmr2 = TIMx->CCMR2;
 800df46:	69d8      	ldr	r0, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800df48:	0309      	lsls	r1, r1, #12
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800df4a:	f402 4220 	and.w	r2, r2, #40960	@ 0xa000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800df4e:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800df52:	b289      	uxth	r1, r1
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800df54:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800df58:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800df5c:	4301      	orrs	r1, r0
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800df5e:	f426 4020 	bic.w	r0, r6, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800df62:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800df64:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800df66:	68a1      	ldr	r1, [r4, #8]
  TIMx->CCER = tmpccer ;
 800df68:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800df6a:	69da      	ldr	r2, [r3, #28]
 800df6c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800df70:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800df72:	69da      	ldr	r2, [r3, #28]
 800df74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800df78:	e7d7      	b.n	800df2a <HAL_TIM_IC_ConfigChannel+0xd2>
  __HAL_LOCK(htim);
 800df7a:	2002      	movs	r0, #2
 800df7c:	e78a      	b.n	800de94 <HAL_TIM_IC_ConfigChannel+0x3c>
	...

0800df80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df80:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df82:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800df86:	4604      	mov	r4, r0
 800df88:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d03b      	beq.n	800e006 <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df8e:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df90:	4d1d      	ldr	r5, [pc, #116]	@ (800e008 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 800df92:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df96:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800df98:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800df9a:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df9c:	d002      	beq.n	800dfa4 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 800df9e:	4e1b      	ldr	r6, [pc, #108]	@ (800e00c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800dfa0:	42b3      	cmp	r3, r6
 800dfa2:	d103      	bne.n	800dfac <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dfa4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dfa8:	684e      	ldr	r6, [r1, #4]
 800dfaa:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfac:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800dfae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfb2:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfb4:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 800dfb8:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfba:	d019      	beq.n	800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800dfbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfc0:	d016      	beq.n	800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800dfc2:	4a13      	ldr	r2, [pc, #76]	@ (800e010 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d013      	beq.n	800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800dfc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d00f      	beq.n	800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800dfd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d00b      	beq.n	800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800dfd8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d007      	beq.n	800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800dfe0:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d003      	beq.n	800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800dfe8:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d104      	bne.n	800dffa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dff0:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dff2:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dff6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dff8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dffa:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800dffc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800dffe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800e002:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 800e006:	bd70      	pop	{r4, r5, r6, pc}
 800e008:	40010000 	.word	0x40010000
 800e00c:	40010400 	.word	0x40010400
 800e010:	40000400 	.word	0x40000400

0800e014 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800e014:	4770      	bx	lr

0800e016 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800e016:	4770      	bx	lr

0800e018 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800e018:	4770      	bx	lr

0800e01a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800e01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e01e:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800e022:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800e026:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800e02a:	ea43 0308 	orr.w	r3, r3, r8
 800e02e:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800e032:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e036:	6809      	ldr	r1, [r1, #0]
 800e038:	b991      	cbnz	r1, 800e060 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e03a:	ea43 030e 	orr.w	r3, r3, lr
 800e03e:	6801      	ldr	r1, [r0, #0]
 800e040:	4313      	orrs	r3, r2
 800e042:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800e046:	ea43 030c 	orr.w	r3, r3, ip
 800e04a:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800e04e:	433b      	orrs	r3, r7
 800e050:	4333      	orrs	r3, r6
 800e052:	432b      	orrs	r3, r5
 800e054:	4323      	orrs	r3, r4
 800e056:	430b      	orrs	r3, r1
 800e058:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800e05a:	2000      	movs	r0, #0
 800e05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e060:	6801      	ldr	r1, [r0, #0]
 800e062:	ea43 030e 	orr.w	r3, r3, lr
 800e066:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800e06a:	430b      	orrs	r3, r1
 800e06c:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e06e:	ea42 030c 	orr.w	r3, r2, ip
 800e072:	6841      	ldr	r1, [r0, #4]
 800e074:	433b      	orrs	r3, r7
 800e076:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800e07a:	4333      	orrs	r3, r6
 800e07c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800e080:	432b      	orrs	r3, r5
 800e082:	4323      	orrs	r3, r4
 800e084:	4313      	orrs	r3, r2
 800e086:	6043      	str	r3, [r0, #4]
 800e088:	e7e7      	b.n	800e05a <FMC_SDRAM_Init+0x40>

0800e08a <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e08a:	68cb      	ldr	r3, [r1, #12]
 800e08c:	f103 3cff 	add.w	ip, r3, #4294967295
 800e090:	694b      	ldr	r3, [r1, #20]
{
 800e092:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e094:	3b01      	subs	r3, #1
 800e096:	680f      	ldr	r7, [r1, #0]
 800e098:	684c      	ldr	r4, [r1, #4]
 800e09a:	688e      	ldr	r6, [r1, #8]
 800e09c:	051b      	lsls	r3, r3, #20
 800e09e:	690d      	ldr	r5, [r1, #16]
 800e0a0:	3c01      	subs	r4, #1
 800e0a2:	6989      	ldr	r1, [r1, #24]
 800e0a4:	3e01      	subs	r6, #1
 800e0a6:	3d01      	subs	r5, #1
 800e0a8:	3f01      	subs	r7, #1
 800e0aa:	3901      	subs	r1, #1
 800e0ac:	0124      	lsls	r4, r4, #4
 800e0ae:	0236      	lsls	r6, r6, #8
 800e0b0:	042d      	lsls	r5, r5, #16
 800e0b2:	0609      	lsls	r1, r1, #24
 800e0b4:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800e0b8:	b95a      	cbnz	r2, 800e0d2 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e0ba:	433b      	orrs	r3, r7
 800e0bc:	6882      	ldr	r2, [r0, #8]
 800e0be:	4323      	orrs	r3, r4
 800e0c0:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800e0c4:	4333      	orrs	r3, r6
 800e0c6:	432b      	orrs	r3, r5
 800e0c8:	430b      	orrs	r3, r1
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800e0ce:	2000      	movs	r0, #0
 800e0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e0d2:	6882      	ldr	r2, [r0, #8]
 800e0d4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800e0d8:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800e0dc:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e0de:	ea44 0306 	orr.w	r3, r4, r6
 800e0e2:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e0e4:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e0e6:	68c2      	ldr	r2, [r0, #12]
 800e0e8:	432b      	orrs	r3, r5
 800e0ea:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800e0ee:	430b      	orrs	r3, r1
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	60c3      	str	r3, [r0, #12]
 800e0f4:	e7eb      	b.n	800e0ce <FMC_SDRAM_Timing_Init+0x44>

0800e0f6 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800e0fc:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800e100:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800e104:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800e106:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800e10a:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800e10c:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800e10e:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800e110:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800e112:	4770      	bx	lr

0800e114 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e114:	6902      	ldr	r2, [r0, #16]
{
 800e116:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e118:	e9d1 3400 	ldrd	r3, r4, [r1]
 800e11c:	0d92      	lsrs	r2, r2, #22
 800e11e:	4323      	orrs	r3, r4
 800e120:	68cc      	ldr	r4, [r1, #12]
 800e122:	0592      	lsls	r2, r2, #22
 800e124:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800e128:	4313      	orrs	r3, r2
 800e12a:	688a      	ldr	r2, [r1, #8]
 800e12c:	3a01      	subs	r2, #1
 800e12e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800e132:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800e134:	2000      	movs	r0, #0
 800e136:	bd10      	pop	{r4, pc}

0800e138 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e138:	6943      	ldr	r3, [r0, #20]
 800e13a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800e13e:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800e142:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800e146:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800e148:	2000      	movs	r0, #0
 800e14a:	4770      	bx	lr

0800e14c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e14c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800e14e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e152:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e154:	f001 ff1c 	bl	800ff90 <xTaskGetSchedulerState>
 800e158:	2801      	cmp	r0, #1
 800e15a:	d003      	beq.n	800e164 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800e15c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800e160:	f000 bc58 	b.w	800ea14 <xPortSysTickHandler>
}
 800e164:	bd08      	pop	{r3, pc}
	...

0800e168 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e168:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800e16c:	b92b      	cbnz	r3, 800e17a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800e16e:	4b06      	ldr	r3, [pc, #24]	@ (800e188 <osKernelInitialize+0x20>)
 800e170:	6818      	ldr	r0, [r3, #0]
 800e172:	b928      	cbnz	r0, 800e180 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e174:	2201      	movs	r2, #1
 800e176:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e178:	4770      	bx	lr
    stat = osErrorISR;
 800e17a:	f06f 0005 	mvn.w	r0, #5
 800e17e:	4770      	bx	lr
    } else {
      stat = osError;
 800e180:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop
 800e188:	240100ec 	.word	0x240100ec

0800e18c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e18c:	b510      	push	{r4, lr}
 800e18e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800e192:	b95c      	cbnz	r4, 800e1ac <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800e194:	4b08      	ldr	r3, [pc, #32]	@ (800e1b8 <osKernelStart+0x2c>)
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	2a01      	cmp	r2, #1
 800e19a:	d10a      	bne.n	800e1b2 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e19c:	4a07      	ldr	r2, [pc, #28]	@ (800e1bc <osKernelStart+0x30>)
 800e19e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e1a0:	2202      	movs	r2, #2
 800e1a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e1a4:	f001 fd94 	bl	800fcd0 <vTaskStartScheduler>
      stat = osOK;
 800e1a8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800e1aa:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800e1ac:	f06f 0005 	mvn.w	r0, #5
 800e1b0:	e7fb      	b.n	800e1aa <osKernelStart+0x1e>
      stat = osError;
 800e1b2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800e1b6:	e7f8      	b.n	800e1aa <osKernelStart+0x1e>
 800e1b8:	240100ec 	.word	0x240100ec
 800e1bc:	e000ed00 	.word	0xe000ed00

0800e1c0 <osKernelGetTickCount>:
 800e1c0:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 800e1c4:	b10b      	cbz	r3, 800e1ca <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 800e1c6:	f001 bc31 	b.w	800fa2c <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 800e1ca:	f001 bc29 	b.w	800fa20 <xTaskGetTickCount>

0800e1ce <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e1ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1d0:	4614      	mov	r4, r2
 800e1d2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e1d4:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e1d6:	460b      	mov	r3, r1
  hTask = NULL;
 800e1d8:	9205      	str	r2, [sp, #20]
 800e1da:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800e1de:	b9ca      	cbnz	r2, 800e214 <osThreadNew+0x46>
 800e1e0:	b1c0      	cbz	r0, 800e214 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800e1e2:	b36c      	cbz	r4, 800e240 <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800e1e4:	69a5      	ldr	r5, [r4, #24]
 800e1e6:	2d00      	cmp	r5, #0
 800e1e8:	bf08      	it	eq
 800e1ea:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e1ec:	1e69      	subs	r1, r5, #1
 800e1ee:	46ac      	mov	ip, r5
 800e1f0:	2937      	cmp	r1, #55	@ 0x37
 800e1f2:	d82a      	bhi.n	800e24a <osThreadNew+0x7c>
 800e1f4:	6861      	ldr	r1, [r4, #4]
 800e1f6:	07c9      	lsls	r1, r1, #31
 800e1f8:	d427      	bmi.n	800e24a <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800e1fa:	6966      	ldr	r6, [r4, #20]
 800e1fc:	b16e      	cbz	r6, 800e21a <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e1fe:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800e200:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e202:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800e206:	b157      	cbz	r7, 800e21e <osThreadNew+0x50>
 800e208:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800e20c:	d902      	bls.n	800e214 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e20e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e210:	b104      	cbz	r4, 800e214 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e212:	b9e6      	cbnz	r6, 800e24e <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e214:	9805      	ldr	r0, [sp, #20]
}
 800e216:	b007      	add	sp, #28
 800e218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800e21a:	2280      	movs	r2, #128	@ 0x80
 800e21c:	e7f0      	b.n	800e200 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e21e:	f1be 0f00 	cmp.w	lr, #0
 800e222:	d1f7      	bne.n	800e214 <osThreadNew+0x46>
      if (mem == 0) {
 800e224:	6924      	ldr	r4, [r4, #16]
 800e226:	2c00      	cmp	r4, #0
 800e228:	d1f4      	bne.n	800e214 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e22a:	ac05      	add	r4, sp, #20
 800e22c:	b292      	uxth	r2, r2
 800e22e:	e9cd c400 	strd	ip, r4, [sp]
 800e232:	f001 fbbe 	bl	800f9b2 <xTaskCreate>
 800e236:	2801      	cmp	r0, #1
            hTask = NULL;
 800e238:	bf1c      	itt	ne
 800e23a:	2300      	movne	r3, #0
 800e23c:	9305      	strne	r3, [sp, #20]
 800e23e:	e7e9      	b.n	800e214 <osThreadNew+0x46>
    name = NULL;
 800e240:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800e242:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800e246:	2280      	movs	r2, #128	@ 0x80
 800e248:	e7ef      	b.n	800e22a <osThreadNew+0x5c>
        return (NULL);
 800e24a:	4610      	mov	r0, r2
 800e24c:	e7e3      	b.n	800e216 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e24e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800e252:	9500      	str	r5, [sp, #0]
 800e254:	f001 fb75 	bl	800f942 <xTaskCreateStatic>
 800e258:	9005      	str	r0, [sp, #20]
 800e25a:	e7db      	b.n	800e214 <osThreadNew+0x46>

0800e25c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e25c:	b508      	push	{r3, lr}
 800e25e:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800e262:	b922      	cbnz	r2, 800e26e <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800e264:	b108      	cbz	r0, 800e26a <osDelay+0xe>
      vTaskDelay(ticks);
 800e266:	f001 fcf3 	bl	800fc50 <vTaskDelay>
    stat = osOK;
 800e26a:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800e26c:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800e26e:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 800e272:	e7fb      	b.n	800e26c <osDelay+0x10>

0800e274 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e274:	b570      	push	{r4, r5, r6, lr}
 800e276:	4605      	mov	r5, r0
 800e278:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800e27c:	b116      	cbz	r6, 800e284 <osMutexNew+0x10>
  hMutex = NULL;
 800e27e:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800e280:	4620      	mov	r0, r4
 800e282:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800e284:	b110      	cbz	r0, 800e28c <osMutexNew+0x18>
      type = attr->attr_bits;
 800e286:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800e288:	0733      	lsls	r3, r6, #28
 800e28a:	d4f8      	bmi.n	800e27e <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e28c:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800e290:	b17d      	cbz	r5, 800e2b2 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e292:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800e296:	b151      	cbz	r1, 800e2ae <osMutexNew+0x3a>
 800e298:	2b4f      	cmp	r3, #79	@ 0x4f
 800e29a:	d9f0      	bls.n	800e27e <osMutexNew+0xa>
          if (rmtx != 0U) {
 800e29c:	b1de      	cbz	r6, 800e2d6 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e29e:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e2a0:	f000 fec1 	bl	800f026 <xQueueCreateMutexStatic>
 800e2a4:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d0e9      	beq.n	800e27e <osMutexNew+0xa>
          name = attr->name;
 800e2aa:	682d      	ldr	r5, [r5, #0]
 800e2ac:	e00a      	b.n	800e2c4 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d1e5      	bne.n	800e27e <osMutexNew+0xa>
            if (rmtx != 0U) {
 800e2b2:	b196      	cbz	r6, 800e2da <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e2b4:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800e2b6:	f000 feea 	bl	800f08e <xQueueCreateMutex>
 800e2ba:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d0de      	beq.n	800e27e <osMutexNew+0xa>
        if (attr != NULL) {
 800e2c0:	2d00      	cmp	r5, #0
 800e2c2:	d1f2      	bne.n	800e2aa <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f001 f976 	bl	800f5b8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e2cc:	2e00      	cmp	r6, #0
 800e2ce:	d0d7      	beq.n	800e280 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e2d0:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800e2d4:	e7d4      	b.n	800e280 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e2d6:	2001      	movs	r0, #1
 800e2d8:	e7e2      	b.n	800e2a0 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800e2da:	2001      	movs	r0, #1
 800e2dc:	e7eb      	b.n	800e2b6 <osMutexNew+0x42>

0800e2de <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e2de:	b538      	push	{r3, r4, r5, lr}
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e2e4:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800e2e8:	f003 0201 	and.w	r2, r3, #1
 800e2ec:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800e2f0:	b995      	cbnz	r5, 800e318 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d913      	bls.n	800e31e <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800e2f6:	b162      	cbz	r2, 800e312 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e2f8:	f001 f8ef 	bl	800f4da <xQueueTakeMutexRecursive>
 800e2fc:	2801      	cmp	r0, #1
 800e2fe:	d101      	bne.n	800e304 <osMutexAcquire+0x26>
  stat = osOK;
 800e300:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800e302:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800e304:	2c00      	cmp	r4, #0
 800e306:	bf14      	ite	ne
 800e308:	f06f 0001 	mvnne.w	r0, #1
 800e30c:	f06f 0002 	mvneq.w	r0, #2
 800e310:	e7f7      	b.n	800e302 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e312:	f001 f825 	bl	800f360 <xQueueSemaphoreTake>
 800e316:	e7f1      	b.n	800e2fc <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800e318:	f06f 0005 	mvn.w	r0, #5
 800e31c:	e7f1      	b.n	800e302 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800e31e:	f06f 0003 	mvn.w	r0, #3
 800e322:	e7ee      	b.n	800e302 <osMutexAcquire+0x24>

0800e324 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e324:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e326:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e32a:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800e32c:	f002 0301 	and.w	r3, r2, #1
 800e330:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800e334:	b979      	cbnz	r1, 800e356 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800e336:	2a01      	cmp	r2, #1
 800e338:	d910      	bls.n	800e35c <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800e33a:	b13b      	cbz	r3, 800e34c <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e33c:	f000 fe88 	bl	800f050 <xQueueGiveMutexRecursive>
 800e340:	2801      	cmp	r0, #1
  stat = osOK;
 800e342:	bf0c      	ite	eq
 800e344:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800e346:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e34a:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e34c:	461a      	mov	r2, r3
 800e34e:	4619      	mov	r1, r3
 800e350:	f000 fdb7 	bl	800eec2 <xQueueGenericSend>
 800e354:	e7f4      	b.n	800e340 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800e356:	f06f 0005 	mvn.w	r0, #5
 800e35a:	e7f6      	b.n	800e34a <osMutexRelease+0x26>
    stat = osErrorParameter;
 800e35c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e360:	e7f3      	b.n	800e34a <osMutexRelease+0x26>

0800e362 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e364:	4604      	mov	r4, r0
 800e366:	460e      	mov	r6, r1
 800e368:	4615      	mov	r5, r2
 800e36a:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e36e:	b942      	cbnz	r2, 800e382 <osSemaphoreNew+0x20>
 800e370:	b138      	cbz	r0, 800e382 <osSemaphoreNew+0x20>
 800e372:	4288      	cmp	r0, r1
 800e374:	d305      	bcc.n	800e382 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800e376:	b155      	cbz	r5, 800e38e <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e378:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800e37c:	b12b      	cbz	r3, 800e38a <osSemaphoreNew+0x28>
 800e37e:	2f4f      	cmp	r7, #79	@ 0x4f
 800e380:	d822      	bhi.n	800e3c8 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800e382:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800e384:	4620      	mov	r0, r4
 800e386:	b003      	add	sp, #12
 800e388:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e38a:	2f00      	cmp	r7, #0
 800e38c:	d1f9      	bne.n	800e382 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800e38e:	2c01      	cmp	r4, #1
 800e390:	d00c      	beq.n	800e3ac <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e392:	4620      	mov	r0, r4
 800e394:	4631      	mov	r1, r6
 800e396:	f000 fd76 	bl	800ee86 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800e39a:	4604      	mov	r4, r0
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d0f0      	beq.n	800e382 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800e3a0:	b985      	cbnz	r5, 800e3c4 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	f001 f907 	bl	800f5b8 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800e3aa:	e7eb      	b.n	800e384 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800e3ac:	2203      	movs	r2, #3
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	2001      	movs	r0, #1
 800e3b2:	f000 fd1f 	bl	800edf4 <xQueueGenericCreate>
 800e3b6:	e00e      	b.n	800e3d6 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	f000 fd42 	bl	800ee42 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800e3be:	4604      	mov	r4, r0
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	d0de      	beq.n	800e382 <osSemaphoreNew+0x20>
          name = attr->name;
 800e3c4:	682d      	ldr	r5, [r5, #0]
 800e3c6:	e7ec      	b.n	800e3a2 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800e3c8:	2801      	cmp	r0, #1
 800e3ca:	d1f5      	bne.n	800e3b8 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e3cc:	2103      	movs	r1, #3
 800e3ce:	9100      	str	r1, [sp, #0]
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	f000 fcc1 	bl	800ed58 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800e3d6:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d0d2      	beq.n	800e382 <osSemaphoreNew+0x20>
 800e3dc:	2e00      	cmp	r6, #0
 800e3de:	d0df      	beq.n	800e3a0 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	f000 fd6c 	bl	800eec2 <xQueueGenericSend>
 800e3ea:	2801      	cmp	r0, #1
 800e3ec:	d0d8      	beq.n	800e3a0 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f001 f90c 	bl	800f60c <vQueueDelete>
      if (hSemaphore != NULL) {
 800e3f4:	e7c5      	b.n	800e382 <osSemaphoreNew+0x20>

0800e3f6 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e3f6:	b513      	push	{r0, r1, r4, lr}
 800e3f8:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800e3fa:	b328      	cbz	r0, 800e448 <osSemaphoreAcquire+0x52>
 800e3fc:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800e400:	b1cb      	cbz	r3, 800e436 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800e402:	bb09      	cbnz	r1, 800e448 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e404:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800e406:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e408:	f001 f888 	bl	800f51c <xQueueReceiveFromISR>
 800e40c:	2801      	cmp	r0, #1
 800e40e:	d003      	beq.n	800e418 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800e410:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e414:	b002      	add	sp, #8
 800e416:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800e418:	9b01      	ldr	r3, [sp, #4]
 800e41a:	b90b      	cbnz	r3, 800e420 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800e41c:	2000      	movs	r0, #0
 800e41e:	e7f9      	b.n	800e414 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800e420:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e428:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	e7f2      	b.n	800e41c <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e436:	f000 ff93 	bl	800f360 <xQueueSemaphoreTake>
 800e43a:	2801      	cmp	r0, #1
 800e43c:	d0ee      	beq.n	800e41c <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800e43e:	2c00      	cmp	r4, #0
 800e440:	d0e6      	beq.n	800e410 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800e442:	f06f 0001 	mvn.w	r0, #1
 800e446:	e7e5      	b.n	800e414 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800e448:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e44c:	e7e2      	b.n	800e414 <osSemaphoreAcquire+0x1e>

0800e44e <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e44e:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800e450:	b318      	cbz	r0, 800e49a <osSemaphoreRelease+0x4c>
 800e452:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800e456:	b1cb      	cbz	r3, 800e48c <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800e458:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e45a:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800e45c:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e45e:	f000 fe90 	bl	800f182 <xQueueGiveFromISR>
 800e462:	2801      	cmp	r0, #1
 800e464:	d004      	beq.n	800e470 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800e466:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800e46a:	b003      	add	sp, #12
 800e46c:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800e470:	9b01      	ldr	r3, [sp, #4]
 800e472:	b14b      	cbz	r3, 800e488 <osSemaphoreRelease+0x3a>
 800e474:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e47c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800e488:	2000      	movs	r0, #0
 800e48a:	e7ee      	b.n	800e46a <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e48c:	461a      	mov	r2, r3
 800e48e:	4619      	mov	r1, r3
 800e490:	f000 fd17 	bl	800eec2 <xQueueGenericSend>
 800e494:	2801      	cmp	r0, #1
 800e496:	d0f7      	beq.n	800e488 <osSemaphoreRelease+0x3a>
 800e498:	e7e5      	b.n	800e466 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800e49a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e49e:	e7e4      	b.n	800e46a <osSemaphoreRelease+0x1c>

0800e4a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4a2:	4605      	mov	r5, r0
 800e4a4:	460e      	mov	r6, r1
 800e4a6:	4614      	mov	r4, r2
 800e4a8:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e4ac:	b11f      	cbz	r7, 800e4b6 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800e4ae:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	b003      	add	sp, #12
 800e4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d0f9      	beq.n	800e4ae <osMessageQueueNew+0xe>
 800e4ba:	2900      	cmp	r1, #0
 800e4bc:	d0f7      	beq.n	800e4ae <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800e4be:	b1da      	cbz	r2, 800e4f8 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e4c0:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800e4c4:	b183      	cbz	r3, 800e4e8 <osMessageQueueNew+0x48>
 800e4c6:	2a4f      	cmp	r2, #79	@ 0x4f
 800e4c8:	d9f1      	bls.n	800e4ae <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e4ca:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e4cc:	2a00      	cmp	r2, #0
 800e4ce:	d0ee      	beq.n	800e4ae <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e4d0:	434d      	muls	r5, r1
 800e4d2:	6966      	ldr	r6, [r4, #20]
 800e4d4:	42ae      	cmp	r6, r5
 800e4d6:	d3ea      	bcc.n	800e4ae <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e4d8:	9700      	str	r7, [sp, #0]
 800e4da:	f000 fc3d 	bl	800ed58 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800e4de:	4605      	mov	r5, r0
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	d0e4      	beq.n	800e4ae <osMessageQueueNew+0xe>
        name = attr->name;
 800e4e4:	6824      	ldr	r4, [r4, #0]
 800e4e6:	e011      	b.n	800e50c <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e4e8:	2a00      	cmp	r2, #0
 800e4ea:	d1e0      	bne.n	800e4ae <osMessageQueueNew+0xe>
 800e4ec:	6923      	ldr	r3, [r4, #16]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1dd      	bne.n	800e4ae <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e4f2:	6963      	ldr	r3, [r4, #20]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d1da      	bne.n	800e4ae <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	4631      	mov	r1, r6
 800e4fe:	f000 fc79 	bl	800edf4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800e502:	4605      	mov	r5, r0
 800e504:	2800      	cmp	r0, #0
 800e506:	d0d2      	beq.n	800e4ae <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800e508:	2c00      	cmp	r4, #0
 800e50a:	d1eb      	bne.n	800e4e4 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800e50c:	4621      	mov	r1, r4
 800e50e:	4628      	mov	r0, r5
 800e510:	f001 f852 	bl	800f5b8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800e514:	e7cc      	b.n	800e4b0 <osMessageQueueNew+0x10>

0800e516 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e518:	461c      	mov	r4, r3
 800e51a:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e51e:	b1de      	cbz	r6, 800e558 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e520:	b338      	cbz	r0, 800e572 <osMessageQueuePut+0x5c>
 800e522:	b331      	cbz	r1, 800e572 <osMessageQueuePut+0x5c>
 800e524:	bb2b      	cbnz	r3, 800e572 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e526:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800e528:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e52a:	f000 fdcd 	bl	800f0c8 <xQueueGenericSendFromISR>
 800e52e:	2801      	cmp	r0, #1
 800e530:	d003      	beq.n	800e53a <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800e532:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e536:	b002      	add	sp, #8
 800e538:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800e53a:	9b01      	ldr	r3, [sp, #4]
 800e53c:	b90b      	cbnz	r3, 800e542 <osMessageQueuePut+0x2c>
  stat = osOK;
 800e53e:	2000      	movs	r0, #0
 800e540:	e7f9      	b.n	800e536 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800e542:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e54a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e54e:	f3bf 8f4f 	dsb	sy
 800e552:	f3bf 8f6f 	isb	sy
 800e556:	e7f2      	b.n	800e53e <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e558:	b158      	cbz	r0, 800e572 <osMessageQueuePut+0x5c>
 800e55a:	b151      	cbz	r1, 800e572 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e55c:	4633      	mov	r3, r6
 800e55e:	4622      	mov	r2, r4
 800e560:	f000 fcaf 	bl	800eec2 <xQueueGenericSend>
 800e564:	2801      	cmp	r0, #1
 800e566:	d0ea      	beq.n	800e53e <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800e568:	2c00      	cmp	r4, #0
 800e56a:	d0e2      	beq.n	800e532 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800e56c:	f06f 0001 	mvn.w	r0, #1
 800e570:	e7e1      	b.n	800e536 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800e572:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e576:	e7de      	b.n	800e536 <osMessageQueuePut+0x20>

0800e578 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e57a:	461c      	mov	r4, r3
 800e57c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e580:	b1db      	cbz	r3, 800e5ba <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e582:	b330      	cbz	r0, 800e5d2 <osMessageQueueGet+0x5a>
 800e584:	b329      	cbz	r1, 800e5d2 <osMessageQueueGet+0x5a>
 800e586:	bb24      	cbnz	r4, 800e5d2 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e588:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800e58a:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e58c:	f000 ffc6 	bl	800f51c <xQueueReceiveFromISR>
 800e590:	2801      	cmp	r0, #1
 800e592:	d003      	beq.n	800e59c <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800e594:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e598:	b003      	add	sp, #12
 800e59a:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800e59c:	9b01      	ldr	r3, [sp, #4]
 800e59e:	b90b      	cbnz	r3, 800e5a4 <osMessageQueueGet+0x2c>
  stat = osOK;
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	e7f9      	b.n	800e598 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800e5a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e5a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	f3bf 8f6f 	isb	sy
 800e5b8:	e7f2      	b.n	800e5a0 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e5ba:	b150      	cbz	r0, 800e5d2 <osMessageQueueGet+0x5a>
 800e5bc:	b149      	cbz	r1, 800e5d2 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e5be:	4622      	mov	r2, r4
 800e5c0:	f000 fe30 	bl	800f224 <xQueueReceive>
 800e5c4:	2801      	cmp	r0, #1
 800e5c6:	d0eb      	beq.n	800e5a0 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800e5c8:	2c00      	cmp	r4, #0
 800e5ca:	d0e3      	beq.n	800e594 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800e5cc:	f06f 0001 	mvn.w	r0, #1
 800e5d0:	e7e2      	b.n	800e598 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800e5d2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e5d6:	e7df      	b.n	800e598 <osMessageQueueGet+0x20>

0800e5d8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e5d8:	4b03      	ldr	r3, [pc, #12]	@ (800e5e8 <vApplicationGetIdleTaskMemory+0x10>)
 800e5da:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e5dc:	4b03      	ldr	r3, [pc, #12]	@ (800e5ec <vApplicationGetIdleTaskMemory+0x14>)
 800e5de:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e5e0:	2380      	movs	r3, #128	@ 0x80
 800e5e2:	6013      	str	r3, [r2, #0]
}
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	2401008c 	.word	0x2401008c
 800e5ec:	2400fe8c 	.word	0x2400fe8c

0800e5f0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e5f0:	4b03      	ldr	r3, [pc, #12]	@ (800e600 <vApplicationGetTimerTaskMemory+0x10>)
 800e5f2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e5f4:	4b03      	ldr	r3, [pc, #12]	@ (800e604 <vApplicationGetTimerTaskMemory+0x14>)
 800e5f6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e5f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e5fc:	6013      	str	r3, [r2, #0]
}
 800e5fe:	4770      	bx	lr
 800e600:	2400fe2c 	.word	0x2400fe2c
 800e604:	2400fa2c 	.word	0x2400fa2c

0800e608 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e608:	4b10      	ldr	r3, [pc, #64]	@ (800e64c <prvInsertBlockIntoFreeList+0x44>)
{
 800e60a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e60c:	461a      	mov	r2, r3
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4283      	cmp	r3, r0
 800e612:	d3fb      	bcc.n	800e60c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e614:	6854      	ldr	r4, [r2, #4]
 800e616:	1911      	adds	r1, r2, r4
 800e618:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e61a:	bf01      	itttt	eq
 800e61c:	6841      	ldreq	r1, [r0, #4]
 800e61e:	4610      	moveq	r0, r2
 800e620:	1909      	addeq	r1, r1, r4
 800e622:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e624:	6844      	ldr	r4, [r0, #4]
 800e626:	1901      	adds	r1, r0, r4
 800e628:	428b      	cmp	r3, r1
 800e62a:	d10c      	bne.n	800e646 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e62c:	4908      	ldr	r1, [pc, #32]	@ (800e650 <prvInsertBlockIntoFreeList+0x48>)
 800e62e:	6809      	ldr	r1, [r1, #0]
 800e630:	428b      	cmp	r3, r1
 800e632:	d003      	beq.n	800e63c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e634:	6859      	ldr	r1, [r3, #4]
 800e636:	4421      	add	r1, r4
 800e638:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e63a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e63c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e63e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e640:	bf18      	it	ne
 800e642:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e644:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e646:	4619      	mov	r1, r3
 800e648:	e7f8      	b.n	800e63c <prvInsertBlockIntoFreeList+0x34>
 800e64a:	bf00      	nop
 800e64c:	24010108 	.word	0x24010108
 800e650:	24010104 	.word	0x24010104

0800e654 <pvPortMalloc>:
{
 800e654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e658:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800e65a:	f001 f9d9 	bl	800fa10 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e65e:	4940      	ldr	r1, [pc, #256]	@ (800e760 <pvPortMalloc+0x10c>)
 800e660:	4d40      	ldr	r5, [pc, #256]	@ (800e764 <pvPortMalloc+0x110>)
 800e662:	680b      	ldr	r3, [r1, #0]
 800e664:	b9f3      	cbnz	r3, 800e6a4 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800e666:	4a40      	ldr	r2, [pc, #256]	@ (800e768 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800e668:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e66a:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e66c:	4e3f      	ldr	r6, [pc, #252]	@ (800e76c <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e66e:	bf1b      	ittet	ne
 800e670:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e672:	4b3f      	ldrne	r3, [pc, #252]	@ (800e770 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e674:	4b3f      	ldreq	r3, [pc, #252]	@ (800e774 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e676:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800e67a:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e67c:	bf18      	it	ne
 800e67e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e680:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e682:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800e684:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e686:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800e68a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e68e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800e690:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e692:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e696:	4b38      	ldr	r3, [pc, #224]	@ (800e778 <pvPortMalloc+0x124>)
 800e698:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e69a:	4b38      	ldr	r3, [pc, #224]	@ (800e77c <pvPortMalloc+0x128>)
 800e69c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e69e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e6a2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6a4:	682e      	ldr	r6, [r5, #0]
 800e6a6:	4226      	tst	r6, r4
 800e6a8:	d155      	bne.n	800e756 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800e6aa:	2c00      	cmp	r4, #0
 800e6ac:	d046      	beq.n	800e73c <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800e6ae:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e6b2:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e6b4:	bf1c      	itt	ne
 800e6b6:	f023 0307 	bicne.w	r3, r3, #7
 800e6ba:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d04a      	beq.n	800e756 <pvPortMalloc+0x102>
 800e6c0:	4f2e      	ldr	r7, [pc, #184]	@ (800e77c <pvPortMalloc+0x128>)
 800e6c2:	683c      	ldr	r4, [r7, #0]
 800e6c4:	429c      	cmp	r4, r3
 800e6c6:	d346      	bcc.n	800e756 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800e6c8:	4a28      	ldr	r2, [pc, #160]	@ (800e76c <pvPortMalloc+0x118>)
 800e6ca:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6cc:	6868      	ldr	r0, [r5, #4]
 800e6ce:	4298      	cmp	r0, r3
 800e6d0:	d204      	bcs.n	800e6dc <pvPortMalloc+0x88>
 800e6d2:	f8d5 c000 	ldr.w	ip, [r5]
 800e6d6:	f1bc 0f00 	cmp.w	ip, #0
 800e6da:	d115      	bne.n	800e708 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800e6dc:	6809      	ldr	r1, [r1, #0]
 800e6de:	42a9      	cmp	r1, r5
 800e6e0:	d039      	beq.n	800e756 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e6e2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e6e4:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e6e8:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e6ea:	1ac2      	subs	r2, r0, r3
 800e6ec:	2a10      	cmp	r2, #16
 800e6ee:	d912      	bls.n	800e716 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e6f0:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6f2:	0741      	lsls	r1, r0, #29
 800e6f4:	d00b      	beq.n	800e70e <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6fa:	f383 8811 	msr	BASEPRI, r3
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f3bf 8f4f 	dsb	sy
 800e706:	e7fe      	b.n	800e706 <pvPortMalloc+0xb2>
 800e708:	462a      	mov	r2, r5
 800e70a:	4665      	mov	r5, ip
 800e70c:	e7de      	b.n	800e6cc <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e70e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e710:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e712:	f7ff ff79 	bl	800e608 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e716:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e718:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e71a:	4917      	ldr	r1, [pc, #92]	@ (800e778 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e71c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e71e:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e720:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800e722:	4a17      	ldr	r2, [pc, #92]	@ (800e780 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e724:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800e726:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800e728:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e72a:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800e72c:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e730:	bf38      	it	cc
 800e732:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e734:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e738:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800e73a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800e73c:	f001 fa14 	bl	800fb68 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e740:	0763      	lsls	r3, r4, #29
 800e742:	d00a      	beq.n	800e75a <pvPortMalloc+0x106>
 800e744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e748:	f383 8811 	msr	BASEPRI, r3
 800e74c:	f3bf 8f6f 	isb	sy
 800e750:	f3bf 8f4f 	dsb	sy
 800e754:	e7fe      	b.n	800e754 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800e756:	2400      	movs	r4, #0
 800e758:	e7f0      	b.n	800e73c <pvPortMalloc+0xe8>
}
 800e75a:	4620      	mov	r0, r4
 800e75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e760:	24010104 	.word	0x24010104
 800e764:	240100f0 	.word	0x240100f0
 800e768:	24010110 	.word	0x24010110
 800e76c:	24010108 	.word	0x24010108
 800e770:	240287b0 	.word	0x240287b0
 800e774:	000186a0 	.word	0x000186a0
 800e778:	240100fc 	.word	0x240100fc
 800e77c:	24010100 	.word	0x24010100
 800e780:	240100f8 	.word	0x240100f8

0800e784 <vPortFree>:
{
 800e784:	b510      	push	{r4, lr}
	if( pv != NULL )
 800e786:	4604      	mov	r4, r0
 800e788:	b390      	cbz	r0, 800e7f0 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e78a:	4a1a      	ldr	r2, [pc, #104]	@ (800e7f4 <vPortFree+0x70>)
 800e78c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e790:	6812      	ldr	r2, [r2, #0]
 800e792:	4213      	tst	r3, r2
 800e794:	d108      	bne.n	800e7a8 <vPortFree+0x24>
 800e796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79a:	f383 8811 	msr	BASEPRI, r3
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f3bf 8f4f 	dsb	sy
 800e7a6:	e7fe      	b.n	800e7a6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e7a8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e7ac:	b141      	cbz	r1, 800e7c0 <vPortFree+0x3c>
 800e7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	e7fe      	b.n	800e7be <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e7c0:	ea23 0302 	bic.w	r3, r3, r2
 800e7c4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800e7c8:	f001 f922 	bl	800fa10 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e7cc:	4a0a      	ldr	r2, [pc, #40]	@ (800e7f8 <vPortFree+0x74>)
 800e7ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7d2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e7d6:	6811      	ldr	r1, [r2, #0]
 800e7d8:	440b      	add	r3, r1
 800e7da:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7dc:	f7ff ff14 	bl	800e608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e7e0:	4a06      	ldr	r2, [pc, #24]	@ (800e7fc <vPortFree+0x78>)
 800e7e2:	6813      	ldr	r3, [r2, #0]
 800e7e4:	3301      	adds	r3, #1
}
 800e7e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800e7ea:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800e7ec:	f001 b9bc 	b.w	800fb68 <xTaskResumeAll>
}
 800e7f0:	bd10      	pop	{r4, pc}
 800e7f2:	bf00      	nop
 800e7f4:	240100f0 	.word	0x240100f0
 800e7f8:	24010100 	.word	0x24010100
 800e7fc:	240100f4 	.word	0x240100f4

0800e800 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e800:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e804:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e808:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e80a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e80c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e810:	2300      	movs	r3, #0
 800e812:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e814:	4770      	bx	lr

0800e816 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e816:	2300      	movs	r3, #0
 800e818:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e81a:	4770      	bx	lr

0800e81c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e81c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e81e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800e820:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e822:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e824:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e826:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e828:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e82a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e82c:	3301      	adds	r3, #1
 800e82e:	6003      	str	r3, [r0, #0]
}
 800e830:	4770      	bx	lr

0800e832 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e832:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e834:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e836:	1c63      	adds	r3, r4, #1
 800e838:	d10a      	bne.n	800e850 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e83a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e83c:	685a      	ldr	r2, [r3, #4]
 800e83e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e840:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e842:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e844:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e846:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e848:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e84a:	3301      	adds	r3, #1
 800e84c:	6003      	str	r3, [r0, #0]
}
 800e84e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e850:	f100 0208 	add.w	r2, r0, #8
 800e854:	4613      	mov	r3, r2
 800e856:	6852      	ldr	r2, [r2, #4]
 800e858:	6815      	ldr	r5, [r2, #0]
 800e85a:	42a5      	cmp	r5, r4
 800e85c:	d9fa      	bls.n	800e854 <vListInsert+0x22>
 800e85e:	e7ed      	b.n	800e83c <vListInsert+0xa>

0800e860 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e860:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e862:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800e866:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e868:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e86a:	6859      	ldr	r1, [r3, #4]
 800e86c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e86e:	bf08      	it	eq
 800e870:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e872:	2200      	movs	r2, #0
 800e874:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	3a01      	subs	r2, #1
 800e87a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e87c:	6818      	ldr	r0, [r3, #0]
}
 800e87e:	4770      	bx	lr

0800e880 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e880:	4808      	ldr	r0, [pc, #32]	@ (800e8a4 <prvPortStartFirstTask+0x24>)
 800e882:	6800      	ldr	r0, [r0, #0]
 800e884:	6800      	ldr	r0, [r0, #0]
 800e886:	f380 8808 	msr	MSP, r0
 800e88a:	f04f 0000 	mov.w	r0, #0
 800e88e:	f380 8814 	msr	CONTROL, r0
 800e892:	b662      	cpsie	i
 800e894:	b661      	cpsie	f
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	f3bf 8f6f 	isb	sy
 800e89e:	df00      	svc	0
 800e8a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e8a2:	0000      	.short	0x0000
 800e8a4:	e000ed08 	.word	0xe000ed08

0800e8a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e8b8 <vPortEnableVFP+0x10>
 800e8ac:	6801      	ldr	r1, [r0, #0]
 800e8ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e8b2:	6001      	str	r1, [r0, #0]
 800e8b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8b6:	0000      	.short	0x0000
 800e8b8:	e000ed88 	.word	0xe000ed88

0800e8bc <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800e8bc:	2300      	movs	r3, #0
{
 800e8be:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e8c0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800e8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e8f8 <prvTaskExitError+0x3c>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	d008      	beq.n	800e8dc <prvTaskExitError+0x20>
 800e8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	e7fe      	b.n	800e8da <prvTaskExitError+0x1e>
 800e8dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e0:	f383 8811 	msr	BASEPRI, r3
 800e8e4:	f3bf 8f6f 	isb	sy
 800e8e8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800e8ec:	9b01      	ldr	r3, [sp, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d0fc      	beq.n	800e8ec <prvTaskExitError+0x30>
}
 800e8f2:	b002      	add	sp, #8
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop
 800e8f8:	24000078 	.word	0x24000078

0800e8fc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e8fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e900:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e904:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800e908:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e90a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e90c:	4b03      	ldr	r3, [pc, #12]	@ (800e91c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e90e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e910:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e912:	f06f 0302 	mvn.w	r3, #2
 800e916:	6203      	str	r3, [r0, #32]
}
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	0800e8bd 	.word	0x0800e8bd

0800e920 <SVC_Handler>:
	__asm volatile (
 800e920:	4b07      	ldr	r3, [pc, #28]	@ (800e940 <pxCurrentTCBConst2>)
 800e922:	6819      	ldr	r1, [r3, #0]
 800e924:	6808      	ldr	r0, [r1, #0]
 800e926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e92a:	f380 8809 	msr	PSP, r0
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	f04f 0000 	mov.w	r0, #0
 800e936:	f380 8811 	msr	BASEPRI, r0
 800e93a:	4770      	bx	lr
 800e93c:	f3af 8000 	nop.w

0800e940 <pxCurrentTCBConst2>:
 800e940:	24028cf0 	.word	0x24028cf0

0800e944 <vPortEnterCritical>:
 800e944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e948:	f383 8811 	msr	BASEPRI, r3
 800e94c:	f3bf 8f6f 	isb	sy
 800e950:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e954:	4a0a      	ldr	r2, [pc, #40]	@ (800e980 <vPortEnterCritical+0x3c>)
 800e956:	6813      	ldr	r3, [r2, #0]
 800e958:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800e95a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800e95c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e95e:	d10e      	bne.n	800e97e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e960:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e964:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	b143      	cbz	r3, 800e97e <vPortEnterCritical+0x3a>
 800e96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e970:	f383 8811 	msr	BASEPRI, r3
 800e974:	f3bf 8f6f 	isb	sy
 800e978:	f3bf 8f4f 	dsb	sy
 800e97c:	e7fe      	b.n	800e97c <vPortEnterCritical+0x38>
}
 800e97e:	4770      	bx	lr
 800e980:	24000078 	.word	0x24000078

0800e984 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e984:	4a08      	ldr	r2, [pc, #32]	@ (800e9a8 <vPortExitCritical+0x24>)
 800e986:	6813      	ldr	r3, [r2, #0]
 800e988:	b943      	cbnz	r3, 800e99c <vPortExitCritical+0x18>
 800e98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e98e:	f383 8811 	msr	BASEPRI, r3
 800e992:	f3bf 8f6f 	isb	sy
 800e996:	f3bf 8f4f 	dsb	sy
 800e99a:	e7fe      	b.n	800e99a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e99c:	3b01      	subs	r3, #1
 800e99e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e9a0:	b90b      	cbnz	r3, 800e9a6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e9a2:	f383 8811 	msr	BASEPRI, r3
}
 800e9a6:	4770      	bx	lr
 800e9a8:	24000078 	.word	0x24000078
 800e9ac:	00000000 	.word	0x00000000

0800e9b0 <PendSV_Handler>:
	__asm volatile
 800e9b0:	f3ef 8009 	mrs	r0, PSP
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	4b15      	ldr	r3, [pc, #84]	@ (800ea10 <pxCurrentTCBConst>)
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	f01e 0f10 	tst.w	lr, #16
 800e9c0:	bf08      	it	eq
 800e9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ca:	6010      	str	r0, [r2, #0]
 800e9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e9d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e9d4:	f380 8811 	msr	BASEPRI, r0
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f001 f9c4 	bl	800fd6c <vTaskSwitchContext>
 800e9e4:	f04f 0000 	mov.w	r0, #0
 800e9e8:	f380 8811 	msr	BASEPRI, r0
 800e9ec:	bc09      	pop	{r0, r3}
 800e9ee:	6819      	ldr	r1, [r3, #0]
 800e9f0:	6808      	ldr	r0, [r1, #0]
 800e9f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f6:	f01e 0f10 	tst.w	lr, #16
 800e9fa:	bf08      	it	eq
 800e9fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea00:	f380 8809 	msr	PSP, r0
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	f3af 8000 	nop.w

0800ea10 <pxCurrentTCBConst>:
 800ea10:	24028cf0 	.word	0x24028cf0

0800ea14 <xPortSysTickHandler>:
{
 800ea14:	b508      	push	{r3, lr}
	__asm volatile
 800ea16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea1a:	f383 8811 	msr	BASEPRI, r3
 800ea1e:	f3bf 8f6f 	isb	sy
 800ea22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800ea26:	f001 f809 	bl	800fa3c <xTaskIncrementTick>
 800ea2a:	b128      	cbz	r0, 800ea38 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ea30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800ea38:	2300      	movs	r3, #0
 800ea3a:	f383 8811 	msr	BASEPRI, r3
}
 800ea3e:	bd08      	pop	{r3, pc}

0800ea40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea40:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800ea44:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea46:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea4a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea4c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea4e:	4b04      	ldr	r3, [pc, #16]	@ (800ea60 <vPortSetupTimerInterrupt+0x20>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea56:	3b01      	subs	r3, #1
 800ea58:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea5a:	2307      	movs	r3, #7
 800ea5c:	6113      	str	r3, [r2, #16]
}
 800ea5e:	4770      	bx	lr
 800ea60:	2400006c 	.word	0x2400006c

0800ea64 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ea64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800ea68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ea6a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800ea6e:	4a38      	ldr	r2, [pc, #224]	@ (800eb50 <xPortStartScheduler+0xec>)
 800ea70:	4291      	cmp	r1, r2
 800ea72:	d108      	bne.n	800ea86 <xPortStartScheduler+0x22>
	__asm volatile
 800ea74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea78:	f383 8811 	msr	BASEPRI, r3
 800ea7c:	f3bf 8f6f 	isb	sy
 800ea80:	f3bf 8f4f 	dsb	sy
 800ea84:	e7fe      	b.n	800ea84 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ea86:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800ea8a:	4b32      	ldr	r3, [pc, #200]	@ (800eb54 <xPortStartScheduler+0xf0>)
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d108      	bne.n	800eaa2 <xPortStartScheduler+0x3e>
 800ea90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	e7fe      	b.n	800eaa0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eaa2:	4b2d      	ldr	r3, [pc, #180]	@ (800eb58 <xPortStartScheduler+0xf4>)
 800eaa4:	781a      	ldrb	r2, [r3, #0]
 800eaa6:	b2d2      	uxtb	r2, r2
 800eaa8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eaaa:	22ff      	movs	r2, #255	@ 0xff
 800eaac:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eaae:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eab0:	4a2a      	ldr	r2, [pc, #168]	@ (800eb5c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eab8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800eabc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800eac0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eac2:	2307      	movs	r3, #7
 800eac4:	4a26      	ldr	r2, [pc, #152]	@ (800eb60 <xPortStartScheduler+0xfc>)
 800eac6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eac8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800eacc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eace:	0609      	lsls	r1, r1, #24
 800ead0:	d40a      	bmi.n	800eae8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ead2:	2b03      	cmp	r3, #3
 800ead4:	d011      	beq.n	800eafa <xPortStartScheduler+0x96>
 800ead6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eada:	f383 8811 	msr	BASEPRI, r3
 800eade:	f3bf 8f6f 	isb	sy
 800eae2:	f3bf 8f4f 	dsb	sy
 800eae6:	e7fe      	b.n	800eae6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800eae8:	3b01      	subs	r3, #1
 800eaea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eaec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800eaf0:	005b      	lsls	r3, r3, #1
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	f88d 3003 	strb.w	r3, [sp, #3]
 800eaf8:	e7e6      	b.n	800eac8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eafa:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eafe:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800eb02:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb04:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb06:	9b01      	ldr	r3, [sp, #4]
 800eb08:	4a13      	ldr	r2, [pc, #76]	@ (800eb58 <xPortStartScheduler+0xf4>)
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb0e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800eb12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800eb16:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb1a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800eb1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800eb22:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800eb26:	f7ff ff8b 	bl	800ea40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800eb2a:	4b0e      	ldr	r3, [pc, #56]	@ (800eb64 <xPortStartScheduler+0x100>)
 800eb2c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800eb2e:	f7ff febb 	bl	800e8a8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eb32:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800eb36:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800eb3a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800eb3e:	f7ff fe9f 	bl	800e880 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800eb42:	f001 f913 	bl	800fd6c <vTaskSwitchContext>
}
 800eb46:	4628      	mov	r0, r5
	prvTaskExitError();
 800eb48:	f7ff feb8 	bl	800e8bc <prvTaskExitError>
}
 800eb4c:	b003      	add	sp, #12
 800eb4e:	bd30      	pop	{r4, r5, pc}
 800eb50:	410fc271 	.word	0x410fc271
 800eb54:	410fc270 	.word	0x410fc270
 800eb58:	e000e400 	.word	0xe000e400
 800eb5c:	240287b4 	.word	0x240287b4
 800eb60:	240287b0 	.word	0x240287b0
 800eb64:	24000078 	.word	0x24000078

0800eb68 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb68:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb6c:	2b0f      	cmp	r3, #15
 800eb6e:	d90e      	bls.n	800eb8e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb70:	4a11      	ldr	r2, [pc, #68]	@ (800ebb8 <vPortValidateInterruptPriority+0x50>)
 800eb72:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb74:	4a11      	ldr	r2, [pc, #68]	@ (800ebbc <vPortValidateInterruptPriority+0x54>)
 800eb76:	7812      	ldrb	r2, [r2, #0]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d908      	bls.n	800eb8e <vPortValidateInterruptPriority+0x26>
 800eb7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb80:	f383 8811 	msr	BASEPRI, r3
 800eb84:	f3bf 8f6f 	isb	sy
 800eb88:	f3bf 8f4f 	dsb	sy
 800eb8c:	e7fe      	b.n	800eb8c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb8e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800eb92:	4a0b      	ldr	r2, [pc, #44]	@ (800ebc0 <vPortValidateInterruptPriority+0x58>)
 800eb94:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800eb98:	6812      	ldr	r2, [r2, #0]
 800eb9a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d908      	bls.n	800ebb4 <vPortValidateInterruptPriority+0x4c>
 800eba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba6:	f383 8811 	msr	BASEPRI, r3
 800ebaa:	f3bf 8f6f 	isb	sy
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	e7fe      	b.n	800ebb2 <vPortValidateInterruptPriority+0x4a>
	}
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	e000e3f0 	.word	0xe000e3f0
 800ebbc:	240287b4 	.word	0x240287b4
 800ebc0:	240287b0 	.word	0x240287b0

0800ebc4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ebc4:	b510      	push	{r4, lr}
 800ebc6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ebc8:	f7ff febc 	bl	800e944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ebcc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ebce:	f7ff fed9 	bl	800e984 <vPortExitCritical>

	return xReturn;
}
 800ebd2:	fab4 f084 	clz	r0, r4
 800ebd6:	0940      	lsrs	r0, r0, #5
 800ebd8:	bd10      	pop	{r4, pc}

0800ebda <prvCopyDataToQueue>:
{
 800ebda:	b570      	push	{r4, r5, r6, lr}
 800ebdc:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ebde:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800ebe0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebe2:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ebe4:	b942      	cbnz	r2, 800ebf8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebe6:	6806      	ldr	r6, [r0, #0]
 800ebe8:	b99e      	cbnz	r6, 800ec12 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ebea:	6880      	ldr	r0, [r0, #8]
 800ebec:	f001 fa1e 	bl	801002c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ebf0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ebf2:	3501      	adds	r5, #1
 800ebf4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800ebf6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800ebf8:	b96e      	cbnz	r6, 800ec16 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ebfa:	6840      	ldr	r0, [r0, #4]
 800ebfc:	f016 ff0d 	bl	8025a1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec00:	6863      	ldr	r3, [r4, #4]
 800ec02:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ec04:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec06:	68a2      	ldr	r2, [r4, #8]
 800ec08:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec0a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec0c:	bf24      	itt	cs
 800ec0e:	6823      	ldrcs	r3, [r4, #0]
 800ec10:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800ec12:	2000      	movs	r0, #0
 800ec14:	e7ed      	b.n	800ebf2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ec16:	68c0      	ldr	r0, [r0, #12]
 800ec18:	f016 feff 	bl	8025a1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ec1c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ec1e:	68e3      	ldr	r3, [r4, #12]
 800ec20:	4251      	negs	r1, r2
 800ec22:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec24:	6822      	ldr	r2, [r4, #0]
 800ec26:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ec28:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ec2a:	bf3e      	ittt	cc
 800ec2c:	68a3      	ldrcc	r3, [r4, #8]
 800ec2e:	185b      	addcc	r3, r3, r1
 800ec30:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ec32:	2e02      	cmp	r6, #2
 800ec34:	d1ed      	bne.n	800ec12 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec36:	b10d      	cbz	r5, 800ec3c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800ec38:	3d01      	subs	r5, #1
 800ec3a:	e7ea      	b.n	800ec12 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	e7d8      	b.n	800ebf2 <prvCopyDataToQueue+0x18>

0800ec40 <prvCopyDataFromQueue>:
{
 800ec40:	4603      	mov	r3, r0
 800ec42:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ec44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800ec46:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ec48:	b162      	cbz	r2, 800ec64 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec4a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ec4c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec4e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ec50:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec52:	60dc      	str	r4, [r3, #12]
}
 800ec54:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ec58:	bf24      	itt	cs
 800ec5a:	6819      	ldrcs	r1, [r3, #0]
 800ec5c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec5e:	68d9      	ldr	r1, [r3, #12]
 800ec60:	f016 bedb 	b.w	8025a1a <memcpy>
}
 800ec64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec68:	4770      	bx	lr

0800ec6a <prvUnlockQueue>:
{
 800ec6a:	b570      	push	{r4, r5, r6, lr}
 800ec6c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ec6e:	f7ff fe69 	bl	800e944 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ec72:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec76:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800ec7a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec7c:	2d00      	cmp	r5, #0
 800ec7e:	dc14      	bgt.n	800ecaa <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800ec80:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec82:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800ec86:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800ec8a:	f7ff fe7b 	bl	800e984 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ec8e:	f7ff fe59 	bl	800e944 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ec92:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800ec96:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec98:	2d00      	cmp	r5, #0
 800ec9a:	dc12      	bgt.n	800ecc2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800ec9c:	23ff      	movs	r3, #255	@ 0xff
 800ec9e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800eca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800eca6:	f7ff be6d 	b.w	800e984 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ecaa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d0e7      	beq.n	800ec80 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ecb0:	4630      	mov	r0, r6
 800ecb2:	f001 f8d7 	bl	800fe64 <xTaskRemoveFromEventList>
 800ecb6:	b108      	cbz	r0, 800ecbc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800ecb8:	f001 f95e 	bl	800ff78 <vTaskMissedYield>
			--cTxLock;
 800ecbc:	3d01      	subs	r5, #1
 800ecbe:	b26d      	sxtb	r5, r5
 800ecc0:	e7dc      	b.n	800ec7c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecc2:	6923      	ldr	r3, [r4, #16]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d0e9      	beq.n	800ec9c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f001 f8cb 	bl	800fe64 <xTaskRemoveFromEventList>
 800ecce:	b108      	cbz	r0, 800ecd4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800ecd0:	f001 f952 	bl	800ff78 <vTaskMissedYield>
				--cRxLock;
 800ecd4:	3d01      	subs	r5, #1
 800ecd6:	b26d      	sxtb	r5, r5
 800ecd8:	e7de      	b.n	800ec98 <prvUnlockQueue+0x2e>

0800ecda <xQueueGenericReset>:
{
 800ecda:	b538      	push	{r3, r4, r5, lr}
 800ecdc:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800ecde:	4604      	mov	r4, r0
 800ece0:	b940      	cbnz	r0, 800ecf4 <xQueueGenericReset+0x1a>
 800ece2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ece6:	f383 8811 	msr	BASEPRI, r3
 800ecea:	f3bf 8f6f 	isb	sy
 800ecee:	f3bf 8f4f 	dsb	sy
 800ecf2:	e7fe      	b.n	800ecf2 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800ecf4:	f7ff fe26 	bl	800e944 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ecf8:	6822      	ldr	r2, [r4, #0]
 800ecfa:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ecfe:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed00:	434b      	muls	r3, r1
 800ed02:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed04:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed06:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed08:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed0a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800ed0c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed0e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed10:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800ed12:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ed16:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800ed1a:	b9a5      	cbnz	r5, 800ed46 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed1c:	6923      	ldr	r3, [r4, #16]
 800ed1e:	b173      	cbz	r3, 800ed3e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed20:	f104 0010 	add.w	r0, r4, #16
 800ed24:	f001 f89e 	bl	800fe64 <xTaskRemoveFromEventList>
 800ed28:	b148      	cbz	r0, 800ed3e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800ed2a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ed2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed32:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800ed3e:	f7ff fe21 	bl	800e984 <vPortExitCritical>
}
 800ed42:	2001      	movs	r0, #1
 800ed44:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ed46:	f104 0010 	add.w	r0, r4, #16
 800ed4a:	f7ff fd59 	bl	800e800 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ed4e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ed52:	f7ff fd55 	bl	800e800 <vListInitialise>
 800ed56:	e7f2      	b.n	800ed3e <xQueueGenericReset+0x64>

0800ed58 <xQueueGenericCreateStatic>:
	{
 800ed58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed5a:	460d      	mov	r5, r1
 800ed5c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed5e:	b940      	cbnz	r0, 800ed72 <xQueueGenericCreateStatic+0x1a>
 800ed60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed64:	f383 8811 	msr	BASEPRI, r3
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	e7fe      	b.n	800ed70 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800ed72:	b943      	cbnz	r3, 800ed86 <xQueueGenericCreateStatic+0x2e>
 800ed74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed78:	f383 8811 	msr	BASEPRI, r3
 800ed7c:	f3bf 8f6f 	isb	sy
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	e7fe      	b.n	800ed84 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ed86:	b14a      	cbz	r2, 800ed9c <xQueueGenericCreateStatic+0x44>
 800ed88:	b991      	cbnz	r1, 800edb0 <xQueueGenericCreateStatic+0x58>
 800ed8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed8e:	f383 8811 	msr	BASEPRI, r3
 800ed92:	f3bf 8f6f 	isb	sy
 800ed96:	f3bf 8f4f 	dsb	sy
 800ed9a:	e7fe      	b.n	800ed9a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ed9c:	b141      	cbz	r1, 800edb0 <xQueueGenericCreateStatic+0x58>
 800ed9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eda2:	f383 8811 	msr	BASEPRI, r3
 800eda6:	f3bf 8f6f 	isb	sy
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	e7fe      	b.n	800edae <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800edb0:	2350      	movs	r3, #80	@ 0x50
 800edb2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800edb4:	9b01      	ldr	r3, [sp, #4]
 800edb6:	2b50      	cmp	r3, #80	@ 0x50
 800edb8:	d008      	beq.n	800edcc <xQueueGenericCreateStatic+0x74>
 800edba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edbe:	f383 8811 	msr	BASEPRI, r3
 800edc2:	f3bf 8f6f 	isb	sy
 800edc6:	f3bf 8f4f 	dsb	sy
 800edca:	e7fe      	b.n	800edca <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800edcc:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800edce:	2d00      	cmp	r5, #0
 800edd0:	bf08      	it	eq
 800edd2:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800edd4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800edd6:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800edda:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800eddc:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ede0:	4620      	mov	r0, r4
 800ede2:	f7ff ff7a 	bl	800ecda <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ede6:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800edea:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800edec:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800edf0:	b003      	add	sp, #12
 800edf2:	bd30      	pop	{r4, r5, pc}

0800edf4 <xQueueGenericCreate>:
	{
 800edf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf6:	460d      	mov	r5, r1
 800edf8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800edfa:	4606      	mov	r6, r0
 800edfc:	b940      	cbnz	r0, 800ee10 <xQueueGenericCreate+0x1c>
 800edfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	e7fe      	b.n	800ee0e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee10:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ee12:	3050      	adds	r0, #80	@ 0x50
 800ee14:	f7ff fc1e 	bl	800e654 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ee18:	4604      	mov	r4, r0
 800ee1a:	b170      	cbz	r0, 800ee3a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ee22:	b165      	cbz	r5, 800ee3e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee24:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ee28:	2101      	movs	r1, #1
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800ee2e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ee32:	f7ff ff52 	bl	800ecda <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ee36:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ee3e:	4603      	mov	r3, r0
 800ee40:	e7f2      	b.n	800ee28 <xQueueGenericCreate+0x34>

0800ee42 <xQueueCreateCountingSemaphoreStatic>:
	{
 800ee42:	b513      	push	{r0, r1, r4, lr}
 800ee44:	4613      	mov	r3, r2
 800ee46:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ee48:	b940      	cbnz	r0, 800ee5c <xQueueCreateCountingSemaphoreStatic+0x1a>
 800ee4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee4e:	f383 8811 	msr	BASEPRI, r3
 800ee52:	f3bf 8f6f 	isb	sy
 800ee56:	f3bf 8f4f 	dsb	sy
 800ee5a:	e7fe      	b.n	800ee5a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ee5c:	4288      	cmp	r0, r1
 800ee5e:	d208      	bcs.n	800ee72 <xQueueCreateCountingSemaphoreStatic+0x30>
 800ee60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee64:	f383 8811 	msr	BASEPRI, r3
 800ee68:	f3bf 8f6f 	isb	sy
 800ee6c:	f3bf 8f4f 	dsb	sy
 800ee70:	e7fe      	b.n	800ee70 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ee72:	2202      	movs	r2, #2
 800ee74:	9200      	str	r2, [sp, #0]
 800ee76:	2200      	movs	r2, #0
 800ee78:	4611      	mov	r1, r2
 800ee7a:	f7ff ff6d 	bl	800ed58 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800ee7e:	b100      	cbz	r0, 800ee82 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ee80:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800ee82:	b002      	add	sp, #8
 800ee84:	bd10      	pop	{r4, pc}

0800ee86 <xQueueCreateCountingSemaphore>:
	{
 800ee86:	b510      	push	{r4, lr}
 800ee88:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ee8a:	b940      	cbnz	r0, 800ee9e <xQueueCreateCountingSemaphore+0x18>
 800ee8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee90:	f383 8811 	msr	BASEPRI, r3
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	e7fe      	b.n	800ee9c <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ee9e:	4288      	cmp	r0, r1
 800eea0:	d208      	bcs.n	800eeb4 <xQueueCreateCountingSemaphore+0x2e>
 800eea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea6:	f383 8811 	msr	BASEPRI, r3
 800eeaa:	f3bf 8f6f 	isb	sy
 800eeae:	f3bf 8f4f 	dsb	sy
 800eeb2:	e7fe      	b.n	800eeb2 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eeb4:	2202      	movs	r2, #2
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	f7ff ff9c 	bl	800edf4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800eebc:	b100      	cbz	r0, 800eec0 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eebe:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800eec0:	bd10      	pop	{r4, pc}

0800eec2 <xQueueGenericSend>:
{
 800eec2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800eec6:	460f      	mov	r7, r1
 800eec8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800eeca:	4604      	mov	r4, r0
{
 800eecc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800eece:	b940      	cbnz	r0, 800eee2 <xQueueGenericSend+0x20>
 800eed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eed4:	f383 8811 	msr	BASEPRI, r3
 800eed8:	f3bf 8f6f 	isb	sy
 800eedc:	f3bf 8f4f 	dsb	sy
 800eee0:	e7fe      	b.n	800eee0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eee2:	b951      	cbnz	r1, 800eefa <xQueueGenericSend+0x38>
 800eee4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800eee6:	b143      	cbz	r3, 800eefa <xQueueGenericSend+0x38>
 800eee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeec:	f383 8811 	msr	BASEPRI, r3
 800eef0:	f3bf 8f6f 	isb	sy
 800eef4:	f3bf 8f4f 	dsb	sy
 800eef8:	e7fe      	b.n	800eef8 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eefa:	2e02      	cmp	r6, #2
 800eefc:	d10b      	bne.n	800ef16 <xQueueGenericSend+0x54>
 800eefe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d008      	beq.n	800ef16 <xQueueGenericSend+0x54>
 800ef04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef08:	f383 8811 	msr	BASEPRI, r3
 800ef0c:	f3bf 8f6f 	isb	sy
 800ef10:	f3bf 8f4f 	dsb	sy
 800ef14:	e7fe      	b.n	800ef14 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef16:	f001 f83b 	bl	800ff90 <xTaskGetSchedulerState>
 800ef1a:	4605      	mov	r5, r0
 800ef1c:	b330      	cbz	r0, 800ef6c <xQueueGenericSend+0xaa>
 800ef1e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800ef20:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800ef24:	f7ff fd0e 	bl	800e944 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef28:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ef2a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d301      	bcc.n	800ef34 <xQueueGenericSend+0x72>
 800ef30:	2e02      	cmp	r6, #2
 800ef32:	d127      	bne.n	800ef84 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef34:	4632      	mov	r2, r6
 800ef36:	4639      	mov	r1, r7
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f7ff fe4e 	bl	800ebda <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ef40:	b11b      	cbz	r3, 800ef4a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef42:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ef46:	f000 ff8d 	bl	800fe64 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800ef4a:	b148      	cbz	r0, 800ef60 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800ef4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ef50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ef58:	f3bf 8f4f 	dsb	sy
 800ef5c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ef60:	f7ff fd10 	bl	800e984 <vPortExitCritical>
				return pdPASS;
 800ef64:	2001      	movs	r0, #1
}
 800ef66:	b004      	add	sp, #16
 800ef68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef6c:	9b01      	ldr	r3, [sp, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d0d6      	beq.n	800ef20 <xQueueGenericSend+0x5e>
 800ef72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef76:	f383 8811 	msr	BASEPRI, r3
 800ef7a:	f3bf 8f6f 	isb	sy
 800ef7e:	f3bf 8f4f 	dsb	sy
 800ef82:	e7fe      	b.n	800ef82 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef84:	9b01      	ldr	r3, [sp, #4]
 800ef86:	b91b      	cbnz	r3, 800ef90 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800ef88:	f7ff fcfc 	bl	800e984 <vPortExitCritical>
					return errQUEUE_FULL;
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	e7ea      	b.n	800ef66 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800ef90:	b915      	cbnz	r5, 800ef98 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef92:	a802      	add	r0, sp, #8
 800ef94:	f000 ffa8 	bl	800fee8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ef98:	f7ff fcf4 	bl	800e984 <vPortExitCritical>
		vTaskSuspendAll();
 800ef9c:	f000 fd38 	bl	800fa10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800efa0:	f7ff fcd0 	bl	800e944 <vPortEnterCritical>
 800efa4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800efa8:	2bff      	cmp	r3, #255	@ 0xff
 800efaa:	d101      	bne.n	800efb0 <xQueueGenericSend+0xee>
 800efac:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800efb0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800efb4:	2bff      	cmp	r3, #255	@ 0xff
 800efb6:	d101      	bne.n	800efbc <xQueueGenericSend+0xfa>
 800efb8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800efbc:	f7ff fce2 	bl	800e984 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efc0:	a901      	add	r1, sp, #4
 800efc2:	a802      	add	r0, sp, #8
 800efc4:	f000 ff9c 	bl	800ff00 <xTaskCheckForTimeOut>
 800efc8:	bb38      	cbnz	r0, 800f01a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800efca:	f7ff fcbb 	bl	800e944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800efce:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800efd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d10e      	bne.n	800eff4 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800efd6:	f7ff fcd5 	bl	800e984 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800efda:	9901      	ldr	r1, [sp, #4]
 800efdc:	f104 0010 	add.w	r0, r4, #16
 800efe0:	f000 ff08 	bl	800fdf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800efe4:	4620      	mov	r0, r4
 800efe6:	f7ff fe40 	bl	800ec6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800efea:	f000 fdbd 	bl	800fb68 <xTaskResumeAll>
 800efee:	b148      	cbz	r0, 800f004 <xQueueGenericSend+0x142>
 800eff0:	2501      	movs	r5, #1
 800eff2:	e797      	b.n	800ef24 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800eff4:	f7ff fcc6 	bl	800e984 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800eff8:	4620      	mov	r0, r4
 800effa:	f7ff fe36 	bl	800ec6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800effe:	f000 fdb3 	bl	800fb68 <xTaskResumeAll>
 800f002:	e7f5      	b.n	800eff0 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800f004:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f00c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	e7ea      	b.n	800eff0 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800f01a:	4620      	mov	r0, r4
 800f01c:	f7ff fe25 	bl	800ec6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f020:	f000 fda2 	bl	800fb68 <xTaskResumeAll>
			return errQUEUE_FULL;
 800f024:	e7b2      	b.n	800ef8c <xQueueGenericSend+0xca>

0800f026 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f026:	2200      	movs	r2, #0
	{
 800f028:	460b      	mov	r3, r1
 800f02a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f02c:	4611      	mov	r1, r2
 800f02e:	9000      	str	r0, [sp, #0]
 800f030:	2001      	movs	r0, #1
 800f032:	f7ff fe91 	bl	800ed58 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800f036:	4604      	mov	r4, r0
 800f038:	b138      	cbz	r0, 800f04a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f03a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f03c:	461a      	mov	r2, r3
 800f03e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f040:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f042:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f044:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f046:	f7ff ff3c 	bl	800eec2 <xQueueGenericSend>
	}
 800f04a:	4620      	mov	r0, r4
 800f04c:	b002      	add	sp, #8
 800f04e:	bd10      	pop	{r4, pc}

0800f050 <xQueueGiveMutexRecursive>:
	{
 800f050:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800f052:	4604      	mov	r4, r0
 800f054:	b940      	cbnz	r0, 800f068 <xQueueGiveMutexRecursive+0x18>
 800f056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f05a:	f383 8811 	msr	BASEPRI, r3
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	e7fe      	b.n	800f066 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f068:	6885      	ldr	r5, [r0, #8]
 800f06a:	f000 ff8b 	bl	800ff84 <xTaskGetCurrentTaskHandle>
 800f06e:	4285      	cmp	r5, r0
 800f070:	d10b      	bne.n	800f08a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f072:	68e3      	ldr	r3, [r4, #12]
 800f074:	3b01      	subs	r3, #1
 800f076:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f078:	b10b      	cbz	r3, 800f07e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800f07a:	2001      	movs	r0, #1
	}
 800f07c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f07e:	461a      	mov	r2, r3
 800f080:	4619      	mov	r1, r3
 800f082:	4620      	mov	r0, r4
 800f084:	f7ff ff1d 	bl	800eec2 <xQueueGenericSend>
 800f088:	e7f7      	b.n	800f07a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800f08a:	2000      	movs	r0, #0
		return xReturn;
 800f08c:	e7f6      	b.n	800f07c <xQueueGiveMutexRecursive+0x2c>

0800f08e <xQueueCreateMutex>:
	{
 800f08e:	b570      	push	{r4, r5, r6, lr}
 800f090:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f092:	2050      	movs	r0, #80	@ 0x50
 800f094:	f7ff fade 	bl	800e654 <pvPortMalloc>
 800f098:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800f09a:	b198      	cbz	r0, 800f0c4 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f09c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800f09e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f0a0:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f0a2:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800f0a6:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f0aa:	f7ff fe16 	bl	800ecda <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f0ae:	462b      	mov	r3, r5
 800f0b0:	462a      	mov	r2, r5
 800f0b2:	4629      	mov	r1, r5
 800f0b4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800f0b6:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f0ba:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f0bc:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f0be:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f0c0:	f7ff feff 	bl	800eec2 <xQueueGenericSend>
	}
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	bd70      	pop	{r4, r5, r6, pc}

0800f0c8 <xQueueGenericSendFromISR>:
{
 800f0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0cc:	4689      	mov	r9, r1
 800f0ce:	4617      	mov	r7, r2
 800f0d0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	b940      	cbnz	r0, 800f0e8 <xQueueGenericSendFromISR+0x20>
 800f0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0da:	f383 8811 	msr	BASEPRI, r3
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	e7fe      	b.n	800f0e6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0e8:	b951      	cbnz	r1, 800f100 <xQueueGenericSendFromISR+0x38>
 800f0ea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f0ec:	b143      	cbz	r3, 800f100 <xQueueGenericSendFromISR+0x38>
 800f0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f2:	f383 8811 	msr	BASEPRI, r3
 800f0f6:	f3bf 8f6f 	isb	sy
 800f0fa:	f3bf 8f4f 	dsb	sy
 800f0fe:	e7fe      	b.n	800f0fe <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f100:	2e02      	cmp	r6, #2
 800f102:	d10b      	bne.n	800f11c <xQueueGenericSendFromISR+0x54>
 800f104:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f106:	2b01      	cmp	r3, #1
 800f108:	d008      	beq.n	800f11c <xQueueGenericSendFromISR+0x54>
 800f10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f10e:	f383 8811 	msr	BASEPRI, r3
 800f112:	f3bf 8f6f 	isb	sy
 800f116:	f3bf 8f4f 	dsb	sy
 800f11a:	e7fe      	b.n	800f11a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f11c:	f7ff fd24 	bl	800eb68 <vPortValidateInterruptPriority>
	__asm volatile
 800f120:	f3ef 8811 	mrs	r8, BASEPRI
 800f124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f128:	f383 8811 	msr	BASEPRI, r3
 800f12c:	f3bf 8f6f 	isb	sy
 800f130:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f134:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f136:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f138:	429a      	cmp	r2, r3
 800f13a:	d301      	bcc.n	800f140 <xQueueGenericSendFromISR+0x78>
 800f13c:	2e02      	cmp	r6, #2
 800f13e:	d11e      	bne.n	800f17e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800f140:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f144:	4632      	mov	r2, r6
 800f146:	4649      	mov	r1, r9
 800f148:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800f14a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f14c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f14e:	f7ff fd44 	bl	800ebda <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800f152:	1c6b      	adds	r3, r5, #1
 800f154:	d10e      	bne.n	800f174 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f156:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f158:	b13b      	cbz	r3, 800f16a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f15a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f15e:	f000 fe81 	bl	800fe64 <xTaskRemoveFromEventList>
 800f162:	b110      	cbz	r0, 800f16a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800f164:	b10f      	cbz	r7, 800f16a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f166:	2301      	movs	r3, #1
 800f168:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800f16a:	2001      	movs	r0, #1
	__asm volatile
 800f16c:	f388 8811 	msr	BASEPRI, r8
}
 800f170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f174:	3501      	adds	r5, #1
 800f176:	b26d      	sxtb	r5, r5
 800f178:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800f17c:	e7f5      	b.n	800f16a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800f17e:	2000      	movs	r0, #0
 800f180:	e7f4      	b.n	800f16c <xQueueGenericSendFromISR+0xa4>

0800f182 <xQueueGiveFromISR>:
{
 800f182:	b570      	push	{r4, r5, r6, lr}
 800f184:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800f186:	4604      	mov	r4, r0
 800f188:	b940      	cbnz	r0, 800f19c <xQueueGiveFromISR+0x1a>
	__asm volatile
 800f18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f18e:	f383 8811 	msr	BASEPRI, r3
 800f192:	f3bf 8f6f 	isb	sy
 800f196:	f3bf 8f4f 	dsb	sy
 800f19a:	e7fe      	b.n	800f19a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f19c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f19e:	b143      	cbz	r3, 800f1b2 <xQueueGiveFromISR+0x30>
 800f1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a4:	f383 8811 	msr	BASEPRI, r3
 800f1a8:	f3bf 8f6f 	isb	sy
 800f1ac:	f3bf 8f4f 	dsb	sy
 800f1b0:	e7fe      	b.n	800f1b0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f1b2:	6803      	ldr	r3, [r0, #0]
 800f1b4:	b953      	cbnz	r3, 800f1cc <xQueueGiveFromISR+0x4a>
 800f1b6:	6883      	ldr	r3, [r0, #8]
 800f1b8:	b143      	cbz	r3, 800f1cc <xQueueGiveFromISR+0x4a>
 800f1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1be:	f383 8811 	msr	BASEPRI, r3
 800f1c2:	f3bf 8f6f 	isb	sy
 800f1c6:	f3bf 8f4f 	dsb	sy
 800f1ca:	e7fe      	b.n	800f1ca <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f1cc:	f7ff fccc 	bl	800eb68 <vPortValidateInterruptPriority>
	__asm volatile
 800f1d0:	f3ef 8611 	mrs	r6, BASEPRI
 800f1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d8:	f383 8811 	msr	BASEPRI, r3
 800f1dc:	f3bf 8f6f 	isb	sy
 800f1e0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f1e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d919      	bls.n	800f220 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800f1ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f1f0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800f1f2:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800f1f4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f1f6:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800f1f8:	d10d      	bne.n	800f216 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f1fc:	b13b      	cbz	r3, 800f20e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1fe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f202:	f000 fe2f 	bl	800fe64 <xTaskRemoveFromEventList>
 800f206:	b110      	cbz	r0, 800f20e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800f208:	b10d      	cbz	r5, 800f20e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f20a:	2301      	movs	r3, #1
 800f20c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800f20e:	2001      	movs	r0, #1
	__asm volatile
 800f210:	f386 8811 	msr	BASEPRI, r6
}
 800f214:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f216:	3301      	adds	r3, #1
 800f218:	b25b      	sxtb	r3, r3
 800f21a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800f21e:	e7f6      	b.n	800f20e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800f220:	2000      	movs	r0, #0
 800f222:	e7f5      	b.n	800f210 <xQueueGiveFromISR+0x8e>

0800f224 <xQueueReceive>:
{
 800f224:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f228:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800f22a:	4604      	mov	r4, r0
{
 800f22c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800f22e:	b940      	cbnz	r0, 800f242 <xQueueReceive+0x1e>
	__asm volatile
 800f230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f234:	f383 8811 	msr	BASEPRI, r3
 800f238:	f3bf 8f6f 	isb	sy
 800f23c:	f3bf 8f4f 	dsb	sy
 800f240:	e7fe      	b.n	800f240 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f242:	b951      	cbnz	r1, 800f25a <xQueueReceive+0x36>
 800f244:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f246:	b143      	cbz	r3, 800f25a <xQueueReceive+0x36>
 800f248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f24c:	f383 8811 	msr	BASEPRI, r3
 800f250:	f3bf 8f6f 	isb	sy
 800f254:	f3bf 8f4f 	dsb	sy
 800f258:	e7fe      	b.n	800f258 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f25a:	f000 fe99 	bl	800ff90 <xTaskGetSchedulerState>
 800f25e:	4605      	mov	r5, r0
 800f260:	b318      	cbz	r0, 800f2aa <xQueueReceive+0x86>
 800f262:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800f264:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800f268:	f7ff fb6c 	bl	800e944 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f26c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f26e:	b347      	cbz	r7, 800f2c2 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f270:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f272:	4631      	mov	r1, r6
 800f274:	4620      	mov	r0, r4
 800f276:	f7ff fce3 	bl	800ec40 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f27a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f27c:	6923      	ldr	r3, [r4, #16]
 800f27e:	b173      	cbz	r3, 800f29e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f280:	f104 0010 	add.w	r0, r4, #16
 800f284:	f000 fdee 	bl	800fe64 <xTaskRemoveFromEventList>
 800f288:	b148      	cbz	r0, 800f29e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800f28a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f28e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f292:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f296:	f3bf 8f4f 	dsb	sy
 800f29a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800f29e:	f7ff fb71 	bl	800e984 <vPortExitCritical>
				return pdPASS;
 800f2a2:	2001      	movs	r0, #1
}
 800f2a4:	b004      	add	sp, #16
 800f2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2aa:	9b01      	ldr	r3, [sp, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d0d9      	beq.n	800f264 <xQueueReceive+0x40>
 800f2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b4:	f383 8811 	msr	BASEPRI, r3
 800f2b8:	f3bf 8f6f 	isb	sy
 800f2bc:	f3bf 8f4f 	dsb	sy
 800f2c0:	e7fe      	b.n	800f2c0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f2c2:	9b01      	ldr	r3, [sp, #4]
 800f2c4:	b91b      	cbnz	r3, 800f2ce <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800f2c6:	f7ff fb5d 	bl	800e984 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f2ca:	2000      	movs	r0, #0
 800f2cc:	e7ea      	b.n	800f2a4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800f2ce:	b915      	cbnz	r5, 800f2d6 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f2d0:	a802      	add	r0, sp, #8
 800f2d2:	f000 fe09 	bl	800fee8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800f2d6:	f7ff fb55 	bl	800e984 <vPortExitCritical>
		vTaskSuspendAll();
 800f2da:	f000 fb99 	bl	800fa10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f2de:	f7ff fb31 	bl	800e944 <vPortEnterCritical>
 800f2e2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f2e6:	2bff      	cmp	r3, #255	@ 0xff
 800f2e8:	d101      	bne.n	800f2ee <xQueueReceive+0xca>
 800f2ea:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800f2ee:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f2f2:	2bff      	cmp	r3, #255	@ 0xff
 800f2f4:	d101      	bne.n	800f2fa <xQueueReceive+0xd6>
 800f2f6:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800f2fa:	f7ff fb43 	bl	800e984 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2fe:	a901      	add	r1, sp, #4
 800f300:	a802      	add	r0, sp, #8
 800f302:	f000 fdfd 	bl	800ff00 <xTaskCheckForTimeOut>
 800f306:	bb00      	cbnz	r0, 800f34a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f308:	4620      	mov	r0, r4
 800f30a:	f7ff fc5b 	bl	800ebc4 <prvIsQueueEmpty>
 800f30e:	b1b0      	cbz	r0, 800f33e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f310:	9901      	ldr	r1, [sp, #4]
 800f312:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f316:	f000 fd6d 	bl	800fdf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f31a:	4620      	mov	r0, r4
 800f31c:	f7ff fca5 	bl	800ec6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f320:	f000 fc22 	bl	800fb68 <xTaskResumeAll>
 800f324:	b948      	cbnz	r0, 800f33a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800f326:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f32a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f32e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f332:	f3bf 8f4f 	dsb	sy
 800f336:	f3bf 8f6f 	isb	sy
 800f33a:	2501      	movs	r5, #1
 800f33c:	e794      	b.n	800f268 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800f33e:	4620      	mov	r0, r4
 800f340:	f7ff fc93 	bl	800ec6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f344:	f000 fc10 	bl	800fb68 <xTaskResumeAll>
 800f348:	e7f7      	b.n	800f33a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800f34a:	4620      	mov	r0, r4
 800f34c:	f7ff fc8d 	bl	800ec6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f350:	f000 fc0a 	bl	800fb68 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f354:	4620      	mov	r0, r4
 800f356:	f7ff fc35 	bl	800ebc4 <prvIsQueueEmpty>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d0ed      	beq.n	800f33a <xQueueReceive+0x116>
 800f35e:	e7b4      	b.n	800f2ca <xQueueReceive+0xa6>

0800f360 <xQueueSemaphoreTake>:
{
 800f360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f362:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800f364:	4604      	mov	r4, r0
{
 800f366:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800f368:	b940      	cbnz	r0, 800f37c <xQueueSemaphoreTake+0x1c>
 800f36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	e7fe      	b.n	800f37a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f37c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800f37e:	b145      	cbz	r5, 800f392 <xQueueSemaphoreTake+0x32>
 800f380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f384:	f383 8811 	msr	BASEPRI, r3
 800f388:	f3bf 8f6f 	isb	sy
 800f38c:	f3bf 8f4f 	dsb	sy
 800f390:	e7fe      	b.n	800f390 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f392:	f000 fdfd 	bl	800ff90 <xTaskGetSchedulerState>
 800f396:	4606      	mov	r6, r0
 800f398:	b320      	cbz	r0, 800f3e4 <xQueueSemaphoreTake+0x84>
 800f39a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800f39c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800f39e:	f7ff fad1 	bl	800e944 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f3a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f3a4:	b353      	cbz	r3, 800f3fc <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f3a6:	3b01      	subs	r3, #1
 800f3a8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3aa:	6823      	ldr	r3, [r4, #0]
 800f3ac:	b913      	cbnz	r3, 800f3b4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f3ae:	f000 fecd 	bl	801014c <pvTaskIncrementMutexHeldCount>
 800f3b2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3b4:	6923      	ldr	r3, [r4, #16]
 800f3b6:	b173      	cbz	r3, 800f3d6 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3b8:	f104 0010 	add.w	r0, r4, #16
 800f3bc:	f000 fd52 	bl	800fe64 <xTaskRemoveFromEventList>
 800f3c0:	b148      	cbz	r0, 800f3d6 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800f3c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f3c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f3ce:	f3bf 8f4f 	dsb	sy
 800f3d2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800f3d6:	f7ff fad5 	bl	800e984 <vPortExitCritical>
				return pdPASS;
 800f3da:	2001      	movs	r0, #1
}
 800f3dc:	b005      	add	sp, #20
 800f3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3e0:	4635      	mov	r5, r6
 800f3e2:	e7db      	b.n	800f39c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3e4:	9b01      	ldr	r3, [sp, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d0fa      	beq.n	800f3e0 <xQueueSemaphoreTake+0x80>
 800f3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ee:	f383 8811 	msr	BASEPRI, r3
 800f3f2:	f3bf 8f6f 	isb	sy
 800f3f6:	f3bf 8f4f 	dsb	sy
 800f3fa:	e7fe      	b.n	800f3fa <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f3fc:	9b01      	ldr	r3, [sp, #4]
 800f3fe:	b953      	cbnz	r3, 800f416 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f400:	2d00      	cmp	r5, #0
 800f402:	d066      	beq.n	800f4d2 <xQueueSemaphoreTake+0x172>
 800f404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	e7fe      	b.n	800f414 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800f416:	b916      	cbnz	r6, 800f41e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f418:	a802      	add	r0, sp, #8
 800f41a:	f000 fd65 	bl	800fee8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800f41e:	f7ff fab1 	bl	800e984 <vPortExitCritical>
		vTaskSuspendAll();
 800f422:	f000 faf5 	bl	800fa10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f426:	f7ff fa8d 	bl	800e944 <vPortEnterCritical>
 800f42a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f42e:	2bff      	cmp	r3, #255	@ 0xff
 800f430:	d101      	bne.n	800f436 <xQueueSemaphoreTake+0xd6>
 800f432:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800f436:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f43a:	2bff      	cmp	r3, #255	@ 0xff
 800f43c:	d101      	bne.n	800f442 <xQueueSemaphoreTake+0xe2>
 800f43e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f442:	f7ff fa9f 	bl	800e984 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f446:	a901      	add	r1, sp, #4
 800f448:	a802      	add	r0, sp, #8
 800f44a:	f000 fd59 	bl	800ff00 <xTaskCheckForTimeOut>
 800f44e:	bb50      	cbnz	r0, 800f4a6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f450:	4620      	mov	r0, r4
 800f452:	f7ff fbb7 	bl	800ebc4 <prvIsQueueEmpty>
 800f456:	b300      	cbz	r0, 800f49a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	b93b      	cbnz	r3, 800f46c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800f45c:	f7ff fa72 	bl	800e944 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f460:	68a0      	ldr	r0, [r4, #8]
 800f462:	f000 fda5 	bl	800ffb0 <xTaskPriorityInherit>
 800f466:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800f468:	f7ff fa8c 	bl	800e984 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f46c:	9901      	ldr	r1, [sp, #4]
 800f46e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f472:	f000 fcbf 	bl	800fdf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f476:	4620      	mov	r0, r4
 800f478:	f7ff fbf7 	bl	800ec6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f47c:	f000 fb74 	bl	800fb68 <xTaskResumeAll>
 800f480:	b948      	cbnz	r0, 800f496 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800f482:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f48a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f48e:	f3bf 8f4f 	dsb	sy
 800f492:	f3bf 8f6f 	isb	sy
 800f496:	2601      	movs	r6, #1
 800f498:	e781      	b.n	800f39e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800f49a:	4620      	mov	r0, r4
 800f49c:	f7ff fbe5 	bl	800ec6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f4a0:	f000 fb62 	bl	800fb68 <xTaskResumeAll>
 800f4a4:	e7f7      	b.n	800f496 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f7ff fbdf 	bl	800ec6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f4ac:	f000 fb5c 	bl	800fb68 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f7ff fb87 	bl	800ebc4 <prvIsQueueEmpty>
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d0ed      	beq.n	800f496 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800f4ba:	b165      	cbz	r5, 800f4d6 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800f4bc:	f7ff fa42 	bl	800e944 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f4c0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f4c2:	b119      	cbz	r1, 800f4cc <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f4c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f4c6:	6819      	ldr	r1, [r3, #0]
 800f4c8:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f4cc:	68a0      	ldr	r0, [r4, #8]
 800f4ce:	f000 fdef 	bl	80100b0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800f4d2:	f7ff fa57 	bl	800e984 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	e780      	b.n	800f3dc <xQueueSemaphoreTake+0x7c>

0800f4da <xQueueTakeMutexRecursive>:
	{
 800f4da:	b570      	push	{r4, r5, r6, lr}
 800f4dc:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800f4de:	4604      	mov	r4, r0
 800f4e0:	b940      	cbnz	r0, 800f4f4 <xQueueTakeMutexRecursive+0x1a>
 800f4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e6:	f383 8811 	msr	BASEPRI, r3
 800f4ea:	f3bf 8f6f 	isb	sy
 800f4ee:	f3bf 8f4f 	dsb	sy
 800f4f2:	e7fe      	b.n	800f4f2 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f4f4:	6886      	ldr	r6, [r0, #8]
 800f4f6:	f000 fd45 	bl	800ff84 <xTaskGetCurrentTaskHandle>
 800f4fa:	4286      	cmp	r6, r0
 800f4fc:	d104      	bne.n	800f508 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f4fe:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800f500:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f502:	3301      	adds	r3, #1
 800f504:	60e3      	str	r3, [r4, #12]
	}
 800f506:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f508:	4629      	mov	r1, r5
 800f50a:	4620      	mov	r0, r4
 800f50c:	f7ff ff28 	bl	800f360 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800f510:	2800      	cmp	r0, #0
 800f512:	d0f8      	beq.n	800f506 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f514:	68e3      	ldr	r3, [r4, #12]
 800f516:	3301      	adds	r3, #1
 800f518:	60e3      	str	r3, [r4, #12]
 800f51a:	e7f4      	b.n	800f506 <xQueueTakeMutexRecursive+0x2c>

0800f51c <xQueueReceiveFromISR>:
{
 800f51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f520:	4689      	mov	r9, r1
 800f522:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800f524:	4604      	mov	r4, r0
 800f526:	b940      	cbnz	r0, 800f53a <xQueueReceiveFromISR+0x1e>
 800f528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f52c:	f383 8811 	msr	BASEPRI, r3
 800f530:	f3bf 8f6f 	isb	sy
 800f534:	f3bf 8f4f 	dsb	sy
 800f538:	e7fe      	b.n	800f538 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f53a:	b951      	cbnz	r1, 800f552 <xQueueReceiveFromISR+0x36>
 800f53c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f53e:	b143      	cbz	r3, 800f552 <xQueueReceiveFromISR+0x36>
 800f540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f544:	f383 8811 	msr	BASEPRI, r3
 800f548:	f3bf 8f6f 	isb	sy
 800f54c:	f3bf 8f4f 	dsb	sy
 800f550:	e7fe      	b.n	800f550 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f552:	f7ff fb09 	bl	800eb68 <vPortValidateInterruptPriority>
	__asm volatile
 800f556:	f3ef 8711 	mrs	r7, BASEPRI
 800f55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f55e:	f383 8811 	msr	BASEPRI, r3
 800f562:	f3bf 8f6f 	isb	sy
 800f566:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f56a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f56c:	b30d      	cbz	r5, 800f5b2 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800f56e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f572:	4649      	mov	r1, r9
 800f574:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f576:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800f578:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f57a:	f7ff fb61 	bl	800ec40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f57e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800f580:	1c73      	adds	r3, r6, #1
 800f582:	d111      	bne.n	800f5a8 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f584:	6923      	ldr	r3, [r4, #16]
 800f586:	b153      	cbz	r3, 800f59e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f588:	f104 0010 	add.w	r0, r4, #16
 800f58c:	f000 fc6a 	bl	800fe64 <xTaskRemoveFromEventList>
 800f590:	b128      	cbz	r0, 800f59e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800f592:	f1b8 0f00 	cmp.w	r8, #0
 800f596:	d002      	beq.n	800f59e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f598:	2301      	movs	r3, #1
 800f59a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800f59e:	2001      	movs	r0, #1
	__asm volatile
 800f5a0:	f387 8811 	msr	BASEPRI, r7
}
 800f5a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f5a8:	3601      	adds	r6, #1
 800f5aa:	b276      	sxtb	r6, r6
 800f5ac:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800f5b0:	e7f5      	b.n	800f59e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	e7f4      	b.n	800f5a0 <xQueueReceiveFromISR+0x84>
	...

0800f5b8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5b8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f5ba:	4a07      	ldr	r2, [pc, #28]	@ (800f5d8 <vQueueAddToRegistry+0x20>)
	{
 800f5bc:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f5be:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800f5c2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800f5c6:	b91d      	cbnz	r5, 800f5d0 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f5c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f5cc:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f5ce:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	2b08      	cmp	r3, #8
 800f5d4:	d1f3      	bne.n	800f5be <vQueueAddToRegistry+0x6>
 800f5d6:	e7fa      	b.n	800f5ce <vQueueAddToRegistry+0x16>
 800f5d8:	240287b8 	.word	0x240287b8

0800f5dc <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5dc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f5de:	4a09      	ldr	r2, [pc, #36]	@ (800f604 <vQueueUnregisterQueue+0x28>)
	{
 800f5e0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f5e2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f5e6:	00dc      	lsls	r4, r3, #3
 800f5e8:	4281      	cmp	r1, r0
 800f5ea:	d106      	bne.n	800f5fa <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f5ec:	4a06      	ldr	r2, [pc, #24]	@ (800f608 <vQueueUnregisterQueue+0x2c>)
 800f5ee:	2100      	movs	r1, #0
 800f5f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f5f4:	4422      	add	r2, r4
 800f5f6:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f5f8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	2b08      	cmp	r3, #8
 800f5fe:	d1f0      	bne.n	800f5e2 <vQueueUnregisterQueue+0x6>
 800f600:	e7fa      	b.n	800f5f8 <vQueueUnregisterQueue+0x1c>
 800f602:	bf00      	nop
 800f604:	240287bc 	.word	0x240287bc
 800f608:	240287b8 	.word	0x240287b8

0800f60c <vQueueDelete>:
{
 800f60c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800f60e:	b940      	cbnz	r0, 800f622 <vQueueDelete+0x16>
	__asm volatile
 800f610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f614:	f383 8811 	msr	BASEPRI, r3
 800f618:	f3bf 8f6f 	isb	sy
 800f61c:	f3bf 8f4f 	dsb	sy
 800f620:	e7fe      	b.n	800f620 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800f622:	f7ff ffdb 	bl	800f5dc <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f626:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800f62a:	b91b      	cbnz	r3, 800f634 <vQueueDelete+0x28>
}
 800f62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800f630:	f7ff b8a8 	b.w	800e784 <vPortFree>
}
 800f634:	bd10      	pop	{r4, pc}

0800f636 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f636:	b570      	push	{r4, r5, r6, lr}
 800f638:	4604      	mov	r4, r0
 800f63a:	460d      	mov	r5, r1
 800f63c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f63e:	f7ff f981 	bl	800e944 <vPortEnterCritical>
 800f642:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f646:	2bff      	cmp	r3, #255	@ 0xff
 800f648:	d102      	bne.n	800f650 <vQueueWaitForMessageRestricted+0x1a>
 800f64a:	2300      	movs	r3, #0
 800f64c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800f650:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f654:	2bff      	cmp	r3, #255	@ 0xff
 800f656:	d102      	bne.n	800f65e <vQueueWaitForMessageRestricted+0x28>
 800f658:	2300      	movs	r3, #0
 800f65a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800f65e:	f7ff f991 	bl	800e984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f662:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800f664:	b92b      	cbnz	r3, 800f672 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f666:	4632      	mov	r2, r6
 800f668:	4629      	mov	r1, r5
 800f66a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f66e:	f000 fbdb 	bl	800fe28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f672:	4620      	mov	r0, r4
	}
 800f674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800f678:	f7ff baf7 	b.w	800ec6a <prvUnlockQueue>

0800f67c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f680:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f682:	f7ff f95f 	bl	800e944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f686:	4b2f      	ldr	r3, [pc, #188]	@ (800f744 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800f688:	4e2f      	ldr	r6, [pc, #188]	@ (800f748 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	4f2f      	ldr	r7, [pc, #188]	@ (800f74c <prvAddNewTaskToReadyList+0xd0>)
 800f68e:	3201      	adds	r2, #1
 800f690:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800f692:	6835      	ldr	r5, [r6, #0]
 800f694:	2d00      	cmp	r5, #0
 800f696:	d14a      	bne.n	800f72e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f698:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d11f      	bne.n	800f6e0 <prvAddNewTaskToReadyList+0x64>
 800f6a0:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6a2:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f6a4:	4640      	mov	r0, r8
 800f6a6:	f7ff f8ab 	bl	800e800 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6aa:	f108 0814 	add.w	r8, r8, #20
 800f6ae:	2d38      	cmp	r5, #56	@ 0x38
 800f6b0:	d1f7      	bne.n	800f6a2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f6b2:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800f774 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800f6b6:	4d26      	ldr	r5, [pc, #152]	@ (800f750 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800f6b8:	4640      	mov	r0, r8
 800f6ba:	f7ff f8a1 	bl	800e800 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f6be:	4628      	mov	r0, r5
 800f6c0:	f7ff f89e 	bl	800e800 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f6c4:	4823      	ldr	r0, [pc, #140]	@ (800f754 <prvAddNewTaskToReadyList+0xd8>)
 800f6c6:	f7ff f89b 	bl	800e800 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f6ca:	4823      	ldr	r0, [pc, #140]	@ (800f758 <prvAddNewTaskToReadyList+0xdc>)
 800f6cc:	f7ff f898 	bl	800e800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f6d0:	4822      	ldr	r0, [pc, #136]	@ (800f75c <prvAddNewTaskToReadyList+0xe0>)
 800f6d2:	f7ff f895 	bl	800e800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f6d6:	4b22      	ldr	r3, [pc, #136]	@ (800f760 <prvAddNewTaskToReadyList+0xe4>)
 800f6d8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f6dc:	4b21      	ldr	r3, [pc, #132]	@ (800f764 <prvAddNewTaskToReadyList+0xe8>)
 800f6de:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800f6e0:	4a21      	ldr	r2, [pc, #132]	@ (800f768 <prvAddNewTaskToReadyList+0xec>)
 800f6e2:	6813      	ldr	r3, [r2, #0]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800f6e8:	4a20      	ldr	r2, [pc, #128]	@ (800f76c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f6ea:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800f6ec:	6811      	ldr	r1, [r2, #0]
 800f6ee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f6f0:	428b      	cmp	r3, r1
 800f6f2:	d900      	bls.n	800f6f6 <prvAddNewTaskToReadyList+0x7a>
 800f6f4:	6013      	str	r3, [r2, #0]
 800f6f6:	2014      	movs	r0, #20
 800f6f8:	1d21      	adds	r1, r4, #4
 800f6fa:	fb00 7003 	mla	r0, r0, r3, r7
 800f6fe:	f7ff f88d 	bl	800e81c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800f702:	f7ff f93f 	bl	800e984 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800f706:	4b1a      	ldr	r3, [pc, #104]	@ (800f770 <prvAddNewTaskToReadyList+0xf4>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	b173      	cbz	r3, 800f72a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f70c:	6833      	ldr	r3, [r6, #0]
 800f70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f710:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f712:	429a      	cmp	r2, r3
 800f714:	d209      	bcs.n	800f72a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800f716:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f71a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f71e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f722:	f3bf 8f4f 	dsb	sy
 800f726:	f3bf 8f6f 	isb	sy
}
 800f72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800f72e:	4b10      	ldr	r3, [pc, #64]	@ (800f770 <prvAddNewTaskToReadyList+0xf4>)
 800f730:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f732:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800f734:	2a00      	cmp	r2, #0
 800f736:	d1d3      	bne.n	800f6e0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f738:	6832      	ldr	r2, [r6, #0]
 800f73a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d8cf      	bhi.n	800f6e0 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800f740:	6034      	str	r4, [r6, #0]
 800f742:	e7cd      	b.n	800f6e0 <prvAddNewTaskToReadyList+0x64>
 800f744:	2402881c 	.word	0x2402881c
 800f748:	24028cf0 	.word	0x24028cf0
 800f74c:	24028890 	.word	0x24028890
 800f750:	24028868 	.word	0x24028868
 800f754:	2402884c 	.word	0x2402884c
 800f758:	24028838 	.word	0x24028838
 800f75c:	24028820 	.word	0x24028820
 800f760:	24028864 	.word	0x24028864
 800f764:	24028860 	.word	0x24028860
 800f768:	24028800 	.word	0x24028800
 800f76c:	24028814 	.word	0x24028814
 800f770:	24028810 	.word	0x24028810
 800f774:	2402887c 	.word	0x2402887c

0800f778 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f77a:	4b15      	ldr	r3, [pc, #84]	@ (800f7d0 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800f77c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f77e:	4d15      	ldr	r5, [pc, #84]	@ (800f7d4 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800f780:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800f782:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f784:	6828      	ldr	r0, [r5, #0]
 800f786:	3004      	adds	r0, #4
 800f788:	f7ff f86a 	bl	800e860 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f78c:	1c73      	adds	r3, r6, #1
 800f78e:	d107      	bne.n	800f7a0 <prvAddCurrentTaskToDelayedList+0x28>
 800f790:	b137      	cbz	r7, 800f7a0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f792:	6829      	ldr	r1, [r5, #0]
 800f794:	4810      	ldr	r0, [pc, #64]	@ (800f7d8 <prvAddCurrentTaskToDelayedList+0x60>)
 800f796:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f79c:	f7ff b83e 	b.w	800e81c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f7a0:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f7a2:	682b      	ldr	r3, [r5, #0]
 800f7a4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f7a6:	d307      	bcc.n	800f7b8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7a8:	4b0c      	ldr	r3, [pc, #48]	@ (800f7dc <prvAddCurrentTaskToDelayedList+0x64>)
 800f7aa:	6818      	ldr	r0, [r3, #0]
 800f7ac:	6829      	ldr	r1, [r5, #0]
}
 800f7ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7b2:	3104      	adds	r1, #4
 800f7b4:	f7ff b83d 	b.w	800e832 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7b8:	4b09      	ldr	r3, [pc, #36]	@ (800f7e0 <prvAddCurrentTaskToDelayedList+0x68>)
 800f7ba:	6818      	ldr	r0, [r3, #0]
 800f7bc:	6829      	ldr	r1, [r5, #0]
 800f7be:	3104      	adds	r1, #4
 800f7c0:	f7ff f837 	bl	800e832 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f7c4:	4b07      	ldr	r3, [pc, #28]	@ (800f7e4 <prvAddCurrentTaskToDelayedList+0x6c>)
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	42a2      	cmp	r2, r4
 800f7ca:	d900      	bls.n	800f7ce <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800f7cc:	601c      	str	r4, [r3, #0]
}
 800f7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7d0:	24028818 	.word	0x24028818
 800f7d4:	24028cf0 	.word	0x24028cf0
 800f7d8:	24028820 	.word	0x24028820
 800f7dc:	24028860 	.word	0x24028860
 800f7e0:	24028864 	.word	0x24028864
 800f7e4:	240287fc 	.word	0x240287fc

0800f7e8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7e8:	4a06      	ldr	r2, [pc, #24]	@ (800f804 <prvResetNextTaskUnblockTime+0x1c>)
 800f7ea:	6813      	ldr	r3, [r2, #0]
 800f7ec:	6819      	ldr	r1, [r3, #0]
 800f7ee:	4b06      	ldr	r3, [pc, #24]	@ (800f808 <prvResetNextTaskUnblockTime+0x20>)
 800f7f0:	b919      	cbnz	r1, 800f7fa <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800f7f2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f7f6:	601a      	str	r2, [r3, #0]
}
 800f7f8:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7fa:	6812      	ldr	r2, [r2, #0]
 800f7fc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f7fe:	68d2      	ldr	r2, [r2, #12]
 800f800:	6852      	ldr	r2, [r2, #4]
 800f802:	e7f8      	b.n	800f7f6 <prvResetNextTaskUnblockTime+0xe>
 800f804:	24028864 	.word	0x24028864
 800f808:	240287fc 	.word	0x240287fc

0800f80c <prvDeleteTCB>:
	{
 800f80c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f80e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800f812:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f814:	b93b      	cbnz	r3, 800f826 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800f816:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800f818:	f7fe ffb4 	bl	800e784 <vPortFree>
				vPortFree( pxTCB );
 800f81c:	4620      	mov	r0, r4
	}
 800f81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800f822:	f7fe bfaf 	b.w	800e784 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f826:	2b01      	cmp	r3, #1
 800f828:	d0f9      	beq.n	800f81e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f82a:	2b02      	cmp	r3, #2
 800f82c:	d008      	beq.n	800f840 <prvDeleteTCB+0x34>
 800f82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	e7fe      	b.n	800f83e <prvDeleteTCB+0x32>
	}
 800f840:	bd10      	pop	{r4, pc}
	...

0800f844 <prvIdleTask>:
{
 800f844:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f846:	4c14      	ldr	r4, [pc, #80]	@ (800f898 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f848:	4f14      	ldr	r7, [pc, #80]	@ (800f89c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800f84a:	4d15      	ldr	r5, [pc, #84]	@ (800f8a0 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f84c:	6823      	ldr	r3, [r4, #0]
 800f84e:	b983      	cbnz	r3, 800f872 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f850:	4b14      	ldr	r3, [pc, #80]	@ (800f8a4 <prvIdleTask+0x60>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b01      	cmp	r3, #1
 800f856:	d909      	bls.n	800f86c <prvIdleTask+0x28>
				taskYIELD();
 800f858:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f85c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f860:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f864:	f3bf 8f4f 	dsb	sy
 800f868:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800f86c:	f7f0 ff44 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f870:	e7eb      	b.n	800f84a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800f872:	f7ff f867 	bl	800e944 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f87a:	1d30      	adds	r0, r6, #4
 800f87c:	f7fe fff0 	bl	800e860 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f880:	682b      	ldr	r3, [r5, #0]
 800f882:	3b01      	subs	r3, #1
 800f884:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f886:	6823      	ldr	r3, [r4, #0]
 800f888:	3b01      	subs	r3, #1
 800f88a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800f88c:	f7ff f87a 	bl	800e984 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800f890:	4630      	mov	r0, r6
 800f892:	f7ff ffbb 	bl	800f80c <prvDeleteTCB>
 800f896:	e7d9      	b.n	800f84c <prvIdleTask+0x8>
 800f898:	24028834 	.word	0x24028834
 800f89c:	24028838 	.word	0x24028838
 800f8a0:	2402881c 	.word	0x2402881c
 800f8a4:	24028890 	.word	0x24028890

0800f8a8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f8ac:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f8ae:	4607      	mov	r7, r0
 800f8b0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f8b2:	21a5      	movs	r1, #165	@ 0xa5
 800f8b4:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f8b6:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f8b8:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f8ba:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f8be:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800f8c0:	f015 ffca 	bl	8025858 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f8c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f8c6:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f8c8:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800f8cc:	b3b5      	cbz	r5, 800f93c <prvInitialiseNewTask.constprop.0+0x94>
 800f8ce:	1e6b      	subs	r3, r5, #1
 800f8d0:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800f8d4:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f8d6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f8da:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800f8de:	b109      	cbz	r1, 800f8e4 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8e0:	42ab      	cmp	r3, r5
 800f8e2:	d1f8      	bne.n	800f8d6 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f8ea:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800f8ec:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f8f0:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f8f2:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800f8f4:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f8f8:	bf28      	it	cs
 800f8fa:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800f8fc:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800f8fe:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f900:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f904:	f7fe ff87 	bl	800e816 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f908:	f104 0018 	add.w	r0, r4, #24
 800f90c:	f7fe ff83 	bl	800e816 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800f910:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f914:	4642      	mov	r2, r8
 800f916:	4639      	mov	r1, r7
 800f918:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f91a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f91c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f91e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800f920:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f924:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f928:	f7fe ffe8 	bl	800e8fc <pxPortInitialiseStack>
 800f92c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800f92e:	f1b9 0f00 	cmp.w	r9, #0
 800f932:	d001      	beq.n	800f938 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f934:	f8c9 4000 	str.w	r4, [r9]
}
 800f938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f93c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800f940:	e7d3      	b.n	800f8ea <prvInitialiseNewTask.constprop.0+0x42>

0800f942 <xTaskCreateStatic>:
	{
 800f942:	b570      	push	{r4, r5, r6, lr}
 800f944:	b086      	sub	sp, #24
 800f946:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800f94a:	b945      	cbnz	r5, 800f95e <xTaskCreateStatic+0x1c>
 800f94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f950:	f383 8811 	msr	BASEPRI, r3
 800f954:	f3bf 8f6f 	isb	sy
 800f958:	f3bf 8f4f 	dsb	sy
 800f95c:	e7fe      	b.n	800f95c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800f95e:	b944      	cbnz	r4, 800f972 <xTaskCreateStatic+0x30>
 800f960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f964:	f383 8811 	msr	BASEPRI, r3
 800f968:	f3bf 8f6f 	isb	sy
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	e7fe      	b.n	800f970 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800f972:	2660      	movs	r6, #96	@ 0x60
 800f974:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f976:	9e05      	ldr	r6, [sp, #20]
 800f978:	2e60      	cmp	r6, #96	@ 0x60
 800f97a:	d008      	beq.n	800f98e <xTaskCreateStatic+0x4c>
 800f97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f980:	f383 8811 	msr	BASEPRI, r3
 800f984:	f3bf 8f6f 	isb	sy
 800f988:	f3bf 8f4f 	dsb	sy
 800f98c:	e7fe      	b.n	800f98c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f98e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f990:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f992:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f994:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f998:	ad04      	add	r5, sp, #16
 800f99a:	9402      	str	r4, [sp, #8]
 800f99c:	9501      	str	r5, [sp, #4]
 800f99e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800f9a0:	9500      	str	r5, [sp, #0]
 800f9a2:	f7ff ff81 	bl	800f8a8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f7ff fe68 	bl	800f67c <prvAddNewTaskToReadyList>
	}
 800f9ac:	9804      	ldr	r0, [sp, #16]
 800f9ae:	b006      	add	sp, #24
 800f9b0:	bd70      	pop	{r4, r5, r6, pc}

0800f9b2 <xTaskCreate>:
	{
 800f9b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9b6:	4607      	mov	r7, r0
 800f9b8:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f9ba:	0090      	lsls	r0, r2, #2
	{
 800f9bc:	4688      	mov	r8, r1
 800f9be:	4616      	mov	r6, r2
 800f9c0:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f9c2:	f7fe fe47 	bl	800e654 <pvPortMalloc>
			if( pxStack != NULL )
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	b920      	cbnz	r0, 800f9d4 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f9ca:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800f9ce:	b005      	add	sp, #20
 800f9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f9d4:	2060      	movs	r0, #96	@ 0x60
 800f9d6:	f7fe fe3d 	bl	800e654 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800f9da:	4604      	mov	r4, r0
 800f9dc:	b198      	cbz	r0, 800fa06 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f9de:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800f9e0:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f9e2:	4632      	mov	r2, r6
 800f9e4:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f9e6:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f9ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f9ec:	9002      	str	r0, [sp, #8]
 800f9ee:	4638      	mov	r0, r7
 800f9f0:	9301      	str	r3, [sp, #4]
 800f9f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	464b      	mov	r3, r9
 800f9f8:	f7ff ff56 	bl	800f8a8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	f7ff fe3d 	bl	800f67c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fa02:	2001      	movs	r0, #1
 800fa04:	e7e3      	b.n	800f9ce <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800fa06:	4628      	mov	r0, r5
 800fa08:	f7fe febc 	bl	800e784 <vPortFree>
		if( pxNewTCB != NULL )
 800fa0c:	e7dd      	b.n	800f9ca <xTaskCreate+0x18>
	...

0800fa10 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800fa10:	4a02      	ldr	r2, [pc, #8]	@ (800fa1c <vTaskSuspendAll+0xc>)
 800fa12:	6813      	ldr	r3, [r2, #0]
 800fa14:	3301      	adds	r3, #1
 800fa16:	6013      	str	r3, [r2, #0]
}
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	240287f8 	.word	0x240287f8

0800fa20 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800fa20:	4b01      	ldr	r3, [pc, #4]	@ (800fa28 <xTaskGetTickCount+0x8>)
 800fa22:	6818      	ldr	r0, [r3, #0]
}
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop
 800fa28:	24028818 	.word	0x24028818

0800fa2c <xTaskGetTickCountFromISR>:
{
 800fa2c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa2e:	f7ff f89b 	bl	800eb68 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800fa32:	4b01      	ldr	r3, [pc, #4]	@ (800fa38 <xTaskGetTickCountFromISR+0xc>)
 800fa34:	6818      	ldr	r0, [r3, #0]
}
 800fa36:	bd08      	pop	{r3, pc}
 800fa38:	24028818 	.word	0x24028818

0800fa3c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa3c:	4b3f      	ldr	r3, [pc, #252]	@ (800fb3c <xTaskIncrementTick+0x100>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
{
 800fa40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d172      	bne.n	800fb2e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fa48:	4b3d      	ldr	r3, [pc, #244]	@ (800fb40 <xTaskIncrementTick+0x104>)
 800fa4a:	681c      	ldr	r4, [r3, #0]
 800fa4c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800fa4e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fa50:	b9bc      	cbnz	r4, 800fa82 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800fa52:	4b3c      	ldr	r3, [pc, #240]	@ (800fb44 <xTaskIncrementTick+0x108>)
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	6812      	ldr	r2, [r2, #0]
 800fa58:	b142      	cbz	r2, 800fa6c <xTaskIncrementTick+0x30>
 800fa5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa5e:	f383 8811 	msr	BASEPRI, r3
 800fa62:	f3bf 8f6f 	isb	sy
 800fa66:	f3bf 8f4f 	dsb	sy
 800fa6a:	e7fe      	b.n	800fa6a <xTaskIncrementTick+0x2e>
 800fa6c:	4a36      	ldr	r2, [pc, #216]	@ (800fb48 <xTaskIncrementTick+0x10c>)
 800fa6e:	6819      	ldr	r1, [r3, #0]
 800fa70:	6810      	ldr	r0, [r2, #0]
 800fa72:	6018      	str	r0, [r3, #0]
 800fa74:	6011      	str	r1, [r2, #0]
 800fa76:	4a35      	ldr	r2, [pc, #212]	@ (800fb4c <xTaskIncrementTick+0x110>)
 800fa78:	6813      	ldr	r3, [r2, #0]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	6013      	str	r3, [r2, #0]
 800fa7e:	f7ff feb3 	bl	800f7e8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fa82:	4d33      	ldr	r5, [pc, #204]	@ (800fb50 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800fa84:	f04f 0b00 	mov.w	fp, #0
 800fa88:	4e32      	ldr	r6, [pc, #200]	@ (800fb54 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fa8a:	682b      	ldr	r3, [r5, #0]
 800fa8c:	4f32      	ldr	r7, [pc, #200]	@ (800fb58 <xTaskIncrementTick+0x11c>)
 800fa8e:	429c      	cmp	r4, r3
 800fa90:	d212      	bcs.n	800fab8 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa92:	683a      	ldr	r2, [r7, #0]
 800fa94:	2114      	movs	r1, #20
 800fa96:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800fa98:	434a      	muls	r2, r1
 800fa9a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800fa9c:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800fa9e:	4a2f      	ldr	r2, [pc, #188]	@ (800fb5c <xTaskIncrementTick+0x120>)
 800faa0:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800faa2:	bf28      	it	cs
 800faa4:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800faa8:	2a00      	cmp	r2, #0
 800faaa:	bf18      	it	ne
 800faac:	f04f 0b01 	movne.w	fp, #1
}
 800fab0:	4658      	mov	r0, fp
 800fab2:	b003      	add	sp, #12
 800fab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fab8:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800fb44 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800fabc:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800fb64 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fac0:	f8d9 2000 	ldr.w	r2, [r9]
 800fac4:	6812      	ldr	r2, [r2, #0]
 800fac6:	b91a      	cbnz	r2, 800fad0 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fac8:	f04f 32ff 	mov.w	r2, #4294967295
 800facc:	602a      	str	r2, [r5, #0]
					break;
 800face:	e7e0      	b.n	800fa92 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fad0:	f8d9 2000 	ldr.w	r2, [r9]
 800fad4:	68d2      	ldr	r2, [r2, #12]
 800fad6:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fada:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800fade:	428c      	cmp	r4, r1
 800fae0:	d201      	bcs.n	800fae6 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800fae2:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fae4:	e7d5      	b.n	800fa92 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fae6:	f108 0304 	add.w	r3, r8, #4
 800faea:	4618      	mov	r0, r3
 800faec:	9301      	str	r3, [sp, #4]
 800faee:	f7fe feb7 	bl	800e860 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800faf2:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800faf6:	b119      	cbz	r1, 800fb00 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800faf8:	f108 0018 	add.w	r0, r8, #24
 800fafc:	f7fe feb0 	bl	800e860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb00:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800fb04:	f8da 1000 	ldr.w	r1, [sl]
 800fb08:	4288      	cmp	r0, r1
 800fb0a:	d901      	bls.n	800fb10 <xTaskIncrementTick+0xd4>
 800fb0c:	f8ca 0000 	str.w	r0, [sl]
 800fb10:	2314      	movs	r3, #20
 800fb12:	9901      	ldr	r1, [sp, #4]
 800fb14:	fb03 6000 	mla	r0, r3, r0, r6
 800fb18:	f7fe fe80 	bl	800e81c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb1c:	6838      	ldr	r0, [r7, #0]
 800fb1e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800fb22:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800fb24:	4291      	cmp	r1, r2
 800fb26:	bf28      	it	cs
 800fb28:	f04f 0b01 	movcs.w	fp, #1
 800fb2c:	e7c8      	b.n	800fac0 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800fb2e:	4a0c      	ldr	r2, [pc, #48]	@ (800fb60 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800fb30:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800fb34:	6813      	ldr	r3, [r2, #0]
 800fb36:	3301      	adds	r3, #1
 800fb38:	6013      	str	r3, [r2, #0]
 800fb3a:	e7b9      	b.n	800fab0 <xTaskIncrementTick+0x74>
 800fb3c:	240287f8 	.word	0x240287f8
 800fb40:	24028818 	.word	0x24028818
 800fb44:	24028864 	.word	0x24028864
 800fb48:	24028860 	.word	0x24028860
 800fb4c:	24028804 	.word	0x24028804
 800fb50:	240287fc 	.word	0x240287fc
 800fb54:	24028890 	.word	0x24028890
 800fb58:	24028cf0 	.word	0x24028cf0
 800fb5c:	24028808 	.word	0x24028808
 800fb60:	2402880c 	.word	0x2402880c
 800fb64:	24028814 	.word	0x24028814

0800fb68 <xTaskResumeAll>:
{
 800fb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800fb6c:	4c30      	ldr	r4, [pc, #192]	@ (800fc30 <xTaskResumeAll+0xc8>)
 800fb6e:	6823      	ldr	r3, [r4, #0]
 800fb70:	b943      	cbnz	r3, 800fb84 <xTaskResumeAll+0x1c>
 800fb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb76:	f383 8811 	msr	BASEPRI, r3
 800fb7a:	f3bf 8f6f 	isb	sy
 800fb7e:	f3bf 8f4f 	dsb	sy
 800fb82:	e7fe      	b.n	800fb82 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800fb84:	f7fe fede 	bl	800e944 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800fb88:	6823      	ldr	r3, [r4, #0]
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb8e:	6824      	ldr	r4, [r4, #0]
 800fb90:	b12c      	cbz	r4, 800fb9e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800fb92:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fb94:	f7fe fef6 	bl	800e984 <vPortExitCritical>
}
 800fb98:	4620      	mov	r0, r4
 800fb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb9e:	4b25      	ldr	r3, [pc, #148]	@ (800fc34 <xTaskResumeAll+0xcc>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d0f5      	beq.n	800fb92 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fba6:	4d24      	ldr	r5, [pc, #144]	@ (800fc38 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800fba8:	4e24      	ldr	r6, [pc, #144]	@ (800fc3c <xTaskResumeAll+0xd4>)
 800fbaa:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800fc4c <xTaskResumeAll+0xe4>
 800fbae:	e01d      	b.n	800fbec <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbb0:	68eb      	ldr	r3, [r5, #12]
 800fbb2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbb4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbb6:	f104 0018 	add.w	r0, r4, #24
 800fbba:	f7fe fe51 	bl	800e860 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbbe:	4638      	mov	r0, r7
 800fbc0:	f7fe fe4e 	bl	800e860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fbc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fbc6:	6832      	ldr	r2, [r6, #0]
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d900      	bls.n	800fbce <xTaskResumeAll+0x66>
 800fbcc:	6033      	str	r3, [r6, #0]
 800fbce:	2014      	movs	r0, #20
 800fbd0:	4639      	mov	r1, r7
 800fbd2:	fb00 8003 	mla	r0, r0, r3, r8
 800fbd6:	f7fe fe21 	bl	800e81c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbda:	4b19      	ldr	r3, [pc, #100]	@ (800fc40 <xTaskResumeAll+0xd8>)
 800fbdc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d302      	bcc.n	800fbec <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800fbe6:	4b17      	ldr	r3, [pc, #92]	@ (800fc44 <xTaskResumeAll+0xdc>)
 800fbe8:	2201      	movs	r2, #1
 800fbea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbec:	682b      	ldr	r3, [r5, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d1de      	bne.n	800fbb0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800fbf2:	b10c      	cbz	r4, 800fbf8 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800fbf4:	f7ff fdf8 	bl	800f7e8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fbf8:	4d13      	ldr	r5, [pc, #76]	@ (800fc48 <xTaskResumeAll+0xe0>)
 800fbfa:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800fbfc:	b144      	cbz	r4, 800fc10 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800fbfe:	4e11      	ldr	r6, [pc, #68]	@ (800fc44 <xTaskResumeAll+0xdc>)
 800fc00:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800fc02:	f7ff ff1b 	bl	800fa3c <xTaskIncrementTick>
 800fc06:	b100      	cbz	r0, 800fc0a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800fc08:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fc0a:	3c01      	subs	r4, #1
 800fc0c:	d1f9      	bne.n	800fc02 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800fc0e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800fc10:	4b0c      	ldr	r3, [pc, #48]	@ (800fc44 <xTaskResumeAll+0xdc>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d0bc      	beq.n	800fb92 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800fc18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fc1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc20:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fc24:	f3bf 8f4f 	dsb	sy
 800fc28:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800fc2c:	2401      	movs	r4, #1
 800fc2e:	e7b1      	b.n	800fb94 <xTaskResumeAll+0x2c>
 800fc30:	240287f8 	.word	0x240287f8
 800fc34:	2402881c 	.word	0x2402881c
 800fc38:	2402884c 	.word	0x2402884c
 800fc3c:	24028814 	.word	0x24028814
 800fc40:	24028cf0 	.word	0x24028cf0
 800fc44:	24028808 	.word	0x24028808
 800fc48:	2402880c 	.word	0x2402880c
 800fc4c:	24028890 	.word	0x24028890

0800fc50 <vTaskDelay>:
	{
 800fc50:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fc52:	b950      	cbnz	r0, 800fc6a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800fc54:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fc58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fc60:	f3bf 8f4f 	dsb	sy
 800fc64:	f3bf 8f6f 	isb	sy
	}
 800fc68:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800fc6a:	4b0a      	ldr	r3, [pc, #40]	@ (800fc94 <vTaskDelay+0x44>)
 800fc6c:	6819      	ldr	r1, [r3, #0]
 800fc6e:	b141      	cbz	r1, 800fc82 <vTaskDelay+0x32>
 800fc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc74:	f383 8811 	msr	BASEPRI, r3
 800fc78:	f3bf 8f6f 	isb	sy
 800fc7c:	f3bf 8f4f 	dsb	sy
 800fc80:	e7fe      	b.n	800fc80 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800fc82:	f7ff fec5 	bl	800fa10 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fc86:	f7ff fd77 	bl	800f778 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800fc8a:	f7ff ff6d 	bl	800fb68 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d0e0      	beq.n	800fc54 <vTaskDelay+0x4>
 800fc92:	e7e9      	b.n	800fc68 <vTaskDelay+0x18>
 800fc94:	240287f8 	.word	0x240287f8

0800fc98 <vTaskSetApplicationTaskTag>:
	{
 800fc98:	b538      	push	{r3, r4, r5, lr}
 800fc9a:	460d      	mov	r5, r1
		if( xTask == NULL )
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	b908      	cbnz	r0, 800fca4 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800fca0:	4b04      	ldr	r3, [pc, #16]	@ (800fcb4 <vTaskSetApplicationTaskTag+0x1c>)
 800fca2:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800fca4:	f7fe fe4e 	bl	800e944 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800fca8:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800fcaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800fcae:	f7fe be69 	b.w	800e984 <vPortExitCritical>
 800fcb2:	bf00      	nop
 800fcb4:	24028cf0 	.word	0x24028cf0

0800fcb8 <xTaskCallApplicationTaskHook>:
	{
 800fcb8:	4603      	mov	r3, r0
 800fcba:	4608      	mov	r0, r1
		if( xTask == NULL )
 800fcbc:	b90b      	cbnz	r3, 800fcc2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800fcbe:	4b03      	ldr	r3, [pc, #12]	@ (800fccc <xTaskCallApplicationTaskHook+0x14>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800fcc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcc4:	b103      	cbz	r3, 800fcc8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800fcc6:	4718      	bx	r3
	}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	4770      	bx	lr
 800fccc:	24028cf0 	.word	0x24028cf0

0800fcd0 <vTaskStartScheduler>:
{
 800fcd0:	b510      	push	{r4, lr}
 800fcd2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fcd4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fcd6:	aa07      	add	r2, sp, #28
 800fcd8:	a906      	add	r1, sp, #24
 800fcda:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fcdc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fce0:	f7fe fc7a 	bl	800e5d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fce4:	9b05      	ldr	r3, [sp, #20]
 800fce6:	9a07      	ldr	r2, [sp, #28]
 800fce8:	9302      	str	r3, [sp, #8]
 800fcea:	9b06      	ldr	r3, [sp, #24]
 800fcec:	4919      	ldr	r1, [pc, #100]	@ (800fd54 <vTaskStartScheduler+0x84>)
 800fcee:	481a      	ldr	r0, [pc, #104]	@ (800fd58 <vTaskStartScheduler+0x88>)
 800fcf0:	e9cd 4300 	strd	r4, r3, [sp]
 800fcf4:	4623      	mov	r3, r4
 800fcf6:	f7ff fe24 	bl	800f942 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800fcfa:	b340      	cbz	r0, 800fd4e <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800fcfc:	f000 fa84 	bl	8010208 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800fd00:	2801      	cmp	r0, #1
 800fd02:	d119      	bne.n	800fd38 <vTaskStartScheduler+0x68>
 800fd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd08:	f383 8811 	msr	BASEPRI, r3
 800fd0c:	f3bf 8f6f 	isb	sy
 800fd10:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800fd14:	f04f 32ff 	mov.w	r2, #4294967295
 800fd18:	4b10      	ldr	r3, [pc, #64]	@ (800fd5c <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800fd1a:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800fd1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fd1e:	4b10      	ldr	r3, [pc, #64]	@ (800fd60 <vTaskStartScheduler+0x90>)
 800fd20:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fd22:	4b10      	ldr	r3, [pc, #64]	@ (800fd64 <vTaskStartScheduler+0x94>)
 800fd24:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800fd26:	4b10      	ldr	r3, [pc, #64]	@ (800fd68 <vTaskStartScheduler+0x98>)
 800fd28:	6818      	ldr	r0, [r3, #0]
 800fd2a:	f7ff ffc5 	bl	800fcb8 <xTaskCallApplicationTaskHook>
}
 800fd2e:	b008      	add	sp, #32
 800fd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800fd34:	f7fe be96 	b.w	800ea64 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fd38:	3001      	adds	r0, #1
 800fd3a:	d108      	bne.n	800fd4e <vTaskStartScheduler+0x7e>
 800fd3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd40:	f383 8811 	msr	BASEPRI, r3
 800fd44:	f3bf 8f6f 	isb	sy
 800fd48:	f3bf 8f4f 	dsb	sy
 800fd4c:	e7fe      	b.n	800fd4c <vTaskStartScheduler+0x7c>
}
 800fd4e:	b008      	add	sp, #32
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	bf00      	nop
 800fd54:	080291a8 	.word	0x080291a8
 800fd58:	0800f845 	.word	0x0800f845
 800fd5c:	240287fc 	.word	0x240287fc
 800fd60:	24028810 	.word	0x24028810
 800fd64:	24028818 	.word	0x24028818
 800fd68:	24028cf0 	.word	0x24028cf0

0800fd6c <vTaskSwitchContext>:
{
 800fd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fd6e:	4b1c      	ldr	r3, [pc, #112]	@ (800fde0 <vTaskSwitchContext+0x74>)
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	4b1c      	ldr	r3, [pc, #112]	@ (800fde4 <vTaskSwitchContext+0x78>)
 800fd74:	b112      	cbz	r2, 800fd7c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800fd76:	2201      	movs	r2, #1
 800fd78:	601a      	str	r2, [r3, #0]
}
 800fd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800fd7c:	4c1a      	ldr	r4, [pc, #104]	@ (800fde8 <vTaskSwitchContext+0x7c>)
 800fd7e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd80:	4e1a      	ldr	r6, [pc, #104]	@ (800fdec <vTaskSwitchContext+0x80>)
 800fd82:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800fd84:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800fd86:	6820      	ldr	r0, [r4, #0]
 800fd88:	f7ff ff96 	bl	800fcb8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd8c:	6832      	ldr	r2, [r6, #0]
 800fd8e:	4918      	ldr	r1, [pc, #96]	@ (800fdf0 <vTaskSwitchContext+0x84>)
 800fd90:	fb07 f302 	mul.w	r3, r7, r2
 800fd94:	58cd      	ldr	r5, [r1, r3]
 800fd96:	18c8      	adds	r0, r1, r3
 800fd98:	b1ad      	cbz	r5, 800fdc6 <vTaskSwitchContext+0x5a>
 800fd9a:	6845      	ldr	r5, [r0, #4]
 800fd9c:	3308      	adds	r3, #8
 800fd9e:	686d      	ldr	r5, [r5, #4]
 800fda0:	440b      	add	r3, r1
 800fda2:	429d      	cmp	r5, r3
 800fda4:	6045      	str	r5, [r0, #4]
 800fda6:	bf04      	itt	eq
 800fda8:	686b      	ldreq	r3, [r5, #4]
 800fdaa:	6043      	streq	r3, [r0, #4]
 800fdac:	2314      	movs	r3, #20
 800fdae:	fb03 1102 	mla	r1, r3, r2, r1
 800fdb2:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800fdb4:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	6023      	str	r3, [r4, #0]
 800fdba:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800fdbc:	6820      	ldr	r0, [r4, #0]
}
 800fdbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800fdc2:	f7ff bf79 	b.w	800fcb8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdc6:	b942      	cbnz	r2, 800fdda <vTaskSwitchContext+0x6e>
 800fdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdcc:	f383 8811 	msr	BASEPRI, r3
 800fdd0:	f3bf 8f6f 	isb	sy
 800fdd4:	f3bf 8f4f 	dsb	sy
 800fdd8:	e7fe      	b.n	800fdd8 <vTaskSwitchContext+0x6c>
 800fdda:	3a01      	subs	r2, #1
 800fddc:	e7d8      	b.n	800fd90 <vTaskSwitchContext+0x24>
 800fdde:	bf00      	nop
 800fde0:	240287f8 	.word	0x240287f8
 800fde4:	24028808 	.word	0x24028808
 800fde8:	24028cf0 	.word	0x24028cf0
 800fdec:	24028814 	.word	0x24028814
 800fdf0:	24028890 	.word	0x24028890

0800fdf4 <vTaskPlaceOnEventList>:
{
 800fdf4:	b510      	push	{r4, lr}
 800fdf6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800fdf8:	b940      	cbnz	r0, 800fe0c <vTaskPlaceOnEventList+0x18>
 800fdfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdfe:	f383 8811 	msr	BASEPRI, r3
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	e7fe      	b.n	800fe0a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe0c:	4b05      	ldr	r3, [pc, #20]	@ (800fe24 <vTaskPlaceOnEventList+0x30>)
 800fe0e:	6819      	ldr	r1, [r3, #0]
 800fe10:	3118      	adds	r1, #24
 800fe12:	f7fe fd0e 	bl	800e832 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe16:	4620      	mov	r0, r4
 800fe18:	2101      	movs	r1, #1
}
 800fe1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe1e:	f7ff bcab 	b.w	800f778 <prvAddCurrentTaskToDelayedList>
 800fe22:	bf00      	nop
 800fe24:	24028cf0 	.word	0x24028cf0

0800fe28 <vTaskPlaceOnEventListRestricted>:
	{
 800fe28:	b538      	push	{r3, r4, r5, lr}
 800fe2a:	460d      	mov	r5, r1
 800fe2c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800fe2e:	b940      	cbnz	r0, 800fe42 <vTaskPlaceOnEventListRestricted+0x1a>
 800fe30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe34:	f383 8811 	msr	BASEPRI, r3
 800fe38:	f3bf 8f6f 	isb	sy
 800fe3c:	f3bf 8f4f 	dsb	sy
 800fe40:	e7fe      	b.n	800fe40 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe42:	4b07      	ldr	r3, [pc, #28]	@ (800fe60 <vTaskPlaceOnEventListRestricted+0x38>)
 800fe44:	6819      	ldr	r1, [r3, #0]
 800fe46:	3118      	adds	r1, #24
 800fe48:	f7fe fce8 	bl	800e81c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800fe4c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fe4e:	4621      	mov	r1, r4
 800fe50:	bf0c      	ite	eq
 800fe52:	4628      	moveq	r0, r5
 800fe54:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800fe58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fe5c:	f7ff bc8c 	b.w	800f778 <prvAddCurrentTaskToDelayedList>
 800fe60:	24028cf0 	.word	0x24028cf0

0800fe64 <xTaskRemoveFromEventList>:
{
 800fe64:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe66:	68c3      	ldr	r3, [r0, #12]
 800fe68:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800fe6a:	b944      	cbnz	r4, 800fe7e <xTaskRemoveFromEventList+0x1a>
 800fe6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe70:	f383 8811 	msr	BASEPRI, r3
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	e7fe      	b.n	800fe7c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fe7e:	f104 0518 	add.w	r5, r4, #24
 800fe82:	4628      	mov	r0, r5
 800fe84:	f7fe fcec 	bl	800e860 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe88:	4b11      	ldr	r3, [pc, #68]	@ (800fed0 <xTaskRemoveFromEventList+0x6c>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	b9d3      	cbnz	r3, 800fec4 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fe8e:	1d25      	adds	r5, r4, #4
 800fe90:	4628      	mov	r0, r5
 800fe92:	f7fe fce5 	bl	800e860 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe96:	4a0f      	ldr	r2, [pc, #60]	@ (800fed4 <xTaskRemoveFromEventList+0x70>)
 800fe98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fe9a:	6811      	ldr	r1, [r2, #0]
 800fe9c:	428b      	cmp	r3, r1
 800fe9e:	d900      	bls.n	800fea2 <xTaskRemoveFromEventList+0x3e>
 800fea0:	6013      	str	r3, [r2, #0]
 800fea2:	2014      	movs	r0, #20
 800fea4:	4a0c      	ldr	r2, [pc, #48]	@ (800fed8 <xTaskRemoveFromEventList+0x74>)
 800fea6:	4629      	mov	r1, r5
 800fea8:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800feac:	f7fe fcb6 	bl	800e81c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800feb0:	4b0a      	ldr	r3, [pc, #40]	@ (800fedc <xTaskRemoveFromEventList+0x78>)
 800feb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feb8:	429a      	cmp	r2, r3
 800feba:	d906      	bls.n	800feca <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800febc:	2001      	movs	r0, #1
 800febe:	4b08      	ldr	r3, [pc, #32]	@ (800fee0 <xTaskRemoveFromEventList+0x7c>)
 800fec0:	6018      	str	r0, [r3, #0]
}
 800fec2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fec4:	4629      	mov	r1, r5
 800fec6:	4807      	ldr	r0, [pc, #28]	@ (800fee4 <xTaskRemoveFromEventList+0x80>)
 800fec8:	e7f0      	b.n	800feac <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800feca:	2000      	movs	r0, #0
	return xReturn;
 800fecc:	e7f9      	b.n	800fec2 <xTaskRemoveFromEventList+0x5e>
 800fece:	bf00      	nop
 800fed0:	240287f8 	.word	0x240287f8
 800fed4:	24028814 	.word	0x24028814
 800fed8:	24028890 	.word	0x24028890
 800fedc:	24028cf0 	.word	0x24028cf0
 800fee0:	24028808 	.word	0x24028808
 800fee4:	2402884c 	.word	0x2402884c

0800fee8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fee8:	4b03      	ldr	r3, [pc, #12]	@ (800fef8 <vTaskInternalSetTimeOutState+0x10>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800feee:	4b03      	ldr	r3, [pc, #12]	@ (800fefc <vTaskInternalSetTimeOutState+0x14>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	6043      	str	r3, [r0, #4]
}
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop
 800fef8:	24028804 	.word	0x24028804
 800fefc:	24028818 	.word	0x24028818

0800ff00 <xTaskCheckForTimeOut>:
{
 800ff00:	b570      	push	{r4, r5, r6, lr}
 800ff02:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ff04:	4605      	mov	r5, r0
 800ff06:	b940      	cbnz	r0, 800ff1a <xTaskCheckForTimeOut+0x1a>
 800ff08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff0c:	f383 8811 	msr	BASEPRI, r3
 800ff10:	f3bf 8f6f 	isb	sy
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	e7fe      	b.n	800ff18 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800ff1a:	b941      	cbnz	r1, 800ff2e <xTaskCheckForTimeOut+0x2e>
 800ff1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff20:	f383 8811 	msr	BASEPRI, r3
 800ff24:	f3bf 8f6f 	isb	sy
 800ff28:	f3bf 8f4f 	dsb	sy
 800ff2c:	e7fe      	b.n	800ff2c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800ff2e:	f7fe fd09 	bl	800e944 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ff32:	4b0f      	ldr	r3, [pc, #60]	@ (800ff70 <xTaskCheckForTimeOut+0x70>)
 800ff34:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ff36:	6823      	ldr	r3, [r4, #0]
 800ff38:	1c5a      	adds	r2, r3, #1
 800ff3a:	d010      	beq.n	800ff5e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff3c:	480d      	ldr	r0, [pc, #52]	@ (800ff74 <xTaskCheckForTimeOut+0x74>)
 800ff3e:	682e      	ldr	r6, [r5, #0]
 800ff40:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ff42:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff44:	4286      	cmp	r6, r0
 800ff46:	d001      	beq.n	800ff4c <xTaskCheckForTimeOut+0x4c>
 800ff48:	428a      	cmp	r2, r1
 800ff4a:	d90f      	bls.n	800ff6c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ff4c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff4e:	4283      	cmp	r3, r0
 800ff50:	d90a      	bls.n	800ff68 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800ff52:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff54:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ff56:	4413      	add	r3, r2
 800ff58:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff5a:	f7ff ffc5 	bl	800fee8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ff5e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ff60:	f7fe fd10 	bl	800e984 <vPortExitCritical>
}
 800ff64:	4620      	mov	r0, r4
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ff6c:	2401      	movs	r4, #1
 800ff6e:	e7f7      	b.n	800ff60 <xTaskCheckForTimeOut+0x60>
 800ff70:	24028818 	.word	0x24028818
 800ff74:	24028804 	.word	0x24028804

0800ff78 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ff78:	4b01      	ldr	r3, [pc, #4]	@ (800ff80 <vTaskMissedYield+0x8>)
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	601a      	str	r2, [r3, #0]
}
 800ff7e:	4770      	bx	lr
 800ff80:	24028808 	.word	0x24028808

0800ff84 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ff84:	4b01      	ldr	r3, [pc, #4]	@ (800ff8c <xTaskGetCurrentTaskHandle+0x8>)
 800ff86:	6818      	ldr	r0, [r3, #0]
	}
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	24028cf0 	.word	0x24028cf0

0800ff90 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ff90:	4b05      	ldr	r3, [pc, #20]	@ (800ffa8 <xTaskGetSchedulerState+0x18>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	b133      	cbz	r3, 800ffa4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff96:	4b05      	ldr	r3, [pc, #20]	@ (800ffac <xTaskGetSchedulerState+0x1c>)
 800ff98:	6818      	ldr	r0, [r3, #0]
 800ff9a:	fab0 f080 	clz	r0, r0
 800ff9e:	0940      	lsrs	r0, r0, #5
 800ffa0:	0040      	lsls	r0, r0, #1
 800ffa2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ffa4:	2001      	movs	r0, #1
	}
 800ffa6:	4770      	bx	lr
 800ffa8:	24028810 	.word	0x24028810
 800ffac:	240287f8 	.word	0x240287f8

0800ffb0 <xTaskPriorityInherit>:
	{
 800ffb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	b338      	cbz	r0, 8010006 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ffb6:	4d1a      	ldr	r5, [pc, #104]	@ (8010020 <xTaskPriorityInherit+0x70>)
 800ffb8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ffba:	682a      	ldr	r2, [r5, #0]
 800ffbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d226      	bcs.n	8010010 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ffc2:	6982      	ldr	r2, [r0, #24]
 800ffc4:	2a00      	cmp	r2, #0
 800ffc6:	db04      	blt.n	800ffd2 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffc8:	682a      	ldr	r2, [r5, #0]
 800ffca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ffcc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ffd0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ffd2:	2214      	movs	r2, #20
 800ffd4:	4e13      	ldr	r6, [pc, #76]	@ (8010024 <xTaskPriorityInherit+0x74>)
 800ffd6:	fb02 6303 	mla	r3, r2, r3, r6
 800ffda:	6962      	ldr	r2, [r4, #20]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d113      	bne.n	8010008 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffe0:	1d27      	adds	r7, r4, #4
 800ffe2:	4638      	mov	r0, r7
 800ffe4:	f7fe fc3c 	bl	800e860 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffe8:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ffea:	4a0f      	ldr	r2, [pc, #60]	@ (8010028 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ffee:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fff0:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fff2:	428b      	cmp	r3, r1
 800fff4:	d900      	bls.n	800fff8 <xTaskPriorityInherit+0x48>
 800fff6:	6013      	str	r3, [r2, #0]
 800fff8:	2014      	movs	r0, #20
 800fffa:	4639      	mov	r1, r7
 800fffc:	fb00 6003 	mla	r0, r0, r3, r6
 8010000:	f7fe fc0c 	bl	800e81c <vListInsertEnd>
				xReturn = pdTRUE;
 8010004:	2001      	movs	r0, #1
	}
 8010006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010008:	682b      	ldr	r3, [r5, #0]
 801000a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801000c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801000e:	e7f9      	b.n	8010004 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010010:	682b      	ldr	r3, [r5, #0]
 8010012:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8010014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010016:	4298      	cmp	r0, r3
 8010018:	bf2c      	ite	cs
 801001a:	2000      	movcs	r0, #0
 801001c:	2001      	movcc	r0, #1
 801001e:	e7f2      	b.n	8010006 <xTaskPriorityInherit+0x56>
 8010020:	24028cf0 	.word	0x24028cf0
 8010024:	24028890 	.word	0x24028890
 8010028:	24028814 	.word	0x24028814

0801002c <xTaskPriorityDisinherit>:
	{
 801002c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 801002e:	b908      	cbnz	r0, 8010034 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8010030:	2000      	movs	r0, #0
	}
 8010032:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8010034:	4b1b      	ldr	r3, [pc, #108]	@ (80100a4 <xTaskPriorityDisinherit+0x78>)
 8010036:	681c      	ldr	r4, [r3, #0]
 8010038:	4284      	cmp	r4, r0
 801003a:	d008      	beq.n	801004e <xTaskPriorityDisinherit+0x22>
 801003c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010040:	f383 8811 	msr	BASEPRI, r3
 8010044:	f3bf 8f6f 	isb	sy
 8010048:	f3bf 8f4f 	dsb	sy
 801004c:	e7fe      	b.n	801004c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801004e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8010050:	b943      	cbnz	r3, 8010064 <xTaskPriorityDisinherit+0x38>
 8010052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010056:	f383 8811 	msr	BASEPRI, r3
 801005a:	f3bf 8f6f 	isb	sy
 801005e:	f3bf 8f4f 	dsb	sy
 8010062:	e7fe      	b.n	8010062 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010064:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8010066:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010068:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 801006a:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801006c:	4291      	cmp	r1, r2
 801006e:	d0df      	beq.n	8010030 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010070:	2b00      	cmp	r3, #0
 8010072:	d1dd      	bne.n	8010030 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010074:	1d25      	adds	r5, r4, #4
 8010076:	4628      	mov	r0, r5
 8010078:	f7fe fbf2 	bl	800e860 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801007c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801007e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010082:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010084:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8010086:	4a08      	ldr	r2, [pc, #32]	@ (80100a8 <xTaskPriorityDisinherit+0x7c>)
 8010088:	6811      	ldr	r1, [r2, #0]
 801008a:	428b      	cmp	r3, r1
 801008c:	d900      	bls.n	8010090 <xTaskPriorityDisinherit+0x64>
 801008e:	6013      	str	r3, [r2, #0]
 8010090:	4a06      	ldr	r2, [pc, #24]	@ (80100ac <xTaskPriorityDisinherit+0x80>)
 8010092:	2014      	movs	r0, #20
 8010094:	4629      	mov	r1, r5
 8010096:	fb00 2003 	mla	r0, r0, r3, r2
 801009a:	f7fe fbbf 	bl	800e81c <vListInsertEnd>
					xReturn = pdTRUE;
 801009e:	2001      	movs	r0, #1
		return xReturn;
 80100a0:	e7c7      	b.n	8010032 <xTaskPriorityDisinherit+0x6>
 80100a2:	bf00      	nop
 80100a4:	24028cf0 	.word	0x24028cf0
 80100a8:	24028814 	.word	0x24028814
 80100ac:	24028890 	.word	0x24028890

080100b0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80100b0:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80100b2:	4604      	mov	r4, r0
 80100b4:	2800      	cmp	r0, #0
 80100b6:	d042      	beq.n	801013e <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 80100b8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80100ba:	b942      	cbnz	r2, 80100ce <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80100bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c0:	f383 8811 	msr	BASEPRI, r3
 80100c4:	f3bf 8f6f 	isb	sy
 80100c8:	f3bf 8f4f 	dsb	sy
 80100cc:	e7fe      	b.n	80100cc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80100ce:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80100d0:	4299      	cmp	r1, r3
 80100d2:	bf38      	it	cc
 80100d4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80100d6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80100d8:	428b      	cmp	r3, r1
 80100da:	d030      	beq.n	801013e <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80100dc:	2a01      	cmp	r2, #1
 80100de:	d12e      	bne.n	801013e <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 80100e0:	4a17      	ldr	r2, [pc, #92]	@ (8010140 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 80100e2:	6812      	ldr	r2, [r2, #0]
 80100e4:	4282      	cmp	r2, r0
 80100e6:	d108      	bne.n	80100fa <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80100e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ec:	f383 8811 	msr	BASEPRI, r3
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	f3bf 8f4f 	dsb	sy
 80100f8:	e7fe      	b.n	80100f8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80100fa:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80100fc:	4d11      	ldr	r5, [pc, #68]	@ (8010144 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80100fe:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010100:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8010104:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010106:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801010a:	bfa8      	it	ge
 801010c:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010110:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010112:	bfa8      	it	ge
 8010114:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010116:	429a      	cmp	r2, r3
 8010118:	d111      	bne.n	801013e <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801011a:	1d06      	adds	r6, r0, #4
 801011c:	4630      	mov	r0, r6
 801011e:	f7fe fb9f 	bl	800e860 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8010122:	4a09      	ldr	r2, [pc, #36]	@ (8010148 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8010124:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010126:	6811      	ldr	r1, [r2, #0]
 8010128:	428b      	cmp	r3, r1
 801012a:	d900      	bls.n	801012e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 801012c:	6013      	str	r3, [r2, #0]
 801012e:	2014      	movs	r0, #20
 8010130:	4631      	mov	r1, r6
 8010132:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8010136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 801013a:	f7fe bb6f 	b.w	800e81c <vListInsertEnd>
	}
 801013e:	bd70      	pop	{r4, r5, r6, pc}
 8010140:	24028cf0 	.word	0x24028cf0
 8010144:	24028890 	.word	0x24028890
 8010148:	24028814 	.word	0x24028814

0801014c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801014c:	4b04      	ldr	r3, [pc, #16]	@ (8010160 <pvTaskIncrementMutexHeldCount+0x14>)
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	b11a      	cbz	r2, 801015a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8010152:	6819      	ldr	r1, [r3, #0]
 8010154:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8010156:	3201      	adds	r2, #1
 8010158:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 801015a:	6818      	ldr	r0, [r3, #0]
	}
 801015c:	4770      	bx	lr
 801015e:	bf00      	nop
 8010160:	24028cf0 	.word	0x24028cf0

08010164 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8010164:	4291      	cmp	r1, r2
{
 8010166:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010168:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801016a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 801016c:	d80a      	bhi.n	8010184 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801016e:	1ad2      	subs	r2, r2, r3
 8010170:	6983      	ldr	r3, [r0, #24]
 8010172:	429a      	cmp	r2, r3
 8010174:	d20d      	bcs.n	8010192 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010176:	1d01      	adds	r1, r0, #4
 8010178:	4b07      	ldr	r3, [pc, #28]	@ (8010198 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801017a:	6818      	ldr	r0, [r3, #0]
 801017c:	f7fe fb59 	bl	800e832 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010180:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8010182:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010184:	429a      	cmp	r2, r3
 8010186:	d201      	bcs.n	801018c <prvInsertTimerInActiveList+0x28>
 8010188:	4299      	cmp	r1, r3
 801018a:	d202      	bcs.n	8010192 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801018c:	1d01      	adds	r1, r0, #4
 801018e:	4b03      	ldr	r3, [pc, #12]	@ (801019c <prvInsertTimerInActiveList+0x38>)
 8010190:	e7f3      	b.n	801017a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8010192:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8010194:	e7f5      	b.n	8010182 <prvInsertTimerInActiveList+0x1e>
 8010196:	bf00      	nop
 8010198:	24028df0 	.word	0x24028df0
 801019c:	24028df4 	.word	0x24028df4

080101a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80101a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80101a2:	4c11      	ldr	r4, [pc, #68]	@ (80101e8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80101a4:	f7fe fbce 	bl	800e944 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80101a8:	6825      	ldr	r5, [r4, #0]
 80101aa:	b9bd      	cbnz	r5, 80101dc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80101ac:	4f0f      	ldr	r7, [pc, #60]	@ (80101ec <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80101ae:	4e10      	ldr	r6, [pc, #64]	@ (80101f0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80101b0:	4638      	mov	r0, r7
 80101b2:	f7fe fb25 	bl	800e800 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80101b6:	4630      	mov	r0, r6
 80101b8:	f7fe fb22 	bl	800e800 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80101bc:	4b0d      	ldr	r3, [pc, #52]	@ (80101f4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80101be:	4a0e      	ldr	r2, [pc, #56]	@ (80101f8 <prvCheckForValidListAndQueue+0x58>)
 80101c0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80101c2:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80101c4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80101c6:	4b0d      	ldr	r3, [pc, #52]	@ (80101fc <prvCheckForValidListAndQueue+0x5c>)
 80101c8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80101ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010200 <prvCheckForValidListAndQueue+0x60>)
 80101cc:	9500      	str	r5, [sp, #0]
 80101ce:	f7fe fdc3 	bl	800ed58 <xQueueGenericCreateStatic>
 80101d2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80101d4:	b110      	cbz	r0, 80101dc <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80101d6:	490b      	ldr	r1, [pc, #44]	@ (8010204 <prvCheckForValidListAndQueue+0x64>)
 80101d8:	f7ff f9ee 	bl	800f5b8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80101dc:	b003      	add	sp, #12
 80101de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80101e2:	f7fe bbcf 	b.w	800e984 <vPortExitCritical>
 80101e6:	bf00      	nop
 80101e8:	24028dec 	.word	0x24028dec
 80101ec:	24028e0c 	.word	0x24028e0c
 80101f0:	24028df8 	.word	0x24028df8
 80101f4:	24028df4 	.word	0x24028df4
 80101f8:	24028d44 	.word	0x24028d44
 80101fc:	24028df0 	.word	0x24028df0
 8010200:	24028cf4 	.word	0x24028cf4
 8010204:	080291ad 	.word	0x080291ad

08010208 <xTimerCreateTimerTask>:
{
 8010208:	b510      	push	{r4, lr}
 801020a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801020c:	f7ff ffc8 	bl	80101a0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010210:	4b12      	ldr	r3, [pc, #72]	@ (801025c <xTimerCreateTimerTask+0x54>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	b1b3      	cbz	r3, 8010244 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010216:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010218:	aa07      	add	r2, sp, #28
 801021a:	a906      	add	r1, sp, #24
 801021c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801021e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010222:	f7fe f9e5 	bl	800e5f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010226:	9b05      	ldr	r3, [sp, #20]
 8010228:	9a07      	ldr	r2, [sp, #28]
 801022a:	9302      	str	r3, [sp, #8]
 801022c:	9b06      	ldr	r3, [sp, #24]
 801022e:	490c      	ldr	r1, [pc, #48]	@ (8010260 <xTimerCreateTimerTask+0x58>)
 8010230:	9301      	str	r3, [sp, #4]
 8010232:	2302      	movs	r3, #2
 8010234:	480b      	ldr	r0, [pc, #44]	@ (8010264 <xTimerCreateTimerTask+0x5c>)
 8010236:	9300      	str	r3, [sp, #0]
 8010238:	4623      	mov	r3, r4
 801023a:	f7ff fb82 	bl	800f942 <xTaskCreateStatic>
 801023e:	4b0a      	ldr	r3, [pc, #40]	@ (8010268 <xTimerCreateTimerTask+0x60>)
 8010240:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8010242:	b940      	cbnz	r0, 8010256 <xTimerCreateTimerTask+0x4e>
 8010244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010248:	f383 8811 	msr	BASEPRI, r3
 801024c:	f3bf 8f6f 	isb	sy
 8010250:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8010254:	e7fe      	b.n	8010254 <xTimerCreateTimerTask+0x4c>
}
 8010256:	2001      	movs	r0, #1
 8010258:	b008      	add	sp, #32
 801025a:	bd10      	pop	{r4, pc}
 801025c:	24028dec 	.word	0x24028dec
 8010260:	080291b2 	.word	0x080291b2
 8010264:	08010365 	.word	0x08010365
 8010268:	24028de8 	.word	0x24028de8

0801026c <xTimerGenericCommand>:
{
 801026c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801026e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8010270:	4604      	mov	r4, r0
{
 8010272:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8010274:	b940      	cbnz	r0, 8010288 <xTimerGenericCommand+0x1c>
 8010276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801027a:	f383 8811 	msr	BASEPRI, r3
 801027e:	f3bf 8f6f 	isb	sy
 8010282:	f3bf 8f4f 	dsb	sy
 8010286:	e7fe      	b.n	8010286 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8010288:	4d0c      	ldr	r5, [pc, #48]	@ (80102bc <xTimerGenericCommand+0x50>)
 801028a:	6828      	ldr	r0, [r5, #0]
 801028c:	b178      	cbz	r0, 80102ae <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801028e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010290:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010292:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010296:	dc0c      	bgt.n	80102b2 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010298:	f7ff fe7a 	bl	800ff90 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801029c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801029e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80102a0:	4669      	mov	r1, sp
 80102a2:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80102a4:	bf0c      	ite	eq
 80102a6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80102a8:	461a      	movne	r2, r3
 80102aa:	f7fe fe0a 	bl	800eec2 <xQueueGenericSend>
}
 80102ae:	b004      	add	sp, #16
 80102b0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80102b2:	2300      	movs	r3, #0
 80102b4:	4669      	mov	r1, sp
 80102b6:	f7fe ff07 	bl	800f0c8 <xQueueGenericSendFromISR>
 80102ba:	e7f8      	b.n	80102ae <xTimerGenericCommand+0x42>
 80102bc:	24028dec 	.word	0x24028dec

080102c0 <prvSampleTimeNow>:
{
 80102c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 80102c4:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8010360 <prvSampleTimeNow+0xa0>
{
 80102c8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80102ca:	f7ff fba9 	bl	800fa20 <xTaskGetTickCount>
 80102ce:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80102d0:	f8d8 3000 	ldr.w	r3, [r8]
 80102d4:	4283      	cmp	r3, r0
 80102d6:	d909      	bls.n	80102ec <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80102d8:	4f1f      	ldr	r7, [pc, #124]	@ (8010358 <prvSampleTimeNow+0x98>)
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	b96a      	cbnz	r2, 80102fc <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80102e0:	4a1e      	ldr	r2, [pc, #120]	@ (801035c <prvSampleTimeNow+0x9c>)
 80102e2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80102e4:	6013      	str	r3, [r2, #0]
 80102e6:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 80102e8:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80102ea:	e000      	b.n	80102ee <prvSampleTimeNow+0x2e>
 80102ec:	2300      	movs	r3, #0
}
 80102ee:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80102f0:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80102f2:	f8c8 5000 	str.w	r5, [r8]
}
 80102f6:	b002      	add	sp, #8
 80102f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102fc:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102fe:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010300:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010304:	f104 0a04 	add.w	sl, r4, #4
 8010308:	4650      	mov	r0, sl
 801030a:	f7fe faa9 	bl	800e860 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801030e:	6a23      	ldr	r3, [r4, #32]
 8010310:	4620      	mov	r0, r4
 8010312:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010314:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010318:	075b      	lsls	r3, r3, #29
 801031a:	d5de      	bpl.n	80102da <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801031c:	69a3      	ldr	r3, [r4, #24]
 801031e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8010320:	4599      	cmp	r9, r3
 8010322:	d206      	bcs.n	8010332 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010324:	4651      	mov	r1, sl
 8010326:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010328:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801032a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801032c:	f7fe fa81 	bl	800e832 <vListInsert>
 8010330:	e7d3      	b.n	80102da <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010332:	2300      	movs	r3, #0
 8010334:	464a      	mov	r2, r9
 8010336:	4620      	mov	r0, r4
 8010338:	4619      	mov	r1, r3
 801033a:	9300      	str	r3, [sp, #0]
 801033c:	f7ff ff96 	bl	801026c <xTimerGenericCommand>
				configASSERT( xResult );
 8010340:	2800      	cmp	r0, #0
 8010342:	d1ca      	bne.n	80102da <prvSampleTimeNow+0x1a>
 8010344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	e7fe      	b.n	8010354 <prvSampleTimeNow+0x94>
 8010356:	bf00      	nop
 8010358:	24028df4 	.word	0x24028df4
 801035c:	24028df0 	.word	0x24028df0
 8010360:	24028de4 	.word	0x24028de4

08010364 <prvTimerTask>:
{
 8010364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010368:	4d6e      	ldr	r5, [pc, #440]	@ (8010524 <prvTimerTask+0x1c0>)
{
 801036a:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801036c:	4e6e      	ldr	r6, [pc, #440]	@ (8010528 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801036e:	682b      	ldr	r3, [r5, #0]
 8010370:	f8d3 8000 	ldr.w	r8, [r3]
 8010374:	f1b8 0f00 	cmp.w	r8, #0
 8010378:	d035      	beq.n	80103e6 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801037a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801037c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801037e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8010382:	f7ff fb45 	bl	800fa10 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010386:	a804      	add	r0, sp, #16
 8010388:	f7ff ff9a 	bl	80102c0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801038c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801038e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010390:	2b00      	cmp	r3, #0
 8010392:	d169      	bne.n	8010468 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010394:	2c00      	cmp	r4, #0
 8010396:	d14c      	bne.n	8010432 <prvTimerTask+0xce>
 8010398:	4540      	cmp	r0, r8
 801039a:	d350      	bcc.n	801043e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 801039c:	f7ff fbe4 	bl	800fb68 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103a0:	682b      	ldr	r3, [r5, #0]
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103a6:	1d38      	adds	r0, r7, #4
 80103a8:	f7fe fa5a 	bl	800e860 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80103ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80103b0:	0758      	lsls	r0, r3, #29
 80103b2:	d51a      	bpl.n	80103ea <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80103b4:	69b9      	ldr	r1, [r7, #24]
 80103b6:	4643      	mov	r3, r8
 80103b8:	464a      	mov	r2, r9
 80103ba:	4638      	mov	r0, r7
 80103bc:	4441      	add	r1, r8
 80103be:	f7ff fed1 	bl	8010164 <prvInsertTimerInActiveList>
 80103c2:	b1b0      	cbz	r0, 80103f2 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103c4:	4623      	mov	r3, r4
 80103c6:	4642      	mov	r2, r8
 80103c8:	4621      	mov	r1, r4
 80103ca:	4638      	mov	r0, r7
 80103cc:	9400      	str	r4, [sp, #0]
 80103ce:	f7ff ff4d 	bl	801026c <xTimerGenericCommand>
			configASSERT( xResult );
 80103d2:	b970      	cbnz	r0, 80103f2 <prvTimerTask+0x8e>
 80103d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103d8:	f383 8811 	msr	BASEPRI, r3
 80103dc:	f3bf 8f6f 	isb	sy
 80103e0:	f3bf 8f4f 	dsb	sy
 80103e4:	e7fe      	b.n	80103e4 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80103e6:	2401      	movs	r4, #1
 80103e8:	e7cb      	b.n	8010382 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80103ea:	f023 0301 	bic.w	r3, r3, #1
 80103ee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80103f2:	6a3b      	ldr	r3, [r7, #32]
 80103f4:	4638      	mov	r0, r7
 80103f6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80103f8:	2200      	movs	r2, #0
 80103fa:	a904      	add	r1, sp, #16
 80103fc:	6830      	ldr	r0, [r6, #0]
 80103fe:	f7fe ff11 	bl	800f224 <xQueueReceive>
 8010402:	2800      	cmp	r0, #0
 8010404:	d0b3      	beq.n	801036e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010406:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010408:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801040a:	2b00      	cmp	r3, #0
 801040c:	db2f      	blt.n	801046e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801040e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010410:	6963      	ldr	r3, [r4, #20]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d132      	bne.n	801047c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010416:	a803      	add	r0, sp, #12
 8010418:	f7ff ff52 	bl	80102c0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801041c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801041e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8010420:	2b09      	cmp	r3, #9
 8010422:	d8e9      	bhi.n	80103f8 <prvTimerTask+0x94>
 8010424:	e8df f003 	tbb	[pc, r3]
 8010428:	572e2e2e 	.word	0x572e2e2e
 801042c:	2e2e765e 	.word	0x2e2e765e
 8010430:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010432:	4b3e      	ldr	r3, [pc, #248]	@ (801052c <prvTimerTask+0x1c8>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	681c      	ldr	r4, [r3, #0]
 8010438:	fab4 f484 	clz	r4, r4
 801043c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801043e:	4622      	mov	r2, r4
 8010440:	eba8 0109 	sub.w	r1, r8, r9
 8010444:	6830      	ldr	r0, [r6, #0]
 8010446:	f7ff f8f6 	bl	800f636 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801044a:	f7ff fb8d 	bl	800fb68 <xTaskResumeAll>
 801044e:	2800      	cmp	r0, #0
 8010450:	d1d2      	bne.n	80103f8 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8010452:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801045a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	f3bf 8f6f 	isb	sy
 8010466:	e7c7      	b.n	80103f8 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8010468:	f7ff fb7e 	bl	800fb68 <xTaskResumeAll>
}
 801046c:	e7c4      	b.n	80103f8 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801046e:	9b05      	ldr	r3, [sp, #20]
 8010470:	9907      	ldr	r1, [sp, #28]
 8010472:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010474:	9b04      	ldr	r3, [sp, #16]
 8010476:	2b00      	cmp	r3, #0
 8010478:	dbbe      	blt.n	80103f8 <prvTimerTask+0x94>
 801047a:	e7c8      	b.n	801040e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801047c:	1d20      	adds	r0, r4, #4
 801047e:	f7fe f9ef 	bl	800e860 <uxListRemove>
 8010482:	e7c8      	b.n	8010416 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010484:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010488:	4620      	mov	r0, r4
 801048a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801048c:	f043 0301 	orr.w	r3, r3, #1
 8010490:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010494:	9b05      	ldr	r3, [sp, #20]
 8010496:	4419      	add	r1, r3
 8010498:	f7ff fe64 	bl	8010164 <prvInsertTimerInActiveList>
 801049c:	2800      	cmp	r0, #0
 801049e:	d0ab      	beq.n	80103f8 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80104a0:	6a23      	ldr	r3, [r4, #32]
 80104a2:	4620      	mov	r0, r4
 80104a4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80104a6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80104aa:	0759      	lsls	r1, r3, #29
 80104ac:	d5a4      	bpl.n	80103f8 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80104ae:	69a2      	ldr	r2, [r4, #24]
 80104b0:	2300      	movs	r3, #0
 80104b2:	9905      	ldr	r1, [sp, #20]
 80104b4:	4620      	mov	r0, r4
 80104b6:	9300      	str	r3, [sp, #0]
 80104b8:	440a      	add	r2, r1
 80104ba:	4619      	mov	r1, r3
 80104bc:	f7ff fed6 	bl	801026c <xTimerGenericCommand>
							configASSERT( xResult );
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d199      	bne.n	80103f8 <prvTimerTask+0x94>
 80104c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104c8:	f383 8811 	msr	BASEPRI, r3
 80104cc:	f3bf 8f6f 	isb	sy
 80104d0:	f3bf 8f4f 	dsb	sy
 80104d4:	e7fe      	b.n	80104d4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80104d6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80104da:	f023 0301 	bic.w	r3, r3, #1
 80104de:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80104e2:	e789      	b.n	80103f8 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80104e4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80104e8:	f043 0301 	orr.w	r3, r3, #1
 80104ec:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80104f0:	9905      	ldr	r1, [sp, #20]
 80104f2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80104f4:	b941      	cbnz	r1, 8010508 <prvTimerTask+0x1a4>
 80104f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104fa:	f383 8811 	msr	BASEPRI, r3
 80104fe:	f3bf 8f6f 	isb	sy
 8010502:	f3bf 8f4f 	dsb	sy
 8010506:	e7fe      	b.n	8010506 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010508:	4603      	mov	r3, r0
 801050a:	4401      	add	r1, r0
 801050c:	4620      	mov	r0, r4
 801050e:	f7ff fe29 	bl	8010164 <prvInsertTimerInActiveList>
					break;
 8010512:	e771      	b.n	80103f8 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010514:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010518:	079a      	lsls	r2, r3, #30
 801051a:	d4de      	bmi.n	80104da <prvTimerTask+0x176>
							vPortFree( pxTimer );
 801051c:	4620      	mov	r0, r4
 801051e:	f7fe f931 	bl	800e784 <vPortFree>
 8010522:	e769      	b.n	80103f8 <prvTimerTask+0x94>
 8010524:	24028df4 	.word	0x24028df4
 8010528:	24028dec 	.word	0x24028dec
 801052c:	24028df0 	.word	0x24028df0

08010530 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8010530:	8880      	ldrh	r0, [r0, #4]
 8010532:	4770      	bx	lr

08010534 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8010534:	b570      	push	{r4, r5, r6, lr}
 8010536:	6803      	ldr	r3, [r0, #0]
 8010538:	460c      	mov	r4, r1
 801053a:	2100      	movs	r1, #0
 801053c:	4605      	mov	r5, r0
 801053e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010540:	4798      	blx	r3
 8010542:	4606      	mov	r6, r0
 8010544:	682b      	ldr	r3, [r5, #0]
 8010546:	4628      	mov	r0, r5
 8010548:	1ba4      	subs	r4, r4, r6
 801054a:	6a1b      	ldr	r3, [r3, #32]
 801054c:	b2a4      	uxth	r4, r4
 801054e:	4798      	blx	r3
 8010550:	fbb4 f0f0 	udiv	r0, r4, r0
 8010554:	bd70      	pop	{r4, r5, r6, pc}

08010556 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8010556:	2300      	movs	r3, #0
 8010558:	8083      	strh	r3, [r0, #4]
 801055a:	4770      	bx	lr

0801055c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801055c:	b510      	push	{r4, lr}
 801055e:	6803      	ldr	r3, [r0, #0]
 8010560:	4604      	mov	r4, r0
 8010562:	8881      	ldrh	r1, [r0, #4]
 8010564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010566:	4798      	blx	r3
 8010568:	88a3      	ldrh	r3, [r4, #4]
 801056a:	3301      	adds	r3, #1
 801056c:	80a3      	strh	r3, [r4, #4]
 801056e:	bd10      	pop	{r4, pc}

08010570 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8010570:	6803      	ldr	r3, [r0, #0]
 8010572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010574:	4718      	bx	r3

08010576 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8010576:	4770      	bx	lr

08010578 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8010578:	4a02      	ldr	r2, [pc, #8]	@ (8010584 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801057a:	6002      	str	r2, [r0, #0]
 801057c:	2200      	movs	r2, #0
 801057e:	8082      	strh	r2, [r0, #4]
 8010580:	4770      	bx	lr
 8010582:	bf00      	nop
 8010584:	080291c4 	.word	0x080291c4

08010588 <_ZN8touchgfx9Container13getFirstChildEv>:
 8010588:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801058a:	4770      	bx	lr

0801058c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801058c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801058e:	2000      	movs	r0, #0
 8010590:	b12b      	cbz	r3, 801059e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010592:	b920      	cbnz	r0, 801059e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010594:	1a5a      	subs	r2, r3, r1
 8010596:	699b      	ldr	r3, [r3, #24]
 8010598:	4250      	negs	r0, r2
 801059a:	4150      	adcs	r0, r2
 801059c:	e7f8      	b.n	8010590 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801059e:	4770      	bx	lr

080105a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80105a0:	2300      	movs	r3, #0
 80105a2:	6148      	str	r0, [r1, #20]
 80105a4:	618b      	str	r3, [r1, #24]
 80105a6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80105a8:	b913      	cbnz	r3, 80105b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80105aa:	6281      	str	r1, [r0, #40]	@ 0x28
 80105ac:	4770      	bx	lr
 80105ae:	4613      	mov	r3, r2
 80105b0:	699a      	ldr	r2, [r3, #24]
 80105b2:	2a00      	cmp	r2, #0
 80105b4:	d1fb      	bne.n	80105ae <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80105b6:	6199      	str	r1, [r3, #24]
 80105b8:	4770      	bx	lr

080105ba <_ZN8touchgfx9Container9removeAllEv>:
 80105ba:	2200      	movs	r2, #0
 80105bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80105be:	b123      	cbz	r3, 80105ca <_ZN8touchgfx9Container9removeAllEv+0x10>
 80105c0:	6999      	ldr	r1, [r3, #24]
 80105c2:	6281      	str	r1, [r0, #40]	@ 0x28
 80105c4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80105c8:	e7f8      	b.n	80105bc <_ZN8touchgfx9Container9removeAllEv+0x2>
 80105ca:	4770      	bx	lr

080105cc <_ZN8touchgfx9Container6unlinkEv>:
 80105cc:	2300      	movs	r3, #0
 80105ce:	6283      	str	r3, [r0, #40]	@ 0x28
 80105d0:	4770      	bx	lr

080105d2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80105d2:	2200      	movs	r2, #0
 80105d4:	8002      	strh	r2, [r0, #0]
 80105d6:	8042      	strh	r2, [r0, #2]
 80105d8:	8082      	strh	r2, [r0, #4]
 80105da:	80c2      	strh	r2, [r0, #6]
 80105dc:	4770      	bx	lr

080105de <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80105de:	b570      	push	{r4, r5, r6, lr}
 80105e0:	460d      	mov	r5, r1
 80105e2:	4616      	mov	r6, r2
 80105e4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80105e6:	b13c      	cbz	r4, 80105f8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80105e8:	6823      	ldr	r3, [r4, #0]
 80105ea:	4620      	mov	r0, r4
 80105ec:	4632      	mov	r2, r6
 80105ee:	4629      	mov	r1, r5
 80105f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105f2:	4798      	blx	r3
 80105f4:	69a4      	ldr	r4, [r4, #24]
 80105f6:	e7f6      	b.n	80105e6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80105f8:	bd70      	pop	{r4, r5, r6, pc}

080105fa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80105fa:	b538      	push	{r3, r4, r5, lr}
 80105fc:	460d      	mov	r5, r1
 80105fe:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010600:	b134      	cbz	r4, 8010610 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8010602:	682b      	ldr	r3, [r5, #0]
 8010604:	4621      	mov	r1, r4
 8010606:	4628      	mov	r0, r5
 8010608:	689b      	ldr	r3, [r3, #8]
 801060a:	4798      	blx	r3
 801060c:	69a4      	ldr	r4, [r4, #24]
 801060e:	e7f7      	b.n	8010600 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8010610:	bd38      	pop	{r3, r4, r5, pc}

08010612 <_ZN8touchgfx9ContainerD1Ev>:
 8010612:	4770      	bx	lr

08010614 <_ZN8touchgfx9ContainerD0Ev>:
 8010614:	b510      	push	{r4, lr}
 8010616:	4604      	mov	r4, r0
 8010618:	212c      	movs	r1, #44	@ 0x2c
 801061a:	f014 fb08 	bl	8024c2e <_ZdlPvj>
 801061e:	4620      	mov	r0, r4
 8010620:	bd10      	pop	{r4, pc}

08010622 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8010622:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010624:	b19b      	cbz	r3, 801064e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010626:	428b      	cmp	r3, r1
 8010628:	d109      	bne.n	801063e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801062a:	699a      	ldr	r2, [r3, #24]
 801062c:	2100      	movs	r1, #0
 801062e:	6159      	str	r1, [r3, #20]
 8010630:	6282      	str	r2, [r0, #40]	@ 0x28
 8010632:	b902      	cbnz	r2, 8010636 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8010634:	4770      	bx	lr
 8010636:	6199      	str	r1, [r3, #24]
 8010638:	4770      	bx	lr
 801063a:	4613      	mov	r3, r2
 801063c:	b13a      	cbz	r2, 801064e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801063e:	699a      	ldr	r2, [r3, #24]
 8010640:	428a      	cmp	r2, r1
 8010642:	d1fa      	bne.n	801063a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8010644:	698a      	ldr	r2, [r1, #24]
 8010646:	619a      	str	r2, [r3, #24]
 8010648:	2300      	movs	r3, #0
 801064a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801064e:	4770      	bx	lr

08010650 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8010650:	b410      	push	{r4}
 8010652:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010654:	4604      	mov	r4, r0
 8010656:	b92b      	cbnz	r3, 8010664 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8010658:	6803      	ldr	r3, [r0, #0]
 801065a:	4611      	mov	r1, r2
 801065c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010662:	4718      	bx	r3
 8010664:	b941      	cbnz	r1, 8010678 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8010666:	6193      	str	r3, [r2, #24]
 8010668:	6282      	str	r2, [r0, #40]	@ 0x28
 801066a:	6154      	str	r4, [r2, #20]
 801066c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010670:	4770      	bx	lr
 8010672:	4603      	mov	r3, r0
 8010674:	2800      	cmp	r0, #0
 8010676:	d0f9      	beq.n	801066c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8010678:	4299      	cmp	r1, r3
 801067a:	6998      	ldr	r0, [r3, #24]
 801067c:	d1f9      	bne.n	8010672 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801067e:	6190      	str	r0, [r2, #24]
 8010680:	618a      	str	r2, [r1, #24]
 8010682:	e7f2      	b.n	801066a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08010684 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8010684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010688:	461f      	mov	r7, r3
 801068a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801068e:	460d      	mov	r5, r1
 8010690:	4616      	mov	r6, r2
 8010692:	b103      	cbz	r3, 8010696 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8010694:	6038      	str	r0, [r7, #0]
 8010696:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010698:	b314      	cbz	r4, 80106e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801069a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801069e:	b1eb      	cbz	r3, 80106dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80106a0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80106a4:	428d      	cmp	r5, r1
 80106a6:	db19      	blt.n	80106dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80106a8:	b289      	uxth	r1, r1
 80106aa:	8923      	ldrh	r3, [r4, #8]
 80106ac:	440b      	add	r3, r1
 80106ae:	b21b      	sxth	r3, r3
 80106b0:	429d      	cmp	r5, r3
 80106b2:	da13      	bge.n	80106dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80106b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80106b8:	4296      	cmp	r6, r2
 80106ba:	db0f      	blt.n	80106dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80106bc:	b292      	uxth	r2, r2
 80106be:	8963      	ldrh	r3, [r4, #10]
 80106c0:	4413      	add	r3, r2
 80106c2:	b21b      	sxth	r3, r3
 80106c4:	429e      	cmp	r6, r3
 80106c6:	da09      	bge.n	80106dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80106c8:	6823      	ldr	r3, [r4, #0]
 80106ca:	1ab2      	subs	r2, r6, r2
 80106cc:	1a69      	subs	r1, r5, r1
 80106ce:	4620      	mov	r0, r4
 80106d0:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80106d4:	b212      	sxth	r2, r2
 80106d6:	463b      	mov	r3, r7
 80106d8:	b209      	sxth	r1, r1
 80106da:	47c0      	blx	r8
 80106dc:	69a4      	ldr	r4, [r4, #24]
 80106de:	e7db      	b.n	8010698 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80106e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80106e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e8:	4c6d      	ldr	r4, [pc, #436]	@ (80108a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80106ea:	b0a1      	sub	sp, #132	@ 0x84
 80106ec:	4606      	mov	r6, r0
 80106ee:	6824      	ldr	r4, [r4, #0]
 80106f0:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80106f2:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 80106f6:	2400      	movs	r4, #0
 80106f8:	9303      	str	r3, [sp, #12]
 80106fa:	802c      	strh	r4, [r5, #0]
 80106fc:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 80106fe:	802c      	strh	r4, [r5, #0]
 8010700:	601c      	str	r4, [r3, #0]
 8010702:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010706:	f7ff ffbd 	bl	8010684 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801070a:	f1b9 0f03 	cmp.w	r9, #3
 801070e:	f340 80c1 	ble.w	8010894 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8010712:	4631      	mov	r1, r6
 8010714:	a80c      	add	r0, sp, #48	@ 0x30
 8010716:	f007 f8f3 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801071a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801071e:	9306      	str	r3, [sp, #24]
 8010720:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8010724:	9307      	str	r3, [sp, #28]
 8010726:	9b03      	ldr	r3, [sp, #12]
 8010728:	f8d3 a000 	ldr.w	sl, [r3]
 801072c:	f1ba 0f00 	cmp.w	sl, #0
 8010730:	f000 80b3 	beq.w	801089a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8010734:	4651      	mov	r1, sl
 8010736:	a810      	add	r0, sp, #64	@ 0x40
 8010738:	f007 f8e2 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801073c:	2002      	movs	r0, #2
 801073e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8010742:	9b01      	ldr	r3, [sp, #4]
 8010744:	9a06      	ldr	r2, [sp, #24]
 8010746:	fb91 f1f0 	sdiv	r1, r1, r0
 801074a:	189d      	adds	r5, r3, r2
 801074c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8010750:	9a07      	ldr	r2, [sp, #28]
 8010752:	4419      	add	r1, r3
 8010754:	9b02      	ldr	r3, [sp, #8]
 8010756:	4413      	add	r3, r2
 8010758:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 801075c:	1a6d      	subs	r5, r5, r1
 801075e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8010762:	fb92 f2f0 	sdiv	r2, r2, r0
 8010766:	440a      	add	r2, r1
 8010768:	1a9b      	subs	r3, r3, r2
 801076a:	435b      	muls	r3, r3
 801076c:	fb05 3505 	mla	r5, r5, r5, r3
 8010770:	4f4c      	ldr	r7, [pc, #304]	@ (80108a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8010772:	ac10      	add	r4, sp, #64	@ 0x40
 8010774:	f1b9 0f0c 	cmp.w	r9, #12
 8010778:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801077a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801077c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801077e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010780:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010784:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8010788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801078c:	f04f 0303 	mov.w	r3, #3
 8010790:	bfd8      	it	le
 8010792:	f109 32ff 	addle.w	r2, r9, #4294967295
 8010796:	f04f 0400 	mov.w	r4, #0
 801079a:	f8cd 9000 	str.w	r9, [sp]
 801079e:	bfcc      	ite	gt
 80107a0:	4698      	movgt	r8, r3
 80107a2:	fb92 f8f3 	sdivle	r8, r2, r3
 80107a6:	1c63      	adds	r3, r4, #1
 80107a8:	aa10      	add	r2, sp, #64	@ 0x40
 80107aa:	f004 0401 	and.w	r4, r4, #1
 80107ae:	f04f 0b00 	mov.w	fp, #0
 80107b2:	9308      	str	r3, [sp, #32]
 80107b4:	9b00      	ldr	r3, [sp, #0]
 80107b6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80107ba:	fb93 f3f8 	sdiv	r3, r3, r8
 80107be:	3404      	adds	r4, #4
 80107c0:	b29b      	uxth	r3, r3
 80107c2:	9304      	str	r3, [sp, #16]
 80107c4:	9a04      	ldr	r2, [sp, #16]
 80107c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80107ca:	fb13 f302 	smulbb	r3, r3, r2
 80107ce:	9a01      	ldr	r2, [sp, #4]
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	1899      	adds	r1, r3, r2
 80107d4:	9305      	str	r3, [sp, #20]
 80107d6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80107da:	b209      	sxth	r1, r1
 80107dc:	4299      	cmp	r1, r3
 80107de:	db4d      	blt.n	801087c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80107e0:	8932      	ldrh	r2, [r6, #8]
 80107e2:	4413      	add	r3, r2
 80107e4:	b21b      	sxth	r3, r3
 80107e6:	4299      	cmp	r1, r3
 80107e8:	da48      	bge.n	801087c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80107ea:	9b04      	ldr	r3, [sp, #16]
 80107ec:	6827      	ldr	r7, [r4, #0]
 80107ee:	fb17 f703 	smulbb	r7, r7, r3
 80107f2:	9b02      	ldr	r3, [sp, #8]
 80107f4:	b2bf      	uxth	r7, r7
 80107f6:	18fa      	adds	r2, r7, r3
 80107f8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80107fc:	b212      	sxth	r2, r2
 80107fe:	429a      	cmp	r2, r3
 8010800:	db3c      	blt.n	801087c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010802:	8970      	ldrh	r0, [r6, #10]
 8010804:	4403      	add	r3, r0
 8010806:	b21b      	sxth	r3, r3
 8010808:	429a      	cmp	r2, r3
 801080a:	da37      	bge.n	801087c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801080c:	2300      	movs	r3, #0
 801080e:	4630      	mov	r0, r6
 8010810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010812:	ab0b      	add	r3, sp, #44	@ 0x2c
 8010814:	f7ff ff36 	bl	8010684 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010818:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801081a:	b37a      	cbz	r2, 801087c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801081c:	4552      	cmp	r2, sl
 801081e:	d02d      	beq.n	801087c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010820:	4611      	mov	r1, r2
 8010822:	a80e      	add	r0, sp, #56	@ 0x38
 8010824:	9209      	str	r2, [sp, #36]	@ 0x24
 8010826:	f007 f86b 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801082a:	f04f 0e02 	mov.w	lr, #2
 801082e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8010832:	9a06      	ldr	r2, [sp, #24]
 8010834:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8010838:	9b01      	ldr	r3, [sp, #4]
 801083a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801083e:	4413      	add	r3, r2
 8010840:	9a07      	ldr	r2, [sp, #28]
 8010842:	fb91 f1fe 	sdiv	r1, r1, lr
 8010846:	fb9c fcfe 	sdiv	ip, ip, lr
 801084a:	4401      	add	r1, r0
 801084c:	1a58      	subs	r0, r3, r1
 801084e:	9b02      	ldr	r3, [sp, #8]
 8010850:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8010854:	4413      	add	r3, r2
 8010856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010858:	448c      	add	ip, r1
 801085a:	eba3 030c 	sub.w	r3, r3, ip
 801085e:	435b      	muls	r3, r3
 8010860:	fb00 3300 	mla	r3, r0, r0, r3
 8010864:	42ab      	cmp	r3, r5
 8010866:	d208      	bcs.n	801087a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8010868:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801086a:	461d      	mov	r5, r3
 801086c:	9803      	ldr	r0, [sp, #12]
 801086e:	6001      	str	r1, [r0, #0]
 8010870:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8010872:	9805      	ldr	r0, [sp, #20]
 8010874:	8008      	strh	r0, [r1, #0]
 8010876:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8010878:	800f      	strh	r7, [r1, #0]
 801087a:	4692      	mov	sl, r2
 801087c:	f10b 0b01 	add.w	fp, fp, #1
 8010880:	3408      	adds	r4, #8
 8010882:	f1bb 0f04 	cmp.w	fp, #4
 8010886:	d19d      	bne.n	80107c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8010888:	9b00      	ldr	r3, [sp, #0]
 801088a:	9c08      	ldr	r4, [sp, #32]
 801088c:	444b      	add	r3, r9
 801088e:	4544      	cmp	r4, r8
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	d188      	bne.n	80107a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8010894:	b021      	add	sp, #132	@ 0x84
 8010896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089a:	f04f 35ff 	mov.w	r5, #4294967295
 801089e:	e767      	b.n	8010770 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80108a0:	24028e2c 	.word	0x24028e2c
 80108a4:	080263a0 	.word	0x080263a0

080108a8 <_ZN8touchgfx4RectaNERKS0_>:
 80108a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108ac:	f9b1 7000 	ldrsh.w	r7, [r1]
 80108b0:	888c      	ldrh	r4, [r1, #4]
 80108b2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80108b6:	443c      	add	r4, r7
 80108b8:	b2a4      	uxth	r4, r4
 80108ba:	fa0f f884 	sxth.w	r8, r4
 80108be:	45c1      	cmp	r9, r8
 80108c0:	da2f      	bge.n	8010922 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80108c2:	8882      	ldrh	r2, [r0, #4]
 80108c4:	444a      	add	r2, r9
 80108c6:	b292      	uxth	r2, r2
 80108c8:	fa0f fe82 	sxth.w	lr, r2
 80108cc:	4577      	cmp	r7, lr
 80108ce:	da28      	bge.n	8010922 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80108d0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80108d4:	88cb      	ldrh	r3, [r1, #6]
 80108d6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80108da:	442b      	add	r3, r5
 80108dc:	b21b      	sxth	r3, r3
 80108de:	429e      	cmp	r6, r3
 80108e0:	da1f      	bge.n	8010922 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80108e2:	88c3      	ldrh	r3, [r0, #6]
 80108e4:	4433      	add	r3, r6
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	fa0f fc83 	sxth.w	ip, r3
 80108ec:	4565      	cmp	r5, ip
 80108ee:	da18      	bge.n	8010922 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80108f0:	454f      	cmp	r7, r9
 80108f2:	bfb8      	it	lt
 80108f4:	464f      	movlt	r7, r9
 80108f6:	42b5      	cmp	r5, r6
 80108f8:	bfb8      	it	lt
 80108fa:	4635      	movlt	r5, r6
 80108fc:	45f0      	cmp	r8, lr
 80108fe:	bfd8      	it	le
 8010900:	4622      	movle	r2, r4
 8010902:	1bd2      	subs	r2, r2, r7
 8010904:	8082      	strh	r2, [r0, #4]
 8010906:	884a      	ldrh	r2, [r1, #2]
 8010908:	88c9      	ldrh	r1, [r1, #6]
 801090a:	8007      	strh	r7, [r0, #0]
 801090c:	440a      	add	r2, r1
 801090e:	8045      	strh	r5, [r0, #2]
 8010910:	b292      	uxth	r2, r2
 8010912:	b211      	sxth	r1, r2
 8010914:	458c      	cmp	ip, r1
 8010916:	bfa8      	it	ge
 8010918:	4613      	movge	r3, r2
 801091a:	1b5b      	subs	r3, r3, r5
 801091c:	80c3      	strh	r3, [r0, #6]
 801091e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010922:	2300      	movs	r3, #0
 8010924:	8003      	strh	r3, [r0, #0]
 8010926:	8043      	strh	r3, [r0, #2]
 8010928:	8083      	strh	r3, [r0, #4]
 801092a:	80c3      	strh	r3, [r0, #6]
 801092c:	e7f7      	b.n	801091e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801092e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801092e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010932:	2b00      	cmp	r3, #0
 8010934:	dd06      	ble.n	8010944 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8010936:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801093a:	2800      	cmp	r0, #0
 801093c:	bfcc      	ite	gt
 801093e:	2000      	movgt	r0, #0
 8010940:	2001      	movle	r0, #1
 8010942:	4770      	bx	lr
 8010944:	2001      	movs	r0, #1
 8010946:	4770      	bx	lr

08010948 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8010948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801094c:	2300      	movs	r3, #0
 801094e:	4604      	mov	r4, r0
 8010950:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8010952:	8003      	strh	r3, [r0, #0]
 8010954:	8043      	strh	r3, [r0, #2]
 8010956:	8083      	strh	r3, [r0, #4]
 8010958:	80c3      	strh	r3, [r0, #6]
 801095a:	2d00      	cmp	r5, #0
 801095c:	d040      	beq.n	80109e0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801095e:	1d28      	adds	r0, r5, #4
 8010960:	f7ff ffe5 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010964:	b988      	cbnz	r0, 801098a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010966:	4620      	mov	r0, r4
 8010968:	f7ff ffe1 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 801096c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8010970:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010974:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8010978:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801097c:	b138      	cbz	r0, 801098e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801097e:	8022      	strh	r2, [r4, #0]
 8010980:	8063      	strh	r3, [r4, #2]
 8010982:	f8a4 e004 	strh.w	lr, [r4, #4]
 8010986:	f8a4 c006 	strh.w	ip, [r4, #6]
 801098a:	69ad      	ldr	r5, [r5, #24]
 801098c:	e7e5      	b.n	801095a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801098e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010992:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010996:	4290      	cmp	r0, r2
 8010998:	4607      	mov	r7, r0
 801099a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801099e:	460e      	mov	r6, r1
 80109a0:	bfa8      	it	ge
 80109a2:	4617      	movge	r7, r2
 80109a4:	4299      	cmp	r1, r3
 80109a6:	4472      	add	r2, lr
 80109a8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80109ac:	bfa8      	it	ge
 80109ae:	461e      	movge	r6, r3
 80109b0:	4440      	add	r0, r8
 80109b2:	4471      	add	r1, lr
 80109b4:	4463      	add	r3, ip
 80109b6:	b200      	sxth	r0, r0
 80109b8:	8027      	strh	r7, [r4, #0]
 80109ba:	b212      	sxth	r2, r2
 80109bc:	8066      	strh	r6, [r4, #2]
 80109be:	b209      	sxth	r1, r1
 80109c0:	b21b      	sxth	r3, r3
 80109c2:	4290      	cmp	r0, r2
 80109c4:	bfac      	ite	ge
 80109c6:	ebc7 0200 	rsbge	r2, r7, r0
 80109ca:	ebc7 0202 	rsblt	r2, r7, r2
 80109ce:	4299      	cmp	r1, r3
 80109d0:	bfac      	ite	ge
 80109d2:	ebc6 0301 	rsbge	r3, r6, r1
 80109d6:	ebc6 0303 	rsblt	r3, r6, r3
 80109da:	80a2      	strh	r2, [r4, #4]
 80109dc:	80e3      	strh	r3, [r4, #6]
 80109de:	e7d4      	b.n	801098a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80109e0:	4620      	mov	r0, r4
 80109e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080109e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80109e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80109ea:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80109ee:	b383      	cbz	r3, 8010a52 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80109f0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80109f2:	b374      	cbz	r4, 8010a52 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80109f4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80109f8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80109fc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8010a00:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8010a04:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010a08:	b303      	cbz	r3, 8010a4c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010a0a:	4668      	mov	r0, sp
 8010a0c:	1d21      	adds	r1, r4, #4
 8010a0e:	f8ad 5000 	strh.w	r5, [sp]
 8010a12:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010a16:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010a1a:	f8ad 8006 	strh.w	r8, [sp, #6]
 8010a1e:	f7ff ff43 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 8010a22:	4668      	mov	r0, sp
 8010a24:	f7ff ff83 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010a28:	b980      	cbnz	r0, 8010a4c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010a2a:	f8bd 3000 	ldrh.w	r3, [sp]
 8010a2e:	4669      	mov	r1, sp
 8010a30:	88a2      	ldrh	r2, [r4, #4]
 8010a32:	4620      	mov	r0, r4
 8010a34:	1a9b      	subs	r3, r3, r2
 8010a36:	88e2      	ldrh	r2, [r4, #6]
 8010a38:	f8ad 3000 	strh.w	r3, [sp]
 8010a3c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010a40:	1a9b      	subs	r3, r3, r2
 8010a42:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010a46:	6823      	ldr	r3, [r4, #0]
 8010a48:	689b      	ldr	r3, [r3, #8]
 8010a4a:	4798      	blx	r3
 8010a4c:	69a4      	ldr	r4, [r4, #24]
 8010a4e:	2c00      	cmp	r4, #0
 8010a50:	d1d8      	bne.n	8010a04 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8010a52:	b002      	add	sp, #8
 8010a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a58 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8010a58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a5a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8010a5e:	460d      	mov	r5, r1
 8010a60:	4616      	mov	r6, r2
 8010a62:	b323      	cbz	r3, 8010aae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010a64:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010a66:	b314      	cbz	r4, 8010aae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010a68:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010a6c:	b1eb      	cbz	r3, 8010aaa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010a6e:	6828      	ldr	r0, [r5, #0]
 8010a70:	466b      	mov	r3, sp
 8010a72:	6869      	ldr	r1, [r5, #4]
 8010a74:	c303      	stmia	r3!, {r0, r1}
 8010a76:	4668      	mov	r0, sp
 8010a78:	1d21      	adds	r1, r4, #4
 8010a7a:	f7ff ff15 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 8010a7e:	4668      	mov	r0, sp
 8010a80:	f7ff ff55 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010a84:	b988      	cbnz	r0, 8010aaa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010a86:	f8bd 3000 	ldrh.w	r3, [sp]
 8010a8a:	4669      	mov	r1, sp
 8010a8c:	88a2      	ldrh	r2, [r4, #4]
 8010a8e:	4620      	mov	r0, r4
 8010a90:	1a9b      	subs	r3, r3, r2
 8010a92:	88e2      	ldrh	r2, [r4, #6]
 8010a94:	f8ad 3000 	strh.w	r3, [sp]
 8010a98:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010a9c:	1a9b      	subs	r3, r3, r2
 8010a9e:	4632      	mov	r2, r6
 8010aa0:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010aa4:	6823      	ldr	r3, [r4, #0]
 8010aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010aa8:	4798      	blx	r3
 8010aaa:	69a4      	ldr	r4, [r4, #24]
 8010aac:	e7db      	b.n	8010a66 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8010aae:	b002      	add	sp, #8
 8010ab0:	bd70      	pop	{r4, r5, r6, pc}

08010ab2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8010ab2:	6803      	ldr	r3, [r0, #0]
 8010ab4:	b513      	push	{r0, r1, r4, lr}
 8010ab6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8010aba:	2300      	movs	r3, #0
 8010abc:	e9cd 3300 	strd	r3, r3, [sp]
 8010ac0:	466b      	mov	r3, sp
 8010ac2:	47a0      	blx	r4
 8010ac4:	b002      	add	sp, #8
 8010ac6:	bd10      	pop	{r4, pc}

08010ac8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010ac8:	2301      	movs	r3, #1
 8010aca:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010ace:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8010ad2:	4770      	bx	lr

08010ad4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010ada:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8010ade:	4770      	bx	lr

08010ae0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010ae0:	6843      	ldr	r3, [r0, #4]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	725a      	strb	r2, [r3, #9]
 8010ae6:	6840      	ldr	r0, [r0, #4]
 8010ae8:	6803      	ldr	r3, [r0, #0]
 8010aea:	691b      	ldr	r3, [r3, #16]
 8010aec:	4718      	bx	r3

08010aee <_ZN8touchgfx3HAL8flushDMAEv>:
 8010aee:	6840      	ldr	r0, [r0, #4]
 8010af0:	6803      	ldr	r3, [r0, #0]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	4718      	bx	r3

08010af6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8010af6:	b530      	push	{r4, r5, lr}
 8010af8:	b08b      	sub	sp, #44	@ 0x2c
 8010afa:	6804      	ldr	r4, [r0, #0]
 8010afc:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8010b00:	9509      	str	r5, [sp, #36]	@ 0x24
 8010b02:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8010b06:	9508      	str	r5, [sp, #32]
 8010b08:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8010b0c:	9507      	str	r5, [sp, #28]
 8010b0e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8010b12:	9506      	str	r5, [sp, #24]
 8010b14:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8010b18:	9505      	str	r5, [sp, #20]
 8010b1a:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8010b1e:	9504      	str	r5, [sp, #16]
 8010b20:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8010b24:	9503      	str	r5, [sp, #12]
 8010b26:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8010b2a:	9502      	str	r5, [sp, #8]
 8010b2c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8010b30:	e9cd 3500 	strd	r3, r5, [sp]
 8010b34:	4613      	mov	r3, r2
 8010b36:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8010b38:	2200      	movs	r2, #0
 8010b3a:	47a0      	blx	r4
 8010b3c:	b00b      	add	sp, #44	@ 0x2c
 8010b3e:	bd30      	pop	{r4, r5, pc}

08010b40 <_ZN8touchgfx3HAL10beginFrameEv>:
 8010b40:	4b04      	ldr	r3, [pc, #16]	@ (8010b54 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	b123      	cbz	r3, 8010b50 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8010b46:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8010b4a:	f080 0001 	eor.w	r0, r0, #1
 8010b4e:	4770      	bx	lr
 8010b50:	2001      	movs	r0, #1
 8010b52:	4770      	bx	lr
 8010b54:	24028e2a 	.word	0x24028e2a

08010b58 <_ZN8touchgfx3HAL8endFrameEv>:
 8010b58:	b510      	push	{r4, lr}
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	6840      	ldr	r0, [r0, #4]
 8010b5e:	6803      	ldr	r3, [r0, #0]
 8010b60:	689b      	ldr	r3, [r3, #8]
 8010b62:	4798      	blx	r3
 8010b64:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8010b68:	b113      	cbz	r3, 8010b70 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8010b70:	bd10      	pop	{r4, pc}

08010b72 <_ZN8touchgfx3HAL10initializeEv>:
 8010b72:	b510      	push	{r4, lr}
 8010b74:	4604      	mov	r4, r0
 8010b76:	f7f2 f9af 	bl	8002ed8 <_ZN8touchgfx10OSWrappers10initializeEv>
 8010b7a:	f7f1 fa05 	bl	8001f88 <_ZN8touchgfx4GPIO4initEv>
 8010b7e:	6860      	ldr	r0, [r4, #4]
 8010b80:	6803      	ldr	r3, [r0, #0]
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	4798      	blx	r3
 8010b86:	68e0      	ldr	r0, [r4, #12]
 8010b88:	6803      	ldr	r3, [r0, #0]
 8010b8a:	689b      	ldr	r3, [r3, #8]
 8010b8c:	4798      	blx	r3
 8010b8e:	6823      	ldr	r3, [r4, #0]
 8010b90:	4620      	mov	r0, r4
 8010b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b98:	4718      	bx	r3
	...

08010b9c <_ZN8touchgfx3HAL4tickEv>:
 8010b9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010b9e:	6803      	ldr	r3, [r0, #0]
 8010ba0:	4604      	mov	r4, r0
 8010ba2:	4d5b      	ldr	r5, [pc, #364]	@ (8010d10 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8010ba4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010ba8:	4798      	blx	r3
 8010baa:	2800      	cmp	r0, #0
 8010bac:	f000 8095 	beq.w	8010cda <_ZN8touchgfx3HAL4tickEv+0x13e>
 8010bb0:	2001      	movs	r0, #1
 8010bb2:	2600      	movs	r6, #0
 8010bb4:	f7f1 f94e 	bl	8001e54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010bb8:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8010bbc:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8010bc0:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8010bc4:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8010bc8:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8010bcc:	b133      	cbz	r3, 8010bdc <_ZN8touchgfx3HAL4tickEv+0x40>
 8010bce:	6823      	ldr	r3, [r4, #0]
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010bd6:	4798      	blx	r3
 8010bd8:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8010bdc:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8010be0:	2601      	movs	r6, #1
 8010be2:	6862      	ldr	r2, [r4, #4]
 8010be4:	f083 0301 	eor.w	r3, r3, #1
 8010be8:	702e      	strb	r6, [r5, #0]
 8010bea:	7253      	strb	r3, [r2, #9]
 8010bec:	f005 fd74 	bl	80166d8 <_ZN8touchgfx11Application11getInstanceEv>
 8010bf0:	6803      	ldr	r3, [r0, #0]
 8010bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bf4:	4798      	blx	r3
 8010bf6:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8010bfa:	b90b      	cbnz	r3, 8010c00 <_ZN8touchgfx3HAL4tickEv+0x64>
 8010bfc:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8010c00:	f005 fd6a 	bl	80166d8 <_ZN8touchgfx11Application11getInstanceEv>
 8010c04:	6803      	ldr	r3, [r0, #0]
 8010c06:	695b      	ldr	r3, [r3, #20]
 8010c08:	4798      	blx	r3
 8010c0a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8010c0c:	6803      	ldr	r3, [r0, #0]
 8010c0e:	691b      	ldr	r3, [r3, #16]
 8010c10:	4798      	blx	r3
 8010c12:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8010c16:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8010c1a:	3b01      	subs	r3, #1
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8010c22:	b10a      	cbz	r2, 8010c28 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d1eb      	bne.n	8010c00 <_ZN8touchgfx3HAL4tickEv+0x64>
 8010c28:	4a3a      	ldr	r2, [pc, #232]	@ (8010d14 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8010c2a:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8010c2e:	7813      	ldrb	r3, [r2, #0]
 8010c30:	3301      	adds	r3, #1
 8010c32:	b25b      	sxtb	r3, r3
 8010c34:	4299      	cmp	r1, r3
 8010c36:	7013      	strb	r3, [r2, #0]
 8010c38:	dc10      	bgt.n	8010c5c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	68e0      	ldr	r0, [r4, #12]
 8010c3e:	a902      	add	r1, sp, #8
 8010c40:	7013      	strb	r3, [r2, #0]
 8010c42:	aa03      	add	r2, sp, #12
 8010c44:	6803      	ldr	r3, [r0, #0]
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	4798      	blx	r3
 8010c4a:	6823      	ldr	r3, [r4, #0]
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	d050      	beq.n	8010cf2 <_ZN8touchgfx3HAL4tickEv+0x156>
 8010c50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010c54:	4620      	mov	r0, r4
 8010c56:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010c5a:	4798      	blx	r3
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	6960      	ldr	r0, [r4, #20]
 8010c60:	f88d 3007 	strb.w	r3, [sp, #7]
 8010c64:	b158      	cbz	r0, 8010c7e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010c66:	6803      	ldr	r3, [r0, #0]
 8010c68:	f10d 0107 	add.w	r1, sp, #7
 8010c6c:	68db      	ldr	r3, [r3, #12]
 8010c6e:	4798      	blx	r3
 8010c70:	b128      	cbz	r0, 8010c7e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010c72:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8010c74:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010c78:	6803      	ldr	r3, [r0, #0]
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	4798      	blx	r3
 8010c7e:	f104 001c 	add.w	r0, r4, #28
 8010c82:	f013 f9d7 	bl	8024034 <_ZN8touchgfx8Gestures4tickEv>
 8010c86:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8010c8a:	b30b      	cbz	r3, 8010cd0 <_ZN8touchgfx3HAL4tickEv+0x134>
 8010c8c:	6920      	ldr	r0, [r4, #16]
 8010c8e:	6803      	ldr	r3, [r0, #0]
 8010c90:	691b      	ldr	r3, [r3, #16]
 8010c92:	4798      	blx	r3
 8010c94:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010c96:	4606      	mov	r6, r0
 8010c98:	b903      	cbnz	r3, 8010c9c <_ZN8touchgfx3HAL4tickEv+0x100>
 8010c9a:	6760      	str	r0, [r4, #116]	@ 0x74
 8010c9c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8010d18 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8010ca0:	1af3      	subs	r3, r6, r3
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d914      	bls.n	8010cd0 <_ZN8touchgfx3HAL4tickEv+0x134>
 8010ca6:	6920      	ldr	r0, [r4, #16]
 8010ca8:	6803      	ldr	r3, [r0, #0]
 8010caa:	699b      	ldr	r3, [r3, #24]
 8010cac:	4798      	blx	r3
 8010cae:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010cb0:	2264      	movs	r2, #100	@ 0x64
 8010cb2:	1af3      	subs	r3, r6, r3
 8010cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	dc1d      	bgt.n	8010cfc <_ZN8touchgfx3HAL4tickEv+0x160>
 8010cc0:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8010cc4:	6920      	ldr	r0, [r4, #16]
 8010cc6:	2100      	movs	r1, #0
 8010cc8:	6803      	ldr	r3, [r0, #0]
 8010cca:	69db      	ldr	r3, [r3, #28]
 8010ccc:	4798      	blx	r3
 8010cce:	6766      	str	r6, [r4, #116]	@ 0x74
 8010cd0:	f005 fd02 	bl	80166d8 <_ZN8touchgfx11Application11getInstanceEv>
 8010cd4:	6803      	ldr	r3, [r0, #0]
 8010cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cd8:	4798      	blx	r3
 8010cda:	6823      	ldr	r3, [r4, #0]
 8010cdc:	4620      	mov	r0, r4
 8010cde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010ce2:	4798      	blx	r3
 8010ce4:	2001      	movs	r0, #1
 8010ce6:	f7f1 f8e5 	bl	8001eb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010cea:	2300      	movs	r3, #0
 8010cec:	702b      	strb	r3, [r5, #0]
 8010cee:	b004      	add	sp, #16
 8010cf0:	bd70      	pop	{r4, r5, r6, pc}
 8010cf2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	4798      	blx	r3
 8010cfa:	e7af      	b.n	8010c5c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010cfc:	2863      	cmp	r0, #99	@ 0x63
 8010cfe:	bfcb      	itete	gt
 8010d00:	2300      	movgt	r3, #0
 8010d02:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8010d06:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8010d0a:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8010d0e:	e7d9      	b.n	8010cc4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8010d10:	24028e30 	.word	0x24028e30
 8010d14:	24028e31 	.word	0x24028e31
 8010d18:	05f5e100 	.word	0x05f5e100

08010d1c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8010d1c:	b510      	push	{r4, lr}
 8010d1e:	4604      	mov	r4, r0
 8010d20:	f7f2 f90a 	bl	8002f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8010d24:	2200      	movs	r2, #0
 8010d26:	6863      	ldr	r3, [r4, #4]
 8010d28:	729a      	strb	r2, [r3, #10]
 8010d2a:	bd10      	pop	{r4, pc}

08010d2c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8010d2c:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8010d2e:	301c      	adds	r0, #28
 8010d30:	f013 b97e 	b.w	8024030 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08010d34 <_ZN8touchgfx3HAL5touchEll>:
 8010d34:	b530      	push	{r4, r5, lr}
 8010d36:	b087      	sub	sp, #28
 8010d38:	4604      	mov	r4, r0
 8010d3a:	a804      	add	r0, sp, #16
 8010d3c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010d40:	f005 fab2 	bl	80162a8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8010d44:	9b04      	ldr	r3, [sp, #16]
 8010d46:	a906      	add	r1, sp, #24
 8010d48:	a803      	add	r0, sp, #12
 8010d4a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010d4e:	9b05      	ldr	r3, [sp, #20]
 8010d50:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010d54:	f005 fafa 	bl	801634c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8010d58:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8010d5c:	f104 001c 	add.w	r0, r4, #28
 8010d60:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010d64:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8010d68:	b189      	cbz	r1, 8010d8e <_ZN8touchgfx3HAL5touchEll+0x5a>
 8010d6a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8010d6e:	9300      	str	r3, [sp, #0]
 8010d70:	4613      	mov	r3, r2
 8010d72:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8010d76:	462a      	mov	r2, r5
 8010d78:	f013 f96a 	bl	8024050 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8010d7c:	b128      	cbz	r0, 8010d8a <_ZN8touchgfx3HAL5touchEll+0x56>
 8010d7e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010d82:	6623      	str	r3, [r4, #96]	@ 0x60
 8010d84:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010d88:	6663      	str	r3, [r4, #100]	@ 0x64
 8010d8a:	b007      	add	sp, #28
 8010d8c:	bd30      	pop	{r4, r5, pc}
 8010d8e:	f013 f99f 	bl	80240d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010d92:	2301      	movs	r3, #1
 8010d94:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8010d98:	e7f1      	b.n	8010d7e <_ZN8touchgfx3HAL5touchEll+0x4a>

08010d9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8010d9a:	b510      	push	{r4, lr}
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d046      	beq.n	8010e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010da0:	ea81 0002 	eor.w	r0, r1, r2
 8010da4:	07c4      	lsls	r4, r0, #31
 8010da6:	d508      	bpl.n	8010dba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8010da8:	440b      	add	r3, r1
 8010daa:	3a01      	subs	r2, #1
 8010dac:	428b      	cmp	r3, r1
 8010dae:	d93e      	bls.n	8010e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010db0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010db4:	f801 0b01 	strb.w	r0, [r1], #1
 8010db8:	e7f8      	b.n	8010dac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8010dba:	07d0      	lsls	r0, r2, #31
 8010dbc:	bf42      	ittt	mi
 8010dbe:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8010dc2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8010dc6:	f801 0b01 	strbmi.w	r0, [r1], #1
 8010dca:	2b01      	cmp	r3, #1
 8010dcc:	d911      	bls.n	8010df2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010dce:	ea81 0402 	eor.w	r4, r1, r2
 8010dd2:	4610      	mov	r0, r2
 8010dd4:	07a4      	lsls	r4, r4, #30
 8010dd6:	d022      	beq.n	8010e1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8010dd8:	f023 0401 	bic.w	r4, r3, #1
 8010ddc:	440c      	add	r4, r1
 8010dde:	428c      	cmp	r4, r1
 8010de0:	4602      	mov	r2, r0
 8010de2:	d904      	bls.n	8010dee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8010de4:	8812      	ldrh	r2, [r2, #0]
 8010de6:	3002      	adds	r0, #2
 8010de8:	f821 2b02 	strh.w	r2, [r1], #2
 8010dec:	e7f7      	b.n	8010dde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8010dee:	f003 0301 	and.w	r3, r3, #1
 8010df2:	f023 0003 	bic.w	r0, r3, #3
 8010df6:	4408      	add	r0, r1
 8010df8:	4288      	cmp	r0, r1
 8010dfa:	4614      	mov	r4, r2
 8010dfc:	d904      	bls.n	8010e08 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8010dfe:	6824      	ldr	r4, [r4, #0]
 8010e00:	3204      	adds	r2, #4
 8010e02:	f841 4b04 	str.w	r4, [r1], #4
 8010e06:	e7f7      	b.n	8010df8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8010e08:	f003 0303 	and.w	r3, r3, #3
 8010e0c:	3a01      	subs	r2, #1
 8010e0e:	440b      	add	r3, r1
 8010e10:	428b      	cmp	r3, r1
 8010e12:	d90c      	bls.n	8010e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010e14:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010e18:	f801 0b01 	strb.w	r0, [r1], #1
 8010e1c:	e7f8      	b.n	8010e10 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8010e1e:	0790      	lsls	r0, r2, #30
 8010e20:	d0e7      	beq.n	8010df2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010e22:	f832 0b02 	ldrh.w	r0, [r2], #2
 8010e26:	3b02      	subs	r3, #2
 8010e28:	f821 0b02 	strh.w	r0, [r1], #2
 8010e2c:	e7e1      	b.n	8010df2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010e2e:	2001      	movs	r0, #1
 8010e30:	bd10      	pop	{r4, pc}

08010e32 <_ZN8touchgfx3HAL7noTouchEv>:
 8010e32:	b510      	push	{r4, lr}
 8010e34:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8010e38:	4604      	mov	r4, r0
 8010e3a:	b153      	cbz	r3, 8010e52 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8010e3c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8010e40:	2101      	movs	r1, #1
 8010e42:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8010e46:	301c      	adds	r0, #28
 8010e48:	f013 f942 	bl	80240d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8010e52:	bd10      	pop	{r4, pc}

08010e54 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8010e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e58:	b085      	sub	sp, #20
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	2000      	movs	r0, #0
 8010e5e:	4699      	mov	r9, r3
 8010e60:	ad04      	add	r5, sp, #16
 8010e62:	460f      	mov	r7, r1
 8010e64:	4690      	mov	r8, r2
 8010e66:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010e6a:	69a0      	ldr	r0, [r4, #24]
 8010e6c:	6806      	ldr	r6, [r0, #0]
 8010e6e:	9501      	str	r5, [sp, #4]
 8010e70:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8010e74:	9500      	str	r5, [sp, #0]
 8010e76:	6835      	ldr	r5, [r6, #0]
 8010e78:	47a8      	blx	r5
 8010e7a:	4d10      	ldr	r5, [pc, #64]	@ (8010ebc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8010e7c:	4606      	mov	r6, r0
 8010e7e:	f8a5 9000 	strh.w	r9, [r5]
 8010e82:	f7f3 f973 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 8010e86:	6803      	ldr	r3, [r0, #0]
 8010e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e8a:	4798      	blx	r3
 8010e8c:	b128      	cbz	r0, 8010e9a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8010e8e:	2801      	cmp	r0, #1
 8010e90:	d00b      	beq.n	8010eaa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8010e92:	4630      	mov	r0, r6
 8010e94:	b005      	add	sp, #20
 8010e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e9a:	882b      	ldrh	r3, [r5, #0]
 8010e9c:	fb08 7203 	mla	r2, r8, r3, r7
 8010ea0:	9b03      	ldr	r3, [sp, #12]
 8010ea2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8010ea6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010ea8:	e7f3      	b.n	8010e92 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010eaa:	882a      	ldrh	r2, [r5, #0]
 8010eac:	9b03      	ldr	r3, [sp, #12]
 8010eae:	fb08 7202 	mla	r2, r8, r2, r7
 8010eb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010eb6:	1a9a      	subs	r2, r3, r2
 8010eb8:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8010eba:	e7ea      	b.n	8010e92 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010ebc:	24028e26 	.word	0x24028e26

08010ec0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8010ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ec2:	b08b      	sub	sp, #44	@ 0x2c
 8010ec4:	4617      	mov	r7, r2
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	460e      	mov	r6, r1
 8010eca:	461d      	mov	r5, r3
 8010ecc:	f7f3 f94e 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 8010ed0:	6803      	ldr	r3, [r0, #0]
 8010ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ed4:	4798      	blx	r3
 8010ed6:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8010eda:	9007      	str	r0, [sp, #28]
 8010edc:	4631      	mov	r1, r6
 8010ede:	6822      	ldr	r2, [r4, #0]
 8010ee0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8010f18 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	881b      	ldrh	r3, [r3, #0]
 8010eea:	9306      	str	r3, [sp, #24]
 8010eec:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010ef0:	9305      	str	r3, [sp, #20]
 8010ef2:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8010ef6:	9304      	str	r3, [sp, #16]
 8010ef8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010efc:	9303      	str	r3, [sp, #12]
 8010efe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010f02:	9302      	str	r3, [sp, #8]
 8010f04:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010f08:	e9cd 5300 	strd	r5, r3, [sp]
 8010f0c:	463b      	mov	r3, r7
 8010f0e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8010f10:	2200      	movs	r2, #0
 8010f12:	47a8      	blx	r5
 8010f14:	b00b      	add	sp, #44	@ 0x2c
 8010f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f18:	24028e26 	.word	0x24028e26

08010f1c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8010f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f20:	4698      	mov	r8, r3
 8010f22:	6803      	ldr	r3, [r0, #0]
 8010f24:	b08b      	sub	sp, #44	@ 0x2c
 8010f26:	4617      	mov	r7, r2
 8010f28:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8010f2a:	460e      	mov	r6, r1
 8010f2c:	4b13      	ldr	r3, [pc, #76]	@ (8010f7c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8010f2e:	4604      	mov	r4, r0
 8010f30:	f8b3 9000 	ldrh.w	r9, [r3]
 8010f34:	f7f3 f91a 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 8010f38:	6803      	ldr	r3, [r0, #0]
 8010f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f3c:	4798      	blx	r3
 8010f3e:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8010f42:	2200      	movs	r2, #0
 8010f44:	4631      	mov	r1, r6
 8010f46:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010f4a:	2302      	movs	r3, #2
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8010f52:	2301      	movs	r3, #1
 8010f54:	9305      	str	r3, [sp, #20]
 8010f56:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8010f5a:	9304      	str	r3, [sp, #16]
 8010f5c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8010f60:	9303      	str	r3, [sp, #12]
 8010f62:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010f66:	9302      	str	r3, [sp, #8]
 8010f68:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010f6c:	e9cd 8300 	strd	r8, r3, [sp]
 8010f70:	463b      	mov	r3, r7
 8010f72:	47a8      	blx	r5
 8010f74:	b00b      	add	sp, #44	@ 0x2c
 8010f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f7a:	bf00      	nop
 8010f7c:	24028e26 	.word	0x24028e26

08010f80 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8010f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f84:	4698      	mov	r8, r3
 8010f86:	6803      	ldr	r3, [r0, #0]
 8010f88:	b087      	sub	sp, #28
 8010f8a:	460e      	mov	r6, r1
 8010f8c:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8010f8e:	4617      	mov	r7, r2
 8010f90:	4b0f      	ldr	r3, [pc, #60]	@ (8010fd0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8010f92:	4604      	mov	r4, r0
 8010f94:	f8b3 9000 	ldrh.w	r9, [r3]
 8010f98:	f7f3 f8e8 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 8010f9c:	6803      	ldr	r3, [r0, #0]
 8010f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fa0:	4798      	blx	r3
 8010fa2:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8010fa6:	463a      	mov	r2, r7
 8010fa8:	4631      	mov	r1, r6
 8010faa:	f8cd 900c 	str.w	r9, [sp, #12]
 8010fae:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8010fb2:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	9302      	str	r3, [sp, #8]
 8010fba:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8010fbe:	9301      	str	r3, [sp, #4]
 8010fc0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8010fc4:	9300      	str	r3, [sp, #0]
 8010fc6:	4643      	mov	r3, r8
 8010fc8:	47a8      	blx	r5
 8010fca:	b007      	add	sp, #28
 8010fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fd0:	24028e26 	.word	0x24028e26

08010fd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8010fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd8:	4604      	mov	r4, r0
 8010fda:	b08f      	sub	sp, #60	@ 0x3c
 8010fdc:	4610      	mov	r0, r2
 8010fde:	460d      	mov	r5, r1
 8010fe0:	4691      	mov	r9, r2
 8010fe2:	461e      	mov	r6, r3
 8010fe4:	f008 ff62 	bl	8019eac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	f000 809d 	beq.w	8011128 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8010fee:	6823      	ldr	r3, [r4, #0]
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	f8df b198 	ldr.w	fp, [pc, #408]	@ 801118c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8010ff6:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8010ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ffc:	4798      	blx	r3
 8010ffe:	6823      	ldr	r3, [r4, #0]
 8011000:	4620      	mov	r0, r4
 8011002:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8011190 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8011006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011008:	4798      	blx	r3
 801100a:	f8bb 3000 	ldrh.w	r3, [fp]
 801100e:	4f5c      	ldr	r7, [pc, #368]	@ (8011180 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011010:	9301      	str	r3, [sp, #4]
 8011012:	f8ba 3000 	ldrh.w	r3, [sl]
 8011016:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801101a:	4640      	mov	r0, r8
 801101c:	9302      	str	r3, [sp, #8]
 801101e:	883b      	ldrh	r3, [r7, #0]
 8011020:	9303      	str	r3, [sp, #12]
 8011022:	4b58      	ldr	r3, [pc, #352]	@ (8011184 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011024:	881a      	ldrh	r2, [r3, #0]
 8011026:	9305      	str	r3, [sp, #20]
 8011028:	9204      	str	r2, [sp, #16]
 801102a:	f009 f88f 	bl	801a14c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801102e:	8038      	strh	r0, [r7, #0]
 8011030:	4640      	mov	r0, r8
 8011032:	f009 f8bf 	bl	801a1b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011036:	9b05      	ldr	r3, [sp, #20]
 8011038:	b280      	uxth	r0, r0
 801103a:	8018      	strh	r0, [r3, #0]
 801103c:	4b52      	ldr	r3, [pc, #328]	@ (8011188 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d174      	bne.n	801112e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8011044:	883b      	ldrh	r3, [r7, #0]
 8011046:	f8aa 0000 	strh.w	r0, [sl]
 801104a:	f8ab 3000 	strh.w	r3, [fp]
 801104e:	4648      	mov	r0, r9
 8011050:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8011054:	f008 ff2a 	bl	8019eac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011058:	2200      	movs	r2, #0
 801105a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 801105e:	4611      	mov	r1, r2
 8011060:	4628      	mov	r0, r5
 8011062:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8011066:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801106a:	f7f3 f9d1 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 801106e:	2301      	movs	r3, #1
 8011070:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8011074:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8011078:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801107c:	2b00      	cmp	r3, #0
 801107e:	dd5c      	ble.n	801113a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011080:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011084:	2b00      	cmp	r3, #0
 8011086:	dd58      	ble.n	801113a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011088:	462a      	mov	r2, r5
 801108a:	ab0a      	add	r3, sp, #40	@ 0x28
 801108c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011090:	6851      	ldr	r1, [r2, #4]
 8011092:	c303      	stmia	r3!, {r0, r1}
 8011094:	4631      	mov	r1, r6
 8011096:	a80a      	add	r0, sp, #40	@ 0x28
 8011098:	f7ff fc06 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 801109c:	4b38      	ldr	r3, [pc, #224]	@ (8011180 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801109e:	2100      	movs	r1, #0
 80110a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80110a4:	4b37      	ldr	r3, [pc, #220]	@ (8011184 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80110a6:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80110aa:	aa0a      	add	r2, sp, #40	@ 0x28
 80110ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110b0:	910c      	str	r1, [sp, #48]	@ 0x30
 80110b2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80110b6:	ab08      	add	r3, sp, #32
 80110b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80110c0:	4618      	mov	r0, r3
 80110c2:	a90c      	add	r1, sp, #48	@ 0x30
 80110c4:	f7ff fbf0 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 80110c8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d13c      	bne.n	8011148 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80110ce:	2000      	movs	r0, #0
 80110d0:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 80110d4:	2600      	movs	r6, #0
 80110d6:	696b      	ldr	r3, [r5, #20]
 80110d8:	a908      	add	r1, sp, #32
 80110da:	682a      	ldr	r2, [r5, #0]
 80110dc:	4628      	mov	r0, r5
 80110de:	9305      	str	r3, [sp, #20]
 80110e0:	616e      	str	r6, [r5, #20]
 80110e2:	6892      	ldr	r2, [r2, #8]
 80110e4:	4790      	blx	r2
 80110e6:	9b05      	ldr	r3, [sp, #20]
 80110e8:	4652      	mov	r2, sl
 80110ea:	4649      	mov	r1, r9
 80110ec:	616b      	str	r3, [r5, #20]
 80110ee:	4628      	mov	r0, r5
 80110f0:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 80110f4:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80110f8:	f7f3 f98a 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 80110fc:	9a01      	ldr	r2, [sp, #4]
 80110fe:	4b23      	ldr	r3, [pc, #140]	@ (801118c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8011100:	4620      	mov	r0, r4
 8011102:	801a      	strh	r2, [r3, #0]
 8011104:	9a02      	ldr	r2, [sp, #8]
 8011106:	4b22      	ldr	r3, [pc, #136]	@ (8011190 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8011108:	801a      	strh	r2, [r3, #0]
 801110a:	9a03      	ldr	r2, [sp, #12]
 801110c:	4b1c      	ldr	r3, [pc, #112]	@ (8011180 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801110e:	801a      	strh	r2, [r3, #0]
 8011110:	4b1c      	ldr	r3, [pc, #112]	@ (8011184 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011112:	9a04      	ldr	r2, [sp, #16]
 8011114:	801a      	strh	r2, [r3, #0]
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 801111c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801111e:	4798      	blx	r3
 8011120:	6823      	ldr	r3, [r4, #0]
 8011122:	4620      	mov	r0, r4
 8011124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011126:	4798      	blx	r3
 8011128:	b00f      	add	sp, #60	@ 0x3c
 801112a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112e:	883b      	ldrh	r3, [r7, #0]
 8011130:	f8ab 0000 	strh.w	r0, [fp]
 8011134:	f8aa 3000 	strh.w	r3, [sl]
 8011138:	e789      	b.n	801104e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801113a:	462a      	mov	r2, r5
 801113c:	ab0a      	add	r3, sp, #40	@ 0x28
 801113e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011142:	6851      	ldr	r1, [r2, #4]
 8011144:	c303      	stmia	r3!, {r0, r1}
 8011146:	e7a9      	b.n	801109c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8011148:	a807      	add	r0, sp, #28
 801114a:	f009 f8eb 	bl	801a324 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801114e:	4606      	mov	r6, r0
 8011150:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8011152:	6803      	ldr	r3, [r0, #0]
 8011154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011156:	4798      	blx	r3
 8011158:	4286      	cmp	r6, r0
 801115a:	d1b8      	bne.n	80110ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801115c:	f7f3 f806 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 8011160:	6803      	ldr	r3, [r0, #0]
 8011162:	4606      	mov	r6, r0
 8011164:	a807      	add	r0, sp, #28
 8011166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011168:	9305      	str	r3, [sp, #20]
 801116a:	f009 f8db 	bl	801a324 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801116e:	9b05      	ldr	r3, [sp, #20]
 8011170:	4601      	mov	r1, r0
 8011172:	4630      	mov	r0, r6
 8011174:	4798      	blx	r3
 8011176:	f080 0001 	eor.w	r0, r0, #1
 801117a:	b2c0      	uxtb	r0, r0
 801117c:	e7a8      	b.n	80110d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801117e:	bf00      	nop
 8011180:	24028e20 	.word	0x24028e20
 8011184:	24028e22 	.word	0x24028e22
 8011188:	24028e24 	.word	0x24028e24
 801118c:	24028e26 	.word	0x24028e26
 8011190:	24028e28 	.word	0x24028e28

08011194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8011194:	4b07      	ldr	r3, [pc, #28]	@ (80111b4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8011196:	b510      	push	{r4, lr}
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	4604      	mov	r4, r0
 801119c:	b13b      	cbz	r3, 80111ae <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801119e:	6803      	ldr	r3, [r0, #0]
 80111a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111a2:	4798      	blx	r3
 80111a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80111a6:	4283      	cmp	r3, r0
 80111a8:	d101      	bne.n	80111ae <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80111aa:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80111ac:	bd10      	pop	{r4, pc}
 80111ae:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80111b0:	e7fc      	b.n	80111ac <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80111b2:	bf00      	nop
 80111b4:	24028e2a 	.word	0x24028e2a

080111b8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80111b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111bc:	461d      	mov	r5, r3
 80111be:	b08a      	sub	sp, #40	@ 0x28
 80111c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111c4:	4690      	mov	r8, r2
 80111c6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 80111ca:	2400      	movs	r4, #0
 80111cc:	4607      	mov	r7, r0
 80111ce:	fb06 8505 	mla	r5, r6, r5, r8
 80111d2:	9404      	str	r4, [sp, #16]
 80111d4:	f88d 4020 	strb.w	r4, [sp, #32]
 80111d8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80111dc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80111e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80111e4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80111e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80111ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80111f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80111f4:	f7ff ffce 	bl	8011194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80111f8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011202:	a901      	add	r1, sp, #4
 8011204:	9505      	str	r5, [sp, #20]
 8011206:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801120a:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801120e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8011212:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8011216:	6803      	ldr	r3, [r0, #0]
 8011218:	685b      	ldr	r3, [r3, #4]
 801121a:	4798      	blx	r3
 801121c:	b00a      	add	sp, #40	@ 0x28
 801121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011222 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8011222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011226:	b08b      	sub	sp, #44	@ 0x2c
 8011228:	2400      	movs	r4, #0
 801122a:	4691      	mov	r9, r2
 801122c:	461d      	mov	r5, r3
 801122e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8011232:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011236:	4688      	mov	r8, r1
 8011238:	4607      	mov	r7, r0
 801123a:	9404      	str	r4, [sp, #16]
 801123c:	fb06 9505 	mla	r5, r6, r5, r9
 8011240:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011244:	f7ff ffa6 	bl	8011194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011248:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801124c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011256:	a901      	add	r1, sp, #4
 8011258:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801125c:	9505      	str	r5, [sp, #20]
 801125e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011262:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011266:	f8ad 601e 	strh.w	r6, [sp, #30]
 801126a:	f8cd 8010 	str.w	r8, [sp, #16]
 801126e:	f8ad 4020 	strh.w	r4, [sp, #32]
 8011272:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011276:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801127a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801127e:	6803      	ldr	r3, [r0, #0]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	4798      	blx	r3
 8011284:	b00b      	add	sp, #44	@ 0x2c
 8011286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801128c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801128c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011290:	b08a      	sub	sp, #40	@ 0x28
 8011292:	4698      	mov	r8, r3
 8011294:	2300      	movs	r3, #0
 8011296:	4606      	mov	r6, r0
 8011298:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801129c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80112a0:	2d0b      	cmp	r5, #11
 80112a2:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80112a6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80112aa:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80112ae:	9304      	str	r3, [sp, #16]
 80112b0:	d137      	bne.n	8011322 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80112b2:	2380      	movs	r3, #128	@ 0x80
 80112b4:	f88d 0020 	strb.w	r0, [sp, #32]
 80112b8:	4630      	mov	r0, r6
 80112ba:	9203      	str	r2, [sp, #12]
 80112bc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80112c0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80112c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80112c8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80112cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80112d0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80112d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80112d8:	f7ff ff5c 	bl	8011194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80112dc:	2c0b      	cmp	r4, #11
 80112de:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80112e2:	f8ad 701e 	strh.w	r7, [sp, #30]
 80112e6:	bf94      	ite	ls
 80112e8:	4b19      	ldrls	r3, [pc, #100]	@ (8011350 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80112ea:	2100      	movhi	r1, #0
 80112ec:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80112f0:	bf98      	it	ls
 80112f2:	5d19      	ldrbls	r1, [r3, r4]
 80112f4:	fb02 8307 	mla	r3, r2, r7, r8
 80112f8:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80112fc:	10c9      	asrs	r1, r1, #3
 80112fe:	fb01 0003 	mla	r0, r1, r3, r0
 8011302:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8011306:	a901      	add	r1, sp, #4
 8011308:	9005      	str	r0, [sp, #20]
 801130a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801130e:	2300      	movs	r3, #0
 8011310:	6870      	ldr	r0, [r6, #4]
 8011312:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011316:	6803      	ldr	r3, [r0, #0]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	4798      	blx	r3
 801131c:	b00a      	add	sp, #40	@ 0x28
 801131e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011322:	2d02      	cmp	r5, #2
 8011324:	d109      	bne.n	801133a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8011326:	28ff      	cmp	r0, #255	@ 0xff
 8011328:	d105      	bne.n	8011336 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801132a:	f1bc 0f00 	cmp.w	ip, #0
 801132e:	bf14      	ite	ne
 8011330:	2340      	movne	r3, #64	@ 0x40
 8011332:	2320      	moveq	r3, #32
 8011334:	e7be      	b.n	80112b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011336:	2340      	movs	r3, #64	@ 0x40
 8011338:	e7bc      	b.n	80112b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801133a:	28ff      	cmp	r0, #255	@ 0xff
 801133c:	d105      	bne.n	801134a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801133e:	f1bc 0f00 	cmp.w	ip, #0
 8011342:	bf14      	ite	ne
 8011344:	2304      	movne	r3, #4
 8011346:	2301      	moveq	r3, #1
 8011348:	e7b4      	b.n	80112b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801134a:	2304      	movs	r3, #4
 801134c:	e7b2      	b.n	80112b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801134e:	bf00      	nop
 8011350:	08029280 	.word	0x08029280

08011354 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8011354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011358:	b08b      	sub	sp, #44	@ 0x2c
 801135a:	461d      	mov	r5, r3
 801135c:	2400      	movs	r4, #0
 801135e:	4688      	mov	r8, r1
 8011360:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8011364:	4693      	mov	fp, r2
 8011366:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 801136a:	4607      	mov	r7, r0
 801136c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8011370:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8011374:	9404      	str	r4, [sp, #16]
 8011376:	bf14      	ite	ne
 8011378:	2308      	movne	r3, #8
 801137a:	2302      	moveq	r3, #2
 801137c:	fb05 b50a 	mla	r5, r5, sl, fp
 8011380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011384:	f7ff ff06 	bl	8011194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011388:	2e0b      	cmp	r6, #11
 801138a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801138e:	a901      	add	r1, sp, #4
 8011390:	bf98      	it	ls
 8011392:	4b13      	ldrls	r3, [pc, #76]	@ (80113e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8011394:	f8ad a01e 	strh.w	sl, [sp, #30]
 8011398:	bf98      	it	ls
 801139a:	5d9c      	ldrbls	r4, [r3, r6]
 801139c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80113a0:	10e4      	asrs	r4, r4, #3
 80113a2:	f8cd 8010 	str.w	r8, [sp, #16]
 80113a6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80113aa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80113ae:	fb04 0405 	mla	r4, r4, r5, r0
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80113b8:	2300      	movs	r3, #0
 80113ba:	9405      	str	r4, [sp, #20]
 80113bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80113c0:	f88d 9020 	strb.w	r9, [sp, #32]
 80113c4:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80113c8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80113cc:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 80113d0:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80113d4:	6803      	ldr	r3, [r0, #0]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	4798      	blx	r3
 80113da:	b00b      	add	sp, #44	@ 0x2c
 80113dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e0:	08029280 	.word	0x08029280

080113e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80113e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e8:	461e      	mov	r6, r3
 80113ea:	4b0a      	ldr	r3, [pc, #40]	@ (8011414 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80113ec:	460f      	mov	r7, r1
 80113ee:	4690      	mov	r8, r2
 80113f0:	881d      	ldrh	r5, [r3, #0]
 80113f2:	f7f2 febb 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 80113f6:	6803      	ldr	r3, [r0, #0]
 80113f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113fa:	4798      	blx	r3
 80113fc:	280b      	cmp	r0, #11
 80113fe:	bf96      	itet	ls
 8011400:	4b05      	ldrls	r3, [pc, #20]	@ (8011418 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8011402:	2400      	movhi	r4, #0
 8011404:	5c1c      	ldrbls	r4, [r3, r0]
 8011406:	fb08 7005 	mla	r0, r8, r5, r7
 801140a:	10e4      	asrs	r4, r4, #3
 801140c:	fb04 6000 	mla	r0, r4, r0, r6
 8011410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011414:	24028e26 	.word	0x24028e26
 8011418:	08029280 	.word	0x08029280

0801141c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801141e:	b08b      	sub	sp, #44	@ 0x2c
 8011420:	461f      	mov	r7, r3
 8011422:	4604      	mov	r4, r0
 8011424:	4616      	mov	r6, r2
 8011426:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801142a:	2500      	movs	r5, #0
 801142c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011430:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011434:	9504      	str	r5, [sp, #16]
 8011436:	f8ad 3018 	strh.w	r3, [sp, #24]
 801143a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801143e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011442:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011446:	f8ad 301c 	strh.w	r3, [sp, #28]
 801144a:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801144e:	f88d 3020 	strb.w	r3, [sp, #32]
 8011452:	f7ff fe9f 	bl	8011194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011456:	463a      	mov	r2, r7
 8011458:	4631      	mov	r1, r6
 801145a:	4603      	mov	r3, r0
 801145c:	4620      	mov	r0, r4
 801145e:	f7ff ffc1 	bl	80113e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011462:	4b0e      	ldr	r3, [pc, #56]	@ (801149c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8011464:	9005      	str	r0, [sp, #20]
 8011466:	881b      	ldrh	r3, [r3, #0]
 8011468:	f8ad 301e 	strh.w	r3, [sp, #30]
 801146c:	f7f2 fe7e 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 8011470:	6803      	ldr	r3, [r0, #0]
 8011472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011474:	4798      	blx	r3
 8011476:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011478:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 801147c:	a901      	add	r1, sp, #4
 801147e:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8011482:	9304      	str	r3, [sp, #16]
 8011484:	6860      	ldr	r0, [r4, #4]
 8011486:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801148a:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 801148e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8011492:	6803      	ldr	r3, [r0, #0]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	4798      	blx	r3
 8011498:	b00b      	add	sp, #44	@ 0x2c
 801149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801149c:	24028e26 	.word	0x24028e26

080114a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80114a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114a2:	b08d      	sub	sp, #52	@ 0x34
 80114a4:	2501      	movs	r5, #1
 80114a6:	4604      	mov	r4, r0
 80114a8:	466b      	mov	r3, sp
 80114aa:	9503      	str	r5, [sp, #12]
 80114ac:	e883 0006 	stmia.w	r3, {r1, r2}
 80114b0:	2300      	movs	r3, #0
 80114b2:	f8bd 6000 	ldrh.w	r6, [sp]
 80114b6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80114ba:	9306      	str	r3, [sp, #24]
 80114bc:	6803      	ldr	r3, [r0, #0]
 80114be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114c0:	4798      	blx	r3
 80114c2:	463a      	mov	r2, r7
 80114c4:	4631      	mov	r1, r6
 80114c6:	4603      	mov	r3, r0
 80114c8:	4620      	mov	r0, r4
 80114ca:	f7ff ff8b 	bl	80113e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80114ce:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80114d0:	9004      	str	r0, [sp, #16]
 80114d2:	9307      	str	r3, [sp, #28]
 80114d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80114d8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80114dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80114e0:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80114e4:	4b0e      	ldr	r3, [pc, #56]	@ (8011520 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80114e6:	881b      	ldrh	r3, [r3, #0]
 80114e8:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80114ec:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80114f0:	f7f2 fe3c 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 80114f4:	6803      	ldr	r3, [r0, #0]
 80114f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114f8:	4798      	blx	r3
 80114fa:	23ff      	movs	r3, #255	@ 0xff
 80114fc:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8011500:	a903      	add	r1, sp, #12
 8011502:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8011506:	6860      	ldr	r0, [r4, #4]
 8011508:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801150c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8011510:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8011514:	6803      	ldr	r3, [r0, #0]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	4798      	blx	r3
 801151a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 801151c:	b00d      	add	sp, #52	@ 0x34
 801151e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011520:	24028e26 	.word	0x24028e26

08011524 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8011524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011528:	b08c      	sub	sp, #48	@ 0x30
 801152a:	461e      	mov	r6, r3
 801152c:	2300      	movs	r3, #0
 801152e:	4604      	mov	r4, r0
 8011530:	466d      	mov	r5, sp
 8011532:	9306      	str	r3, [sp, #24]
 8011534:	6803      	ldr	r3, [r0, #0]
 8011536:	e885 0006 	stmia.w	r5, {r1, r2}
 801153a:	2501      	movs	r5, #1
 801153c:	f8bd 7000 	ldrh.w	r7, [sp]
 8011540:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8011544:	9503      	str	r5, [sp, #12]
 8011546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011548:	4798      	blx	r3
 801154a:	4642      	mov	r2, r8
 801154c:	4639      	mov	r1, r7
 801154e:	4603      	mov	r3, r0
 8011550:	4620      	mov	r0, r4
 8011552:	f7ff ff47 	bl	80113e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011556:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801155a:	9004      	str	r0, [sp, #16]
 801155c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011560:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011564:	9607      	str	r6, [sp, #28]
 8011566:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801156a:	4b10      	ldr	r3, [pc, #64]	@ (80115ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801156c:	881b      	ldrh	r3, [r3, #0]
 801156e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8011572:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011574:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8011578:	f7f2 fdf8 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 801157c:	6803      	ldr	r3, [r0, #0]
 801157e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011580:	4798      	blx	r3
 8011582:	23ff      	movs	r3, #255	@ 0xff
 8011584:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8011588:	a903      	add	r1, sp, #12
 801158a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801158e:	6860      	ldr	r0, [r4, #4]
 8011590:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011594:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8011598:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801159c:	6803      	ldr	r3, [r0, #0]
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	4798      	blx	r3
 80115a2:	4630      	mov	r0, r6
 80115a4:	b00c      	add	sp, #48	@ 0x30
 80115a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115aa:	bf00      	nop
 80115ac:	24028e26 	.word	0x24028e26

080115b0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80115b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115b2:	b085      	sub	sp, #20
 80115b4:	4605      	mov	r5, r0
 80115b6:	ac02      	add	r4, sp, #8
 80115b8:	e884 0006 	stmia.w	r4, {r1, r2}
 80115bc:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80115c0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80115c4:	f7ff fde6 	bl	8011194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80115c8:	4631      	mov	r1, r6
 80115ca:	4603      	mov	r3, r0
 80115cc:	463a      	mov	r2, r7
 80115ce:	4628      	mov	r0, r5
 80115d0:	f7ff ff08 	bl	80113e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80115d4:	4a05      	ldr	r2, [pc, #20]	@ (80115ec <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80115d6:	682b      	ldr	r3, [r5, #0]
 80115d8:	8812      	ldrh	r2, [r2, #0]
 80115da:	9200      	str	r2, [sp, #0]
 80115dc:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 80115de:	4603      	mov	r3, r0
 80115e0:	4628      	mov	r0, r5
 80115e2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80115e6:	47b0      	blx	r6
 80115e8:	b005      	add	sp, #20
 80115ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115ec:	24028e26 	.word	0x24028e26

080115f0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80115f0:	b570      	push	{r4, r5, r6, lr}
 80115f2:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 80115f6:	4604      	mov	r4, r0
 80115f8:	b19b      	cbz	r3, 8011622 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80115fa:	2002      	movs	r0, #2
 80115fc:	f7f0 fc8a 	bl	8001f14 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8011600:	2300      	movs	r3, #0
 8011602:	4620      	mov	r0, r4
 8011604:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8011608:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 801160c:	6823      	ldr	r3, [r4, #0]
 801160e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8011612:	f7ff fdbf 	bl	8011194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011616:	4601      	mov	r1, r0
 8011618:	4620      	mov	r0, r4
 801161a:	462b      	mov	r3, r5
 801161c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011620:	4718      	bx	r3
 8011622:	bd70      	pop	{r4, r5, r6, pc}

08011624 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8011624:	b570      	push	{r4, r5, r6, lr}
 8011626:	4605      	mov	r5, r0
 8011628:	460c      	mov	r4, r1
 801162a:	2003      	movs	r0, #3
 801162c:	b149      	cbz	r1, 8011642 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801162e:	f7f0 fc11 	bl	8001e54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011632:	6928      	ldr	r0, [r5, #16]
 8011634:	b168      	cbz	r0, 8011652 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011636:	6803      	ldr	r3, [r0, #0]
 8011638:	2101      	movs	r1, #1
 801163a:	695b      	ldr	r3, [r3, #20]
 801163c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011640:	4718      	bx	r3
 8011642:	f7f0 fc37 	bl	8001eb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011646:	6928      	ldr	r0, [r5, #16]
 8011648:	b118      	cbz	r0, 8011652 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801164a:	6803      	ldr	r3, [r0, #0]
 801164c:	4621      	mov	r1, r4
 801164e:	695b      	ldr	r3, [r3, #20]
 8011650:	e7f4      	b.n	801163c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8011652:	bd70      	pop	{r4, r5, r6, pc}

08011654 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8011654:	b538      	push	{r3, r4, r5, lr}
 8011656:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 801165a:	4604      	mov	r4, r0
 801165c:	460d      	mov	r5, r1
 801165e:	428b      	cmp	r3, r1
 8011660:	d006      	beq.n	8011670 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8011662:	6803      	ldr	r3, [r0, #0]
 8011664:	b929      	cbnz	r1, 8011672 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8011666:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801166a:	4798      	blx	r3
 801166c:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8011670:	bd38      	pop	{r3, r4, r5, pc}
 8011672:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8011676:	e7f8      	b.n	801166a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08011678 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8011678:	4b0d      	ldr	r3, [pc, #52]	@ (80116b0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801167a:	b510      	push	{r4, lr}
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	4604      	mov	r4, r0
 8011680:	b95b      	cbnz	r3, 801169a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011682:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8011686:	2b02      	cmp	r3, #2
 8011688:	d007      	beq.n	801169a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801168a:	6840      	ldr	r0, [r0, #4]
 801168c:	f000 f91a 	bl	80118c4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8011690:	b118      	cbz	r0, 801169a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011692:	6862      	ldr	r2, [r4, #4]
 8011694:	7a53      	ldrb	r3, [r2, #9]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d0fc      	beq.n	8011694 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801169a:	f7f1 fc45 	bl	8002f28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801169e:	4620      	mov	r0, r4
 80116a0:	2100      	movs	r1, #0
 80116a2:	f7ff ffd7 	bl	8011654 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80116a6:	4620      	mov	r0, r4
 80116a8:	f7ff fd74 	bl	8011194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80116ac:	bd10      	pop	{r4, pc}
 80116ae:	bf00      	nop
 80116b0:	24028e2a 	.word	0x24028e2a

080116b4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80116b4:	b570      	push	{r4, r5, r6, lr}
 80116b6:	4604      	mov	r4, r0
 80116b8:	6803      	ldr	r3, [r0, #0]
 80116ba:	b919      	cbnz	r1, 80116c4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80116bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116c2:	4718      	bx	r3
 80116c4:	2200      	movs	r2, #0
 80116c6:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 80116ca:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 80116ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116d0:	4798      	blx	r3
 80116d2:	6863      	ldr	r3, [r4, #4]
 80116d4:	2101      	movs	r1, #1
 80116d6:	4605      	mov	r5, r0
 80116d8:	4620      	mov	r0, r4
 80116da:	7299      	strb	r1, [r3, #10]
 80116dc:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 80116e0:	f7ff ffb8 	bl	8011654 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80116e4:	4628      	mov	r0, r5
 80116e6:	bd70      	pop	{r4, r5, r6, pc}

080116e8 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80116e8:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80116ec:	1a13      	subs	r3, r2, r0
 80116ee:	4258      	negs	r0, r3
 80116f0:	4158      	adcs	r0, r3
 80116f2:	4770      	bx	lr

080116f4 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80116f4:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80116f8:	1a9b      	subs	r3, r3, r2
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	bfdc      	itt	le
 80116fe:	6882      	ldrle	r2, [r0, #8]
 8011700:	189b      	addle	r3, r3, r2
 8011702:	2b01      	cmp	r3, #1
 8011704:	bfcc      	ite	gt
 8011706:	2000      	movgt	r0, #0
 8011708:	2001      	movle	r0, #1
 801170a:	4770      	bx	lr

0801170c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801170c:	6902      	ldr	r2, [r0, #16]
 801170e:	6843      	ldr	r3, [r0, #4]
 8011710:	2024      	movs	r0, #36	@ 0x24
 8011712:	fb00 3002 	mla	r0, r0, r2, r3
 8011716:	4770      	bx	lr

08011718 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8011718:	6803      	ldr	r3, [r0, #0]
 801171a:	691b      	ldr	r3, [r3, #16]
 801171c:	4718      	bx	r3

0801171e <_ZN8touchgfx13DMA_Interface7executeEv>:
 801171e:	2301      	movs	r3, #1
 8011720:	b570      	push	{r4, r5, r6, lr}
 8011722:	7203      	strb	r3, [r0, #8]
 8011724:	4604      	mov	r4, r0
 8011726:	6840      	ldr	r0, [r0, #4]
 8011728:	6803      	ldr	r3, [r0, #0]
 801172a:	699b      	ldr	r3, [r3, #24]
 801172c:	4798      	blx	r3
 801172e:	6803      	ldr	r3, [r0, #0]
 8011730:	4605      	mov	r5, r0
 8011732:	2b40      	cmp	r3, #64	@ 0x40
 8011734:	d00c      	beq.n	8011750 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011736:	d810      	bhi.n	801175a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8011738:	2b04      	cmp	r3, #4
 801173a:	d01d      	beq.n	8011778 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801173c:	d804      	bhi.n	8011748 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801173e:	2b01      	cmp	r3, #1
 8011740:	d006      	beq.n	8011750 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011742:	2b02      	cmp	r3, #2
 8011744:	d02c      	beq.n	80117a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8011746:	bd70      	pop	{r4, r5, r6, pc}
 8011748:	2b08      	cmp	r3, #8
 801174a:	d01d      	beq.n	8011788 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801174c:	2b20      	cmp	r3, #32
 801174e:	d1fa      	bne.n	8011746 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8011750:	6823      	ldr	r3, [r4, #0]
 8011752:	4620      	mov	r0, r4
 8011754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011756:	4798      	blx	r3
 8011758:	e013      	b.n	8011782 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801175a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801175e:	d0f7      	beq.n	8011750 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011760:	d804      	bhi.n	801176c <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8011762:	2b80      	cmp	r3, #128	@ 0x80
 8011764:	d0f4      	beq.n	8011750 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801176a:	e7f0      	b.n	801174e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801176c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011770:	d0ee      	beq.n	8011750 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011776:	e7e5      	b.n	8011744 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8011778:	6823      	ldr	r3, [r4, #0]
 801177a:	7f01      	ldrb	r1, [r0, #28]
 801177c:	4620      	mov	r0, r4
 801177e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011780:	4798      	blx	r3
 8011782:	6823      	ldr	r3, [r4, #0]
 8011784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011786:	e006      	b.n	8011796 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011788:	6823      	ldr	r3, [r4, #0]
 801178a:	7f01      	ldrb	r1, [r0, #28]
 801178c:	4620      	mov	r0, r4
 801178e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011790:	4798      	blx	r3
 8011792:	6823      	ldr	r3, [r4, #0]
 8011794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011796:	4629      	mov	r1, r5
 8011798:	4620      	mov	r0, r4
 801179a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801179e:	4718      	bx	r3
 80117a0:	6823      	ldr	r3, [r4, #0]
 80117a2:	4620      	mov	r0, r4
 80117a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117a6:	4798      	blx	r3
 80117a8:	e7f3      	b.n	8011792 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080117aa <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80117aa:	4770      	bx	lr

080117ac <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80117ac:	4770      	bx	lr

080117ae <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80117ae:	4770      	bx	lr

080117b0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80117b0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80117b4:	b510      	push	{r4, lr}
 80117b6:	1ad2      	subs	r2, r2, r3
 80117b8:	2a00      	cmp	r2, #0
 80117ba:	bfdc      	itt	le
 80117bc:	6884      	ldrle	r4, [r0, #8]
 80117be:	1912      	addle	r2, r2, r4
 80117c0:	2a01      	cmp	r2, #1
 80117c2:	dd16      	ble.n	80117f2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80117c4:	6842      	ldr	r2, [r0, #4]
 80117c6:	2424      	movs	r4, #36	@ 0x24
 80117c8:	fb04 2303 	mla	r3, r4, r3, r2
 80117cc:	f101 0220 	add.w	r2, r1, #32
 80117d0:	f851 4b04 	ldr.w	r4, [r1], #4
 80117d4:	4291      	cmp	r1, r2
 80117d6:	f843 4b04 	str.w	r4, [r3], #4
 80117da:	d1f9      	bne.n	80117d0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80117dc:	780a      	ldrb	r2, [r1, #0]
 80117de:	701a      	strb	r2, [r3, #0]
 80117e0:	68c3      	ldr	r3, [r0, #12]
 80117e2:	6882      	ldr	r2, [r0, #8]
 80117e4:	f3bf 8f5b 	dmb	ish
 80117e8:	3301      	adds	r3, #1
 80117ea:	429a      	cmp	r2, r3
 80117ec:	bfd8      	it	le
 80117ee:	1a9b      	suble	r3, r3, r2
 80117f0:	60c3      	str	r3, [r0, #12]
 80117f2:	bd10      	pop	{r4, pc}

080117f4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80117f4:	6903      	ldr	r3, [r0, #16]
 80117f6:	6882      	ldr	r2, [r0, #8]
 80117f8:	f3bf 8f5b 	dmb	ish
 80117fc:	3301      	adds	r3, #1
 80117fe:	429a      	cmp	r2, r3
 8011800:	bfd8      	it	le
 8011802:	1a9b      	suble	r3, r3, r2
 8011804:	6103      	str	r3, [r0, #16]
 8011806:	4770      	bx	lr

08011808 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011808:	b570      	push	{r4, r5, r6, lr}
 801180a:	4604      	mov	r4, r0
 801180c:	460e      	mov	r6, r1
 801180e:	6860      	ldr	r0, [r4, #4]
 8011810:	6803      	ldr	r3, [r0, #0]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	4798      	blx	r3
 8011816:	2800      	cmp	r0, #0
 8011818:	d1f9      	bne.n	801180e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801181a:	4d0d      	ldr	r5, [pc, #52]	@ (8011850 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801181c:	6828      	ldr	r0, [r5, #0]
 801181e:	6803      	ldr	r3, [r0, #0]
 8011820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011822:	4798      	blx	r3
 8011824:	f7f1 fb8e 	bl	8002f44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8011828:	6828      	ldr	r0, [r5, #0]
 801182a:	2101      	movs	r1, #1
 801182c:	f7ff ff12 	bl	8011654 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011830:	6860      	ldr	r0, [r4, #4]
 8011832:	4631      	mov	r1, r6
 8011834:	6803      	ldr	r3, [r0, #0]
 8011836:	689b      	ldr	r3, [r3, #8]
 8011838:	4798      	blx	r3
 801183a:	6823      	ldr	r3, [r4, #0]
 801183c:	4620      	mov	r0, r4
 801183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011840:	4798      	blx	r3
 8011842:	6828      	ldr	r0, [r5, #0]
 8011844:	6803      	ldr	r3, [r0, #0]
 8011846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801184a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801184c:	4718      	bx	r3
 801184e:	bf00      	nop
 8011850:	24028e2c 	.word	0x24028e2c

08011854 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011854:	b508      	push	{r3, lr}
 8011856:	f7f1 fb67 	bl	8002f28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801185a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801185e:	f7f1 bb6b 	b.w	8002f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011862 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011862:	b510      	push	{r4, lr}
 8011864:	4604      	mov	r4, r0
 8011866:	2114      	movs	r1, #20
 8011868:	f013 f9e1 	bl	8024c2e <_ZdlPvj>
 801186c:	4620      	mov	r0, r4
 801186e:	bd10      	pop	{r4, pc}

08011870 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8011870:	b570      	push	{r4, r5, r6, lr}
 8011872:	4604      	mov	r4, r0
 8011874:	6840      	ldr	r0, [r0, #4]
 8011876:	6803      	ldr	r3, [r0, #0]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	4798      	blx	r3
 801187c:	4605      	mov	r5, r0
 801187e:	b930      	cbnz	r0, 801188e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011880:	7a23      	ldrb	r3, [r4, #8]
 8011882:	b123      	cbz	r3, 801188e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011884:	6860      	ldr	r0, [r4, #4]
 8011886:	6803      	ldr	r3, [r0, #0]
 8011888:	695b      	ldr	r3, [r3, #20]
 801188a:	4798      	blx	r3
 801188c:	7225      	strb	r5, [r4, #8]
 801188e:	6860      	ldr	r0, [r4, #4]
 8011890:	6803      	ldr	r3, [r0, #0]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	4798      	blx	r3
 8011896:	b928      	cbnz	r0, 80118a4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8011898:	6823      	ldr	r3, [r4, #0]
 801189a:	4620      	mov	r0, r4
 801189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801189e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118a2:	4718      	bx	r3
 80118a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118a8:	f7f1 bb54 	b.w	8002f54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080118ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80118ac:	b510      	push	{r4, lr}
 80118ae:	6082      	str	r2, [r0, #8]
 80118b0:	2200      	movs	r2, #0
 80118b2:	4c03      	ldr	r4, [pc, #12]	@ (80118c0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80118b4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80118b8:	e9c0 4100 	strd	r4, r1, [r0]
 80118bc:	bd10      	pop	{r4, pc}
 80118be:	bf00      	nop
 80118c0:	08029294 	.word	0x08029294

080118c4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80118c4:	6840      	ldr	r0, [r0, #4]
 80118c6:	6803      	ldr	r3, [r0, #0]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	4718      	bx	r3

080118cc <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 80118cc:	2300      	movs	r3, #0
 80118ce:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80118d0:	8503      	strh	r3, [r0, #40]	@ 0x28
 80118d2:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80118d4:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80118d6:	6980      	ldr	r0, [r0, #24]
 80118d8:	b110      	cbz	r0, 80118e0 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 80118da:	6803      	ldr	r3, [r0, #0]
 80118dc:	691b      	ldr	r3, [r3, #16]
 80118de:	4718      	bx	r3
 80118e0:	4770      	bx	lr

080118e2 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 80118e2:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 80118e6:	4770      	bx	lr

080118e8 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 80118e8:	b538      	push	{r3, r4, r5, lr}
 80118ea:	0e0b      	lsrs	r3, r1, #24
 80118ec:	4604      	mov	r4, r0
 80118ee:	460d      	mov	r5, r1
 80118f0:	7783      	strb	r3, [r0, #30]
 80118f2:	6803      	ldr	r3, [r0, #0]
 80118f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118f6:	4798      	blx	r3
 80118f8:	6803      	ldr	r3, [r0, #0]
 80118fa:	4629      	mov	r1, r5
 80118fc:	689b      	ldr	r3, [r3, #8]
 80118fe:	4798      	blx	r3
 8011900:	6823      	ldr	r3, [r4, #0]
 8011902:	4620      	mov	r0, r4
 8011904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011906:	4798      	blx	r3
 8011908:	61a0      	str	r0, [r4, #24]
 801190a:	bd38      	pop	{r3, r4, r5, pc}

0801190c <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 801190c:	7741      	strb	r1, [r0, #29]
 801190e:	4770      	bx	lr

08011910 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8011910:	b530      	push	{r4, r5, lr}
 8011912:	460d      	mov	r5, r1
 8011914:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8011918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801191a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801191c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801191e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011920:	682b      	ldr	r3, [r5, #0]
 8011922:	6023      	str	r3, [r4, #0]
 8011924:	bd30      	pop	{r4, r5, pc}

08011926 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8011926:	b538      	push	{r3, r4, r5, lr}
 8011928:	4604      	mov	r4, r0
 801192a:	1d03      	adds	r3, r0, #4
 801192c:	6808      	ldr	r0, [r1, #0]
 801192e:	2500      	movs	r5, #0
 8011930:	6849      	ldr	r1, [r1, #4]
 8011932:	c303      	stmia	r3!, {r0, r1}
 8011934:	6813      	ldr	r3, [r2, #0]
 8011936:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801193a:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 801193e:	6853      	ldr	r3, [r2, #4]
 8011940:	61a5      	str	r5, [r4, #24]
 8011942:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8011946:	f006 fa47 	bl	8017dd8 <_ZN8touchgfx9Matrix3x35resetEv>
 801194a:	23ff      	movs	r3, #255	@ 0xff
 801194c:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8011950:	7763      	strb	r3, [r4, #29]
 8011952:	77a3      	strb	r3, [r4, #30]
 8011954:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8011958:	6323      	str	r3, [r4, #48]	@ 0x30
 801195a:	2301      	movs	r3, #1
 801195c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8011960:	bd38      	pop	{r3, r4, r5, pc}
	...

08011964 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8011964:	ee70 7a41 	vsub.f32	s15, s0, s2
 8011968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801196c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011970:	4605      	mov	r5, r0
 8011972:	ed2d 8b0a 	vpush	{d8-d12}
 8011976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801197a:	b086      	sub	sp, #24
 801197c:	eeb0 ba40 	vmov.f32	s22, s0
 8011980:	6802      	ldr	r2, [r0, #0]
 8011982:	eef0 ba60 	vmov.f32	s23, s1
 8011986:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 801198a:	eef0 aa41 	vmov.f32	s21, s2
 801198e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8011990:	eeb0 aa61 	vmov.f32	s20, s3
 8011994:	eeb0 ca42 	vmov.f32	s24, s4
 8011998:	eef0 ca62 	vmov.f32	s25, s5
 801199c:	d112      	bne.n	80119c4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 801199e:	ee70 7ae1 	vsub.f32	s15, s1, s3
 80119a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80119a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119aa:	d10b      	bne.n	80119c4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80119ac:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80119b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80119b2:	3901      	subs	r1, #1
 80119b4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80119b8:	b006      	add	sp, #24
 80119ba:	ecbd 8b0a 	vpop	{d8-d12}
 80119be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119c2:	4710      	bx	r2
 80119c4:	23ff      	movs	r3, #255	@ 0xff
 80119c6:	4628      	mov	r0, r5
 80119c8:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 80119cc:	77ab      	strb	r3, [r5, #30]
 80119ce:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80119d0:	4798      	blx	r3
 80119d2:	eeb0 0a4b 	vmov.f32	s0, s22
 80119d6:	eef0 0a6b 	vmov.f32	s1, s23
 80119da:	4604      	mov	r4, r0
 80119dc:	4640      	mov	r0, r8
 80119de:	f006 faaa 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80119e2:	eef0 8a40 	vmov.f32	s17, s0
 80119e6:	ed8d 0a00 	vstr	s0, [sp]
 80119ea:	eeb0 0a6a 	vmov.f32	s0, s21
 80119ee:	eef0 9a60 	vmov.f32	s19, s1
 80119f2:	edcd 0a01 	vstr	s1, [sp, #4]
 80119f6:	4640      	mov	r0, r8
 80119f8:	eef0 0a4a 	vmov.f32	s1, s20
 80119fc:	f006 fa9b 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011a00:	eef4 8a40 	vcmp.f32	s17, s0
 8011a04:	eeb0 8a40 	vmov.f32	s16, s0
 8011a08:	ed8d 0a02 	vstr	s0, [sp, #8]
 8011a0c:	eeb0 9a60 	vmov.f32	s18, s1
 8011a10:	edcd 0a03 	vstr	s1, [sp, #12]
 8011a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a18:	eef4 9a60 	vcmp.f32	s19, s1
 8011a1c:	bf0c      	ite	eq
 8011a1e:	2301      	moveq	r3, #1
 8011a20:	2300      	movne	r3, #0
 8011a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a26:	eef4 8a40 	vcmp.f32	s17, s0
 8011a2a:	7463      	strb	r3, [r4, #17]
 8011a2c:	bf0c      	ite	eq
 8011a2e:	2301      	moveq	r3, #1
 8011a30:	2300      	movne	r3, #0
 8011a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a36:	74a3      	strb	r3, [r4, #18]
 8011a38:	d024      	beq.n	8011a84 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011a3a:	eef4 9a60 	vcmp.f32	s19, s1
 8011a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a42:	d01f      	beq.n	8011a84 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011a44:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8011a48:	4640      	mov	r0, r8
 8011a4a:	ee7a aacb 	vsub.f32	s21, s21, s22
 8011a4e:	eeb0 0a4b 	vmov.f32	s0, s22
 8011a52:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8011a56:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8011a5a:	eef0 0a6b 	vmov.f32	s1, s23
 8011a5e:	eea7 0acc 	vfms.f32	s0, s15, s24
 8011a62:	eeec 0a87 	vfma.f32	s1, s25, s14
 8011a66:	f006 fa66 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011a6a:	ed8d 0a04 	vstr	s0, [sp, #16]
 8011a6e:	ee30 0a68 	vsub.f32	s0, s0, s17
 8011a72:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011a76:	edcd 0a05 	vstr	s1, [sp, #20]
 8011a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a7e:	d121      	bne.n	8011ac4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 8011a80:	2301      	movs	r3, #1
 8011a82:	74a3      	strb	r3, [r4, #18]
 8011a84:	7c63      	ldrb	r3, [r4, #17]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d051      	beq.n	8011b2e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 8011a8a:	ee39 7a69 	vsub.f32	s14, s18, s19
 8011a8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011b84 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8011a92:	eef4 9ac9 	vcmpe.f32	s19, s18
 8011a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9e:	edc4 7a08 	vstr	s15, [r4, #32]
 8011aa2:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8011aa6:	ee17 3a90 	vmov	r3, s15
 8011aaa:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8011aae:	b21a      	sxth	r2, r3
 8011ab0:	ee17 3a90 	vmov	r3, s15
 8011ab4:	bf48      	it	mi
 8011ab6:	8122      	strhmi	r2, [r4, #8]
 8011ab8:	b21b      	sxth	r3, r3
 8011aba:	bf56      	itet	pl
 8011abc:	80e2      	strhpl	r2, [r4, #6]
 8011abe:	80e3      	strhmi	r3, [r4, #6]
 8011ac0:	8123      	strhpl	r3, [r4, #8]
 8011ac2:	e02c      	b.n	8011b1e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011ac4:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8011ac8:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8011acc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ad0:	edc4 7a05 	vstr	s15, [r4, #20]
 8011ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad8:	d102      	bne.n	8011ae0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8011ada:	2301      	movs	r3, #1
 8011adc:	7463      	strb	r3, [r4, #17]
 8011ade:	e7d1      	b.n	8011a84 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011ae0:	eeb0 7a69 	vmov.f32	s14, s19
 8011ae4:	ee39 9a69 	vsub.f32	s18, s18, s19
 8011ae8:	ee38 8a68 	vsub.f32	s16, s16, s17
 8011aec:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8011af0:	ed84 7a06 	vstr	s14, [r4, #24]
 8011af4:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8011af8:	ee38 8a47 	vsub.f32	s16, s16, s14
 8011afc:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8011b88 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8011b00:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8011b04:	ed84 8a07 	vstr	s16, [r4, #28]
 8011b08:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b10:	edc4 7a08 	vstr	s15, [r4, #32]
 8011b14:	d503      	bpl.n	8011b1e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011b16:	eeb1 8a48 	vneg.f32	s16, s16
 8011b1a:	ed84 8a07 	vstr	s16, [r4, #28]
 8011b1e:	60e7      	str	r7, [r4, #12]
 8011b20:	7426      	strb	r6, [r4, #16]
 8011b22:	61ac      	str	r4, [r5, #24]
 8011b24:	b006      	add	sp, #24
 8011b26:	ecbd 8b0a 	vpop	{d8-d12}
 8011b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b2e:	7ca3      	ldrb	r3, [r4, #18]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d0f4      	beq.n	8011b1e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011b34:	ee38 7a68 	vsub.f32	s14, s16, s17
 8011b38:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8011b84 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8011b3c:	eef4 8ac8 	vcmpe.f32	s17, s16
 8011b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b48:	edc4 7a08 	vstr	s15, [r4, #32]
 8011b4c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011b50:	ee17 3a90 	vmov	r3, s15
 8011b54:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8011b58:	b21a      	sxth	r2, r3
 8011b5a:	ee17 3a90 	vmov	r3, s15
 8011b5e:	bf48      	it	mi
 8011b60:	8122      	strhmi	r2, [r4, #8]
 8011b62:	b21b      	sxth	r3, r3
 8011b64:	bf56      	itet	pl
 8011b66:	80e2      	strhpl	r2, [r4, #6]
 8011b68:	80e3      	strhmi	r3, [r4, #6]
 8011b6a:	8123      	strhpl	r3, [r4, #8]
 8011b6c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011b70:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8011b74:	1a9b      	subs	r3, r3, r2
 8011b76:	ee07 3a90 	vmov	s15, r3
 8011b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b7e:	edc4 7a07 	vstr	s15, [r4, #28]
 8011b82:	e7cc      	b.n	8011b1e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011b84:	447ffffe 	.word	0x447ffffe
 8011b88:	44800000 	.word	0x44800000

08011b8c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8011b8c:	b510      	push	{r4, lr}
 8011b8e:	ed2d 8b02 	vpush	{d8}
 8011b92:	eef0 8a62 	vmov.f32	s17, s5
 8011b96:	2100      	movs	r1, #0
 8011b98:	4604      	mov	r4, r0
 8011b9a:	eeb0 8a42 	vmov.f32	s16, s4
 8011b9e:	f012 fdd7 	bl	8024750 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8011ba2:	eef0 7a68 	vmov.f32	s15, s17
 8011ba6:	6823      	ldr	r3, [r4, #0]
 8011ba8:	4620      	mov	r0, r4
 8011baa:	689b      	ldr	r3, [r3, #8]
 8011bac:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011bb0:	ee17 2a90 	vmov	r2, s15
 8011bb4:	eef0 7a48 	vmov.f32	s15, s16
 8011bb8:	ecbd 8b02 	vpop	{d8}
 8011bbc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bc4:	ee17 1a90 	vmov	r1, s15
 8011bc8:	4718      	bx	r3

08011bca <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8011bca:	b510      	push	{r4, lr}
 8011bcc:	ed2d 8b02 	vpush	{d8}
 8011bd0:	eef0 8a63 	vmov.f32	s17, s7
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	4604      	mov	r4, r0
 8011bd8:	eeb0 8a43 	vmov.f32	s16, s6
 8011bdc:	f012 fe7a 	bl	80248d4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8011be0:	eef0 7a68 	vmov.f32	s15, s17
 8011be4:	6823      	ldr	r3, [r4, #0]
 8011be6:	4620      	mov	r0, r4
 8011be8:	689b      	ldr	r3, [r3, #8]
 8011bea:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011bee:	ee17 2a90 	vmov	r2, s15
 8011bf2:	eef0 7a48 	vmov.f32	s15, s16
 8011bf6:	ecbd 8b02 	vpop	{d8}
 8011bfa:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c02:	ee17 1a90 	vmov	r1, s15
 8011c06:	4718      	bx	r3

08011c08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8011c08:	b513      	push	{r0, r1, r4, lr}
 8011c0a:	4604      	mov	r4, r0
 8011c0c:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8011c0e:	f006 f992 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011c12:	eef0 7a60 	vmov.f32	s15, s1
 8011c16:	4620      	mov	r0, r4
 8011c18:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011c1c:	ee17 2a90 	vmov	r2, s15
 8011c20:	eef0 7a40 	vmov.f32	s15, s0
 8011c24:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011c28:	ee17 1a90 	vmov	r1, s15
 8011c2c:	b002      	add	sp, #8
 8011c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c32:	f012 bce7 	b.w	8024604 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8011c36:	b513      	push	{r0, r1, r4, lr}
 8011c38:	4604      	mov	r4, r0
 8011c3a:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8011c3c:	f006 f97b 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011c40:	eef0 7a60 	vmov.f32	s15, s1
 8011c44:	4620      	mov	r0, r4
 8011c46:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011c4a:	ee17 2a90 	vmov	r2, s15
 8011c4e:	eef0 7a40 	vmov.f32	s15, s0
 8011c52:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011c56:	ee17 1a90 	vmov	r1, s15
 8011c5a:	b002      	add	sp, #8
 8011c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c60:	f012 bd1d 	b.w	802469e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08011c64 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8011c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c66:	2400      	movs	r4, #0
 8011c68:	9f07      	ldr	r7, [sp, #28]
 8011c6a:	f04f 0e01 	mov.w	lr, #1
 8011c6e:	4626      	mov	r6, r4
 8011c70:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8011c74:	4463      	add	r3, ip
 8011c76:	4563      	cmp	r3, ip
 8011c78:	d02d      	beq.n	8011cd6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8011c7a:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8011c7e:	2d06      	cmp	r5, #6
 8011c80:	d8f9      	bhi.n	8011c76 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011c82:	fa0e f505 	lsl.w	r5, lr, r5
 8011c86:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8011c8a:	d10d      	bne.n	8011ca8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8011c8c:	f015 0f10 	tst.w	r5, #16
 8011c90:	d117      	bne.n	8011cc2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8011c92:	072d      	lsls	r5, r5, #28
 8011c94:	d5ef      	bpl.n	8011c76 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011c96:	3801      	subs	r0, #1
 8011c98:	b91e      	cbnz	r6, 8011ca2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8011c9a:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8011c9e:	682d      	ldr	r5, [r5, #0]
 8011ca0:	600d      	str	r5, [r1, #0]
 8011ca2:	b96c      	cbnz	r4, 8011cc0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011ca4:	2601      	movs	r6, #1
 8011ca6:	e7e6      	b.n	8011c76 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011ca8:	b926      	cbnz	r6, 8011cb4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8011caa:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8011cae:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8011cb2:	600b      	str	r3, [r1, #0]
 8011cb4:	b924      	cbnz	r4, 8011cc0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011cb6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8011cba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011cbe:	6013      	str	r3, [r2, #0]
 8011cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cc2:	3801      	subs	r0, #1
 8011cc4:	b91c      	cbnz	r4, 8011cce <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8011cc6:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8011cca:	6824      	ldr	r4, [r4, #0]
 8011ccc:	6014      	str	r4, [r2, #0]
 8011cce:	2e00      	cmp	r6, #0
 8011cd0:	d1f6      	bne.n	8011cc0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011cd2:	2401      	movs	r4, #1
 8011cd4:	e7cf      	b.n	8011c76 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011cd6:	b90e      	cbnz	r6, 8011cdc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8011cd8:	2300      	movs	r3, #0
 8011cda:	600b      	str	r3, [r1, #0]
 8011cdc:	2c00      	cmp	r4, #0
 8011cde:	d1ef      	bne.n	8011cc0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	e7ec      	b.n	8011cbe <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08011ce4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8011ce4:	b538      	push	{r3, r4, r5, lr}
 8011ce6:	ed2d 8b0a 	vpush	{d8-d12}
 8011cea:	eef0 ba40 	vmov.f32	s23, s0
 8011cee:	4604      	mov	r4, r0
 8011cf0:	eeb0 ca60 	vmov.f32	s24, s1
 8011cf4:	460d      	mov	r5, r1
 8011cf6:	eef0 aa41 	vmov.f32	s21, s2
 8011cfa:	eeb0 ba61 	vmov.f32	s22, s3
 8011cfe:	eeb0 9a42 	vmov.f32	s18, s4
 8011d02:	eef0 9a62 	vmov.f32	s19, s5
 8011d06:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8011d0a:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8011d0e:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8011d12:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8011d16:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8011d1a:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8011d1e:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8011d22:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011d26:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8011d2a:	f012 ffab 	bl	8024c84 <sqrtf>
 8011d2e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d36:	d12e      	bne.n	8011d96 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8011d38:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8011d3c:	ee39 7acb 	vsub.f32	s14, s19, s22
 8011d40:	eeb0 8a6a 	vmov.f32	s16, s21
 8011d44:	eef0 8a4b 	vmov.f32	s17, s22
 8011d48:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8011d4c:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8011d50:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8011d54:	eee7 8aca 	vfms.f32	s17, s15, s20
 8011d58:	2d02      	cmp	r5, #2
 8011d5a:	dc2f      	bgt.n	8011dbc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8011d5c:	3501      	adds	r5, #1
 8011d5e:	eef0 1a4b 	vmov.f32	s3, s22
 8011d62:	eeb0 1a6a 	vmov.f32	s2, s21
 8011d66:	4620      	mov	r0, r4
 8011d68:	4629      	mov	r1, r5
 8011d6a:	eef0 2a68 	vmov.f32	s5, s17
 8011d6e:	eeb0 2a48 	vmov.f32	s4, s16
 8011d72:	eef0 0a4c 	vmov.f32	s1, s24
 8011d76:	eeb0 0a6b 	vmov.f32	s0, s23
 8011d7a:	f7ff ffb3 	bl	8011ce4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8011d7e:	eef0 0a68 	vmov.f32	s1, s17
 8011d82:	eeb0 0a48 	vmov.f32	s0, s16
 8011d86:	4620      	mov	r0, r4
 8011d88:	f7ff ff55 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011d8c:	eeb0 ba68 	vmov.f32	s22, s17
 8011d90:	eef0 aa48 	vmov.f32	s21, s16
 8011d94:	e7b9      	b.n	8011d0a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8011d96:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8011d9a:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8011d9e:	ee78 8acc 	vsub.f32	s17, s17, s24
 8011da2:	ee28 7a27 	vmul.f32	s14, s16, s15
 8011da6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8011daa:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8011dae:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8011db2:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8011db6:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8011dba:	e7cd      	b.n	8011d58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8011dbc:	eef0 0a68 	vmov.f32	s1, s17
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	eeb0 0a48 	vmov.f32	s0, s16
 8011dc6:	f7ff ff36 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011dca:	ecbd 8b0a 	vpop	{d8-d12}
 8011dce:	bd38      	pop	{r3, r4, r5, pc}

08011dd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8011dd0:	b510      	push	{r4, lr}
 8011dd2:	ed2d 8b0a 	vpush	{d8-d12}
 8011dd6:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8011dda:	4604      	mov	r4, r0
 8011ddc:	eeb0 ca40 	vmov.f32	s24, s0
 8011de0:	2b02      	cmp	r3, #2
 8011de2:	eeb0 9a60 	vmov.f32	s18, s1
 8011de6:	eef0 9a41 	vmov.f32	s19, s2
 8011dea:	eef0 8a61 	vmov.f32	s17, s3
 8011dee:	eeb0 ba42 	vmov.f32	s22, s4
 8011df2:	eef0 ba62 	vmov.f32	s23, s5
 8011df6:	eeb0 aa43 	vmov.f32	s20, s6
 8011dfa:	eef0 aa63 	vmov.f32	s21, s7
 8011dfe:	eeb0 8a44 	vmov.f32	s16, s8
 8011e02:	eef0 ca64 	vmov.f32	s25, s9
 8011e06:	d12c      	bne.n	8011e62 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8011e08:	eef0 0a62 	vmov.f32	s1, s5
 8011e0c:	eeb0 0a42 	vmov.f32	s0, s4
 8011e10:	f7ff ff11 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011e14:	ee79 9acb 	vsub.f32	s19, s19, s22
 8011e18:	ee7a caec 	vsub.f32	s25, s21, s25
 8011e1c:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8011e20:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8011e24:	ee69 9aac 	vmul.f32	s19, s19, s25
 8011e28:	ee28 8a88 	vmul.f32	s16, s17, s16
 8011e2c:	eef4 9ac8 	vcmpe.f32	s19, s16
 8011e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e34:	db0f      	blt.n	8011e56 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8011e36:	2101      	movs	r1, #1
 8011e38:	eef0 2a6a 	vmov.f32	s5, s21
 8011e3c:	eeb0 2a4a 	vmov.f32	s4, s20
 8011e40:	4620      	mov	r0, r4
 8011e42:	eef0 1a6b 	vmov.f32	s3, s23
 8011e46:	eeb0 1a4b 	vmov.f32	s2, s22
 8011e4a:	eef0 0a49 	vmov.f32	s1, s18
 8011e4e:	eeb0 0a4c 	vmov.f32	s0, s24
 8011e52:	f7ff ff47 	bl	8011ce4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8011e56:	eef0 0a6a 	vmov.f32	s1, s21
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	eeb0 0a4a 	vmov.f32	s0, s20
 8011e60:	e035      	b.n	8011ece <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8011e62:	2b01      	cmp	r3, #1
 8011e64:	d138      	bne.n	8011ed8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8011e66:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8011e6a:	ee33 6a48 	vsub.f32	s12, s6, s16
 8011e6e:	ee71 7a42 	vsub.f32	s15, s2, s4
 8011e72:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8011e76:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8011e7a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011e7e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e86:	d027      	beq.n	8011ed8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8011e88:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8011e8c:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8011e90:	eea4 8a83 	vfma.f32	s16, s9, s6
 8011e94:	eee1 8a22 	vfma.f32	s17, s2, s5
 8011e98:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8011e9c:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8011ea0:	eee6 7a28 	vfma.f32	s15, s12, s17
 8011ea4:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8011ea8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8011eac:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8011eb0:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8011eb4:	ee3c ca40 	vsub.f32	s24, s24, s0
 8011eb8:	ee39 9a60 	vsub.f32	s18, s18, s1
 8011ebc:	ee29 9a09 	vmul.f32	s18, s18, s18
 8011ec0:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8011ec4:	eef4 7ac9 	vcmpe.f32	s15, s18
 8011ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ecc:	db04      	blt.n	8011ed8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8011ece:	f7ff feb2 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011ed2:	ecbd 8b0a 	vpop	{d8-d12}
 8011ed6:	bd10      	pop	{r4, pc}
 8011ed8:	eef0 0a6b 	vmov.f32	s1, s23
 8011edc:	4620      	mov	r0, r4
 8011ede:	eeb0 0a4b 	vmov.f32	s0, s22
 8011ee2:	f7ff fea8 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011ee6:	e7b6      	b.n	8011e56 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08011ee8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8011ee8:	b510      	push	{r4, lr}
 8011eea:	ed2d 8b0c 	vpush	{d8-d13}
 8011eee:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	eeb0 9a40 	vmov.f32	s18, s0
 8011ef8:	eef0 9a60 	vmov.f32	s19, s1
 8011efc:	eef0 aa41 	vmov.f32	s21, s2
 8011f00:	eeb0 ba61 	vmov.f32	s22, s3
 8011f04:	b933      	cbnz	r3, 8011f14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8011f06:	f7ff fe96 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f0a:	eef0 0a4b 	vmov.f32	s1, s22
 8011f0e:	eeb0 0a6a 	vmov.f32	s0, s21
 8011f12:	e015      	b.n	8011f40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8011f14:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011f18:	2b02      	cmp	r3, #2
 8011f1a:	ee71 8a40 	vsub.f32	s17, s2, s0
 8011f1e:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8011f22:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011f26:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011f2a:	d10f      	bne.n	8011f4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8011f2c:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8011f30:	ee30 0a08 	vadd.f32	s0, s0, s16
 8011f34:	f7ff fe7f 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f38:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8011f3c:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8011f40:	4620      	mov	r0, r4
 8011f42:	f7ff fe78 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f46:	ecbd 8b0c 	vpop	{d8-d13}
 8011f4a:	bd10      	pop	{r4, pc}
 8011f4c:	f7ff fe73 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f50:	eef0 0a69 	vmov.f32	s1, s19
 8011f54:	eeb0 0a49 	vmov.f32	s0, s18
 8011f58:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8012088 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8011f5c:	eeb1 aa68 	vneg.f32	s20, s17
 8011f60:	eddf ba4a 	vldr	s23, [pc, #296]	@ 801208c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8011f64:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011f68:	4620      	mov	r0, r4
 8011f6a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011f6e:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8012090 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8011f72:	eddf ca48 	vldr	s25, [pc, #288]	@ 8012094 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8011f76:	ed9f da48 	vldr	s26, [pc, #288]	@ 8012098 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8011f7a:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8011f7e:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8011f82:	f7ff fe58 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f86:	eef0 0a69 	vmov.f32	s1, s19
 8011f8a:	eeb0 0a49 	vmov.f32	s0, s18
 8011f8e:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801209c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8011f92:	4620      	mov	r0, r4
 8011f94:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011f98:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011f9c:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8011fa0:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8011fa4:	f7ff fe47 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011fa8:	eef0 0a69 	vmov.f32	s1, s19
 8011fac:	eeb0 0a49 	vmov.f32	s0, s18
 8011fb0:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80120a0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011fba:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011fbe:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8011fc2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8011fc6:	f7ff fe36 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011fca:	eef0 0a69 	vmov.f32	s1, s19
 8011fce:	eeb0 0a49 	vmov.f32	s0, s18
 8011fd2:	eddf 7a34 	vldr	s15, [pc, #208]	@ 80120a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011fdc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011fe0:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8011fe4:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8011fe8:	f7ff fe25 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011fec:	ee79 0a88 	vadd.f32	s1, s19, s16
 8011ff0:	ee39 0a28 	vadd.f32	s0, s18, s17
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8011ffa:	ee30 0a08 	vadd.f32	s0, s0, s16
 8011ffe:	f7ff fe1a 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012002:	eef0 0a69 	vmov.f32	s1, s19
 8012006:	eeb0 0a49 	vmov.f32	s0, s18
 801200a:	eddf 7a27 	vldr	s15, [pc, #156]	@ 80120a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 801200e:	4620      	mov	r0, r4
 8012010:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012014:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012018:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801201c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8012020:	f7ff fe09 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012024:	eef0 0a69 	vmov.f32	s1, s19
 8012028:	eeb0 0a49 	vmov.f32	s0, s18
 801202c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80120ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8012030:	4620      	mov	r0, r4
 8012032:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012036:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801203a:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801203e:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8012042:	f7ff fdf8 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012046:	eef0 0a69 	vmov.f32	s1, s19
 801204a:	eeb0 0a49 	vmov.f32	s0, s18
 801204e:	eddf 7a18 	vldr	s15, [pc, #96]	@ 80120b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8012052:	4620      	mov	r0, r4
 8012054:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012058:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801205c:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8012060:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8012064:	f7ff fde7 	bl	8011c36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012068:	eef0 0a69 	vmov.f32	s1, s19
 801206c:	eeb0 0a49 	vmov.f32	s0, s18
 8012070:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80120b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8012074:	4620      	mov	r0, r4
 8012076:	eee8 0a27 	vfma.f32	s1, s16, s15
 801207a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801207e:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8012082:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8012086:	e73e      	b.n	8011f06 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8012088:	3d23d70a 	.word	0x3d23d70a
 801208c:	3e8f5c29 	.word	0x3e8f5c29
 8012090:	3f19999a 	.word	0x3f19999a
 8012094:	3f4ccccd 	.word	0x3f4ccccd
 8012098:	3f75c28f 	.word	0x3f75c28f
 801209c:	3e4ccccd 	.word	0x3e4ccccd
 80120a0:	3ecccccd 	.word	0x3ecccccd
 80120a4:	3f3851ec 	.word	0x3f3851ec
 80120a8:	3fa3d70a 	.word	0x3fa3d70a
 80120ac:	3fcccccd 	.word	0x3fcccccd
 80120b0:	3fe66666 	.word	0x3fe66666
 80120b4:	3ffae148 	.word	0x3ffae148

080120b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 80120b8:	b570      	push	{r4, r5, r6, lr}
 80120ba:	ed2d 8b06 	vpush	{d8-d10}
 80120be:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 80120c2:	eef0 aa40 	vmov.f32	s21, s0
 80120c6:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 80120ca:	4604      	mov	r4, r0
 80120cc:	ee30 8ac8 	vsub.f32	s16, s1, s16
 80120d0:	ee30 9a49 	vsub.f32	s18, s0, s18
 80120d4:	eeb0 aa60 	vmov.f32	s20, s1
 80120d8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80120dc:	eea9 0a09 	vfma.f32	s0, s18, s18
 80120e0:	f012 fdd0 	bl	8024c84 <sqrtf>
 80120e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80120e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ec:	dd36      	ble.n	801215c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 80120ee:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80120f2:	2600      	movs	r6, #0
 80120f4:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 80120f8:	eec0 6a27 	vdiv.f32	s13, s0, s15
 80120fc:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8012100:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8012104:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8012108:	eec8 8a26 	vdiv.f32	s17, s16, s13
 801210c:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8012110:	ee70 9a28 	vadd.f32	s19, s0, s17
 8012114:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8012118:	ee30 9ac8 	vsub.f32	s18, s1, s16
 801211c:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8012120:	b1fd      	cbz	r5, 8012162 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8012122:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8012126:	eef0 0a49 	vmov.f32	s1, s18
 801212a:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 801212e:	eeb0 0a69 	vmov.f32	s0, s19
 8012132:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8012136:	4620      	mov	r0, r4
 8012138:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 801213c:	f7ff fd64 	bl	8011c08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8012140:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8012144:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8012148:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 801214c:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8012150:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8012154:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8012158:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 801215c:	ecbd 8b06 	vpop	{d8-d10}
 8012160:	bd70      	pop	{r4, r5, r6, pc}
 8012162:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8012166:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 801216a:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 801216e:	b16b      	cbz	r3, 801218c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8012170:	eef0 1a49 	vmov.f32	s3, s18
 8012174:	4620      	mov	r0, r4
 8012176:	eeb0 1a69 	vmov.f32	s2, s19
 801217a:	eef0 0a62 	vmov.f32	s1, s5
 801217e:	eeb0 0a42 	vmov.f32	s0, s4
 8012182:	f7ff feb1 	bl	8011ee8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8012186:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 801218a:	e7db      	b.n	8012144 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 801218c:	eef0 4a48 	vmov.f32	s9, s16
 8012190:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8012194:	eeb0 4a68 	vmov.f32	s8, s17
 8012198:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 801219c:	eef0 3a49 	vmov.f32	s7, s18
 80121a0:	4620      	mov	r0, r4
 80121a2:	eeb0 3a69 	vmov.f32	s6, s19
 80121a6:	f7ff fe13 	bl	8011dd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80121aa:	e7cb      	b.n	8012144 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

080121ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 80121ac:	ee07 2a90 	vmov	s15, r2
 80121b0:	ee07 1a10 	vmov	s14, r1
 80121b4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80121b8:	eddf 7a04 	vldr	s15, [pc, #16]	@ 80121cc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 80121bc:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80121c0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80121c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80121c8:	f7ff bf76 	b.w	80120b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80121cc:	3d000000 	.word	0x3d000000

080121d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 80121d0:	b538      	push	{r3, r4, r5, lr}
 80121d2:	ed2d 8b02 	vpush	{d8}
 80121d6:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 80121da:	4604      	mov	r4, r0
 80121dc:	b31d      	cbz	r5, 8012226 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 80121de:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 80121e2:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 80121e6:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 80121ea:	ee78 8a67 	vsub.f32	s17, s16, s15
 80121ee:	ee38 8a27 	vadd.f32	s16, s16, s15
 80121f2:	eef0 0a68 	vmov.f32	s1, s17
 80121f6:	f7ff fd07 	bl	8011c08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80121fa:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 80121fe:	eef0 1a48 	vmov.f32	s3, s16
 8012202:	4620      	mov	r0, r4
 8012204:	eeb0 0a41 	vmov.f32	s0, s2
 8012208:	eef0 0a68 	vmov.f32	s1, s17
 801220c:	f7ff fe6c 	bl	8011ee8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8012210:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8012214:	eef0 1a68 	vmov.f32	s3, s17
 8012218:	4620      	mov	r0, r4
 801221a:	eef0 0a48 	vmov.f32	s1, s16
 801221e:	eeb0 0a41 	vmov.f32	s0, s2
 8012222:	f7ff fe61 	bl	8011ee8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8012226:	4628      	mov	r0, r5
 8012228:	ecbd 8b02 	vpop	{d8}
 801222c:	bd38      	pop	{r3, r4, r5, pc}

0801222e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 801222e:	b510      	push	{r4, lr}
 8012230:	ed2d 8b02 	vpush	{d8}
 8012234:	4604      	mov	r4, r0
 8012236:	eeb0 8a40 	vmov.f32	s16, s0
 801223a:	eef0 8a60 	vmov.f32	s17, s1
 801223e:	f7ff ffc7 	bl	80121d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8012242:	b9d0      	cbnz	r0, 801227a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8012244:	4620      	mov	r0, r4
 8012246:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 801224a:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 801224e:	eef0 0a68 	vmov.f32	s1, s17
 8012252:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8012256:	eeb0 0a48 	vmov.f32	s0, s16
 801225a:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 801225e:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8012262:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8012266:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 801226a:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 801226e:	f7ff fdaf 	bl	8011dd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8012272:	2001      	movs	r0, #1
 8012274:	ecbd 8b02 	vpop	{d8}
 8012278:	bd10      	pop	{r4, pc}
 801227a:	2000      	movs	r0, #0
 801227c:	e7fa      	b.n	8012274 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0801227e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 801227e:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8012282:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8012286:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 801228a:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 801228e:	f7ff be2b 	b.w	8011ee8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08012294 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8012294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012298:	b089      	sub	sp, #36	@ 0x24
 801229a:	461c      	mov	r4, r3
 801229c:	4682      	mov	sl, r0
 801229e:	4615      	mov	r5, r2
 80122a0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80122a4:	f10d 0820 	add.w	r8, sp, #32
 80122a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80122aa:	9304      	str	r3, [sp, #16]
 80122ac:	2300      	movs	r3, #0
 80122ae:	9105      	str	r1, [sp, #20]
 80122b0:	9306      	str	r3, [sp, #24]
 80122b2:	f848 3d04 	str.w	r3, [r8, #-4]!
 80122b6:	9b04      	ldr	r3, [sp, #16]
 80122b8:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 80122bc:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 80122c0:	9b05      	ldr	r3, [sp, #20]
 80122c2:	429d      	cmp	r5, r3
 80122c4:	d96d      	bls.n	80123a2 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 80122c6:	3d01      	subs	r5, #1
 80122c8:	f819 3005 	ldrb.w	r3, [r9, r5]
 80122cc:	2b06      	cmp	r3, #6
 80122ce:	d8f7      	bhi.n	80122c0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80122d0:	a201      	add	r2, pc, #4	@ (adr r2, 80122d8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 80122d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122d6:	bf00      	nop
 80122d8:	080122f7 	.word	0x080122f7
 80122dc:	080122c1 	.word	0x080122c1
 80122e0:	080122f5 	.word	0x080122f5
 80122e4:	08012319 	.word	0x08012319
 80122e8:	08012319 	.word	0x08012319
 80122ec:	0801231d 	.word	0x0801231d
 80122f0:	0801235d 	.word	0x0801235d
 80122f4:	3c02      	subs	r4, #2
 80122f6:	4650      	mov	r0, sl
 80122f8:	9400      	str	r4, [sp, #0]
 80122fa:	462b      	mov	r3, r5
 80122fc:	4642      	mov	r2, r8
 80122fe:	a906      	add	r1, sp, #24
 8012300:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8012304:	f7ff fcae 	bl	8011c64 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8012308:	eddd 0a07 	vldr	s1, [sp, #28]
 801230c:	ed9d 0a06 	vldr	s0, [sp, #24]
 8012310:	4630      	mov	r0, r6
 8012312:	f7ff fed1 	bl	80120b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012316:	e7d3      	b.n	80122c0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012318:	3c01      	subs	r4, #1
 801231a:	e7ec      	b.n	80122f6 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 801231c:	f1a4 0b04 	sub.w	fp, r4, #4
 8012320:	3c02      	subs	r4, #2
 8012322:	4650      	mov	r0, sl
 8012324:	462b      	mov	r3, r5
 8012326:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801232a:	f8cd b000 	str.w	fp, [sp]
 801232e:	4642      	mov	r2, r8
 8012330:	a906      	add	r1, sp, #24
 8012332:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8012336:	f7ff fc95 	bl	8011c64 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801233a:	eddd 2a07 	vldr	s5, [sp, #28]
 801233e:	ed9d 2a06 	vldr	s4, [sp, #24]
 8012342:	4630      	mov	r0, r6
 8012344:	ed54 1a01 	vldr	s3, [r4, #-4]
 8012348:	ed14 1a02 	vldr	s2, [r4, #-8]
 801234c:	edd4 0a01 	vldr	s1, [r4, #4]
 8012350:	ed94 0a00 	vldr	s0, [r4]
 8012354:	f7ff fc1a 	bl	8011b8c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012358:	465c      	mov	r4, fp
 801235a:	e7b1      	b.n	80122c0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801235c:	f1a4 0b06 	sub.w	fp, r4, #6
 8012360:	3c02      	subs	r4, #2
 8012362:	4650      	mov	r0, sl
 8012364:	462b      	mov	r3, r5
 8012366:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801236a:	f8cd b000 	str.w	fp, [sp]
 801236e:	4642      	mov	r2, r8
 8012370:	a906      	add	r1, sp, #24
 8012372:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8012376:	f7ff fc75 	bl	8011c64 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801237a:	eddd 3a07 	vldr	s7, [sp, #28]
 801237e:	ed9d 3a06 	vldr	s6, [sp, #24]
 8012382:	4630      	mov	r0, r6
 8012384:	ed54 2a03 	vldr	s5, [r4, #-12]
 8012388:	ed14 2a04 	vldr	s4, [r4, #-16]
 801238c:	ed54 1a01 	vldr	s3, [r4, #-4]
 8012390:	ed14 1a02 	vldr	s2, [r4, #-8]
 8012394:	edd4 0a01 	vldr	s1, [r4, #4]
 8012398:	ed94 0a00 	vldr	s0, [r4]
 801239c:	f7ff fc15 	bl	8011bca <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80123a0:	e7da      	b.n	8012358 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 80123a2:	9b04      	ldr	r3, [sp, #16]
 80123a4:	b113      	cbz	r3, 80123ac <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 80123a6:	4630      	mov	r0, r6
 80123a8:	f7ff ff69 	bl	801227e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 80123ac:	b009      	add	sp, #36	@ 0x24
 80123ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b2:	bf00      	nop

080123b4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 80123b4:	eef0 7a60 	vmov.f32	s15, s1
 80123b8:	6803      	ldr	r3, [r0, #0]
 80123ba:	689b      	ldr	r3, [r3, #8]
 80123bc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80123c0:	ee17 2a90 	vmov	r2, s15
 80123c4:	eef0 7a40 	vmov.f32	s15, s0
 80123c8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80123cc:	ee17 1a90 	vmov	r1, s15
 80123d0:	4718      	bx	r3
	...

080123d4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 80123d4:	4b04      	ldr	r3, [pc, #16]	@ (80123e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 80123d6:	b510      	push	{r4, lr}
 80123d8:	4604      	mov	r4, r0
 80123da:	f840 3b14 	str.w	r3, [r0], #20
 80123de:	f001 fdfb 	bl	8013fd8 <_ZN8touchgfx7OutlineD1Ev>
 80123e2:	4620      	mov	r0, r4
 80123e4:	bd10      	pop	{r4, pc}
 80123e6:	bf00      	nop
 80123e8:	08029a04 	.word	0x08029a04

080123ec <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 80123ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f0:	ed2d 8b04 	vpush	{d8-d9}
 80123f4:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 80123f8:	b0b5      	sub	sp, #212	@ 0xd4
 80123fa:	4605      	mov	r5, r0
 80123fc:	468b      	mov	fp, r1
 80123fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012402:	9206      	str	r2, [sp, #24]
 8012404:	461e      	mov	r6, r3
 8012406:	2400      	movs	r4, #0
 8012408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801240c:	f240 814f 	bls.w	80126ae <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8012410:	23ff      	movs	r3, #255	@ 0xff
 8012412:	1d02      	adds	r2, r0, #4
 8012414:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 80126b4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8012418:	f04f 0800 	mov.w	r8, #0
 801241c:	9300      	str	r3, [sp, #0]
 801241e:	af08      	add	r7, sp, #32
 8012420:	6981      	ldr	r1, [r0, #24]
 8012422:	a808      	add	r0, sp, #32
 8012424:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012426:	eef0 9a49 	vmov.f32	s19, s18
 801242a:	f011 ff9f 	bl	802436c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801242e:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8012432:	4ba1      	ldr	r3, [pc, #644]	@ (80126b8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8012434:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801243c:	2201      	movs	r2, #1
 801243e:	9308      	str	r3, [sp, #32]
 8012440:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8012444:	edd5 6a08 	vldr	s13, [r5, #32]
 8012448:	eeb0 8a49 	vmov.f32	s16, s18
 801244c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012450:	9325      	str	r3, [sp, #148]	@ 0x94
 8012452:	f04f 0300 	mov.w	r3, #0
 8012456:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 801245a:	7f6a      	ldrb	r2, [r5, #29]
 801245c:	eef0 8a49 	vmov.f32	s17, s18
 8012460:	bf48      	it	mi
 8012462:	eef1 7a67 	vnegmi.f32	s15, s15
 8012466:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 801246a:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 801246e:	46c1      	mov	r9, r8
 8012470:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012474:	f04f 0a01 	mov.w	sl, #1
 8012478:	ee67 7a87 	vmul.f32	s15, s15, s14
 801247c:	7fab      	ldrb	r3, [r5, #30]
 801247e:	942a      	str	r4, [sp, #168]	@ 0xa8
 8012480:	435a      	muls	r2, r3
 8012482:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8012486:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801248a:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 801248e:	1c53      	adds	r3, r2, #1
 8012490:	942b      	str	r4, [sp, #172]	@ 0xac
 8012492:	942c      	str	r4, [sp, #176]	@ 0xb0
 8012494:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012498:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801249c:	942d      	str	r4, [sp, #180]	@ 0xb4
 801249e:	942e      	str	r4, [sp, #184]	@ 0xb8
 80124a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80124a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124a8:	942f      	str	r4, [sp, #188]	@ 0xbc
 80124aa:	9430      	str	r4, [sp, #192]	@ 0xc0
 80124ac:	9431      	str	r4, [sp, #196]	@ 0xc4
 80124ae:	9432      	str	r4, [sp, #200]	@ 0xc8
 80124b0:	9433      	str	r4, [sp, #204]	@ 0xcc
 80124b2:	4644      	mov	r4, r8
 80124b4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80124b8:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 80124bc:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 80124c0:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 80124c4:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 80124c8:	9b06      	ldr	r3, [sp, #24]
 80124ca:	454b      	cmp	r3, r9
 80124cc:	f000 80cc 	beq.w	8012668 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 80124d0:	f109 0301 	add.w	r3, r9, #1
 80124d4:	9305      	str	r3, [sp, #20]
 80124d6:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80124da:	2b06      	cmp	r3, #6
 80124dc:	d839      	bhi.n	8012552 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80124de:	e8df f003 	tbb	[pc, r3]
 80124e2:	3b04      	.short	0x3b04
 80124e4:	817c6f60 	.word	0x817c6f60
 80124e8:	a0          	.byte	0xa0
 80124e9:	00          	.byte	0x00
 80124ea:	45c1      	cmp	r9, r8
 80124ec:	d92b      	bls.n	8012546 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80124ee:	eef0 0a49 	vmov.f32	s1, s18
 80124f2:	4638      	mov	r0, r7
 80124f4:	eeb0 0a69 	vmov.f32	s0, s19
 80124f8:	f7ff fdde 	bl	80120b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80124fc:	4638      	mov	r0, r7
 80124fe:	f7ff fe67 	bl	80121d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8012502:	4681      	mov	r9, r0
 8012504:	b9f8      	cbnz	r0, 8012546 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8012506:	eef0 0a49 	vmov.f32	s1, s18
 801250a:	4638      	mov	r0, r7
 801250c:	eeb0 0a69 	vmov.f32	s0, s19
 8012510:	f7ff fe8d 	bl	801222e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8012514:	4628      	mov	r0, r5
 8012516:	4623      	mov	r3, r4
 8012518:	9a05      	ldr	r2, [sp, #20]
 801251a:	4641      	mov	r1, r8
 801251c:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8012520:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8012524:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8012528:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 801252c:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8012530:	e9cd b600 	strd	fp, r6, [sp]
 8012534:	f7ff feae 	bl	8012294 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012538:	eef0 0a49 	vmov.f32	s1, s18
 801253c:	eeb0 0a69 	vmov.f32	s0, s19
 8012540:	4638      	mov	r0, r7
 8012542:	f7ff fe74 	bl	801222e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8012546:	eeb0 8a49 	vmov.f32	s16, s18
 801254a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801254e:	eef0 8a69 	vmov.f32	s17, s19
 8012552:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8012556:	e7b7      	b.n	80124c8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8012558:	45c1      	cmp	r9, r8
 801255a:	d90d      	bls.n	8012578 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 801255c:	4638      	mov	r0, r7
 801255e:	f7ff fe37 	bl	80121d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8012562:	b948      	cbnz	r0, 8012578 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8012564:	4623      	mov	r3, r4
 8012566:	464a      	mov	r2, r9
 8012568:	4641      	mov	r1, r8
 801256a:	4628      	mov	r0, r5
 801256c:	e9cd a702 	strd	sl, r7, [sp, #8]
 8012570:	e9cd b600 	strd	fp, r6, [sp]
 8012574:	f7ff fe8e 	bl	8012294 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012578:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801257c:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8012580:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8012584:	3402      	adds	r4, #2
 8012586:	edd3 8a00 	vldr	s17, [r3]
 801258a:	46c8      	mov	r8, r9
 801258c:	ed93 8a01 	vldr	s16, [r3, #4]
 8012590:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8012594:	eef0 9a68 	vmov.f32	s19, s17
 8012598:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 801259c:	eeb0 9a48 	vmov.f32	s18, s16
 80125a0:	e7d7      	b.n	8012552 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80125a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80125a6:	4638      	mov	r0, r7
 80125a8:	3402      	adds	r4, #2
 80125aa:	edd3 8a00 	vldr	s17, [r3]
 80125ae:	ed93 8a01 	vldr	s16, [r3, #4]
 80125b2:	eeb0 0a68 	vmov.f32	s0, s17
 80125b6:	eef0 0a48 	vmov.f32	s1, s16
 80125ba:	f7ff fd7d 	bl	80120b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80125be:	e7c8      	b.n	8012552 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80125c0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80125c4:	edd3 8a00 	vldr	s17, [r3]
 80125c8:	eef0 0a48 	vmov.f32	s1, s16
 80125cc:	4638      	mov	r0, r7
 80125ce:	eeb0 0a68 	vmov.f32	s0, s17
 80125d2:	3401      	adds	r4, #1
 80125d4:	f7ff fd70 	bl	80120b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80125d8:	e7bb      	b.n	8012552 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80125da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80125de:	ed93 8a00 	vldr	s16, [r3]
 80125e2:	e7f1      	b.n	80125c8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 80125e4:	00a3      	lsls	r3, r4, #2
 80125e6:	eef0 0a48 	vmov.f32	s1, s16
 80125ea:	eeb0 0a68 	vmov.f32	s0, s17
 80125ee:	4638      	mov	r0, r7
 80125f0:	f103 0208 	add.w	r2, r3, #8
 80125f4:	f103 090c 	add.w	r9, r3, #12
 80125f8:	4433      	add	r3, r6
 80125fa:	3404      	adds	r4, #4
 80125fc:	4432      	add	r2, r6
 80125fe:	44b1      	add	r9, r6
 8012600:	edd3 1a01 	vldr	s3, [r3, #4]
 8012604:	ed92 2a00 	vldr	s4, [r2]
 8012608:	edd9 2a00 	vldr	s5, [r9]
 801260c:	ed93 1a00 	vldr	s2, [r3]
 8012610:	9207      	str	r2, [sp, #28]
 8012612:	f7ff fabb 	bl	8011b8c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012616:	9a07      	ldr	r2, [sp, #28]
 8012618:	ed99 8a00 	vldr	s16, [r9]
 801261c:	edd2 8a00 	vldr	s17, [r2]
 8012620:	e797      	b.n	8012552 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012622:	00a3      	lsls	r3, r4, #2
 8012624:	eef0 0a48 	vmov.f32	s1, s16
 8012628:	eeb0 0a68 	vmov.f32	s0, s17
 801262c:	4638      	mov	r0, r7
 801262e:	f103 0210 	add.w	r2, r3, #16
 8012632:	f103 0914 	add.w	r9, r3, #20
 8012636:	4433      	add	r3, r6
 8012638:	3406      	adds	r4, #6
 801263a:	4432      	add	r2, r6
 801263c:	44b1      	add	r9, r6
 801263e:	edd3 2a03 	vldr	s5, [r3, #12]
 8012642:	ed92 3a00 	vldr	s6, [r2]
 8012646:	edd9 3a00 	vldr	s7, [r9]
 801264a:	ed93 2a02 	vldr	s4, [r3, #8]
 801264e:	edd3 1a01 	vldr	s3, [r3, #4]
 8012652:	ed93 1a00 	vldr	s2, [r3]
 8012656:	9207      	str	r2, [sp, #28]
 8012658:	f7ff fab7 	bl	8011bca <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801265c:	9a07      	ldr	r2, [sp, #28]
 801265e:	ed99 8a00 	vldr	s16, [r9]
 8012662:	edd2 8a00 	vldr	s17, [r2]
 8012666:	e774      	b.n	8012552 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012668:	9b06      	ldr	r3, [sp, #24]
 801266a:	af08      	add	r7, sp, #32
 801266c:	4543      	cmp	r3, r8
 801266e:	d90f      	bls.n	8012690 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8012670:	4638      	mov	r0, r7
 8012672:	f7ff fdad 	bl	80121d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8012676:	b958      	cbnz	r0, 8012690 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8012678:	2301      	movs	r3, #1
 801267a:	9703      	str	r7, [sp, #12]
 801267c:	f8cd b000 	str.w	fp, [sp]
 8012680:	4641      	mov	r1, r8
 8012682:	9a06      	ldr	r2, [sp, #24]
 8012684:	4628      	mov	r0, r5
 8012686:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801268a:	4623      	mov	r3, r4
 801268c:	f7ff fe02 	bl	8012294 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012690:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8012694:	4638      	mov	r0, r7
 8012696:	f011 fefd 	bl	8024494 <_ZN8touchgfx6Canvas6renderEh>
 801269a:	4604      	mov	r4, r0
 801269c:	4638      	mov	r0, r7
 801269e:	f7ff fe99 	bl	80123d4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 80126a2:	4620      	mov	r0, r4
 80126a4:	b035      	add	sp, #212	@ 0xd4
 80126a6:	ecbd 8b04 	vpop	{d8-d9}
 80126aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ae:	2401      	movs	r4, #1
 80126b0:	e7f7      	b.n	80126a2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 80126b2:	bf00      	nop
 80126b4:	00000000 	.word	0x00000000
 80126b8:	080292b8 	.word	0x080292b8

080126bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 80126bc:	b510      	push	{r4, lr}
 80126be:	4604      	mov	r4, r0
 80126c0:	f7ff fe88 	bl	80123d4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 80126c4:	21b0      	movs	r1, #176	@ 0xb0
 80126c6:	4620      	mov	r0, r4
 80126c8:	f012 fab1 	bl	8024c2e <_ZdlPvj>
 80126cc:	4620      	mov	r0, r4
 80126ce:	bd10      	pop	{r4, pc}

080126d0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 80126d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126d4:	4698      	mov	r8, r3
 80126d6:	23ff      	movs	r3, #255	@ 0xff
 80126d8:	4607      	mov	r7, r0
 80126da:	4689      	mov	r9, r1
 80126dc:	4692      	mov	sl, r2
 80126de:	1d02      	adds	r2, r0, #4
 80126e0:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80126e4:	2400      	movs	r4, #0
 80126e6:	44ca      	add	sl, r9
 80126e8:	ed2d 8b06 	vpush	{d8-d10}
 80126ec:	b0aa      	sub	sp, #168	@ 0xa8
 80126ee:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 80128f4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	eef0 8a48 	vmov.f32	s17, s16
 80126f8:	6981      	ldr	r1, [r0, #24]
 80126fa:	a80d      	add	r0, sp, #52	@ 0x34
 80126fc:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80126fe:	f011 fe35 	bl	802436c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8012702:	7f3b      	ldrb	r3, [r7, #28]
 8012704:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 80128f4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8012708:	4628      	mov	r0, r5
 801270a:	1e5a      	subs	r2, r3, #1
 801270c:	eeb0 0a60 	vmov.f32	s0, s1
 8012710:	4253      	negs	r3, r2
 8012712:	4153      	adcs	r3, r2
 8012714:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8012718:	f005 fc0d 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801271c:	eeb0 9a40 	vmov.f32	s18, s0
 8012720:	eef0 9a60 	vmov.f32	s19, s1
 8012724:	45ca      	cmp	sl, r9
 8012726:	f000 80cd 	beq.w	80128c4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 801272a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801272e:	2b06      	cmp	r3, #6
 8012730:	d8f8      	bhi.n	8012724 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012732:	e8df f003 	tbb	[pc, r3]
 8012736:	0804      	.short	0x0804
 8012738:	58533f2a 	.word	0x58533f2a
 801273c:	8a          	.byte	0x8a
 801273d:	00          	.byte	0x00
 801273e:	a80d      	add	r0, sp, #52	@ 0x34
 8012740:	f011 fe86 	bl	8024450 <_ZN8touchgfx6Canvas5closeEv>
 8012744:	e7ee      	b.n	8012724 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012746:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801274a:	4628      	mov	r0, r5
 801274c:	ed93 8a01 	vldr	s16, [r3, #4]
 8012750:	edd3 8a00 	vldr	s17, [r3]
 8012754:	eef0 0a48 	vmov.f32	s1, s16
 8012758:	eeb0 0a68 	vmov.f32	s0, s17
 801275c:	f005 fbeb 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012760:	a80d      	add	r0, sp, #52	@ 0x34
 8012762:	eef0 7a60 	vmov.f32	s15, s1
 8012766:	eeb0 9a40 	vmov.f32	s18, s0
 801276a:	eef0 9a60 	vmov.f32	s19, s1
 801276e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012772:	ee17 2a90 	vmov	r2, s15
 8012776:	eef0 7a40 	vmov.f32	s15, s0
 801277a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801277e:	ee17 1a90 	vmov	r1, s15
 8012782:	f011 ff3f 	bl	8024604 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8012786:	3402      	adds	r4, #2
 8012788:	e7cc      	b.n	8012724 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801278a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801278e:	4628      	mov	r0, r5
 8012790:	edd3 8a00 	vldr	s17, [r3]
 8012794:	ed93 8a01 	vldr	s16, [r3, #4]
 8012798:	eeb0 0a68 	vmov.f32	s0, s17
 801279c:	eef0 0a48 	vmov.f32	s1, s16
 80127a0:	f005 fbc9 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80127a4:	a80d      	add	r0, sp, #52	@ 0x34
 80127a6:	eeb0 9a40 	vmov.f32	s18, s0
 80127aa:	eef0 9a60 	vmov.f32	s19, s1
 80127ae:	f7ff fe01 	bl	80123b4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80127b2:	e7e8      	b.n	8012786 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 80127b4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80127b8:	edd3 8a00 	vldr	s17, [r3]
 80127bc:	eef0 0a48 	vmov.f32	s1, s16
 80127c0:	4628      	mov	r0, r5
 80127c2:	eeb0 0a68 	vmov.f32	s0, s17
 80127c6:	3401      	adds	r4, #1
 80127c8:	f005 fbb5 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80127cc:	a80d      	add	r0, sp, #52	@ 0x34
 80127ce:	eef0 9a60 	vmov.f32	s19, s1
 80127d2:	eeb0 9a40 	vmov.f32	s18, s0
 80127d6:	f7ff fded 	bl	80123b4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80127da:	e7a3      	b.n	8012724 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80127dc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80127e0:	ed93 8a00 	vldr	s16, [r3]
 80127e4:	e7ea      	b.n	80127bc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 80127e6:	1ca3      	adds	r3, r4, #2
 80127e8:	4628      	mov	r0, r5
 80127ea:	3404      	adds	r4, #4
 80127ec:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80127f0:	ed53 0a01 	vldr	s1, [r3, #-4]
 80127f4:	ed13 0a02 	vldr	s0, [r3, #-8]
 80127f8:	edd3 8a00 	vldr	s17, [r3]
 80127fc:	ed93 8a01 	vldr	s16, [r3, #4]
 8012800:	f005 fb99 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012804:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8012808:	eeb0 0a68 	vmov.f32	s0, s17
 801280c:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8012810:	eef0 0a48 	vmov.f32	s1, s16
 8012814:	4628      	mov	r0, r5
 8012816:	f005 fb8e 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801281a:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 801281e:	eef0 2a60 	vmov.f32	s5, s1
 8012822:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8012826:	eeb0 2a40 	vmov.f32	s4, s0
 801282a:	a80d      	add	r0, sp, #52	@ 0x34
 801282c:	eeb0 aa40 	vmov.f32	s20, s0
 8012830:	eef0 aa60 	vmov.f32	s21, s1
 8012834:	eeb0 0a49 	vmov.f32	s0, s18
 8012838:	eef0 0a69 	vmov.f32	s1, s19
 801283c:	f7ff f9a6 	bl	8011b8c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012840:	eef0 9a6a 	vmov.f32	s19, s21
 8012844:	eeb0 9a4a 	vmov.f32	s18, s20
 8012848:	e76c      	b.n	8012724 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801284a:	1d26      	adds	r6, r4, #4
 801284c:	4628      	mov	r0, r5
 801284e:	3406      	adds	r4, #6
 8012850:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012854:	ed56 0a03 	vldr	s1, [r6, #-12]
 8012858:	ed16 0a04 	vldr	s0, [r6, #-16]
 801285c:	edd6 8a00 	vldr	s17, [r6]
 8012860:	ed96 8a01 	vldr	s16, [r6, #4]
 8012864:	f005 fb67 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012868:	ed8d 0a07 	vstr	s0, [sp, #28]
 801286c:	4628      	mov	r0, r5
 801286e:	ed16 0a02 	vldr	s0, [r6, #-8]
 8012872:	edcd 0a08 	vstr	s1, [sp, #32]
 8012876:	ed56 0a01 	vldr	s1, [r6, #-4]
 801287a:	f005 fb5c 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801287e:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8012882:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8012886:	eeb0 0a68 	vmov.f32	s0, s17
 801288a:	eef0 0a48 	vmov.f32	s1, s16
 801288e:	4628      	mov	r0, r5
 8012890:	f005 fb51 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012894:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8012898:	eeb0 3a40 	vmov.f32	s6, s0
 801289c:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 80128a0:	eef0 3a60 	vmov.f32	s7, s1
 80128a4:	eddd 1a08 	vldr	s3, [sp, #32]
 80128a8:	eeb0 aa40 	vmov.f32	s20, s0
 80128ac:	ed9d 1a07 	vldr	s2, [sp, #28]
 80128b0:	eef0 aa60 	vmov.f32	s21, s1
 80128b4:	a80d      	add	r0, sp, #52	@ 0x34
 80128b6:	eef0 0a69 	vmov.f32	s1, s19
 80128ba:	eeb0 0a49 	vmov.f32	s0, s18
 80128be:	f7ff f984 	bl	8011bca <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80128c2:	e7bd      	b.n	8012840 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 80128c4:	7f7b      	ldrb	r3, [r7, #29]
 80128c6:	a80d      	add	r0, sp, #52	@ 0x34
 80128c8:	7fb9      	ldrb	r1, [r7, #30]
 80128ca:	4359      	muls	r1, r3
 80128cc:	1c4b      	adds	r3, r1, #1
 80128ce:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80128d2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80128d6:	f011 fddd 	bl	8024494 <_ZN8touchgfx6Canvas6renderEh>
 80128da:	4b07      	ldr	r3, [pc, #28]	@ (80128f8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 80128dc:	4604      	mov	r4, r0
 80128de:	a812      	add	r0, sp, #72	@ 0x48
 80128e0:	930d      	str	r3, [sp, #52]	@ 0x34
 80128e2:	f001 fb79 	bl	8013fd8 <_ZN8touchgfx7OutlineD1Ev>
 80128e6:	4620      	mov	r0, r4
 80128e8:	b02a      	add	sp, #168	@ 0xa8
 80128ea:	ecbd 8b06 	vpop	{d8-d10}
 80128ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128f2:	bf00      	nop
 80128f4:	00000000 	.word	0x00000000
 80128f8:	08029a04 	.word	0x08029a04

080128fc <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 80128fc:	b410      	push	{r4}
 80128fe:	7f04      	ldrb	r4, [r0, #28]
 8012900:	b11c      	cbz	r4, 801290a <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8012902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012906:	f7ff bee3 	b.w	80126d0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 801290a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801290e:	f7ff bd6d 	b.w	80123ec <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08012912 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8012912:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012916:	4691      	mov	r9, r2
 8012918:	4602      	mov	r2, r0
 801291a:	4606      	mov	r6, r0
 801291c:	4688      	mov	r8, r1
 801291e:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8012922:	469a      	mov	sl, r3
 8012924:	ab02      	add	r3, sp, #8
 8012926:	af02      	add	r7, sp, #8
 8012928:	6851      	ldr	r1, [r2, #4]
 801292a:	c303      	stmia	r3!, {r0, r1}
 801292c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012930:	2b00      	cmp	r3, #0
 8012932:	dd2f      	ble.n	8012994 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8012934:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8012938:	2c00      	cmp	r4, #0
 801293a:	dd2b      	ble.n	8012994 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801293c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012940:	441c      	add	r4, r3
 8012942:	b2a4      	uxth	r4, r4
 8012944:	b225      	sxth	r5, r4
 8012946:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801294a:	42ab      	cmp	r3, r5
 801294c:	da22      	bge.n	8012994 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801294e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012950:	464a      	mov	r2, r9
 8012952:	9701      	str	r7, [sp, #4]
 8012954:	4641      	mov	r1, r8
 8012956:	9300      	str	r3, [sp, #0]
 8012958:	4630      	mov	r0, r6
 801295a:	4653      	mov	r3, sl
 801295c:	f7ff ffce 	bl	80128fc <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8012960:	b940      	cbnz	r0, 8012974 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8012962:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012966:	2b01      	cmp	r3, #1
 8012968:	d004      	beq.n	8012974 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 801296a:	3301      	adds	r3, #1
 801296c:	105b      	asrs	r3, r3, #1
 801296e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012972:	e7ec      	b.n	801294e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8012974:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8012978:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801297c:	4413      	add	r3, r2
 801297e:	b29b      	uxth	r3, r3
 8012980:	441a      	add	r2, r3
 8012982:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012986:	b212      	sxth	r2, r2
 8012988:	4295      	cmp	r5, r2
 801298a:	dadc      	bge.n	8012946 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 801298c:	1ae3      	subs	r3, r4, r3
 801298e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012992:	e7d8      	b.n	8012946 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8012994:	b004      	add	sp, #16
 8012996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801299a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 801299a:	0c0b      	lsrs	r3, r1, #16
 801299c:	60c1      	str	r1, [r0, #12]
 801299e:	7481      	strb	r1, [r0, #18]
 80129a0:	7403      	strb	r3, [r0, #16]
 80129a2:	0a0b      	lsrs	r3, r1, #8
 80129a4:	7443      	strb	r3, [r0, #17]
 80129a6:	4770      	bx	lr

080129a8 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80129a8:	f1a0 0008 	sub.w	r0, r0, #8
 80129ac:	e7f5      	b.n	801299a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

080129b0 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 80129b0:	b508      	push	{r3, lr}
 80129b2:	4b05      	ldr	r3, [pc, #20]	@ (80129c8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 80129b4:	6818      	ldr	r0, [r3, #0]
 80129b6:	6803      	ldr	r3, [r0, #0]
 80129b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80129bc:	4798      	blx	r3
 80129be:	1e43      	subs	r3, r0, #1
 80129c0:	4258      	negs	r0, r3
 80129c2:	4158      	adcs	r0, r3
 80129c4:	bd08      	pop	{r3, pc}
 80129c6:	bf00      	nop
 80129c8:	24028e2c 	.word	0x24028e2c

080129cc <_ZN8touchgfx13PainterRGB888D1Ev>:
 80129cc:	4770      	bx	lr

080129ce <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 80129ce:	3808      	subs	r0, #8
 80129d0:	4770      	bx	lr

080129d2 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 80129d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80129d6:	b410      	push	{r4}
 80129d8:	188c      	adds	r4, r1, r2
 80129da:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80129de:	68c2      	ldr	r2, [r0, #12]
 80129e0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80129e4:	4620      	mov	r0, r4
 80129e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129ea:	f7f0 bd11 	b.w	8003410 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

080129ee <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 80129ee:	f7f0 bceb 	b.w	80033c8 <_ZN8touchgfx5paint8tearDownEv>

080129f2 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80129f2:	b510      	push	{r4, lr}
 80129f4:	4604      	mov	r4, r0
 80129f6:	2114      	movs	r1, #20
 80129f8:	f012 f919 	bl	8024c2e <_ZdlPvj>
 80129fc:	4620      	mov	r0, r4
 80129fe:	bd10      	pop	{r4, pc}

08012a00 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8012a00:	f1a0 0008 	sub.w	r0, r0, #8
 8012a04:	e7f5      	b.n	80129f2 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08012a08 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8012a08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a10:	4411      	add	r1, r2
 8012a12:	7c42      	ldrb	r2, [r0, #17]
 8012a14:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8012a18:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8012a1c:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8012a20:	2a00      	cmp	r2, #0
 8012a22:	f000 8084 	beq.w	8012b2e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8012a26:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012a2a:	ed90 7a08 	vldr	s14, [r0, #32]
 8012a2e:	42a2      	cmp	r2, r4
 8012a30:	68c3      	ldr	r3, [r0, #12]
 8012a32:	db20      	blt.n	8012a76 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8012a34:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012a38:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a40:	bfc8      	it	gt
 8012a42:	2200      	movgt	r2, #0
 8012a44:	589a      	ldr	r2, [r3, r2]
 8012a46:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012a4a:	7c03      	ldrb	r3, [r0, #16]
 8012a4c:	fa5f fc82 	uxtb.w	ip, r2
 8012a50:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8012a54:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8012a58:	440e      	add	r6, r1
 8012a5a:	b36b      	cbz	r3, 8012ab8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8012a5c:	2dff      	cmp	r5, #255	@ 0xff
 8012a5e:	d12b      	bne.n	8012ab8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8012a60:	42b1      	cmp	r1, r6
 8012a62:	f080 8204 	bcs.w	8012e6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012a66:	f881 c000 	strb.w	ip, [r1]
 8012a6a:	3103      	adds	r1, #3
 8012a6c:	f801 7c02 	strb.w	r7, [r1, #-2]
 8012a70:	f801 4c01 	strb.w	r4, [r1, #-1]
 8012a74:	e7f4      	b.n	8012a60 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8012a76:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8012a7a:	42a7      	cmp	r7, r4
 8012a7c:	dc08      	bgt.n	8012a90 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8012a7e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012a82:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a8a:	bfd8      	it	le
 8012a8c:	2200      	movle	r2, #0
 8012a8e:	e7d9      	b.n	8012a44 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8012a90:	1aa2      	subs	r2, r4, r2
 8012a92:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012a96:	ee07 2a90 	vmov	s15, r2
 8012a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012aaa:	ee17 2a90 	vmov	r2, s15
 8012aae:	bfd8      	it	le
 8012ab0:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8012ab4:	0092      	lsls	r2, r2, #2
 8012ab6:	e7c5      	b.n	8012a44 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8012ab8:	0e12      	lsrs	r2, r2, #24
 8012aba:	4355      	muls	r5, r2
 8012abc:	1c6a      	adds	r2, r5, #1
 8012abe:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8012ac2:	122d      	asrs	r5, r5, #8
 8012ac4:	43e8      	mvns	r0, r5
 8012ac6:	b2ad      	uxth	r5, r5
 8012ac8:	fb1c fc05 	smulbb	ip, ip, r5
 8012acc:	b2c0      	uxtb	r0, r0
 8012ace:	fb17 f705 	smulbb	r7, r7, r5
 8012ad2:	fb14 f505 	smulbb	r5, r4, r5
 8012ad6:	fa1f fc8c 	uxth.w	ip, ip
 8012ada:	b2bf      	uxth	r7, r7
 8012adc:	b2ad      	uxth	r5, r5
 8012ade:	428e      	cmp	r6, r1
 8012ae0:	f101 0303 	add.w	r3, r1, #3
 8012ae4:	f240 81c3 	bls.w	8012e6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012ae8:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8012aec:	fb02 c200 	mla	r2, r2, r0, ip
 8012af0:	b292      	uxth	r2, r2
 8012af2:	1c51      	adds	r1, r2, #1
 8012af4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012af8:	1212      	asrs	r2, r2, #8
 8012afa:	f803 2c03 	strb.w	r2, [r3, #-3]
 8012afe:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8012b02:	fb02 7200 	mla	r2, r2, r0, r7
 8012b06:	b292      	uxth	r2, r2
 8012b08:	1c51      	adds	r1, r2, #1
 8012b0a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012b0e:	1212      	asrs	r2, r2, #8
 8012b10:	f803 2c02 	strb.w	r2, [r3, #-2]
 8012b14:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8012b18:	fb02 5200 	mla	r2, r2, r0, r5
 8012b1c:	b292      	uxth	r2, r2
 8012b1e:	1c51      	adds	r1, r2, #1
 8012b20:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012b24:	4619      	mov	r1, r3
 8012b26:	1212      	asrs	r2, r2, #8
 8012b28:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012b2c:	e7d7      	b.n	8012ade <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8012b2e:	7c82      	ldrb	r2, [r0, #18]
 8012b30:	2a00      	cmp	r2, #0
 8012b32:	d047      	beq.n	8012bc4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8012b34:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012b38:	ee07 2a10 	vmov	s14, r2
 8012b3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b40:	ee07 3a90 	vmov	s15, r3
 8012b44:	461a      	mov	r2, r3
 8012b46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012b4a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b52:	f200 808e 	bhi.w	8012c72 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8012b56:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012b5a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012b5e:	68c7      	ldr	r7, [r0, #12]
 8012b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012b68:	ee06 6a90 	vmov	s13, r6
 8012b6c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012b70:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b78:	bf4a      	itet	mi
 8012b7a:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 8012b7e:	4634      	movpl	r4, r6
 8012b80:	ee17 4a90 	vmovmi	r4, s15
 8012b84:	edd0 7a08 	vldr	s15, [r0, #32]
 8012b88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b8c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8012b90:	448e      	add	lr, r1
 8012b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b96:	bfc8      	it	gt
 8012b98:	2200      	movgt	r2, #0
 8012b9a:	58bf      	ldr	r7, [r7, r2]
 8012b9c:	7c02      	ldrb	r2, [r0, #16]
 8012b9e:	fa5f f987 	uxtb.w	r9, r7
 8012ba2:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8012ba6:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8012baa:	b31a      	cbz	r2, 8012bf4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8012bac:	2dff      	cmp	r5, #255	@ 0xff
 8012bae:	d121      	bne.n	8012bf4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8012bb0:	4571      	cmp	r1, lr
 8012bb2:	d25d      	bcs.n	8012c70 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8012bb4:	f881 9000 	strb.w	r9, [r1]
 8012bb8:	3103      	adds	r1, #3
 8012bba:	f801 8c02 	strb.w	r8, [r1, #-2]
 8012bbe:	f801 cc01 	strb.w	ip, [r1, #-1]
 8012bc2:	e7f5      	b.n	8012bb0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8012bc4:	ee07 4a90 	vmov	s15, r4
 8012bc8:	ed90 7a06 	vldr	s14, [r0, #24]
 8012bcc:	edd0 6a05 	vldr	s13, [r0, #20]
 8012bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012bd8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012bdc:	edd0 7a08 	vldr	s15, [r0, #32]
 8012be0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be8:	bf44      	itt	mi
 8012bea:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8012bee:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8012bf2:	e7a5      	b.n	8012b40 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8012bf4:	0e3f      	lsrs	r7, r7, #24
 8012bf6:	436f      	muls	r7, r5
 8012bf8:	1c7a      	adds	r2, r7, #1
 8012bfa:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8012bfe:	1212      	asrs	r2, r2, #8
 8012c00:	ea6f 0a02 	mvn.w	sl, r2
 8012c04:	b292      	uxth	r2, r2
 8012c06:	fb19 f902 	smulbb	r9, r9, r2
 8012c0a:	fa5f fa8a 	uxtb.w	sl, sl
 8012c0e:	fb18 f802 	smulbb	r8, r8, r2
 8012c12:	fb1c fc02 	smulbb	ip, ip, r2
 8012c16:	fa1f f989 	uxth.w	r9, r9
 8012c1a:	fa1f f888 	uxth.w	r8, r8
 8012c1e:	fa1f fc8c 	uxth.w	ip, ip
 8012c22:	458e      	cmp	lr, r1
 8012c24:	f101 0203 	add.w	r2, r1, #3
 8012c28:	d922      	bls.n	8012c70 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8012c2a:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8012c2e:	fb01 910a 	mla	r1, r1, sl, r9
 8012c32:	b289      	uxth	r1, r1
 8012c34:	1c4f      	adds	r7, r1, #1
 8012c36:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012c3a:	1209      	asrs	r1, r1, #8
 8012c3c:	f802 1c03 	strb.w	r1, [r2, #-3]
 8012c40:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012c44:	fb01 810a 	mla	r1, r1, sl, r8
 8012c48:	b289      	uxth	r1, r1
 8012c4a:	1c4f      	adds	r7, r1, #1
 8012c4c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012c50:	1209      	asrs	r1, r1, #8
 8012c52:	f802 1c02 	strb.w	r1, [r2, #-2]
 8012c56:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012c5a:	fb01 c10a 	mla	r1, r1, sl, ip
 8012c5e:	b289      	uxth	r1, r1
 8012c60:	1c4f      	adds	r7, r1, #1
 8012c62:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012c66:	1209      	asrs	r1, r1, #8
 8012c68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012c6c:	4611      	mov	r1, r2
 8012c6e:	e7d8      	b.n	8012c22 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8012c70:	191a      	adds	r2, r3, r4
 8012c72:	4433      	add	r3, r6
 8012c74:	b21b      	sxth	r3, r3
 8012c76:	4293      	cmp	r3, r2
 8012c78:	f340 80f9 	ble.w	8012e6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012c7c:	edd0 7a07 	vldr	s15, [r0, #28]
 8012c80:	ee06 2a90 	vmov	s13, r2
 8012c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c88:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012c8c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c94:	f340 80b0 	ble.w	8012df8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8012c98:	ee06 3a10 	vmov	s12, r3
 8012c9c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012ca0:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8012e74 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8012ca4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012ca8:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012cac:	ed90 6a08 	vldr	s12, [r0, #32]
 8012cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8012cb8:	bfd6      	itet	le
 8012cba:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8012cbe:	469c      	movgt	ip, r3
 8012cc0:	ee17 ca90 	vmovle	ip, s15
 8012cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc8:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8012e78 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8012ccc:	ebac 0202 	sub.w	r2, ip, r2
 8012cd0:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8012cd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012cd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012cdc:	188c      	adds	r4, r1, r2
 8012cde:	7c02      	ldrb	r2, [r0, #16]
 8012ce0:	b1d2      	cbz	r2, 8012d18 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8012ce2:	2dff      	cmp	r5, #255	@ 0xff
 8012ce4:	d118      	bne.n	8012d18 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8012ce6:	42a1      	cmp	r1, r4
 8012ce8:	d261      	bcs.n	8012dae <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8012cea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012cee:	68c6      	ldr	r6, [r0, #12]
 8012cf0:	3103      	adds	r1, #3
 8012cf2:	ee17 7a10 	vmov	r7, s14
 8012cf6:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8012cfa:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8012cfe:	f801 6c03 	strb.w	r6, [r1, #-3]
 8012d02:	7856      	ldrb	r6, [r2, #1]
 8012d04:	f801 6c02 	strb.w	r6, [r1, #-2]
 8012d08:	7892      	ldrb	r2, [r2, #2]
 8012d0a:	f801 2c01 	strb.w	r2, [r1, #-1]
 8012d0e:	ed90 7a08 	vldr	s14, [r0, #32]
 8012d12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d16:	e7e6      	b.n	8012ce6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8012d18:	68c2      	ldr	r2, [r0, #12]
 8012d1a:	428c      	cmp	r4, r1
 8012d1c:	f101 0e03 	add.w	lr, r1, #3
 8012d20:	d945      	bls.n	8012dae <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8012d22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012d26:	ee17 9a10 	vmov	r9, s14
 8012d2a:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8012d2e:	f898 7003 	ldrb.w	r7, [r8, #3]
 8012d32:	fb07 f605 	mul.w	r6, r7, r5
 8012d36:	1c77      	adds	r7, r6, #1
 8012d38:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8012d3c:	123f      	asrs	r7, r7, #8
 8012d3e:	b2b9      	uxth	r1, r7
 8012d40:	43ff      	mvns	r7, r7
 8012d42:	b2fe      	uxtb	r6, r7
 8012d44:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8012d48:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8012d4c:	fb19 f906 	smulbb	r9, r9, r6
 8012d50:	fb07 9701 	mla	r7, r7, r1, r9
 8012d54:	b2bf      	uxth	r7, r7
 8012d56:	f107 0901 	add.w	r9, r7, #1
 8012d5a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8012d5e:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 8012d62:	fb19 f906 	smulbb	r9, r9, r6
 8012d66:	123f      	asrs	r7, r7, #8
 8012d68:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8012d6c:	f898 7001 	ldrb.w	r7, [r8, #1]
 8012d70:	fb07 9701 	mla	r7, r7, r1, r9
 8012d74:	b2bf      	uxth	r7, r7
 8012d76:	f107 0901 	add.w	r9, r7, #1
 8012d7a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8012d7e:	123f      	asrs	r7, r7, #8
 8012d80:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8012d84:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8012d88:	f898 8002 	ldrb.w	r8, [r8, #2]
 8012d8c:	fb17 f606 	smulbb	r6, r7, r6
 8012d90:	fb08 6601 	mla	r6, r8, r1, r6
 8012d94:	b2b6      	uxth	r6, r6
 8012d96:	1c71      	adds	r1, r6, #1
 8012d98:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8012d9c:	4671      	mov	r1, lr
 8012d9e:	1236      	asrs	r6, r6, #8
 8012da0:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8012da4:	ed90 7a08 	vldr	s14, [r0, #32]
 8012da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012dac:	e7b5      	b.n	8012d1a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 8012dae:	4563      	cmp	r3, ip
 8012db0:	dd5d      	ble.n	8012e6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012db2:	edd0 7a08 	vldr	s15, [r0, #32]
 8012db6:	eba3 030c 	sub.w	r3, r3, ip
 8012dba:	68c4      	ldr	r4, [r0, #12]
 8012dbc:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012dc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012dc8:	7c00      	ldrb	r0, [r0, #16]
 8012dca:	440b      	add	r3, r1
 8012dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd0:	bfd8      	it	le
 8012dd2:	2200      	movle	r2, #0
 8012dd4:	58a2      	ldr	r2, [r4, r2]
 8012dd6:	b2d4      	uxtb	r4, r2
 8012dd8:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8012ddc:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8012de0:	b160      	cbz	r0, 8012dfc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8012de2:	2dff      	cmp	r5, #255	@ 0xff
 8012de4:	d10a      	bne.n	8012dfc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8012de6:	4299      	cmp	r1, r3
 8012de8:	d241      	bcs.n	8012e6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012dea:	700c      	strb	r4, [r1, #0]
 8012dec:	3103      	adds	r1, #3
 8012dee:	f801 cc02 	strb.w	ip, [r1, #-2]
 8012df2:	f801 7c01 	strb.w	r7, [r1, #-1]
 8012df6:	e7f6      	b.n	8012de6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8012df8:	4694      	mov	ip, r2
 8012dfa:	e7da      	b.n	8012db2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8012dfc:	0e12      	lsrs	r2, r2, #24
 8012dfe:	436a      	muls	r2, r5
 8012e00:	1c55      	adds	r5, r2, #1
 8012e02:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8012e06:	122d      	asrs	r5, r5, #8
 8012e08:	43ee      	mvns	r6, r5
 8012e0a:	b2ad      	uxth	r5, r5
 8012e0c:	fb14 f405 	smulbb	r4, r4, r5
 8012e10:	b2f6      	uxtb	r6, r6
 8012e12:	fb1c f005 	smulbb	r0, ip, r5
 8012e16:	fb17 f505 	smulbb	r5, r7, r5
 8012e1a:	b2a4      	uxth	r4, r4
 8012e1c:	b280      	uxth	r0, r0
 8012e1e:	b2ad      	uxth	r5, r5
 8012e20:	428b      	cmp	r3, r1
 8012e22:	f101 0203 	add.w	r2, r1, #3
 8012e26:	d922      	bls.n	8012e6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012e28:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8012e2c:	fb01 4106 	mla	r1, r1, r6, r4
 8012e30:	b289      	uxth	r1, r1
 8012e32:	1c4f      	adds	r7, r1, #1
 8012e34:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012e38:	1209      	asrs	r1, r1, #8
 8012e3a:	f802 1c03 	strb.w	r1, [r2, #-3]
 8012e3e:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012e42:	fb01 0106 	mla	r1, r1, r6, r0
 8012e46:	b289      	uxth	r1, r1
 8012e48:	1c4f      	adds	r7, r1, #1
 8012e4a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012e4e:	1209      	asrs	r1, r1, #8
 8012e50:	f802 1c02 	strb.w	r1, [r2, #-2]
 8012e54:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012e58:	fb01 5106 	mla	r1, r1, r6, r5
 8012e5c:	b289      	uxth	r1, r1
 8012e5e:	1c4f      	adds	r7, r1, #1
 8012e60:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012e64:	1209      	asrs	r1, r1, #8
 8012e66:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012e6a:	4611      	mov	r1, r2
 8012e6c:	e7d8      	b.n	8012e20 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 8012e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e72:	bf00      	nop
 8012e74:	447ffffe 	.word	0x447ffffe
 8012e78:	00000000 	.word	0x00000000

08012e7c <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8012e7c:	4770      	bx	lr

08012e7e <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 8012e7e:	4770      	bx	lr

08012e80 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8012e80:	b510      	push	{r4, lr}
 8012e82:	4604      	mov	r4, r0
 8012e84:	2124      	movs	r1, #36	@ 0x24
 8012e86:	f011 fed2 	bl	8024c2e <_ZdlPvj>
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	bd10      	pop	{r4, pc}
	...

08012e90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8012e90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012e92:	6803      	ldr	r3, [r0, #0]
 8012e94:	460d      	mov	r5, r1
 8012e96:	4604      	mov	r4, r0
 8012e98:	4601      	mov	r1, r0
 8012e9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e9c:	a802      	add	r0, sp, #8
 8012e9e:	4798      	blx	r3
 8012ea0:	6828      	ldr	r0, [r5, #0]
 8012ea2:	6869      	ldr	r1, [r5, #4]
 8012ea4:	466b      	mov	r3, sp
 8012ea6:	c303      	stmia	r3!, {r0, r1}
 8012ea8:	4668      	mov	r0, sp
 8012eaa:	4619      	mov	r1, r3
 8012eac:	f7fd fcfc 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 8012eb0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012eb2:	b188      	cbz	r0, 8012ed8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012eb4:	6803      	ldr	r3, [r0, #0]
 8012eb6:	1d21      	adds	r1, r4, #4
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	4798      	blx	r3
 8012ebc:	b160      	cbz	r0, 8012ed8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012ebe:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	dd08      	ble.n	8012ed8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012ec6:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8012eca:	2d00      	cmp	r5, #0
 8012ecc:	dd04      	ble.n	8012ed8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012ece:	4a2b      	ldr	r2, [pc, #172]	@ (8012f7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8012ed0:	7812      	ldrb	r2, [r2, #0]
 8012ed2:	b11a      	cbz	r2, 8012edc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8012ed4:	2a01      	cmp	r2, #1
 8012ed6:	d029      	beq.n	8012f2c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8012ed8:	b004      	add	sp, #16
 8012eda:	bd70      	pop	{r4, r5, r6, pc}
 8012edc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012ee0:	441d      	add	r5, r3
 8012ee2:	b2ad      	uxth	r5, r5
 8012ee4:	b22e      	sxth	r6, r5
 8012ee6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8012eea:	42b3      	cmp	r3, r6
 8012eec:	daf4      	bge.n	8012ed8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012eee:	6823      	ldr	r3, [r4, #0]
 8012ef0:	4669      	mov	r1, sp
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ef6:	4798      	blx	r3
 8012ef8:	b940      	cbnz	r0, 8012f0c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8012efa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d004      	beq.n	8012f0c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8012f02:	3301      	adds	r3, #1
 8012f04:	105b      	asrs	r3, r3, #1
 8012f06:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012f0a:	e7f0      	b.n	8012eee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8012f0c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012f10:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012f14:	4413      	add	r3, r2
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	441a      	add	r2, r3
 8012f1a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012f1e:	b212      	sxth	r2, r2
 8012f20:	4296      	cmp	r6, r2
 8012f22:	dae0      	bge.n	8012ee6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8012f24:	1aeb      	subs	r3, r5, r3
 8012f26:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012f2a:	e7dc      	b.n	8012ee6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8012f2c:	f8bd 5000 	ldrh.w	r5, [sp]
 8012f30:	441d      	add	r5, r3
 8012f32:	b2ad      	uxth	r5, r5
 8012f34:	b22e      	sxth	r6, r5
 8012f36:	f9bd 3000 	ldrsh.w	r3, [sp]
 8012f3a:	42b3      	cmp	r3, r6
 8012f3c:	dacc      	bge.n	8012ed8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012f3e:	6823      	ldr	r3, [r4, #0]
 8012f40:	4669      	mov	r1, sp
 8012f42:	4620      	mov	r0, r4
 8012f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f46:	4798      	blx	r3
 8012f48:	b940      	cbnz	r0, 8012f5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8012f4a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8012f4e:	2b01      	cmp	r3, #1
 8012f50:	d004      	beq.n	8012f5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8012f52:	3301      	adds	r3, #1
 8012f54:	105b      	asrs	r3, r3, #1
 8012f56:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012f5a:	e7f0      	b.n	8012f3e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8012f5c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012f60:	f8bd 3000 	ldrh.w	r3, [sp]
 8012f64:	4413      	add	r3, r2
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	441a      	add	r2, r3
 8012f6a:	f8ad 3000 	strh.w	r3, [sp]
 8012f6e:	b212      	sxth	r2, r2
 8012f70:	4296      	cmp	r6, r2
 8012f72:	dae0      	bge.n	8012f36 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8012f74:	1aeb      	subs	r3, r5, r3
 8012f76:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012f7a:	e7dc      	b.n	8012f36 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8012f7c:	24028e24 	.word	0x24028e24

08012f80 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8012f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f82:	6803      	ldr	r3, [r0, #0]
 8012f84:	4604      	mov	r4, r0
 8012f86:	4601      	mov	r1, r0
 8012f88:	4668      	mov	r0, sp
 8012f8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f8c:	4798      	blx	r3
 8012f8e:	2100      	movs	r1, #0
 8012f90:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8012f94:	4668      	mov	r0, sp
 8012f96:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012f9a:	9102      	str	r1, [sp, #8]
 8012f9c:	a902      	add	r1, sp, #8
 8012f9e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8012fa2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012fa6:	f7fd fc7f 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 8012faa:	6823      	ldr	r3, [r4, #0]
 8012fac:	4669      	mov	r1, sp
 8012fae:	4620      	mov	r0, r4
 8012fb0:	691b      	ldr	r3, [r3, #16]
 8012fb2:	4798      	blx	r3
 8012fb4:	b004      	add	sp, #16
 8012fb6:	bd10      	pop	{r4, pc}

08012fb8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8012fb8:	2101      	movs	r1, #1
 8012fba:	2200      	movs	r2, #0
 8012fbc:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8012fc0:	490a      	ldr	r1, [pc, #40]	@ (8012fec <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8012fc2:	8082      	strh	r2, [r0, #4]
 8012fc4:	6001      	str	r1, [r0, #0]
 8012fc6:	21ff      	movs	r1, #255	@ 0xff
 8012fc8:	80c2      	strh	r2, [r0, #6]
 8012fca:	8102      	strh	r2, [r0, #8]
 8012fcc:	8142      	strh	r2, [r0, #10]
 8012fce:	8182      	strh	r2, [r0, #12]
 8012fd0:	81c2      	strh	r2, [r0, #14]
 8012fd2:	8202      	strh	r2, [r0, #16]
 8012fd4:	8242      	strh	r2, [r0, #18]
 8012fd6:	61c2      	str	r2, [r0, #28]
 8012fd8:	8402      	strh	r2, [r0, #32]
 8012fda:	8442      	strh	r2, [r0, #34]	@ 0x22
 8012fdc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8012fe0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8012fe4:	6282      	str	r2, [r0, #40]	@ 0x28
 8012fe6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012fea:	4770      	bx	lr
 8012fec:	08029370 	.word	0x08029370

08012ff0 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8012ff0:	f101 0364 	add.w	r3, r1, #100	@ 0x64
 8012ff4:	4602      	mov	r2, r0
 8012ff6:	cb03      	ldmia	r3!, {r0, r1}
 8012ff8:	6010      	str	r0, [r2, #0]
 8012ffa:	4610      	mov	r0, r2
 8012ffc:	6051      	str	r1, [r2, #4]
 8012ffe:	4770      	bx	lr

08013000 <_ZN8touchgfx4LineD1Ev>:
 8013000:	4770      	bx	lr

08013002 <_ZN8touchgfx4LineD0Ev>:
 8013002:	b510      	push	{r4, lr}
 8013004:	4604      	mov	r4, r0
 8013006:	2170      	movs	r1, #112	@ 0x70
 8013008:	f011 fe11 	bl	8024c2e <_ZdlPvj>
 801300c:	4620      	mov	r0, r4
 801300e:	bd10      	pop	{r4, pc}

08013010 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8013010:	b507      	push	{r0, r1, r2, lr}
 8013012:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8013016:	ab01      	add	r3, sp, #4
 8013018:	6809      	ldr	r1, [r1, #0]
 801301a:	6800      	ldr	r0, [r0, #0]
 801301c:	f005 f8a4 	bl	8018168 <_ZN8touchgfx6muldivElllRl>
 8013020:	b003      	add	sp, #12
 8013022:	f85d fb04 	ldr.w	pc, [sp], #4

08013026 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8013026:	6800      	ldr	r0, [r0, #0]
 8013028:	2800      	cmp	r0, #0
 801302a:	bfb9      	ittee	lt
 801302c:	2320      	movlt	r3, #32
 801302e:	fb90 f0f3 	sdivlt	r0, r0, r3
 8013032:	301f      	addge	r0, #31
 8013034:	1140      	asrge	r0, r0, #5
 8013036:	4770      	bx	lr

08013038 <_ZNK8touchgfx4Line17invalidateContentEv>:
 8013038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801303c:	f890 3026 	ldrb.w	r3, [r0, #38]	@ 0x26
 8013040:	b089      	sub	sp, #36	@ 0x24
 8013042:	4604      	mov	r4, r0
 8013044:	b353      	cbz	r3, 801309c <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 8013046:	6803      	ldr	r3, [r0, #0]
 8013048:	4601      	mov	r1, r0
 801304a:	a802      	add	r0, sp, #8
 801304c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801304e:	4798      	blx	r3
 8013050:	2220      	movs	r2, #32
 8013052:	f8d4 a02c 	ldr.w	sl, [r4, #44]	@ 0x2c
 8013056:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013058:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801305a:	f8d4 b000 	ldr.w	fp, [r4]
 801305e:	fb9a f0f2 	sdiv	r0, sl, r2
 8013062:	fb91 f5f2 	sdiv	r5, r1, r2
 8013066:	fb93 f6f2 	sdiv	r6, r3, r2
 801306a:	1b40      	subs	r0, r0, r5
 801306c:	0076      	lsls	r6, r6, #1
 801306e:	2800      	cmp	r0, #0
 8013070:	bfb8      	it	lt
 8013072:	4240      	neglt	r0, r0
 8013074:	4286      	cmp	r6, r0
 8013076:	dc0c      	bgt.n	8013092 <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 8013078:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801307a:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38
 801307e:	fb95 f0f2 	sdiv	r0, r5, r2
 8013082:	fb98 f7f2 	sdiv	r7, r8, r2
 8013086:	1bc0      	subs	r0, r0, r7
 8013088:	2800      	cmp	r0, #0
 801308a:	bfb8      	it	lt
 801308c:	4240      	neglt	r0, r0
 801308e:	4286      	cmp	r6, r0
 8013090:	dd07      	ble.n	80130a2 <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 8013092:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013096:	a902      	add	r1, sp, #8
 8013098:	4620      	mov	r0, r4
 801309a:	4798      	blx	r3
 801309c:	b009      	add	sp, #36	@ 0x24
 801309e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130a2:	eb01 060a 	add.w	r6, r1, sl
 80130a6:	2002      	movs	r0, #2
 80130a8:	eb08 0705 	add.w	r7, r8, r5
 80130ac:	3301      	adds	r3, #1
 80130ae:	f10d 0920 	add.w	r9, sp, #32
 80130b2:	9101      	str	r1, [sp, #4]
 80130b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80130b8:	fb96 f6f0 	sdiv	r6, r6, r0
 80130bc:	fb97 f7f0 	sdiv	r7, r7, r0
 80130c0:	4103      	asrs	r3, r0
 80130c2:	b236      	sxth	r6, r6
 80130c4:	b23f      	sxth	r7, r7
 80130c6:	f849 3d08 	str.w	r3, [r9, #-8]!
 80130ca:	4648      	mov	r0, r9
 80130cc:	fb96 f6f2 	sdiv	r6, r6, r2
 80130d0:	fb97 f7f2 	sdiv	r7, r7, r2
 80130d4:	f7ff ffa7 	bl	8013026 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80130d8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80130dc:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 80130e0:	fa1f fe87 	uxth.w	lr, r7
 80130e4:	9901      	ldr	r1, [sp, #4]
 80130e6:	fa1f fc86 	uxth.w	ip, r6
 80130ea:	4293      	cmp	r3, r2
 80130ec:	b280      	uxth	r0, r0
 80130ee:	eba1 0a0a 	sub.w	sl, r1, sl
 80130f2:	da54      	bge.n	801319e <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 80130f4:	ebac 0100 	sub.w	r1, ip, r0
 80130f8:	f1ba 0f00 	cmp.w	sl, #0
 80130fc:	4460      	add	r0, ip
 80130fe:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8013102:	b289      	uxth	r1, r1
 8013104:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 8013108:	b280      	uxth	r0, r0
 801310a:	b20e      	sxth	r6, r1
 801310c:	da29      	bge.n	8013162 <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 801310e:	eba8 0505 	sub.w	r5, r8, r5
 8013112:	2d00      	cmp	r5, #0
 8013114:	da2a      	bge.n	801316c <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8013116:	fa1f f88a 	uxth.w	r8, sl
 801311a:	f8ad a010 	strh.w	sl, [sp, #16]
 801311e:	fa1f f58c 	uxth.w	r5, ip
 8013122:	f8ad c012 	strh.w	ip, [sp, #18]
 8013126:	eba0 0008 	sub.w	r0, r0, r8
 801312a:	4443      	add	r3, r8
 801312c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013130:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013134:	1a59      	subs	r1, r3, r1
 8013136:	ebae 0005 	sub.w	r0, lr, r5
 801313a:	f8ad 701a 	strh.w	r7, [sp, #26]
 801313e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013142:	f8ad 0016 	strh.w	r0, [sp, #22]
 8013146:	442a      	add	r2, r5
 8013148:	eba2 0e0e 	sub.w	lr, r2, lr
 801314c:	f8ad e01e 	strh.w	lr, [sp, #30]
 8013150:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013154:	a904      	add	r1, sp, #16
 8013156:	4620      	mov	r0, r4
 8013158:	4798      	blx	r3
 801315a:	6823      	ldr	r3, [r4, #0]
 801315c:	4649      	mov	r1, r9
 801315e:	691b      	ldr	r3, [r3, #16]
 8013160:	e79a      	b.n	8013098 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 8013162:	d003      	beq.n	801316c <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8013164:	eba8 0505 	sub.w	r5, r8, r5
 8013168:	2d00      	cmp	r5, #0
 801316a:	dcd4      	bgt.n	8013116 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 801316c:	fa1f f88a 	uxth.w	r8, sl
 8013170:	f8ad 6010 	strh.w	r6, [sp, #16]
 8013174:	fa1f f58c 	uxth.w	r5, ip
 8013178:	f8ad c012 	strh.w	ip, [sp, #18]
 801317c:	4443      	add	r3, r8
 801317e:	eba0 0008 	sub.w	r0, r0, r8
 8013182:	f8ad a018 	strh.w	sl, [sp, #24]
 8013186:	1a59      	subs	r1, r3, r1
 8013188:	ebae 0305 	sub.w	r3, lr, r5
 801318c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8013190:	f8ad 1014 	strh.w	r1, [sp, #20]
 8013194:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013198:	f8ad 001c 	strh.w	r0, [sp, #28]
 801319c:	e7d3      	b.n	8013146 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 801319e:	ebae 0100 	sub.w	r1, lr, r0
 80131a2:	f1ba 0f00 	cmp.w	sl, #0
 80131a6:	4470      	add	r0, lr
 80131a8:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 80131ac:	b289      	uxth	r1, r1
 80131ae:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 80131b2:	b280      	uxth	r0, r0
 80131b4:	b20f      	sxth	r7, r1
 80131b6:	da20      	bge.n	80131fa <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 80131b8:	eba8 0505 	sub.w	r5, r8, r5
 80131bc:	2d00      	cmp	r5, #0
 80131be:	da21      	bge.n	8013204 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 80131c0:	fa1f f88e 	uxth.w	r8, lr
 80131c4:	f8ad e010 	strh.w	lr, [sp, #16]
 80131c8:	fa1f f58a 	uxth.w	r5, sl
 80131cc:	f8ad a012 	strh.w	sl, [sp, #18]
 80131d0:	4443      	add	r3, r8
 80131d2:	ebac 0e08 	sub.w	lr, ip, r8
 80131d6:	442a      	add	r2, r5
 80131d8:	1b40      	subs	r0, r0, r5
 80131da:	eba3 0c0c 	sub.w	ip, r3, ip
 80131de:	f8ad e014 	strh.w	lr, [sp, #20]
 80131e2:	1a51      	subs	r1, r2, r1
 80131e4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80131e8:	f8ad 6018 	strh.w	r6, [sp, #24]
 80131ec:	f8ad 701a 	strh.w	r7, [sp, #26]
 80131f0:	f8ad c01c 	strh.w	ip, [sp, #28]
 80131f4:	f8ad 101e 	strh.w	r1, [sp, #30]
 80131f8:	e7aa      	b.n	8013150 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 80131fa:	d003      	beq.n	8013204 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 80131fc:	eba8 0505 	sub.w	r5, r8, r5
 8013200:	2d00      	cmp	r5, #0
 8013202:	dcdd      	bgt.n	80131c0 <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 8013204:	fa1f f58e 	uxth.w	r5, lr
 8013208:	f8ad 7012 	strh.w	r7, [sp, #18]
 801320c:	fa1f f88a 	uxth.w	r8, sl
 8013210:	f8ad e010 	strh.w	lr, [sp, #16]
 8013214:	442b      	add	r3, r5
 8013216:	ebac 0705 	sub.w	r7, ip, r5
 801321a:	4442      	add	r2, r8
 801321c:	eba0 0008 	sub.w	r0, r0, r8
 8013220:	eba3 0c0c 	sub.w	ip, r3, ip
 8013224:	f8ad 7014 	strh.w	r7, [sp, #20]
 8013228:	1a51      	subs	r1, r2, r1
 801322a:	f8ad 6018 	strh.w	r6, [sp, #24]
 801322e:	f8ad a01a 	strh.w	sl, [sp, #26]
 8013232:	f8ad 1016 	strh.w	r1, [sp, #22]
 8013236:	f8ad c01c 	strh.w	ip, [sp, #28]
 801323a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801323e:	e787      	b.n	8013150 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

08013240 <_ZN8touchgfx7CWRUtil4sineEi>:
 8013240:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8013244:	fb90 f2f3 	sdiv	r2, r0, r3
 8013248:	fb02 0013 	mls	r0, r2, r3, r0
 801324c:	2800      	cmp	r0, #0
 801324e:	bfb8      	it	lt
 8013250:	18c0      	addlt	r0, r0, r3
 8013252:	4b0a      	ldr	r3, [pc, #40]	@ (801327c <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8013254:	285a      	cmp	r0, #90	@ 0x5a
 8013256:	dc02      	bgt.n	801325e <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8013258:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801325c:	4770      	bx	lr
 801325e:	28b4      	cmp	r0, #180	@ 0xb4
 8013260:	dc02      	bgt.n	8013268 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8013262:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 8013266:	e7f7      	b.n	8013258 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8013268:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 801326c:	bfd4      	ite	le
 801326e:	38b4      	suble	r0, #180	@ 0xb4
 8013270:	f5c0 70b4 	rsbgt	r0, r0, #360	@ 0x168
 8013274:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013278:	4240      	negs	r0, r0
 801327a:	4770      	bx	lr
 801327c:	0802943c 	.word	0x0802943c

08013280 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8013280:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013284:	f04f 0300 	mov.w	r3, #0
 8013288:	bf2c      	ite	cs
 801328a:	f04f 4280 	movcs.w	r2, #1073741824	@ 0x40000000
 801328e:	f44f 4280 	movcc.w	r2, #16384	@ 0x4000
 8013292:	1899      	adds	r1, r3, r2
 8013294:	4288      	cmp	r0, r1
 8013296:	bf24      	itt	cs
 8013298:	1853      	addcs	r3, r2, r1
 801329a:	1a40      	subcs	r0, r0, r1
 801329c:	0892      	lsrs	r2, r2, #2
 801329e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80132a2:	d1f6      	bne.n	8013292 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80132a4:	4618      	mov	r0, r3
 80132a6:	4770      	bx	lr

080132a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80132a8:	b510      	push	{r4, lr}
 80132aa:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80132ae:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80132b2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80132b6:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80132ba:	139b      	asrs	r3, r3, #14
 80132bc:	13a4      	asrs	r4, r4, #14
 80132be:	429c      	cmp	r4, r3
 80132c0:	bfb8      	it	lt
 80132c2:	461c      	movlt	r4, r3
 80132c4:	2c01      	cmp	r4, #1
 80132c6:	dd07      	ble.n	80132d8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 80132c8:	fb91 f1f4 	sdiv	r1, r1, r4
 80132cc:	fb90 f0f4 	sdiv	r0, r0, r4
 80132d0:	f7ff ffea 	bl	80132a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80132d4:	4360      	muls	r0, r4
 80132d6:	bd10      	pop	{r4, pc}
 80132d8:	4340      	muls	r0, r0
 80132da:	fb01 0001 	mla	r0, r1, r1, r0
 80132de:	f7ff ffcf 	bl	8013280 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80132e2:	e7f8      	b.n	80132d6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

080132e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80132e4:	2800      	cmp	r0, #0
 80132e6:	b508      	push	{r3, lr}
 80132e8:	da05      	bge.n	80132f6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80132ea:	4240      	negs	r0, r0
 80132ec:	f7ff fffa 	bl	80132e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80132f0:	4240      	negs	r0, r0
 80132f2:	b240      	sxtb	r0, r0
 80132f4:	bd08      	pop	{r3, pc}
 80132f6:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 80132fa:	dc11      	bgt.n	8013320 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80132fc:	f5b0 7f35 	cmp.w	r0, #724	@ 0x2d4
 8013300:	dd09      	ble.n	8013316 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8013302:	4340      	muls	r0, r0
 8013304:	f5c0 1080 	rsb	r0, r0, #1048576	@ 0x100000
 8013308:	f7ff ffba 	bl	8013280 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801330c:	f7ff ffea 	bl	80132e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8013310:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8013314:	e7ed      	b.n	80132f2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8013316:	3003      	adds	r0, #3
 8013318:	4b02      	ldr	r3, [pc, #8]	@ (8013324 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801331a:	10c0      	asrs	r0, r0, #3
 801331c:	5618      	ldrsb	r0, [r3, r0]
 801331e:	e7e9      	b.n	80132f4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8013320:	2000      	movs	r0, #0
 8013322:	e7e7      	b.n	80132f4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8013324:	080293e0 	.word	0x080293e0

08013328 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8013328:	4281      	cmp	r1, r0
 801332a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801332c:	460c      	mov	r4, r1
 801332e:	4615      	mov	r5, r2
 8013330:	dd07      	ble.n	8013342 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 8013332:	4601      	mov	r1, r0
 8013334:	4620      	mov	r0, r4
 8013336:	f7ff fff7 	bl	8013328 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801333a:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 801333e:	b003      	add	sp, #12
 8013340:	bd30      	pop	{r4, r5, pc}
 8013342:	f7ff ffb1 	bl	80132a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8013346:	6028      	str	r0, [r5, #0]
 8013348:	2800      	cmp	r0, #0
 801334a:	d0f8      	beq.n	801333e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 801334c:	4602      	mov	r2, r0
 801334e:	ab01      	add	r3, sp, #4
 8013350:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013354:	4620      	mov	r0, r4
 8013356:	f004 ff07 	bl	8018168 <_ZN8touchgfx6muldivElllRl>
 801335a:	f7ff ffc3 	bl	80132e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801335e:	e7ee      	b.n	801333e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

08013360 <_ZN8touchgfx4LineC1Ev>:
 8013360:	b510      	push	{r4, lr}
 8013362:	4604      	mov	r4, r0
 8013364:	f7ff fe28 	bl	8012fb8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8013368:	4b0c      	ldr	r3, [pc, #48]	@ (801339c <_ZN8touchgfx4LineC1Ev+0x3c>)
 801336a:	2220      	movs	r2, #32
 801336c:	4620      	mov	r0, r4
 801336e:	6023      	str	r3, [r4, #0]
 8013370:	2300      	movs	r3, #0
 8013372:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8013374:	2212      	movs	r2, #18
 8013376:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 801337a:	66e2      	str	r2, [r4, #108]	@ 0x6c
 801337c:	60a3      	str	r3, [r4, #8]
 801337e:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
 8013382:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8013386:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
 801338a:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
 801338e:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
 8013392:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
 8013396:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
 801339a:	bd10      	pop	{r4, pc}
 801339c:	080294fc 	.word	0x080294fc

080133a0 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80133a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80133a4:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 80133a6:	4604      	mov	r4, r0
 80133a8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80133aa:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80133ac:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80133ae:	1aff      	subs	r7, r7, r3
 80133b0:	eba5 0502 	sub.w	r5, r5, r2
 80133b4:	d142      	bne.n	801343c <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 80133b6:	b955      	cbnz	r5, 80133ce <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 80133b8:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
 80133bc:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
 80133c0:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 80133c4:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 80133c8:	b002      	add	sp, #8
 80133ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133ce:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 80133d2:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 80133d6:	4629      	mov	r1, r5
 80133d8:	2502      	movs	r5, #2
 80133da:	4642      	mov	r2, r8
 80133dc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80133de:	f004 fee2 	bl	80181a6 <_ZN8touchgfx6muldivElll>
 80133e2:	4642      	mov	r2, r8
 80133e4:	4639      	mov	r1, r7
 80133e6:	fb90 f6f5 	sdiv	r6, r0, r5
 80133ea:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80133ec:	f004 fedb 	bl	80181a6 <_ZN8touchgfx6muldivElll>
 80133f0:	f894 9040 	ldrb.w	r9, [r4, #64]	@ 0x40
 80133f4:	fb90 f5f5 	sdiv	r5, r0, r5
 80133f8:	f1b9 0f00 	cmp.w	r9, #0
 80133fc:	d067      	beq.n	80134ce <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 80133fe:	f1b9 0f02 	cmp.w	r9, #2
 8013402:	d878      	bhi.n	80134f6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8013404:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013406:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8013408:	1b93      	subs	r3, r2, r6
 801340a:	4432      	add	r2, r6
 801340c:	1b5b      	subs	r3, r3, r5
 801340e:	1b52      	subs	r2, r2, r5
 8013410:	6463      	str	r3, [r4, #68]	@ 0x44
 8013412:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013414:	6522      	str	r2, [r4, #80]	@ 0x50
 8013416:	18e9      	adds	r1, r5, r3
 8013418:	1b5b      	subs	r3, r3, r5
 801341a:	1b89      	subs	r1, r1, r6
 801341c:	1b9b      	subs	r3, r3, r6
 801341e:	6561      	str	r1, [r4, #84]	@ 0x54
 8013420:	1b81      	subs	r1, r0, r6
 8013422:	4430      	add	r0, r6
 8013424:	4429      	add	r1, r5
 8013426:	4428      	add	r0, r5
 8013428:	64a1      	str	r1, [r4, #72]	@ 0x48
 801342a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801342c:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801342e:	186f      	adds	r7, r5, r1
 8013430:	1b49      	subs	r1, r1, r5
 8013432:	4437      	add	r7, r6
 8013434:	4431      	add	r1, r6
 8013436:	65a7      	str	r7, [r4, #88]	@ 0x58
 8013438:	65e1      	str	r1, [r4, #92]	@ 0x5c
 801343a:	e05b      	b.n	80134f4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 801343c:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8013440:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8013444:	2d00      	cmp	r5, #0
 8013446:	d0c6      	beq.n	80133d6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8013448:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801344c:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8013450:	fb93 f2f8 	sdiv	r2, r3, r8
 8013454:	fb08 3312 	mls	r3, r8, r2, r3
 8013458:	b353      	cbz	r3, 80134b0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 801345a:	fb98 f2f3 	sdiv	r2, r8, r3
 801345e:	fb03 8812 	mls	r8, r3, r2, r8
 8013462:	f1b8 0f00 	cmp.w	r8, #0
 8013466:	d1f3      	bne.n	8013450 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8013468:	2b01      	cmp	r3, #1
 801346a:	f24b 5104 	movw	r1, #46340	@ 0xb504
 801346e:	bf1c      	itt	ne
 8013470:	fb97 f7f3 	sdivne	r7, r7, r3
 8013474:	fb95 f5f3 	sdivne	r5, r5, r3
 8013478:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 801347c:	4608      	mov	r0, r1
 801347e:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8013482:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8013486:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 801348a:	428b      	cmp	r3, r1
 801348c:	dd01      	ble.n	8013492 <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 801348e:	428a      	cmp	r2, r1
 8013490:	dc10      	bgt.n	80134b4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 8013492:	fb90 f3f3 	sdiv	r3, r0, r3
 8013496:	fb90 f2f2 	sdiv	r2, r0, r2
 801349a:	4293      	cmp	r3, r2
 801349c:	bfa8      	it	ge
 801349e:	4613      	movge	r3, r2
 80134a0:	435f      	muls	r7, r3
 80134a2:	435d      	muls	r5, r3
 80134a4:	4629      	mov	r1, r5
 80134a6:	4638      	mov	r0, r7
 80134a8:	f7ff fefe 	bl	80132a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80134ac:	4680      	mov	r8, r0
 80134ae:	e792      	b.n	80133d6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 80134b0:	4643      	mov	r3, r8
 80134b2:	e7d9      	b.n	8013468 <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 80134b4:	fb93 f3f1 	sdiv	r3, r3, r1
 80134b8:	fb92 f2f1 	sdiv	r2, r2, r1
 80134bc:	4293      	cmp	r3, r2
 80134be:	bfcc      	ite	gt
 80134c0:	3301      	addgt	r3, #1
 80134c2:	1c53      	addle	r3, r2, #1
 80134c4:	fb97 f7f3 	sdiv	r7, r7, r3
 80134c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80134cc:	e7ea      	b.n	80134a4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 80134ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80134d0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80134d2:	1b93      	subs	r3, r2, r6
 80134d4:	4432      	add	r2, r6
 80134d6:	6463      	str	r3, [r4, #68]	@ 0x44
 80134d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134da:	6522      	str	r2, [r4, #80]	@ 0x50
 80134dc:	18e9      	adds	r1, r5, r3
 80134de:	1b5b      	subs	r3, r3, r5
 80134e0:	6561      	str	r1, [r4, #84]	@ 0x54
 80134e2:	1b81      	subs	r1, r0, r6
 80134e4:	4430      	add	r0, r6
 80134e6:	64a1      	str	r1, [r4, #72]	@ 0x48
 80134e8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80134ea:	64e0      	str	r0, [r4, #76]	@ 0x4c
 80134ec:	186f      	adds	r7, r5, r1
 80134ee:	1b49      	subs	r1, r1, r5
 80134f0:	65a7      	str	r7, [r4, #88]	@ 0x58
 80134f2:	65e1      	str	r1, [r4, #92]	@ 0x5c
 80134f4:	6623      	str	r3, [r4, #96]	@ 0x60
 80134f6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80134f8:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 80134fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80134fe:	f104 0c54 	add.w	ip, r4, #84	@ 0x54
 8013502:	9200      	str	r2, [sp, #0]
 8013504:	9301      	str	r3, [sp, #4]
 8013506:	680f      	ldr	r7, [r1, #0]
 8013508:	3104      	adds	r1, #4
 801350a:	9800      	ldr	r0, [sp, #0]
 801350c:	42ba      	cmp	r2, r7
 801350e:	bfa8      	it	ge
 8013510:	463a      	movge	r2, r7
 8013512:	4287      	cmp	r7, r0
 8013514:	9801      	ldr	r0, [sp, #4]
 8013516:	bfc8      	it	gt
 8013518:	9700      	strgt	r7, [sp, #0]
 801351a:	68cf      	ldr	r7, [r1, #12]
 801351c:	42bb      	cmp	r3, r7
 801351e:	bfa8      	it	ge
 8013520:	463b      	movge	r3, r7
 8013522:	4287      	cmp	r7, r0
 8013524:	bfc8      	it	gt
 8013526:	9701      	strgt	r7, [sp, #4]
 8013528:	458c      	cmp	ip, r1
 801352a:	d1ec      	bne.n	8013506 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801352c:	2720      	movs	r7, #32
 801352e:	4668      	mov	r0, sp
 8013530:	fb92 f8f7 	sdiv	r8, r2, r7
 8013534:	fb93 f7f7 	sdiv	r7, r3, r7
 8013538:	f7ff fd75 	bl	8013026 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801353c:	4682      	mov	sl, r0
 801353e:	a801      	add	r0, sp, #4
 8013540:	f7ff fd71 	bl	8013026 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8013544:	ebaa 0208 	sub.w	r2, sl, r8
 8013548:	1bc0      	subs	r0, r0, r7
 801354a:	f1b9 0f01 	cmp.w	r9, #1
 801354e:	f8a4 8064 	strh.w	r8, [r4, #100]	@ 0x64
 8013552:	f8a4 7066 	strh.w	r7, [r4, #102]	@ 0x66
 8013556:	f8a4 2068 	strh.w	r2, [r4, #104]	@ 0x68
 801355a:	f8a4 006a 	strh.w	r0, [r4, #106]	@ 0x6a
 801355e:	f47f af33 	bne.w	80133c8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 8013562:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013566:	1b83      	subs	r3, r0, r6
 8013568:	6463      	str	r3, [r4, #68]	@ 0x44
 801356a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801356c:	18ea      	adds	r2, r5, r3
 801356e:	6562      	str	r2, [r4, #84]	@ 0x54
 8013570:	1b8a      	subs	r2, r1, r6
 8013572:	4431      	add	r1, r6
 8013574:	4406      	add	r6, r0
 8013576:	64a2      	str	r2, [r4, #72]	@ 0x48
 8013578:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801357a:	64e1      	str	r1, [r4, #76]	@ 0x4c
 801357c:	18af      	adds	r7, r5, r2
 801357e:	1b52      	subs	r2, r2, r5
 8013580:	1b5d      	subs	r5, r3, r5
 8013582:	6526      	str	r6, [r4, #80]	@ 0x50
 8013584:	65a7      	str	r7, [r4, #88]	@ 0x58
 8013586:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8013588:	6625      	str	r5, [r4, #96]	@ 0x60
 801358a:	e71d      	b.n	80133c8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

0801358c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801358c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801358e:	428b      	cmp	r3, r1
 8013590:	d102      	bne.n	8013598 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8013592:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013594:	4293      	cmp	r3, r2
 8013596:	d003      	beq.n	80135a0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8013598:	e9c0 120b 	strd	r1, r2, [r0, #44]	@ 0x2c
 801359c:	f7ff bf00 	b.w	80133a0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80135a0:	4770      	bx	lr

080135a2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 80135a2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80135a4:	428b      	cmp	r3, r1
 80135a6:	d102      	bne.n	80135ae <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 80135a8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80135aa:	4293      	cmp	r3, r2
 80135ac:	d003      	beq.n	80135b6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 80135ae:	e9c0 120d 	strd	r1, r2, [r0, #52]	@ 0x34
 80135b2:	f7ff bef5 	b.w	80133a0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80135b6:	4770      	bx	lr

080135b8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 80135b8:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
 80135bc:	f7ff bef0 	b.w	80133a0 <_ZN8touchgfx4Line17updateCachedShapeEv>

080135c0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 80135c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135c4:	b0a4      	sub	sp, #144	@ 0x90
 80135c6:	4604      	mov	r4, r0
 80135c8:	6a85      	ldr	r5, [r0, #40]	@ 0x28
 80135ca:	460e      	mov	r6, r1
 80135cc:	4601      	mov	r1, r0
 80135ce:	a805      	add	r0, sp, #20
 80135d0:	f004 f996 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80135d4:	6823      	ldr	r3, [r4, #0]
 80135d6:	4620      	mov	r0, r4
 80135d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80135da:	4798      	blx	r3
 80135dc:	4633      	mov	r3, r6
 80135de:	9000      	str	r0, [sp, #0]
 80135e0:	aa05      	add	r2, sp, #20
 80135e2:	4629      	mov	r1, r5
 80135e4:	a807      	add	r0, sp, #28
 80135e6:	f010 fec1 	bl	802436c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80135ea:	2300      	movs	r3, #0
 80135ec:	9303      	str	r3, [sp, #12]
 80135ee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80135f2:	2b01      	cmp	r3, #1
 80135f4:	d17c      	bne.n	80136f0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x130>
 80135f6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80135f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80135fa:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80135fc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80135fe:	1ac0      	subs	r0, r0, r3
 8013600:	eba1 0102 	sub.w	r1, r1, r2
 8013604:	d437      	bmi.n	8013676 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb6>
 8013606:	2900      	cmp	r1, #0
 8013608:	aa03      	add	r2, sp, #12
 801360a:	db2e      	blt.n	801366a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xaa>
 801360c:	f7ff fe8c 	bl	8013328 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013610:	f100 065a 	add.w	r6, r0, #90	@ 0x5a
 8013614:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013616:	a807      	add	r0, sp, #28
 8013618:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801361a:	f010 fff3 	bl	8024604 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801361e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8013620:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013622:	a807      	add	r0, sp, #28
 8013624:	f011 f83b 	bl	802469e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013628:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 801362a:	2db3      	cmp	r5, #179	@ 0xb3
 801362c:	dc33      	bgt.n	8013696 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd6>
 801362e:	eba6 0805 	sub.w	r8, r6, r5
 8013632:	4640      	mov	r0, r8
 8013634:	f7ff fe04 	bl	8013240 <_ZN8touchgfx7CWRUtil4sineEi>
 8013638:	a904      	add	r1, sp, #16
 801363a:	9004      	str	r0, [sp, #16]
 801363c:	a803      	add	r0, sp, #12
 801363e:	f7ff fce7 	bl	8013010 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013642:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013644:	1847      	adds	r7, r0, r1
 8013646:	f1c8 005a 	rsb	r0, r8, #90	@ 0x5a
 801364a:	f7ff fdf9 	bl	8013240 <_ZN8touchgfx7CWRUtil4sineEi>
 801364e:	a905      	add	r1, sp, #20
 8013650:	9005      	str	r0, [sp, #20]
 8013652:	a803      	add	r0, sp, #12
 8013654:	f7ff fcdc 	bl	8013010 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013658:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801365a:	4639      	mov	r1, r7
 801365c:	1a12      	subs	r2, r2, r0
 801365e:	a807      	add	r0, sp, #28
 8013660:	f011 f81d 	bl	802469e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013664:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8013666:	441d      	add	r5, r3
 8013668:	e7df      	b.n	801362a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x6a>
 801366a:	4249      	negs	r1, r1
 801366c:	f7ff fe5c 	bl	8013328 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013670:	f1c0 065a 	rsb	r6, r0, #90	@ 0x5a
 8013674:	e7ce      	b.n	8013614 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x54>
 8013676:	2900      	cmp	r1, #0
 8013678:	f1c0 0000 	rsb	r0, r0, #0
 801367c:	aa03      	add	r2, sp, #12
 801367e:	db04      	blt.n	801368a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xca>
 8013680:	f7ff fe52 	bl	8013328 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013684:	f5c0 7687 	rsb	r6, r0, #270	@ 0x10e
 8013688:	e7c4      	b.n	8013614 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x54>
 801368a:	4249      	negs	r1, r1
 801368c:	f7ff fe4c 	bl	8013328 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013690:	f500 7687 	add.w	r6, r0, #270	@ 0x10e
 8013694:	e7be      	b.n	8013614 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x54>
 8013696:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8013698:	a807      	add	r0, sp, #28
 801369a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 801369c:	f010 ffff 	bl	802469e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80136a0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80136a2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80136a4:	a807      	add	r0, sp, #28
 80136a6:	f010 fffa 	bl	802469e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80136aa:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80136ac:	f1c5 05b4 	rsb	r5, r5, #180	@ 0xb4
 80136b0:	2d00      	cmp	r5, #0
 80136b2:	dd31      	ble.n	8013718 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x158>
 80136b4:	eb05 0806 	add.w	r8, r5, r6
 80136b8:	4640      	mov	r0, r8
 80136ba:	f7ff fdc1 	bl	8013240 <_ZN8touchgfx7CWRUtil4sineEi>
 80136be:	a904      	add	r1, sp, #16
 80136c0:	9004      	str	r0, [sp, #16]
 80136c2:	a803      	add	r0, sp, #12
 80136c4:	f7ff fca4 	bl	8013010 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80136c8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80136ca:	1847      	adds	r7, r0, r1
 80136cc:	f1c8 005a 	rsb	r0, r8, #90	@ 0x5a
 80136d0:	f7ff fdb6 	bl	8013240 <_ZN8touchgfx7CWRUtil4sineEi>
 80136d4:	a905      	add	r1, sp, #20
 80136d6:	9005      	str	r0, [sp, #20]
 80136d8:	a803      	add	r0, sp, #12
 80136da:	f7ff fc99 	bl	8013010 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80136de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80136e0:	4639      	mov	r1, r7
 80136e2:	1a12      	subs	r2, r2, r0
 80136e4:	a807      	add	r0, sp, #28
 80136e6:	f010 ffda 	bl	802469e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80136ea:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80136ec:	1aed      	subs	r5, r5, r3
 80136ee:	e7df      	b.n	80136b0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xf0>
 80136f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80136f2:	a807      	add	r0, sp, #28
 80136f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80136f6:	f010 ff85 	bl	8024604 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80136fa:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80136fc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80136fe:	a807      	add	r0, sp, #28
 8013700:	f010 ffcd 	bl	802469e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013704:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8013706:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8013708:	a807      	add	r0, sp, #28
 801370a:	f010 ffc8 	bl	802469e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801370e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8013710:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8013712:	a807      	add	r0, sp, #28
 8013714:	f010 ffc3 	bl	802469e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013718:	21ff      	movs	r1, #255	@ 0xff
 801371a:	a807      	add	r0, sp, #28
 801371c:	f010 feba 	bl	8024494 <_ZN8touchgfx6Canvas6renderEh>
 8013720:	4b04      	ldr	r3, [pc, #16]	@ (8013734 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x174>)
 8013722:	4604      	mov	r4, r0
 8013724:	a80c      	add	r0, sp, #48	@ 0x30
 8013726:	9307      	str	r3, [sp, #28]
 8013728:	f000 fc56 	bl	8013fd8 <_ZN8touchgfx7OutlineD1Ev>
 801372c:	4620      	mov	r0, r4
 801372e:	b024      	add	sp, #144	@ 0x90
 8013730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013734:	08029a04 	.word	0x08029a04

08013738 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8013738:	2000      	movs	r0, #0
 801373a:	4770      	bx	lr

0801373c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801373c:	4b07      	ldr	r3, [pc, #28]	@ (801375c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801373e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013740:	881b      	ldrh	r3, [r3, #0]
 8013742:	4293      	cmp	r3, r2
 8013744:	bf81      	itttt	hi
 8013746:	4b06      	ldrhi	r3, [pc, #24]	@ (8013760 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013748:	681b      	ldrhi	r3, [r3, #0]
 801374a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801374e:	7858      	ldrbhi	r0, [r3, #1]
 8013750:	bf8c      	ite	hi
 8013752:	f000 0003 	andhi.w	r0, r0, #3
 8013756:	2000      	movls	r0, #0
 8013758:	4770      	bx	lr
 801375a:	bf00      	nop
 801375c:	24028e88 	.word	0x24028e88
 8013760:	24028e84 	.word	0x24028e84

08013764 <_ZN8touchgfx8TextAreaD1Ev>:
 8013764:	4770      	bx	lr
	...

08013768 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013768:	4b11      	ldr	r3, [pc, #68]	@ (80137b0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801376a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801376e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8013770:	4604      	mov	r4, r0
 8013772:	881b      	ldrh	r3, [r3, #0]
 8013774:	428b      	cmp	r3, r1
 8013776:	d918      	bls.n	80137aa <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013778:	6803      	ldr	r3, [r0, #0]
 801377a:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 801377c:	4b0d      	ldr	r3, [pc, #52]	@ (80137b4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801377e:	6818      	ldr	r0, [r3, #0]
 8013780:	f7f1 ffb6 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
 8013784:	6823      	ldr	r3, [r4, #0]
 8013786:	4606      	mov	r6, r0
 8013788:	4620      	mov	r0, r4
 801378a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801378c:	4798      	blx	r3
 801378e:	6823      	ldr	r3, [r4, #0]
 8013790:	4607      	mov	r7, r0
 8013792:	4620      	mov	r0, r4
 8013794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013798:	4798      	blx	r3
 801379a:	463a      	mov	r2, r7
 801379c:	4603      	mov	r3, r0
 801379e:	4631      	mov	r1, r6
 80137a0:	4620      	mov	r0, r4
 80137a2:	46ac      	mov	ip, r5
 80137a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137a8:	4760      	bx	ip
 80137aa:	2000      	movs	r0, #0
 80137ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137b0:	24028e88 	.word	0x24028e88
 80137b4:	24028e90 	.word	0x24028e90

080137b8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80137b8:	4b18      	ldr	r3, [pc, #96]	@ (801381c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80137ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80137be:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80137c0:	4604      	mov	r4, r0
 80137c2:	881b      	ldrh	r3, [r3, #0]
 80137c4:	428b      	cmp	r3, r1
 80137c6:	d926      	bls.n	8013816 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80137c8:	4b15      	ldr	r3, [pc, #84]	@ (8013820 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80137d0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80137d4:	4b13      	ldr	r3, [pc, #76]	@ (8013824 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80137d6:	7855      	ldrb	r5, [r2, #1]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80137de:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80137e2:	6833      	ldr	r3, [r6, #0]
 80137e4:	69df      	ldr	r7, [r3, #28]
 80137e6:	4b10      	ldr	r3, [pc, #64]	@ (8013828 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80137e8:	6818      	ldr	r0, [r3, #0]
 80137ea:	f7f1 ff81 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
 80137ee:	6823      	ldr	r3, [r4, #0]
 80137f0:	4680      	mov	r8, r0
 80137f2:	4620      	mov	r0, r4
 80137f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80137f6:	4798      	blx	r3
 80137f8:	6823      	ldr	r3, [r4, #0]
 80137fa:	4681      	mov	r9, r0
 80137fc:	4620      	mov	r0, r4
 80137fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013802:	4798      	blx	r3
 8013804:	464b      	mov	r3, r9
 8013806:	9000      	str	r0, [sp, #0]
 8013808:	4642      	mov	r2, r8
 801380a:	4629      	mov	r1, r5
 801380c:	4630      	mov	r0, r6
 801380e:	47b8      	blx	r7
 8013810:	b003      	add	sp, #12
 8013812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013816:	2000      	movs	r0, #0
 8013818:	e7fa      	b.n	8013810 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801381a:	bf00      	nop
 801381c:	24028e88 	.word	0x24028e88
 8013820:	24028e84 	.word	0x24028e84
 8013824:	24028e8c 	.word	0x24028e8c
 8013828:	24028e90 	.word	0x24028e90

0801382c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801382c:	b40e      	push	{r1, r2, r3}
 801382e:	4b30      	ldr	r3, [pc, #192]	@ (80138f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8013830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013834:	881a      	ldrh	r2, [r3, #0]
 8013836:	b09d      	sub	sp, #116	@ 0x74
 8013838:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 801383a:	4604      	mov	r4, r0
 801383c:	429a      	cmp	r2, r3
 801383e:	d954      	bls.n	80138ea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8013840:	aa26      	add	r2, sp, #152	@ 0x98
 8013842:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80138f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8013846:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 80138f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801384a:	9202      	str	r2, [sp, #8]
 801384c:	f8d9 2000 	ldr.w	r2, [r9]
 8013850:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013854:	f8d8 3000 	ldr.w	r3, [r8]
 8013858:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801385c:	682b      	ldr	r3, [r5, #0]
 801385e:	4628      	mov	r0, r5
 8013860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013862:	4798      	blx	r3
 8013864:	4606      	mov	r6, r0
 8013866:	b207      	sxth	r7, r0
 8013868:	a803      	add	r0, sp, #12
 801386a:	f004 fff9 	bl	8018860 <_ZN8touchgfx12TextProviderC1Ev>
 801386e:	682b      	ldr	r3, [r5, #0]
 8013870:	4628      	mov	r0, r5
 8013872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013874:	4798      	blx	r3
 8013876:	682b      	ldr	r3, [r5, #0]
 8013878:	4682      	mov	sl, r0
 801387a:	4628      	mov	r0, r5
 801387c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801387e:	4798      	blx	r3
 8013880:	4653      	mov	r3, sl
 8013882:	9000      	str	r0, [sp, #0]
 8013884:	a803      	add	r0, sp, #12
 8013886:	9a02      	ldr	r2, [sp, #8]
 8013888:	9925      	ldr	r1, [sp, #148]	@ 0x94
 801388a:	f005 f844 	bl	8018916 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801388e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013890:	f8d9 3000 	ldr.w	r3, [r9]
 8013894:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8013898:	8925      	ldrh	r5, [r4, #8]
 801389a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801389e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80138a2:	eba5 050c 	sub.w	r5, r5, ip
 80138a6:	784a      	ldrb	r2, [r1, #1]
 80138a8:	f8d8 3000 	ldr.w	r3, [r8]
 80138ac:	b22d      	sxth	r5, r5
 80138ae:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 80138b2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80138b6:	9500      	str	r5, [sp, #0]
 80138b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80138bc:	a803      	add	r0, sp, #12
 80138be:	f002 fa79 	bl	8015db4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80138c2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 80138c6:	b203      	sxth	r3, r0
 80138c8:	18b9      	adds	r1, r7, r2
 80138ca:	2900      	cmp	r1, #0
 80138cc:	dd0b      	ble.n	80138e6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80138ce:	3b01      	subs	r3, #1
 80138d0:	fb13 f302 	smulbb	r3, r3, r2
 80138d4:	fb16 3300 	smlabb	r3, r6, r0, r3
 80138d8:	b21f      	sxth	r7, r3
 80138da:	4638      	mov	r0, r7
 80138dc:	b01d      	add	sp, #116	@ 0x74
 80138de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138e2:	b003      	add	sp, #12
 80138e4:	4770      	bx	lr
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	dcf7      	bgt.n	80138da <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80138ea:	2700      	movs	r7, #0
 80138ec:	e7f5      	b.n	80138da <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80138ee:	bf00      	nop
 80138f0:	24028e88 	.word	0x24028e88
 80138f4:	24028e84 	.word	0x24028e84
 80138f8:	24028e8c 	.word	0x24028e8c

080138fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 80138fc:	4bbd      	ldr	r3, [pc, #756]	@ (8013bf4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 80138fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013902:	460c      	mov	r4, r1
 8013904:	881b      	ldrh	r3, [r3, #0]
 8013906:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8013908:	b0a9      	sub	sp, #164	@ 0xa4
 801390a:	4680      	mov	r8, r0
 801390c:	428b      	cmp	r3, r1
 801390e:	d809      	bhi.n	8013924 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8013910:	2300      	movs	r3, #0
 8013912:	f04f 32ff 	mov.w	r2, #4294967295
 8013916:	6083      	str	r3, [r0, #8]
 8013918:	e9c0 3200 	strd	r3, r2, [r0]
 801391c:	4640      	mov	r0, r8
 801391e:	b029      	add	sp, #164	@ 0xa4
 8013920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013924:	4eb4      	ldr	r6, [pc, #720]	@ (8013bf8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8013926:	6833      	ldr	r3, [r6, #0]
 8013928:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801392c:	4bb3      	ldr	r3, [pc, #716]	@ (8013bfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013934:	4bb2      	ldr	r3, [pc, #712]	@ (8013c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8013936:	6818      	ldr	r0, [r3, #0]
 8013938:	f7f1 feda 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
 801393c:	682b      	ldr	r3, [r5, #0]
 801393e:	4681      	mov	r9, r0
 8013940:	4628      	mov	r0, r5
 8013942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013944:	4798      	blx	r3
 8013946:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8013948:	b203      	sxth	r3, r0
 801394a:	4682      	mov	sl, r0
 801394c:	4407      	add	r7, r0
 801394e:	a80f      	add	r0, sp, #60	@ 0x3c
 8013950:	9304      	str	r3, [sp, #16]
 8013952:	b2bb      	uxth	r3, r7
 8013954:	9303      	str	r3, [sp, #12]
 8013956:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801395a:	2b00      	cmp	r3, #0
 801395c:	f040 80a5 	bne.w	8013aaa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8013960:	f004 ff7e 	bl	8018860 <_ZN8touchgfx12TextProviderC1Ev>
 8013964:	682b      	ldr	r3, [r5, #0]
 8013966:	4628      	mov	r0, r5
 8013968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801396a:	4798      	blx	r3
 801396c:	682b      	ldr	r3, [r5, #0]
 801396e:	4606      	mov	r6, r0
 8013970:	4628      	mov	r0, r5
 8013972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013974:	4798      	blx	r3
 8013976:	6823      	ldr	r3, [r4, #0]
 8013978:	4607      	mov	r7, r0
 801397a:	4620      	mov	r0, r4
 801397c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801397e:	4798      	blx	r3
 8013980:	6823      	ldr	r3, [r4, #0]
 8013982:	4683      	mov	fp, r0
 8013984:	4620      	mov	r0, r4
 8013986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801398a:	4798      	blx	r3
 801398c:	463b      	mov	r3, r7
 801398e:	4649      	mov	r1, r9
 8013990:	4632      	mov	r2, r6
 8013992:	2600      	movs	r6, #0
 8013994:	e9cd b000 	strd	fp, r0, [sp]
 8013998:	a80f      	add	r0, sp, #60	@ 0x3c
 801399a:	4637      	mov	r7, r6
 801399c:	f004 ffd0 	bl	8018940 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80139a0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80139a4:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8013bf8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80139a8:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80139ac:	bf0c      	ite	eq
 80139ae:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80139b2:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80139b6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80139b8:	4629      	mov	r1, r5
 80139ba:	f8db 3000 	ldr.w	r3, [fp]
 80139be:	a80f      	add	r0, sp, #60	@ 0x3c
 80139c0:	3701      	adds	r7, #1
 80139c2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80139c6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80139ca:	b2bf      	uxth	r7, r7
 80139cc:	785b      	ldrb	r3, [r3, #1]
 80139ce:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80139d2:	f001 fef6 	bl	80157c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80139d6:	9b03      	ldr	r3, [sp, #12]
 80139d8:	4286      	cmp	r6, r0
 80139da:	eba9 0903 	sub.w	r9, r9, r3
 80139de:	bfb8      	it	lt
 80139e0:	4606      	movlt	r6, r0
 80139e2:	a80f      	add	r0, sp, #60	@ 0x3c
 80139e4:	fa0f f989 	sxth.w	r9, r9
 80139e8:	b236      	sxth	r6, r6
 80139ea:	f004 ff60 	bl	80188ae <_ZN8touchgfx12TextProvider11endOfStringEv>
 80139ee:	b918      	cbnz	r0, 80139f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80139f0:	7a2b      	ldrb	r3, [r5, #8]
 80139f2:	444b      	add	r3, r9
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	dcde      	bgt.n	80139b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 80139f8:	9b03      	ldr	r3, [sp, #12]
 80139fa:	4620      	mov	r0, r4
 80139fc:	9a04      	ldr	r2, [sp, #16]
 80139fe:	fb13 f707 	smulbb	r7, r3, r7
 8013a02:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013a04:	f895 9009 	ldrb.w	r9, [r5, #9]
 8013a08:	1aff      	subs	r7, r7, r3
 8013a0a:	b2bf      	uxth	r7, r7
 8013a0c:	b23b      	sxth	r3, r7
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	bfa8      	it	ge
 8013a12:	4657      	movge	r7, sl
 8013a14:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013a18:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013a1c:	6823      	ldr	r3, [r4, #0]
 8013a1e:	444f      	add	r7, r9
 8013a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a22:	bf08      	it	eq
 8013a24:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8013a28:	fa1f f987 	uxth.w	r9, r7
 8013a2c:	bf18      	it	ne
 8013a2e:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8013a32:	4798      	blx	r3
 8013a34:	2801      	cmp	r0, #1
 8013a36:	fa0f f789 	sxth.w	r7, r9
 8013a3a:	b2b3      	uxth	r3, r6
 8013a3c:	f000 80e2 	beq.w	8013c04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8013a40:	2802      	cmp	r0, #2
 8013a42:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8013a46:	f000 80e3 	beq.w	8013c10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8013a4a:	7aea      	ldrb	r2, [r5, #11]
 8013a4c:	b236      	sxth	r6, r6
 8013a4e:	7b2d      	ldrb	r5, [r5, #12]
 8013a50:	1ab6      	subs	r6, r6, r2
 8013a52:	442a      	add	r2, r5
 8013a54:	fa1f fa86 	uxth.w	sl, r6
 8013a58:	4413      	add	r3, r2
 8013a5a:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8013a5e:	fa0f fb8a 	sxth.w	fp, sl
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	2a02      	cmp	r2, #2
 8013a66:	b21e      	sxth	r6, r3
 8013a68:	f000 80d6 	beq.w	8013c18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8013a6c:	2a03      	cmp	r2, #3
 8013a6e:	f000 80de 	beq.w	8013c2e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8013a72:	2a01      	cmp	r2, #1
 8013a74:	f040 80e6 	bne.w	8013c44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8013a78:	8925      	ldrh	r5, [r4, #8]
 8013a7a:	4633      	mov	r3, r6
 8013a7c:	463e      	mov	r6, r7
 8013a7e:	eba5 0909 	sub.w	r9, r5, r9
 8013a82:	461f      	mov	r7, r3
 8013a84:	465d      	mov	r5, fp
 8013a86:	fa0f fb89 	sxth.w	fp, r9
 8013a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8013c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8013a8c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8013a8e:	6818      	ldr	r0, [r3, #0]
 8013a90:	f7f1 fe2e 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
 8013a94:	f8a8 b000 	strh.w	fp, [r8]
 8013a98:	f8a8 5002 	strh.w	r5, [r8, #2]
 8013a9c:	f8a8 6004 	strh.w	r6, [r8, #4]
 8013aa0:	f8a8 7006 	strh.w	r7, [r8, #6]
 8013aa4:	f8c8 0008 	str.w	r0, [r8, #8]
 8013aa8:	e738      	b.n	801391c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8013aaa:	f004 fed9 	bl	8018860 <_ZN8touchgfx12TextProviderC1Ev>
 8013aae:	682b      	ldr	r3, [r5, #0]
 8013ab0:	4628      	mov	r0, r5
 8013ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ab4:	4798      	blx	r3
 8013ab6:	682b      	ldr	r3, [r5, #0]
 8013ab8:	4607      	mov	r7, r0
 8013aba:	4628      	mov	r0, r5
 8013abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013abe:	4798      	blx	r3
 8013ac0:	6823      	ldr	r3, [r4, #0]
 8013ac2:	4683      	mov	fp, r0
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013ac8:	4798      	blx	r3
 8013aca:	6822      	ldr	r2, [r4, #0]
 8013acc:	9005      	str	r0, [sp, #20]
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013ad4:	4790      	blx	r2
 8013ad6:	9b05      	ldr	r3, [sp, #20]
 8013ad8:	463a      	mov	r2, r7
 8013ada:	4649      	mov	r1, r9
 8013adc:	9001      	str	r0, [sp, #4]
 8013ade:	a80f      	add	r0, sp, #60	@ 0x3c
 8013ae0:	9300      	str	r3, [sp, #0]
 8013ae2:	465b      	mov	r3, fp
 8013ae4:	f004 ff2c 	bl	8018940 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013ae8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013aec:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8013af0:	af0f      	add	r7, sp, #60	@ 0x3c
 8013af2:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013af6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013afa:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8013afc:	bf0a      	itet	eq
 8013afe:	464a      	moveq	r2, r9
 8013b00:	461a      	movne	r2, r3
 8013b02:	4699      	moveq	r9, r3
 8013b04:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8013b08:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8013b0c:	1ad2      	subs	r2, r2, r3
 8013b0e:	6833      	ldr	r3, [r6, #0]
 8013b10:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8013b14:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013b18:	7859      	ldrb	r1, [r3, #1]
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	9707      	str	r7, [sp, #28]
 8013b1e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8013b22:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013b26:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8013b2a:	f88d 1020 	strb.w	r1, [sp, #32]
 8013b2e:	9509      	str	r5, [sp, #36]	@ 0x24
 8013b30:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013b34:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8013b38:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8013b3c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013b40:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8013b44:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013b48:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8013b4c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013b50:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8013b54:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8013b58:	b350      	cbz	r0, 8013bb0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013b5a:	682b      	ldr	r3, [r5, #0]
 8013b5c:	4628      	mov	r0, r5
 8013b5e:	695b      	ldr	r3, [r3, #20]
 8013b60:	4798      	blx	r3
 8013b62:	4607      	mov	r7, r0
 8013b64:	b320      	cbz	r0, 8013bb0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b68:	4639      	mov	r1, r7
 8013b6a:	6803      	ldr	r3, [r0, #0]
 8013b6c:	68db      	ldr	r3, [r3, #12]
 8013b6e:	4798      	blx	r3
 8013b70:	4606      	mov	r6, r0
 8013b72:	b1e8      	cbz	r0, 8013bb0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013b74:	7b43      	ldrb	r3, [r0, #13]
 8013b76:	7a82      	ldrb	r2, [r0, #10]
 8013b78:	005b      	lsls	r3, r3, #1
 8013b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013b7e:	4313      	orrs	r3, r2
 8013b80:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8013b84:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8013b88:	2b06      	cmp	r3, #6
 8013b8a:	d111      	bne.n	8013bb0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013b8c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b8e:	4632      	mov	r2, r6
 8013b90:	4639      	mov	r1, r7
 8013b92:	6803      	ldr	r3, [r0, #0]
 8013b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b96:	4798      	blx	r3
 8013b98:	7b73      	ldrb	r3, [r6, #13]
 8013b9a:	005b      	lsls	r3, r3, #1
 8013b9c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013ba0:	7ab3      	ldrb	r3, [r6, #10]
 8013ba2:	4313      	orrs	r3, r2
 8013ba4:	4418      	add	r0, r3
 8013ba6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8013baa:	4418      	add	r0, r3
 8013bac:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8013bb0:	2600      	movs	r6, #0
 8013bb2:	4637      	mov	r7, r6
 8013bb4:	a806      	add	r0, sp, #24
 8013bb6:	3701      	adds	r7, #1
 8013bb8:	f001 fff9 	bl	8015bae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013bbc:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8013bc0:	9b03      	ldr	r3, [sp, #12]
 8013bc2:	b2bf      	uxth	r7, r7
 8013bc4:	4286      	cmp	r6, r0
 8013bc6:	eba9 0903 	sub.w	r9, r9, r3
 8013bca:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8013bce:	bfb8      	it	lt
 8013bd0:	4606      	movlt	r6, r0
 8013bd2:	fa0f f989 	sxth.w	r9, r9
 8013bd6:	b236      	sxth	r6, r6
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	f43f af0d 	beq.w	80139f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013bde:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	f47f af08 	bne.w	80139f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013be8:	7a2b      	ldrb	r3, [r5, #8]
 8013bea:	444b      	add	r3, r9
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	dce1      	bgt.n	8013bb4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8013bf0:	e702      	b.n	80139f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013bf2:	bf00      	nop
 8013bf4:	24028e88 	.word	0x24028e88
 8013bf8:	24028e84 	.word	0x24028e84
 8013bfc:	24028e8c 	.word	0x24028e8c
 8013c00:	24028e90 	.word	0x24028e90
 8013c04:	ebaa 0606 	sub.w	r6, sl, r6
 8013c08:	2002      	movs	r0, #2
 8013c0a:	fb96 f6f0 	sdiv	r6, r6, r0
 8013c0e:	e71c      	b.n	8013a4a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013c10:	441e      	add	r6, r3
 8013c12:	ebaa 0606 	sub.w	r6, sl, r6
 8013c16:	e718      	b.n	8013a4a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013c18:	8925      	ldrh	r5, [r4, #8]
 8013c1a:	1aed      	subs	r5, r5, r3
 8013c1c:	eba5 050a 	sub.w	r5, r5, sl
 8013c20:	fa0f fb85 	sxth.w	fp, r5
 8013c24:	8965      	ldrh	r5, [r4, #10]
 8013c26:	eba5 0509 	sub.w	r5, r5, r9
 8013c2a:	b22d      	sxth	r5, r5
 8013c2c:	e72d      	b.n	8013a8a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013c2e:	8965      	ldrh	r5, [r4, #10]
 8013c30:	f04f 0b00 	mov.w	fp, #0
 8013c34:	1aed      	subs	r5, r5, r3
 8013c36:	4633      	mov	r3, r6
 8013c38:	463e      	mov	r6, r7
 8013c3a:	eba5 050a 	sub.w	r5, r5, sl
 8013c3e:	461f      	mov	r7, r3
 8013c40:	b22d      	sxth	r5, r5
 8013c42:	e722      	b.n	8013a8a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013c44:	2500      	movs	r5, #0
 8013c46:	e720      	b.n	8013a8a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08013c48 <_ZN8touchgfx8TextAreaD0Ev>:
 8013c48:	b510      	push	{r4, lr}
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	2148      	movs	r1, #72	@ 0x48
 8013c4e:	f010 ffee 	bl	8024c2e <_ZdlPvj>
 8013c52:	4620      	mov	r0, r4
 8013c54:	bd10      	pop	{r4, pc}
	...

08013c58 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8013c58:	b513      	push	{r0, r1, r4, lr}
 8013c5a:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8013c5e:	4604      	mov	r4, r0
 8013c60:	b1fb      	cbz	r3, 8013ca2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013c62:	4b16      	ldr	r3, [pc, #88]	@ (8013cbc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8013c64:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8013c66:	881b      	ldrh	r3, [r3, #0]
 8013c68:	428b      	cmp	r3, r1
 8013c6a:	d91a      	bls.n	8013ca2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013c6c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	dd16      	ble.n	8013ca2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013c74:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	dd12      	ble.n	8013ca2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013c7c:	4b10      	ldr	r3, [pc, #64]	@ (8013cc0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8013c7e:	6818      	ldr	r0, [r3, #0]
 8013c80:	f7f1 fd36 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
 8013c84:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8013c88:	6822      	ldr	r2, [r4, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	db06      	blt.n	8013c9c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013c8e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	db02      	blt.n	8013c9c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013c96:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013c98:	4298      	cmp	r0, r3
 8013c9a:	d004      	beq.n	8013ca6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8013c9c:	6953      	ldr	r3, [r2, #20]
 8013c9e:	4620      	mov	r0, r4
 8013ca0:	4798      	blx	r3
 8013ca2:	b002      	add	sp, #8
 8013ca4:	bd10      	pop	{r4, pc}
 8013ca6:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8013caa:	466b      	mov	r3, sp
 8013cac:	6912      	ldr	r2, [r2, #16]
 8013cae:	c903      	ldmia	r1, {r0, r1}
 8013cb0:	e883 0003 	stmia.w	r3, {r0, r1}
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	4790      	blx	r2
 8013cba:	e7f2      	b.n	8013ca2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013cbc:	24028e88 	.word	0x24028e88
 8013cc0:	24028e90 	.word	0x24028e90

08013cc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8013cc4:	4b45      	ldr	r3, [pc, #276]	@ (8013ddc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8013cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cca:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013ccc:	b08e      	sub	sp, #56	@ 0x38
 8013cce:	881b      	ldrh	r3, [r3, #0]
 8013cd0:	4604      	mov	r4, r0
 8013cd2:	4293      	cmp	r3, r2
 8013cd4:	d97e      	bls.n	8013dd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013cd6:	6808      	ldr	r0, [r1, #0]
 8013cd8:	ab05      	add	r3, sp, #20
 8013cda:	6849      	ldr	r1, [r1, #4]
 8013cdc:	4d40      	ldr	r5, [pc, #256]	@ (8013de0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8013cde:	c303      	stmia	r3!, {r0, r1}
 8013ce0:	4611      	mov	r1, r2
 8013ce2:	6828      	ldr	r0, [r5, #0]
 8013ce4:	f7f1 fd04 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
 8013ce8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	db11      	blt.n	8013d14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013cf0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	db0d      	blt.n	8013d14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013cf8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013cfa:	4298      	cmp	r0, r3
 8013cfc:	d10a      	bne.n	8013d14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013cfe:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8013d02:	ab09      	add	r3, sp, #36	@ 0x24
 8013d04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d08:	e883 0003 	stmia.w	r3, {r0, r1}
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	a805      	add	r0, sp, #20
 8013d10:	f7fc fdca 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 8013d14:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	dd5b      	ble.n	8013dd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013d1c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	dd57      	ble.n	8013dd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013d24:	4f2f      	ldr	r7, [pc, #188]	@ (8013de4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8013d26:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8013de8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013d36:	2e00      	cmp	r6, #0
 8013d38:	d04c      	beq.n	8013dd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013d3a:	6823      	ldr	r3, [r4, #0]
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8013d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d44:	4798      	blx	r3
 8013d46:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 8013d4e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013d52:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8013d56:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8013d5a:	785b      	ldrb	r3, [r3, #1]
 8013d5c:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 8013d60:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013d64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013d66:	9609      	str	r6, [sp, #36]	@ 0x24
 8013d68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8013dec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8013d6e:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8013d78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013d7a:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 8013d7e:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8013d82:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 8013d86:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8013d8a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013d8e:	b10a      	cbz	r2, 8013d94 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8013d90:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8013d92:	b906      	cbnz	r6, 8013d96 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8013d94:	689e      	ldr	r6, [r3, #8]
 8013d96:	af07      	add	r7, sp, #28
 8013d98:	4621      	mov	r1, r4
 8013d9a:	4638      	mov	r0, r7
 8013d9c:	f003 fdb0 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013da0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8013da2:	6828      	ldr	r0, [r5, #0]
 8013da4:	f7f1 fca4 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
 8013da8:	6823      	ldr	r3, [r4, #0]
 8013daa:	4605      	mov	r5, r0
 8013dac:	4620      	mov	r0, r4
 8013dae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013db0:	4798      	blx	r3
 8013db2:	6823      	ldr	r3, [r4, #0]
 8013db4:	4680      	mov	r8, r0
 8013db6:	4620      	mov	r0, r4
 8013db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dbc:	4798      	blx	r3
 8013dbe:	ab09      	add	r3, sp, #36	@ 0x24
 8013dc0:	9501      	str	r5, [sp, #4]
 8013dc2:	9300      	str	r3, [sp, #0]
 8013dc4:	ab05      	add	r3, sp, #20
 8013dc6:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8013dca:	4630      	mov	r0, r6
 8013dcc:	e897 0006 	ldmia.w	r7, {r1, r2}
 8013dd0:	f7f1 fc40 	bl	8005654 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013dd4:	b00e      	add	sp, #56	@ 0x38
 8013dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dda:	bf00      	nop
 8013ddc:	24028e88 	.word	0x24028e88
 8013de0:	24028e90 	.word	0x24028e90
 8013de4:	24028e84 	.word	0x24028e84
 8013de8:	24028e8c 	.word	0x24028e8c
 8013dec:	24028e2c 	.word	0x24028e2c

08013df0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8013df0:	b570      	push	{r4, r5, r6, lr}
 8013df2:	6803      	ldr	r3, [r0, #0]
 8013df4:	4604      	mov	r4, r0
 8013df6:	4615      	mov	r5, r2
 8013df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dfa:	4798      	blx	r3
 8013dfc:	6823      	ldr	r3, [r4, #0]
 8013dfe:	4629      	mov	r1, r5
 8013e00:	4620      	mov	r0, r4
 8013e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e08:	4718      	bx	r3
	...

08013e0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013e0c:	b538      	push	{r3, r4, r5, lr}
 8013e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8013e48 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013e10:	4604      	mov	r4, r0
 8013e12:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013e14:	881b      	ldrh	r3, [r3, #0]
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d214      	bcs.n	8013e44 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8013e1a:	6803      	ldr	r3, [r0, #0]
 8013e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e1e:	4798      	blx	r3
 8013e20:	6823      	ldr	r3, [r4, #0]
 8013e22:	4605      	mov	r5, r0
 8013e24:	4620      	mov	r0, r4
 8013e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e28:	4798      	blx	r3
 8013e2a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013e2e:	b22d      	sxth	r5, r5
 8013e30:	4601      	mov	r1, r0
 8013e32:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013e36:	bf06      	itte	eq
 8013e38:	4602      	moveq	r2, r0
 8013e3a:	4629      	moveq	r1, r5
 8013e3c:	462a      	movne	r2, r5
 8013e3e:	4620      	mov	r0, r4
 8013e40:	f7ff ffd6 	bl	8013df0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013e44:	bd38      	pop	{r3, r4, r5, pc}
 8013e46:	bf00      	nop
 8013e48:	24028e88 	.word	0x24028e88

08013e4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013e4c:	b530      	push	{r4, r5, lr}
 8013e4e:	888b      	ldrh	r3, [r1, #4]
 8013e50:	b085      	sub	sp, #20
 8013e52:	4604      	mov	r4, r0
 8013e54:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013e56:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013e5a:	b923      	cbnz	r3, 8013e66 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013e5c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013e60:	b90b      	cbnz	r3, 8013e66 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013e62:	f7ff ffd3 	bl	8013e0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013e66:	6823      	ldr	r3, [r4, #0]
 8013e68:	466d      	mov	r5, sp
 8013e6a:	4621      	mov	r1, r4
 8013e6c:	343c      	adds	r4, #60	@ 0x3c
 8013e6e:	4628      	mov	r0, r5
 8013e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013e74:	4798      	blx	r3
 8013e76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013e7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013e7e:	b005      	add	sp, #20
 8013e80:	bd30      	pop	{r4, r5, pc}

08013e82 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013e82:	2300      	movs	r3, #0
 8013e84:	8083      	strh	r3, [r0, #4]
 8013e86:	80c3      	strh	r3, [r0, #6]
 8013e88:	8003      	strh	r3, [r0, #0]
 8013e8a:	8043      	strh	r3, [r0, #2]
 8013e8c:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8013e90:	2bff      	cmp	r3, #255	@ 0xff
 8013e92:	bf01      	itttt	eq
 8013e94:	890b      	ldrheq	r3, [r1, #8]
 8013e96:	8083      	strheq	r3, [r0, #4]
 8013e98:	894b      	ldrheq	r3, [r1, #10]
 8013e9a:	80c3      	strheq	r3, [r0, #6]
 8013e9c:	4770      	bx	lr
	...

08013ea0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ea2:	4604      	mov	r4, r0
 8013ea4:	466b      	mov	r3, sp
 8013ea6:	6808      	ldr	r0, [r1, #0]
 8013ea8:	6849      	ldr	r1, [r1, #4]
 8013eaa:	c303      	stmia	r3!, {r0, r1}
 8013eac:	6823      	ldr	r3, [r4, #0]
 8013eae:	4669      	mov	r1, sp
 8013eb0:	4620      	mov	r0, r4
 8013eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013eb4:	4798      	blx	r3
 8013eb6:	4b08      	ldr	r3, [pc, #32]	@ (8013ed8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013ebe:	b10a      	cbz	r2, 8013ec4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013ec0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013ec2:	b900      	cbnz	r0, 8013ec6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013ec4:	6898      	ldr	r0, [r3, #8]
 8013ec6:	6803      	ldr	r3, [r0, #0]
 8013ec8:	4669      	mov	r1, sp
 8013eca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8013ecc:	6a1d      	ldr	r5, [r3, #32]
 8013ece:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8013ed2:	47a8      	blx	r5
 8013ed4:	b003      	add	sp, #12
 8013ed6:	bd30      	pop	{r4, r5, pc}
 8013ed8:	24028e2c 	.word	0x24028e2c

08013edc <_ZN8touchgfx3BoxD1Ev>:
 8013edc:	4770      	bx	lr

08013ede <_ZN8touchgfx3BoxD0Ev>:
 8013ede:	b510      	push	{r4, lr}
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	212c      	movs	r1, #44	@ 0x2c
 8013ee4:	f010 fea3 	bl	8024c2e <_ZdlPvj>
 8013ee8:	4620      	mov	r0, r4
 8013eea:	bd10      	pop	{r4, pc}

08013eec <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013eec:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8013ef0:	b12a      	cbz	r2, 8013efe <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013ef2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013ef6:	b112      	cbz	r2, 8013efe <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013ef8:	6803      	ldr	r3, [r0, #0]
 8013efa:	695b      	ldr	r3, [r3, #20]
 8013efc:	4718      	bx	r3
 8013efe:	4770      	bx	lr

08013f00 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8013f00:	4b30      	ldr	r3, [pc, #192]	@ (8013fc4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8013f02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f06:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013f08:	b08d      	sub	sp, #52	@ 0x34
 8013f0a:	881b      	ldrh	r3, [r3, #0]
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	460f      	mov	r7, r1
 8013f10:	4293      	cmp	r3, r2
 8013f12:	d954      	bls.n	8013fbe <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013f14:	4b2c      	ldr	r3, [pc, #176]	@ (8013fc8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8013f16:	6819      	ldr	r1, [r3, #0]
 8013f18:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8013f1c:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8013f20:	4a2a      	ldr	r2, [pc, #168]	@ (8013fcc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8013f22:	6812      	ldr	r2, [r2, #0]
 8013f24:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8013f28:	2900      	cmp	r1, #0
 8013f2a:	d048      	beq.n	8013fbe <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013f2c:	785a      	ldrb	r2, [r3, #1]
 8013f2e:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8013f32:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8013f36:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013f3a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8013f3e:	4b24      	ldr	r3, [pc, #144]	@ (8013fd0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8013f40:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8013f44:	681a      	ldr	r2, [r3, #0]
 8013f46:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8013f4a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8013f4e:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8013f52:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013f54:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8013f58:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8013f5c:	9107      	str	r1, [sp, #28]
 8013f5e:	f88d 8020 	strb.w	r8, [sp, #32]
 8013f62:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8013f66:	9609      	str	r6, [sp, #36]	@ 0x24
 8013f68:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8013f6c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013f70:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8013f74:	b10b      	cbz	r3, 8013f7a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8013f76:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8013f78:	b905      	cbnz	r5, 8013f7c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8013f7a:	6895      	ldr	r5, [r2, #8]
 8013f7c:	ae05      	add	r6, sp, #20
 8013f7e:	4621      	mov	r1, r4
 8013f80:	4630      	mov	r0, r6
 8013f82:	f003 fcbd 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f86:	4b13      	ldr	r3, [pc, #76]	@ (8013fd4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8013f88:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8013f8a:	6818      	ldr	r0, [r3, #0]
 8013f8c:	f7f1 fbb0 	bl	80056f0 <_ZNK8touchgfx5Texts7getTextEt>
 8013f90:	6823      	ldr	r3, [r4, #0]
 8013f92:	4680      	mov	r8, r0
 8013f94:	4620      	mov	r0, r4
 8013f96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013f98:	4798      	blx	r3
 8013f9a:	6823      	ldr	r3, [r4, #0]
 8013f9c:	4681      	mov	r9, r0
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fa4:	4798      	blx	r3
 8013fa6:	ab07      	add	r3, sp, #28
 8013fa8:	f8cd 8004 	str.w	r8, [sp, #4]
 8013fac:	9300      	str	r3, [sp, #0]
 8013fae:	463b      	mov	r3, r7
 8013fb0:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8013fb4:	4628      	mov	r0, r5
 8013fb6:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013fba:	f7f1 fb4b 	bl	8005654 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013fbe:	b00d      	add	sp, #52	@ 0x34
 8013fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fc4:	24028e88 	.word	0x24028e88
 8013fc8:	24028e84 	.word	0x24028e84
 8013fcc:	24028e8c 	.word	0x24028e8c
 8013fd0:	24028e2c 	.word	0x24028e2c
 8013fd4:	24028e90 	.word	0x24028e90

08013fd8 <_ZN8touchgfx7OutlineD1Ev>:
 8013fd8:	4770      	bx	lr

08013fda <_ZN8touchgfx7OutlineD0Ev>:
 8013fda:	b510      	push	{r4, lr}
 8013fdc:	4604      	mov	r4, r0
 8013fde:	2130      	movs	r1, #48	@ 0x30
 8013fe0:	f010 fe25 	bl	8024c2e <_ZdlPvj>
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	bd10      	pop	{r4, pc}

08013fe8 <_ZN8touchgfx7Outline5resetEv>:
 8013fe8:	b510      	push	{r4, lr}
 8013fea:	4604      	mov	r4, r0
 8013fec:	f000 fe86 	bl	8014cfc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8013ff0:	60e0      	str	r0, [r4, #12]
 8013ff2:	f000 fe89 	bl	8014d08 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8013ff6:	68e3      	ldr	r3, [r4, #12]
 8013ff8:	08c0      	lsrs	r0, r0, #3
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8014000:	6123      	str	r3, [r4, #16]
 8014002:	3801      	subs	r0, #1
 8014004:	60a2      	str	r2, [r4, #8]
 8014006:	6060      	str	r0, [r4, #4]
 8014008:	8019      	strh	r1, [r3, #0]
 801400a:	8059      	strh	r1, [r3, #2]
 801400c:	809a      	strh	r2, [r3, #4]
 801400e:	80da      	strh	r2, [r3, #6]
 8014010:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014012:	f023 0301 	bic.w	r3, r3, #1
 8014016:	f043 0302 	orr.w	r3, r3, #2
 801401a:	6263      	str	r3, [r4, #36]	@ 0x24
 801401c:	bd10      	pop	{r4, pc}
	...

08014020 <_ZN8touchgfx7OutlineC1Ev>:
 8014020:	4b0a      	ldr	r3, [pc, #40]	@ (801404c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8014022:	b510      	push	{r4, lr}
 8014024:	6003      	str	r3, [r0, #0]
 8014026:	2300      	movs	r3, #0
 8014028:	4604      	mov	r4, r0
 801402a:	6243      	str	r3, [r0, #36]	@ 0x24
 801402c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8014030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014034:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014038:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801403c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014040:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8014044:	f7ff ffd0 	bl	8013fe8 <_ZN8touchgfx7Outline5resetEv>
 8014048:	4620      	mov	r0, r4
 801404a:	bd10      	pop	{r4, pc}
 801404c:	0802966c 	.word	0x0802966c

08014050 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8014050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014054:	b093      	sub	sp, #76	@ 0x4c
 8014056:	1156      	asrs	r6, r2, #5
 8014058:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801405a:	9305      	str	r3, [sp, #20]
 801405c:	1153      	asrs	r3, r2, #5
 801405e:	f004 051f 	and.w	r5, r4, #31
 8014062:	9303      	str	r3, [sp, #12]
 8014064:	1163      	asrs	r3, r4, #5
 8014066:	9504      	str	r5, [sp, #16]
 8014068:	1165      	asrs	r5, r4, #5
 801406a:	9306      	str	r3, [sp, #24]
 801406c:	f002 031f 	and.w	r3, r2, #31
 8014070:	42ae      	cmp	r6, r5
 8014072:	f040 80f4 	bne.w	801425e <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8014076:	9c04      	ldr	r4, [sp, #16]
 8014078:	9a05      	ldr	r2, [sp, #20]
 801407a:	42a3      	cmp	r3, r4
 801407c:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8014080:	6902      	ldr	r2, [r0, #16]
 8014082:	d125      	bne.n	80140d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8014084:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014088:	459e      	cmp	lr, r3
 801408a:	d103      	bne.n	8014094 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801408c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014090:	429e      	cmp	r6, r3
 8014092:	d035      	beq.n	8014100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014094:	88d1      	ldrh	r1, [r2, #6]
 8014096:	8893      	ldrh	r3, [r2, #4]
 8014098:	430b      	orrs	r3, r1
 801409a:	d010      	beq.n	80140be <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801409c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	db0c      	blt.n	80140be <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80140a4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80140a6:	428b      	cmp	r3, r1
 80140a8:	da09      	bge.n	80140be <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80140aa:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80140ae:	428b      	cmp	r3, r1
 80140b0:	f103 0301 	add.w	r3, r3, #1
 80140b4:	bf38      	it	cc
 80140b6:	3208      	addcc	r2, #8
 80140b8:	6083      	str	r3, [r0, #8]
 80140ba:	bf38      	it	cc
 80140bc:	6102      	strcc	r2, [r0, #16]
 80140be:	6903      	ldr	r3, [r0, #16]
 80140c0:	9a03      	ldr	r2, [sp, #12]
 80140c2:	f8a3 e000 	strh.w	lr, [r3]
 80140c6:	805a      	strh	r2, [r3, #2]
 80140c8:	2200      	movs	r2, #0
 80140ca:	809a      	strh	r2, [r3, #4]
 80140cc:	80da      	strh	r2, [r3, #6]
 80140ce:	e017      	b.n	8014100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80140d0:	9c05      	ldr	r4, [sp, #20]
 80140d2:	114e      	asrs	r6, r1, #5
 80140d4:	f001 0c1f 	and.w	ip, r1, #31
 80140d8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80140dc:	f004 041f 	and.w	r4, r4, #31
 80140e0:	4576      	cmp	r6, lr
 80140e2:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80140e6:	9402      	str	r4, [sp, #8]
 80140e8:	9c04      	ldr	r4, [sp, #16]
 80140ea:	eba4 0403 	sub.w	r4, r4, r3
 80140ee:	d10a      	bne.n	8014106 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80140f0:	9b02      	ldr	r3, [sp, #8]
 80140f2:	44a0      	add	r8, r4
 80140f4:	449c      	add	ip, r3
 80140f6:	f8a2 8004 	strh.w	r8, [r2, #4]
 80140fa:	fb04 a40c 	mla	r4, r4, ip, sl
 80140fe:	80d4      	strh	r4, [r2, #6]
 8014100:	b013      	add	sp, #76	@ 0x4c
 8014102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014106:	9d05      	ldr	r5, [sp, #20]
 8014108:	1a69      	subs	r1, r5, r1
 801410a:	bf51      	iteee	pl
 801410c:	f1cc 0520 	rsbpl	r5, ip, #32
 8014110:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014114:	4249      	negmi	r1, r1
 8014116:	2500      	movmi	r5, #0
 8014118:	bf5d      	ittte	pl
 801411a:	436c      	mulpl	r4, r5
 801411c:	2520      	movpl	r5, #32
 801411e:	f04f 0901 	movpl.w	r9, #1
 8014122:	f04f 39ff 	movmi.w	r9, #4294967295
 8014126:	9501      	str	r5, [sp, #4]
 8014128:	9f01      	ldr	r7, [sp, #4]
 801412a:	444e      	add	r6, r9
 801412c:	fb94 f5f1 	sdiv	r5, r4, r1
 8014130:	fb01 4415 	mls	r4, r1, r5, r4
 8014134:	44bc      	add	ip, r7
 8014136:	2c00      	cmp	r4, #0
 8014138:	bfbc      	itt	lt
 801413a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801413e:	1864      	addlt	r4, r4, r1
 8014140:	44a8      	add	r8, r5
 8014142:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014146:	f8a2 8004 	strh.w	r8, [r2, #4]
 801414a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801414e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014152:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014156:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801415a:	ea58 0202 	orrs.w	r2, r8, r2
 801415e:	d011      	beq.n	8014184 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8014160:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8014164:	f1b8 0f00 	cmp.w	r8, #0
 8014168:	db0c      	blt.n	8014184 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801416a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801416c:	4590      	cmp	r8, r2
 801416e:	da09      	bge.n	8014184 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8014170:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8014174:	4590      	cmp	r8, r2
 8014176:	bf3c      	itt	cc
 8014178:	f10c 0208 	addcc.w	r2, ip, #8
 801417c:	6102      	strcc	r2, [r0, #16]
 801417e:	f108 0201 	add.w	r2, r8, #1
 8014182:	6082      	str	r2, [r0, #8]
 8014184:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014188:	2700      	movs	r7, #0
 801418a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801418e:	45b6      	cmp	lr, r6
 8014190:	f8ac 6000 	strh.w	r6, [ip]
 8014194:	442b      	add	r3, r5
 8014196:	f8ac 2002 	strh.w	r2, [ip, #2]
 801419a:	f8ac 7004 	strh.w	r7, [ip, #4]
 801419e:	f8ac 7006 	strh.w	r7, [ip, #6]
 80141a2:	d04b      	beq.n	801423c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 80141a4:	9f04      	ldr	r7, [sp, #16]
 80141a6:	1a64      	subs	r4, r4, r1
 80141a8:	f04f 0a00 	mov.w	sl, #0
 80141ac:	1aff      	subs	r7, r7, r3
 80141ae:	443d      	add	r5, r7
 80141b0:	016d      	lsls	r5, r5, #5
 80141b2:	fb95 f8f1 	sdiv	r8, r5, r1
 80141b6:	fb01 5518 	mls	r5, r1, r8, r5
 80141ba:	2d00      	cmp	r5, #0
 80141bc:	bfbc      	itt	lt
 80141be:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80141c2:	186d      	addlt	r5, r5, r1
 80141c4:	f108 0701 	add.w	r7, r8, #1
 80141c8:	9703      	str	r7, [sp, #12]
 80141ca:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80141ce:	1964      	adds	r4, r4, r5
 80141d0:	444e      	add	r6, r9
 80141d2:	bf54      	ite	pl
 80141d4:	9f03      	ldrpl	r7, [sp, #12]
 80141d6:	4647      	movmi	r7, r8
 80141d8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80141dc:	bf58      	it	pl
 80141de:	1a64      	subpl	r4, r4, r1
 80141e0:	443b      	add	r3, r7
 80141e2:	44bb      	add	fp, r7
 80141e4:	f8ac b004 	strh.w	fp, [ip, #4]
 80141e8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80141ec:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80141f0:	f8ac b006 	strh.w	fp, [ip, #6]
 80141f4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80141f8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80141fc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014200:	ea5b 0707 	orrs.w	r7, fp, r7
 8014204:	d011      	beq.n	801422a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014206:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801420a:	f1bb 0f00 	cmp.w	fp, #0
 801420e:	db0c      	blt.n	801422a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014210:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014212:	45bb      	cmp	fp, r7
 8014214:	da09      	bge.n	801422a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014216:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801421a:	45bb      	cmp	fp, r7
 801421c:	bf3c      	itt	cc
 801421e:	f10c 0708 	addcc.w	r7, ip, #8
 8014222:	6107      	strcc	r7, [r0, #16]
 8014224:	f10b 0701 	add.w	r7, fp, #1
 8014228:	6087      	str	r7, [r0, #8]
 801422a:	6907      	ldr	r7, [r0, #16]
 801422c:	45b6      	cmp	lr, r6
 801422e:	803e      	strh	r6, [r7, #0]
 8014230:	807a      	strh	r2, [r7, #2]
 8014232:	f8a7 a004 	strh.w	sl, [r7, #4]
 8014236:	f8a7 a006 	strh.w	sl, [r7, #6]
 801423a:	d1c6      	bne.n	80141ca <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801423c:	9a04      	ldr	r2, [sp, #16]
 801423e:	1ad3      	subs	r3, r2, r3
 8014240:	6902      	ldr	r2, [r0, #16]
 8014242:	8891      	ldrh	r1, [r2, #4]
 8014244:	88d6      	ldrh	r6, [r2, #6]
 8014246:	4419      	add	r1, r3
 8014248:	8091      	strh	r1, [r2, #4]
 801424a:	9902      	ldr	r1, [sp, #8]
 801424c:	f101 0c20 	add.w	ip, r1, #32
 8014250:	9901      	ldr	r1, [sp, #4]
 8014252:	ebac 0c01 	sub.w	ip, ip, r1
 8014256:	fb03 630c 	mla	r3, r3, ip, r6
 801425a:	80d3      	strh	r3, [r2, #6]
 801425c:	e750      	b.n	8014100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801425e:	9d05      	ldr	r5, [sp, #20]
 8014260:	1aa2      	subs	r2, r4, r2
 8014262:	eba5 0501 	sub.w	r5, r5, r1
 8014266:	9202      	str	r2, [sp, #8]
 8014268:	9508      	str	r5, [sp, #32]
 801426a:	f140 8128 	bpl.w	80144be <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801426e:	9a03      	ldr	r2, [sp, #12]
 8014270:	2a00      	cmp	r2, #0
 8014272:	f6ff af45 	blt.w	8014100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014276:	9a02      	ldr	r2, [sp, #8]
 8014278:	f04f 34ff 	mov.w	r4, #4294967295
 801427c:	4252      	negs	r2, r2
 801427e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014280:	2400      	movs	r4, #0
 8014282:	9202      	str	r2, [sp, #8]
 8014284:	9a06      	ldr	r2, [sp, #24]
 8014286:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801428a:	9206      	str	r2, [sp, #24]
 801428c:	462a      	mov	r2, r5
 801428e:	435a      	muls	r2, r3
 8014290:	9401      	str	r4, [sp, #4]
 8014292:	9c02      	ldr	r4, [sp, #8]
 8014294:	9d02      	ldr	r5, [sp, #8]
 8014296:	fb92 f4f4 	sdiv	r4, r2, r4
 801429a:	fb05 2214 	mls	r2, r5, r4, r2
 801429e:	2a00      	cmp	r2, #0
 80142a0:	9207      	str	r2, [sp, #28]
 80142a2:	bfbc      	itt	lt
 80142a4:	1952      	addlt	r2, r2, r5
 80142a6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80142aa:	6905      	ldr	r5, [r0, #16]
 80142ac:	bfb8      	it	lt
 80142ae:	9207      	strlt	r2, [sp, #28]
 80142b0:	eb04 0901 	add.w	r9, r4, r1
 80142b4:	9a01      	ldr	r2, [sp, #4]
 80142b6:	ea4f 1669 	mov.w	r6, r9, asr #5
 80142ba:	429a      	cmp	r2, r3
 80142bc:	f040 8111 	bne.w	80144e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80142c0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80142c4:	429e      	cmp	r6, r3
 80142c6:	d104      	bne.n	80142d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80142c8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80142cc:	9a03      	ldr	r2, [sp, #12]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d01b      	beq.n	801430a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80142d2:	88ea      	ldrh	r2, [r5, #6]
 80142d4:	88ab      	ldrh	r3, [r5, #4]
 80142d6:	4313      	orrs	r3, r2
 80142d8:	d010      	beq.n	80142fc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80142da:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80142de:	2a00      	cmp	r2, #0
 80142e0:	db0c      	blt.n	80142fc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80142e2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80142e4:	429a      	cmp	r2, r3
 80142e6:	da09      	bge.n	80142fc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80142e8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80142ec:	429a      	cmp	r2, r3
 80142ee:	f102 0201 	add.w	r2, r2, #1
 80142f2:	bf38      	it	cc
 80142f4:	3508      	addcc	r5, #8
 80142f6:	6082      	str	r2, [r0, #8]
 80142f8:	bf38      	it	cc
 80142fa:	6105      	strcc	r5, [r0, #16]
 80142fc:	6903      	ldr	r3, [r0, #16]
 80142fe:	9a03      	ldr	r2, [sp, #12]
 8014300:	801e      	strh	r6, [r3, #0]
 8014302:	805a      	strh	r2, [r3, #2]
 8014304:	2200      	movs	r2, #0
 8014306:	809a      	strh	r2, [r3, #4]
 8014308:	80da      	strh	r2, [r3, #6]
 801430a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801430c:	9a03      	ldr	r2, [sp, #12]
 801430e:	6901      	ldr	r1, [r0, #16]
 8014310:	441a      	add	r2, r3
 8014312:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014316:	42b3      	cmp	r3, r6
 8014318:	d103      	bne.n	8014322 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801431a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801431e:	429a      	cmp	r2, r3
 8014320:	d01a      	beq.n	8014358 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8014322:	88cc      	ldrh	r4, [r1, #6]
 8014324:	888b      	ldrh	r3, [r1, #4]
 8014326:	4323      	orrs	r3, r4
 8014328:	d010      	beq.n	801434c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801432a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801432e:	2c00      	cmp	r4, #0
 8014330:	db0c      	blt.n	801434c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014332:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014334:	429c      	cmp	r4, r3
 8014336:	da09      	bge.n	801434c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014338:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801433c:	429c      	cmp	r4, r3
 801433e:	f104 0401 	add.w	r4, r4, #1
 8014342:	bf38      	it	cc
 8014344:	3108      	addcc	r1, #8
 8014346:	6084      	str	r4, [r0, #8]
 8014348:	bf38      	it	cc
 801434a:	6101      	strcc	r1, [r0, #16]
 801434c:	6903      	ldr	r3, [r0, #16]
 801434e:	2100      	movs	r1, #0
 8014350:	801e      	strh	r6, [r3, #0]
 8014352:	805a      	strh	r2, [r3, #2]
 8014354:	8099      	strh	r1, [r3, #4]
 8014356:	80d9      	strh	r1, [r3, #6]
 8014358:	9b06      	ldr	r3, [sp, #24]
 801435a:	4293      	cmp	r3, r2
 801435c:	f000 8082 	beq.w	8014464 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8014360:	9b08      	ldr	r3, [sp, #32]
 8014362:	9902      	ldr	r1, [sp, #8]
 8014364:	015b      	lsls	r3, r3, #5
 8014366:	9c02      	ldr	r4, [sp, #8]
 8014368:	fb93 f1f1 	sdiv	r1, r3, r1
 801436c:	fb04 3311 	mls	r3, r4, r1, r3
 8014370:	9103      	str	r1, [sp, #12]
 8014372:	2b00      	cmp	r3, #0
 8014374:	9308      	str	r3, [sp, #32]
 8014376:	da04      	bge.n	8014382 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8014378:	1e4b      	subs	r3, r1, #1
 801437a:	9303      	str	r3, [sp, #12]
 801437c:	9b08      	ldr	r3, [sp, #32]
 801437e:	4423      	add	r3, r4
 8014380:	9308      	str	r3, [sp, #32]
 8014382:	9b07      	ldr	r3, [sp, #28]
 8014384:	464f      	mov	r7, r9
 8014386:	9902      	ldr	r1, [sp, #8]
 8014388:	2600      	movs	r6, #0
 801438a:	1a5b      	subs	r3, r3, r1
 801438c:	9307      	str	r3, [sp, #28]
 801438e:	9b01      	ldr	r3, [sp, #4]
 8014390:	f1c3 0320 	rsb	r3, r3, #32
 8014394:	930e      	str	r3, [sp, #56]	@ 0x38
 8014396:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8014398:	9b01      	ldr	r3, [sp, #4]
 801439a:	1a5b      	subs	r3, r3, r1
 801439c:	930a      	str	r3, [sp, #40]	@ 0x28
 801439e:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 80143a2:	185b      	adds	r3, r3, r1
 80143a4:	bf58      	it	pl
 80143a6:	9902      	ldrpl	r1, [sp, #8]
 80143a8:	9307      	str	r3, [sp, #28]
 80143aa:	bf57      	itett	pl
 80143ac:	1a5b      	subpl	r3, r3, r1
 80143ae:	9903      	ldrmi	r1, [sp, #12]
 80143b0:	9307      	strpl	r3, [sp, #28]
 80143b2:	9b03      	ldrpl	r3, [sp, #12]
 80143b4:	bf58      	it	pl
 80143b6:	1c59      	addpl	r1, r3, #1
 80143b8:	2a00      	cmp	r2, #0
 80143ba:	4489      	add	r9, r1
 80143bc:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80143c0:	db2e      	blt.n	8014420 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80143c2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80143c4:	4293      	cmp	r3, r2
 80143c6:	dd2b      	ble.n	8014420 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80143c8:	9c01      	ldr	r4, [sp, #4]
 80143ca:	6905      	ldr	r5, [r0, #16]
 80143cc:	46a0      	mov	r8, r4
 80143ce:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80143d0:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80143d4:	45a0      	cmp	r8, r4
 80143d6:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80143da:	f040 814c 	bne.w	8014676 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80143de:	f9b5 1000 	ldrsh.w	r1, [r5]
 80143e2:	4551      	cmp	r1, sl
 80143e4:	d103      	bne.n	80143ee <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80143e6:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80143ea:	4291      	cmp	r1, r2
 80143ec:	d018      	beq.n	8014420 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80143ee:	ea5c 010e 	orrs.w	r1, ip, lr
 80143f2:	d00f      	beq.n	8014414 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80143f4:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80143f8:	2900      	cmp	r1, #0
 80143fa:	db0b      	blt.n	8014414 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80143fc:	428b      	cmp	r3, r1
 80143fe:	dd09      	ble.n	8014414 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014400:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8014404:	4299      	cmp	r1, r3
 8014406:	f101 0101 	add.w	r1, r1, #1
 801440a:	bf38      	it	cc
 801440c:	3508      	addcc	r5, #8
 801440e:	6081      	str	r1, [r0, #8]
 8014410:	bf38      	it	cc
 8014412:	6105      	strcc	r5, [r0, #16]
 8014414:	6903      	ldr	r3, [r0, #16]
 8014416:	f8a3 a000 	strh.w	sl, [r3]
 801441a:	805a      	strh	r2, [r3, #2]
 801441c:	809e      	strh	r6, [r3, #4]
 801441e:	80de      	strh	r6, [r3, #6]
 8014420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014422:	6901      	ldr	r1, [r0, #16]
 8014424:	441a      	add	r2, r3
 8014426:	88cc      	ldrh	r4, [r1, #6]
 8014428:	888b      	ldrh	r3, [r1, #4]
 801442a:	4323      	orrs	r3, r4
 801442c:	d010      	beq.n	8014450 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801442e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014432:	2c00      	cmp	r4, #0
 8014434:	db0c      	blt.n	8014450 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014436:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014438:	429c      	cmp	r4, r3
 801443a:	da09      	bge.n	8014450 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801443c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8014440:	429c      	cmp	r4, r3
 8014442:	f104 0401 	add.w	r4, r4, #1
 8014446:	bf38      	it	cc
 8014448:	3108      	addcc	r1, #8
 801444a:	6084      	str	r4, [r0, #8]
 801444c:	bf38      	it	cc
 801444e:	6101      	strcc	r1, [r0, #16]
 8014450:	6903      	ldr	r3, [r0, #16]
 8014452:	464f      	mov	r7, r9
 8014454:	f8a3 a000 	strh.w	sl, [r3]
 8014458:	805a      	strh	r2, [r3, #2]
 801445a:	809e      	strh	r6, [r3, #4]
 801445c:	80de      	strh	r6, [r3, #6]
 801445e:	9b06      	ldr	r3, [sp, #24]
 8014460:	4293      	cmp	r3, r2
 8014462:	d19c      	bne.n	801439e <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8014464:	9b01      	ldr	r3, [sp, #4]
 8014466:	6907      	ldr	r7, [r0, #16]
 8014468:	f1c3 0620 	rsb	r6, r3, #32
 801446c:	9b05      	ldr	r3, [sp, #20]
 801446e:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8014472:	9b04      	ldr	r3, [sp, #16]
 8014474:	429e      	cmp	r6, r3
 8014476:	f040 81c7 	bne.w	8014808 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801447a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801447e:	459e      	cmp	lr, r3
 8014480:	d104      	bne.n	801448c <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8014482:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014486:	429a      	cmp	r2, r3
 8014488:	f43f ae3a 	beq.w	8014100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801448c:	88f9      	ldrh	r1, [r7, #6]
 801448e:	88bb      	ldrh	r3, [r7, #4]
 8014490:	430b      	orrs	r3, r1
 8014492:	d010      	beq.n	80144b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014494:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014498:	2b00      	cmp	r3, #0
 801449a:	db0c      	blt.n	80144b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801449c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801449e:	428b      	cmp	r3, r1
 80144a0:	da09      	bge.n	80144b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80144a2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80144a6:	428b      	cmp	r3, r1
 80144a8:	f103 0301 	add.w	r3, r3, #1
 80144ac:	bf38      	it	cc
 80144ae:	3708      	addcc	r7, #8
 80144b0:	6083      	str	r3, [r0, #8]
 80144b2:	bf38      	it	cc
 80144b4:	6107      	strcc	r7, [r0, #16]
 80144b6:	6903      	ldr	r3, [r0, #16]
 80144b8:	f8a3 e000 	strh.w	lr, [r3]
 80144bc:	e603      	b.n	80140c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80144be:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80144c0:	9c03      	ldr	r4, [sp, #12]
 80144c2:	42a2      	cmp	r2, r4
 80144c4:	f6ff ae1c 	blt.w	8014100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80144c8:	9c06      	ldr	r4, [sp, #24]
 80144ca:	42a2      	cmp	r2, r4
 80144cc:	9c08      	ldr	r4, [sp, #32]
 80144ce:	bfbc      	itt	lt
 80144d0:	3201      	addlt	r2, #1
 80144d2:	9206      	strlt	r2, [sp, #24]
 80144d4:	f1c3 0220 	rsb	r2, r3, #32
 80144d8:	4362      	muls	r2, r4
 80144da:	2401      	movs	r4, #1
 80144dc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80144de:	2420      	movs	r4, #32
 80144e0:	e6d6      	b.n	8014290 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80144e2:	ea4f 1861 	mov.w	r8, r1, asr #5
 80144e6:	f009 021f 	and.w	r2, r9, #31
 80144ea:	f001 011f 	and.w	r1, r1, #31
 80144ee:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80144f2:	920c      	str	r2, [sp, #48]	@ 0x30
 80144f4:	45b0      	cmp	r8, r6
 80144f6:	9a01      	ldr	r2, [sp, #4]
 80144f8:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80144fc:	eba2 0203 	sub.w	r2, r2, r3
 8014500:	d108      	bne.n	8014514 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8014502:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014504:	4496      	add	lr, r2
 8014506:	4419      	add	r1, r3
 8014508:	f8a5 e004 	strh.w	lr, [r5, #4]
 801450c:	fb02 a101 	mla	r1, r2, r1, sl
 8014510:	80e9      	strh	r1, [r5, #6]
 8014512:	e6fa      	b.n	801430a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014514:	2c00      	cmp	r4, #0
 8014516:	f2c0 80a7 	blt.w	8014668 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801451a:	2701      	movs	r7, #1
 801451c:	f1c1 0c20 	rsb	ip, r1, #32
 8014520:	970a      	str	r7, [sp, #40]	@ 0x28
 8014522:	2720      	movs	r7, #32
 8014524:	fb02 f20c 	mul.w	r2, r2, ip
 8014528:	9709      	str	r7, [sp, #36]	@ 0x24
 801452a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801452c:	fb92 fcf4 	sdiv	ip, r2, r4
 8014530:	fb04 221c 	mls	r2, r4, ip, r2
 8014534:	4439      	add	r1, r7
 8014536:	2a00      	cmp	r2, #0
 8014538:	bfbc      	itt	lt
 801453a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801453e:	1912      	addlt	r2, r2, r4
 8014540:	fb0c a101 	mla	r1, ip, r1, sl
 8014544:	44e6      	add	lr, ip
 8014546:	80e9      	strh	r1, [r5, #6]
 8014548:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801454a:	f8a5 e004 	strh.w	lr, [r5, #4]
 801454e:	eb08 0501 	add.w	r5, r8, r1
 8014552:	6901      	ldr	r1, [r0, #16]
 8014554:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8014558:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801455c:	ea58 070e 	orrs.w	r7, r8, lr
 8014560:	d010      	beq.n	8014584 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014562:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8014566:	f1be 0f00 	cmp.w	lr, #0
 801456a:	db0b      	blt.n	8014584 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801456c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801456e:	45be      	cmp	lr, r7
 8014570:	da08      	bge.n	8014584 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014572:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8014576:	45be      	cmp	lr, r7
 8014578:	bf3c      	itt	cc
 801457a:	3108      	addcc	r1, #8
 801457c:	6101      	strcc	r1, [r0, #16]
 801457e:	f10e 0101 	add.w	r1, lr, #1
 8014582:	6081      	str	r1, [r0, #8]
 8014584:	6901      	ldr	r1, [r0, #16]
 8014586:	f04f 0e00 	mov.w	lr, #0
 801458a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801458e:	42ae      	cmp	r6, r5
 8014590:	800d      	strh	r5, [r1, #0]
 8014592:	4463      	add	r3, ip
 8014594:	f8a1 8002 	strh.w	r8, [r1, #2]
 8014598:	f8a1 e004 	strh.w	lr, [r1, #4]
 801459c:	f8a1 e006 	strh.w	lr, [r1, #6]
 80145a0:	d053      	beq.n	801464a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 80145a2:	9901      	ldr	r1, [sp, #4]
 80145a4:	1b12      	subs	r2, r2, r4
 80145a6:	1ac9      	subs	r1, r1, r3
 80145a8:	4461      	add	r1, ip
 80145aa:	0149      	lsls	r1, r1, #5
 80145ac:	fb91 fef4 	sdiv	lr, r1, r4
 80145b0:	fb04 111e 	mls	r1, r4, lr, r1
 80145b4:	2900      	cmp	r1, #0
 80145b6:	bfbc      	itt	lt
 80145b8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80145bc:	1909      	addlt	r1, r1, r4
 80145be:	f10e 0701 	add.w	r7, lr, #1
 80145c2:	970d      	str	r7, [sp, #52]	@ 0x34
 80145c4:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80145c8:	1852      	adds	r2, r2, r1
 80145ca:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80145cc:	bf54      	ite	pl
 80145ce:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 80145d2:	46f4      	movmi	ip, lr
 80145d4:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80145d8:	bf58      	it	pl
 80145da:	1b12      	subpl	r2, r2, r4
 80145dc:	4463      	add	r3, ip
 80145de:	443d      	add	r5, r7
 80145e0:	44e3      	add	fp, ip
 80145e2:	f8aa b004 	strh.w	fp, [sl, #4]
 80145e6:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80145ea:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80145ee:	f8aa b006 	strh.w	fp, [sl, #6]
 80145f2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80145f6:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80145fa:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80145fe:	ea5b 070a 	orrs.w	r7, fp, sl
 8014602:	d014      	beq.n	801462e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014604:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8014608:	f1ba 0f00 	cmp.w	sl, #0
 801460c:	db0f      	blt.n	801462e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801460e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014610:	45ba      	cmp	sl, r7
 8014612:	da0c      	bge.n	801462e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014614:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8014618:	45ba      	cmp	sl, r7
 801461a:	f10a 0a01 	add.w	sl, sl, #1
 801461e:	bf38      	it	cc
 8014620:	f10c 0c08 	addcc.w	ip, ip, #8
 8014624:	f8c0 a008 	str.w	sl, [r0, #8]
 8014628:	bf38      	it	cc
 801462a:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801462e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014632:	f04f 0700 	mov.w	r7, #0
 8014636:	42ae      	cmp	r6, r5
 8014638:	f8ac 5000 	strh.w	r5, [ip]
 801463c:	f8ac 8002 	strh.w	r8, [ip, #2]
 8014640:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014644:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014648:	d1bc      	bne.n	80145c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801464a:	6904      	ldr	r4, [r0, #16]
 801464c:	9a01      	ldr	r2, [sp, #4]
 801464e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014650:	1ad3      	subs	r3, r2, r3
 8014652:	88a2      	ldrh	r2, [r4, #4]
 8014654:	3120      	adds	r1, #32
 8014656:	441a      	add	r2, r3
 8014658:	80a2      	strh	r2, [r4, #4]
 801465a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801465c:	1a89      	subs	r1, r1, r2
 801465e:	88e2      	ldrh	r2, [r4, #6]
 8014660:	fb03 2301 	mla	r3, r3, r1, r2
 8014664:	80e3      	strh	r3, [r4, #6]
 8014666:	e650      	b.n	801430a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014668:	f04f 37ff 	mov.w	r7, #4294967295
 801466c:	434a      	muls	r2, r1
 801466e:	4264      	negs	r4, r4
 8014670:	970a      	str	r7, [sp, #40]	@ 0x28
 8014672:	2700      	movs	r7, #0
 8014674:	e758      	b.n	8014528 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8014676:	ea4f 1867 	mov.w	r8, r7, asr #5
 801467a:	f009 031f 	and.w	r3, r9, #31
 801467e:	f007 071f 	and.w	r7, r7, #31
 8014682:	fa1f fc8c 	uxth.w	ip, ip
 8014686:	45d0      	cmp	r8, sl
 8014688:	930f      	str	r3, [sp, #60]	@ 0x3c
 801468a:	fa1f fe8e 	uxth.w	lr, lr
 801468e:	d10a      	bne.n	80146a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8014690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014692:	449c      	add	ip, r3
 8014694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014696:	441f      	add	r7, r3
 8014698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801469a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801469e:	fb03 e707 	mla	r7, r3, r7, lr
 80146a2:	80ef      	strh	r7, [r5, #6]
 80146a4:	e6bc      	b.n	8014420 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80146a6:	2900      	cmp	r1, #0
 80146a8:	f2c0 80a6 	blt.w	80147f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 80146ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80146ae:	f1c7 0320 	rsb	r3, r7, #32
 80146b2:	4363      	muls	r3, r4
 80146b4:	2401      	movs	r4, #1
 80146b6:	940d      	str	r4, [sp, #52]	@ 0x34
 80146b8:	2420      	movs	r4, #32
 80146ba:	940c      	str	r4, [sp, #48]	@ 0x30
 80146bc:	fb93 f4f1 	sdiv	r4, r3, r1
 80146c0:	fb01 3b14 	mls	fp, r1, r4, r3
 80146c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80146c6:	f1bb 0f00 	cmp.w	fp, #0
 80146ca:	441f      	add	r7, r3
 80146cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80146ce:	bfbc      	itt	lt
 80146d0:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80146d4:	448b      	addlt	fp, r1
 80146d6:	fb04 e707 	mla	r7, r4, r7, lr
 80146da:	44a4      	add	ip, r4
 80146dc:	80ef      	strh	r7, [r5, #6]
 80146de:	f8a5 c004 	strh.w	ip, [r5, #4]
 80146e2:	eb08 0503 	add.w	r5, r8, r3
 80146e6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80146ea:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80146ee:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80146f2:	ea5e 0307 	orrs.w	r3, lr, r7
 80146f6:	d011      	beq.n	801471c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80146f8:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80146fc:	f1be 0f00 	cmp.w	lr, #0
 8014700:	db0c      	blt.n	801471c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014702:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014704:	45be      	cmp	lr, r7
 8014706:	da09      	bge.n	801471c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014708:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801470c:	45be      	cmp	lr, r7
 801470e:	bf3c      	itt	cc
 8014710:	f10c 0708 	addcc.w	r7, ip, #8
 8014714:	6107      	strcc	r7, [r0, #16]
 8014716:	f10e 0701 	add.w	r7, lr, #1
 801471a:	6087      	str	r7, [r0, #8]
 801471c:	6907      	ldr	r7, [r0, #16]
 801471e:	b213      	sxth	r3, r2
 8014720:	4555      	cmp	r5, sl
 8014722:	9310      	str	r3, [sp, #64]	@ 0x40
 8014724:	807b      	strh	r3, [r7, #2]
 8014726:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014728:	803d      	strh	r5, [r7, #0]
 801472a:	80be      	strh	r6, [r7, #4]
 801472c:	eb04 0c03 	add.w	ip, r4, r3
 8014730:	80fe      	strh	r6, [r7, #6]
 8014732:	d050      	beq.n	80147d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8014734:	9b01      	ldr	r3, [sp, #4]
 8014736:	eba3 070c 	sub.w	r7, r3, ip
 801473a:	ebab 0301 	sub.w	r3, fp, r1
 801473e:	443c      	add	r4, r7
 8014740:	9309      	str	r3, [sp, #36]	@ 0x24
 8014742:	0164      	lsls	r4, r4, #5
 8014744:	fb94 f8f1 	sdiv	r8, r4, r1
 8014748:	fb01 4418 	mls	r4, r1, r8, r4
 801474c:	2c00      	cmp	r4, #0
 801474e:	bfbc      	itt	lt
 8014750:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014754:	1864      	addlt	r4, r4, r1
 8014756:	f108 0701 	add.w	r7, r8, #1
 801475a:	9711      	str	r7, [sp, #68]	@ 0x44
 801475c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801475e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014762:	191b      	adds	r3, r3, r4
 8014764:	f8be b004 	ldrh.w	fp, [lr, #4]
 8014768:	bf54      	ite	pl
 801476a:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 801476c:	4647      	movmi	r7, r8
 801476e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014770:	bf58      	it	pl
 8014772:	1a5b      	subpl	r3, r3, r1
 8014774:	44bb      	add	fp, r7
 8014776:	44bc      	add	ip, r7
 8014778:	bf58      	it	pl
 801477a:	9309      	strpl	r3, [sp, #36]	@ 0x24
 801477c:	f8ae b004 	strh.w	fp, [lr, #4]
 8014780:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014784:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014788:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801478a:	f8ae b006 	strh.w	fp, [lr, #6]
 801478e:	443d      	add	r5, r7
 8014790:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014794:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014798:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801479c:	ea5b 0307 	orrs.w	r3, fp, r7
 80147a0:	d011      	beq.n	80147c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80147a2:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80147a6:	f1bb 0f00 	cmp.w	fp, #0
 80147aa:	db0c      	blt.n	80147c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80147ac:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80147ae:	45bb      	cmp	fp, r7
 80147b0:	da09      	bge.n	80147c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80147b2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80147b6:	45bb      	cmp	fp, r7
 80147b8:	bf3c      	itt	cc
 80147ba:	f10e 0708 	addcc.w	r7, lr, #8
 80147be:	6107      	strcc	r7, [r0, #16]
 80147c0:	f10b 0701 	add.w	r7, fp, #1
 80147c4:	6087      	str	r7, [r0, #8]
 80147c6:	6907      	ldr	r7, [r0, #16]
 80147c8:	4555      	cmp	r5, sl
 80147ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80147cc:	803d      	strh	r5, [r7, #0]
 80147ce:	807b      	strh	r3, [r7, #2]
 80147d0:	80be      	strh	r6, [r7, #4]
 80147d2:	80fe      	strh	r6, [r7, #6]
 80147d4:	d1c2      	bne.n	801475c <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80147d6:	9b01      	ldr	r3, [sp, #4]
 80147d8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80147da:	eba3 0c0c 	sub.w	ip, r3, ip
 80147de:	6903      	ldr	r3, [r0, #16]
 80147e0:	3720      	adds	r7, #32
 80147e2:	8899      	ldrh	r1, [r3, #4]
 80147e4:	4461      	add	r1, ip
 80147e6:	8099      	strh	r1, [r3, #4]
 80147e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80147ea:	1a7f      	subs	r7, r7, r1
 80147ec:	88d9      	ldrh	r1, [r3, #6]
 80147ee:	fb0c 1c07 	mla	ip, ip, r7, r1
 80147f2:	f8a3 c006 	strh.w	ip, [r3, #6]
 80147f6:	e613      	b.n	8014420 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80147f8:	f04f 34ff 	mov.w	r4, #4294967295
 80147fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80147fe:	4249      	negs	r1, r1
 8014800:	940d      	str	r4, [sp, #52]	@ 0x34
 8014802:	2400      	movs	r4, #0
 8014804:	437b      	muls	r3, r7
 8014806:	e758      	b.n	80146ba <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8014808:	9905      	ldr	r1, [sp, #20]
 801480a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801480e:	f009 0c1f 	and.w	ip, r9, #31
 8014812:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8014816:	f001 011f 	and.w	r1, r1, #31
 801481a:	45f3      	cmp	fp, lr
 801481c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8014820:	9102      	str	r1, [sp, #8]
 8014822:	9904      	ldr	r1, [sp, #16]
 8014824:	eba1 0406 	sub.w	r4, r1, r6
 8014828:	d108      	bne.n	801483c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801482a:	9b02      	ldr	r3, [sp, #8]
 801482c:	44a0      	add	r8, r4
 801482e:	449c      	add	ip, r3
 8014830:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014834:	fb04 a40c 	mla	r4, r4, ip, sl
 8014838:	80fc      	strh	r4, [r7, #6]
 801483a:	e461      	b.n	8014100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801483c:	9905      	ldr	r1, [sp, #20]
 801483e:	ebb1 0109 	subs.w	r1, r1, r9
 8014842:	bf51      	iteee	pl
 8014844:	f1cc 0520 	rsbpl	r5, ip, #32
 8014848:	fb04 f40c 	mulmi.w	r4, r4, ip
 801484c:	4249      	negmi	r1, r1
 801484e:	2500      	movmi	r5, #0
 8014850:	bf5d      	ittte	pl
 8014852:	436c      	mulpl	r4, r5
 8014854:	2520      	movpl	r5, #32
 8014856:	f04f 0901 	movpl.w	r9, #1
 801485a:	f04f 39ff 	movmi.w	r9, #4294967295
 801485e:	9501      	str	r5, [sp, #4]
 8014860:	9b01      	ldr	r3, [sp, #4]
 8014862:	fb94 f5f1 	sdiv	r5, r4, r1
 8014866:	fb01 4415 	mls	r4, r1, r5, r4
 801486a:	449c      	add	ip, r3
 801486c:	eb0b 0309 	add.w	r3, fp, r9
 8014870:	2c00      	cmp	r4, #0
 8014872:	bfbc      	itt	lt
 8014874:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8014878:	1864      	addlt	r4, r4, r1
 801487a:	44a8      	add	r8, r5
 801487c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014880:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014884:	f8a7 c006 	strh.w	ip, [r7, #6]
 8014888:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801488c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014890:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014894:	ea58 0707 	orrs.w	r7, r8, r7
 8014898:	d011      	beq.n	80148be <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801489a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801489e:	f1b8 0f00 	cmp.w	r8, #0
 80148a2:	db0c      	blt.n	80148be <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80148a4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80148a6:	45b8      	cmp	r8, r7
 80148a8:	da09      	bge.n	80148be <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80148aa:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80148ae:	45b8      	cmp	r8, r7
 80148b0:	bf3c      	itt	cc
 80148b2:	f10c 0708 	addcc.w	r7, ip, #8
 80148b6:	6107      	strcc	r7, [r0, #16]
 80148b8:	f108 0701 	add.w	r7, r8, #1
 80148bc:	6087      	str	r7, [r0, #8]
 80148be:	6907      	ldr	r7, [r0, #16]
 80148c0:	f04f 0c00 	mov.w	ip, #0
 80148c4:	b212      	sxth	r2, r2
 80148c6:	459e      	cmp	lr, r3
 80148c8:	803b      	strh	r3, [r7, #0]
 80148ca:	442e      	add	r6, r5
 80148cc:	807a      	strh	r2, [r7, #2]
 80148ce:	f8a7 c004 	strh.w	ip, [r7, #4]
 80148d2:	f8a7 c006 	strh.w	ip, [r7, #6]
 80148d6:	d04b      	beq.n	8014970 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80148d8:	9f04      	ldr	r7, [sp, #16]
 80148da:	1a64      	subs	r4, r4, r1
 80148dc:	f04f 0a00 	mov.w	sl, #0
 80148e0:	1bbf      	subs	r7, r7, r6
 80148e2:	443d      	add	r5, r7
 80148e4:	016d      	lsls	r5, r5, #5
 80148e6:	fb95 f8f1 	sdiv	r8, r5, r1
 80148ea:	fb01 5518 	mls	r5, r1, r8, r5
 80148ee:	4565      	cmp	r5, ip
 80148f0:	bfbc      	itt	lt
 80148f2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80148f6:	186d      	addlt	r5, r5, r1
 80148f8:	f108 0701 	add.w	r7, r8, #1
 80148fc:	9703      	str	r7, [sp, #12]
 80148fe:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014902:	1964      	adds	r4, r4, r5
 8014904:	444b      	add	r3, r9
 8014906:	bf54      	ite	pl
 8014908:	9f03      	ldrpl	r7, [sp, #12]
 801490a:	4647      	movmi	r7, r8
 801490c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014910:	bf58      	it	pl
 8014912:	1a64      	subpl	r4, r4, r1
 8014914:	443e      	add	r6, r7
 8014916:	44bb      	add	fp, r7
 8014918:	f8ac b004 	strh.w	fp, [ip, #4]
 801491c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014920:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014924:	f8ac b006 	strh.w	fp, [ip, #6]
 8014928:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801492c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014930:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014934:	ea5b 0707 	orrs.w	r7, fp, r7
 8014938:	d011      	beq.n	801495e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801493a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801493e:	f1bb 0f00 	cmp.w	fp, #0
 8014942:	db0c      	blt.n	801495e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014944:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014946:	45bb      	cmp	fp, r7
 8014948:	da09      	bge.n	801495e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801494a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801494e:	45bb      	cmp	fp, r7
 8014950:	bf3c      	itt	cc
 8014952:	f10c 0708 	addcc.w	r7, ip, #8
 8014956:	6107      	strcc	r7, [r0, #16]
 8014958:	f10b 0701 	add.w	r7, fp, #1
 801495c:	6087      	str	r7, [r0, #8]
 801495e:	6907      	ldr	r7, [r0, #16]
 8014960:	459e      	cmp	lr, r3
 8014962:	803b      	strh	r3, [r7, #0]
 8014964:	807a      	strh	r2, [r7, #2]
 8014966:	f8a7 a004 	strh.w	sl, [r7, #4]
 801496a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801496e:	d1c6      	bne.n	80148fe <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8014970:	9b04      	ldr	r3, [sp, #16]
 8014972:	1b9e      	subs	r6, r3, r6
 8014974:	6903      	ldr	r3, [r0, #16]
 8014976:	889a      	ldrh	r2, [r3, #4]
 8014978:	4432      	add	r2, r6
 801497a:	809a      	strh	r2, [r3, #4]
 801497c:	9a02      	ldr	r2, [sp, #8]
 801497e:	f102 0c20 	add.w	ip, r2, #32
 8014982:	9a01      	ldr	r2, [sp, #4]
 8014984:	ebac 0c02 	sub.w	ip, ip, r2
 8014988:	88da      	ldrh	r2, [r3, #6]
 801498a:	fb06 260c 	mla	r6, r6, ip, r2
 801498e:	80de      	strh	r6, [r3, #6]
 8014990:	f7ff bbb6 	b.w	8014100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08014994 <_ZN8touchgfx7Outline6lineToEii>:
 8014994:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014996:	079b      	lsls	r3, r3, #30
 8014998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801499a:	460e      	mov	r6, r1
 801499c:	4615      	mov	r5, r2
 801499e:	d511      	bpl.n	80149c4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80149a0:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80149a4:	ea86 0701 	eor.w	r7, r6, r1
 80149a8:	ea85 0302 	eor.w	r3, r5, r2
 80149ac:	433b      	orrs	r3, r7
 80149ae:	d009      	beq.n	80149c4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80149b0:	4633      	mov	r3, r6
 80149b2:	9500      	str	r5, [sp, #0]
 80149b4:	f7ff fb4c 	bl	8014050 <_ZN8touchgfx7Outline10renderLineEiiii>
 80149b8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80149ba:	f043 0301 	orr.w	r3, r3, #1
 80149be:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80149c2:	6243      	str	r3, [r0, #36]	@ 0x24
 80149c4:	b003      	add	sp, #12
 80149c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080149c8 <_ZN8touchgfx7Outline6moveToEii>:
 80149c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ca:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80149cc:	4615      	mov	r5, r2
 80149ce:	4604      	mov	r4, r0
 80149d0:	460e      	mov	r6, r1
 80149d2:	079a      	lsls	r2, r3, #30
 80149d4:	d401      	bmi.n	80149da <_ZN8touchgfx7Outline6moveToEii+0x12>
 80149d6:	f7ff fb07 	bl	8013fe8 <_ZN8touchgfx7Outline5resetEv>
 80149da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80149dc:	07db      	lsls	r3, r3, #31
 80149de:	d504      	bpl.n	80149ea <_ZN8touchgfx7Outline6moveToEii+0x22>
 80149e0:	4620      	mov	r0, r4
 80149e2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80149e6:	f7ff ffd5 	bl	8014994 <_ZN8touchgfx7Outline6lineToEii>
 80149ea:	6923      	ldr	r3, [r4, #16]
 80149ec:	1170      	asrs	r0, r6, #5
 80149ee:	1169      	asrs	r1, r5, #5
 80149f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80149f4:	4290      	cmp	r0, r2
 80149f6:	d103      	bne.n	8014a00 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80149f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80149fc:	4291      	cmp	r1, r2
 80149fe:	d01a      	beq.n	8014a36 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8014a00:	88df      	ldrh	r7, [r3, #6]
 8014a02:	889a      	ldrh	r2, [r3, #4]
 8014a04:	433a      	orrs	r2, r7
 8014a06:	d010      	beq.n	8014a2a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014a08:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014a0c:	2a00      	cmp	r2, #0
 8014a0e:	db0c      	blt.n	8014a2a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014a10:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8014a12:	42ba      	cmp	r2, r7
 8014a14:	da09      	bge.n	8014a2a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014a16:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8014a1a:	42ba      	cmp	r2, r7
 8014a1c:	f102 0201 	add.w	r2, r2, #1
 8014a20:	bf38      	it	cc
 8014a22:	3308      	addcc	r3, #8
 8014a24:	60a2      	str	r2, [r4, #8]
 8014a26:	bf38      	it	cc
 8014a28:	6123      	strcc	r3, [r4, #16]
 8014a2a:	6923      	ldr	r3, [r4, #16]
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	8018      	strh	r0, [r3, #0]
 8014a30:	8059      	strh	r1, [r3, #2]
 8014a32:	809a      	strh	r2, [r3, #4]
 8014a34:	80da      	strh	r2, [r3, #6]
 8014a36:	6166      	str	r6, [r4, #20]
 8014a38:	6225      	str	r5, [r4, #32]
 8014a3a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014a40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8014a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a44:	b0d0      	sub	sp, #320	@ 0x140
 8014a46:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8014a4a:	466c      	mov	r4, sp
 8014a4c:	4627      	mov	r7, r4
 8014a4e:	1a0d      	subs	r5, r1, r0
 8014a50:	f100 0308 	add.w	r3, r0, #8
 8014a54:	2d48      	cmp	r5, #72	@ 0x48
 8014a56:	f340 80d5 	ble.w	8014c04 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8014a5a:	112d      	asrs	r5, r5, #4
 8014a5c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014a60:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014a64:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8014a68:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8014a6c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014a70:	6816      	ldr	r6, [r2, #0]
 8014a72:	6006      	str	r6, [r0, #0]
 8014a74:	6856      	ldr	r6, [r2, #4]
 8014a76:	6046      	str	r6, [r0, #4]
 8014a78:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014a7c:	f8a2 8002 	strh.w	r8, [r2, #2]
 8014a80:	f8a2 e004 	strh.w	lr, [r2, #4]
 8014a84:	f8a2 c006 	strh.w	ip, [r2, #6]
 8014a88:	f1a1 0208 	sub.w	r2, r1, #8
 8014a8c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014a90:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8014a94:	4565      	cmp	r5, ip
 8014a96:	db06      	blt.n	8014aa6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8014a98:	d119      	bne.n	8014ace <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8014a9a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8014a9e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8014aa2:	42ae      	cmp	r6, r5
 8014aa4:	dd13      	ble.n	8014ace <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8014aa6:	460e      	mov	r6, r1
 8014aa8:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8014aac:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8014ab0:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014ab4:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8014ab8:	601d      	str	r5, [r3, #0]
 8014aba:	6875      	ldr	r5, [r6, #4]
 8014abc:	605d      	str	r5, [r3, #4]
 8014abe:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014ac2:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014ac6:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014aca:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014ace:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014ad2:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8014ad6:	42ae      	cmp	r6, r5
 8014ad8:	db06      	blt.n	8014ae8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8014ada:	d116      	bne.n	8014b0a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014adc:	f9b0 c000 	ldrsh.w	ip, [r0]
 8014ae0:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8014ae4:	45ac      	cmp	ip, r5
 8014ae6:	da10      	bge.n	8014b0a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014ae8:	681d      	ldr	r5, [r3, #0]
 8014aea:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014aee:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014af2:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014af6:	6005      	str	r5, [r0, #0]
 8014af8:	685d      	ldr	r5, [r3, #4]
 8014afa:	f8a0 8008 	strh.w	r8, [r0, #8]
 8014afe:	6045      	str	r5, [r0, #4]
 8014b00:	8146      	strh	r6, [r0, #10]
 8014b02:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8014b06:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014b0a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014b0e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014b12:	4565      	cmp	r5, ip
 8014b14:	db06      	blt.n	8014b24 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8014b16:	d119      	bne.n	8014b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014b18:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8014b1c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014b20:	42ae      	cmp	r6, r5
 8014b22:	da13      	bge.n	8014b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014b24:	460e      	mov	r6, r1
 8014b26:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014b2a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8014b2e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014b32:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8014b36:	6005      	str	r5, [r0, #0]
 8014b38:	6875      	ldr	r5, [r6, #4]
 8014b3a:	6045      	str	r5, [r0, #4]
 8014b3c:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014b40:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014b44:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014b48:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014b4c:	3308      	adds	r3, #8
 8014b4e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014b52:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8014b56:	45e6      	cmp	lr, ip
 8014b58:	dbf8      	blt.n	8014b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014b5a:	d105      	bne.n	8014b68 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014b5c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014b60:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014b64:	42ae      	cmp	r6, r5
 8014b66:	dbf1      	blt.n	8014b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014b68:	4615      	mov	r5, r2
 8014b6a:	3a08      	subs	r2, #8
 8014b6c:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8014b70:	45b4      	cmp	ip, r6
 8014b72:	dbf9      	blt.n	8014b68 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014b74:	d105      	bne.n	8014b82 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8014b76:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014b7a:	f9b2 6000 	ldrsh.w	r6, [r2]
 8014b7e:	45b0      	cmp	r8, r6
 8014b80:	dbf2      	blt.n	8014b68 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014b82:	4293      	cmp	r3, r2
 8014b84:	f1a5 0608 	sub.w	r6, r5, #8
 8014b88:	d816      	bhi.n	8014bb8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8014b8a:	f8d6 c000 	ldr.w	ip, [r6]
 8014b8e:	f9b3 a000 	ldrsh.w	sl, [r3]
 8014b92:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8014b96:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8014b9a:	f8c3 c000 	str.w	ip, [r3]
 8014b9e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8014ba2:	f8c3 c004 	str.w	ip, [r3, #4]
 8014ba6:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014baa:	f825 ec06 	strh.w	lr, [r5, #-6]
 8014bae:	f825 9c04 	strh.w	r9, [r5, #-4]
 8014bb2:	f825 8c02 	strh.w	r8, [r5, #-2]
 8014bb6:	e7c9      	b.n	8014b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014bb8:	f8d6 e000 	ldr.w	lr, [r6]
 8014bbc:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014bc0:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8014bc4:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8014bc8:	f8c0 e000 	str.w	lr, [r0]
 8014bcc:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8014bd0:	1a16      	subs	r6, r2, r0
 8014bd2:	f8c0 e004 	str.w	lr, [r0, #4]
 8014bd6:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014bda:	f825 cc06 	strh.w	ip, [r5, #-6]
 8014bde:	f825 9c04 	strh.w	r9, [r5, #-4]
 8014be2:	f825 8c02 	strh.w	r8, [r5, #-2]
 8014be6:	1acd      	subs	r5, r1, r3
 8014be8:	10ed      	asrs	r5, r5, #3
 8014bea:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8014bee:	bfb5      	itete	lt
 8014bf0:	e9c4 0200 	strdlt	r0, r2, [r4]
 8014bf4:	e9c4 3100 	strdge	r3, r1, [r4]
 8014bf8:	460a      	movlt	r2, r1
 8014bfa:	4603      	movge	r3, r0
 8014bfc:	3408      	adds	r4, #8
 8014bfe:	4618      	mov	r0, r3
 8014c00:	4611      	mov	r1, r2
 8014c02:	e724      	b.n	8014a4e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8014c04:	4299      	cmp	r1, r3
 8014c06:	d927      	bls.n	8014c58 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8014c08:	f1a3 0210 	sub.w	r2, r3, #16
 8014c0c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8014c10:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8014c14:	45ac      	cmp	ip, r5
 8014c16:	db06      	blt.n	8014c26 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8014c18:	d11c      	bne.n	8014c54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8014c1a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8014c1e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8014c22:	42ae      	cmp	r6, r5
 8014c24:	da16      	bge.n	8014c54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8014c26:	4615      	mov	r5, r2
 8014c28:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8014c2c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8014c30:	3a08      	subs	r2, #8
 8014c32:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8014c36:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8014c3a:	6196      	str	r6, [r2, #24]
 8014c3c:	42a8      	cmp	r0, r5
 8014c3e:	686e      	ldr	r6, [r5, #4]
 8014c40:	f8a2 9010 	strh.w	r9, [r2, #16]
 8014c44:	61d6      	str	r6, [r2, #28]
 8014c46:	f8a2 c012 	strh.w	ip, [r2, #18]
 8014c4a:	f8a2 8014 	strh.w	r8, [r2, #20]
 8014c4e:	f8a2 e016 	strh.w	lr, [r2, #22]
 8014c52:	d1db      	bne.n	8014c0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8014c54:	3308      	adds	r3, #8
 8014c56:	e7d5      	b.n	8014c04 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8014c58:	42bc      	cmp	r4, r7
 8014c5a:	d903      	bls.n	8014c64 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8014c5c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8014c60:	3c08      	subs	r4, #8
 8014c62:	e6f4      	b.n	8014a4e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8014c64:	b050      	add	sp, #320	@ 0x140
 8014c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014c6a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8014c6a:	b510      	push	{r4, lr}
 8014c6c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014c6e:	4604      	mov	r4, r0
 8014c70:	07da      	lsls	r2, r3, #31
 8014c72:	d507      	bpl.n	8014c84 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8014c74:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8014c78:	f7ff fe8c 	bl	8014994 <_ZN8touchgfx7Outline6lineToEii>
 8014c7c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014c7e:	f023 0301 	bic.w	r3, r3, #1
 8014c82:	6243      	str	r3, [r0, #36]	@ 0x24
 8014c84:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014c86:	079b      	lsls	r3, r3, #30
 8014c88:	d521      	bpl.n	8014cce <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8014c8a:	6923      	ldr	r3, [r4, #16]
 8014c8c:	88d9      	ldrh	r1, [r3, #6]
 8014c8e:	889a      	ldrh	r2, [r3, #4]
 8014c90:	430a      	orrs	r2, r1
 8014c92:	d010      	beq.n	8014cb6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014c94:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014c98:	2a00      	cmp	r2, #0
 8014c9a:	db0c      	blt.n	8014cb6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014c9c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014c9e:	428a      	cmp	r2, r1
 8014ca0:	da09      	bge.n	8014cb6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014ca2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8014ca6:	4291      	cmp	r1, r2
 8014ca8:	f102 0201 	add.w	r2, r2, #1
 8014cac:	bf88      	it	hi
 8014cae:	3308      	addhi	r3, #8
 8014cb0:	60a2      	str	r2, [r4, #8]
 8014cb2:	bf88      	it	hi
 8014cb4:	6123      	strhi	r3, [r4, #16]
 8014cb6:	68a1      	ldr	r1, [r4, #8]
 8014cb8:	b129      	cbz	r1, 8014cc6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014cba:	6863      	ldr	r3, [r4, #4]
 8014cbc:	4299      	cmp	r1, r3
 8014cbe:	d802      	bhi.n	8014cc6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014cc0:	68e0      	ldr	r0, [r4, #12]
 8014cc2:	f7ff febd 	bl	8014a40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8014cc6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014cc8:	f023 0302 	bic.w	r3, r3, #2
 8014ccc:	6263      	str	r3, [r4, #36]	@ 0x24
 8014cce:	68e0      	ldr	r0, [r4, #12]
 8014cd0:	bd10      	pop	{r4, pc}
	...

08014cd4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8014cd4:	4b02      	ldr	r3, [pc, #8]	@ (8014ce0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8014cd6:	6018      	str	r0, [r3, #0]
 8014cd8:	4b02      	ldr	r3, [pc, #8]	@ (8014ce4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8014cda:	6019      	str	r1, [r3, #0]
 8014cdc:	4770      	bx	lr
 8014cde:	bf00      	nop
 8014ce0:	24028e34 	.word	0x24028e34
 8014ce4:	24028e38 	.word	0x24028e38

08014ce8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8014ce8:	2300      	movs	r3, #0
 8014cea:	4a02      	ldr	r2, [pc, #8]	@ (8014cf4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8014cec:	6013      	str	r3, [r2, #0]
 8014cee:	4a02      	ldr	r2, [pc, #8]	@ (8014cf8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8014cf0:	6013      	str	r3, [r2, #0]
 8014cf2:	4770      	bx	lr
 8014cf4:	24028e34 	.word	0x24028e34
 8014cf8:	24028e38 	.word	0x24028e38

08014cfc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8014cfc:	4b01      	ldr	r3, [pc, #4]	@ (8014d04 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8014cfe:	6818      	ldr	r0, [r3, #0]
 8014d00:	4770      	bx	lr
 8014d02:	bf00      	nop
 8014d04:	24028e34 	.word	0x24028e34

08014d08 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8014d08:	4b01      	ldr	r3, [pc, #4]	@ (8014d10 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8014d0a:	6818      	ldr	r0, [r3, #0]
 8014d0c:	4770      	bx	lr
 8014d0e:	bf00      	nop
 8014d10:	24028e38 	.word	0x24028e38

08014d14 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8014d14:	b510      	push	{r4, lr}
 8014d16:	6803      	ldr	r3, [r0, #0]
 8014d18:	460c      	mov	r4, r1
 8014d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d1c:	4798      	blx	r3
 8014d1e:	1b03      	subs	r3, r0, r4
 8014d20:	4258      	negs	r0, r3
 8014d22:	4158      	adcs	r0, r3
 8014d24:	bd10      	pop	{r4, pc}
	...

08014d28 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8014d28:	4b01      	ldr	r3, [pc, #4]	@ (8014d30 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8014d2a:	6019      	str	r1, [r3, #0]
 8014d2c:	4770      	bx	lr
 8014d2e:	bf00      	nop
 8014d30:	24028e3c 	.word	0x24028e3c

08014d34 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d38:	4696      	mov	lr, r2
 8014d3a:	b097      	sub	sp, #92	@ 0x5c
 8014d3c:	4605      	mov	r5, r0
 8014d3e:	4614      	mov	r4, r2
 8014d40:	460e      	mov	r6, r1
 8014d42:	461f      	mov	r7, r3
 8014d44:	f10d 0c1c 	add.w	ip, sp, #28
 8014d48:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8014d4c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8014d50:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8014d54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d5c:	f8de 3000 	ldr.w	r3, [lr]
 8014d60:	f104 0e14 	add.w	lr, r4, #20
 8014d64:	f8cc 3000 	str.w	r3, [ip]
 8014d68:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014d6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d74:	f8de 3000 	ldr.w	r3, [lr]
 8014d78:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8014d7c:	f8cc 3000 	str.w	r3, [ip]
 8014d80:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8014d84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d8c:	f8de 3000 	ldr.w	r3, [lr]
 8014d90:	4631      	mov	r1, r6
 8014d92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014d94:	4628      	mov	r0, r5
 8014d96:	f8cc 3000 	str.w	r3, [ip]
 8014d9a:	682b      	ldr	r3, [r5, #0]
 8014d9c:	9201      	str	r2, [sp, #4]
 8014d9e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014da0:	f8cd 8008 	str.w	r8, [sp, #8]
 8014da4:	9200      	str	r2, [sp, #0]
 8014da6:	aa07      	add	r2, sp, #28
 8014da8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014dac:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8014db0:	463b      	mov	r3, r7
 8014db2:	47d8      	blx	fp
 8014db4:	46a6      	mov	lr, r4
 8014db6:	f10d 0c1c 	add.w	ip, sp, #28
 8014dba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014dbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014dc2:	f8de 3000 	ldr.w	r3, [lr]
 8014dc6:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8014dca:	343c      	adds	r4, #60	@ 0x3c
 8014dcc:	f8cc 3000 	str.w	r3, [ip]
 8014dd0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014dd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014dd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ddc:	f8de 3000 	ldr.w	r3, [lr]
 8014de0:	f8cc 3000 	str.w	r3, [ip]
 8014de4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8014de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014dee:	6823      	ldr	r3, [r4, #0]
 8014df0:	4631      	mov	r1, r6
 8014df2:	4628      	mov	r0, r5
 8014df4:	f8cc 3000 	str.w	r3, [ip]
 8014df8:	682b      	ldr	r3, [r5, #0]
 8014dfa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014dfe:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014e00:	f8cd 8008 	str.w	r8, [sp, #8]
 8014e04:	9201      	str	r2, [sp, #4]
 8014e06:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014e08:	9200      	str	r2, [sp, #0]
 8014e0a:	aa07      	add	r2, sp, #28
 8014e0c:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8014e0e:	463b      	mov	r3, r7
 8014e10:	47a0      	blx	r4
 8014e12:	b017      	add	sp, #92	@ 0x5c
 8014e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e18 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e1c:	b08d      	sub	sp, #52	@ 0x34
 8014e1e:	4688      	mov	r8, r1
 8014e20:	f8d3 c000 	ldr.w	ip, [r3]
 8014e24:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8014e26:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8014e2a:	680f      	ldr	r7, [r1, #0]
 8014e2c:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8014e30:	eba7 070c 	sub.w	r7, r7, ip
 8014e34:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8014e38:	edd3 6a07 	vldr	s13, [r3, #28]
 8014e3c:	42bc      	cmp	r4, r7
 8014e3e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014e40:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8014e44:	bfa8      	it	ge
 8014e46:	463c      	movge	r4, r7
 8014e48:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014e4c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014e50:	ee07 4a90 	vmov	s15, r4
 8014e54:	eb09 0e0c 	add.w	lr, r9, ip
 8014e58:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8014e5c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014e60:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8014e64:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8014e68:	4571      	cmp	r1, lr
 8014e6a:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014e6e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014e72:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014e76:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014e7a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014e7e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014e82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014e86:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014e8a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014e8e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014e92:	f340 808c 	ble.w	8014fae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8014e96:	eba1 060e 	sub.w	r6, r1, lr
 8014e9a:	fb96 f5f4 	sdiv	r5, r6, r4
 8014e9e:	ee07 5a10 	vmov	s14, r5
 8014ea2:	2d00      	cmp	r5, #0
 8014ea4:	fb04 6615 	mls	r6, r4, r5, r6
 8014ea8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014eac:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014eb0:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014eb4:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014eb8:	dd12      	ble.n	8014ee0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8014eba:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014ebe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014ec2:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014ec6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ece:	bf14      	ite	ne
 8014ed0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014ed4:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014ed8:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014edc:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014ee0:	fb05 f204 	mul.w	r2, r5, r4
 8014ee4:	1abf      	subs	r7, r7, r2
 8014ee6:	4494      	add	ip, r2
 8014ee8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014eec:	4411      	add	r1, r2
 8014eee:	eb09 020c 	add.w	r2, r9, ip
 8014ef2:	b209      	sxth	r1, r1
 8014ef4:	443a      	add	r2, r7
 8014ef6:	428a      	cmp	r2, r1
 8014ef8:	bfc4      	itt	gt
 8014efa:	eba1 0209 	subgt.w	r2, r1, r9
 8014efe:	eba2 070c 	subgt.w	r7, r2, ip
 8014f02:	2f00      	cmp	r7, #0
 8014f04:	dd50      	ble.n	8014fa8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8014f06:	fb97 f1f4 	sdiv	r1, r7, r4
 8014f0a:	fb04 7211 	mls	r2, r4, r1, r7
 8014f0e:	b90a      	cbnz	r2, 8014f14 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014f10:	3901      	subs	r1, #1
 8014f12:	4622      	mov	r2, r4
 8014f14:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014f18:	6840      	ldr	r0, [r0, #4]
 8014f1a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8014f1e:	44b6      	add	lr, r6
 8014f20:	f8d0 a000 	ldr.w	sl, [r0]
 8014f24:	2900      	cmp	r1, #0
 8014f26:	bfcc      	ite	gt
 8014f28:	46a1      	movgt	r9, r4
 8014f2a:	4691      	movle	r9, r2
 8014f2c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014f2e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014f30:	fb04 e505 	mla	r5, r4, r5, lr
 8014f34:	eef0 6a42 	vmov.f32	s13, s4
 8014f38:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014f3c:	9008      	str	r0, [sp, #32]
 8014f3e:	eeb0 7a61 	vmov.f32	s14, s3
 8014f42:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8014f44:	695b      	ldr	r3, [r3, #20]
 8014f46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014f4a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014f4e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014f52:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014f54:	445b      	add	r3, fp
 8014f56:	9307      	str	r3, [sp, #28]
 8014f58:	ee16 3a90 	vmov	r3, s13
 8014f5c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014f60:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014f64:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014f68:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014f6c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014f70:	ee17 7a90 	vmov	r7, s15
 8014f74:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014f78:	fb97 f7f4 	sdiv	r7, r7, r4
 8014f7c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014f80:	ee17 ca90 	vmov	ip, s15
 8014f84:	fb9c fcf4 	sdiv	ip, ip, r4
 8014f88:	fb0c 3306 	mla	r3, ip, r6, r3
 8014f8c:	9302      	str	r3, [sp, #8]
 8014f8e:	ee17 3a10 	vmov	r3, s14
 8014f92:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014f96:	fb07 3706 	mla	r7, r7, r6, r3
 8014f9a:	eba9 0306 	sub.w	r3, r9, r6
 8014f9e:	e9cd 4700 	strd	r4, r7, [sp]
 8014fa2:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014fa6:	47a0      	blx	r4
 8014fa8:	b00d      	add	sp, #52	@ 0x34
 8014faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fae:	2500      	movs	r5, #0
 8014fb0:	462e      	mov	r6, r5
 8014fb2:	e799      	b.n	8014ee8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014fb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fb8:	b0db      	sub	sp, #364	@ 0x16c
 8014fba:	461d      	mov	r5, r3
 8014fbc:	4614      	mov	r4, r2
 8014fbe:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8014fc2:	910f      	str	r1, [sp, #60]	@ 0x3c
 8014fc4:	4629      	mov	r1, r5
 8014fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8014fc8:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8014fcc:	9009      	str	r0, [sp, #36]	@ 0x24
 8014fce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014fd0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8014fd4:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8014fd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8014fda:	6803      	ldr	r3, [r0, #0]
 8014fdc:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8014fde:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014fe2:	47b8      	blx	r7
 8014fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014fe6:	6058      	str	r0, [r3, #4]
 8014fe8:	2800      	cmp	r0, #0
 8014fea:	f000 83a1 	beq.w	8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fee:	682b      	ldr	r3, [r5, #0]
 8014ff0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8014ff4:	ed94 7a02 	vldr	s14, [r4, #8]
 8014ff8:	9314      	str	r3, [sp, #80]	@ 0x50
 8014ffa:	686b      	ldr	r3, [r5, #4]
 8014ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015000:	9315      	str	r3, [sp, #84]	@ 0x54
 8015002:	4bc1      	ldr	r3, [pc, #772]	@ (8015308 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015004:	7819      	ldrb	r1, [r3, #0]
 8015006:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801500a:	2900      	cmp	r1, #0
 801500c:	bf16      	itet	ne
 801500e:	4619      	movne	r1, r3
 8015010:	4611      	moveq	r1, r2
 8015012:	4613      	movne	r3, r2
 8015014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015018:	9116      	str	r1, [sp, #88]	@ 0x58
 801501a:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801501e:	f240 8387 	bls.w	8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015022:	ed94 7a07 	vldr	s14, [r4, #28]
 8015026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801502a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801502e:	f240 837f 	bls.w	8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015032:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8015036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801503a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801503e:	f240 8377 	bls.w	8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015042:	6822      	ldr	r2, [r4, #0]
 8015044:	4bb1      	ldr	r3, [pc, #708]	@ (801530c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015046:	429a      	cmp	r2, r3
 8015048:	f2c0 8372 	blt.w	8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801504c:	49b0      	ldr	r1, [pc, #704]	@ (8015310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801504e:	6963      	ldr	r3, [r4, #20]
 8015050:	428a      	cmp	r2, r1
 8015052:	f300 836d 	bgt.w	8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015056:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801505a:	48ae      	ldr	r0, [pc, #696]	@ (8015314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801505c:	33ff      	adds	r3, #255	@ 0xff
 801505e:	4283      	cmp	r3, r0
 8015060:	f200 8366 	bhi.w	8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015064:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015066:	4dac      	ldr	r5, [pc, #688]	@ (8015318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015068:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801506c:	33ff      	adds	r3, #255	@ 0xff
 801506e:	42ab      	cmp	r3, r5
 8015070:	f200 835e 	bhi.w	8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015074:	6862      	ldr	r2, [r4, #4]
 8015076:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801507a:	33ff      	adds	r3, #255	@ 0xff
 801507c:	4283      	cmp	r3, r0
 801507e:	f200 8357 	bhi.w	8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015082:	69a1      	ldr	r1, [r4, #24]
 8015084:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8015088:	33ff      	adds	r3, #255	@ 0xff
 801508a:	4283      	cmp	r3, r0
 801508c:	f200 8350 	bhi.w	8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015090:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8015092:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8015096:	30ff      	adds	r0, #255	@ 0xff
 8015098:	42a8      	cmp	r0, r5
 801509a:	f200 8349 	bhi.w	8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801509e:	428a      	cmp	r2, r1
 80150a0:	f280 8110 	bge.w	80152c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80150a4:	429a      	cmp	r2, r3
 80150a6:	f300 8119 	bgt.w	80152dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80150aa:	4299      	cmp	r1, r3
 80150ac:	f280 811d 	bge.w	80152ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80150b0:	2502      	movs	r5, #2
 80150b2:	2701      	movs	r7, #1
 80150b4:	46a9      	mov	r9, r5
 80150b6:	46b8      	mov	r8, r7
 80150b8:	f04f 0a00 	mov.w	sl, #0
 80150bc:	4621      	mov	r1, r4
 80150be:	a849      	add	r0, sp, #292	@ 0x124
 80150c0:	f004 f946 	bl	8019350 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80150c4:	4622      	mov	r2, r4
 80150c6:	4653      	mov	r3, sl
 80150c8:	a949      	add	r1, sp, #292	@ 0x124
 80150ca:	f8cd 9000 	str.w	r9, [sp]
 80150ce:	a819      	add	r0, sp, #100	@ 0x64
 80150d0:	f004 fa6e 	bl	80195b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80150d4:	4622      	mov	r2, r4
 80150d6:	4653      	mov	r3, sl
 80150d8:	a949      	add	r1, sp, #292	@ 0x124
 80150da:	f8cd 8000 	str.w	r8, [sp]
 80150de:	a829      	add	r0, sp, #164	@ 0xa4
 80150e0:	f004 fa66 	bl	80195b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80150e4:	4643      	mov	r3, r8
 80150e6:	4622      	mov	r2, r4
 80150e8:	a949      	add	r1, sp, #292	@ 0x124
 80150ea:	f8cd 9000 	str.w	r9, [sp]
 80150ee:	a839      	add	r0, sp, #228	@ 0xe4
 80150f0:	f004 fa5e 	bl	80195b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80150f4:	42af      	cmp	r7, r5
 80150f6:	af12      	add	r7, sp, #72	@ 0x48
 80150f8:	bfb7      	itett	lt
 80150fa:	2300      	movlt	r3, #0
 80150fc:	2301      	movge	r3, #1
 80150fe:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8015100:	ac19      	addlt	r4, sp, #100	@ 0x64
 8015102:	bfb1      	iteee	lt
 8015104:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8015106:	ad19      	addge	r5, sp, #100	@ 0x64
 8015108:	930e      	strge	r3, [sp, #56]	@ 0x38
 801510a:	ac29      	addge	r4, sp, #164	@ 0xa4
 801510c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801510e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015112:	e887 0003 	stmia.w	r7, {r0, r1}
 8015116:	b928      	cbnz	r0, 8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015118:	4b80      	ldr	r3, [pc, #512]	@ (801531c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801511a:	6818      	ldr	r0, [r3, #0]
 801511c:	6803      	ldr	r3, [r0, #0]
 801511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015120:	4798      	blx	r3
 8015122:	6038      	str	r0, [r7, #0]
 8015124:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015126:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801512a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801512e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8015130:	930c      	str	r3, [sp, #48]	@ 0x30
 8015132:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015134:	6963      	ldr	r3, [r4, #20]
 8015136:	440b      	add	r3, r1
 8015138:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801513c:	4408      	add	r0, r1
 801513e:	b200      	sxth	r0, r0
 8015140:	4283      	cmp	r3, r0
 8015142:	900d      	str	r0, [sp, #52]	@ 0x34
 8015144:	f280 80dd 	bge.w	8015302 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015148:	428b      	cmp	r3, r1
 801514a:	da08      	bge.n	801515e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801514c:	2a00      	cmp	r2, #0
 801514e:	dd06      	ble.n	801515e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015150:	1acb      	subs	r3, r1, r3
 8015152:	429a      	cmp	r2, r3
 8015154:	f2c0 80e4 	blt.w	8015320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015158:	2b00      	cmp	r3, #0
 801515a:	f300 80e2 	bgt.w	8015322 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801515e:	6967      	ldr	r7, [r4, #20]
 8015160:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8015164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015166:	443b      	add	r3, r7
 8015168:	461f      	mov	r7, r3
 801516a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801516c:	1bdf      	subs	r7, r3, r7
 801516e:	4297      	cmp	r7, r2
 8015170:	bfa8      	it	ge
 8015172:	4617      	movge	r7, r2
 8015174:	2f00      	cmp	r7, #0
 8015176:	f340 8166 	ble.w	8015446 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801517a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801517c:	6829      	ldr	r1, [r5, #0]
 801517e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015182:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015186:	4411      	add	r1, r2
 8015188:	6820      	ldr	r0, [r4, #0]
 801518a:	4299      	cmp	r1, r3
 801518c:	dd1a      	ble.n	80151c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801518e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015192:	4402      	add	r2, r0
 8015194:	440b      	add	r3, r1
 8015196:	b21b      	sxth	r3, r3
 8015198:	429a      	cmp	r2, r3
 801519a:	dc13      	bgt.n	80151c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801519c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801519e:	a912      	add	r1, sp, #72	@ 0x48
 80151a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80151a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	9206      	str	r2, [sp, #24]
 80151a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80151aa:	9500      	str	r5, [sp, #0]
 80151ac:	9205      	str	r2, [sp, #20]
 80151ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80151b0:	e9cd b203 	strd	fp, r2, [sp, #12]
 80151b4:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80151b6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80151ba:	aa49      	add	r2, sp, #292	@ 0x124
 80151bc:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80151c0:	4623      	mov	r3, r4
 80151c2:	47c8      	blx	r9
 80151c4:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80151c8:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80151cc:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80151d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80151d4:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80151d8:	68a1      	ldr	r1, [r4, #8]
 80151da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80151de:	ed94 6a08 	vldr	s12, [r4, #32]
 80151e2:	edd4 6a07 	vldr	s13, [r4, #28]
 80151e6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80151ea:	ee76 6a86 	vadd.f32	s13, s13, s12
 80151ee:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80151f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80151f6:	edc4 6a07 	vstr	s13, [r4, #28]
 80151fa:	441a      	add	r2, r3
 80151fc:	6963      	ldr	r3, [r4, #20]
 80151fe:	3301      	adds	r3, #1
 8015200:	6022      	str	r2, [r4, #0]
 8015202:	6163      	str	r3, [r4, #20]
 8015204:	69a3      	ldr	r3, [r4, #24]
 8015206:	3b01      	subs	r3, #1
 8015208:	61a3      	str	r3, [r4, #24]
 801520a:	6923      	ldr	r3, [r4, #16]
 801520c:	440b      	add	r3, r1
 801520e:	68e1      	ldr	r1, [r4, #12]
 8015210:	428b      	cmp	r3, r1
 8015212:	6123      	str	r3, [r4, #16]
 8015214:	db15      	blt.n	8015242 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015216:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801521a:	3201      	adds	r2, #1
 801521c:	1a5b      	subs	r3, r3, r1
 801521e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015222:	6022      	str	r2, [r4, #0]
 8015224:	6123      	str	r3, [r4, #16]
 8015226:	edc4 6a07 	vstr	s13, [r4, #28]
 801522a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801522e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015232:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015236:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801523a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801523e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015242:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015246:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801524a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801524e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015252:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8015256:	68a9      	ldr	r1, [r5, #8]
 8015258:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801525c:	ed95 6a08 	vldr	s12, [r5, #32]
 8015260:	edd5 6a07 	vldr	s13, [r5, #28]
 8015264:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015268:	ee76 6a86 	vadd.f32	s13, s13, s12
 801526c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015270:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015274:	edc5 6a07 	vstr	s13, [r5, #28]
 8015278:	441a      	add	r2, r3
 801527a:	696b      	ldr	r3, [r5, #20]
 801527c:	3301      	adds	r3, #1
 801527e:	602a      	str	r2, [r5, #0]
 8015280:	616b      	str	r3, [r5, #20]
 8015282:	69ab      	ldr	r3, [r5, #24]
 8015284:	3b01      	subs	r3, #1
 8015286:	61ab      	str	r3, [r5, #24]
 8015288:	692b      	ldr	r3, [r5, #16]
 801528a:	440b      	add	r3, r1
 801528c:	68e9      	ldr	r1, [r5, #12]
 801528e:	428b      	cmp	r3, r1
 8015290:	612b      	str	r3, [r5, #16]
 8015292:	db15      	blt.n	80152c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015294:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015298:	3201      	adds	r2, #1
 801529a:	1a5b      	subs	r3, r3, r1
 801529c:	ee76 6a26 	vadd.f32	s13, s12, s13
 80152a0:	602a      	str	r2, [r5, #0]
 80152a2:	612b      	str	r3, [r5, #16]
 80152a4:	edc5 6a07 	vstr	s13, [r5, #28]
 80152a8:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80152ac:	ee36 7a87 	vadd.f32	s14, s13, s14
 80152b0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80152b4:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80152b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80152bc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80152c0:	3f01      	subs	r7, #1
 80152c2:	e757      	b.n	8015174 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80152c4:	4299      	cmp	r1, r3
 80152c6:	dc13      	bgt.n	80152f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80152c8:	429a      	cmp	r2, r3
 80152ca:	da14      	bge.n	80152f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80152cc:	2502      	movs	r5, #2
 80152ce:	2703      	movs	r7, #3
 80152d0:	f04f 0800 	mov.w	r8, #0
 80152d4:	46a9      	mov	r9, r5
 80152d6:	f04f 0a01 	mov.w	sl, #1
 80152da:	e6ef      	b.n	80150bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80152dc:	2501      	movs	r5, #1
 80152de:	2700      	movs	r7, #0
 80152e0:	46a9      	mov	r9, r5
 80152e2:	46b8      	mov	r8, r7
 80152e4:	f04f 0a02 	mov.w	sl, #2
 80152e8:	e6e8      	b.n	80150bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80152ea:	2501      	movs	r5, #1
 80152ec:	2702      	movs	r7, #2
 80152ee:	e6e1      	b.n	80150b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80152f0:	2500      	movs	r5, #0
 80152f2:	2701      	movs	r7, #1
 80152f4:	e7f4      	b.n	80152e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80152f6:	2702      	movs	r7, #2
 80152f8:	2503      	movs	r5, #3
 80152fa:	f04f 0900 	mov.w	r9, #0
 80152fe:	46b8      	mov	r8, r7
 8015300:	e7e9      	b.n	80152d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015302:	4613      	mov	r3, r2
 8015304:	e728      	b.n	8015158 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015306:	bf00      	nop
 8015308:	24028e24 	.word	0x24028e24
 801530c:	fffd8f01 	.word	0xfffd8f01
 8015310:	00027100 	.word	0x00027100
 8015314:	0004e1ff 	.word	0x0004e1ff
 8015318:	0004e1fe 	.word	0x0004e1fe
 801531c:	24028e2c 	.word	0x24028e2c
 8015320:	4613      	mov	r3, r2
 8015322:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8015324:	469e      	mov	lr, r3
 8015326:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8015328:	469c      	mov	ip, r3
 801532a:	9111      	str	r1, [sp, #68]	@ 0x44
 801532c:	f04f 0900 	mov.w	r9, #0
 8015330:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8015334:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8015338:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801533c:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8015340:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8015344:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8015348:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801534c:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8015350:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8015354:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8015358:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801535c:	f1bc 0f00 	cmp.w	ip, #0
 8015360:	d147      	bne.n	80153f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015362:	eb03 0c07 	add.w	ip, r3, r7
 8015366:	1ad7      	subs	r7, r2, r3
 8015368:	f1b9 0f00 	cmp.w	r9, #0
 801536c:	d009      	beq.n	8015382 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801536e:	9029      	str	r0, [sp, #164]	@ 0xa4
 8015370:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8015374:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8015378:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 801537c:	912d      	str	r1, [sp, #180]	@ 0xb4
 801537e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8015382:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015384:	f04f 0800 	mov.w	r8, #0
 8015388:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801538c:	9111      	str	r1, [sp, #68]	@ 0x44
 801538e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8015392:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015396:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801539a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801539e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80153a2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80153a6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80153aa:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80153ae:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80153b2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80153b6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80153ba:	f1be 0f00 	cmp.w	lr, #0
 80153be:	d031      	beq.n	8015424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80153c0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80153c2:	4450      	add	r0, sl
 80153c4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80153c8:	4431      	add	r1, r6
 80153ca:	ee37 7a04 	vadd.f32	s14, s14, s8
 80153ce:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80153d2:	4549      	cmp	r1, r9
 80153d4:	db08      	blt.n	80153e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80153d6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80153da:	3001      	adds	r0, #1
 80153dc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80153e0:	eba1 0109 	sub.w	r1, r1, r9
 80153e4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80153e8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80153ec:	f04f 0801 	mov.w	r8, #1
 80153f0:	e7e3      	b.n	80153ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80153f2:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80153f4:	4450      	add	r0, sl
 80153f6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80153fa:	4431      	add	r1, r6
 80153fc:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015400:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015404:	4541      	cmp	r1, r8
 8015406:	db08      	blt.n	801541a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015408:	ee76 6a85 	vadd.f32	s13, s13, s10
 801540c:	3001      	adds	r0, #1
 801540e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015412:	eba1 0108 	sub.w	r1, r1, r8
 8015416:	ee77 7a86 	vadd.f32	s15, s15, s12
 801541a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801541e:	f04f 0901 	mov.w	r9, #1
 8015422:	e79b      	b.n	801535c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015424:	449c      	add	ip, r3
 8015426:	1aff      	subs	r7, r7, r3
 8015428:	f1b8 0f00 	cmp.w	r8, #0
 801542c:	d009      	beq.n	8015442 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801542e:	9019      	str	r0, [sp, #100]	@ 0x64
 8015430:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015434:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015438:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801543c:	911d      	str	r1, [sp, #116]	@ 0x74
 801543e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015442:	1ad2      	subs	r2, r2, r3
 8015444:	e68b      	b.n	801515e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015446:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015448:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801544a:	2b00      	cmp	r3, #0
 801544c:	f000 80d1 	beq.w	80155f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015450:	ad19      	add	r5, sp, #100	@ 0x64
 8015452:	ac39      	add	r4, sp, #228	@ 0xe4
 8015454:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015456:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801545a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801545e:	930c      	str	r3, [sp, #48]	@ 0x30
 8015460:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015462:	6963      	ldr	r3, [r4, #20]
 8015464:	440b      	add	r3, r1
 8015466:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801546a:	4408      	add	r0, r1
 801546c:	b200      	sxth	r0, r0
 801546e:	4283      	cmp	r3, r0
 8015470:	900d      	str	r0, [sp, #52]	@ 0x34
 8015472:	f280 80c1 	bge.w	80155f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015476:	428b      	cmp	r3, r1
 8015478:	da08      	bge.n	801548c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801547a:	2a00      	cmp	r2, #0
 801547c:	dd06      	ble.n	801548c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801547e:	1acb      	subs	r3, r1, r3
 8015480:	429a      	cmp	r2, r3
 8015482:	f2c0 80bb 	blt.w	80155fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015486:	2b00      	cmp	r3, #0
 8015488:	f300 80b9 	bgt.w	80155fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801548c:	6967      	ldr	r7, [r4, #20]
 801548e:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8015492:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015494:	443b      	add	r3, r7
 8015496:	461f      	mov	r7, r3
 8015498:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801549a:	1bdf      	subs	r7, r3, r7
 801549c:	4297      	cmp	r7, r2
 801549e:	bfa8      	it	ge
 80154a0:	4617      	movge	r7, r2
 80154a2:	2f00      	cmp	r7, #0
 80154a4:	f340 813c 	ble.w	8015720 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80154a8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80154aa:	6829      	ldr	r1, [r5, #0]
 80154ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80154b0:	f9bb 3000 	ldrsh.w	r3, [fp]
 80154b4:	4411      	add	r1, r2
 80154b6:	6820      	ldr	r0, [r4, #0]
 80154b8:	4299      	cmp	r1, r3
 80154ba:	dd1a      	ble.n	80154f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80154bc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80154c0:	4402      	add	r2, r0
 80154c2:	440b      	add	r3, r1
 80154c4:	b21b      	sxth	r3, r3
 80154c6:	429a      	cmp	r2, r3
 80154c8:	dc13      	bgt.n	80154f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80154ca:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80154cc:	a912      	add	r1, sp, #72	@ 0x48
 80154ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	9206      	str	r2, [sp, #24]
 80154d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80154d8:	9500      	str	r5, [sp, #0]
 80154da:	9205      	str	r2, [sp, #20]
 80154dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80154de:	e9cd b203 	strd	fp, r2, [sp, #12]
 80154e2:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80154e4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80154e8:	aa49      	add	r2, sp, #292	@ 0x124
 80154ea:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80154ee:	4623      	mov	r3, r4
 80154f0:	47c8      	blx	r9
 80154f2:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80154f6:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80154fa:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80154fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015502:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015506:	68a1      	ldr	r1, [r4, #8]
 8015508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801550c:	ed94 6a08 	vldr	s12, [r4, #32]
 8015510:	edd4 6a07 	vldr	s13, [r4, #28]
 8015514:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015518:	ee76 6a86 	vadd.f32	s13, s13, s12
 801551c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015520:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015524:	edc4 6a07 	vstr	s13, [r4, #28]
 8015528:	441a      	add	r2, r3
 801552a:	6963      	ldr	r3, [r4, #20]
 801552c:	3301      	adds	r3, #1
 801552e:	6022      	str	r2, [r4, #0]
 8015530:	6163      	str	r3, [r4, #20]
 8015532:	69a3      	ldr	r3, [r4, #24]
 8015534:	3b01      	subs	r3, #1
 8015536:	61a3      	str	r3, [r4, #24]
 8015538:	6923      	ldr	r3, [r4, #16]
 801553a:	440b      	add	r3, r1
 801553c:	68e1      	ldr	r1, [r4, #12]
 801553e:	428b      	cmp	r3, r1
 8015540:	6123      	str	r3, [r4, #16]
 8015542:	db15      	blt.n	8015570 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015544:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8015548:	3201      	adds	r2, #1
 801554a:	1a5b      	subs	r3, r3, r1
 801554c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015550:	6022      	str	r2, [r4, #0]
 8015552:	6123      	str	r3, [r4, #16]
 8015554:	edc4 6a07 	vstr	s13, [r4, #28]
 8015558:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801555c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015560:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015564:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8015568:	ee77 7a27 	vadd.f32	s15, s14, s15
 801556c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015570:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015574:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8015578:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801557c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015580:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8015584:	68a9      	ldr	r1, [r5, #8]
 8015586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801558a:	ed95 6a08 	vldr	s12, [r5, #32]
 801558e:	edd5 6a07 	vldr	s13, [r5, #28]
 8015592:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015596:	ee76 6a86 	vadd.f32	s13, s13, s12
 801559a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801559e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80155a2:	edc5 6a07 	vstr	s13, [r5, #28]
 80155a6:	441a      	add	r2, r3
 80155a8:	696b      	ldr	r3, [r5, #20]
 80155aa:	3301      	adds	r3, #1
 80155ac:	602a      	str	r2, [r5, #0]
 80155ae:	616b      	str	r3, [r5, #20]
 80155b0:	69ab      	ldr	r3, [r5, #24]
 80155b2:	3b01      	subs	r3, #1
 80155b4:	61ab      	str	r3, [r5, #24]
 80155b6:	692b      	ldr	r3, [r5, #16]
 80155b8:	440b      	add	r3, r1
 80155ba:	68e9      	ldr	r1, [r5, #12]
 80155bc:	428b      	cmp	r3, r1
 80155be:	612b      	str	r3, [r5, #16]
 80155c0:	db15      	blt.n	80155ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80155c2:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80155c6:	3201      	adds	r2, #1
 80155c8:	1a5b      	subs	r3, r3, r1
 80155ca:	ee76 6a26 	vadd.f32	s13, s12, s13
 80155ce:	602a      	str	r2, [r5, #0]
 80155d0:	612b      	str	r3, [r5, #16]
 80155d2:	edc5 6a07 	vstr	s13, [r5, #28]
 80155d6:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80155da:	ee36 7a87 	vadd.f32	s14, s13, s14
 80155de:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80155e2:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80155e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155ea:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80155ee:	3f01      	subs	r7, #1
 80155f0:	e757      	b.n	80154a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80155f2:	ad39      	add	r5, sp, #228	@ 0xe4
 80155f4:	ac19      	add	r4, sp, #100	@ 0x64
 80155f6:	e72d      	b.n	8015454 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80155f8:	4613      	mov	r3, r2
 80155fa:	e744      	b.n	8015486 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80155fc:	4613      	mov	r3, r2
 80155fe:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8015600:	469e      	mov	lr, r3
 8015602:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8015606:	461f      	mov	r7, r3
 8015608:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801560c:	f04f 0900 	mov.w	r9, #0
 8015610:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8015614:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8015618:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801561c:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8015620:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8015624:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8015626:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801562a:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801562e:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8015632:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8015636:	960e      	str	r6, [sp, #56]	@ 0x38
 8015638:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801563c:	2f00      	cmp	r7, #0
 801563e:	d146      	bne.n	80156ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015640:	449c      	add	ip, r3
 8015642:	1ad7      	subs	r7, r2, r3
 8015644:	f1b9 0f00 	cmp.w	r9, #0
 8015648:	d009      	beq.n	801565e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801564a:	9039      	str	r0, [sp, #228]	@ 0xe4
 801564c:	913d      	str	r1, [sp, #244]	@ 0xf4
 801564e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8015652:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8015656:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801565a:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801565e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015660:	f04f 0800 	mov.w	r8, #0
 8015664:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8015668:	910e      	str	r1, [sp, #56]	@ 0x38
 801566a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801566e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015672:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8015676:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801567a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801567e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8015682:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8015686:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801568a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801568e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015692:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8015696:	f1be 0f00 	cmp.w	lr, #0
 801569a:	d030      	beq.n	80156fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801569c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801569e:	4450      	add	r0, sl
 80156a0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80156a4:	4431      	add	r1, r6
 80156a6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80156aa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80156ae:	4549      	cmp	r1, r9
 80156b0:	db08      	blt.n	80156c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80156b2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80156b6:	3001      	adds	r0, #1
 80156b8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80156bc:	eba1 0109 	sub.w	r1, r1, r9
 80156c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80156c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80156c8:	f04f 0801 	mov.w	r8, #1
 80156cc:	e7e3      	b.n	8015696 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80156ce:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80156d0:	4450      	add	r0, sl
 80156d2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80156d6:	4431      	add	r1, r6
 80156d8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80156dc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80156e0:	4541      	cmp	r1, r8
 80156e2:	db08      	blt.n	80156f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80156e4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80156e8:	3001      	adds	r0, #1
 80156ea:	ee37 7a25 	vadd.f32	s14, s14, s11
 80156ee:	eba1 0108 	sub.w	r1, r1, r8
 80156f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80156f6:	3f01      	subs	r7, #1
 80156f8:	f04f 0901 	mov.w	r9, #1
 80156fc:	e79e      	b.n	801563c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80156fe:	449c      	add	ip, r3
 8015700:	1aff      	subs	r7, r7, r3
 8015702:	f1b8 0f00 	cmp.w	r8, #0
 8015706:	d009      	beq.n	801571c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015708:	9019      	str	r0, [sp, #100]	@ 0x64
 801570a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801570e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015712:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8015716:	911d      	str	r1, [sp, #116]	@ 0x74
 8015718:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801571c:	1ad2      	subs	r2, r2, r3
 801571e:	e6b5      	b.n	801548c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	b923      	cbnz	r3, 8015730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015726:	4b04      	ldr	r3, [pc, #16]	@ (8015738 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015728:	6818      	ldr	r0, [r3, #0]
 801572a:	6803      	ldr	r3, [r0, #0]
 801572c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801572e:	4798      	blx	r3
 8015730:	b05b      	add	sp, #364	@ 0x16c
 8015732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015736:	bf00      	nop
 8015738:	24028e2c 	.word	0x24028e2c

0801573c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801573c:	b570      	push	{r4, r5, r6, lr}
 801573e:	4604      	mov	r4, r0
 8015740:	2500      	movs	r5, #0
 8015742:	9805      	ldr	r0, [sp, #20]
 8015744:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8015748:	6061      	str	r1, [r4, #4]
 801574a:	8263      	strh	r3, [r4, #18]
 801574c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8015750:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015754:	8025      	strh	r5, [r4, #0]
 8015756:	7221      	strb	r1, [r4, #8]
 8015758:	7266      	strb	r6, [r4, #9]
 801575a:	60e0      	str	r0, [r4, #12]
 801575c:	8222      	strh	r2, [r4, #16]
 801575e:	82a3      	strh	r3, [r4, #20]
 8015760:	82e5      	strh	r5, [r4, #22]
 8015762:	8325      	strh	r5, [r4, #24]
 8015764:	8365      	strh	r5, [r4, #26]
 8015766:	83a5      	strh	r5, [r4, #28]
 8015768:	83e5      	strh	r5, [r4, #30]
 801576a:	8425      	strh	r5, [r4, #32]
 801576c:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8015770:	b32e      	cbz	r6, 80157be <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015772:	6803      	ldr	r3, [r0, #0]
 8015774:	695b      	ldr	r3, [r3, #20]
 8015776:	4798      	blx	r3
 8015778:	4606      	mov	r6, r0
 801577a:	b300      	cbz	r0, 80157be <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801577c:	68e0      	ldr	r0, [r4, #12]
 801577e:	4631      	mov	r1, r6
 8015780:	6803      	ldr	r3, [r0, #0]
 8015782:	68db      	ldr	r3, [r3, #12]
 8015784:	4798      	blx	r3
 8015786:	4605      	mov	r5, r0
 8015788:	b1c8      	cbz	r0, 80157be <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801578a:	7b43      	ldrb	r3, [r0, #13]
 801578c:	7a82      	ldrb	r2, [r0, #10]
 801578e:	005b      	lsls	r3, r3, #1
 8015790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015794:	4313      	orrs	r3, r2
 8015796:	8423      	strh	r3, [r4, #32]
 8015798:	7a63      	ldrb	r3, [r4, #9]
 801579a:	2b06      	cmp	r3, #6
 801579c:	d10f      	bne.n	80157be <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801579e:	68e0      	ldr	r0, [r4, #12]
 80157a0:	462a      	mov	r2, r5
 80157a2:	4631      	mov	r1, r6
 80157a4:	6803      	ldr	r3, [r0, #0]
 80157a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157a8:	4798      	blx	r3
 80157aa:	7b6b      	ldrb	r3, [r5, #13]
 80157ac:	005b      	lsls	r3, r3, #1
 80157ae:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80157b2:	7aab      	ldrb	r3, [r5, #10]
 80157b4:	4313      	orrs	r3, r2
 80157b6:	4418      	add	r0, r3
 80157b8:	8c23      	ldrh	r3, [r4, #32]
 80157ba:	4418      	add	r0, r3
 80157bc:	8420      	strh	r0, [r4, #32]
 80157be:	4620      	mov	r0, r4
 80157c0:	bd70      	pop	{r4, r5, r6, pc}

080157c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80157c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157c6:	2400      	movs	r4, #0
 80157c8:	b085      	sub	sp, #20
 80157ca:	4681      	mov	r9, r0
 80157cc:	4688      	mov	r8, r1
 80157ce:	4692      	mov	sl, r2
 80157d0:	469b      	mov	fp, r3
 80157d2:	4627      	mov	r7, r4
 80157d4:	4625      	mov	r5, r4
 80157d6:	4626      	mov	r6, r4
 80157d8:	4554      	cmp	r4, sl
 80157da:	da2a      	bge.n	8015832 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80157dc:	2300      	movs	r3, #0
 80157de:	9303      	str	r3, [sp, #12]
 80157e0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80157e4:	429d      	cmp	r5, r3
 80157e6:	d004      	beq.n	80157f2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80157e8:	f242 030b 	movw	r3, #8203	@ 0x200b
 80157ec:	429d      	cmp	r5, r3
 80157ee:	bf18      	it	ne
 80157f0:	462f      	movne	r7, r5
 80157f2:	ab03      	add	r3, sp, #12
 80157f4:	4642      	mov	r2, r8
 80157f6:	4659      	mov	r1, fp
 80157f8:	4648      	mov	r0, r9
 80157fa:	f003 fbbf 	bl	8018f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80157fe:	4605      	mov	r5, r0
 8015800:	b1b8      	cbz	r0, 8015832 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015802:	280a      	cmp	r0, #10
 8015804:	d015      	beq.n	8015832 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015806:	9a03      	ldr	r2, [sp, #12]
 8015808:	b18a      	cbz	r2, 801582e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801580a:	7b50      	ldrb	r0, [r2, #13]
 801580c:	4639      	mov	r1, r7
 801580e:	7a93      	ldrb	r3, [r2, #10]
 8015810:	0040      	lsls	r0, r0, #1
 8015812:	8895      	ldrh	r5, [r2, #4]
 8015814:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8015818:	4303      	orrs	r3, r0
 801581a:	4640      	mov	r0, r8
 801581c:	9301      	str	r3, [sp, #4]
 801581e:	f8d8 3000 	ldr.w	r3, [r8]
 8015822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015824:	4798      	blx	r3
 8015826:	9b01      	ldr	r3, [sp, #4]
 8015828:	4418      	add	r0, r3
 801582a:	4406      	add	r6, r0
 801582c:	b2b6      	uxth	r6, r6
 801582e:	3401      	adds	r4, #1
 8015830:	e7d2      	b.n	80157d8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015832:	4630      	mov	r0, r6
 8015834:	b005      	add	sp, #20
 8015836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801583a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801583a:	2a02      	cmp	r2, #2
 801583c:	b530      	push	{r4, r5, lr}
 801583e:	d011      	beq.n	8015864 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015840:	2a03      	cmp	r2, #3
 8015842:	d01c      	beq.n	801587e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015844:	2a01      	cmp	r2, #1
 8015846:	d10c      	bne.n	8015862 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015848:	888b      	ldrh	r3, [r1, #4]
 801584a:	8801      	ldrh	r1, [r0, #0]
 801584c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015850:	1a5b      	subs	r3, r3, r1
 8015852:	8844      	ldrh	r4, [r0, #2]
 8015854:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015858:	1a9b      	subs	r3, r3, r2
 801585a:	8004      	strh	r4, [r0, #0]
 801585c:	8081      	strh	r1, [r0, #4]
 801585e:	8043      	strh	r3, [r0, #2]
 8015860:	80c2      	strh	r2, [r0, #6]
 8015862:	bd30      	pop	{r4, r5, pc}
 8015864:	88cb      	ldrh	r3, [r1, #6]
 8015866:	8842      	ldrh	r2, [r0, #2]
 8015868:	1a9b      	subs	r3, r3, r2
 801586a:	88c2      	ldrh	r2, [r0, #6]
 801586c:	1a9b      	subs	r3, r3, r2
 801586e:	888a      	ldrh	r2, [r1, #4]
 8015870:	8801      	ldrh	r1, [r0, #0]
 8015872:	8043      	strh	r3, [r0, #2]
 8015874:	1a52      	subs	r2, r2, r1
 8015876:	8881      	ldrh	r1, [r0, #4]
 8015878:	1a52      	subs	r2, r2, r1
 801587a:	8002      	strh	r2, [r0, #0]
 801587c:	e7f1      	b.n	8015862 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801587e:	88cb      	ldrh	r3, [r1, #6]
 8015880:	8841      	ldrh	r1, [r0, #2]
 8015882:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015886:	1a5b      	subs	r3, r3, r1
 8015888:	f9b0 5000 	ldrsh.w	r5, [r0]
 801588c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015890:	1a9b      	subs	r3, r3, r2
 8015892:	8045      	strh	r5, [r0, #2]
 8015894:	8082      	strh	r2, [r0, #4]
 8015896:	8003      	strh	r3, [r0, #0]
 8015898:	80c4      	strh	r4, [r0, #6]
 801589a:	e7e2      	b.n	8015862 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801589c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158a0:	b09f      	sub	sp, #124	@ 0x7c
 80158a2:	920f      	str	r2, [sp, #60]	@ 0x3c
 80158a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80158a6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80158a8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80158aa:	8812      	ldrh	r2, [r2, #0]
 80158ac:	889b      	ldrh	r3, [r3, #4]
 80158ae:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80158b0:	4413      	add	r3, r2
 80158b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80158b4:	6828      	ldr	r0, [r5, #0]
 80158b6:	b21b      	sxth	r3, r3
 80158b8:	9117      	str	r1, [sp, #92]	@ 0x5c
 80158ba:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 80158be:	9311      	str	r3, [sp, #68]	@ 0x44
 80158c0:	6803      	ldr	r3, [r0, #0]
 80158c2:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 80158c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158c8:	4798      	blx	r3
 80158ca:	682b      	ldr	r3, [r5, #0]
 80158cc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80158ce:	7b1a      	ldrb	r2, [r3, #12]
 80158d0:	7adb      	ldrb	r3, [r3, #11]
 80158d2:	9215      	str	r2, [sp, #84]	@ 0x54
 80158d4:	9316      	str	r3, [sp, #88]	@ 0x58
 80158d6:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 80158da:	2c00      	cmp	r4, #0
 80158dc:	d067      	beq.n	80159ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80158de:	7c2b      	ldrb	r3, [r5, #16]
 80158e0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80158e2:	2b06      	cmp	r3, #6
 80158e4:	bf14      	ite	ne
 80158e6:	2301      	movne	r3, #1
 80158e8:	2302      	moveq	r3, #2
 80158ea:	4413      	add	r3, r2
 80158ec:	f04f 0900 	mov.w	r9, #0
 80158f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80158f2:	464c      	mov	r4, r9
 80158f4:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80158f8:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80158fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80158fe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015900:	4293      	cmp	r3, r2
 8015902:	f280 808b 	bge.w	8015a1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8015906:	2300      	movs	r3, #0
 8015908:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 801590c:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8015910:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015914:	429c      	cmp	r4, r3
 8015916:	d006      	beq.n	8015926 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8015918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801591a:	f242 020b 	movw	r2, #8203	@ 0x200b
 801591e:	4294      	cmp	r4, r2
 8015920:	bf18      	it	ne
 8015922:	4623      	movne	r3, r4
 8015924:	930c      	str	r3, [sp, #48]	@ 0x30
 8015926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015928:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801592a:	682a      	ldr	r2, [r5, #0]
 801592c:	428b      	cmp	r3, r1
 801592e:	db40      	blt.n	80159b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8015930:	6813      	ldr	r3, [r2, #0]
 8015932:	4610      	mov	r0, r2
 8015934:	695b      	ldr	r3, [r3, #20]
 8015936:	4798      	blx	r3
 8015938:	4604      	mov	r4, r0
 801593a:	6828      	ldr	r0, [r5, #0]
 801593c:	aa1d      	add	r2, sp, #116	@ 0x74
 801593e:	4621      	mov	r1, r4
 8015940:	6803      	ldr	r3, [r0, #0]
 8015942:	689f      	ldr	r7, [r3, #8]
 8015944:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8015948:	47b8      	blx	r7
 801594a:	901c      	str	r0, [sp, #112]	@ 0x70
 801594c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015950:	429c      	cmp	r4, r3
 8015952:	f000 80eb 	beq.w	8015b2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015956:	f242 030b 	movw	r3, #8203	@ 0x200b
 801595a:	429c      	cmp	r4, r3
 801595c:	f000 80e6 	beq.w	8015b2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015960:	2c00      	cmp	r4, #0
 8015962:	f000 810d 	beq.w	8015b80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8015966:	2c0a      	cmp	r4, #10
 8015968:	d05e      	beq.n	8015a28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801596a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801596c:	b36a      	cbz	r2, 80159ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801596e:	8894      	ldrh	r4, [r2, #4]
 8015970:	f1bb 0f00 	cmp.w	fp, #0
 8015974:	d03a      	beq.n	80159ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8015976:	f892 900d 	ldrb.w	r9, [r2, #13]
 801597a:	f1bb 0f01 	cmp.w	fp, #1
 801597e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8015982:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8015986:	f892 900a 	ldrb.w	r9, [r2, #10]
 801598a:	ea49 0903 	orr.w	r9, r9, r3
 801598e:	d133      	bne.n	80159f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8015990:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015992:	eba6 0609 	sub.w	r6, r6, r9
 8015996:	2b00      	cmp	r3, #0
 8015998:	d14d      	bne.n	8015a36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801599a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801599c:	eb09 0306 	add.w	r3, r9, r6
 80159a0:	4413      	add	r3, r2
 80159a2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80159a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80159a8:	4293      	cmp	r3, r2
 80159aa:	da4e      	bge.n	8015a4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80159ac:	e036      	b.n	8015a1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80159ae:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80159b0:	e79c      	b.n	80158ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 80159b2:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 80159b6:	4659      	mov	r1, fp
 80159b8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80159ba:	9301      	str	r3, [sp, #4]
 80159bc:	ab1d      	add	r3, sp, #116	@ 0x74
 80159be:	9300      	str	r3, [sp, #0]
 80159c0:	ab1c      	add	r3, sp, #112	@ 0x70
 80159c2:	f003 fb24 	bl	801900e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80159c6:	4604      	mov	r4, r0
 80159c8:	e7c0      	b.n	801594c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80159ca:	6828      	ldr	r0, [r5, #0]
 80159cc:	6803      	ldr	r3, [r0, #0]
 80159ce:	691b      	ldr	r3, [r3, #16]
 80159d0:	4798      	blx	r3
 80159d2:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80159d6:	4298      	cmp	r0, r3
 80159d8:	f000 80a8 	beq.w	8015b2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80159dc:	f242 030b 	movw	r3, #8203	@ 0x200b
 80159e0:	4298      	cmp	r0, r3
 80159e2:	f000 80a3 	beq.w	8015b2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80159e6:	f1bb 0f00 	cmp.w	fp, #0
 80159ea:	d100      	bne.n	80159ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80159ec:	444e      	add	r6, r9
 80159ee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80159f0:	2a00      	cmp	r2, #0
 80159f2:	d1c0      	bne.n	8015976 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80159f4:	4691      	mov	r9, r2
 80159f6:	e099      	b.n	8015b2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80159f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	f000 80c2 	beq.w	8015b84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8015a00:	f1bb 0f00 	cmp.w	fp, #0
 8015a04:	d117      	bne.n	8015a36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8015a06:	6828      	ldr	r0, [r5, #0]
 8015a08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015a0a:	6803      	ldr	r3, [r0, #0]
 8015a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a0e:	4798      	blx	r3
 8015a10:	4406      	add	r6, r0
 8015a12:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015a14:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015a16:	1af3      	subs	r3, r6, r3
 8015a18:	4293      	cmp	r3, r2
 8015a1a:	dd16      	ble.n	8015a4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8015a1c:	2c00      	cmp	r4, #0
 8015a1e:	f000 80af 	beq.w	8015b80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8015a22:	2c0a      	cmp	r4, #10
 8015a24:	f040 809d 	bne.w	8015b62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8015a28:	240a      	movs	r4, #10
 8015a2a:	fab4 f084 	clz	r0, r4
 8015a2e:	0940      	lsrs	r0, r0, #5
 8015a30:	b01f      	add	sp, #124	@ 0x7c
 8015a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a36:	6828      	ldr	r0, [r5, #0]
 8015a38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015a3a:	6803      	ldr	r3, [r0, #0]
 8015a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a3e:	4798      	blx	r3
 8015a40:	f1bb 0f01 	cmp.w	fp, #1
 8015a44:	eba6 0600 	sub.w	r6, r6, r0
 8015a48:	d0a7      	beq.n	801599a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8015a4a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8015a4c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015a4e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8015a52:	f9b3 8000 	ldrsh.w	r8, [r3]
 8015a56:	7b43      	ldrb	r3, [r0, #13]
 8015a58:	4431      	add	r1, r6
 8015a5a:	015b      	lsls	r3, r3, #5
 8015a5c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015a60:	7983      	ldrb	r3, [r0, #6]
 8015a62:	4313      	orrs	r3, r2
 8015a64:	440b      	add	r3, r1
 8015a66:	4543      	cmp	r3, r8
 8015a68:	db60      	blt.n	8015b2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015a6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a6c:	4299      	cmp	r1, r3
 8015a6e:	da5d      	bge.n	8015b2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015a70:	6828      	ldr	r0, [r5, #0]
 8015a72:	45b0      	cmp	r8, r6
 8015a74:	6803      	ldr	r3, [r0, #0]
 8015a76:	bfcc      	ite	gt
 8015a78:	eba8 0806 	subgt.w	r8, r8, r6
 8015a7c:	f04f 0800 	movle.w	r8, #0
 8015a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a82:	bfc8      	it	gt
 8015a84:	fa1f f888 	uxthgt.w	r8, r8
 8015a88:	4798      	blx	r3
 8015a8a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015a8c:	7b53      	ldrb	r3, [r2, #13]
 8015a8e:	00d9      	lsls	r1, r3, #3
 8015a90:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8015a94:	7a11      	ldrb	r1, [r2, #8]
 8015a96:	4339      	orrs	r1, r7
 8015a98:	065f      	lsls	r7, r3, #25
 8015a9a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8015a9c:	bf48      	it	mi
 8015a9e:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8015aa2:	4407      	add	r7, r0
 8015aa4:	bf48      	it	mi
 8015aa6:	b209      	sxthmi	r1, r1
 8015aa8:	1a7f      	subs	r7, r7, r1
 8015aaa:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8015aac:	b2bf      	uxth	r7, r7
 8015aae:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8015ab2:	fa0f fa87 	sxth.w	sl, r7
 8015ab6:	4551      	cmp	r1, sl
 8015ab8:	dd3c      	ble.n	8015b34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8015aba:	011b      	lsls	r3, r3, #4
 8015abc:	79d0      	ldrb	r0, [r2, #7]
 8015abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015ac2:	4303      	orrs	r3, r0
 8015ac4:	449a      	add	sl, r3
 8015ac6:	4551      	cmp	r1, sl
 8015ac8:	dc30      	bgt.n	8015b2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015aca:	1bcf      	subs	r7, r1, r7
 8015acc:	468a      	mov	sl, r1
 8015ace:	b23f      	sxth	r7, r7
 8015ad0:	9219      	str	r2, [sp, #100]	@ 0x64
 8015ad2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015ad4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015ad6:	6828      	ldr	r0, [r5, #0]
 8015ad8:	2a00      	cmp	r2, #0
 8015ada:	d12d      	bne.n	8015b38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8015adc:	9318      	str	r3, [sp, #96]	@ 0x60
 8015ade:	b2bf      	uxth	r7, r7
 8015ae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ae2:	6819      	ldr	r1, [r3, #0]
 8015ae4:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8015ae6:	6801      	ldr	r1, [r0, #0]
 8015ae8:	9314      	str	r3, [sp, #80]	@ 0x50
 8015aea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015aec:	4788      	blx	r1
 8015aee:	79a9      	ldrb	r1, [r5, #6]
 8015af0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8015af2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015af4:	7ba9      	ldrb	r1, [r5, #14]
 8015af6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015af8:	910a      	str	r1, [sp, #40]	@ 0x28
 8015afa:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8015afe:	9109      	str	r1, [sp, #36]	@ 0x24
 8015b00:	68a9      	ldr	r1, [r5, #8]
 8015b02:	9306      	str	r3, [sp, #24]
 8015b04:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015b06:	9205      	str	r2, [sp, #20]
 8015b08:	9304      	str	r3, [sp, #16]
 8015b0a:	f8cd a004 	str.w	sl, [sp, #4]
 8015b0e:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8015b12:	44b0      	add	r8, r6
 8015b14:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8015b16:	fa0f f388 	sxth.w	r3, r8
 8015b1a:	9300      	str	r3, [sp, #0]
 8015b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b1e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8015b22:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8015b24:	681a      	ldr	r2, [r3, #0]
 8015b26:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015b28:	685b      	ldr	r3, [r3, #4]
 8015b2a:	47b8      	blx	r7
 8015b2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015b2e:	3301      	adds	r3, #1
 8015b30:	930d      	str	r3, [sp, #52]	@ 0x34
 8015b32:	e6e3      	b.n	80158fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8015b34:	2700      	movs	r7, #0
 8015b36:	e7cb      	b.n	8015ad0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8015b38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015b3a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8015b3e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015b40:	f8dc 1000 	ldr.w	r1, [ip]
 8015b44:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8015b48:	79aa      	ldrb	r2, [r5, #6]
 8015b4a:	9203      	str	r2, [sp, #12]
 8015b4c:	7baa      	ldrb	r2, [r5, #14]
 8015b4e:	9202      	str	r2, [sp, #8]
 8015b50:	68aa      	ldr	r2, [r5, #8]
 8015b52:	e9cd 0200 	strd	r0, r2, [sp]
 8015b56:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8015b58:	4660      	mov	r0, ip
 8015b5a:	688f      	ldr	r7, [r1, #8]
 8015b5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015b5e:	47b8      	blx	r7
 8015b60:	e7e4      	b.n	8015b2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015b62:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8015b64:	3501      	adds	r5, #1
 8015b66:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8015b68:	429d      	cmp	r5, r3
 8015b6a:	f6bf af5e 	bge.w	8015a2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8015b6e:	4659      	mov	r1, fp
 8015b70:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8015b72:	f7ef fd2b 	bl	80055cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015b76:	4604      	mov	r4, r0
 8015b78:	b110      	cbz	r0, 8015b80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8015b7a:	280a      	cmp	r0, #10
 8015b7c:	d1f2      	bne.n	8015b64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8015b7e:	e753      	b.n	8015a28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8015b80:	2400      	movs	r4, #0
 8015b82:	e752      	b.n	8015a2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8015b84:	f1bb 0f00 	cmp.w	fp, #0
 8015b88:	f43f af43 	beq.w	8015a12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8015b8c:	e75d      	b.n	8015a4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08015b8e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8015b8e:	b530      	push	{r4, r5, lr}
 8015b90:	8ac4      	ldrh	r4, [r0, #22]
 8015b92:	8b45      	ldrh	r5, [r0, #26]
 8015b94:	8343      	strh	r3, [r0, #26]
 8015b96:	442c      	add	r4, r5
 8015b98:	1ae4      	subs	r4, r4, r3
 8015b9a:	8b83      	ldrh	r3, [r0, #28]
 8015b9c:	82c4      	strh	r4, [r0, #22]
 8015b9e:	8b04      	ldrh	r4, [r0, #24]
 8015ba0:	4422      	add	r2, r4
 8015ba2:	440c      	add	r4, r1
 8015ba4:	1a59      	subs	r1, r3, r1
 8015ba6:	83c2      	strh	r2, [r0, #30]
 8015ba8:	8304      	strh	r4, [r0, #24]
 8015baa:	8381      	strh	r1, [r0, #28]
 8015bac:	bd30      	pop	{r4, r5, pc}

08015bae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8015bae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bb2:	4604      	mov	r4, r0
 8015bb4:	8a47      	ldrh	r7, [r0, #18]
 8015bb6:	68c0      	ldr	r0, [r0, #12]
 8015bb8:	b085      	sub	sp, #20
 8015bba:	6803      	ldr	r3, [r0, #0]
 8015bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015bbe:	4798      	blx	r3
 8015bc0:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8015bc4:	7a63      	ldrb	r3, [r4, #9]
 8015bc6:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8015bca:	3b01      	subs	r3, #1
 8015bcc:	42b7      	cmp	r7, r6
 8015bce:	bfac      	ite	ge
 8015bd0:	f04f 0900 	movge.w	r9, #0
 8015bd4:	f04f 0901 	movlt.w	r9, #1
 8015bd8:	2b05      	cmp	r3, #5
 8015bda:	d804      	bhi.n	8015be6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8015bdc:	e8df f003 	tbb	[pc, r3]
 8015be0:	470f0854 	.word	0x470f0854
 8015be4:	4c4c      	.short	0x4c4c
 8015be6:	2500      	movs	r5, #0
 8015be8:	46a9      	mov	r9, r5
 8015bea:	462e      	mov	r6, r5
 8015bec:	462f      	mov	r7, r5
 8015bee:	e00e      	b.n	8015c0e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015bf0:	42b7      	cmp	r7, r6
 8015bf2:	f04f 0500 	mov.w	r5, #0
 8015bf6:	bfb4      	ite	lt
 8015bf8:	2600      	movlt	r6, #0
 8015bfa:	2601      	movge	r6, #1
 8015bfc:	e7f6      	b.n	8015bec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8015bfe:	42b7      	cmp	r7, r6
 8015c00:	464d      	mov	r5, r9
 8015c02:	f04f 0900 	mov.w	r9, #0
 8015c06:	bfb4      	ite	lt
 8015c08:	2600      	movlt	r6, #0
 8015c0a:	2601      	movge	r6, #1
 8015c0c:	464f      	mov	r7, r9
 8015c0e:	f04f 0800 	mov.w	r8, #0
 8015c12:	f8a4 8016 	strh.w	r8, [r4, #22]
 8015c16:	f8a4 8018 	strh.w	r8, [r4, #24]
 8015c1a:	f8cd 8004 	str.w	r8, [sp, #4]
 8015c1e:	2300      	movs	r3, #0
 8015c20:	9303      	str	r3, [sp, #12]
 8015c22:	8823      	ldrh	r3, [r4, #0]
 8015c24:	2b20      	cmp	r3, #32
 8015c26:	d033      	beq.n	8015c90 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8015c28:	f242 010b 	movw	r1, #8203	@ 0x200b
 8015c2c:	1a5a      	subs	r2, r3, r1
 8015c2e:	f1d2 0a00 	rsbs	sl, r2, #0
 8015c32:	eb4a 0a02 	adc.w	sl, sl, r2
 8015c36:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8015c3a:	4293      	cmp	r3, r2
 8015c3c:	d008      	beq.n	8015c50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015c3e:	428b      	cmp	r3, r1
 8015c40:	9a01      	ldr	r2, [sp, #4]
 8015c42:	bf0e      	itee	eq
 8015c44:	f04f 0a01 	moveq.w	sl, #1
 8015c48:	461a      	movne	r2, r3
 8015c4a:	f04f 0a00 	movne.w	sl, #0
 8015c4e:	9201      	str	r2, [sp, #4]
 8015c50:	ab03      	add	r3, sp, #12
 8015c52:	68e2      	ldr	r2, [r4, #12]
 8015c54:	7a21      	ldrb	r1, [r4, #8]
 8015c56:	6860      	ldr	r0, [r4, #4]
 8015c58:	f003 f990 	bl	8018f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015c5c:	8020      	strh	r0, [r4, #0]
 8015c5e:	b9d8      	cbnz	r0, 8015c98 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8015c60:	8ba2      	ldrh	r2, [r4, #28]
 8015c62:	2300      	movs	r3, #0
 8015c64:	4611      	mov	r1, r2
 8015c66:	4620      	mov	r0, r4
 8015c68:	f7ff ff91 	bl	8015b8e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015c6c:	e06e      	b.n	8015d4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015c6e:	2500      	movs	r5, #0
 8015c70:	2701      	movs	r7, #1
 8015c72:	46a9      	mov	r9, r5
 8015c74:	462e      	mov	r6, r5
 8015c76:	e7ca      	b.n	8015c0e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015c78:	42b7      	cmp	r7, r6
 8015c7a:	f04f 0500 	mov.w	r5, #0
 8015c7e:	bfb4      	ite	lt
 8015c80:	2700      	movlt	r7, #0
 8015c82:	2701      	movge	r7, #1
 8015c84:	462e      	mov	r6, r5
 8015c86:	e7c2      	b.n	8015c0e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015c88:	2500      	movs	r5, #0
 8015c8a:	2601      	movs	r6, #1
 8015c8c:	46a9      	mov	r9, r5
 8015c8e:	e7ad      	b.n	8015bec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8015c90:	9301      	str	r3, [sp, #4]
 8015c92:	f04f 0a01 	mov.w	sl, #1
 8015c96:	e7db      	b.n	8015c50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015c98:	8b63      	ldrh	r3, [r4, #26]
 8015c9a:	280a      	cmp	r0, #10
 8015c9c:	f103 0301 	add.w	r3, r3, #1
 8015ca0:	8363      	strh	r3, [r4, #26]
 8015ca2:	d0dd      	beq.n	8015c60 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8015ca4:	9a03      	ldr	r2, [sp, #12]
 8015ca6:	bb62      	cbnz	r2, 8015d02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8015ca8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015cac:	4298      	cmp	r0, r3
 8015cae:	d003      	beq.n	8015cb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015cb0:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015cb4:	4298      	cmp	r0, r3
 8015cb6:	d1b2      	bne.n	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cb8:	8823      	ldrh	r3, [r4, #0]
 8015cba:	8ba1      	ldrh	r1, [r4, #28]
 8015cbc:	2b20      	cmp	r3, #32
 8015cbe:	d003      	beq.n	8015cc8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8015cc0:	f242 000b 	movw	r0, #8203	@ 0x200b
 8015cc4:	4283      	cmp	r3, r0
 8015cc6:	d131      	bne.n	8015d2c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8015cc8:	f1ba 0f00 	cmp.w	sl, #0
 8015ccc:	bf0a      	itet	eq
 8015cce:	4688      	moveq	r8, r1
 8015cd0:	4650      	movne	r0, sl
 8015cd2:	2001      	moveq	r0, #1
 8015cd4:	440a      	add	r2, r1
 8015cd6:	8b23      	ldrh	r3, [r4, #24]
 8015cd8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015cdc:	b292      	uxth	r2, r2
 8015cde:	83a2      	strh	r2, [r4, #28]
 8015ce0:	4413      	add	r3, r2
 8015ce2:	f1b9 0f00 	cmp.w	r9, #0
 8015ce6:	d102      	bne.n	8015cee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8015ce8:	2d00      	cmp	r5, #0
 8015cea:	d042      	beq.n	8015d72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8015cec:	b300      	cbz	r0, 8015d30 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8015cee:	8c21      	ldrh	r1, [r4, #32]
 8015cf0:	4419      	add	r1, r3
 8015cf2:	458c      	cmp	ip, r1
 8015cf4:	da37      	bge.n	8015d66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015cf6:	8ae1      	ldrh	r1, [r4, #22]
 8015cf8:	2900      	cmp	r1, #0
 8015cfa:	d034      	beq.n	8015d66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015cfc:	4563      	cmp	r3, ip
 8015cfe:	dd8e      	ble.n	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015d00:	e01d      	b.n	8015d3e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8015d02:	8893      	ldrh	r3, [r2, #4]
 8015d04:	9901      	ldr	r1, [sp, #4]
 8015d06:	8023      	strh	r3, [r4, #0]
 8015d08:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8015d0c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8015d10:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8015d14:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8015d18:	ea4b 0b00 	orr.w	fp, fp, r0
 8015d1c:	68e0      	ldr	r0, [r4, #12]
 8015d1e:	6803      	ldr	r3, [r0, #0]
 8015d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d22:	4798      	blx	r3
 8015d24:	eb0b 0200 	add.w	r2, fp, r0
 8015d28:	b292      	uxth	r2, r2
 8015d2a:	e7c5      	b.n	8015cb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015d2c:	2000      	movs	r0, #0
 8015d2e:	e7d1      	b.n	8015cd4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8015d30:	4563      	cmp	r3, ip
 8015d32:	f77f af74 	ble.w	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015d36:	8ae3      	ldrh	r3, [r4, #22]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	f43f af70 	beq.w	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015d3e:	2301      	movs	r3, #1
 8015d40:	8c22      	ldrh	r2, [r4, #32]
 8015d42:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8015d46:	8be3      	ldrh	r3, [r4, #30]
 8015d48:	4413      	add	r3, r2
 8015d4a:	83e3      	strh	r3, [r4, #30]
 8015d4c:	68e0      	ldr	r0, [r4, #12]
 8015d4e:	6803      	ldr	r3, [r0, #0]
 8015d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d52:	4798      	blx	r3
 8015d54:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8015d58:	4418      	add	r0, r3
 8015d5a:	8a63      	ldrh	r3, [r4, #18]
 8015d5c:	1a18      	subs	r0, r3, r0
 8015d5e:	8260      	strh	r0, [r4, #18]
 8015d60:	b005      	add	sp, #20
 8015d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d66:	2300      	movs	r3, #0
 8015d68:	4611      	mov	r1, r2
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	f7ff ff0f 	bl	8015b8e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015d70:	e755      	b.n	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015d72:	4563      	cmp	r3, ip
 8015d74:	dd14      	ble.n	8015da0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8015d76:	b117      	cbz	r7, 8015d7e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8015d78:	2301      	movs	r3, #1
 8015d7a:	460a      	mov	r2, r1
 8015d7c:	e772      	b.n	8015c64 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8015d7e:	2e00      	cmp	r6, #0
 8015d80:	f43f af4d 	beq.w	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015d84:	2800      	cmp	r0, #0
 8015d86:	f47f af4a 	bne.w	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015d8a:	f1ba 0f00 	cmp.w	sl, #0
 8015d8e:	d002      	beq.n	8015d96 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8015d90:	2301      	movs	r3, #1
 8015d92:	4642      	mov	r2, r8
 8015d94:	e767      	b.n	8015c66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8015d96:	8ae3      	ldrh	r3, [r4, #22]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	f43f af40 	beq.w	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015d9e:	e7d5      	b.n	8015d4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015da0:	2800      	cmp	r0, #0
 8015da2:	f47f af3c 	bne.w	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015da6:	f1ba 0f00 	cmp.w	sl, #0
 8015daa:	f43f af38 	beq.w	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015dae:	2301      	movs	r3, #1
 8015db0:	4642      	mov	r2, r8
 8015db2:	e7da      	b.n	8015d6a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08015db4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015db6:	4605      	mov	r5, r0
 8015db8:	b08f      	sub	sp, #60	@ 0x3c
 8015dba:	4617      	mov	r7, r2
 8015dbc:	461c      	mov	r4, r3
 8015dbe:	460e      	mov	r6, r1
 8015dc0:	b1d1      	cbz	r1, 8015df8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	4620      	mov	r0, r4
 8015dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015dc8:	4798      	blx	r3
 8015dca:	4240      	negs	r0, r0
 8015dcc:	9603      	str	r6, [sp, #12]
 8015dce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015dd2:	b200      	sxth	r0, r0
 8015dd4:	9700      	str	r7, [sp, #0]
 8015dd6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8015dda:	4629      	mov	r1, r5
 8015ddc:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8015de0:	2401      	movs	r4, #1
 8015de2:	a805      	add	r0, sp, #20
 8015de4:	f7ff fcaa 	bl	801573c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015de8:	a805      	add	r0, sp, #20
 8015dea:	f7ff fee0 	bl	8015bae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015dee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015df2:	b163      	cbz	r3, 8015e0e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8015df4:	3401      	adds	r4, #1
 8015df6:	e7f7      	b.n	8015de8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8015df8:	2401      	movs	r4, #1
 8015dfa:	f003 f98b 	bl	8019114 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015dfe:	280a      	cmp	r0, #10
 8015e00:	4628      	mov	r0, r5
 8015e02:	bf08      	it	eq
 8015e04:	3401      	addeq	r4, #1
 8015e06:	f003 f985 	bl	8019114 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015e0a:	2800      	cmp	r0, #0
 8015e0c:	d1f7      	bne.n	8015dfe <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8015e0e:	b2a0      	uxth	r0, r4
 8015e10:	b00f      	add	sp, #60	@ 0x3c
 8015e12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8015e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e18:	b0e3      	sub	sp, #396	@ 0x18c
 8015e1a:	461c      	mov	r4, r3
 8015e1c:	4683      	mov	fp, r0
 8015e1e:	4688      	mov	r8, r1
 8015e20:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	f000 8112 	beq.w	801604c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015e28:	6823      	ldr	r3, [r4, #0]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	f000 810e 	beq.w	801604c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015e30:	7ba3      	ldrb	r3, [r4, #14]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	f000 810a 	beq.w	801604c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015e38:	ad0a      	add	r5, sp, #40	@ 0x28
 8015e3a:	6810      	ldr	r0, [r2, #0]
 8015e3c:	6851      	ldr	r1, [r2, #4]
 8015e3e:	462b      	mov	r3, r5
 8015e40:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8015e44:	c303      	stmia	r3!, {r0, r1}
 8015e46:	2100      	movs	r1, #0
 8015e48:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015e4c:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8015e50:	4628      	mov	r0, r5
 8015e52:	910c      	str	r1, [sp, #48]	@ 0x30
 8015e54:	a90c      	add	r1, sp, #48	@ 0x30
 8015e56:	79a2      	ldrb	r2, [r4, #6]
 8015e58:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015e5c:	f7ff fced 	bl	801583a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015e60:	a90c      	add	r1, sp, #48	@ 0x30
 8015e62:	79a2      	ldrb	r2, [r4, #6]
 8015e64:	4608      	mov	r0, r1
 8015e66:	f7ff fce8 	bl	801583a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015e6a:	a817      	add	r0, sp, #92	@ 0x5c
 8015e6c:	f002 fcf8 	bl	8018860 <_ZN8touchgfx12TextProviderC1Ev>
 8015e70:	6820      	ldr	r0, [r4, #0]
 8015e72:	6803      	ldr	r3, [r0, #0]
 8015e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e76:	4798      	blx	r3
 8015e78:	4606      	mov	r6, r0
 8015e7a:	6820      	ldr	r0, [r4, #0]
 8015e7c:	6803      	ldr	r3, [r0, #0]
 8015e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015e80:	4798      	blx	r3
 8015e82:	4633      	mov	r3, r6
 8015e84:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8015e86:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8015e88:	9000      	str	r0, [sp, #0]
 8015e8a:	a817      	add	r0, sp, #92	@ 0x5c
 8015e8c:	f002 fd43 	bl	8018916 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015e90:	6820      	ldr	r0, [r4, #0]
 8015e92:	f894 a004 	ldrb.w	sl, [r4, #4]
 8015e96:	6803      	ldr	r3, [r0, #0]
 8015e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e9a:	4798      	blx	r3
 8015e9c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8015ea0:	6823      	ldr	r3, [r4, #0]
 8015ea2:	4607      	mov	r7, r0
 8015ea4:	4406      	add	r6, r0
 8015ea6:	a830      	add	r0, sp, #192	@ 0xc0
 8015ea8:	f893 9009 	ldrb.w	r9, [r3, #9]
 8015eac:	f002 fcd8 	bl	8018860 <_ZN8touchgfx12TextProviderC1Ev>
 8015eb0:	7c23      	ldrb	r3, [r4, #16]
 8015eb2:	b17b      	cbz	r3, 8015ed4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8015eb4:	6820      	ldr	r0, [r4, #0]
 8015eb6:	6803      	ldr	r3, [r0, #0]
 8015eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015eba:	4798      	blx	r3
 8015ebc:	9009      	str	r0, [sp, #36]	@ 0x24
 8015ebe:	6820      	ldr	r0, [r4, #0]
 8015ec0:	6802      	ldr	r2, [r0, #0]
 8015ec2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8015ec4:	4790      	blx	r2
 8015ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ec8:	9000      	str	r0, [sp, #0]
 8015eca:	a830      	add	r0, sp, #192	@ 0xc0
 8015ecc:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8015ece:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8015ed0:	f002 fd21 	bl	8018916 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015ed4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8015ed8:	a80e      	add	r0, sp, #56	@ 0x38
 8015eda:	7be2      	ldrb	r2, [r4, #15]
 8015edc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8015ee0:	1a8a      	subs	r2, r1, r2
 8015ee2:	7c21      	ldrb	r1, [r4, #16]
 8015ee4:	9103      	str	r1, [sp, #12]
 8015ee6:	b292      	uxth	r2, r2
 8015ee8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015eec:	9102      	str	r1, [sp, #8]
 8015eee:	6821      	ldr	r1, [r4, #0]
 8015ef0:	9101      	str	r1, [sp, #4]
 8015ef2:	7961      	ldrb	r1, [r4, #5]
 8015ef4:	9100      	str	r1, [sp, #0]
 8015ef6:	a930      	add	r1, sp, #192	@ 0xc0
 8015ef8:	f7ff fc20 	bl	801573c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015efc:	2e00      	cmp	r6, #0
 8015efe:	dc5b      	bgt.n	8015fb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8015f00:	af17      	add	r7, sp, #92	@ 0x5c
 8015f02:	f04f 0900 	mov.w	r9, #0
 8015f06:	7c23      	ldrb	r3, [r4, #16]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	f000 80b1 	beq.w	8016070 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8015f0e:	a80e      	add	r0, sp, #56	@ 0x38
 8015f10:	f7ff fe4d 	bl	8015bae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015f14:	f1ba 0f00 	cmp.w	sl, #0
 8015f18:	f000 80a5 	beq.w	8016066 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8015f1c:	7c23      	ldrb	r3, [r4, #16]
 8015f1e:	2264      	movs	r2, #100	@ 0x64
 8015f20:	4639      	mov	r1, r7
 8015f22:	a849      	add	r0, sp, #292	@ 0x124
 8015f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f26:	f00f fd78 	bl	8025a1a <memcpy>
 8015f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	f000 80a7 	beq.w	8016080 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8015f32:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8015f36:	7922      	ldrb	r2, [r4, #4]
 8015f38:	2a01      	cmp	r2, #1
 8015f3a:	f040 808a 	bne.w	8016052 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8015f3e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8015f42:	1ac0      	subs	r0, r0, r3
 8015f44:	2302      	movs	r3, #2
 8015f46:	fb90 f0f3 	sdiv	r0, r0, r3
 8015f4a:	b200      	sxth	r0, r0
 8015f4c:	7c23      	ldrb	r3, [r4, #16]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	f000 808b 	beq.w	801606a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015f54:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8015f58:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8015f5c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015f60:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015f64:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8015f68:	2100      	movs	r1, #0
 8015f6a:	4410      	add	r0, r2
 8015f6c:	4642      	mov	r2, r8
 8015f6e:	b200      	sxth	r0, r0
 8015f70:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8015f74:	9000      	str	r0, [sp, #0]
 8015f76:	4658      	mov	r0, fp
 8015f78:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8015f7c:	f7ff fc8e 	bl	801589c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015f80:	2800      	cmp	r0, #0
 8015f82:	d163      	bne.n	801604c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015f84:	b2b2      	uxth	r2, r6
 8015f86:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8015f8a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8015f8e:	4413      	add	r3, r2
 8015f90:	1a8a      	subs	r2, r1, r2
 8015f92:	b21b      	sxth	r3, r3
 8015f94:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8015f98:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8015f9c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015fa0:	2a00      	cmp	r2, #0
 8015fa2:	d153      	bne.n	801604c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015fa4:	6822      	ldr	r2, [r4, #0]
 8015fa6:	8869      	ldrh	r1, [r5, #2]
 8015fa8:	7a12      	ldrb	r2, [r2, #8]
 8015faa:	1a9b      	subs	r3, r3, r2
 8015fac:	88ea      	ldrh	r2, [r5, #6]
 8015fae:	440a      	add	r2, r1
 8015fb0:	b212      	sxth	r2, r2
 8015fb2:	4293      	cmp	r3, r2
 8015fb4:	dda7      	ble.n	8015f06 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8015fb6:	e049      	b.n	801604c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015fb8:	7c23      	ldrb	r3, [r4, #16]
 8015fba:	444f      	add	r7, r9
 8015fbc:	b1c3      	cbz	r3, 8015ff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8015fbe:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8015fc2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015fc6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015fca:	443b      	add	r3, r7
 8015fcc:	4293      	cmp	r3, r2
 8015fce:	da97      	bge.n	8015f00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015fd0:	a80e      	add	r0, sp, #56	@ 0x38
 8015fd2:	f7ff fdec 	bl	8015bae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015fd6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8015fda:	3b01      	subs	r3, #1
 8015fdc:	b29b      	uxth	r3, r3
 8015fde:	454b      	cmp	r3, r9
 8015fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8015fe2:	d021      	beq.n	8016028 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8015fe4:	7961      	ldrb	r1, [r4, #5]
 8015fe6:	a817      	add	r0, sp, #92	@ 0x5c
 8015fe8:	f7ef faf0 	bl	80055cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015fee:	e7f4      	b.n	8015fda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8015ff0:	fa1f f986 	uxth.w	r9, r6
 8015ff4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015ff8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015ffc:	443b      	add	r3, r7
 8015ffe:	4293      	cmp	r3, r2
 8016000:	f6bf af7e 	bge.w	8015f00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016004:	a817      	add	r0, sp, #92	@ 0x5c
 8016006:	f003 f885 	bl	8019114 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801600a:	b1f8      	cbz	r0, 801604c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801600c:	280a      	cmp	r0, #10
 801600e:	d1f1      	bne.n	8015ff4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016010:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8016014:	444b      	add	r3, r9
 8016016:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801601a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801601e:	eba3 0309 	sub.w	r3, r3, r9
 8016022:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016026:	e7e5      	b.n	8015ff4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016028:	b2b3      	uxth	r3, r6
 801602a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801602e:	441a      	add	r2, r3
 8016030:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8016034:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8016038:	1ad3      	subs	r3, r2, r3
 801603a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801603e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8016042:	b11b      	cbz	r3, 801604c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016044:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8016048:	2b00      	cmp	r3, #0
 801604a:	d0ba      	beq.n	8015fc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801604c:	b063      	add	sp, #396	@ 0x18c
 801604e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016052:	2a02      	cmp	r2, #2
 8016054:	d105      	bne.n	8016062 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8016056:	7be2      	ldrb	r2, [r4, #15]
 8016058:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801605c:	1a80      	subs	r0, r0, r2
 801605e:	1ac0      	subs	r0, r0, r3
 8016060:	e773      	b.n	8015f4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8016062:	2000      	movs	r0, #0
 8016064:	e772      	b.n	8015f4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016066:	7be0      	ldrb	r0, [r4, #15]
 8016068:	e770      	b.n	8015f4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801606a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801606e:	e773      	b.n	8015f58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8016070:	f1ba 0f00 	cmp.w	sl, #0
 8016074:	d0f7      	beq.n	8016066 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8016076:	2264      	movs	r2, #100	@ 0x64
 8016078:	4639      	mov	r1, r7
 801607a:	a849      	add	r0, sp, #292	@ 0x124
 801607c:	f00f fccd 	bl	8025a1a <memcpy>
 8016080:	2300      	movs	r3, #0
 8016082:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016086:	6821      	ldr	r1, [r4, #0]
 8016088:	a849      	add	r0, sp, #292	@ 0x124
 801608a:	f7ff fb9a 	bl	80157c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801608e:	b203      	sxth	r3, r0
 8016090:	e751      	b.n	8015f36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08016092 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016092:	2b03      	cmp	r3, #3
 8016094:	d818      	bhi.n	80160c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016096:	e8df f003 	tbb	[pc, r3]
 801609a:	0602      	.short	0x0602
 801609c:	130d      	.short	0x130d
 801609e:	f9b0 2000 	ldrsh.w	r2, [r0]
 80160a2:	1850      	adds	r0, r2, r1
 80160a4:	4770      	bx	lr
 80160a6:	8803      	ldrh	r3, [r0, #0]
 80160a8:	8880      	ldrh	r0, [r0, #4]
 80160aa:	4418      	add	r0, r3
 80160ac:	b200      	sxth	r0, r0
 80160ae:	1a80      	subs	r0, r0, r2
 80160b0:	3801      	subs	r0, #1
 80160b2:	4770      	bx	lr
 80160b4:	8803      	ldrh	r3, [r0, #0]
 80160b6:	8880      	ldrh	r0, [r0, #4]
 80160b8:	4418      	add	r0, r3
 80160ba:	b200      	sxth	r0, r0
 80160bc:	1a40      	subs	r0, r0, r1
 80160be:	e7f7      	b.n	80160b0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80160c0:	f9b0 0000 	ldrsh.w	r0, [r0]
 80160c4:	4410      	add	r0, r2
 80160c6:	4770      	bx	lr
 80160c8:	2000      	movs	r0, #0
 80160ca:	4770      	bx	lr

080160cc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80160cc:	2b03      	cmp	r3, #3
 80160ce:	d817      	bhi.n	8016100 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80160d0:	e8df f003 	tbb	[pc, r3]
 80160d4:	10090602 	.word	0x10090602
 80160d8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80160dc:	1850      	adds	r0, r2, r1
 80160de:	4770      	bx	lr
 80160e0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80160e4:	e7fa      	b.n	80160dc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80160e6:	8843      	ldrh	r3, [r0, #2]
 80160e8:	88c0      	ldrh	r0, [r0, #6]
 80160ea:	4418      	add	r0, r3
 80160ec:	b200      	sxth	r0, r0
 80160ee:	1a80      	subs	r0, r0, r2
 80160f0:	3801      	subs	r0, #1
 80160f2:	4770      	bx	lr
 80160f4:	8843      	ldrh	r3, [r0, #2]
 80160f6:	88c0      	ldrh	r0, [r0, #6]
 80160f8:	4418      	add	r0, r3
 80160fa:	b200      	sxth	r0, r0
 80160fc:	1a40      	subs	r0, r0, r1
 80160fe:	e7f7      	b.n	80160f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016100:	2000      	movs	r0, #0
 8016102:	4770      	bx	lr

08016104 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016104:	4b01      	ldr	r3, [pc, #4]	@ (801610c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016106:	2200      	movs	r2, #0
 8016108:	601a      	str	r2, [r3, #0]
 801610a:	4770      	bx	lr
 801610c:	24028e3c 	.word	0x24028e3c

08016110 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016110:	4603      	mov	r3, r0
 8016112:	b1c8      	cbz	r0, 8016148 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016114:	0c02      	lsrs	r2, r0, #16
 8016116:	0412      	lsls	r2, r2, #16
 8016118:	b9a2      	cbnz	r2, 8016144 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801611a:	0403      	lsls	r3, r0, #16
 801611c:	2010      	movs	r0, #16
 801611e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8016122:	bf04      	itt	eq
 8016124:	021b      	lsleq	r3, r3, #8
 8016126:	3008      	addeq	r0, #8
 8016128:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801612c:	bf04      	itt	eq
 801612e:	011b      	lsleq	r3, r3, #4
 8016130:	3004      	addeq	r0, #4
 8016132:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8016136:	bf04      	itt	eq
 8016138:	009b      	lsleq	r3, r3, #2
 801613a:	3002      	addeq	r0, #2
 801613c:	2b00      	cmp	r3, #0
 801613e:	db04      	blt.n	801614a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016140:	3001      	adds	r0, #1
 8016142:	4770      	bx	lr
 8016144:	2000      	movs	r0, #0
 8016146:	e7ea      	b.n	801611e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016148:	2020      	movs	r0, #32
 801614a:	4770      	bx	lr

0801614c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016150:	b087      	sub	sp, #28
 8016152:	460d      	mov	r5, r1
 8016154:	4616      	mov	r6, r2
 8016156:	4698      	mov	r8, r3
 8016158:	4601      	mov	r1, r0
 801615a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801615e:	b120      	cbz	r0, 801616a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016160:	b11a      	cbz	r2, 801616a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016162:	2d1f      	cmp	r5, #31
 8016164:	d801      	bhi.n	801616a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016166:	2b1f      	cmp	r3, #31
 8016168:	d904      	bls.n	8016174 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801616a:	2000      	movs	r0, #0
 801616c:	6038      	str	r0, [r7, #0]
 801616e:	b007      	add	sp, #28
 8016170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016174:	b97d      	cbnz	r5, 8016196 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8016176:	b143      	cbz	r3, 801618a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8016178:	4602      	mov	r2, r0
 801617a:	462b      	mov	r3, r5
 801617c:	4641      	mov	r1, r8
 801617e:	4630      	mov	r0, r6
 8016180:	e9cd 4700 	strd	r4, r7, [sp]
 8016184:	f7ff ffe2 	bl	801614c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016188:	e7f1      	b.n	801616e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801618a:	f04f 33ff 	mov.w	r3, #4294967295
 801618e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016192:	603b      	str	r3, [r7, #0]
 8016194:	e7eb      	b.n	801616e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016196:	fa32 fa05 	lsrs.w	sl, r2, r5
 801619a:	d106      	bne.n	80161aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801619c:	4346      	muls	r6, r0
 801619e:	fbb6 f0f4 	udiv	r0, r6, r4
 80161a2:	fb04 6610 	mls	r6, r4, r0, r6
 80161a6:	603e      	str	r6, [r7, #0]
 80161a8:	e7e1      	b.n	801616e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80161aa:	2201      	movs	r2, #1
 80161ac:	fa00 fb05 	lsl.w	fp, r0, r5
 80161b0:	40aa      	lsls	r2, r5
 80161b2:	fbbb f9f4 	udiv	r9, fp, r4
 80161b6:	3a01      	subs	r2, #1
 80161b8:	fb0a f309 	mul.w	r3, sl, r9
 80161bc:	fb04 b919 	mls	r9, r4, r9, fp
 80161c0:	4016      	ands	r6, r2
 80161c2:	9303      	str	r3, [sp, #12]
 80161c4:	4630      	mov	r0, r6
 80161c6:	f7ff ffa3 	bl	8016110 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80161ca:	462b      	mov	r3, r5
 80161cc:	460a      	mov	r2, r1
 80161ce:	4601      	mov	r1, r0
 80161d0:	4630      	mov	r0, r6
 80161d2:	e9cd 4700 	strd	r4, r7, [sp]
 80161d6:	f7ff ffb9 	bl	801614c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80161da:	4606      	mov	r6, r0
 80161dc:	4648      	mov	r0, r9
 80161de:	eb05 0108 	add.w	r1, r5, r8
 80161e2:	f7ff ff95 	bl	8016110 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80161e6:	ab05      	add	r3, sp, #20
 80161e8:	464a      	mov	r2, r9
 80161ea:	e9cd 4300 	strd	r4, r3, [sp]
 80161ee:	4603      	mov	r3, r0
 80161f0:	4650      	mov	r0, sl
 80161f2:	f7ff ffab 	bl	801614c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80161f6:	6839      	ldr	r1, [r7, #0]
 80161f8:	9a05      	ldr	r2, [sp, #20]
 80161fa:	9b03      	ldr	r3, [sp, #12]
 80161fc:	4411      	add	r1, r2
 80161fe:	fbb1 f2f4 	udiv	r2, r1, r4
 8016202:	18d3      	adds	r3, r2, r3
 8016204:	fb04 1412 	mls	r4, r4, r2, r1
 8016208:	441e      	add	r6, r3
 801620a:	603c      	str	r4, [r7, #0]
 801620c:	4430      	add	r0, r6
 801620e:	e7ae      	b.n	801616e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08016210 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016214:	b085      	sub	sp, #20
 8016216:	f1b0 0900 	subs.w	r9, r0, #0
 801621a:	461d      	mov	r5, r3
 801621c:	4617      	mov	r7, r2
 801621e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8016220:	bfbb      	ittet	lt
 8016222:	f1c9 0900 	rsblt	r9, r9, #0
 8016226:	f04f 36ff 	movlt.w	r6, #4294967295
 801622a:	2601      	movge	r6, #1
 801622c:	6823      	ldrlt	r3, [r4, #0]
 801622e:	bfbc      	itt	lt
 8016230:	425b      	neglt	r3, r3
 8016232:	6023      	strlt	r3, [r4, #0]
 8016234:	2a00      	cmp	r2, #0
 8016236:	da04      	bge.n	8016242 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016238:	6823      	ldr	r3, [r4, #0]
 801623a:	4257      	negs	r7, r2
 801623c:	4276      	negs	r6, r6
 801623e:	425b      	negs	r3, r3
 8016240:	6023      	str	r3, [r4, #0]
 8016242:	2d00      	cmp	r5, #0
 8016244:	4638      	mov	r0, r7
 8016246:	bfba      	itte	lt
 8016248:	426d      	neglt	r5, r5
 801624a:	f04f 38ff 	movlt.w	r8, #4294967295
 801624e:	f04f 0801 	movge.w	r8, #1
 8016252:	f7ff ff5d 	bl	8016110 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016256:	ab03      	add	r3, sp, #12
 8016258:	463a      	mov	r2, r7
 801625a:	e9cd 5300 	strd	r5, r3, [sp]
 801625e:	4603      	mov	r3, r0
 8016260:	4648      	mov	r0, r9
 8016262:	f7ff ff73 	bl	801614c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016266:	6823      	ldr	r3, [r4, #0]
 8016268:	9a03      	ldr	r2, [sp, #12]
 801626a:	4546      	cmp	r6, r8
 801626c:	441a      	add	r2, r3
 801626e:	fb92 f3f5 	sdiv	r3, r2, r5
 8016272:	4418      	add	r0, r3
 8016274:	fb05 2313 	mls	r3, r5, r3, r2
 8016278:	bf18      	it	ne
 801627a:	4240      	negne	r0, r0
 801627c:	1c72      	adds	r2, r6, #1
 801627e:	6023      	str	r3, [r4, #0]
 8016280:	d105      	bne.n	801628e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016282:	2b00      	cmp	r3, #0
 8016284:	f1c3 0200 	rsb	r2, r3, #0
 8016288:	db0b      	blt.n	80162a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801628a:	6022      	str	r2, [r4, #0]
 801628c:	e006      	b.n	801629c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801628e:	2e01      	cmp	r6, #1
 8016290:	d104      	bne.n	801629c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016292:	2b00      	cmp	r3, #0
 8016294:	da02      	bge.n	801629c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016296:	442b      	add	r3, r5
 8016298:	3801      	subs	r0, #1
 801629a:	6023      	str	r3, [r4, #0]
 801629c:	b005      	add	sp, #20
 801629e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162a2:	3801      	subs	r0, #1
 80162a4:	1b52      	subs	r2, r2, r5
 80162a6:	e7f0      	b.n	801628a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080162a8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80162a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80162ac:	4c1c      	ldr	r4, [pc, #112]	@ (8016320 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80162ae:	4605      	mov	r5, r0
 80162b0:	6807      	ldr	r7, [r0, #0]
 80162b2:	69a3      	ldr	r3, [r4, #24]
 80162b4:	b92b      	cbnz	r3, 80162c2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80162b6:	6840      	ldr	r0, [r0, #4]
 80162b8:	e9c5 7000 	strd	r7, r0, [r5]
 80162bc:	b004      	add	sp, #16
 80162be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162c2:	f04f 0802 	mov.w	r8, #2
 80162c6:	68a2      	ldr	r2, [r4, #8]
 80162c8:	ae04      	add	r6, sp, #16
 80162ca:	6820      	ldr	r0, [r4, #0]
 80162cc:	fb93 f1f8 	sdiv	r1, r3, r8
 80162d0:	440a      	add	r2, r1
 80162d2:	69e1      	ldr	r1, [r4, #28]
 80162d4:	f846 2d04 	str.w	r2, [r6, #-4]!
 80162d8:	463a      	mov	r2, r7
 80162da:	9600      	str	r6, [sp, #0]
 80162dc:	f7ff ff98 	bl	8016210 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80162e0:	69a3      	ldr	r3, [r4, #24]
 80162e2:	4607      	mov	r7, r0
 80162e4:	686a      	ldr	r2, [r5, #4]
 80162e6:	6a21      	ldr	r1, [r4, #32]
 80162e8:	9600      	str	r6, [sp, #0]
 80162ea:	6860      	ldr	r0, [r4, #4]
 80162ec:	f7ff ff90 	bl	8016210 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80162f0:	69a3      	ldr	r3, [r4, #24]
 80162f2:	6962      	ldr	r2, [r4, #20]
 80162f4:	4407      	add	r7, r0
 80162f6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80162f8:	9600      	str	r6, [sp, #0]
 80162fa:	68e0      	ldr	r0, [r4, #12]
 80162fc:	fb93 f8f8 	sdiv	r8, r3, r8
 8016300:	4442      	add	r2, r8
 8016302:	9203      	str	r2, [sp, #12]
 8016304:	682a      	ldr	r2, [r5, #0]
 8016306:	f7ff ff83 	bl	8016210 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801630a:	4680      	mov	r8, r0
 801630c:	9600      	str	r6, [sp, #0]
 801630e:	69a3      	ldr	r3, [r4, #24]
 8016310:	686a      	ldr	r2, [r5, #4]
 8016312:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8016314:	6920      	ldr	r0, [r4, #16]
 8016316:	f7ff ff7b 	bl	8016210 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801631a:	4440      	add	r0, r8
 801631c:	e7cc      	b.n	80162b8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801631e:	bf00      	nop
 8016320:	24028e40 	.word	0x24028e40

08016324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016324:	4b07      	ldr	r3, [pc, #28]	@ (8016344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	2b01      	cmp	r3, #1
 801632a:	d109      	bne.n	8016340 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801632c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016330:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016334:	8003      	strh	r3, [r0, #0]
 8016336:	4b04      	ldr	r3, [pc, #16]	@ (8016348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016338:	881b      	ldrh	r3, [r3, #0]
 801633a:	3b01      	subs	r3, #1
 801633c:	1a9b      	subs	r3, r3, r2
 801633e:	800b      	strh	r3, [r1, #0]
 8016340:	4770      	bx	lr
 8016342:	bf00      	nop
 8016344:	24028e24 	.word	0x24028e24
 8016348:	24028e20 	.word	0x24028e20

0801634c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801634c:	4b07      	ldr	r3, [pc, #28]	@ (801636c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801634e:	b510      	push	{r4, lr}
 8016350:	781b      	ldrb	r3, [r3, #0]
 8016352:	2b01      	cmp	r3, #1
 8016354:	d108      	bne.n	8016368 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016356:	4b06      	ldr	r3, [pc, #24]	@ (8016370 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016358:	880c      	ldrh	r4, [r1, #0]
 801635a:	881b      	ldrh	r3, [r3, #0]
 801635c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016360:	3b01      	subs	r3, #1
 8016362:	1b1b      	subs	r3, r3, r4
 8016364:	8003      	strh	r3, [r0, #0]
 8016366:	800a      	strh	r2, [r1, #0]
 8016368:	bd10      	pop	{r4, pc}
 801636a:	bf00      	nop
 801636c:	24028e24 	.word	0x24028e24
 8016370:	24028e20 	.word	0x24028e20

08016374 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016374:	4b0a      	ldr	r3, [pc, #40]	@ (80163a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016376:	b510      	push	{r4, lr}
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	2b01      	cmp	r3, #1
 801637c:	d10e      	bne.n	801639c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801637e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016382:	8843      	ldrh	r3, [r0, #2]
 8016384:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016388:	18ca      	adds	r2, r1, r3
 801638a:	4b06      	ldr	r3, [pc, #24]	@ (80163a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801638c:	8044      	strh	r4, [r0, #2]
 801638e:	881b      	ldrh	r3, [r3, #0]
 8016390:	1a9b      	subs	r3, r3, r2
 8016392:	8003      	strh	r3, [r0, #0]
 8016394:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016398:	8081      	strh	r1, [r0, #4]
 801639a:	80c3      	strh	r3, [r0, #6]
 801639c:	bd10      	pop	{r4, pc}
 801639e:	bf00      	nop
 80163a0:	24028e24 	.word	0x24028e24
 80163a4:	24028e20 	.word	0x24028e20

080163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80163a8:	4b08      	ldr	r3, [pc, #32]	@ (80163cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80163aa:	781b      	ldrb	r3, [r3, #0]
 80163ac:	2b01      	cmp	r3, #1
 80163ae:	d10c      	bne.n	80163ca <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80163b0:	8803      	ldrh	r3, [r0, #0]
 80163b2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80163b6:	8842      	ldrh	r2, [r0, #2]
 80163b8:	8002      	strh	r2, [r0, #0]
 80163ba:	185a      	adds	r2, r3, r1
 80163bc:	4b04      	ldr	r3, [pc, #16]	@ (80163d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80163be:	881b      	ldrh	r3, [r3, #0]
 80163c0:	1a9b      	subs	r3, r3, r2
 80163c2:	8043      	strh	r3, [r0, #2]
 80163c4:	88c3      	ldrh	r3, [r0, #6]
 80163c6:	80c1      	strh	r1, [r0, #6]
 80163c8:	8083      	strh	r3, [r0, #4]
 80163ca:	4770      	bx	lr
 80163cc:	24028e24 	.word	0x24028e24
 80163d0:	24028e20 	.word	0x24028e20

080163d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80163d4:	4b07      	ldr	r3, [pc, #28]	@ (80163f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80163d6:	b510      	push	{r4, lr}
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	2b01      	cmp	r3, #1
 80163dc:	d108      	bne.n	80163f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80163de:	f9b1 3000 	ldrsh.w	r3, [r1]
 80163e2:	f9b0 4000 	ldrsh.w	r4, [r0]
 80163e6:	8003      	strh	r3, [r0, #0]
 80163e8:	8893      	ldrh	r3, [r2, #4]
 80163ea:	3b01      	subs	r3, #1
 80163ec:	1b1b      	subs	r3, r3, r4
 80163ee:	800b      	strh	r3, [r1, #0]
 80163f0:	bd10      	pop	{r4, pc}
 80163f2:	bf00      	nop
 80163f4:	24028e24 	.word	0x24028e24

080163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80163f8:	4b0a      	ldr	r3, [pc, #40]	@ (8016424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80163fa:	460a      	mov	r2, r1
 80163fc:	b510      	push	{r4, lr}
 80163fe:	781b      	ldrb	r3, [r3, #0]
 8016400:	2b01      	cmp	r3, #1
 8016402:	d10d      	bne.n	8016420 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016404:	8881      	ldrh	r1, [r0, #4]
 8016406:	8803      	ldrh	r3, [r0, #0]
 8016408:	440b      	add	r3, r1
 801640a:	4601      	mov	r1, r0
 801640c:	3b01      	subs	r3, #1
 801640e:	f821 3b02 	strh.w	r3, [r1], #2
 8016412:	f7ff ffdf 	bl	80163d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016416:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801641a:	88c2      	ldrh	r2, [r0, #6]
 801641c:	80c3      	strh	r3, [r0, #6]
 801641e:	8082      	strh	r2, [r0, #4]
 8016420:	bd10      	pop	{r4, pc}
 8016422:	bf00      	nop
 8016424:	24028e24 	.word	0x24028e24

08016428 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016428:	4b06      	ldr	r3, [pc, #24]	@ (8016444 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801642a:	2100      	movs	r1, #0
 801642c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016430:	4b05      	ldr	r3, [pc, #20]	@ (8016448 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016432:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8016436:	f9b3 3000 	ldrsh.w	r3, [r3]
 801643a:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801643e:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8016442:	4770      	bx	lr
 8016444:	24028e20 	.word	0x24028e20
 8016448:	24028e22 	.word	0x24028e22

0801644c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801644c:	4b03      	ldr	r3, [pc, #12]	@ (801645c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801644e:	6818      	ldr	r0, [r3, #0]
 8016450:	b110      	cbz	r0, 8016458 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016452:	6803      	ldr	r3, [r0, #0]
 8016454:	699b      	ldr	r3, [r3, #24]
 8016456:	4718      	bx	r3
 8016458:	4770      	bx	lr
 801645a:	bf00      	nop
 801645c:	24028e70 	.word	0x24028e70

08016460 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016460:	4770      	bx	lr
	...

08016464 <_ZN8touchgfx11Application4drawEv>:
 8016464:	4b09      	ldr	r3, [pc, #36]	@ (801648c <_ZN8touchgfx11Application4drawEv+0x28>)
 8016466:	b507      	push	{r0, r1, r2, lr}
 8016468:	f9b3 2000 	ldrsh.w	r2, [r3]
 801646c:	2100      	movs	r1, #0
 801646e:	4b08      	ldr	r3, [pc, #32]	@ (8016490 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016470:	9100      	str	r1, [sp, #0]
 8016472:	4669      	mov	r1, sp
 8016474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016478:	f8ad 2004 	strh.w	r2, [sp, #4]
 801647c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016480:	6803      	ldr	r3, [r0, #0]
 8016482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016484:	4798      	blx	r3
 8016486:	b003      	add	sp, #12
 8016488:	f85d fb04 	ldr.w	pc, [sp], #4
 801648c:	24028e20 	.word	0x24028e20
 8016490:	24028e22 	.word	0x24028e22

08016494 <_ZN8touchgfx11Application10invalidateEv>:
 8016494:	4b09      	ldr	r3, [pc, #36]	@ (80164bc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016496:	b082      	sub	sp, #8
 8016498:	2100      	movs	r1, #0
 801649a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801649e:	4b08      	ldr	r3, [pc, #32]	@ (80164c0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80164a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80164a4:	aa02      	add	r2, sp, #8
 80164a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164aa:	9100      	str	r1, [sp, #0]
 80164ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 80164b0:	6803      	ldr	r3, [r0, #0]
 80164b2:	e912 0006 	ldmdb	r2, {r1, r2}
 80164b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80164b8:	b002      	add	sp, #8
 80164ba:	4718      	bx	r3
 80164bc:	24028e20 	.word	0x24028e20
 80164c0:	24028e22 	.word	0x24028e22

080164c4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80164c4:	4b03      	ldr	r3, [pc, #12]	@ (80164d4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80164c6:	6818      	ldr	r0, [r3, #0]
 80164c8:	b110      	cbz	r0, 80164d0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80164ca:	6803      	ldr	r3, [r0, #0]
 80164cc:	69db      	ldr	r3, [r3, #28]
 80164ce:	4718      	bx	r3
 80164d0:	4770      	bx	lr
 80164d2:	bf00      	nop
 80164d4:	24028e70 	.word	0x24028e70

080164d8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80164d8:	4b03      	ldr	r3, [pc, #12]	@ (80164e8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80164da:	6818      	ldr	r0, [r3, #0]
 80164dc:	b110      	cbz	r0, 80164e4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80164de:	6803      	ldr	r3, [r0, #0]
 80164e0:	6a1b      	ldr	r3, [r3, #32]
 80164e2:	4718      	bx	r3
 80164e4:	4770      	bx	lr
 80164e6:	bf00      	nop
 80164e8:	24028e70 	.word	0x24028e70

080164ec <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80164ec:	2300      	movs	r3, #0
 80164ee:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80164f2:	4770      	bx	lr

080164f4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80164f4:	4b03      	ldr	r3, [pc, #12]	@ (8016504 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80164f6:	6818      	ldr	r0, [r3, #0]
 80164f8:	b110      	cbz	r0, 8016500 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80164fa:	6803      	ldr	r3, [r0, #0]
 80164fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80164fe:	4718      	bx	r3
 8016500:	4770      	bx	lr
 8016502:	bf00      	nop
 8016504:	24028e70 	.word	0x24028e70

08016508 <_ZN8touchgfx11ApplicationD1Ev>:
 8016508:	4770      	bx	lr

0801650a <_ZN8touchgfx11ApplicationD0Ev>:
 801650a:	b510      	push	{r4, lr}
 801650c:	4604      	mov	r4, r0
 801650e:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8016512:	f00e fb8c 	bl	8024c2e <_ZdlPvj>
 8016516:	4620      	mov	r0, r4
 8016518:	bd10      	pop	{r4, pc}

0801651a <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801651a:	b510      	push	{r4, lr}
 801651c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016520:	888a      	ldrh	r2, [r1, #4]
 8016522:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016526:	4422      	add	r2, r4
 8016528:	b212      	sxth	r2, r2
 801652a:	4293      	cmp	r3, r2
 801652c:	da15      	bge.n	801655a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801652e:	8882      	ldrh	r2, [r0, #4]
 8016530:	4413      	add	r3, r2
 8016532:	b21b      	sxth	r3, r3
 8016534:	429c      	cmp	r4, r3
 8016536:	da10      	bge.n	801655a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016538:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801653c:	88c9      	ldrh	r1, [r1, #6]
 801653e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016542:	4419      	add	r1, r3
 8016544:	b209      	sxth	r1, r1
 8016546:	428a      	cmp	r2, r1
 8016548:	da07      	bge.n	801655a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801654a:	88c0      	ldrh	r0, [r0, #6]
 801654c:	4410      	add	r0, r2
 801654e:	b200      	sxth	r0, r0
 8016550:	4283      	cmp	r3, r0
 8016552:	bfac      	ite	ge
 8016554:	2000      	movge	r0, #0
 8016556:	2001      	movlt	r0, #1
 8016558:	bd10      	pop	{r4, pc}
 801655a:	2000      	movs	r0, #0
 801655c:	e7fc      	b.n	8016558 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801655e <_ZN8touchgfx4Rect10restrictToEss>:
 801655e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016562:	2b00      	cmp	r3, #0
 8016564:	b510      	push	{r4, lr}
 8016566:	da04      	bge.n	8016572 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016568:	8884      	ldrh	r4, [r0, #4]
 801656a:	4423      	add	r3, r4
 801656c:	8083      	strh	r3, [r0, #4]
 801656e:	2300      	movs	r3, #0
 8016570:	8003      	strh	r3, [r0, #0]
 8016572:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016576:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801657a:	1b09      	subs	r1, r1, r4
 801657c:	428b      	cmp	r3, r1
 801657e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016582:	bfc8      	it	gt
 8016584:	8081      	strhgt	r1, [r0, #4]
 8016586:	2b00      	cmp	r3, #0
 8016588:	da04      	bge.n	8016594 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801658a:	88c1      	ldrh	r1, [r0, #6]
 801658c:	440b      	add	r3, r1
 801658e:	80c3      	strh	r3, [r0, #6]
 8016590:	2300      	movs	r3, #0
 8016592:	8043      	strh	r3, [r0, #2]
 8016594:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016598:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801659c:	1a52      	subs	r2, r2, r1
 801659e:	4293      	cmp	r3, r2
 80165a0:	bfc8      	it	gt
 80165a2:	80c2      	strhgt	r2, [r0, #6]
 80165a4:	bd10      	pop	{r4, pc}
	...

080165a8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80165a8:	4b10      	ldr	r3, [pc, #64]	@ (80165ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80165aa:	b510      	push	{r4, lr}
 80165ac:	460c      	mov	r4, r1
 80165ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80165b2:	4b0f      	ldr	r3, [pc, #60]	@ (80165f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80165b4:	4620      	mov	r0, r4
 80165b6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80165ba:	f7ff ffd0 	bl	801655e <_ZN8touchgfx4Rect10restrictToEss>
 80165be:	4b0d      	ldr	r3, [pc, #52]	@ (80165f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80165c0:	6818      	ldr	r0, [r3, #0]
 80165c2:	b190      	cbz	r0, 80165ea <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80165c4:	6803      	ldr	r3, [r0, #0]
 80165c6:	4621      	mov	r1, r4
 80165c8:	689b      	ldr	r3, [r3, #8]
 80165ca:	4798      	blx	r3
 80165cc:	4b0a      	ldr	r3, [pc, #40]	@ (80165f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80165ce:	6818      	ldr	r0, [r3, #0]
 80165d0:	b118      	cbz	r0, 80165da <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80165d2:	6803      	ldr	r3, [r0, #0]
 80165d4:	4621      	mov	r1, r4
 80165d6:	689b      	ldr	r3, [r3, #8]
 80165d8:	4798      	blx	r3
 80165da:	4b08      	ldr	r3, [pc, #32]	@ (80165fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80165dc:	4621      	mov	r1, r4
 80165de:	6818      	ldr	r0, [r3, #0]
 80165e0:	6803      	ldr	r3, [r0, #0]
 80165e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165e6:	69db      	ldr	r3, [r3, #28]
 80165e8:	4718      	bx	r3
 80165ea:	bd10      	pop	{r4, pc}
 80165ec:	24028e22 	.word	0x24028e22
 80165f0:	24028e20 	.word	0x24028e20
 80165f4:	24028e70 	.word	0x24028e70
 80165f8:	24028e6c 	.word	0x24028e6c
 80165fc:	24028e2c 	.word	0x24028e2c

08016600 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016602:	4606      	mov	r6, r0
 8016604:	4608      	mov	r0, r1
 8016606:	460f      	mov	r7, r1
 8016608:	f7fa f991 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 801660c:	b9e8      	cbnz	r0, 801664a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801660e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016612:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016616:	42a5      	cmp	r5, r4
 8016618:	db17      	blt.n	801664a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801661a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801661e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016622:	429a      	cmp	r2, r3
 8016624:	db11      	blt.n	801664a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016626:	88b9      	ldrh	r1, [r7, #4]
 8016628:	440d      	add	r5, r1
 801662a:	88b1      	ldrh	r1, [r6, #4]
 801662c:	440c      	add	r4, r1
 801662e:	b22d      	sxth	r5, r5
 8016630:	b224      	sxth	r4, r4
 8016632:	42a5      	cmp	r5, r4
 8016634:	dc09      	bgt.n	801664a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016636:	88f8      	ldrh	r0, [r7, #6]
 8016638:	4410      	add	r0, r2
 801663a:	88f2      	ldrh	r2, [r6, #6]
 801663c:	4413      	add	r3, r2
 801663e:	b200      	sxth	r0, r0
 8016640:	b21b      	sxth	r3, r3
 8016642:	4298      	cmp	r0, r3
 8016644:	bfcc      	ite	gt
 8016646:	2000      	movgt	r0, #0
 8016648:	2001      	movle	r0, #1
 801664a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801664c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801664e:	4604      	mov	r4, r0
 8016650:	4608      	mov	r0, r1
 8016652:	460d      	mov	r5, r1
 8016654:	f7fa f96b 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016658:	b978      	cbnz	r0, 801667a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801665a:	4620      	mov	r0, r4
 801665c:	f7fa f967 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016660:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016664:	b150      	cbz	r0, 801667c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016666:	8026      	strh	r6, [r4, #0]
 8016668:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801666c:	8063      	strh	r3, [r4, #2]
 801666e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016672:	80a3      	strh	r3, [r4, #4]
 8016674:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016678:	80e3      	strh	r3, [r4, #6]
 801667a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801667c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016680:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016684:	42b1      	cmp	r1, r6
 8016686:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801668a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801668e:	460f      	mov	r7, r1
 8016690:	88ed      	ldrh	r5, [r5, #6]
 8016692:	bfa8      	it	ge
 8016694:	4637      	movge	r7, r6
 8016696:	4293      	cmp	r3, r2
 8016698:	4618      	mov	r0, r3
 801669a:	4466      	add	r6, ip
 801669c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80166a0:	bfa8      	it	ge
 80166a2:	4610      	movge	r0, r2
 80166a4:	442a      	add	r2, r5
 80166a6:	88e5      	ldrh	r5, [r4, #6]
 80166a8:	4461      	add	r1, ip
 80166aa:	b236      	sxth	r6, r6
 80166ac:	8027      	strh	r7, [r4, #0]
 80166ae:	442b      	add	r3, r5
 80166b0:	b209      	sxth	r1, r1
 80166b2:	b212      	sxth	r2, r2
 80166b4:	8060      	strh	r0, [r4, #2]
 80166b6:	b21b      	sxth	r3, r3
 80166b8:	428e      	cmp	r6, r1
 80166ba:	bfac      	ite	ge
 80166bc:	ebc7 0106 	rsbge	r1, r7, r6
 80166c0:	ebc7 0101 	rsblt	r1, r7, r1
 80166c4:	429a      	cmp	r2, r3
 80166c6:	bfac      	ite	ge
 80166c8:	ebc0 0202 	rsbge	r2, r0, r2
 80166cc:	ebc0 0203 	rsblt	r2, r0, r3
 80166d0:	80a1      	strh	r1, [r4, #4]
 80166d2:	80e2      	strh	r2, [r4, #6]
 80166d4:	e7d1      	b.n	801667a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080166d8 <_ZN8touchgfx11Application11getInstanceEv>:
 80166d8:	4b01      	ldr	r3, [pc, #4]	@ (80166e0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80166da:	6818      	ldr	r0, [r3, #0]
 80166dc:	4770      	bx	lr
 80166de:	bf00      	nop
 80166e0:	24028e80 	.word	0x24028e80

080166e4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80166e4:	2300      	movs	r3, #0
 80166e6:	b510      	push	{r4, lr}
 80166e8:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80166ec:	4604      	mov	r4, r0
 80166ee:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80166f2:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80166f6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80166fa:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 80166fe:	429a      	cmp	r2, r3
 8016700:	d90e      	bls.n	8016720 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8016702:	18e2      	adds	r2, r4, r3
 8016704:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8016708:	b122      	cbz	r2, 8016714 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801670a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801670e:	6803      	ldr	r3, [r0, #0]
 8016710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016712:	4798      	blx	r3
 8016714:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016718:	3301      	adds	r3, #1
 801671a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801671e:	e7ea      	b.n	80166f6 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8016720:	bd10      	pop	{r4, pc}

08016722 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8016722:	2300      	movs	r3, #0
 8016724:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8016728:	30a4      	adds	r0, #164	@ 0xa4
 801672a:	f820 3c24 	strh.w	r3, [r0, #-36]
 801672e:	f802 3b01 	strb.w	r3, [r2], #1
 8016732:	4282      	cmp	r2, r0
 8016734:	d1fb      	bne.n	801672e <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8016736:	4770      	bx	lr

08016738 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016738:	b570      	push	{r4, r5, r6, lr}
 801673a:	4c0b      	ldr	r4, [pc, #44]	@ (8016768 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801673c:	4605      	mov	r5, r0
 801673e:	460e      	mov	r6, r1
 8016740:	6820      	ldr	r0, [r4, #0]
 8016742:	b110      	cbz	r0, 801674a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8016744:	6803      	ldr	r3, [r0, #0]
 8016746:	695b      	ldr	r3, [r3, #20]
 8016748:	4798      	blx	r3
 801674a:	1d28      	adds	r0, r5, #4
 801674c:	f7ff ffe9 	bl	8016722 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016750:	6026      	str	r6, [r4, #0]
 8016752:	6833      	ldr	r3, [r6, #0]
 8016754:	4630      	mov	r0, r6
 8016756:	68db      	ldr	r3, [r3, #12]
 8016758:	4798      	blx	r3
 801675a:	682b      	ldr	r3, [r5, #0]
 801675c:	4628      	mov	r0, r5
 801675e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016764:	4718      	bx	r3
 8016766:	bf00      	nop
 8016768:	24028e70 	.word	0x24028e70

0801676c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801676c:	2300      	movs	r3, #0
 801676e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8016772:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8016776:	461a      	mov	r2, r3
 8016778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801677a:	461c      	mov	r4, r3
 801677c:	461d      	mov	r5, r3
 801677e:	459c      	cmp	ip, r3
 8016780:	dd1a      	ble.n	80167b8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8016782:	18c6      	adds	r6, r0, r3
 8016784:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8016788:	b16e      	cbz	r6, 80167a6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801678a:	429a      	cmp	r2, r3
 801678c:	d008      	beq.n	80167a0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801678e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8016792:	fa1f fe82 	uxth.w	lr, r2
 8016796:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801679a:	1887      	adds	r7, r0, r2
 801679c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 80167a0:	3201      	adds	r2, #1
 80167a2:	3301      	adds	r3, #1
 80167a4:	e7eb      	b.n	801677e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80167a6:	4299      	cmp	r1, r3
 80167a8:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 80167ac:	bfa8      	it	ge
 80167ae:	3501      	addge	r5, #1
 80167b0:	429e      	cmp	r6, r3
 80167b2:	bfc8      	it	gt
 80167b4:	3401      	addgt	r4, #1
 80167b6:	e7f4      	b.n	80167a2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80167b8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 80167bc:	1b49      	subs	r1, r1, r5
 80167be:	1b1b      	subs	r3, r3, r4
 80167c0:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 80167c4:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80167c8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80167cc:	4293      	cmp	r3, r2
 80167ce:	dd03      	ble.n	80167d8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80167d0:	3b01      	subs	r3, #1
 80167d2:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80167d6:	e7f7      	b.n	80167c8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80167d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080167dc <_ZN8touchgfx11Application15handleTickEventEv>:
 80167dc:	b570      	push	{r4, r5, r6, lr}
 80167de:	4d16      	ldr	r5, [pc, #88]	@ (8016838 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80167e0:	4604      	mov	r4, r0
 80167e2:	6828      	ldr	r0, [r5, #0]
 80167e4:	b140      	cbz	r0, 80167f8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80167e6:	7a03      	ldrb	r3, [r0, #8]
 80167e8:	b933      	cbnz	r3, 80167f8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80167ea:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80167ee:	6803      	ldr	r3, [r0, #0]
 80167f0:	689b      	ldr	r3, [r3, #8]
 80167f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167f6:	4718      	bx	r3
 80167f8:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 80167fc:	4e0f      	ldr	r6, [pc, #60]	@ (801683c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80167fe:	b973      	cbnz	r3, 801681e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016800:	b168      	cbz	r0, 801681e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016802:	7a03      	ldrb	r3, [r0, #8]
 8016804:	b15b      	cbz	r3, 801681e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016806:	6830      	ldr	r0, [r6, #0]
 8016808:	b110      	cbz	r0, 8016810 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801680a:	6803      	ldr	r3, [r0, #0]
 801680c:	691b      	ldr	r3, [r3, #16]
 801680e:	4798      	blx	r3
 8016810:	6828      	ldr	r0, [r5, #0]
 8016812:	6803      	ldr	r3, [r0, #0]
 8016814:	68db      	ldr	r3, [r3, #12]
 8016816:	4798      	blx	r3
 8016818:	2301      	movs	r3, #1
 801681a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801681e:	3404      	adds	r4, #4
 8016820:	4620      	mov	r0, r4
 8016822:	f7ff ff5f 	bl	80166e4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8016826:	4620      	mov	r0, r4
 8016828:	f7ff ffa0 	bl	801676c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801682c:	6830      	ldr	r0, [r6, #0]
 801682e:	b110      	cbz	r0, 8016836 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8016830:	6803      	ldr	r3, [r0, #0]
 8016832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016834:	e7dd      	b.n	80167f2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8016836:	bd70      	pop	{r4, r5, r6, pc}
 8016838:	24028e74 	.word	0x24028e74
 801683c:	24028e70 	.word	0x24028e70

08016840 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016840:	4603      	mov	r3, r0
 8016842:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8016846:	2200      	movs	r2, #0
 8016848:	801a      	strh	r2, [r3, #0]
 801684a:	3308      	adds	r3, #8
 801684c:	f823 2c06 	strh.w	r2, [r3, #-6]
 8016850:	f823 2c04 	strh.w	r2, [r3, #-4]
 8016854:	f823 2c02 	strh.w	r2, [r3, #-2]
 8016858:	428b      	cmp	r3, r1
 801685a:	d1f5      	bne.n	8016848 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801685c:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8016860:	4770      	bx	lr
	...

08016864 <_ZN8touchgfx11ApplicationC1Ev>:
 8016864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016866:	4b1d      	ldr	r3, [pc, #116]	@ (80168dc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016868:	4606      	mov	r6, r0
 801686a:	4604      	mov	r4, r0
 801686c:	2500      	movs	r5, #0
 801686e:	f846 3b04 	str.w	r3, [r6], #4
 8016872:	22a8      	movs	r2, #168	@ 0xa8
 8016874:	2100      	movs	r1, #0
 8016876:	4630      	mov	r0, r6
 8016878:	f00e ffee 	bl	8025858 <memset>
 801687c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8016880:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8016884:	4f16      	ldr	r7, [pc, #88]	@ (80168e0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8016886:	f7ff ffdb 	bl	8016840 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801688a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801688e:	f7ff ffd7 	bl	8016840 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016892:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8016896:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801689a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801689e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80168a2:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80168a6:	490f      	ldr	r1, [pc, #60]	@ (80168e4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80168a8:	480f      	ldr	r0, [pc, #60]	@ (80168e8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80168aa:	f00d fb4f 	bl	8023f4c <CRC_Lock>
 80168ae:	4b0f      	ldr	r3, [pc, #60]	@ (80168ec <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80168b0:	b158      	cbz	r0, 80168ca <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80168b2:	801d      	strh	r5, [r3, #0]
 80168b4:	2300      	movs	r3, #0
 80168b6:	4a0e      	ldr	r2, [pc, #56]	@ (80168f0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80168b8:	4630      	mov	r0, r6
 80168ba:	6013      	str	r3, [r2, #0]
 80168bc:	4a0d      	ldr	r2, [pc, #52]	@ (80168f4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80168be:	603b      	str	r3, [r7, #0]
 80168c0:	6013      	str	r3, [r2, #0]
 80168c2:	f7ff ff2e 	bl	8016722 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80168c6:	4620      	mov	r0, r4
 80168c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80168ce:	2002      	movs	r0, #2
 80168d0:	801a      	strh	r2, [r3, #0]
 80168d2:	6038      	str	r0, [r7, #0]
 80168d4:	f001 fe4a 	bl	801856c <_ZN8touchgfx6Screen4drawEv>
 80168d8:	e7ec      	b.n	80168b4 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80168da:	bf00      	nop
 80168dc:	0802967c 	.word	0x0802967c
 80168e0:	24028e70 	.word	0x24028e70
 80168e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80168e8:	f407a5c2 	.word	0xf407a5c2
 80168ec:	2400007c 	.word	0x2400007c
 80168f0:	24028e80 	.word	0x24028e80
 80168f4:	24028e74 	.word	0x24028e74

080168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80168f8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80168fc:	3b01      	subs	r3, #1
 80168fe:	b29b      	uxth	r3, r3
 8016900:	428b      	cmp	r3, r1
 8016902:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8016906:	b510      	push	{r4, lr}
 8016908:	d908      	bls.n	801691c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801690a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801690e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016912:	681a      	ldr	r2, [r3, #0]
 8016914:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016918:	685a      	ldr	r2, [r3, #4]
 801691a:	6062      	str	r2, [r4, #4]
 801691c:	bd10      	pop	{r4, pc}
	...

08016920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016924:	b08f      	sub	sp, #60	@ 0x3c
 8016926:	4b8f      	ldr	r3, [pc, #572]	@ (8016b64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8016928:	4683      	mov	fp, r0
 801692a:	ac0a      	add	r4, sp, #40	@ 0x28
 801692c:	e884 0006 	stmia.w	r4, {r1, r2}
 8016930:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016934:	4620      	mov	r0, r4
 8016936:	4b8c      	ldr	r3, [pc, #560]	@ (8016b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8016938:	f9b3 1000 	ldrsh.w	r1, [r3]
 801693c:	f7ff fe0f 	bl	801655e <_ZN8touchgfx4Rect10restrictToEss>
 8016940:	4620      	mov	r0, r4
 8016942:	f7f9 fff4 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016946:	2800      	cmp	r0, #0
 8016948:	d16a      	bne.n	8016a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801694a:	9403      	str	r4, [sp, #12]
 801694c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016950:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016954:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8016958:	9301      	str	r3, [sp, #4]
 801695a:	35a4      	adds	r5, #164	@ 0xa4
 801695c:	b15c      	cbz	r4, 8016976 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801695e:	4629      	mov	r1, r5
 8016960:	9803      	ldr	r0, [sp, #12]
 8016962:	f7ff fe4d 	bl	8016600 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016966:	3c01      	subs	r4, #1
 8016968:	b118      	cbz	r0, 8016972 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801696a:	b2a1      	uxth	r1, r4
 801696c:	9801      	ldr	r0, [sp, #4]
 801696e:	f7ff ffc3 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016972:	3d08      	subs	r5, #8
 8016974:	e7f2      	b.n	801695c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8016976:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801697a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801697e:	f8cd a010 	str.w	sl, [sp, #16]
 8016982:	9302      	str	r3, [sp, #8]
 8016984:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016988:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801698c:	9306      	str	r3, [sp, #24]
 801698e:	445c      	add	r4, fp
 8016990:	2500      	movs	r5, #0
 8016992:	4626      	mov	r6, r4
 8016994:	f8cd a014 	str.w	sl, [sp, #20]
 8016998:	462f      	mov	r7, r5
 801699a:	9b05      	ldr	r3, [sp, #20]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d073      	beq.n	8016a88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80169a0:	9903      	ldr	r1, [sp, #12]
 80169a2:	4630      	mov	r0, r6
 80169a4:	f7ff fdb9 	bl	801651a <_ZNK8touchgfx4Rect9intersectERKS0_>
 80169a8:	b350      	cbz	r0, 8016a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80169aa:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80169ae:	f9b6 c000 	ldrsh.w	ip, [r6]
 80169b2:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 80169b6:	45e6      	cmp	lr, ip
 80169b8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80169bc:	db33      	blt.n	8016a26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80169be:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80169c2:	88b3      	ldrh	r3, [r6, #4]
 80169c4:	4472      	add	r2, lr
 80169c6:	4463      	add	r3, ip
 80169c8:	b212      	sxth	r2, r2
 80169ca:	b21b      	sxth	r3, r3
 80169cc:	429a      	cmp	r2, r3
 80169ce:	dc2a      	bgt.n	8016a26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80169d0:	fa1f f289 	uxth.w	r2, r9
 80169d4:	88f3      	ldrh	r3, [r6, #6]
 80169d6:	45c8      	cmp	r8, r9
 80169d8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80169dc:	4413      	add	r3, r2
 80169de:	fa1f fc88 	uxth.w	ip, r8
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	fa0f fe83 	sxth.w	lr, r3
 80169e8:	db0f      	blt.n	8016a0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80169ea:	eba3 030c 	sub.w	r3, r3, ip
 80169ee:	1ac9      	subs	r1, r1, r3
 80169f0:	b209      	sxth	r1, r1
 80169f2:	2900      	cmp	r1, #0
 80169f4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80169f8:	dd12      	ble.n	8016a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80169fa:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 80169fe:	4605      	mov	r5, r0
 8016a00:	9b05      	ldr	r3, [sp, #20]
 8016a02:	3e08      	subs	r6, #8
 8016a04:	3b01      	subs	r3, #1
 8016a06:	9305      	str	r3, [sp, #20]
 8016a08:	e7c7      	b.n	801699a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8016a0a:	4461      	add	r1, ip
 8016a0c:	b209      	sxth	r1, r1
 8016a0e:	4571      	cmp	r1, lr
 8016a10:	dc38      	bgt.n	8016a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a12:	eba2 020c 	sub.w	r2, r2, ip
 8016a16:	b212      	sxth	r2, r2
 8016a18:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8016a1c:	2a00      	cmp	r2, #0
 8016a1e:	dcee      	bgt.n	80169fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016a20:	b00f      	add	sp, #60	@ 0x3c
 8016a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a26:	45c8      	cmp	r8, r9
 8016a28:	db2c      	blt.n	8016a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a2a:	88f3      	ldrh	r3, [r6, #6]
 8016a2c:	4499      	add	r9, r3
 8016a2e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8016a32:	4498      	add	r8, r3
 8016a34:	fa0f f989 	sxth.w	r9, r9
 8016a38:	fa0f f888 	sxth.w	r8, r8
 8016a3c:	45c1      	cmp	r9, r8
 8016a3e:	db21      	blt.n	8016a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a40:	fa1f f28c 	uxth.w	r2, ip
 8016a44:	88b3      	ldrh	r3, [r6, #4]
 8016a46:	45e6      	cmp	lr, ip
 8016a48:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8016a4c:	4413      	add	r3, r2
 8016a4e:	fa1f f88e 	uxth.w	r8, lr
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	fa0f f983 	sxth.w	r9, r3
 8016a58:	db0a      	blt.n	8016a70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8016a5a:	eba3 0308 	sub.w	r3, r3, r8
 8016a5e:	1ac9      	subs	r1, r1, r3
 8016a60:	b209      	sxth	r1, r1
 8016a62:	2900      	cmp	r1, #0
 8016a64:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8016a68:	ddda      	ble.n	8016a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016a6a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8016a6e:	e7c6      	b.n	80169fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016a70:	4441      	add	r1, r8
 8016a72:	b209      	sxth	r1, r1
 8016a74:	4549      	cmp	r1, r9
 8016a76:	dc05      	bgt.n	8016a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a78:	eba2 0208 	sub.w	r2, r2, r8
 8016a7c:	b212      	sxth	r2, r2
 8016a7e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8016a82:	e7cb      	b.n	8016a1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8016a84:	4607      	mov	r7, r0
 8016a86:	e7bb      	b.n	8016a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016a88:	2d00      	cmp	r5, #0
 8016a8a:	d181      	bne.n	8016990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8016a8c:	2f00      	cmp	r7, #0
 8016a8e:	f000 81dd 	beq.w	8016e4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016a92:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8016a96:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8016a9a:	b2b3      	uxth	r3, r6
 8016a9c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8016aa0:	9305      	str	r3, [sp, #20]
 8016aa2:	9a05      	ldr	r2, [sp, #20]
 8016aa4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8016aa8:	4413      	add	r3, r2
 8016aaa:	b2ba      	uxth	r2, r7
 8016aac:	4492      	add	sl, r2
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	fa1f fa8a 	uxth.w	sl, sl
 8016ab4:	fa0f f883 	sxth.w	r8, r3
 8016ab8:	fa0f f98a 	sxth.w	r9, sl
 8016abc:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8016ac0:	9b04      	ldr	r3, [sp, #16]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d052      	beq.n	8016b6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8016ac6:	9903      	ldr	r1, [sp, #12]
 8016ac8:	4620      	mov	r0, r4
 8016aca:	f7ff fd26 	bl	801651a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016ace:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016ad2:	b1c0      	cbz	r0, 8016b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016ad4:	f9b4 e000 	ldrsh.w	lr, [r4]
 8016ad8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016adc:	4576      	cmp	r6, lr
 8016ade:	dc22      	bgt.n	8016b26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016ae0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016ae4:	44f4      	add	ip, lr
 8016ae6:	fa0f fc8c 	sxth.w	ip, ip
 8016aea:	45e0      	cmp	r8, ip
 8016aec:	db1b      	blt.n	8016b26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016aee:	428f      	cmp	r7, r1
 8016af0:	fa1f fc81 	uxth.w	ip, r1
 8016af4:	88e1      	ldrh	r1, [r4, #6]
 8016af6:	dc0d      	bgt.n	8016b14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8016af8:	ebaa 0c0c 	sub.w	ip, sl, ip
 8016afc:	f8a4 9002 	strh.w	r9, [r4, #2]
 8016b00:	eba1 010c 	sub.w	r1, r1, ip
 8016b04:	80e1      	strh	r1, [r4, #6]
 8016b06:	4628      	mov	r0, r5
 8016b08:	9904      	ldr	r1, [sp, #16]
 8016b0a:	3c08      	subs	r4, #8
 8016b0c:	4605      	mov	r5, r0
 8016b0e:	3901      	subs	r1, #1
 8016b10:	9104      	str	r1, [sp, #16]
 8016b12:	e7d3      	b.n	8016abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8016b14:	4461      	add	r1, ip
 8016b16:	b209      	sxth	r1, r1
 8016b18:	4549      	cmp	r1, r9
 8016b1a:	dcf5      	bgt.n	8016b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016b1c:	eba2 0c0c 	sub.w	ip, r2, ip
 8016b20:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016b24:	e7ef      	b.n	8016b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b26:	428f      	cmp	r7, r1
 8016b28:	dcee      	bgt.n	8016b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016b2a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8016b2e:	4461      	add	r1, ip
 8016b30:	b209      	sxth	r1, r1
 8016b32:	4589      	cmp	r9, r1
 8016b34:	dbe8      	blt.n	8016b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016b36:	4576      	cmp	r6, lr
 8016b38:	fa1f fc8e 	uxth.w	ip, lr
 8016b3c:	88a1      	ldrh	r1, [r4, #4]
 8016b3e:	dc07      	bgt.n	8016b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8016b40:	eba3 0c0c 	sub.w	ip, r3, ip
 8016b44:	f8a4 8000 	strh.w	r8, [r4]
 8016b48:	eba1 010c 	sub.w	r1, r1, ip
 8016b4c:	80a1      	strh	r1, [r4, #4]
 8016b4e:	e7da      	b.n	8016b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b50:	4461      	add	r1, ip
 8016b52:	b209      	sxth	r1, r1
 8016b54:	4588      	cmp	r8, r1
 8016b56:	dbd7      	blt.n	8016b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016b58:	9905      	ldr	r1, [sp, #20]
 8016b5a:	eba1 0c0c 	sub.w	ip, r1, ip
 8016b5e:	f8a4 c004 	strh.w	ip, [r4, #4]
 8016b62:	e7d0      	b.n	8016b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b64:	24028e22 	.word	0x24028e22
 8016b68:	24028e20 	.word	0x24028e20
 8016b6c:	2d00      	cmp	r5, #0
 8016b6e:	f000 816d 	beq.w	8016e4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016b72:	9b06      	ldr	r3, [sp, #24]
 8016b74:	445b      	add	r3, fp
 8016b76:	461c      	mov	r4, r3
 8016b78:	9b02      	ldr	r3, [sp, #8]
 8016b7a:	3301      	adds	r3, #1
 8016b7c:	f000 8166 	beq.w	8016e4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016b80:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8016b84:	9803      	ldr	r0, [sp, #12]
 8016b86:	4629      	mov	r1, r5
 8016b88:	f7ff fd3a 	bl	8016600 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016b8c:	b120      	cbz	r0, 8016b98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8016b8e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8016b92:	9801      	ldr	r0, [sp, #4]
 8016b94:	f7ff feb0 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016b98:	9903      	ldr	r1, [sp, #12]
 8016b9a:	4628      	mov	r0, r5
 8016b9c:	f7ff fcbd 	bl	801651a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016ba0:	2800      	cmp	r0, #0
 8016ba2:	f000 809c 	beq.w	8016cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016ba6:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8016baa:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016bae:	fa1f f189 	uxth.w	r1, r9
 8016bb2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8016bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bb8:	eb01 0c03 	add.w	ip, r1, r3
 8016bbc:	b283      	uxth	r3, r0
 8016bbe:	4548      	cmp	r0, r9
 8016bc0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8016bc4:	fa1f fa8c 	uxth.w	sl, ip
 8016bc8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8016bcc:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8016bd0:	eb03 050c 	add.w	r5, r3, ip
 8016bd4:	b2ad      	uxth	r5, r5
 8016bd6:	9505      	str	r5, [sp, #20]
 8016bd8:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8016bdc:	9504      	str	r5, [sp, #16]
 8016bde:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8016be2:	f340 8099 	ble.w	8016d18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8016be6:	1a5b      	subs	r3, r3, r1
 8016be8:	4596      	cmp	lr, r2
 8016bea:	fa0f f08a 	sxth.w	r0, sl
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	b21e      	sxth	r6, r3
 8016bf2:	dd2e      	ble.n	8016c52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8016bf4:	9f02      	ldr	r7, [sp, #8]
 8016bf6:	fa1f fe8e 	uxth.w	lr, lr
 8016bfa:	b292      	uxth	r2, r2
 8016bfc:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8016c00:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8016c04:	9f04      	ldr	r7, [sp, #16]
 8016c06:	ebae 0102 	sub.w	r1, lr, r2
 8016c0a:	44a6      	add	lr, r4
 8016c0c:	1a3f      	subs	r7, r7, r0
 8016c0e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8016c12:	b289      	uxth	r1, r1
 8016c14:	4402      	add	r2, r0
 8016c16:	fa0f fe8e 	sxth.w	lr, lr
 8016c1a:	b20d      	sxth	r5, r1
 8016c1c:	b212      	sxth	r2, r2
 8016c1e:	436f      	muls	r7, r5
 8016c20:	ebae 0202 	sub.w	r2, lr, r2
 8016c24:	4372      	muls	r2, r6
 8016c26:	4297      	cmp	r7, r2
 8016c28:	db09      	blt.n	8016c3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8016c2a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8016c2e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8016c32:	449c      	add	ip, r3
 8016c34:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8016c38:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8016c3c:	e686      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016c3e:	4421      	add	r1, r4
 8016c40:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8016c44:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8016c48:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016c4c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016c50:	e67c      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016c52:	9f04      	ldr	r7, [sp, #16]
 8016c54:	42b8      	cmp	r0, r7
 8016c56:	da27      	bge.n	8016ca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8016c58:	9902      	ldr	r1, [sp, #8]
 8016c5a:	1a3f      	subs	r7, r7, r0
 8016c5c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8016c60:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8016c64:	eb05 010e 	add.w	r1, r5, lr
 8016c68:	fa1f f881 	uxth.w	r8, r1
 8016c6c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8016c70:	4411      	add	r1, r2
 8016c72:	fa0f f988 	sxth.w	r9, r8
 8016c76:	eba2 020e 	sub.w	r2, r2, lr
 8016c7a:	eba1 0108 	sub.w	r1, r1, r8
 8016c7e:	4372      	muls	r2, r6
 8016c80:	b289      	uxth	r1, r1
 8016c82:	fa0f f881 	sxth.w	r8, r1
 8016c86:	fb08 f707 	mul.w	r7, r8, r7
 8016c8a:	42ba      	cmp	r2, r7
 8016c8c:	dc06      	bgt.n	8016c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8016c8e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8016c92:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8016c96:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8016c9a:	e7ca      	b.n	8016c32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8016c9c:	4429      	add	r1, r5
 8016c9e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8016ca2:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016ca6:	e651      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016ca8:	9805      	ldr	r0, [sp, #20]
 8016caa:	2d06      	cmp	r5, #6
 8016cac:	ebaa 0000 	sub.w	r0, sl, r0
 8016cb0:	b280      	uxth	r0, r0
 8016cb2:	fa0f fe80 	sxth.w	lr, r0
 8016cb6:	d817      	bhi.n	8016ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8016cb8:	9b04      	ldr	r3, [sp, #16]
 8016cba:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8016cbe:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8016cc2:	1c6b      	adds	r3, r5, #1
 8016cc4:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8016cc8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8016ccc:	9b01      	ldr	r3, [sp, #4]
 8016cce:	9801      	ldr	r0, [sp, #4]
 8016cd0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016cd4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016cd8:	805a      	strh	r2, [r3, #2]
 8016cda:	809e      	strh	r6, [r3, #4]
 8016cdc:	80d9      	strh	r1, [r3, #6]
 8016cde:	9b02      	ldr	r3, [sp, #8]
 8016ce0:	3c08      	subs	r4, #8
 8016ce2:	3b01      	subs	r3, #1
 8016ce4:	9302      	str	r3, [sp, #8]
 8016ce6:	e747      	b.n	8016b78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8016ce8:	9a02      	ldr	r2, [sp, #8]
 8016cea:	45b6      	cmp	lr, r6
 8016cec:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016cf0:	db0d      	blt.n	8016d0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8016cf2:	449c      	add	ip, r3
 8016cf4:	445a      	add	r2, fp
 8016cf6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8016cfa:	fa1f fc8c 	uxth.w	ip, ip
 8016cfe:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8016d02:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8016d06:	448c      	add	ip, r1
 8016d08:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8016d0c:	e61e      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016d0e:	445a      	add	r2, fp
 8016d10:	4484      	add	ip, r0
 8016d12:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8016d16:	e78f      	b.n	8016c38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016d18:	fa1f f18e 	uxth.w	r1, lr
 8016d1c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8016d20:	b293      	uxth	r3, r2
 8016d22:	4596      	cmp	lr, r2
 8016d24:	eb01 0806 	add.w	r8, r1, r6
 8016d28:	9306      	str	r3, [sp, #24]
 8016d2a:	fa1f f888 	uxth.w	r8, r8
 8016d2e:	9f06      	ldr	r7, [sp, #24]
 8016d30:	fa0f f388 	sxth.w	r3, r8
 8016d34:	9307      	str	r3, [sp, #28]
 8016d36:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8016d3a:	443b      	add	r3, r7
 8016d3c:	b29b      	uxth	r3, r3
 8016d3e:	9308      	str	r3, [sp, #32]
 8016d40:	da24      	bge.n	8016d8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8016d42:	9905      	ldr	r1, [sp, #20]
 8016d44:	eba3 0308 	sub.w	r3, r3, r8
 8016d48:	eba2 020e 	sub.w	r2, r2, lr
 8016d4c:	eba9 0000 	sub.w	r0, r9, r0
 8016d50:	ebaa 0401 	sub.w	r4, sl, r1
 8016d54:	b29b      	uxth	r3, r3
 8016d56:	b2a4      	uxth	r4, r4
 8016d58:	b219      	sxth	r1, r3
 8016d5a:	b225      	sxth	r5, r4
 8016d5c:	4348      	muls	r0, r1
 8016d5e:	436a      	muls	r2, r5
 8016d60:	4282      	cmp	r2, r0
 8016d62:	9a02      	ldr	r2, [sp, #8]
 8016d64:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016d68:	445a      	add	r2, fp
 8016d6a:	dc06      	bgt.n	8016d7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8016d6c:	9b07      	ldr	r3, [sp, #28]
 8016d6e:	44a4      	add	ip, r4
 8016d70:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8016d74:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8016d78:	e75e      	b.n	8016c38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016d7a:	9904      	ldr	r1, [sp, #16]
 8016d7c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8016d80:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8016d84:	4433      	add	r3, r6
 8016d86:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8016d8a:	e5df      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016d8c:	9f06      	ldr	r7, [sp, #24]
 8016d8e:	9b04      	ldr	r3, [sp, #16]
 8016d90:	1bc9      	subs	r1, r1, r7
 8016d92:	fa0f f78a 	sxth.w	r7, sl
 8016d96:	b289      	uxth	r1, r1
 8016d98:	429f      	cmp	r7, r3
 8016d9a:	fa0f fe81 	sxth.w	lr, r1
 8016d9e:	dd23      	ble.n	8016de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8016da0:	9a05      	ldr	r2, [sp, #20]
 8016da2:	eba9 0000 	sub.w	r0, r9, r0
 8016da6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016daa:	ebaa 0202 	sub.w	r2, sl, r2
 8016dae:	9d07      	ldr	r5, [sp, #28]
 8016db0:	fb0e f000 	mul.w	r0, lr, r0
 8016db4:	b292      	uxth	r2, r2
 8016db6:	eba5 0a03 	sub.w	sl, r5, r3
 8016dba:	9b02      	ldr	r3, [sp, #8]
 8016dbc:	b214      	sxth	r4, r2
 8016dbe:	00db      	lsls	r3, r3, #3
 8016dc0:	fb04 fa0a 	mul.w	sl, r4, sl
 8016dc4:	445b      	add	r3, fp
 8016dc6:	4550      	cmp	r0, sl
 8016dc8:	db03      	blt.n	8016dd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8016dca:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8016dce:	4494      	add	ip, r2
 8016dd0:	e732      	b.n	8016c38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016dd2:	9a04      	ldr	r2, [sp, #16]
 8016dd4:	4431      	add	r1, r6
 8016dd6:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8016dda:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8016dde:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8016de2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016de6:	e75c      	b.n	8016ca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8016de8:	9b08      	ldr	r3, [sp, #32]
 8016dea:	2d06      	cmp	r5, #6
 8016dec:	eba3 0308 	sub.w	r3, r3, r8
 8016df0:	b29b      	uxth	r3, r3
 8016df2:	b218      	sxth	r0, r3
 8016df4:	d813      	bhi.n	8016e1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8016df6:	9b07      	ldr	r3, [sp, #28]
 8016df8:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8016dfc:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8016e00:	1c6b      	adds	r3, r5, #1
 8016e02:	9901      	ldr	r1, [sp, #4]
 8016e04:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8016e08:	9b01      	ldr	r3, [sp, #4]
 8016e0a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8016e0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016e12:	805a      	strh	r2, [r3, #2]
 8016e14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e16:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016e1a:	809a      	strh	r2, [r3, #4]
 8016e1c:	e75f      	b.n	8016cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016e1e:	9c02      	ldr	r4, [sp, #8]
 8016e20:	4570      	cmp	r0, lr
 8016e22:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8016e26:	db0d      	blt.n	8016e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8016e28:	4431      	add	r1, r6
 8016e2a:	9b06      	ldr	r3, [sp, #24]
 8016e2c:	445c      	add	r4, fp
 8016e2e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8016e32:	b289      	uxth	r1, r1
 8016e34:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8016e38:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016e3c:	4419      	add	r1, r3
 8016e3e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8016e42:	e583      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016e44:	445c      	add	r4, fp
 8016e46:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8016e4a:	e79b      	b.n	8016d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016e4c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016e50:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8016e54:	1e65      	subs	r5, r4, #1
 8016e56:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8016e5a:	b2ad      	uxth	r5, r5
 8016e5c:	42b5      	cmp	r5, r6
 8016e5e:	d044      	beq.n	8016eea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8016e60:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8016e64:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8016e68:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8016e6c:	4282      	cmp	r2, r0
 8016e6e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8016e72:	d11f      	bne.n	8016eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8016e74:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8016e78:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8016e7c:	459c      	cmp	ip, r3
 8016e7e:	d119      	bne.n	8016eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8016e80:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8016e84:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8016e88:	19d8      	adds	r0, r3, r7
 8016e8a:	b200      	sxth	r0, r0
 8016e8c:	4288      	cmp	r0, r1
 8016e8e:	d109      	bne.n	8016ea4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8016e90:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8016e94:	4413      	add	r3, r2
 8016e96:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8016e9a:	4629      	mov	r1, r5
 8016e9c:	9801      	ldr	r0, [sp, #4]
 8016e9e:	f7ff fd2b 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016ea2:	e003      	b.n	8016eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016ea4:	4411      	add	r1, r2
 8016ea6:	b209      	sxth	r1, r1
 8016ea8:	42b9      	cmp	r1, r7
 8016eaa:	d0f3      	beq.n	8016e94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8016eac:	3d01      	subs	r5, #1
 8016eae:	3c08      	subs	r4, #8
 8016eb0:	b2ad      	uxth	r5, r5
 8016eb2:	e7d3      	b.n	8016e5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8016eb4:	42b9      	cmp	r1, r7
 8016eb6:	d1f9      	bne.n	8016eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016eb8:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8016ebc:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016ec0:	4299      	cmp	r1, r3
 8016ec2:	d1f3      	bne.n	8016eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016ec4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8016ec8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8016ecc:	181f      	adds	r7, r3, r0
 8016ece:	b23f      	sxth	r7, r7
 8016ed0:	42ba      	cmp	r2, r7
 8016ed2:	d105      	bne.n	8016ee0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8016ed4:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8016ed8:	440b      	add	r3, r1
 8016eda:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8016ede:	e7dc      	b.n	8016e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8016ee0:	440a      	add	r2, r1
 8016ee2:	b212      	sxth	r2, r2
 8016ee4:	4290      	cmp	r0, r2
 8016ee6:	d1e1      	bne.n	8016eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016ee8:	e7f6      	b.n	8016ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8016eea:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8016eee:	2e07      	cmp	r6, #7
 8016ef0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8016ef4:	d812      	bhi.n	8016f1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8016ef6:	1c75      	adds	r5, r6, #1
 8016ef8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8016efc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8016f00:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8016f04:	9d01      	ldr	r5, [sp, #4]
 8016f06:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8016f0a:	442c      	add	r4, r5
 8016f0c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8016f10:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8016f14:	8061      	strh	r1, [r4, #2]
 8016f16:	80a2      	strh	r2, [r4, #4]
 8016f18:	80e3      	strh	r3, [r4, #6]
 8016f1a:	e581      	b.n	8016a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016f1c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016f20:	3e01      	subs	r6, #1
 8016f22:	445c      	add	r4, fp
 8016f24:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8016f28:	f04f 37ff 	mov.w	r7, #4294967295
 8016f2c:	2500      	movs	r5, #0
 8016f2e:	9305      	str	r3, [sp, #20]
 8016f30:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016f34:	1e72      	subs	r2, r6, #1
 8016f36:	9302      	str	r3, [sp, #8]
 8016f38:	4691      	mov	r9, r2
 8016f3a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8016f3e:	9304      	str	r3, [sp, #16]
 8016f40:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8016f44:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016f48:	6818      	ldr	r0, [r3, #0]
 8016f4a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016f4e:	9207      	str	r2, [sp, #28]
 8016f50:	bf16      	itet	ne
 8016f52:	9905      	ldrne	r1, [sp, #20]
 8016f54:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016f58:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016f5c:	9306      	str	r3, [sp, #24]
 8016f5e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8016f62:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8016f66:	fb18 f801 	smulbb	r8, r8, r1
 8016f6a:	6859      	ldr	r1, [r3, #4]
 8016f6c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016f70:	4671      	mov	r1, lr
 8016f72:	a80c      	add	r0, sp, #48	@ 0x30
 8016f74:	f7ff fb6a 	bl	801664c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016f78:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8016f7c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8016f80:	f04f 0c08 	mov.w	ip, #8
 8016f84:	9b04      	ldr	r3, [sp, #16]
 8016f86:	9a02      	ldr	r2, [sp, #8]
 8016f88:	fb10 f001 	smulbb	r0, r0, r1
 8016f8c:	fb02 8803 	mla	r8, r2, r3, r8
 8016f90:	eba0 0108 	sub.w	r1, r0, r8
 8016f94:	fb90 f0fc 	sdiv	r0, r0, ip
 8016f98:	4288      	cmp	r0, r1
 8016f9a:	dc20      	bgt.n	8016fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8016f9c:	4551      	cmp	r1, sl
 8016f9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016fa2:	da03      	bge.n	8016fac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8016fa4:	b1d9      	cbz	r1, 8016fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8016fa6:	468a      	mov	sl, r1
 8016fa8:	464f      	mov	r7, r9
 8016faa:	4635      	mov	r5, r6
 8016fac:	f109 39ff 	add.w	r9, r9, #4294967295
 8016fb0:	f119 0f02 	cmn.w	r9, #2
 8016fb4:	d1c6      	bne.n	8016f44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8016fb6:	4616      	mov	r6, r2
 8016fb8:	3201      	adds	r2, #1
 8016fba:	f1a4 0408 	sub.w	r4, r4, #8
 8016fbe:	d1b7      	bne.n	8016f30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8016fc0:	9b01      	ldr	r3, [sp, #4]
 8016fc2:	b2ac      	uxth	r4, r5
 8016fc4:	00ed      	lsls	r5, r5, #3
 8016fc6:	1958      	adds	r0, r3, r5
 8016fc8:	1c7b      	adds	r3, r7, #1
 8016fca:	d10b      	bne.n	8016fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8016fcc:	4601      	mov	r1, r0
 8016fce:	9803      	ldr	r0, [sp, #12]
 8016fd0:	f7ff fb3c 	bl	801664c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016fd4:	4621      	mov	r1, r4
 8016fd6:	9801      	ldr	r0, [sp, #4]
 8016fd8:	f7ff fc8e 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016fdc:	e4b6      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016fde:	464f      	mov	r7, r9
 8016fe0:	4635      	mov	r5, r6
 8016fe2:	e7ed      	b.n	8016fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8016fe4:	9b01      	ldr	r3, [sp, #4]
 8016fe6:	00ff      	lsls	r7, r7, #3
 8016fe8:	445d      	add	r5, fp
 8016fea:	19d9      	adds	r1, r3, r7
 8016fec:	445f      	add	r7, fp
 8016fee:	f7ff fb2d 	bl	801664c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016ff2:	9b03      	ldr	r3, [sp, #12]
 8016ff4:	cb03      	ldmia	r3!, {r0, r1}
 8016ff6:	9b03      	ldr	r3, [sp, #12]
 8016ff8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8016ffc:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8017000:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8017004:	6869      	ldr	r1, [r5, #4]
 8017006:	c303      	stmia	r3!, {r0, r1}
 8017008:	e7e4      	b.n	8016fd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801700a:	bf00      	nop

0801700c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017010:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8017014:	b09b      	sub	sp, #108	@ 0x6c
 8017016:	4604      	mov	r4, r0
 8017018:	4630      	mov	r0, r6
 801701a:	f7f9 fc88 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 801701e:	4605      	mov	r5, r0
 8017020:	b948      	cbnz	r0, 8017036 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8017022:	6823      	ldr	r3, [r4, #0]
 8017024:	4620      	mov	r0, r4
 8017026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017028:	e896 0006 	ldmia.w	r6, {r1, r2}
 801702c:	4798      	blx	r3
 801702e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8017032:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8017036:	4bc5      	ldr	r3, [pc, #788]	@ (801734c <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d03f      	beq.n	80170be <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801703e:	4dc4      	ldr	r5, [pc, #784]	@ (8017350 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8017040:	4628      	mov	r0, r5
 8017042:	f7f9 fc74 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017046:	4606      	mov	r6, r0
 8017048:	2800      	cmp	r0, #0
 801704a:	d138      	bne.n	80170be <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801704c:	4628      	mov	r0, r5
 801704e:	f7ff f991 	bl	8016374 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017052:	6823      	ldr	r3, [r4, #0]
 8017054:	6829      	ldr	r1, [r5, #0]
 8017056:	4620      	mov	r0, r4
 8017058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801705a:	686a      	ldr	r2, [r5, #4]
 801705c:	4798      	blx	r3
 801705e:	802e      	strh	r6, [r5, #0]
 8017060:	806e      	strh	r6, [r5, #2]
 8017062:	80ae      	strh	r6, [r5, #4]
 8017064:	80ee      	strh	r6, [r5, #6]
 8017066:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801706a:	4dba      	ldr	r5, [pc, #744]	@ (8017354 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801706c:	4640      	mov	r0, r8
 801706e:	f7ff fbe7 	bl	8016840 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017072:	882e      	ldrh	r6, [r5, #0]
 8017074:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8017078:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801707c:	4633      	mov	r3, r6
 801707e:	42bb      	cmp	r3, r7
 8017080:	d224      	bcs.n	80170cc <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8017082:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8017086:	2907      	cmp	r1, #7
 8017088:	d816      	bhi.n	80170b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801708a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801708e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8017092:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8017096:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801709a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801709e:	1c4a      	adds	r2, r1, #1
 80170a0:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 80170a4:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80170a8:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80170ac:	f8a2 a002 	strh.w	sl, [r2, #2]
 80170b0:	f8a2 e004 	strh.w	lr, [r2, #4]
 80170b4:	f8a2 c006 	strh.w	ip, [r2, #6]
 80170b8:	3301      	adds	r3, #1
 80170ba:	b29b      	uxth	r3, r3
 80170bc:	e7df      	b.n	801707e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80170be:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d1cf      	bne.n	8017066 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 80170c6:	b01b      	add	sp, #108	@ 0x6c
 80170c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170cc:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 80170d0:	42b3      	cmp	r3, r6
 80170d2:	d90c      	bls.n	80170ee <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 80170d4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80170d8:	6822      	ldr	r2, [r4, #0]
 80170da:	3601      	adds	r6, #1
 80170dc:	4620      	mov	r0, r4
 80170de:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 80170e0:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 80170e4:	b2b6      	uxth	r6, r6
 80170e6:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 80170ea:	47b8      	blx	r7
 80170ec:	e7ee      	b.n	80170cc <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80170ee:	4a9a      	ldr	r2, [pc, #616]	@ (8017358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80170f0:	6813      	ldr	r3, [r2, #0]
 80170f2:	4691      	mov	r9, r2
 80170f4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80170f8:	2b01      	cmp	r3, #1
 80170fa:	f040 80e0 	bne.w	80172be <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 80170fe:	8829      	ldrh	r1, [r5, #0]
 8017100:	2600      	movs	r6, #0
 8017102:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8017106:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801710a:	33ae      	adds	r3, #174	@ 0xae
 801710c:	428f      	cmp	r7, r1
 801710e:	f103 0308 	add.w	r3, r3, #8
 8017112:	dd0a      	ble.n	801712a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8017114:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8017118:	3101      	adds	r1, #1
 801711a:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801711e:	4402      	add	r2, r0
 8017120:	b212      	sxth	r2, r2
 8017122:	4296      	cmp	r6, r2
 8017124:	bfb8      	it	lt
 8017126:	4616      	movlt	r6, r2
 8017128:	e7f0      	b.n	801710c <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801712a:	4b8c      	ldr	r3, [pc, #560]	@ (801735c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801712c:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8017358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8017130:	881b      	ldrh	r3, [r3, #0]
 8017132:	2b0f      	cmp	r3, #15
 8017134:	bf8c      	ite	hi
 8017136:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801713a:	f04f 0b01 	movls.w	fp, #1
 801713e:	2300      	movs	r3, #0
 8017140:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017144:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8017148:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801714c:	4b82      	ldr	r3, [pc, #520]	@ (8017358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801714e:	4438      	add	r0, r7
 8017150:	b207      	sxth	r7, r0
 8017152:	6818      	ldr	r0, [r3, #0]
 8017154:	42b7      	cmp	r7, r6
 8017156:	6803      	ldr	r3, [r0, #0]
 8017158:	f280 8083 	bge.w	8017262 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801715c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017160:	4798      	blx	r3
 8017162:	eb07 030b 	add.w	r3, r7, fp
 8017166:	4298      	cmp	r0, r3
 8017168:	da07      	bge.n	801717a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801716a:	42b0      	cmp	r0, r6
 801716c:	da05      	bge.n	801717a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801716e:	4287      	cmp	r7, r0
 8017170:	dd6c      	ble.n	801724c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8017172:	2f00      	cmp	r7, #0
 8017174:	dd6a      	ble.n	801724c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8017176:	4630      	mov	r0, r6
 8017178:	e004      	b.n	8017184 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801717a:	4287      	cmp	r7, r0
 801717c:	dcfb      	bgt.n	8017176 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801717e:	42b0      	cmp	r0, r6
 8017180:	bfa8      	it	ge
 8017182:	4630      	movge	r0, r6
 8017184:	4b76      	ldr	r3, [pc, #472]	@ (8017360 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8017186:	1bc0      	subs	r0, r0, r7
 8017188:	2200      	movs	r2, #0
 801718a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801718e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017192:	882f      	ldrh	r7, [r5, #0]
 8017194:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017198:	f8ad 3018 	strh.w	r3, [sp, #24]
 801719c:	f8ad 001a 	strh.w	r0, [sp, #26]
 80171a0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80171a4:	42bb      	cmp	r3, r7
 80171a6:	d9cd      	bls.n	8017144 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80171a8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80171ac:	ab07      	add	r3, sp, #28
 80171ae:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80171b2:	6851      	ldr	r1, [r2, #4]
 80171b4:	c303      	stmia	r3!, {r0, r1}
 80171b6:	a905      	add	r1, sp, #20
 80171b8:	a807      	add	r0, sp, #28
 80171ba:	f7ff f9ae 	bl	801651a <_ZNK8touchgfx4Rect9intersectERKS0_>
 80171be:	2800      	cmp	r0, #0
 80171c0:	d04c      	beq.n	801725c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80171c2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80171c6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80171ca:	f8bd a020 	ldrh.w	sl, [sp, #32]
 80171ce:	4686      	mov	lr, r0
 80171d0:	4290      	cmp	r0, r2
 80171d2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80171d6:	4450      	add	r0, sl
 80171d8:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80171dc:	bfb8      	it	lt
 80171de:	4696      	movlt	lr, r2
 80171e0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80171e4:	4452      	add	r2, sl
 80171e6:	b280      	uxth	r0, r0
 80171e8:	4299      	cmp	r1, r3
 80171ea:	468c      	mov	ip, r1
 80171ec:	b292      	uxth	r2, r2
 80171ee:	9302      	str	r3, [sp, #8]
 80171f0:	bfb8      	it	lt
 80171f2:	469c      	movlt	ip, r3
 80171f4:	b203      	sxth	r3, r0
 80171f6:	fa0f fa82 	sxth.w	sl, r2
 80171fa:	f8ad e01c 	strh.w	lr, [sp, #28]
 80171fe:	f8ad c01e 	strh.w	ip, [sp, #30]
 8017202:	4553      	cmp	r3, sl
 8017204:	bfb8      	it	lt
 8017206:	4602      	movlt	r2, r0
 8017208:	9b02      	ldr	r3, [sp, #8]
 801720a:	eba2 020e 	sub.w	r2, r2, lr
 801720e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017212:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8017216:	4411      	add	r1, r2
 8017218:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801721c:	4413      	add	r3, r2
 801721e:	b289      	uxth	r1, r1
 8017220:	b29b      	uxth	r3, r3
 8017222:	b208      	sxth	r0, r1
 8017224:	b21a      	sxth	r2, r3
 8017226:	4290      	cmp	r0, r2
 8017228:	bfb8      	it	lt
 801722a:	460b      	movlt	r3, r1
 801722c:	eba3 030c 	sub.w	r3, r3, ip
 8017230:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017234:	a807      	add	r0, sp, #28
 8017236:	f7f9 fb7a 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 801723a:	b920      	cbnz	r0, 8017246 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801723c:	6823      	ldr	r3, [r4, #0]
 801723e:	a907      	add	r1, sp, #28
 8017240:	4620      	mov	r0, r4
 8017242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017244:	4798      	blx	r3
 8017246:	3701      	adds	r7, #1
 8017248:	b2bf      	uxth	r7, r7
 801724a:	e7a9      	b.n	80171a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801724c:	f8d9 0000 	ldr.w	r0, [r9]
 8017250:	2101      	movs	r1, #1
 8017252:	6803      	ldr	r3, [r0, #0]
 8017254:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017258:	4798      	blx	r3
 801725a:	e773      	b.n	8017144 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801725c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017260:	e7e8      	b.n	8017234 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8017262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017264:	4798      	blx	r3
 8017266:	4b3f      	ldr	r3, [pc, #252]	@ (8017364 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8017268:	781b      	ldrb	r3, [r3, #0]
 801726a:	2b00      	cmp	r3, #0
 801726c:	f43f af2b 	beq.w	80170c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017270:	2300      	movs	r3, #0
 8017272:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8017276:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801727a:	882b      	ldrh	r3, [r5, #0]
 801727c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8017280:	42ab      	cmp	r3, r5
 8017282:	f4bf af20 	bcs.w	80170c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017286:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801728a:	2907      	cmp	r1, #7
 801728c:	d814      	bhi.n	80172b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801728e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8017292:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8017296:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801729a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801729e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80172a2:	1c4a      	adds	r2, r1, #1
 80172a4:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 80172a8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80172ac:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80172b0:	f8a2 c002 	strh.w	ip, [r2, #2]
 80172b4:	8097      	strh	r7, [r2, #4]
 80172b6:	80d6      	strh	r6, [r2, #6]
 80172b8:	3301      	adds	r3, #1
 80172ba:	b29b      	uxth	r3, r3
 80172bc:	e7e0      	b.n	8017280 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 80172be:	2b02      	cmp	r3, #2
 80172c0:	f040 8133 	bne.w	801752a <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 80172c4:	4b28      	ldr	r3, [pc, #160]	@ (8017368 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80172c6:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	2b01      	cmp	r3, #1
 80172ce:	f000 8098 	beq.w	8017402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80172d2:	882a      	ldrh	r2, [r5, #0]
 80172d4:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 80172d8:	3201      	adds	r2, #1
 80172da:	b292      	uxth	r2, r2
 80172dc:	2900      	cmp	r1, #0
 80172de:	d0c2      	beq.n	8017266 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80172e0:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 80172e4:	4694      	mov	ip, r2
 80172e6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 80172ea:	f04f 0900 	mov.w	r9, #0
 80172ee:	441e      	add	r6, r3
 80172f0:	b236      	sxth	r6, r6
 80172f2:	fa1f f38c 	uxth.w	r3, ip
 80172f6:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80172fa:	4299      	cmp	r1, r3
 80172fc:	f240 80be 	bls.w	801747c <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8017300:	4427      	add	r7, r4
 8017302:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8017306:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801730a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801730e:	4283      	cmp	r3, r0
 8017310:	f340 80a0 	ble.w	8017454 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8017314:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8017318:	46e1      	mov	r9, ip
 801731a:	4406      	add	r6, r0
 801731c:	b236      	sxth	r6, r6
 801731e:	429e      	cmp	r6, r3
 8017320:	bfa8      	it	ge
 8017322:	461e      	movge	r6, r3
 8017324:	f10c 0c01 	add.w	ip, ip, #1
 8017328:	e7e3      	b.n	80172f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801732a:	d10a      	bne.n	8017342 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801732c:	4562      	cmp	r2, ip
 801732e:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8017332:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8017336:	bfb8      	it	lt
 8017338:	4662      	movlt	r2, ip
 801733a:	4288      	cmp	r0, r1
 801733c:	bfb8      	it	lt
 801733e:	461f      	movlt	r7, r3
 8017340:	e086      	b.n	8017450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8017342:	428a      	cmp	r2, r1
 8017344:	bfb8      	it	lt
 8017346:	460a      	movlt	r2, r1
 8017348:	e082      	b.n	8017450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801734a:	bf00      	nop
 801734c:	24028e6c 	.word	0x24028e6c
 8017350:	24028e78 	.word	0x24028e78
 8017354:	2400007c 	.word	0x2400007c
 8017358:	24028e2c 	.word	0x24028e2c
 801735c:	24028e22 	.word	0x24028e22
 8017360:	24028e20 	.word	0x24028e20
 8017364:	24028e2a 	.word	0x24028e2a
 8017368:	24028e24 	.word	0x24028e24
 801736c:	19a1      	adds	r1, r4, r6
 801736e:	ab07      	add	r3, sp, #28
 8017370:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8017374:	6849      	ldr	r1, [r1, #4]
 8017376:	c303      	stmia	r3!, {r0, r1}
 8017378:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801737c:	a807      	add	r0, sp, #28
 801737e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017382:	2b13      	cmp	r3, #19
 8017384:	440b      	add	r3, r1
 8017386:	bfd8      	it	le
 8017388:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801738c:	1a9b      	subs	r3, r3, r2
 801738e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017392:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017396:	f7ff f807 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801739a:	a807      	add	r0, sp, #28
 801739c:	f7f9 fac7 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 80173a0:	bb78      	cbnz	r0, 8017402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80173a2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 80173a6:	4426      	add	r6, r4
 80173a8:	f8d9 0000 	ldr.w	r0, [r9]
 80173ac:	f1bc 0f14 	cmp.w	ip, #20
 80173b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80173b4:	f8d0 e000 	ldr.w	lr, [r0]
 80173b8:	bfa8      	it	ge
 80173ba:	f04f 0c14 	movge.w	ip, #20
 80173be:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80173c2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80173c6:	fa1f fc8c 	uxth.w	ip, ip
 80173ca:	f8cd c000 	str.w	ip, [sp]
 80173ce:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 80173d2:	47d8      	blx	fp
 80173d4:	4683      	mov	fp, r0
 80173d6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80173da:	a807      	add	r0, sp, #28
 80173dc:	f7fe ffca 	bl	8016374 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80173e0:	6823      	ldr	r3, [r4, #0]
 80173e2:	4620      	mov	r0, r4
 80173e4:	a907      	add	r1, sp, #28
 80173e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80173e8:	4798      	blx	r3
 80173ea:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80173ee:	eba0 000b 	sub.w	r0, r0, fp
 80173f2:	b200      	sxth	r0, r0
 80173f4:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 80173f8:	b918      	cbnz	r0, 8017402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80173fa:	b2b9      	uxth	r1, r7
 80173fc:	4650      	mov	r0, sl
 80173fe:	f7ff fa7b 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017402:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8017406:	f1bb 0f00 	cmp.w	fp, #0
 801740a:	f43f af2c 	beq.w	8017266 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801740e:	882b      	ldrh	r3, [r5, #0]
 8017410:	2700      	movs	r7, #0
 8017412:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8017416:	3301      	adds	r3, #1
 8017418:	b29b      	uxth	r3, r3
 801741a:	b299      	uxth	r1, r3
 801741c:	00fe      	lsls	r6, r7, #3
 801741e:	458b      	cmp	fp, r1
 8017420:	d9a4      	bls.n	801736c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8017422:	4426      	add	r6, r4
 8017424:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8017428:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801742c:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8017430:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8017434:	4408      	add	r0, r1
 8017436:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801743a:	4461      	add	r1, ip
 801743c:	b200      	sxth	r0, r0
 801743e:	b209      	sxth	r1, r1
 8017440:	4288      	cmp	r0, r1
 8017442:	f6bf af72 	bge.w	801732a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8017446:	4584      	cmp	ip, r0
 8017448:	4662      	mov	r2, ip
 801744a:	461f      	mov	r7, r3
 801744c:	bfb8      	it	lt
 801744e:	4602      	movlt	r2, r0
 8017450:	3301      	adds	r3, #1
 8017452:	e7e2      	b.n	801741a <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8017454:	d10e      	bne.n	8017474 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8017456:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801745a:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801745e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8017462:	4473      	add	r3, lr
 8017464:	b21b      	sxth	r3, r3
 8017466:	429e      	cmp	r6, r3
 8017468:	bfa8      	it	ge
 801746a:	461e      	movge	r6, r3
 801746c:	4287      	cmp	r7, r0
 801746e:	bfb8      	it	lt
 8017470:	46e1      	movlt	r9, ip
 8017472:	e757      	b.n	8017324 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017474:	4286      	cmp	r6, r0
 8017476:	bfa8      	it	ge
 8017478:	4606      	movge	r6, r0
 801747a:	e753      	b.n	8017324 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801747c:	eb0a 0007 	add.w	r0, sl, r7
 8017480:	4427      	add	r7, r4
 8017482:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8017486:	f1bb 0f13 	cmp.w	fp, #19
 801748a:	bfdc      	itt	le
 801748c:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8017490:	445e      	addle	r6, fp
 8017492:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017496:	bfd8      	it	le
 8017498:	b236      	sxthle	r6, r6
 801749a:	f7f9 fa48 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 801749e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80174a2:	2800      	cmp	r0, #0
 80174a4:	f47f af1a 	bne.w	80172dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 80174a8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80174ac:	fa1f fb8b 	uxth.w	fp, fp
 80174b0:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80174b4:	1ab6      	subs	r6, r6, r2
 80174b6:	4829      	ldr	r0, [pc, #164]	@ (801755c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 80174b8:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80174bc:	2e14      	cmp	r6, #20
 80174be:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80174c2:	6800      	ldr	r0, [r0, #0]
 80174c4:	bfa8      	it	ge
 80174c6:	2614      	movge	r6, #20
 80174c8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80174cc:	f8ad 201e 	strh.w	r2, [sp, #30]
 80174d0:	b289      	uxth	r1, r1
 80174d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80174d6:	b2b6      	uxth	r6, r6
 80174d8:	f8d0 c000 	ldr.w	ip, [r0]
 80174dc:	b292      	uxth	r2, r2
 80174de:	455e      	cmp	r6, fp
 80174e0:	bf94      	ite	ls
 80174e2:	9600      	strls	r6, [sp, #0]
 80174e4:	f8cd b000 	strhi.w	fp, [sp]
 80174e8:	b29b      	uxth	r3, r3
 80174ea:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 80174ee:	47b0      	blx	r6
 80174f0:	6823      	ldr	r3, [r4, #0]
 80174f2:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80174f6:	a907      	add	r1, sp, #28
 80174f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80174fa:	4620      	mov	r0, r4
 80174fc:	4798      	blx	r3
 80174fe:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8017502:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8017506:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801750a:	1a5b      	subs	r3, r3, r1
 801750c:	440a      	add	r2, r1
 801750e:	b21b      	sxth	r3, r3
 8017510:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8017514:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8017518:	2b00      	cmp	r3, #0
 801751a:	f47f aeda 	bne.w	80172d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801751e:	fa1f f189 	uxth.w	r1, r9
 8017522:	4650      	mov	r0, sl
 8017524:	f7ff f9e8 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017528:	e6d3      	b.n	80172d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801752a:	882e      	ldrh	r6, [r5, #0]
 801752c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017530:	42b3      	cmp	r3, r6
 8017532:	f67f ae98 	bls.w	8017266 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017536:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801753a:	ab07      	add	r3, sp, #28
 801753c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017540:	6851      	ldr	r1, [r2, #4]
 8017542:	c303      	stmia	r3!, {r0, r1}
 8017544:	a807      	add	r0, sp, #28
 8017546:	f7f9 f9f2 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 801754a:	b920      	cbnz	r0, 8017556 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801754c:	6823      	ldr	r3, [r4, #0]
 801754e:	a907      	add	r1, sp, #28
 8017550:	4620      	mov	r0, r4
 8017552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017554:	4798      	blx	r3
 8017556:	3601      	adds	r6, #1
 8017558:	b2b6      	uxth	r6, r6
 801755a:	e7e7      	b.n	801752c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801755c:	24028e2c 	.word	0x24028e2c

08017560 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017560:	4b03      	ldr	r3, [pc, #12]	@ (8017570 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017562:	2200      	movs	r2, #0
 8017564:	801a      	strh	r2, [r3, #0]
 8017566:	805a      	strh	r2, [r3, #2]
 8017568:	809a      	strh	r2, [r3, #4]
 801756a:	80da      	strh	r2, [r3, #6]
 801756c:	4770      	bx	lr
 801756e:	bf00      	nop
 8017570:	24028e78 	.word	0x24028e78

08017574 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017578:	b09d      	sub	sp, #116	@ 0x74
 801757a:	4606      	mov	r6, r0
 801757c:	4614      	mov	r4, r2
 801757e:	468a      	mov	sl, r1
 8017580:	a803      	add	r0, sp, #12
 8017582:	461d      	mov	r5, r3
 8017584:	f001 f96c 	bl	8018860 <_ZN8touchgfx12TextProviderC1Ev>
 8017588:	6833      	ldr	r3, [r6, #0]
 801758a:	4630      	mov	r0, r6
 801758c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8017590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017592:	4798      	blx	r3
 8017594:	6833      	ldr	r3, [r6, #0]
 8017596:	4607      	mov	r7, r0
 8017598:	4630      	mov	r0, r6
 801759a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801759c:	4798      	blx	r3
 801759e:	462a      	mov	r2, r5
 80175a0:	2500      	movs	r5, #0
 80175a2:	4621      	mov	r1, r4
 80175a4:	9000      	str	r0, [sp, #0]
 80175a6:	463b      	mov	r3, r7
 80175a8:	462c      	mov	r4, r5
 80175aa:	46a9      	mov	r9, r5
 80175ac:	46a8      	mov	r8, r5
 80175ae:	a803      	add	r0, sp, #12
 80175b0:	f001 f9b1 	bl	8018916 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80175b4:	2300      	movs	r3, #0
 80175b6:	9302      	str	r3, [sp, #8]
 80175b8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80175bc:	429c      	cmp	r4, r3
 80175be:	d002      	beq.n	80175c6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80175c0:	455c      	cmp	r4, fp
 80175c2:	bf18      	it	ne
 80175c4:	4625      	movne	r5, r4
 80175c6:	ab02      	add	r3, sp, #8
 80175c8:	4632      	mov	r2, r6
 80175ca:	4651      	mov	r1, sl
 80175cc:	a803      	add	r0, sp, #12
 80175ce:	f001 fcd5 	bl	8018f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80175d2:	4604      	mov	r4, r0
 80175d4:	b108      	cbz	r0, 80175da <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80175d6:	280a      	cmp	r0, #10
 80175d8:	d10a      	bne.n	80175f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80175da:	45c1      	cmp	r9, r8
 80175dc:	bf38      	it	cc
 80175de:	46c1      	movcc	r9, r8
 80175e0:	f04f 0800 	mov.w	r8, #0
 80175e4:	2c00      	cmp	r4, #0
 80175e6:	d1e5      	bne.n	80175b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80175e8:	4648      	mov	r0, r9
 80175ea:	b01d      	add	sp, #116	@ 0x74
 80175ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175f0:	9a02      	ldr	r2, [sp, #8]
 80175f2:	2a00      	cmp	r2, #0
 80175f4:	d0de      	beq.n	80175b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80175f6:	7b57      	ldrb	r7, [r2, #13]
 80175f8:	4629      	mov	r1, r5
 80175fa:	6833      	ldr	r3, [r6, #0]
 80175fc:	007f      	lsls	r7, r7, #1
 80175fe:	8894      	ldrh	r4, [r2, #4]
 8017600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017602:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8017606:	7a97      	ldrb	r7, [r2, #10]
 8017608:	4307      	orrs	r7, r0
 801760a:	4630      	mov	r0, r6
 801760c:	4798      	blx	r3
 801760e:	4438      	add	r0, r7
 8017610:	4480      	add	r8, r0
 8017612:	fa1f f888 	uxth.w	r8, r8
 8017616:	e7e5      	b.n	80175e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017618 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017618:	b508      	push	{r3, lr}
 801761a:	6803      	ldr	r3, [r0, #0]
 801761c:	68db      	ldr	r3, [r3, #12]
 801761e:	4798      	blx	r3
 8017620:	b128      	cbz	r0, 801762e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017622:	7b43      	ldrb	r3, [r0, #13]
 8017624:	7a80      	ldrb	r0, [r0, #10]
 8017626:	005b      	lsls	r3, r3, #1
 8017628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801762c:	4318      	orrs	r0, r3
 801762e:	bd08      	pop	{r3, pc}

08017630 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017630:	b40e      	push	{r1, r2, r3}
 8017632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017634:	b09e      	sub	sp, #120	@ 0x78
 8017636:	4605      	mov	r5, r0
 8017638:	ab23      	add	r3, sp, #140	@ 0x8c
 801763a:	a805      	add	r0, sp, #20
 801763c:	f853 4b04 	ldr.w	r4, [r3], #4
 8017640:	9303      	str	r3, [sp, #12]
 8017642:	f001 f90d 	bl	8018860 <_ZN8touchgfx12TextProviderC1Ev>
 8017646:	682b      	ldr	r3, [r5, #0]
 8017648:	4628      	mov	r0, r5
 801764a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801764c:	4798      	blx	r3
 801764e:	682b      	ldr	r3, [r5, #0]
 8017650:	4606      	mov	r6, r0
 8017652:	4628      	mov	r0, r5
 8017654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017656:	4798      	blx	r3
 8017658:	4633      	mov	r3, r6
 801765a:	4621      	mov	r1, r4
 801765c:	ae1e      	add	r6, sp, #120	@ 0x78
 801765e:	2400      	movs	r4, #0
 8017660:	9000      	str	r0, [sp, #0]
 8017662:	9a03      	ldr	r2, [sp, #12]
 8017664:	a805      	add	r0, sp, #20
 8017666:	f001 f956 	bl	8018916 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801766a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801766e:	462a      	mov	r2, r5
 8017670:	4633      	mov	r3, r6
 8017672:	4621      	mov	r1, r4
 8017674:	a805      	add	r0, sp, #20
 8017676:	f001 fc81 	bl	8018f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801767a:	b300      	cbz	r0, 80176be <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801767c:	280a      	cmp	r0, #10
 801767e:	d01a      	beq.n	80176b6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017680:	9f04      	ldr	r7, [sp, #16]
 8017682:	b1c7      	cbz	r7, 80176b6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017684:	7b78      	ldrb	r0, [r7, #13]
 8017686:	7a3b      	ldrb	r3, [r7, #8]
 8017688:	00c1      	lsls	r1, r0, #3
 801768a:	88ea      	ldrh	r2, [r5, #6]
 801768c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8017690:	4319      	orrs	r1, r3
 8017692:	0643      	lsls	r3, r0, #25
 8017694:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017698:	bf48      	it	mi
 801769a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801769e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80176a2:	bf48      	it	mi
 80176a4:	b219      	sxthmi	r1, r3
 80176a6:	79fb      	ldrb	r3, [r7, #7]
 80176a8:	4303      	orrs	r3, r0
 80176aa:	4413      	add	r3, r2
 80176ac:	1a5b      	subs	r3, r3, r1
 80176ae:	b21b      	sxth	r3, r3
 80176b0:	429c      	cmp	r4, r3
 80176b2:	bfb8      	it	lt
 80176b4:	461c      	movlt	r4, r3
 80176b6:	4633      	mov	r3, r6
 80176b8:	462a      	mov	r2, r5
 80176ba:	2100      	movs	r1, #0
 80176bc:	e7da      	b.n	8017674 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80176be:	b2a0      	uxth	r0, r4
 80176c0:	b01e      	add	sp, #120	@ 0x78
 80176c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80176c6:	b003      	add	sp, #12
 80176c8:	4770      	bx	lr

080176ca <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80176ca:	7a43      	ldrb	r3, [r0, #9]
 80176cc:	8880      	ldrh	r0, [r0, #4]
 80176ce:	4418      	add	r0, r3
 80176d0:	b280      	uxth	r0, r0
 80176d2:	4770      	bx	lr

080176d4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80176d4:	6803      	ldr	r3, [r0, #0]
 80176d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80176d8:	4718      	bx	r3

080176da <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80176da:	b40e      	push	{r1, r2, r3}
 80176dc:	b570      	push	{r4, r5, r6, lr}
 80176de:	b09d      	sub	sp, #116	@ 0x74
 80176e0:	4604      	mov	r4, r0
 80176e2:	ab21      	add	r3, sp, #132	@ 0x84
 80176e4:	a803      	add	r0, sp, #12
 80176e6:	f853 5b04 	ldr.w	r5, [r3], #4
 80176ea:	9302      	str	r3, [sp, #8]
 80176ec:	f001 f8b8 	bl	8018860 <_ZN8touchgfx12TextProviderC1Ev>
 80176f0:	6823      	ldr	r3, [r4, #0]
 80176f2:	4620      	mov	r0, r4
 80176f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80176f6:	4798      	blx	r3
 80176f8:	6823      	ldr	r3, [r4, #0]
 80176fa:	4606      	mov	r6, r0
 80176fc:	4620      	mov	r0, r4
 80176fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017700:	2401      	movs	r4, #1
 8017702:	4798      	blx	r3
 8017704:	4633      	mov	r3, r6
 8017706:	9000      	str	r0, [sp, #0]
 8017708:	4629      	mov	r1, r5
 801770a:	9a02      	ldr	r2, [sp, #8]
 801770c:	a803      	add	r0, sp, #12
 801770e:	f001 f902 	bl	8018916 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017712:	a803      	add	r0, sp, #12
 8017714:	f001 fcfe 	bl	8019114 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017718:	b2a3      	uxth	r3, r4
 801771a:	b138      	cbz	r0, 801772c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801771c:	280a      	cmp	r0, #10
 801771e:	a803      	add	r0, sp, #12
 8017720:	bf04      	itt	eq
 8017722:	3301      	addeq	r3, #1
 8017724:	b21c      	sxtheq	r4, r3
 8017726:	f001 fcf5 	bl	8019114 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801772a:	e7f5      	b.n	8017718 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801772c:	4618      	mov	r0, r3
 801772e:	b01d      	add	sp, #116	@ 0x74
 8017730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017734:	b003      	add	sp, #12
 8017736:	4770      	bx	lr

08017738 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017738:	b40e      	push	{r1, r2, r3}
 801773a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801773c:	b09e      	sub	sp, #120	@ 0x78
 801773e:	4604      	mov	r4, r0
 8017740:	ab23      	add	r3, sp, #140	@ 0x8c
 8017742:	a805      	add	r0, sp, #20
 8017744:	f853 5b04 	ldr.w	r5, [r3], #4
 8017748:	9303      	str	r3, [sp, #12]
 801774a:	f001 f889 	bl	8018860 <_ZN8touchgfx12TextProviderC1Ev>
 801774e:	6823      	ldr	r3, [r4, #0]
 8017750:	4620      	mov	r0, r4
 8017752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017754:	4798      	blx	r3
 8017756:	6823      	ldr	r3, [r4, #0]
 8017758:	4606      	mov	r6, r0
 801775a:	4620      	mov	r0, r4
 801775c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801775e:	4798      	blx	r3
 8017760:	4633      	mov	r3, r6
 8017762:	4629      	mov	r1, r5
 8017764:	9000      	str	r0, [sp, #0]
 8017766:	9a03      	ldr	r2, [sp, #12]
 8017768:	a805      	add	r0, sp, #20
 801776a:	f001 f8d4 	bl	8018916 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801776e:	ad1e      	add	r5, sp, #120	@ 0x78
 8017770:	2100      	movs	r1, #0
 8017772:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8017776:	4622      	mov	r2, r4
 8017778:	a805      	add	r0, sp, #20
 801777a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801777e:	462b      	mov	r3, r5
 8017780:	f001 fbfc 	bl	8018f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017784:	b1d8      	cbz	r0, 80177be <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017786:	280a      	cmp	r0, #10
 8017788:	d012      	beq.n	80177b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801778a:	9804      	ldr	r0, [sp, #16]
 801778c:	b180      	cbz	r0, 80177b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801778e:	7b47      	ldrb	r7, [r0, #13]
 8017790:	88e2      	ldrh	r2, [r4, #6]
 8017792:	00fb      	lsls	r3, r7, #3
 8017794:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8017798:	7a03      	ldrb	r3, [r0, #8]
 801779a:	430b      	orrs	r3, r1
 801779c:	0679      	lsls	r1, r7, #25
 801779e:	bf44      	itt	mi
 80177a0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80177a4:	b21b      	sxthmi	r3, r3
 80177a6:	1ad3      	subs	r3, r2, r3
 80177a8:	b21b      	sxth	r3, r3
 80177aa:	429e      	cmp	r6, r3
 80177ac:	bfa8      	it	ge
 80177ae:	461e      	movge	r6, r3
 80177b0:	462b      	mov	r3, r5
 80177b2:	4622      	mov	r2, r4
 80177b4:	2100      	movs	r1, #0
 80177b6:	a805      	add	r0, sp, #20
 80177b8:	f001 fbe0 	bl	8018f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80177bc:	e7e2      	b.n	8017784 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80177be:	4630      	mov	r0, r6
 80177c0:	b01e      	add	sp, #120	@ 0x78
 80177c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80177c6:	b003      	add	sp, #12
 80177c8:	4770      	bx	lr

080177ca <_ZNK8touchgfx8Drawable10invalidateEv>:
 80177ca:	b513      	push	{r0, r1, r4, lr}
 80177cc:	6803      	ldr	r3, [r0, #0]
 80177ce:	2400      	movs	r4, #0
 80177d0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80177d4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80177d8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80177dc:	4669      	mov	r1, sp
 80177de:	691b      	ldr	r3, [r3, #16]
 80177e0:	9400      	str	r4, [sp, #0]
 80177e2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80177e6:	4798      	blx	r3
 80177e8:	b002      	add	sp, #8
 80177ea:	bd10      	pop	{r4, pc}

080177ec <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80177ec:	b538      	push	{r3, r4, r5, lr}
 80177ee:	680b      	ldr	r3, [r1, #0]
 80177f0:	460c      	mov	r4, r1
 80177f2:	4605      	mov	r5, r0
 80177f4:	68db      	ldr	r3, [r3, #12]
 80177f6:	4798      	blx	r3
 80177f8:	6823      	ldr	r3, [r4, #0]
 80177fa:	4620      	mov	r0, r4
 80177fc:	4629      	mov	r1, r5
 80177fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017800:	4798      	blx	r3
 8017802:	4628      	mov	r0, r5
 8017804:	bd38      	pop	{r3, r4, r5, pc}

08017806 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017806:	b410      	push	{r4}
 8017808:	880a      	ldrh	r2, [r1, #0]
 801780a:	8884      	ldrh	r4, [r0, #4]
 801780c:	4422      	add	r2, r4
 801780e:	800a      	strh	r2, [r1, #0]
 8017810:	884a      	ldrh	r2, [r1, #2]
 8017812:	88c4      	ldrh	r4, [r0, #6]
 8017814:	4422      	add	r2, r4
 8017816:	804a      	strh	r2, [r1, #2]
 8017818:	6940      	ldr	r0, [r0, #20]
 801781a:	b120      	cbz	r0, 8017826 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801781c:	6803      	ldr	r3, [r0, #0]
 801781e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017824:	4718      	bx	r3
 8017826:	f85d 4b04 	ldr.w	r4, [sp], #4
 801782a:	4770      	bx	lr

0801782c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801782c:	b570      	push	{r4, r5, r6, lr}
 801782e:	8882      	ldrh	r2, [r0, #4]
 8017830:	460c      	mov	r4, r1
 8017832:	880b      	ldrh	r3, [r1, #0]
 8017834:	4605      	mov	r5, r0
 8017836:	4413      	add	r3, r2
 8017838:	800b      	strh	r3, [r1, #0]
 801783a:	884b      	ldrh	r3, [r1, #2]
 801783c:	88c2      	ldrh	r2, [r0, #6]
 801783e:	4413      	add	r3, r2
 8017840:	804b      	strh	r3, [r1, #2]
 8017842:	1d01      	adds	r1, r0, #4
 8017844:	4620      	mov	r0, r4
 8017846:	f7f9 f82f 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 801784a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801784e:	2b00      	cmp	r3, #0
 8017850:	dd0b      	ble.n	801786a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017852:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017856:	2b00      	cmp	r3, #0
 8017858:	dd07      	ble.n	801786a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801785a:	6968      	ldr	r0, [r5, #20]
 801785c:	b128      	cbz	r0, 801786a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801785e:	6803      	ldr	r3, [r0, #0]
 8017860:	4621      	mov	r1, r4
 8017862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017868:	4718      	bx	r3
 801786a:	bd70      	pop	{r4, r5, r6, pc}

0801786c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801786c:	b570      	push	{r4, r5, r6, lr}
 801786e:	8882      	ldrh	r2, [r0, #4]
 8017870:	460c      	mov	r4, r1
 8017872:	880b      	ldrh	r3, [r1, #0]
 8017874:	4605      	mov	r5, r0
 8017876:	4413      	add	r3, r2
 8017878:	800b      	strh	r3, [r1, #0]
 801787a:	884b      	ldrh	r3, [r1, #2]
 801787c:	88c2      	ldrh	r2, [r0, #6]
 801787e:	4413      	add	r3, r2
 8017880:	804b      	strh	r3, [r1, #2]
 8017882:	1d01      	adds	r1, r0, #4
 8017884:	4620      	mov	r0, r4
 8017886:	f7f9 f80f 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 801788a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801788e:	2b00      	cmp	r3, #0
 8017890:	dd19      	ble.n	80178c6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017892:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017896:	2b00      	cmp	r3, #0
 8017898:	dd15      	ble.n	80178c6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801789a:	6968      	ldr	r0, [r5, #20]
 801789c:	b128      	cbz	r0, 80178aa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801789e:	6803      	ldr	r3, [r0, #0]
 80178a0:	4621      	mov	r1, r4
 80178a2:	691b      	ldr	r3, [r3, #16]
 80178a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178a8:	4718      	bx	r3
 80178aa:	4b07      	ldr	r3, [pc, #28]	@ (80178c8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	3304      	adds	r3, #4
 80178b0:	429d      	cmp	r5, r3
 80178b2:	d108      	bne.n	80178c6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80178b4:	f7fe ff10 	bl	80166d8 <_ZN8touchgfx11Application11getInstanceEv>
 80178b8:	6803      	ldr	r3, [r0, #0]
 80178ba:	6821      	ldr	r1, [r4, #0]
 80178bc:	6862      	ldr	r2, [r4, #4]
 80178be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80178c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178c4:	4718      	bx	r3
 80178c6:	bd70      	pop	{r4, r5, r6, pc}
 80178c8:	24028e70 	.word	0x24028e70

080178cc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80178cc:	b570      	push	{r4, r5, r6, lr}
 80178ce:	4604      	mov	r4, r0
 80178d0:	4616      	mov	r6, r2
 80178d2:	460d      	mov	r5, r1
 80178d4:	b901      	cbnz	r1, 80178d8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80178d6:	b192      	cbz	r2, 80178fe <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80178d8:	6823      	ldr	r3, [r4, #0]
 80178da:	4620      	mov	r0, r4
 80178dc:	699b      	ldr	r3, [r3, #24]
 80178de:	4798      	blx	r3
 80178e0:	88e2      	ldrh	r2, [r4, #6]
 80178e2:	88a1      	ldrh	r1, [r4, #4]
 80178e4:	4620      	mov	r0, r4
 80178e6:	4432      	add	r2, r6
 80178e8:	4429      	add	r1, r5
 80178ea:	b212      	sxth	r2, r2
 80178ec:	b209      	sxth	r1, r1
 80178ee:	f7ec fd8f 	bl	8004410 <_ZN8touchgfx8Drawable5setXYEss>
 80178f2:	6823      	ldr	r3, [r4, #0]
 80178f4:	4620      	mov	r0, r4
 80178f6:	699b      	ldr	r3, [r3, #24]
 80178f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178fc:	4718      	bx	r3
 80178fe:	bd70      	pop	{r4, r5, r6, pc}

08017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017900:	b510      	push	{r4, lr}
 8017902:	2300      	movs	r3, #0
 8017904:	4604      	mov	r4, r0
 8017906:	4608      	mov	r0, r1
 8017908:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801790c:	8023      	strh	r3, [r4, #0]
 801790e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017912:	8063      	strh	r3, [r4, #2]
 8017914:	6803      	ldr	r3, [r0, #0]
 8017916:	80a1      	strh	r1, [r4, #4]
 8017918:	4621      	mov	r1, r4
 801791a:	80e2      	strh	r2, [r4, #6]
 801791c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801791e:	4798      	blx	r3
 8017920:	4620      	mov	r0, r4
 8017922:	bd10      	pop	{r4, pc}

08017924 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8017924:	4770      	bx	lr

08017926 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8017926:	b510      	push	{r4, lr}
 8017928:	4604      	mov	r4, r0
 801792a:	211c      	movs	r1, #28
 801792c:	f00d f97f 	bl	8024c2e <_ZdlPvj>
 8017930:	4620      	mov	r0, r4
 8017932:	bd10      	pop	{r4, pc}

08017934 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8017934:	4a04      	ldr	r2, [pc, #16]	@ (8017948 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8017936:	6002      	str	r2, [r0, #0]
 8017938:	2200      	movs	r2, #0
 801793a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801793e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017942:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017946:	4770      	bx	lr
 8017948:	080296d0 	.word	0x080296d0

0801794c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801794c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017950:	4604      	mov	r4, r0
 8017952:	b087      	sub	sp, #28
 8017954:	4696      	mov	lr, r2
 8017956:	6880      	ldr	r0, [r0, #8]
 8017958:	8b22      	ldrh	r2, [r4, #24]
 801795a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801795e:	9105      	str	r1, [sp, #20]
 8017960:	1c51      	adds	r1, r2, #1
 8017962:	8321      	strh	r1, [r4, #24]
 8017964:	2101      	movs	r1, #1
 8017966:	5481      	strb	r1, [r0, r2]
 8017968:	4689      	mov	r9, r1
 801796a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801796e:	8b60      	ldrh	r0, [r4, #26]
 8017970:	ee06 2a90 	vmov	s13, r2
 8017974:	68e2      	ldr	r2, [r4, #12]
 8017976:	1845      	adds	r5, r0, r1
 8017978:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801797c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8017980:	8365      	strh	r5, [r4, #26]
 8017982:	edc2 6a00 	vstr	s13, [r2]
 8017986:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801798a:	8b60      	ldrh	r0, [r4, #26]
 801798c:	ee07 2a10 	vmov	s14, r2
 8017990:	68e2      	ldr	r2, [r4, #12]
 8017992:	1845      	adds	r5, r0, r1
 8017994:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017998:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801799c:	8365      	strh	r5, [r4, #26]
 801799e:	1d18      	adds	r0, r3, #4
 80179a0:	460d      	mov	r5, r1
 80179a2:	ed82 7a00 	vstr	s14, [r2]
 80179a6:	f8be 2000 	ldrh.w	r2, [lr]
 80179aa:	9203      	str	r2, [sp, #12]
 80179ac:	2200      	movs	r2, #0
 80179ae:	4613      	mov	r3, r2
 80179b0:	4694      	mov	ip, r2
 80179b2:	9201      	str	r2, [sp, #4]
 80179b4:	9202      	str	r2, [sp, #8]
 80179b6:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 80179ba:	9e05      	ldr	r6, [sp, #20]
 80179bc:	f108 0701 	add.w	r7, r8, #1
 80179c0:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80179c4:	428e      	cmp	r6, r1
 80179c6:	b2bf      	uxth	r7, r7
 80179c8:	eb0a 0b08 	add.w	fp, sl, r8
 80179cc:	f340 80b6 	ble.w	8017b3c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 80179d0:	9b03      	ldr	r3, [sp, #12]
 80179d2:	f9b0 c000 	ldrsh.w	ip, [r0]
 80179d6:	fa43 fb05 	asr.w	fp, r3, r5
 80179da:	f00b 0b01 	and.w	fp, fp, #1
 80179de:	fa5f f38b 	uxtb.w	r3, fp
 80179e2:	9304      	str	r3, [sp, #16]
 80179e4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80179e8:	f1bb 0f00 	cmp.w	fp, #0
 80179ec:	d057      	beq.n	8017a9e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 80179ee:	ee07 ca90 	vmov	s15, ip
 80179f2:	8327      	strh	r7, [r4, #24]
 80179f4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80179f8:	ee07 3a90 	vmov	s15, r3
 80179fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a00:	f1b9 0f00 	cmp.w	r9, #0
 8017a04:	d028      	beq.n	8017a58 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8017a06:	f04f 0602 	mov.w	r6, #2
 8017a0a:	f80a 6008 	strb.w	r6, [sl, r8]
 8017a0e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017a12:	68e7      	ldr	r7, [r4, #12]
 8017a14:	f108 0901 	add.w	r9, r8, #1
 8017a18:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017a1c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017a20:	edc7 5a00 	vstr	s11, [r7]
 8017a24:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017a28:	68e7      	ldr	r7, [r4, #12]
 8017a2a:	f108 0901 	add.w	r9, r8, #1
 8017a2e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017a32:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017a36:	edc7 7a00 	vstr	s15, [r7]
 8017a3a:	3501      	adds	r5, #1
 8017a3c:	2d10      	cmp	r5, #16
 8017a3e:	d106      	bne.n	8017a4e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8017a40:	9d02      	ldr	r5, [sp, #8]
 8017a42:	3501      	adds	r5, #1
 8017a44:	9502      	str	r5, [sp, #8]
 8017a46:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 8017a4a:	9503      	str	r5, [sp, #12]
 8017a4c:	2500      	movs	r5, #0
 8017a4e:	3101      	adds	r1, #1
 8017a50:	3004      	adds	r0, #4
 8017a52:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8017a56:	e7ae      	b.n	80179b6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8017a58:	f04f 0605 	mov.w	r6, #5
 8017a5c:	ed9d 5a01 	vldr	s10, [sp, #4]
 8017a60:	f80a 6008 	strb.w	r6, [sl, r8]
 8017a64:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017a68:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017a6c:	68e7      	ldr	r7, [r4, #12]
 8017a6e:	f108 0901 	add.w	r9, r8, #1
 8017a72:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017a76:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017a7a:	ed87 5a00 	vstr	s10, [r7]
 8017a7e:	ee05 2a10 	vmov	s10, r2
 8017a82:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017a86:	68e7      	ldr	r7, [r4, #12]
 8017a88:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017a8c:	f108 0901 	add.w	r9, r8, #1
 8017a90:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017a94:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017a98:	ed87 5a00 	vstr	s10, [r7]
 8017a9c:	e7b7      	b.n	8017a0e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8017a9e:	f1b9 0f00 	cmp.w	r9, #0
 8017aa2:	d147      	bne.n	8017b34 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8017aa4:	f04f 0605 	mov.w	r6, #5
 8017aa8:	eddd 7a01 	vldr	s15, [sp, #4]
 8017aac:	8327      	strh	r7, [r4, #24]
 8017aae:	f80a 6008 	strb.w	r6, [sl, r8]
 8017ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ab6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017aba:	68e7      	ldr	r7, [r4, #12]
 8017abc:	f108 0901 	add.w	r9, r8, #1
 8017ac0:	9e01      	ldr	r6, [sp, #4]
 8017ac2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017ac6:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017aca:	4466      	add	r6, ip
 8017acc:	edc7 7a00 	vstr	s15, [r7]
 8017ad0:	ee07 2a90 	vmov	s15, r2
 8017ad4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017ad8:	441a      	add	r2, r3
 8017ada:	68e7      	ldr	r7, [r4, #12]
 8017adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ae0:	f108 0901 	add.w	r9, r8, #1
 8017ae4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017ae8:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017aec:	edc7 7a00 	vstr	s15, [r7]
 8017af0:	ee07 6a90 	vmov	s15, r6
 8017af4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017afc:	68e7      	ldr	r7, [r4, #12]
 8017afe:	f108 0901 	add.w	r9, r8, #1
 8017b02:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017b06:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017b0a:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017b0e:	edc7 7a00 	vstr	s15, [r7]
 8017b12:	ee07 2a90 	vmov	s15, r2
 8017b16:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b1e:	68e7      	ldr	r7, [r4, #12]
 8017b20:	f108 0901 	add.w	r9, r8, #1
 8017b24:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017b28:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017b2c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017b30:	edc7 7a00 	vstr	s15, [r7]
 8017b34:	461a      	mov	r2, r3
 8017b36:	f8cd c004 	str.w	ip, [sp, #4]
 8017b3a:	e77e      	b.n	8017a3a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8017b3c:	f1b9 0f00 	cmp.w	r9, #0
 8017b40:	d028      	beq.n	8017b94 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8017b42:	ee07 ca90 	vmov	s15, ip
 8017b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b4a:	eef4 6a67 	vcmp.f32	s13, s15
 8017b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b52:	d108      	bne.n	8017b66 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8017b54:	ee07 3a90 	vmov	s15, r3
 8017b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b5c:	eeb4 7a67 	vcmp.f32	s14, s15
 8017b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b64:	d016      	beq.n	8017b94 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8017b66:	2302      	movs	r3, #2
 8017b68:	8327      	strh	r7, [r4, #24]
 8017b6a:	f88b 3000 	strb.w	r3, [fp]
 8017b6e:	8b62      	ldrh	r2, [r4, #26]
 8017b70:	68e3      	ldr	r3, [r4, #12]
 8017b72:	1c51      	adds	r1, r2, #1
 8017b74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017b78:	8361      	strh	r1, [r4, #26]
 8017b7a:	edc3 6a00 	vstr	s13, [r3]
 8017b7e:	8b62      	ldrh	r2, [r4, #26]
 8017b80:	68e3      	ldr	r3, [r4, #12]
 8017b82:	1c51      	adds	r1, r2, #1
 8017b84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017b88:	8361      	strh	r1, [r4, #26]
 8017b8a:	ed83 7a00 	vstr	s14, [r3]
 8017b8e:	b007      	add	sp, #28
 8017b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b94:	2305      	movs	r3, #5
 8017b96:	eddd 7a01 	vldr	s15, [sp, #4]
 8017b9a:	8327      	strh	r7, [r4, #24]
 8017b9c:	f88b 3000 	strb.w	r3, [fp]
 8017ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ba4:	8b61      	ldrh	r1, [r4, #26]
 8017ba6:	68e3      	ldr	r3, [r4, #12]
 8017ba8:	1c4d      	adds	r5, r1, #1
 8017baa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8017bae:	8365      	strh	r5, [r4, #26]
 8017bb0:	edc3 7a00 	vstr	s15, [r3]
 8017bb4:	ee07 2a90 	vmov	s15, r2
 8017bb8:	8b61      	ldrh	r1, [r4, #26]
 8017bba:	68e3      	ldr	r3, [r4, #12]
 8017bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017bc0:	1c4d      	adds	r5, r1, #1
 8017bc2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8017bc6:	8365      	strh	r5, [r4, #26]
 8017bc8:	edc3 7a00 	vstr	s15, [r3]
 8017bcc:	e7cf      	b.n	8017b6e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08017bd0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8017bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bd4:	4604      	mov	r4, r0
 8017bd6:	b08e      	sub	sp, #56	@ 0x38
 8017bd8:	4699      	mov	r9, r3
 8017bda:	4688      	mov	r8, r1
 8017bdc:	4615      	mov	r5, r2
 8017bde:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8017be0:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8017be4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017be6:	f7ec f869 	bl	8003cbc <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8017bea:	6060      	str	r0, [r4, #4]
 8017bec:	f1b9 0f00 	cmp.w	r9, #0
 8017bf0:	f000 80e8 	beq.w	8017dc4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8017bf4:	2800      	cmp	r0, #0
 8017bf6:	f000 80e5 	beq.w	8017dc4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8017bfa:	a805      	add	r0, sp, #20
 8017bfc:	f000 f8f9 	bl	8017df2 <_ZN8touchgfx9Matrix3x3C1Ev>
 8017c00:	6833      	ldr	r3, [r6, #0]
 8017c02:	4630      	mov	r0, r6
 8017c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017c06:	4798      	blx	r3
 8017c08:	a805      	add	r0, sp, #20
 8017c0a:	eef0 0a40 	vmov.f32	s1, s0
 8017c0e:	f000 f8f4 	bl	8017dfa <_ZN8touchgfx9Matrix3x35scaleEff>
 8017c12:	6860      	ldr	r0, [r4, #4]
 8017c14:	f1ba 0f03 	cmp.w	sl, #3
 8017c18:	d83b      	bhi.n	8017c92 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8017c1a:	e8df f00a 	tbb	[pc, sl]
 8017c1e:	1002      	.short	0x1002
 8017c20:	9f71      	.short	0x9f71
 8017c22:	6803      	ldr	r3, [r0, #0]
 8017c24:	462a      	mov	r2, r5
 8017c26:	4641      	mov	r1, r8
 8017c28:	689b      	ldr	r3, [r3, #8]
 8017c2a:	4798      	blx	r3
 8017c2c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8017c30:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8017c34:	ee07 7a90 	vmov	s15, r7
 8017c38:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8017c3c:	e026      	b.n	8017c8c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8017c3e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8017c42:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8017c46:	8869      	ldrh	r1, [r5, #2]
 8017c48:	1a9b      	subs	r3, r3, r2
 8017c4a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017c4e:	aa03      	add	r2, sp, #12
 8017c50:	1a5b      	subs	r3, r3, r1
 8017c52:	4641      	mov	r1, r8
 8017c54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017c58:	882b      	ldrh	r3, [r5, #0]
 8017c5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017c5e:	88ab      	ldrh	r3, [r5, #4]
 8017c60:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017c64:	6803      	ldr	r3, [r0, #0]
 8017c66:	689b      	ldr	r3, [r3, #8]
 8017c68:	4798      	blx	r3
 8017c6a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8017dcc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8017c6e:	a805      	add	r0, sp, #20
 8017c70:	f000 f8e8 	bl	8017e44 <_ZN8touchgfx9Matrix3x36rotateEf>
 8017c74:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8017c78:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017c7a:	ee07 7a90 	vmov	s15, r7
 8017c7e:	1a9b      	subs	r3, r3, r2
 8017c80:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8017c84:	ee00 3a10 	vmov	s0, r3
 8017c88:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8017c8c:	a805      	add	r0, sp, #20
 8017c8e:	f000 f927 	bl	8017ee0 <_ZN8touchgfx9Matrix3x39translateEff>
 8017c92:	6860      	ldr	r0, [r4, #4]
 8017c94:	a905      	add	r1, sp, #20
 8017c96:	2500      	movs	r5, #0
 8017c98:	f109 0602 	add.w	r6, r9, #2
 8017c9c:	6803      	ldr	r3, [r0, #0]
 8017c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ca0:	4798      	blx	r3
 8017ca2:	6860      	ldr	r0, [r4, #4]
 8017ca4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8017ca6:	6803      	ldr	r3, [r0, #0]
 8017ca8:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8017cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017cae:	4798      	blx	r3
 8017cb0:	6860      	ldr	r0, [r4, #4]
 8017cb2:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8017cb6:	6803      	ldr	r3, [r0, #0]
 8017cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017cba:	4798      	blx	r3
 8017cbc:	6860      	ldr	r0, [r4, #4]
 8017cbe:	2101      	movs	r1, #1
 8017cc0:	6803      	ldr	r3, [r0, #0]
 8017cc2:	68db      	ldr	r3, [r3, #12]
 8017cc4:	4798      	blx	r3
 8017cc6:	f8b9 7000 	ldrh.w	r7, [r9]
 8017cca:	f104 0310 	add.w	r3, r4, #16
 8017cce:	61a5      	str	r5, [r4, #24]
 8017cd0:	f104 0208 	add.w	r2, r4, #8
 8017cd4:	f104 0114 	add.w	r1, r4, #20
 8017cd8:	f104 000c 	add.w	r0, r4, #12
 8017cdc:	f7ed fd34 	bl	8005748 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8017ce0:	42af      	cmp	r7, r5
 8017ce2:	dd60      	ble.n	8017da6 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8017ce4:	8831      	ldrh	r1, [r6, #0]
 8017ce6:	1cb2      	adds	r2, r6, #2
 8017ce8:	4620      	mov	r0, r4
 8017cea:	3501      	adds	r5, #1
 8017cec:	f101 030f 	add.w	r3, r1, #15
 8017cf0:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8017cf4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017cf8:	f7ff fe28 	bl	801794c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8017cfc:	4606      	mov	r6, r0
 8017cfe:	e7ef      	b.n	8017ce0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8017d00:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017d04:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8017d08:	8829      	ldrh	r1, [r5, #0]
 8017d0a:	1a9b      	subs	r3, r3, r2
 8017d0c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017d10:	aa03      	add	r2, sp, #12
 8017d12:	1a5b      	subs	r3, r3, r1
 8017d14:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017d18:	886d      	ldrh	r5, [r5, #2]
 8017d1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017d1e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8017d22:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017d26:	1a5b      	subs	r3, r3, r1
 8017d28:	4641      	mov	r1, r8
 8017d2a:	1b5b      	subs	r3, r3, r5
 8017d2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017d30:	6803      	ldr	r3, [r0, #0]
 8017d32:	689b      	ldr	r3, [r3, #8]
 8017d34:	4798      	blx	r3
 8017d36:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8017dd0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8017d3a:	a805      	add	r0, sp, #20
 8017d3c:	f000 f882 	bl	8017e44 <_ZN8touchgfx9Matrix3x36rotateEf>
 8017d40:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8017d44:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017d46:	1a9b      	subs	r3, r3, r2
 8017d48:	ee00 3a90 	vmov	s1, r3
 8017d4c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8017d50:	1bdb      	subs	r3, r3, r7
 8017d52:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017d56:	ee00 3a10 	vmov	s0, r3
 8017d5a:	e795      	b.n	8017c88 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8017d5c:	886b      	ldrh	r3, [r5, #2]
 8017d5e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017d62:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017d66:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8017d6a:	8829      	ldrh	r1, [r5, #0]
 8017d6c:	1a9b      	subs	r3, r3, r2
 8017d6e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017d72:	aa03      	add	r2, sp, #12
 8017d74:	1a5b      	subs	r3, r3, r1
 8017d76:	4641      	mov	r1, r8
 8017d78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017d7c:	88eb      	ldrh	r3, [r5, #6]
 8017d7e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8017d82:	6803      	ldr	r3, [r0, #0]
 8017d84:	689b      	ldr	r3, [r3, #8]
 8017d86:	4798      	blx	r3
 8017d88:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8017dd4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8017d8c:	a805      	add	r0, sp, #20
 8017d8e:	f000 f859 	bl	8017e44 <_ZN8touchgfx9Matrix3x36rotateEf>
 8017d92:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8017d96:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8017d9a:	1bdb      	subs	r3, r3, r7
 8017d9c:	ee00 3a90 	vmov	s1, r3
 8017da0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017da4:	e748      	b.n	8017c38 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8017da6:	6860      	ldr	r0, [r4, #4]
 8017da8:	2100      	movs	r1, #0
 8017daa:	8b22      	ldrh	r2, [r4, #24]
 8017dac:	6803      	ldr	r3, [r0, #0]
 8017dae:	9101      	str	r1, [sp, #4]
 8017db0:	8b61      	ldrh	r1, [r4, #26]
 8017db2:	9100      	str	r1, [sp, #0]
 8017db4:	6a1d      	ldr	r5, [r3, #32]
 8017db6:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8017dba:	47a8      	blx	r5
 8017dbc:	6860      	ldr	r0, [r4, #4]
 8017dbe:	6803      	ldr	r3, [r0, #0]
 8017dc0:	69db      	ldr	r3, [r3, #28]
 8017dc2:	4798      	blx	r3
 8017dc4:	b00e      	add	sp, #56	@ 0x38
 8017dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dca:	bf00      	nop
 8017dcc:	42b40000 	.word	0x42b40000
 8017dd0:	43340000 	.word	0x43340000
 8017dd4:	43870000 	.word	0x43870000

08017dd8 <_ZN8touchgfx9Matrix3x35resetEv>:
 8017dd8:	2300      	movs	r3, #0
 8017dda:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8017dde:	6043      	str	r3, [r0, #4]
 8017de0:	6002      	str	r2, [r0, #0]
 8017de2:	6083      	str	r3, [r0, #8]
 8017de4:	60c3      	str	r3, [r0, #12]
 8017de6:	6102      	str	r2, [r0, #16]
 8017de8:	6143      	str	r3, [r0, #20]
 8017dea:	6183      	str	r3, [r0, #24]
 8017dec:	61c3      	str	r3, [r0, #28]
 8017dee:	6202      	str	r2, [r0, #32]
 8017df0:	4770      	bx	lr

08017df2 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8017df2:	b508      	push	{r3, lr}
 8017df4:	f7ff fff0 	bl	8017dd8 <_ZN8touchgfx9Matrix3x35resetEv>
 8017df8:	bd08      	pop	{r3, pc}

08017dfa <_ZN8touchgfx9Matrix3x35scaleEff>:
 8017dfa:	edd0 7a00 	vldr	s15, [r0]
 8017dfe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017e02:	edc0 7a00 	vstr	s15, [r0]
 8017e06:	edd0 7a01 	vldr	s15, [r0, #4]
 8017e0a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017e0e:	edc0 7a01 	vstr	s15, [r0, #4]
 8017e12:	edd0 7a02 	vldr	s15, [r0, #8]
 8017e16:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017e1a:	edd0 7a03 	vldr	s15, [r0, #12]
 8017e1e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8017e22:	ed80 0a02 	vstr	s0, [r0, #8]
 8017e26:	edc0 7a03 	vstr	s15, [r0, #12]
 8017e2a:	edd0 7a04 	vldr	s15, [r0, #16]
 8017e2e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8017e32:	edc0 7a04 	vstr	s15, [r0, #16]
 8017e36:	edd0 7a05 	vldr	s15, [r0, #20]
 8017e3a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8017e3e:	edc0 0a05 	vstr	s1, [r0, #20]
 8017e42:	4770      	bx	lr

08017e44 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8017e44:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8017ed8 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8017e48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017e4c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8017edc <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8017e50:	b510      	push	{r4, lr}
 8017e52:	ed2d 8b02 	vpush	{d8}
 8017e56:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8017e5a:	4604      	mov	r4, r0
 8017e5c:	eeb0 0a68 	vmov.f32	s0, s17
 8017e60:	f00d f81e 	bl	8024ea0 <cosf>
 8017e64:	eeb0 8a40 	vmov.f32	s16, s0
 8017e68:	eeb0 0a68 	vmov.f32	s0, s17
 8017e6c:	f00c ff54 	bl	8024d18 <sinf>
 8017e70:	edd4 6a03 	vldr	s13, [r4, #12]
 8017e74:	edd4 4a00 	vldr	s9, [r4]
 8017e78:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8017e7c:	ed94 7a04 	vldr	s14, [r4, #16]
 8017e80:	ed94 5a01 	vldr	s10, [r4, #4]
 8017e84:	ee66 6a88 	vmul.f32	s13, s13, s16
 8017e88:	edd4 5a02 	vldr	s11, [r4, #8]
 8017e8c:	eee8 7a24 	vfma.f32	s15, s16, s9
 8017e90:	eee0 6a24 	vfma.f32	s13, s0, s9
 8017e94:	edc4 7a00 	vstr	s15, [r4]
 8017e98:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8017e9c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8017ea0:	edc4 6a03 	vstr	s13, [r4, #12]
 8017ea4:	eee8 7a05 	vfma.f32	s15, s16, s10
 8017ea8:	eea0 7a05 	vfma.f32	s14, s0, s10
 8017eac:	edc4 7a01 	vstr	s15, [r4, #4]
 8017eb0:	edd4 7a05 	vldr	s15, [r4, #20]
 8017eb4:	ed84 7a04 	vstr	s14, [r4, #16]
 8017eb8:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8017ebc:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017ec0:	eea8 6a25 	vfma.f32	s12, s16, s11
 8017ec4:	eee0 7a25 	vfma.f32	s15, s0, s11
 8017ec8:	ecbd 8b02 	vpop	{d8}
 8017ecc:	ed84 6a02 	vstr	s12, [r4, #8]
 8017ed0:	edc4 7a05 	vstr	s15, [r4, #20]
 8017ed4:	bd10      	pop	{r4, pc}
 8017ed6:	bf00      	nop
 8017ed8:	40490fdb 	.word	0x40490fdb
 8017edc:	43340000 	.word	0x43340000

08017ee0 <_ZN8touchgfx9Matrix3x39translateEff>:
 8017ee0:	ed90 6a06 	vldr	s12, [r0, #24]
 8017ee4:	edd0 7a00 	vldr	s15, [r0]
 8017ee8:	edd0 6a07 	vldr	s13, [r0, #28]
 8017eec:	eee6 7a00 	vfma.f32	s15, s12, s0
 8017ef0:	ed90 7a08 	vldr	s14, [r0, #32]
 8017ef4:	edc0 7a00 	vstr	s15, [r0]
 8017ef8:	edd0 7a01 	vldr	s15, [r0, #4]
 8017efc:	eee6 7a80 	vfma.f32	s15, s13, s0
 8017f00:	edc0 7a01 	vstr	s15, [r0, #4]
 8017f04:	edd0 7a02 	vldr	s15, [r0, #8]
 8017f08:	eee7 7a00 	vfma.f32	s15, s14, s0
 8017f0c:	edc0 7a02 	vstr	s15, [r0, #8]
 8017f10:	edd0 7a03 	vldr	s15, [r0, #12]
 8017f14:	eee6 7a20 	vfma.f32	s15, s12, s1
 8017f18:	edc0 7a03 	vstr	s15, [r0, #12]
 8017f1c:	edd0 7a04 	vldr	s15, [r0, #16]
 8017f20:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8017f24:	edc0 7a04 	vstr	s15, [r0, #16]
 8017f28:	edd0 7a05 	vldr	s15, [r0, #20]
 8017f2c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8017f30:	edc0 7a05 	vstr	s15, [r0, #20]
 8017f34:	4770      	bx	lr

08017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8017f36:	edd0 6a01 	vldr	s13, [r0, #4]
 8017f3a:	b084      	sub	sp, #16
 8017f3c:	edd0 7a04 	vldr	s15, [r0, #16]
 8017f40:	ed90 7a03 	vldr	s14, [r0, #12]
 8017f44:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8017f48:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8017f4c:	edd0 6a00 	vldr	s13, [r0]
 8017f50:	eee7 7a00 	vfma.f32	s15, s14, s0
 8017f54:	ed90 7a05 	vldr	s14, [r0, #20]
 8017f58:	eee6 0a80 	vfma.f32	s1, s13, s0
 8017f5c:	ed90 0a02 	vldr	s0, [r0, #8]
 8017f60:	ee30 0a80 	vadd.f32	s0, s1, s0
 8017f64:	ee77 0a87 	vadd.f32	s1, s15, s14
 8017f68:	b004      	add	sp, #16
 8017f6a:	4770      	bx	lr

08017f6c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8017f6c:	b530      	push	{r4, r5, lr}
 8017f6e:	8083      	strh	r3, [r0, #4]
 8017f70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017f74:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8017f78:	80c3      	strh	r3, [r0, #6]
 8017f7a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8017f7e:	6141      	str	r1, [r0, #20]
 8017f80:	7203      	strb	r3, [r0, #8]
 8017f82:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017f86:	8302      	strh	r2, [r0, #24]
 8017f88:	7243      	strb	r3, [r0, #9]
 8017f8a:	7a83      	ldrb	r3, [r0, #10]
 8017f8c:	f365 0306 	bfi	r3, r5, #0, #7
 8017f90:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8017f94:	f365 13c7 	bfi	r3, r5, #7, #1
 8017f98:	7283      	strb	r3, [r0, #10]
 8017f9a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8017f9e:	72c3      	strb	r3, [r0, #11]
 8017fa0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017fa4:	7303      	strb	r3, [r0, #12]
 8017fa6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017faa:	81c3      	strh	r3, [r0, #14]
 8017fac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8017fb0:	8203      	strh	r3, [r0, #16]
 8017fb2:	4b01      	ldr	r3, [pc, #4]	@ (8017fb8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8017fb4:	6003      	str	r3, [r0, #0]
 8017fb6:	bd30      	pop	{r4, r5, pc}
 8017fb8:	080296e4 	.word	0x080296e4

08017fbc <_ZNK8touchgfx9ConstFont4findEt>:
 8017fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fbe:	6944      	ldr	r4, [r0, #20]
 8017fc0:	b3bc      	cbz	r4, 8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017fc2:	88a3      	ldrh	r3, [r4, #4]
 8017fc4:	8b02      	ldrh	r2, [r0, #24]
 8017fc6:	1acb      	subs	r3, r1, r3
 8017fc8:	f102 32ff 	add.w	r2, r2, #4294967295
 8017fcc:	d431      	bmi.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017fce:	4293      	cmp	r3, r2
 8017fd0:	dd0c      	ble.n	8017fec <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8017fd2:	230e      	movs	r3, #14
 8017fd4:	fb03 4302 	mla	r3, r3, r2, r4
 8017fd8:	889b      	ldrh	r3, [r3, #4]
 8017fda:	1a5b      	subs	r3, r3, r1
 8017fdc:	1ad3      	subs	r3, r2, r3
 8017fde:	429a      	cmp	r2, r3
 8017fe0:	db27      	blt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	bfbc      	itt	lt
 8017fe6:	2302      	movlt	r3, #2
 8017fe8:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017fec:	2500      	movs	r5, #0
 8017fee:	260e      	movs	r6, #14
 8017ff0:	4295      	cmp	r5, r2
 8017ff2:	dc1e      	bgt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017ff4:	fb06 4003 	mla	r0, r6, r3, r4
 8017ff8:	8887      	ldrh	r7, [r0, #4]
 8017ffa:	42b9      	cmp	r1, r7
 8017ffc:	d01a      	beq.n	8018034 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017ffe:	d20d      	bcs.n	801801c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018000:	1e5a      	subs	r2, r3, #1
 8018002:	4295      	cmp	r5, r2
 8018004:	dc15      	bgt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018006:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801800a:	1a5b      	subs	r3, r3, r1
 801800c:	1ad3      	subs	r3, r2, r3
 801800e:	429a      	cmp	r2, r3
 8018010:	db0f      	blt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018012:	429d      	cmp	r5, r3
 8018014:	ddec      	ble.n	8017ff0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018016:	1953      	adds	r3, r2, r5
 8018018:	105b      	asrs	r3, r3, #1
 801801a:	e7e9      	b.n	8017ff0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801801c:	1c5d      	adds	r5, r3, #1
 801801e:	42aa      	cmp	r2, r5
 8018020:	db07      	blt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018022:	8a43      	ldrh	r3, [r0, #18]
 8018024:	1acb      	subs	r3, r1, r3
 8018026:	442b      	add	r3, r5
 8018028:	429d      	cmp	r5, r3
 801802a:	dc02      	bgt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801802c:	429a      	cmp	r2, r3
 801802e:	dadf      	bge.n	8017ff0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018030:	e7f1      	b.n	8018016 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018032:	2000      	movs	r0, #0
 8018034:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018036 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018038:	4604      	mov	r4, r0
 801803a:	4617      	mov	r7, r2
 801803c:	461e      	mov	r6, r3
 801803e:	b911      	cbnz	r1, 8018046 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018040:	2500      	movs	r5, #0
 8018042:	4628      	mov	r0, r5
 8018044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018046:	290a      	cmp	r1, #10
 8018048:	d0fa      	beq.n	8018040 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801804a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801804e:	4291      	cmp	r1, r2
 8018050:	d0f6      	beq.n	8018040 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018052:	f242 020b 	movw	r2, #8203	@ 0x200b
 8018056:	4291      	cmp	r1, r2
 8018058:	d0f2      	beq.n	8018040 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801805a:	f7ff ffaf 	bl	8017fbc <_ZNK8touchgfx9ConstFont4findEt>
 801805e:	4605      	mov	r5, r0
 8018060:	b950      	cbnz	r0, 8018078 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018062:	6823      	ldr	r3, [r4, #0]
 8018064:	4620      	mov	r0, r4
 8018066:	691b      	ldr	r3, [r3, #16]
 8018068:	4798      	blx	r3
 801806a:	4601      	mov	r1, r0
 801806c:	4620      	mov	r0, r4
 801806e:	f7ff ffa5 	bl	8017fbc <_ZNK8touchgfx9ConstFont4findEt>
 8018072:	4605      	mov	r5, r0
 8018074:	2800      	cmp	r0, #0
 8018076:	d0e3      	beq.n	8018040 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018078:	6823      	ldr	r3, [r4, #0]
 801807a:	4629      	mov	r1, r5
 801807c:	4620      	mov	r0, r4
 801807e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018080:	4798      	blx	r3
 8018082:	6038      	str	r0, [r7, #0]
 8018084:	6823      	ldr	r3, [r4, #0]
 8018086:	4620      	mov	r0, r4
 8018088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801808a:	4798      	blx	r3
 801808c:	7030      	strb	r0, [r6, #0]
 801808e:	e7d8      	b.n	8018042 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018090 <_ZN8touchgfx4clzuEm>:
 8018090:	4603      	mov	r3, r0
 8018092:	b1c8      	cbz	r0, 80180c8 <_ZN8touchgfx4clzuEm+0x38>
 8018094:	0c02      	lsrs	r2, r0, #16
 8018096:	0412      	lsls	r2, r2, #16
 8018098:	b9a2      	cbnz	r2, 80180c4 <_ZN8touchgfx4clzuEm+0x34>
 801809a:	0403      	lsls	r3, r0, #16
 801809c:	2010      	movs	r0, #16
 801809e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80180a2:	bf04      	itt	eq
 80180a4:	021b      	lsleq	r3, r3, #8
 80180a6:	3008      	addeq	r0, #8
 80180a8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80180ac:	bf04      	itt	eq
 80180ae:	011b      	lsleq	r3, r3, #4
 80180b0:	3004      	addeq	r0, #4
 80180b2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80180b6:	bf04      	itt	eq
 80180b8:	009b      	lsleq	r3, r3, #2
 80180ba:	3002      	addeq	r0, #2
 80180bc:	2b00      	cmp	r3, #0
 80180be:	db04      	blt.n	80180ca <_ZN8touchgfx4clzuEm+0x3a>
 80180c0:	3001      	adds	r0, #1
 80180c2:	4770      	bx	lr
 80180c4:	2000      	movs	r0, #0
 80180c6:	e7ea      	b.n	801809e <_ZN8touchgfx4clzuEm+0xe>
 80180c8:	2020      	movs	r0, #32
 80180ca:	4770      	bx	lr

080180cc <_ZN8touchgfx7muldivuEmmmRm>:
 80180cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80180d0:	460f      	mov	r7, r1
 80180d2:	4615      	mov	r5, r2
 80180d4:	461e      	mov	r6, r3
 80180d6:	4601      	mov	r1, r0
 80180d8:	b100      	cbz	r0, 80180dc <_ZN8touchgfx7muldivuEmmmRm+0x10>
 80180da:	b927      	cbnz	r7, 80180e6 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 80180dc:	2000      	movs	r0, #0
 80180de:	6030      	str	r0, [r6, #0]
 80180e0:	b002      	add	sp, #8
 80180e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180e6:	f7ff ffd3 	bl	8018090 <_ZN8touchgfx4clzuEm>
 80180ea:	b980      	cbnz	r0, 801810e <_ZN8touchgfx7muldivuEmmmRm+0x42>
 80180ec:	4638      	mov	r0, r7
 80180ee:	f7ff ffcf 	bl	8018090 <_ZN8touchgfx4clzuEm>
 80180f2:	2800      	cmp	r0, #0
 80180f4:	dd05      	ble.n	8018102 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 80180f6:	4633      	mov	r3, r6
 80180f8:	462a      	mov	r2, r5
 80180fa:	4638      	mov	r0, r7
 80180fc:	f7ff ffe6 	bl	80180cc <_ZN8touchgfx7muldivuEmmmRm>
 8018100:	e7ee      	b.n	80180e0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8018102:	f04f 33ff 	mov.w	r3, #4294967295
 8018106:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801810a:	6033      	str	r3, [r6, #0]
 801810c:	e7e8      	b.n	80180e0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801810e:	fa37 f800 	lsrs.w	r8, r7, r0
 8018112:	fb07 f301 	mul.w	r3, r7, r1
 8018116:	d105      	bne.n	8018124 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 8018118:	fbb3 f0f5 	udiv	r0, r3, r5
 801811c:	fb05 3510 	mls	r5, r5, r0, r3
 8018120:	6035      	str	r5, [r6, #0]
 8018122:	e7dd      	b.n	80180e0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8018124:	2301      	movs	r3, #1
 8018126:	fa01 fa00 	lsl.w	sl, r1, r0
 801812a:	462a      	mov	r2, r5
 801812c:	fa03 f000 	lsl.w	r0, r3, r0
 8018130:	4633      	mov	r3, r6
 8018132:	fbba f9f5 	udiv	r9, sl, r5
 8018136:	3801      	subs	r0, #1
 8018138:	fb08 f409 	mul.w	r4, r8, r9
 801813c:	4038      	ands	r0, r7
 801813e:	f7ff ffc5 	bl	80180cc <_ZN8touchgfx7muldivuEmmmRm>
 8018142:	462a      	mov	r2, r5
 8018144:	4607      	mov	r7, r0
 8018146:	ab01      	add	r3, sp, #4
 8018148:	fb05 a119 	mls	r1, r5, r9, sl
 801814c:	4640      	mov	r0, r8
 801814e:	f7ff ffbd 	bl	80180cc <_ZN8touchgfx7muldivuEmmmRm>
 8018152:	9b01      	ldr	r3, [sp, #4]
 8018154:	6832      	ldr	r2, [r6, #0]
 8018156:	441a      	add	r2, r3
 8018158:	fbb2 f3f5 	udiv	r3, r2, r5
 801815c:	441c      	add	r4, r3
 801815e:	fb05 2513 	mls	r5, r5, r3, r2
 8018162:	443c      	add	r4, r7
 8018164:	4420      	add	r0, r4
 8018166:	e7db      	b.n	8018120 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08018168 <_ZN8touchgfx6muldivElllRl>:
 8018168:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801816a:	2800      	cmp	r0, #0
 801816c:	461e      	mov	r6, r3
 801816e:	bfba      	itte	lt
 8018170:	4240      	neglt	r0, r0
 8018172:	f04f 34ff 	movlt.w	r4, #4294967295
 8018176:	2401      	movge	r4, #1
 8018178:	2900      	cmp	r1, #0
 801817a:	bfbc      	itt	lt
 801817c:	4249      	neglt	r1, r1
 801817e:	4264      	neglt	r4, r4
 8018180:	2a00      	cmp	r2, #0
 8018182:	bfb6      	itet	lt
 8018184:	4265      	neglt	r5, r4
 8018186:	4625      	movge	r5, r4
 8018188:	4252      	neglt	r2, r2
 801818a:	4288      	cmp	r0, r1
 801818c:	bfc2      	ittt	gt
 801818e:	4603      	movgt	r3, r0
 8018190:	4608      	movgt	r0, r1
 8018192:	4619      	movgt	r1, r3
 8018194:	ab01      	add	r3, sp, #4
 8018196:	f7ff ff99 	bl	80180cc <_ZN8touchgfx7muldivuEmmmRm>
 801819a:	9b01      	ldr	r3, [sp, #4]
 801819c:	4368      	muls	r0, r5
 801819e:	435c      	muls	r4, r3
 80181a0:	6034      	str	r4, [r6, #0]
 80181a2:	b002      	add	sp, #8
 80181a4:	bd70      	pop	{r4, r5, r6, pc}

080181a6 <_ZN8touchgfx6muldivElll>:
 80181a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80181a8:	4606      	mov	r6, r0
 80181aa:	ab01      	add	r3, sp, #4
 80181ac:	460d      	mov	r5, r1
 80181ae:	4614      	mov	r4, r2
 80181b0:	f7ff ffda 	bl	8018168 <_ZN8touchgfx6muldivElllRl>
 80181b4:	2e00      	cmp	r6, #0
 80181b6:	db20      	blt.n	80181fa <_ZN8touchgfx6muldivElll+0x54>
 80181b8:	bf14      	ite	ne
 80181ba:	2301      	movne	r3, #1
 80181bc:	2300      	moveq	r3, #0
 80181be:	2d00      	cmp	r5, #0
 80181c0:	db1e      	blt.n	8018200 <_ZN8touchgfx6muldivElll+0x5a>
 80181c2:	bf14      	ite	ne
 80181c4:	2201      	movne	r2, #1
 80181c6:	2200      	moveq	r2, #0
 80181c8:	2c00      	cmp	r4, #0
 80181ca:	fb03 f202 	mul.w	r2, r3, r2
 80181ce:	db1a      	blt.n	8018206 <_ZN8touchgfx6muldivElll+0x60>
 80181d0:	bf14      	ite	ne
 80181d2:	2301      	movne	r3, #1
 80181d4:	2300      	moveq	r3, #0
 80181d6:	4353      	muls	r3, r2
 80181d8:	2b01      	cmp	r3, #1
 80181da:	d117      	bne.n	801820c <_ZN8touchgfx6muldivElll+0x66>
 80181dc:	2c00      	cmp	r4, #0
 80181de:	9b01      	ldr	r3, [sp, #4]
 80181e0:	bfb8      	it	lt
 80181e2:	4264      	neglt	r4, r4
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	f104 0401 	add.w	r4, r4, #1
 80181ea:	bfb8      	it	lt
 80181ec:	425b      	neglt	r3, r3
 80181ee:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80181f2:	db00      	blt.n	80181f6 <_ZN8touchgfx6muldivElll+0x50>
 80181f4:	3001      	adds	r0, #1
 80181f6:	b002      	add	sp, #8
 80181f8:	bd70      	pop	{r4, r5, r6, pc}
 80181fa:	f04f 33ff 	mov.w	r3, #4294967295
 80181fe:	e7de      	b.n	80181be <_ZN8touchgfx6muldivElll+0x18>
 8018200:	f04f 32ff 	mov.w	r2, #4294967295
 8018204:	e7e0      	b.n	80181c8 <_ZN8touchgfx6muldivElll+0x22>
 8018206:	f04f 33ff 	mov.w	r3, #4294967295
 801820a:	e7e4      	b.n	80181d6 <_ZN8touchgfx6muldivElll+0x30>
 801820c:	3301      	adds	r3, #1
 801820e:	d1f2      	bne.n	80181f6 <_ZN8touchgfx6muldivElll+0x50>
 8018210:	9b01      	ldr	r3, [sp, #4]
 8018212:	2c00      	cmp	r4, #0
 8018214:	bfb8      	it	lt
 8018216:	4264      	neglt	r4, r4
 8018218:	2b00      	cmp	r3, #0
 801821a:	bfb8      	it	lt
 801821c:	425b      	neglt	r3, r3
 801821e:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8018222:	bfc8      	it	gt
 8018224:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8018228:	e7e5      	b.n	80181f6 <_ZN8touchgfx6muldivElll+0x50>

0801822a <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801822a:	2000      	movs	r0, #0
 801822c:	4770      	bx	lr

0801822e <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801822e:	2001      	movs	r0, #1
 8018230:	4770      	bx	lr

08018232 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8018232:	2002      	movs	r0, #2
 8018234:	4770      	bx	lr

08018236 <_ZN8touchgfx6ScreenD1Ev>:
 8018236:	4770      	bx	lr

08018238 <_ZN8touchgfx12GestureEventD1Ev>:
 8018238:	4770      	bx	lr

0801823a <_ZN8touchgfx9DragEventD1Ev>:
 801823a:	4770      	bx	lr

0801823c <_ZN8touchgfx10ClickEventD1Ev>:
 801823c:	4770      	bx	lr

0801823e <_ZN8touchgfx10ClickEventD0Ev>:
 801823e:	b510      	push	{r4, lr}
 8018240:	4604      	mov	r4, r0
 8018242:	210c      	movs	r1, #12
 8018244:	f00c fcf3 	bl	8024c2e <_ZdlPvj>
 8018248:	4620      	mov	r0, r4
 801824a:	bd10      	pop	{r4, pc}

0801824c <_ZN8touchgfx9DragEventD0Ev>:
 801824c:	b510      	push	{r4, lr}
 801824e:	4604      	mov	r4, r0
 8018250:	2110      	movs	r1, #16
 8018252:	f00c fcec 	bl	8024c2e <_ZdlPvj>
 8018256:	4620      	mov	r0, r4
 8018258:	bd10      	pop	{r4, pc}

0801825a <_ZN8touchgfx12GestureEventD0Ev>:
 801825a:	b510      	push	{r4, lr}
 801825c:	4604      	mov	r4, r0
 801825e:	210c      	movs	r1, #12
 8018260:	f00c fce5 	bl	8024c2e <_ZdlPvj>
 8018264:	4620      	mov	r0, r4
 8018266:	bd10      	pop	{r4, pc}

08018268 <_ZN8touchgfx6ScreenD0Ev>:
 8018268:	b510      	push	{r4, lr}
 801826a:	4604      	mov	r4, r0
 801826c:	213c      	movs	r1, #60	@ 0x3c
 801826e:	f00c fcde 	bl	8024c2e <_ZdlPvj>
 8018272:	4620      	mov	r0, r4
 8018274:	bd10      	pop	{r4, pc}
	...

08018278 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018278:	b530      	push	{r4, r5, lr}
 801827a:	460d      	mov	r5, r1
 801827c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801827e:	b087      	sub	sp, #28
 8018280:	4604      	mov	r4, r0
 8018282:	b301      	cbz	r1, 80182c6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018284:	a801      	add	r0, sp, #4
 8018286:	f7ff fb3b 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801828a:	892a      	ldrh	r2, [r5, #8]
 801828c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018290:	7928      	ldrb	r0, [r5, #4]
 8018292:	1ad2      	subs	r2, r2, r3
 8018294:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018296:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801829a:	441a      	add	r2, r3
 801829c:	896b      	ldrh	r3, [r5, #10]
 801829e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80182a2:	f88d 0010 	strb.w	r0, [sp, #16]
 80182a6:	1b5b      	subs	r3, r3, r5
 80182a8:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 80182aa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80182ac:	442b      	add	r3, r5
 80182ae:	4d07      	ldr	r5, [pc, #28]	@ (80182cc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80182b0:	f8ad 1012 	strh.w	r1, [sp, #18]
 80182b4:	a903      	add	r1, sp, #12
 80182b6:	9503      	str	r5, [sp, #12]
 80182b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80182bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80182c0:	6803      	ldr	r3, [r0, #0]
 80182c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80182c4:	4798      	blx	r3
 80182c6:	b007      	add	sp, #28
 80182c8:	bd30      	pop	{r4, r5, pc}
 80182ca:	bf00      	nop
 80182cc:	08029774 	.word	0x08029774

080182d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80182d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182d4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80182d6:	b08a      	sub	sp, #40	@ 0x28
 80182d8:	4604      	mov	r4, r0
 80182da:	460d      	mov	r5, r1
 80182dc:	b113      	cbz	r3, 80182e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80182de:	790b      	ldrb	r3, [r1, #4]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d044      	beq.n	801836e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80182e4:	f104 0804 	add.w	r8, r4, #4
 80182e8:	a803      	add	r0, sp, #12
 80182ea:	4641      	mov	r1, r8
 80182ec:	f7ff fb08 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80182f0:	792b      	ldrb	r3, [r5, #4]
 80182f2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80182f6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80182fa:	b983      	cbnz	r3, 801831e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80182fc:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8018300:	892a      	ldrh	r2, [r5, #8]
 8018302:	88e9      	ldrh	r1, [r5, #6]
 8018304:	4640      	mov	r0, r8
 8018306:	1b92      	subs	r2, r2, r6
 8018308:	9301      	str	r3, [sp, #4]
 801830a:	1bc9      	subs	r1, r1, r7
 801830c:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8018310:	b212      	sxth	r2, r2
 8018312:	9300      	str	r3, [sp, #0]
 8018314:	b209      	sxth	r1, r1
 8018316:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801831a:	f7f8 f9e3 	bl	80106e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801831e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018320:	b329      	cbz	r1, 801836e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018322:	a805      	add	r0, sp, #20
 8018324:	f7ff faec 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018328:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801832c:	792b      	ldrb	r3, [r5, #4]
 801832e:	a907      	add	r1, sp, #28
 8018330:	1abf      	subs	r7, r7, r2
 8018332:	88ea      	ldrh	r2, [r5, #6]
 8018334:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018336:	4417      	add	r7, r2
 8018338:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801833a:	f88d 3020 	strb.w	r3, [sp, #32]
 801833e:	4417      	add	r7, r2
 8018340:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018344:	1ab6      	subs	r6, r6, r2
 8018346:	892a      	ldrh	r2, [r5, #8]
 8018348:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801834c:	4416      	add	r6, r2
 801834e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018350:	4416      	add	r6, r2
 8018352:	4a08      	ldr	r2, [pc, #32]	@ (8018374 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8018354:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8018358:	2600      	movs	r6, #0
 801835a:	9207      	str	r2, [sp, #28]
 801835c:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8018360:	6803      	ldr	r3, [r0, #0]
 8018362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018364:	4798      	blx	r3
 8018366:	792b      	ldrb	r3, [r5, #4]
 8018368:	b10b      	cbz	r3, 801836e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801836a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801836e:	b00a      	add	sp, #40	@ 0x28
 8018370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018374:	0802974c 	.word	0x0802974c

08018378 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801837c:	460c      	mov	r4, r1
 801837e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8018380:	b088      	sub	sp, #32
 8018382:	4605      	mov	r5, r0
 8018384:	2900      	cmp	r1, #0
 8018386:	d06d      	beq.n	8018464 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018388:	4668      	mov	r0, sp
 801838a:	f7ff fab9 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801838e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8018390:	88e3      	ldrh	r3, [r4, #6]
 8018392:	f9bd 8000 	ldrsh.w	r8, [sp]
 8018396:	440b      	add	r3, r1
 8018398:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801839c:	b21b      	sxth	r3, r3
 801839e:	4543      	cmp	r3, r8
 80183a0:	db31      	blt.n	8018406 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80183a2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80183a6:	44c4      	add	ip, r8
 80183a8:	fa0f fc8c 	sxth.w	ip, ip
 80183ac:	4563      	cmp	r3, ip
 80183ae:	da2a      	bge.n	8018406 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80183b0:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 80183b2:	8926      	ldrh	r6, [r4, #8]
 80183b4:	4416      	add	r6, r2
 80183b6:	b236      	sxth	r6, r6
 80183b8:	42be      	cmp	r6, r7
 80183ba:	db24      	blt.n	8018406 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80183bc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80183c0:	4438      	add	r0, r7
 80183c2:	b200      	sxth	r0, r0
 80183c4:	4286      	cmp	r6, r0
 80183c6:	da1e      	bge.n	8018406 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80183c8:	8963      	ldrh	r3, [r4, #10]
 80183ca:	4419      	add	r1, r3
 80183cc:	b209      	sxth	r1, r1
 80183ce:	4541      	cmp	r1, r8
 80183d0:	db08      	blt.n	80183e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80183d2:	4561      	cmp	r1, ip
 80183d4:	da06      	bge.n	80183e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80183d6:	89a3      	ldrh	r3, [r4, #12]
 80183d8:	441a      	add	r2, r3
 80183da:	b212      	sxth	r2, r2
 80183dc:	42ba      	cmp	r2, r7
 80183de:	db01      	blt.n	80183e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80183e0:	4282      	cmp	r2, r0
 80183e2:	db10      	blt.n	8018406 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80183e4:	4b21      	ldr	r3, [pc, #132]	@ (801846c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80183e6:	a904      	add	r1, sp, #16
 80183e8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80183ea:	9304      	str	r3, [sp, #16]
 80183ec:	2302      	movs	r3, #2
 80183ee:	f88d 3014 	strb.w	r3, [sp, #20]
 80183f2:	2300      	movs	r3, #0
 80183f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80183f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80183fc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018400:	6803      	ldr	r3, [r0, #0]
 8018402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018404:	4798      	blx	r3
 8018406:	1d29      	adds	r1, r5, #4
 8018408:	a802      	add	r0, sp, #8
 801840a:	f7ff fa79 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801840e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018412:	88e0      	ldrh	r0, [r4, #6]
 8018414:	eba3 0808 	sub.w	r8, r3, r8
 8018418:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801841c:	7921      	ldrb	r1, [r4, #4]
 801841e:	fa1f f888 	uxth.w	r8, r8
 8018422:	1bdf      	subs	r7, r3, r7
 8018424:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8018428:	b2bb      	uxth	r3, r7
 801842a:	4440      	add	r0, r8
 801842c:	8922      	ldrh	r2, [r4, #8]
 801842e:	8967      	ldrh	r7, [r4, #10]
 8018430:	4460      	add	r0, ip
 8018432:	89a4      	ldrh	r4, [r4, #12]
 8018434:	441a      	add	r2, r3
 8018436:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8018438:	44b8      	add	r8, r7
 801843a:	4423      	add	r3, r4
 801843c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018440:	4432      	add	r2, r6
 8018442:	44e0      	add	r8, ip
 8018444:	4433      	add	r3, r6
 8018446:	4c0a      	ldr	r4, [pc, #40]	@ (8018470 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018448:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801844a:	f88d 1014 	strb.w	r1, [sp, #20]
 801844e:	a904      	add	r1, sp, #16
 8018450:	9404      	str	r4, [sp, #16]
 8018452:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018456:	f8ad 801a 	strh.w	r8, [sp, #26]
 801845a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801845e:	6803      	ldr	r3, [r0, #0]
 8018460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018462:	4798      	blx	r3
 8018464:	b008      	add	sp, #32
 8018466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801846a:	bf00      	nop
 801846c:	0802974c 	.word	0x0802974c
 8018470:	08029760 	.word	0x08029760

08018474 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018476:	4604      	mov	r4, r0
 8018478:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801847c:	3201      	adds	r2, #1
 801847e:	d112      	bne.n	80184a6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018480:	2500      	movs	r5, #0
 8018482:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018486:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801848a:	6803      	ldr	r3, [r0, #0]
 801848c:	9500      	str	r5, [sp, #0]
 801848e:	466d      	mov	r5, sp
 8018490:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018494:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018498:	4629      	mov	r1, r5
 801849a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801849c:	4798      	blx	r3
 801849e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80184a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80184a6:	4620      	mov	r0, r4
 80184a8:	b003      	add	sp, #12
 80184aa:	bd30      	pop	{r4, r5, pc}

080184ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80184ac:	b513      	push	{r0, r1, r4, lr}
 80184ae:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80184b2:	4604      	mov	r4, r0
 80184b4:	3301      	adds	r3, #1
 80184b6:	d109      	bne.n	80184cc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80184b8:	4601      	mov	r1, r0
 80184ba:	4668      	mov	r0, sp
 80184bc:	f7ff fa20 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80184c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80184c4:	8423      	strh	r3, [r4, #32]
 80184c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80184ca:	8463      	strh	r3, [r4, #34]	@ 0x22
 80184cc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80184d0:	b002      	add	sp, #8
 80184d2:	bd10      	pop	{r4, pc}

080184d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80184d4:	b513      	push	{r0, r1, r4, lr}
 80184d6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80184da:	4604      	mov	r4, r0
 80184dc:	3301      	adds	r3, #1
 80184de:	d109      	bne.n	80184f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80184e0:	4601      	mov	r1, r0
 80184e2:	4668      	mov	r0, sp
 80184e4:	f7ff fa0c 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80184e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80184ec:	8423      	strh	r3, [r4, #32]
 80184ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80184f2:	8463      	strh	r3, [r4, #34]	@ 0x22
 80184f4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 80184f8:	b002      	add	sp, #8
 80184fa:	bd10      	pop	{r4, pc}

080184fc <_ZN8touchgfx6ScreenC1Ev>:
 80184fc:	b570      	push	{r4, r5, r6, lr}
 80184fe:	4b17      	ldr	r3, [pc, #92]	@ (801855c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8018500:	4605      	mov	r5, r0
 8018502:	4a17      	ldr	r2, [pc, #92]	@ (8018560 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018504:	2101      	movs	r1, #1
 8018506:	f845 3b04 	str.w	r3, [r5], #4
 801850a:	2300      	movs	r3, #0
 801850c:	6042      	str	r2, [r0, #4]
 801850e:	4604      	mov	r4, r0
 8018510:	8103      	strh	r3, [r0, #8]
 8018512:	8143      	strh	r3, [r0, #10]
 8018514:	8183      	strh	r3, [r0, #12]
 8018516:	81c3      	strh	r3, [r0, #14]
 8018518:	8203      	strh	r3, [r0, #16]
 801851a:	8243      	strh	r3, [r0, #18]
 801851c:	8283      	strh	r3, [r0, #20]
 801851e:	82c3      	strh	r3, [r0, #22]
 8018520:	6203      	str	r3, [r0, #32]
 8018522:	8483      	strh	r3, [r0, #36]	@ 0x24
 8018524:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8018526:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801852a:	6343      	str	r3, [r0, #52]	@ 0x34
 801852c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8018530:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018534:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018538:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801853c:	4b09      	ldr	r3, [pc, #36]	@ (8018564 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801853e:	4628      	mov	r0, r5
 8018540:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018544:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8018546:	4a08      	ldr	r2, [pc, #32]	@ (8018568 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018548:	f9b2 1000 	ldrsh.w	r1, [r2]
 801854c:	4798      	blx	r3
 801854e:	6863      	ldr	r3, [r4, #4]
 8018550:	4628      	mov	r0, r5
 8018552:	4631      	mov	r1, r6
 8018554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018556:	4798      	blx	r3
 8018558:	4620      	mov	r0, r4
 801855a:	bd70      	pop	{r4, r5, r6, pc}
 801855c:	08029788 	.word	0x08029788
 8018560:	080291f8 	.word	0x080291f8
 8018564:	24028e22 	.word	0x24028e22
 8018568:	24028e20 	.word	0x24028e20

0801856c <_ZN8touchgfx6Screen4drawEv>:
 801856c:	4b09      	ldr	r3, [pc, #36]	@ (8018594 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801856e:	b507      	push	{r0, r1, r2, lr}
 8018570:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018574:	2100      	movs	r1, #0
 8018576:	4b08      	ldr	r3, [pc, #32]	@ (8018598 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018578:	9100      	str	r1, [sp, #0]
 801857a:	4669      	mov	r1, sp
 801857c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018580:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018584:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018588:	6803      	ldr	r3, [r0, #0]
 801858a:	689b      	ldr	r3, [r3, #8]
 801858c:	4798      	blx	r3
 801858e:	b003      	add	sp, #12
 8018590:	f85d fb04 	ldr.w	pc, [sp], #4
 8018594:	24028e20 	.word	0x24028e20
 8018598:	24028e22 	.word	0x24028e22

0801859c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80185a4:	b089      	sub	sp, #36	@ 0x24
 80185a6:	4680      	mov	r8, r0
 80185a8:	460c      	mov	r4, r1
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	4615      	mov	r5, r2
 80185ae:	dd0e      	ble.n	80185ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80185b0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	dd0a      	ble.n	80185ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80185b8:	4628      	mov	r0, r5
 80185ba:	f7ff ff5b 	bl	8018474 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80185be:	4621      	mov	r1, r4
 80185c0:	f7fd ffab 	bl	801651a <_ZNK8touchgfx4Rect9intersectERKS0_>
 80185c4:	69eb      	ldr	r3, [r5, #28]
 80185c6:	b928      	cbnz	r0, 80185d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80185c8:	461d      	mov	r5, r3
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d1f4      	bne.n	80185b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80185ce:	b009      	add	sp, #36	@ 0x24
 80185d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185d4:	ae04      	add	r6, sp, #16
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	f000 80b5 	beq.w	8018746 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80185dc:	682b      	ldr	r3, [r5, #0]
 80185de:	4629      	mov	r1, r5
 80185e0:	a802      	add	r0, sp, #8
 80185e2:	68db      	ldr	r3, [r3, #12]
 80185e4:	4798      	blx	r3
 80185e6:	4628      	mov	r0, r5
 80185e8:	f7ff ff60 	bl	80184ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80185ec:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80185f0:	4407      	add	r7, r0
 80185f2:	4628      	mov	r0, r5
 80185f4:	f7ff ff6e 	bl	80184d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80185f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80185fc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018600:	b23f      	sxth	r7, r7
 8018602:	4418      	add	r0, r3
 8018604:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018608:	4621      	mov	r1, r4
 801860a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801860e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018612:	4630      	mov	r0, r6
 8018614:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018618:	f8ad 7010 	strh.w	r7, [sp, #16]
 801861c:	f7f8 f944 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 8018620:	4628      	mov	r0, r5
 8018622:	f7ff ff27 	bl	8018474 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018626:	ab06      	add	r3, sp, #24
 8018628:	4602      	mov	r2, r0
 801862a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801862e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018632:	4611      	mov	r1, r2
 8018634:	4618      	mov	r0, r3
 8018636:	f7f8 f937 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 801863a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801863e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018642:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018646:	4299      	cmp	r1, r3
 8018648:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801864c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018650:	d10b      	bne.n	801866a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018652:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018656:	4552      	cmp	r2, sl
 8018658:	d107      	bne.n	801866a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801865a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801865e:	455a      	cmp	r2, fp
 8018660:	d103      	bne.n	801866a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018662:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018666:	454a      	cmp	r2, r9
 8018668:	d06d      	beq.n	8018746 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801866a:	f1bb 0f00 	cmp.w	fp, #0
 801866e:	dd65      	ble.n	801873c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018670:	f1b9 0f00 	cmp.w	r9, #0
 8018674:	dd62      	ble.n	801873c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018676:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801867a:	fa1f f08a 	uxth.w	r0, sl
 801867e:	4552      	cmp	r2, sl
 8018680:	9000      	str	r0, [sp, #0]
 8018682:	da12      	bge.n	80186aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018684:	9301      	str	r3, [sp, #4]
 8018686:	9b00      	ldr	r3, [sp, #0]
 8018688:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801868c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018690:	1a9a      	subs	r2, r3, r2
 8018692:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018696:	4631      	mov	r1, r6
 8018698:	f8ad 0014 	strh.w	r0, [sp, #20]
 801869c:	4640      	mov	r0, r8
 801869e:	f8ad 2016 	strh.w	r2, [sp, #22]
 80186a2:	69ea      	ldr	r2, [r5, #28]
 80186a4:	f7ff ff7a 	bl	801859c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80186a8:	9b01      	ldr	r3, [sp, #4]
 80186aa:	f9b4 2000 	ldrsh.w	r2, [r4]
 80186ae:	b29f      	uxth	r7, r3
 80186b0:	429a      	cmp	r2, r3
 80186b2:	da0d      	bge.n	80186d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80186b4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80186b8:	1aba      	subs	r2, r7, r2
 80186ba:	f8ad a012 	strh.w	sl, [sp, #18]
 80186be:	4631      	mov	r1, r6
 80186c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80186c4:	4640      	mov	r0, r8
 80186c6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80186ca:	69ea      	ldr	r2, [r5, #28]
 80186cc:	f7ff ff66 	bl	801859c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80186d0:	8822      	ldrh	r2, [r4, #0]
 80186d2:	445f      	add	r7, fp
 80186d4:	88a3      	ldrh	r3, [r4, #4]
 80186d6:	b2bf      	uxth	r7, r7
 80186d8:	4413      	add	r3, r2
 80186da:	b23a      	sxth	r2, r7
 80186dc:	b29b      	uxth	r3, r3
 80186de:	b219      	sxth	r1, r3
 80186e0:	4291      	cmp	r1, r2
 80186e2:	dd0d      	ble.n	8018700 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80186e4:	1bdb      	subs	r3, r3, r7
 80186e6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80186ea:	f8ad a012 	strh.w	sl, [sp, #18]
 80186ee:	4631      	mov	r1, r6
 80186f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80186f4:	4640      	mov	r0, r8
 80186f6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80186fa:	69ea      	ldr	r2, [r5, #28]
 80186fc:	f7ff ff4e 	bl	801859c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018700:	88e2      	ldrh	r2, [r4, #6]
 8018702:	8863      	ldrh	r3, [r4, #2]
 8018704:	4413      	add	r3, r2
 8018706:	9a00      	ldr	r2, [sp, #0]
 8018708:	444a      	add	r2, r9
 801870a:	b29b      	uxth	r3, r3
 801870c:	fa1f f982 	uxth.w	r9, r2
 8018710:	b219      	sxth	r1, r3
 8018712:	fa0f f289 	sxth.w	r2, r9
 8018716:	428a      	cmp	r2, r1
 8018718:	da15      	bge.n	8018746 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801871a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801871e:	eba3 0309 	sub.w	r3, r3, r9
 8018722:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018726:	f8ad 1014 	strh.w	r1, [sp, #20]
 801872a:	4631      	mov	r1, r6
 801872c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018730:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018734:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018738:	69ea      	ldr	r2, [r5, #28]
 801873a:	e001      	b.n	8018740 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801873c:	69ea      	ldr	r2, [r5, #28]
 801873e:	4621      	mov	r1, r4
 8018740:	4640      	mov	r0, r8
 8018742:	f7ff ff2b 	bl	801859c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018746:	4628      	mov	r0, r5
 8018748:	f7ff fe94 	bl	8018474 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801874c:	6861      	ldr	r1, [r4, #4]
 801874e:	4602      	mov	r2, r0
 8018750:	4633      	mov	r3, r6
 8018752:	6820      	ldr	r0, [r4, #0]
 8018754:	c303      	stmia	r3!, {r0, r1}
 8018756:	4611      	mov	r1, r2
 8018758:	4630      	mov	r0, r6
 801875a:	f7f8 f8a5 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 801875e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018762:	2b00      	cmp	r3, #0
 8018764:	f77f af33 	ble.w	80185ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018768:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801876c:	2b00      	cmp	r3, #0
 801876e:	f77f af2e 	ble.w	80185ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018772:	4628      	mov	r0, r5
 8018774:	f7ff fe9a 	bl	80184ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018778:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801877c:	1a18      	subs	r0, r3, r0
 801877e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018782:	4628      	mov	r0, r5
 8018784:	f7ff fea6 	bl	80184d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018788:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801878c:	4631      	mov	r1, r6
 801878e:	1a18      	subs	r0, r3, r0
 8018790:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018794:	4628      	mov	r0, r5
 8018796:	682b      	ldr	r3, [r5, #0]
 8018798:	689b      	ldr	r3, [r3, #8]
 801879a:	4798      	blx	r3
 801879c:	e717      	b.n	80185ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801879e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801879e:	b570      	push	{r4, r5, r6, lr}
 80187a0:	1d06      	adds	r6, r0, #4
 80187a2:	b086      	sub	sp, #24
 80187a4:	460c      	mov	r4, r1
 80187a6:	2300      	movs	r3, #0
 80187a8:	4631      	mov	r1, r6
 80187aa:	4605      	mov	r5, r0
 80187ac:	a802      	add	r0, sp, #8
 80187ae:	9301      	str	r3, [sp, #4]
 80187b0:	f7ff f8a6 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80187b4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80187b8:	8822      	ldrh	r2, [r4, #0]
 80187ba:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80187be:	1ad2      	subs	r2, r2, r3
 80187c0:	8863      	ldrh	r3, [r4, #2]
 80187c2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80187c6:	1a5b      	subs	r3, r3, r1
 80187c8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80187cc:	f8ad 2010 	strh.w	r2, [sp, #16]
 80187d0:	aa01      	add	r2, sp, #4
 80187d2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80187d6:	4630      	mov	r0, r6
 80187d8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80187dc:	a904      	add	r1, sp, #16
 80187de:	f8ad 3012 	strh.w	r3, [sp, #18]
 80187e2:	f7f8 f939 	bl	8010a58 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80187e6:	9a01      	ldr	r2, [sp, #4]
 80187e8:	b11a      	cbz	r2, 80187f2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80187ea:	4621      	mov	r1, r4
 80187ec:	4628      	mov	r0, r5
 80187ee:	f7ff fed5 	bl	801859c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80187f2:	b006      	add	sp, #24
 80187f4:	bd70      	pop	{r4, r5, r6, pc}

080187f6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80187f6:	4602      	mov	r2, r0
 80187f8:	b530      	push	{r4, r5, lr}
 80187fa:	4604      	mov	r4, r0
 80187fc:	b085      	sub	sp, #20
 80187fe:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018802:	460d      	mov	r5, r1
 8018804:	466b      	mov	r3, sp
 8018806:	6851      	ldr	r1, [r2, #4]
 8018808:	c303      	stmia	r3!, {r0, r1}
 801880a:	4629      	mov	r1, r5
 801880c:	4668      	mov	r0, sp
 801880e:	f7f8 f84b 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 8018812:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018816:	b12b      	cbz	r3, 8018824 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018818:	4669      	mov	r1, sp
 801881a:	4620      	mov	r0, r4
 801881c:	f7ff ffbf 	bl	801879e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018820:	b005      	add	sp, #20
 8018822:	bd30      	pop	{r4, r5, pc}
 8018824:	3404      	adds	r4, #4
 8018826:	a802      	add	r0, sp, #8
 8018828:	4621      	mov	r1, r4
 801882a:	f7ff f869 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801882e:	f8bd 3000 	ldrh.w	r3, [sp]
 8018832:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018836:	4669      	mov	r1, sp
 8018838:	4620      	mov	r0, r4
 801883a:	1a9b      	subs	r3, r3, r2
 801883c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018840:	f8ad 3000 	strh.w	r3, [sp]
 8018844:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018848:	1a9b      	subs	r3, r3, r2
 801884a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801884e:	f7f8 f8ca 	bl	80109e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8018852:	e7e5      	b.n	8018820 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08018854 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018854:	460b      	mov	r3, r1
 8018856:	680a      	ldr	r2, [r1, #0]
 8018858:	1d01      	adds	r1, r0, #4
 801885a:	6992      	ldr	r2, [r2, #24]
 801885c:	4618      	mov	r0, r3
 801885e:	4710      	bx	r2

08018860 <_ZN8touchgfx12TextProviderC1Ev>:
 8018860:	b538      	push	{r3, r4, r5, lr}
 8018862:	2500      	movs	r5, #0
 8018864:	2302      	movs	r3, #2
 8018866:	4604      	mov	r4, r0
 8018868:	220e      	movs	r2, #14
 801886a:	7403      	strb	r3, [r0, #16]
 801886c:	4629      	mov	r1, r5
 801886e:	6145      	str	r5, [r0, #20]
 8018870:	7605      	strb	r5, [r0, #24]
 8018872:	83c5      	strh	r5, [r0, #30]
 8018874:	8405      	strh	r5, [r0, #32]
 8018876:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8018878:	8705      	strh	r5, [r0, #56]	@ 0x38
 801887a:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801887c:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8018880:	e9c0 5500 	strd	r5, r5, [r0]
 8018884:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8018888:	304c      	adds	r0, #76	@ 0x4c
 801888a:	f00c ffe5 	bl	8025858 <memset>
 801888e:	2301      	movs	r3, #1
 8018890:	4620      	mov	r0, r4
 8018892:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8018896:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801889a:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801889e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 80188a2:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 80188a6:	f7ec fed3 	bl	8005650 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80188aa:	4620      	mov	r0, r4
 80188ac:	bd38      	pop	{r3, r4, r5, pc}

080188ae <_ZN8touchgfx12TextProvider11endOfStringEv>:
 80188ae:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80188b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80188b4:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80188b6:	fab0 f080 	clz	r0, r0
 80188ba:	0940      	lsrs	r0, r0, #5
 80188bc:	4770      	bx	lr

080188be <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80188be:	b530      	push	{r4, r5, lr}
 80188c0:	2500      	movs	r5, #0
 80188c2:	2401      	movs	r4, #1
 80188c4:	6843      	ldr	r3, [r0, #4]
 80188c6:	b913      	cbnz	r3, 80188ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80188c8:	6803      	ldr	r3, [r0, #0]
 80188ca:	b313      	cbz	r3, 8018912 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80188cc:	6043      	str	r3, [r0, #4]
 80188ce:	7e03      	ldrb	r3, [r0, #24]
 80188d0:	b143      	cbz	r3, 80188e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80188d2:	6943      	ldr	r3, [r0, #20]
 80188d4:	b12b      	cbz	r3, 80188e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80188d6:	881a      	ldrh	r2, [r3, #0]
 80188d8:	b11a      	cbz	r2, 80188e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80188da:	1c9a      	adds	r2, r3, #2
 80188dc:	6142      	str	r2, [r0, #20]
 80188de:	8818      	ldrh	r0, [r3, #0]
 80188e0:	bd30      	pop	{r4, r5, pc}
 80188e2:	7605      	strb	r5, [r0, #24]
 80188e4:	6843      	ldr	r3, [r0, #4]
 80188e6:	8819      	ldrh	r1, [r3, #0]
 80188e8:	b199      	cbz	r1, 8018912 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80188ea:	1c9a      	adds	r2, r3, #2
 80188ec:	2902      	cmp	r1, #2
 80188ee:	6042      	str	r2, [r0, #4]
 80188f0:	d1f5      	bne.n	80188de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80188f2:	7c03      	ldrb	r3, [r0, #16]
 80188f4:	2b01      	cmp	r3, #1
 80188f6:	d8e5      	bhi.n	80188c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80188f8:	1c5a      	adds	r2, r3, #1
 80188fa:	3302      	adds	r3, #2
 80188fc:	7402      	strb	r2, [r0, #16]
 80188fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8018902:	6143      	str	r3, [r0, #20]
 8018904:	2b00      	cmp	r3, #0
 8018906:	d0dd      	beq.n	80188c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018908:	881b      	ldrh	r3, [r3, #0]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d0da      	beq.n	80188c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801890e:	7604      	strb	r4, [r0, #24]
 8018910:	e7d8      	b.n	80188c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018912:	2000      	movs	r0, #0
 8018914:	e7e4      	b.n	80188e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08018916 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8018916:	6001      	str	r1, [r0, #0]
 8018918:	2100      	movs	r1, #0
 801891a:	b430      	push	{r4, r5}
 801891c:	6041      	str	r1, [r0, #4]
 801891e:	6815      	ldr	r5, [r2, #0]
 8018920:	6085      	str	r5, [r0, #8]
 8018922:	6852      	ldr	r2, [r2, #4]
 8018924:	6443      	str	r3, [r0, #68]	@ 0x44
 8018926:	9b02      	ldr	r3, [sp, #8]
 8018928:	60c2      	str	r2, [r0, #12]
 801892a:	7401      	strb	r1, [r0, #16]
 801892c:	6141      	str	r1, [r0, #20]
 801892e:	7601      	strb	r1, [r0, #24]
 8018930:	8701      	strh	r1, [r0, #56]	@ 0x38
 8018932:	8401      	strh	r1, [r0, #32]
 8018934:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8018938:	6483      	str	r3, [r0, #72]	@ 0x48
 801893a:	bc30      	pop	{r4, r5}
 801893c:	f7ec be88 	b.w	8005650 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08018940 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8018940:	b408      	push	{r3}
 8018942:	b510      	push	{r4, lr}
 8018944:	b085      	sub	sp, #20
 8018946:	ac07      	add	r4, sp, #28
 8018948:	f854 3b04 	ldr.w	r3, [r4], #4
 801894c:	9300      	str	r3, [sp, #0]
 801894e:	4613      	mov	r3, r2
 8018950:	4622      	mov	r2, r4
 8018952:	9403      	str	r4, [sp, #12]
 8018954:	f7ff ffdf 	bl	8018916 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018958:	b005      	add	sp, #20
 801895a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801895e:	b001      	add	sp, #4
 8018960:	4770      	bx	lr

08018962 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8018962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018964:	4605      	mov	r5, r0
 8018966:	4608      	mov	r0, r1
 8018968:	b1f1      	cbz	r1, 80189a8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801896a:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801896e:	460b      	mov	r3, r1
 8018970:	f101 0708 	add.w	r7, r1, #8
 8018974:	4622      	mov	r2, r4
 8018976:	6818      	ldr	r0, [r3, #0]
 8018978:	3308      	adds	r3, #8
 801897a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801897e:	4626      	mov	r6, r4
 8018980:	42bb      	cmp	r3, r7
 8018982:	c603      	stmia	r6!, {r0, r1}
 8018984:	4634      	mov	r4, r6
 8018986:	d1f6      	bne.n	8018976 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018988:	6818      	ldr	r0, [r3, #0]
 801898a:	6030      	str	r0, [r6, #0]
 801898c:	4610      	mov	r0, r2
 801898e:	889b      	ldrh	r3, [r3, #4]
 8018990:	80b3      	strh	r3, [r6, #4]
 8018992:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8018996:	015b      	lsls	r3, r3, #5
 8018998:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801899c:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 80189a0:	430b      	orrs	r3, r1
 80189a2:	425b      	negs	r3, r3
 80189a4:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 80189a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080189aa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80189aa:	b538      	push	{r3, r4, r5, lr}
 80189ac:	460c      	mov	r4, r1
 80189ae:	6811      	ldr	r1, [r2, #0]
 80189b0:	4610      	mov	r0, r2
 80189b2:	68cd      	ldr	r5, [r1, #12]
 80189b4:	4619      	mov	r1, r3
 80189b6:	47a8      	blx	r5
 80189b8:	2800      	cmp	r0, #0
 80189ba:	bf08      	it	eq
 80189bc:	4620      	moveq	r0, r4
 80189be:	bd38      	pop	{r3, r4, r5, pc}

080189c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80189c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189c4:	468c      	mov	ip, r1
 80189c6:	4605      	mov	r5, r0
 80189c8:	4614      	mov	r4, r2
 80189ca:	b942      	cbnz	r2, 80189de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 80189cc:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 80189d0:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 80189d4:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 80189d8:	4620      	mov	r0, r4
 80189da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189de:	7b50      	ldrb	r0, [r2, #13]
 80189e0:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 80189e4:	8893      	ldrh	r3, [r2, #4]
 80189e6:	0106      	lsls	r6, r0, #4
 80189e8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 80189ec:	79e6      	ldrb	r6, [r4, #7]
 80189ee:	4316      	orrs	r6, r2
 80189f0:	185a      	adds	r2, r3, r1
 80189f2:	b291      	uxth	r1, r2
 80189f4:	b2b7      	uxth	r7, r6
 80189f6:	291d      	cmp	r1, #29
 80189f8:	d87f      	bhi.n	8018afa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80189fa:	2201      	movs	r2, #1
 80189fc:	10f6      	asrs	r6, r6, #3
 80189fe:	408a      	lsls	r2, r1
 8018a00:	498b      	ldr	r1, [pc, #556]	@ (8018c30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8018a02:	420a      	tst	r2, r1
 8018a04:	d12e      	bne.n	8018a64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8018a06:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8018a0a:	d076      	beq.n	8018afa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8018a0c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8018a10:	4623      	mov	r3, r4
 8018a12:	f104 0e08 	add.w	lr, r4, #8
 8018a16:	4614      	mov	r4, r2
 8018a18:	6818      	ldr	r0, [r3, #0]
 8018a1a:	3308      	adds	r3, #8
 8018a1c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018a20:	4694      	mov	ip, r2
 8018a22:	4573      	cmp	r3, lr
 8018a24:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018a28:	4662      	mov	r2, ip
 8018a2a:	d1f5      	bne.n	8018a18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8018a2c:	6818      	ldr	r0, [r3, #0]
 8018a2e:	f8cc 0000 	str.w	r0, [ip]
 8018a32:	889b      	ldrh	r3, [r3, #4]
 8018a34:	f8ac 3004 	strh.w	r3, [ip, #4]
 8018a38:	b2b3      	uxth	r3, r6
 8018a3a:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8018a3e:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8018a42:	1aca      	subs	r2, r1, r3
 8018a44:	1bcf      	subs	r7, r1, r7
 8018a46:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8018a4a:	b292      	uxth	r2, r2
 8018a4c:	1afb      	subs	r3, r7, r3
 8018a4e:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8018a52:	10d2      	asrs	r2, r2, #3
 8018a54:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8018a58:	4302      	orrs	r2, r0
 8018a5a:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8018a5e:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8018a62:	e7b9      	b.n	80189d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8018a64:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8018a68:	4623      	mov	r3, r4
 8018a6a:	f104 0808 	add.w	r8, r4, #8
 8018a6e:	4614      	mov	r4, r2
 8018a70:	6818      	ldr	r0, [r3, #0]
 8018a72:	3308      	adds	r3, #8
 8018a74:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018a78:	4696      	mov	lr, r2
 8018a7a:	4543      	cmp	r3, r8
 8018a7c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018a80:	4672      	mov	r2, lr
 8018a82:	d1f5      	bne.n	8018a70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8018a84:	6818      	ldr	r0, [r3, #0]
 8018a86:	f8ce 0000 	str.w	r0, [lr]
 8018a8a:	889b      	ldrh	r3, [r3, #4]
 8018a8c:	f8ae 3004 	strh.w	r3, [lr, #4]
 8018a90:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8018a92:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8018a96:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8018a98:	f640 6333 	movw	r3, #3635	@ 0xe33
 8018a9c:	4299      	cmp	r1, r3
 8018a9e:	d111      	bne.n	8018ac4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8018aa0:	f8dc 3000 	ldr.w	r3, [ip]
 8018aa4:	4660      	mov	r0, ip
 8018aa6:	68db      	ldr	r3, [r3, #12]
 8018aa8:	4798      	blx	r3
 8018aaa:	7b41      	ldrb	r1, [r0, #13]
 8018aac:	00cb      	lsls	r3, r1, #3
 8018aae:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018ab2:	7a03      	ldrb	r3, [r0, #8]
 8018ab4:	4313      	orrs	r3, r2
 8018ab6:	064a      	lsls	r2, r1, #25
 8018ab8:	bf44      	itt	mi
 8018aba:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018abe:	b21b      	sxthmi	r3, r3
 8018ac0:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018ac4:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8018ac8:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8018acc:	443b      	add	r3, r7
 8018ace:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018ad2:	4433      	add	r3, r6
 8018ad4:	b29b      	uxth	r3, r3
 8018ad6:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018ada:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8018ade:	10db      	asrs	r3, r3, #3
 8018ae0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018ae4:	4313      	orrs	r3, r2
 8018ae6:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8018aea:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8018aee:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8018af2:	1a9b      	subs	r3, r3, r2
 8018af4:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8018af8:	e76e      	b.n	80189d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8018afa:	f023 0204 	bic.w	r2, r3, #4
 8018afe:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8018b02:	428a      	cmp	r2, r1
 8018b04:	d003      	beq.n	8018b0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8018b06:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8018b0a:	4293      	cmp	r3, r2
 8018b0c:	d138      	bne.n	8018b80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8018b0e:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8018b12:	4622      	mov	r2, r4
 8018b14:	f104 0808 	add.w	r8, r4, #8
 8018b18:	4634      	mov	r4, r6
 8018b1a:	6810      	ldr	r0, [r2, #0]
 8018b1c:	3208      	adds	r2, #8
 8018b1e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8018b22:	46b6      	mov	lr, r6
 8018b24:	4542      	cmp	r2, r8
 8018b26:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018b2a:	4676      	mov	r6, lr
 8018b2c:	d1f5      	bne.n	8018b1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 8018b2e:	6810      	ldr	r0, [r2, #0]
 8018b30:	3b01      	subs	r3, #1
 8018b32:	4621      	mov	r1, r4
 8018b34:	f8ce 0000 	str.w	r0, [lr]
 8018b38:	b29b      	uxth	r3, r3
 8018b3a:	8892      	ldrh	r2, [r2, #4]
 8018b3c:	4628      	mov	r0, r5
 8018b3e:	f8ae 2004 	strh.w	r2, [lr, #4]
 8018b42:	4662      	mov	r2, ip
 8018b44:	f7ff ff31 	bl	80189aa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018b48:	7b41      	ldrb	r1, [r0, #13]
 8018b4a:	00cb      	lsls	r3, r1, #3
 8018b4c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018b50:	7a03      	ldrb	r3, [r0, #8]
 8018b52:	0648      	lsls	r0, r1, #25
 8018b54:	ea43 0302 	orr.w	r3, r3, r2
 8018b58:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8018b5c:	bf44      	itt	mi
 8018b5e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018b62:	b21b      	sxthmi	r3, r3
 8018b64:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018b68:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8018b6c:	005b      	lsls	r3, r3, #1
 8018b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018b72:	4313      	orrs	r3, r2
 8018b74:	115a      	asrs	r2, r3, #5
 8018b76:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018b7a:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8018b7e:	e047      	b.n	8018c10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8018b80:	00c2      	lsls	r2, r0, #3
 8018b82:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8018b86:	7a22      	ldrb	r2, [r4, #8]
 8018b88:	430a      	orrs	r2, r1
 8018b8a:	0641      	lsls	r1, r0, #25
 8018b8c:	f640 6109 	movw	r1, #3593	@ 0xe09
 8018b90:	bf44      	itt	mi
 8018b92:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8018b96:	b212      	sxthmi	r2, r2
 8018b98:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8018b9c:	f023 0210 	bic.w	r2, r3, #16
 8018ba0:	428a      	cmp	r2, r1
 8018ba2:	d003      	beq.n	8018bac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8018ba4:	f640 6213 	movw	r2, #3603	@ 0xe13
 8018ba8:	4293      	cmp	r3, r2
 8018baa:	d13e      	bne.n	8018c2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8018bac:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8018bb0:	f104 0808 	add.w	r8, r4, #8
 8018bb4:	4696      	mov	lr, r2
 8018bb6:	6820      	ldr	r0, [r4, #0]
 8018bb8:	3408      	adds	r4, #8
 8018bba:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8018bbe:	4616      	mov	r6, r2
 8018bc0:	4544      	cmp	r4, r8
 8018bc2:	c603      	stmia	r6!, {r0, r1}
 8018bc4:	4632      	mov	r2, r6
 8018bc6:	d1f6      	bne.n	8018bb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8018bc8:	6820      	ldr	r0, [r4, #0]
 8018bca:	6030      	str	r0, [r6, #0]
 8018bcc:	4628      	mov	r0, r5
 8018bce:	88a1      	ldrh	r1, [r4, #4]
 8018bd0:	4674      	mov	r4, lr
 8018bd2:	80b1      	strh	r1, [r6, #4]
 8018bd4:	4671      	mov	r1, lr
 8018bd6:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8018bda:	0076      	lsls	r6, r6, #1
 8018bdc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8018be0:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8018be4:	4316      	orrs	r6, r2
 8018be6:	f640 6213 	movw	r2, #3603	@ 0xe13
 8018bea:	4293      	cmp	r3, r2
 8018bec:	4662      	mov	r2, ip
 8018bee:	bf16      	itet	ne
 8018bf0:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018bf4:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8018bf8:	b29b      	uxthne	r3, r3
 8018bfa:	f7ff fed6 	bl	80189aa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018bfe:	7b43      	ldrb	r3, [r0, #13]
 8018c00:	7a82      	ldrb	r2, [r0, #10]
 8018c02:	005b      	lsls	r3, r3, #1
 8018c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018c08:	4313      	orrs	r3, r2
 8018c0a:	1af6      	subs	r6, r6, r3
 8018c0c:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8018c10:	7b61      	ldrb	r1, [r4, #13]
 8018c12:	00cb      	lsls	r3, r1, #3
 8018c14:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018c18:	7a23      	ldrb	r3, [r4, #8]
 8018c1a:	4313      	orrs	r3, r2
 8018c1c:	064a      	lsls	r2, r1, #25
 8018c1e:	bf44      	itt	mi
 8018c20:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018c24:	b21b      	sxthmi	r3, r3
 8018c26:	1bdb      	subs	r3, r3, r7
 8018c28:	e719      	b.n	8018a5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	e7a5      	b.n	8018b7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8018c2e:	bf00      	nop
 8018c30:	3fc00079 	.word	0x3fc00079

08018c34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c38:	4604      	mov	r4, r0
 8018c3a:	b942      	cbnz	r2, 8018c4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018c3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018c40:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8018c44:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8018c48:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8018c4c:	e047      	b.n	8018cde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018c4e:	7b51      	ldrb	r1, [r2, #13]
 8018c50:	8893      	ldrh	r3, [r2, #4]
 8018c52:	010d      	lsls	r5, r1, #4
 8018c54:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8018c58:	79d5      	ldrb	r5, [r2, #7]
 8018c5a:	4305      	orrs	r5, r0
 8018c5c:	2d04      	cmp	r5, #4
 8018c5e:	bfcc      	ite	gt
 8018c60:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018c64:	f04f 0e01 	movle.w	lr, #1
 8018c68:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8018c6c:	f200 80ab 	bhi.w	8018dc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018c70:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8018c74:	4283      	cmp	r3, r0
 8018c76:	d216      	bcs.n	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c78:	f240 605b 	movw	r0, #1627	@ 0x65b
 8018c7c:	4283      	cmp	r3, r0
 8018c7e:	d859      	bhi.n	8018d34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8018c80:	f240 6057 	movw	r0, #1623	@ 0x657
 8018c84:	4283      	cmp	r3, r0
 8018c86:	d20e      	bcs.n	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c88:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8018c8c:	d24a      	bcs.n	8018d24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8018c8e:	f240 604e 	movw	r0, #1614	@ 0x64e
 8018c92:	4283      	cmp	r3, r0
 8018c94:	d207      	bcs.n	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c96:	f240 601a 	movw	r0, #1562	@ 0x61a
 8018c9a:	4283      	cmp	r3, r0
 8018c9c:	d02a      	beq.n	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c9e:	d821      	bhi.n	8018ce4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8018ca0:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8018ca4:	d35b      	bcc.n	8018d5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018ca6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8018caa:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018cae:	f040 80d0 	bne.w	8018e52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018cb2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8018cb6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018cba:	f040 80ca 	bne.w	8018e52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018cbe:	00cb      	lsls	r3, r1, #3
 8018cc0:	0649      	lsls	r1, r1, #25
 8018cc2:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018cc6:	7a13      	ldrb	r3, [r2, #8]
 8018cc8:	ea43 0300 	orr.w	r3, r3, r0
 8018ccc:	bf44      	itt	mi
 8018cce:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018cd2:	b21b      	sxthmi	r3, r3
 8018cd4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8018cd8:	1b5d      	subs	r5, r3, r5
 8018cda:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018cde:	4610      	mov	r0, r2
 8018ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ce4:	f240 604b 	movw	r0, #1611	@ 0x64b
 8018ce8:	4283      	cmp	r3, r0
 8018cea:	d338      	bcc.n	8018d5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018cec:	f240 604c 	movw	r0, #1612	@ 0x64c
 8018cf0:	4283      	cmp	r3, r0
 8018cf2:	d9d8      	bls.n	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018cf4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8018cf8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8018cfc:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018d00:	f040 80f3 	bne.w	8018eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018d04:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018d08:	f040 80ef 	bne.w	8018eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018d0c:	00cb      	lsls	r3, r1, #3
 8018d0e:	064e      	lsls	r6, r1, #25
 8018d10:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018d14:	7a13      	ldrb	r3, [r2, #8]
 8018d16:	ea43 0300 	orr.w	r3, r3, r0
 8018d1a:	bf44      	itt	mi
 8018d1c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018d20:	b21b      	sxthmi	r3, r3
 8018d22:	e7d9      	b.n	8018cd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018d24:	f240 6054 	movw	r0, #1620	@ 0x654
 8018d28:	4283      	cmp	r3, r0
 8018d2a:	d8e3      	bhi.n	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018d2c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8018d30:	d9e0      	bls.n	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018d32:	e7b8      	b.n	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018d34:	f240 6074 	movw	r0, #1652	@ 0x674
 8018d38:	4283      	cmp	r3, r0
 8018d3a:	d0b4      	beq.n	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018d3c:	d82d      	bhi.n	8018d9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8018d3e:	f240 605e 	movw	r0, #1630	@ 0x65e
 8018d42:	4283      	cmp	r3, r0
 8018d44:	d804      	bhi.n	8018d50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8018d46:	f240 605d 	movw	r0, #1629	@ 0x65d
 8018d4a:	4283      	cmp	r3, r0
 8018d4c:	d3d2      	bcc.n	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018d4e:	e7aa      	b.n	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018d50:	f240 605f 	movw	r0, #1631	@ 0x65f
 8018d54:	4283      	cmp	r3, r0
 8018d56:	d0cd      	beq.n	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018d58:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8018d5c:	d0a3      	beq.n	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018d5e:	00cb      	lsls	r3, r1, #3
 8018d60:	0649      	lsls	r1, r1, #25
 8018d62:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018d66:	7a13      	ldrb	r3, [r2, #8]
 8018d68:	ea43 0300 	orr.w	r3, r3, r0
 8018d6c:	bf44      	itt	mi
 8018d6e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018d72:	b21b      	sxthmi	r3, r3
 8018d74:	1b5d      	subs	r5, r3, r5
 8018d76:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8018d7a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018d7e:	7b53      	ldrb	r3, [r2, #13]
 8018d80:	015b      	lsls	r3, r3, #5
 8018d82:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8018d86:	7993      	ldrb	r3, [r2, #6]
 8018d88:	430b      	orrs	r3, r1
 8018d8a:	2105      	movs	r1, #5
 8018d8c:	005b      	lsls	r3, r3, #1
 8018d8e:	fb93 f3f1 	sdiv	r3, r3, r1
 8018d92:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018d96:	440b      	add	r3, r1
 8018d98:	e756      	b.n	8018c48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018d9a:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8018d9e:	4283      	cmp	r3, r0
 8018da0:	d809      	bhi.n	8018db6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8018da2:	f240 60df 	movw	r0, #1759	@ 0x6df
 8018da6:	4283      	cmp	r3, r0
 8018da8:	f4bf af7d 	bcs.w	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018dac:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8018db0:	2b05      	cmp	r3, #5
 8018db2:	d8d4      	bhi.n	8018d5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018db4:	e777      	b.n	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018db6:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8018dba:	4283      	cmp	r3, r0
 8018dbc:	d09a      	beq.n	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018dbe:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8018dc2:	4283      	cmp	r3, r0
 8018dc4:	e7ca      	b.n	8018d5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018dc6:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8018dca:	d22b      	bcs.n	8018e24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8018dcc:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8018dd0:	4283      	cmp	r3, r0
 8018dd2:	d28f      	bcs.n	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018dd4:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018dd8:	4283      	cmp	r3, r0
 8018dda:	d816      	bhi.n	8018e0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8018ddc:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8018de0:	4283      	cmp	r3, r0
 8018de2:	f4bf af60 	bcs.w	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018de6:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8018dea:	4283      	cmp	r3, r0
 8018dec:	d80a      	bhi.n	8018e04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8018dee:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8018df2:	4283      	cmp	r3, r0
 8018df4:	f4bf af57 	bcs.w	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018df8:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8018dfc:	4283      	cmp	r3, r0
 8018dfe:	f43f af79 	beq.w	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018e02:	e7ac      	b.n	8018d5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018e04:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8018e08:	e7f8      	b.n	8018dfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8018e0a:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8018e0e:	4283      	cmp	r3, r0
 8018e10:	d802      	bhi.n	8018e18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8018e12:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018e16:	e798      	b.n	8018d4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018e18:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8018e1c:	4283      	cmp	r3, r0
 8018e1e:	f47f af42 	bne.w	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018e22:	e767      	b.n	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018e24:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8018e28:	4283      	cmp	r3, r0
 8018e2a:	f43f af63 	beq.w	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018e2e:	d802      	bhi.n	8018e36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018e30:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8018e34:	e7f2      	b.n	8018e1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018e36:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8018e3a:	4283      	cmp	r3, r0
 8018e3c:	d805      	bhi.n	8018e4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8018e3e:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8018e42:	4283      	cmp	r3, r0
 8018e44:	f4ff af2f 	bcc.w	8018ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018e48:	e754      	b.n	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018e4a:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8018e4e:	4283      	cmp	r3, r0
 8018e50:	e7af      	b.n	8018db2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8018e52:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8018e56:	4617      	mov	r7, r2
 8018e58:	f102 0808 	add.w	r8, r2, #8
 8018e5c:	4666      	mov	r6, ip
 8018e5e:	6838      	ldr	r0, [r7, #0]
 8018e60:	3708      	adds	r7, #8
 8018e62:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018e66:	46e6      	mov	lr, ip
 8018e68:	4547      	cmp	r7, r8
 8018e6a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018e6e:	46f4      	mov	ip, lr
 8018e70:	d1f5      	bne.n	8018e5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8018e72:	6838      	ldr	r0, [r7, #0]
 8018e74:	f8ce 0000 	str.w	r0, [lr]
 8018e78:	88b9      	ldrh	r1, [r7, #4]
 8018e7a:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018e7e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8018e82:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018e86:	d009      	beq.n	8018e9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8018e88:	7b51      	ldrb	r1, [r2, #13]
 8018e8a:	7992      	ldrb	r2, [r2, #6]
 8018e8c:	0149      	lsls	r1, r1, #5
 8018e8e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8018e92:	4311      	orrs	r1, r2
 8018e94:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018e98:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8018e9c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018ea0:	b2ad      	uxth	r5, r5
 8018ea2:	d00d      	beq.n	8018ec0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8018ea4:	442b      	add	r3, r5
 8018ea6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8018eaa:	b29b      	uxth	r3, r3
 8018eac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018eb0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8018eb4:	10db      	asrs	r3, r3, #3
 8018eb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018eba:	4313      	orrs	r3, r2
 8018ebc:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8018ec0:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8018ec4:	00cb      	lsls	r3, r1, #3
 8018ec6:	064f      	lsls	r7, r1, #25
 8018ec8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018ecc:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8018ed0:	ea43 0302 	orr.w	r3, r3, r2
 8018ed4:	bf44      	itt	mi
 8018ed6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018eda:	b21b      	sxthmi	r3, r3
 8018edc:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8018ee0:	1b5b      	subs	r3, r3, r5
 8018ee2:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8018ee6:	4632      	mov	r2, r6
 8018ee8:	e6f9      	b.n	8018cde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018eea:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8018eee:	4617      	mov	r7, r2
 8018ef0:	f102 0908 	add.w	r9, r2, #8
 8018ef4:	4666      	mov	r6, ip
 8018ef6:	6838      	ldr	r0, [r7, #0]
 8018ef8:	3708      	adds	r7, #8
 8018efa:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018efe:	46e0      	mov	r8, ip
 8018f00:	454f      	cmp	r7, r9
 8018f02:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018f06:	46c4      	mov	ip, r8
 8018f08:	d1f5      	bne.n	8018ef6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8018f0a:	6838      	ldr	r0, [r7, #0]
 8018f0c:	f8c8 0000 	str.w	r0, [r8]
 8018f10:	88b9      	ldrh	r1, [r7, #4]
 8018f12:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018f16:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8018f1a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018f1e:	d009      	beq.n	8018f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8018f20:	7b51      	ldrb	r1, [r2, #13]
 8018f22:	7992      	ldrb	r2, [r2, #6]
 8018f24:	0149      	lsls	r1, r1, #5
 8018f26:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8018f2a:	4311      	orrs	r1, r2
 8018f2c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018f30:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8018f34:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018f38:	d00e      	beq.n	8018f58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8018f3a:	eba3 030e 	sub.w	r3, r3, lr
 8018f3e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8018f42:	b29b      	uxth	r3, r3
 8018f44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018f48:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8018f4c:	10db      	asrs	r3, r3, #3
 8018f4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018f52:	4313      	orrs	r3, r2
 8018f54:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8018f58:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8018f5c:	00cb      	lsls	r3, r1, #3
 8018f5e:	0648      	lsls	r0, r1, #25
 8018f60:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018f64:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8018f68:	ea43 0302 	orr.w	r3, r3, r2
 8018f6c:	bf44      	itt	mi
 8018f6e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018f72:	b21b      	sxthmi	r3, r3
 8018f74:	1b5d      	subs	r5, r3, r5
 8018f76:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018f7a:	e7b4      	b.n	8018ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08018f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f80:	461e      	mov	r6, r3
 8018f82:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018f84:	4604      	mov	r4, r0
 8018f86:	4617      	mov	r7, r2
 8018f88:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018f8c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8018f90:	f7ec fb1c 	bl	80055cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018f94:	4605      	mov	r5, r0
 8018f96:	b918      	cbnz	r0, 8018fa0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8018f98:	6030      	str	r0, [r6, #0]
 8018f9a:	4628      	mov	r0, r5
 8018f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fa0:	683b      	ldr	r3, [r7, #0]
 8018fa2:	4601      	mov	r1, r0
 8018fa4:	4638      	mov	r0, r7
 8018fa6:	68db      	ldr	r3, [r3, #12]
 8018fa8:	4798      	blx	r3
 8018faa:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8018fae:	4602      	mov	r2, r0
 8018fb0:	6030      	str	r0, [r6, #0]
 8018fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018fb6:	d213      	bcs.n	8018fe0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8018fb8:	4643      	mov	r3, r8
 8018fba:	4639      	mov	r1, r7
 8018fbc:	4620      	mov	r0, r4
 8018fbe:	f7ff fe39 	bl	8018c34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018fc2:	6030      	str	r0, [r6, #0]
 8018fc4:	6833      	ldr	r3, [r6, #0]
 8018fc6:	b143      	cbz	r3, 8018fda <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8018fc8:	7b5a      	ldrb	r2, [r3, #13]
 8018fca:	7a9b      	ldrb	r3, [r3, #10]
 8018fcc:	0052      	lsls	r2, r2, #1
 8018fce:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8018fd2:	4313      	orrs	r3, r2
 8018fd4:	bf0c      	ite	eq
 8018fd6:	2301      	moveq	r3, #1
 8018fd8:	2300      	movne	r3, #0
 8018fda:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8018fde:	e7dc      	b.n	8018f9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8018fe0:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8018fe4:	b29b      	uxth	r3, r3
 8018fe6:	2b7f      	cmp	r3, #127	@ 0x7f
 8018fe8:	d804      	bhi.n	8018ff4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8018fea:	4639      	mov	r1, r7
 8018fec:	4620      	mov	r0, r4
 8018fee:	f7ff fce7 	bl	80189c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018ff2:	e7e6      	b.n	8018fc2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018ff4:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d0e3      	beq.n	8018fc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018ffc:	f640 1302 	movw	r3, #2306	@ 0x902
 8019000:	429d      	cmp	r5, r3
 8019002:	d1df      	bne.n	8018fc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019004:	4601      	mov	r1, r0
 8019006:	4620      	mov	r0, r4
 8019008:	f7ff fcab 	bl	8018962 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801900c:	e7d9      	b.n	8018fc2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801900e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801900e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019012:	461e      	mov	r6, r3
 8019014:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019016:	4604      	mov	r4, r0
 8019018:	4617      	mov	r7, r2
 801901a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801901e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8019022:	f7ec fad3 	bl	80055cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019026:	4605      	mov	r5, r0
 8019028:	b918      	cbnz	r0, 8019032 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801902a:	6030      	str	r0, [r6, #0]
 801902c:	4628      	mov	r0, r5
 801902e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019032:	683b      	ldr	r3, [r7, #0]
 8019034:	4601      	mov	r1, r0
 8019036:	4638      	mov	r0, r7
 8019038:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801903c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019040:	47c8      	blx	r9
 8019042:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8019046:	4602      	mov	r2, r0
 8019048:	6030      	str	r0, [r6, #0]
 801904a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801904e:	d213      	bcs.n	8019078 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8019050:	4643      	mov	r3, r8
 8019052:	4639      	mov	r1, r7
 8019054:	4620      	mov	r0, r4
 8019056:	f7ff fded 	bl	8018c34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801905a:	6030      	str	r0, [r6, #0]
 801905c:	6833      	ldr	r3, [r6, #0]
 801905e:	b143      	cbz	r3, 8019072 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8019060:	7b5a      	ldrb	r2, [r3, #13]
 8019062:	7a9b      	ldrb	r3, [r3, #10]
 8019064:	0052      	lsls	r2, r2, #1
 8019066:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801906a:	4313      	orrs	r3, r2
 801906c:	bf0c      	ite	eq
 801906e:	2301      	moveq	r3, #1
 8019070:	2300      	movne	r3, #0
 8019072:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8019076:	e7d9      	b.n	801902c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8019078:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801907c:	b29b      	uxth	r3, r3
 801907e:	2b7f      	cmp	r3, #127	@ 0x7f
 8019080:	d804      	bhi.n	801908c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8019082:	4639      	mov	r1, r7
 8019084:	4620      	mov	r0, r4
 8019086:	f7ff fc9b 	bl	80189c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801908a:	e7e6      	b.n	801905a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801908c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8019090:	2b00      	cmp	r3, #0
 8019092:	d0e3      	beq.n	801905c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019094:	f640 1302 	movw	r3, #2306	@ 0x902
 8019098:	429d      	cmp	r5, r3
 801909a:	d1df      	bne.n	801905c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801909c:	4601      	mov	r1, r0
 801909e:	4620      	mov	r0, r4
 80190a0:	f7ff fc5f 	bl	8018962 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80190a4:	e7d9      	b.n	801905a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080190a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80190a6:	b510      	push	{r4, lr}
 80190a8:	4604      	mov	r4, r0
 80190aa:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 80190ae:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80190b0:	b1e1      	cbz	r1, 80190ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80190b2:	2b0a      	cmp	r3, #10
 80190b4:	d02d      	beq.n	8019112 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80190b6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80190b8:	3901      	subs	r1, #1
 80190ba:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80190be:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80190c0:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 80190c4:	1c51      	adds	r1, r2, #1
 80190c6:	b289      	uxth	r1, r1
 80190c8:	2901      	cmp	r1, #1
 80190ca:	bf8a      	itet	hi
 80190cc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80190d0:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 80190d2:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 80190d4:	1c5a      	adds	r2, r3, #1
 80190d6:	8722      	strh	r2, [r4, #56]	@ 0x38
 80190d8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80190da:	4413      	add	r3, r2
 80190dc:	b29b      	uxth	r3, r3
 80190de:	2b09      	cmp	r3, #9
 80190e0:	bf88      	it	hi
 80190e2:	3b0a      	subhi	r3, #10
 80190e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80190e8:	8458      	strh	r0, [r3, #34]	@ 0x22
 80190ea:	e7de      	b.n	80190aa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80190ec:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80190ee:	2b0a      	cmp	r3, #10
 80190f0:	d00f      	beq.n	8019112 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80190f2:	4620      	mov	r0, r4
 80190f4:	f7ff fbe3 	bl	80188be <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80190f8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80190fa:	1c5a      	adds	r2, r3, #1
 80190fc:	8722      	strh	r2, [r4, #56]	@ 0x38
 80190fe:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8019100:	4413      	add	r3, r2
 8019102:	b29b      	uxth	r3, r3
 8019104:	2b09      	cmp	r3, #9
 8019106:	bf88      	it	hi
 8019108:	3b0a      	subhi	r3, #10
 801910a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801910e:	8458      	strh	r0, [r3, #34]	@ 0x22
 8019110:	e7ec      	b.n	80190ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8019112:	bd10      	pop	{r4, pc}

08019114 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019114:	b538      	push	{r3, r4, r5, lr}
 8019116:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019118:	4604      	mov	r4, r0
 801911a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801911e:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8019120:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8019122:	3a01      	subs	r2, #1
 8019124:	8702      	strh	r2, [r0, #56]	@ 0x38
 8019126:	1c5a      	adds	r2, r3, #1
 8019128:	b292      	uxth	r2, r2
 801912a:	2a09      	cmp	r2, #9
 801912c:	bf8a      	itet	hi
 801912e:	3b09      	subhi	r3, #9
 8019130:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8019132:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8019134:	f7ff ffb7 	bl	80190a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019138:	8c23      	ldrh	r3, [r4, #32]
 801913a:	2b01      	cmp	r3, #1
 801913c:	bf9c      	itt	ls
 801913e:	3301      	addls	r3, #1
 8019140:	8423      	strhls	r3, [r4, #32]
 8019142:	8be3      	ldrh	r3, [r4, #30]
 8019144:	b90b      	cbnz	r3, 801914a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8019146:	2302      	movs	r3, #2
 8019148:	83e3      	strh	r3, [r4, #30]
 801914a:	8be3      	ldrh	r3, [r4, #30]
 801914c:	4628      	mov	r0, r5
 801914e:	3b01      	subs	r3, #1
 8019150:	b29b      	uxth	r3, r3
 8019152:	83e3      	strh	r3, [r4, #30]
 8019154:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019158:	8365      	strh	r5, [r4, #26]
 801915a:	bd38      	pop	{r3, r4, r5, pc}

0801915c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801915c:	428a      	cmp	r2, r1
 801915e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019162:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8019164:	d932      	bls.n	80191cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8019166:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8019168:	1a54      	subs	r4, r2, r1
 801916a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801916e:	19ee      	adds	r6, r5, r7
 8019170:	fa1f fe84 	uxth.w	lr, r4
 8019174:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8019178:	3e01      	subs	r6, #1
 801917a:	b2b4      	uxth	r4, r6
 801917c:	eba4 090e 	sub.w	r9, r4, lr
 8019180:	fa1f f989 	uxth.w	r9, r9
 8019184:	2c09      	cmp	r4, #9
 8019186:	4626      	mov	r6, r4
 8019188:	bf88      	it	hi
 801918a:	f1a4 060a 	subhi.w	r6, r4, #10
 801918e:	f1bc 0f00 	cmp.w	ip, #0
 8019192:	f104 34ff 	add.w	r4, r4, #4294967295
 8019196:	bf08      	it	eq
 8019198:	f04f 0c02 	moveq.w	ip, #2
 801919c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80191a0:	b2a4      	uxth	r4, r4
 80191a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80191a6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 80191aa:	454c      	cmp	r4, r9
 80191ac:	fa1f fc8c 	uxth.w	ip, ip
 80191b0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80191b4:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 80191b8:	d1e4      	bne.n	8019184 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80191ba:	eba5 050e 	sub.w	r5, r5, lr
 80191be:	eb0e 0408 	add.w	r4, lr, r8
 80191c2:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 80191c6:	8705      	strh	r5, [r0, #56]	@ 0x38
 80191c8:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 80191cc:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80191ce:	250a      	movs	r5, #10
 80191d0:	1a64      	subs	r4, r4, r1
 80191d2:	4439      	add	r1, r7
 80191d4:	b289      	uxth	r1, r1
 80191d6:	8704      	strh	r4, [r0, #56]	@ 0x38
 80191d8:	2909      	cmp	r1, #9
 80191da:	bf88      	it	hi
 80191dc:	390a      	subhi	r1, #10
 80191de:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80191e0:	b18a      	cbz	r2, 8019206 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80191e2:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80191e4:	3a01      	subs	r2, #1
 80191e6:	3101      	adds	r1, #1
 80191e8:	b292      	uxth	r2, r2
 80191ea:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80191ee:	8701      	strh	r1, [r0, #56]	@ 0x38
 80191f0:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80191f2:	b901      	cbnz	r1, 80191f6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80191f4:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80191f6:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80191f8:	3901      	subs	r1, #1
 80191fa:	b289      	uxth	r1, r1
 80191fc:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80191fe:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019202:	844c      	strh	r4, [r1, #34]	@ 0x22
 8019204:	e7ec      	b.n	80191e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8019206:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801920a:	f7ff bf4c 	b.w	80190a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801920e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801920e:	b570      	push	{r4, r5, r6, lr}
 8019210:	2500      	movs	r5, #0
 8019212:	4295      	cmp	r5, r2
 8019214:	d011      	beq.n	801923a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019216:	8bc4      	ldrh	r4, [r0, #30]
 8019218:	f831 6b02 	ldrh.w	r6, [r1], #2
 801921c:	4414      	add	r4, r2
 801921e:	3c01      	subs	r4, #1
 8019220:	1b64      	subs	r4, r4, r5
 8019222:	b2a4      	uxth	r4, r4
 8019224:	2c01      	cmp	r4, #1
 8019226:	bf88      	it	hi
 8019228:	3c02      	subhi	r4, #2
 801922a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801922e:	8b64      	ldrh	r4, [r4, #26]
 8019230:	42b4      	cmp	r4, r6
 8019232:	d117      	bne.n	8019264 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8019234:	3501      	adds	r5, #1
 8019236:	b2ad      	uxth	r5, r5
 8019238:	e7eb      	b.n	8019212 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801923a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801923e:	2400      	movs	r4, #0
 8019240:	4413      	add	r3, r2
 8019242:	b2a2      	uxth	r2, r4
 8019244:	429a      	cmp	r2, r3
 8019246:	da0f      	bge.n	8019268 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019248:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801924a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801924e:	3401      	adds	r4, #1
 8019250:	4432      	add	r2, r6
 8019252:	b292      	uxth	r2, r2
 8019254:	2a09      	cmp	r2, #9
 8019256:	bf88      	it	hi
 8019258:	3a0a      	subhi	r2, #10
 801925a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801925e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8019260:	42aa      	cmp	r2, r5
 8019262:	d0ee      	beq.n	8019242 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8019264:	2000      	movs	r0, #0
 8019266:	bd70      	pop	{r4, r5, r6, pc}
 8019268:	2001      	movs	r0, #1
 801926a:	e7fc      	b.n	8019266 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801926c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801926c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019270:	4605      	mov	r5, r0
 8019272:	4616      	mov	r6, r2
 8019274:	1c8c      	adds	r4, r1, #2
 8019276:	8809      	ldrh	r1, [r1, #0]
 8019278:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801927c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019280:	42b3      	cmp	r3, r6
 8019282:	d124      	bne.n	80192ce <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019284:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019288:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801928c:	f001 070f 	and.w	r7, r1, #15
 8019290:	4652      	mov	r2, sl
 8019292:	f8cd 8000 	str.w	r8, [sp]
 8019296:	464b      	mov	r3, r9
 8019298:	4621      	mov	r1, r4
 801929a:	4628      	mov	r0, r5
 801929c:	f7ff ffb7 	bl	801920e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80192a0:	4683      	mov	fp, r0
 80192a2:	b168      	cbz	r0, 80192c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80192a4:	eb0a 0109 	add.w	r1, sl, r9
 80192a8:	463a      	mov	r2, r7
 80192aa:	4628      	mov	r0, r5
 80192ac:	4441      	add	r1, r8
 80192ae:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80192b2:	4649      	mov	r1, r9
 80192b4:	f7ff ff52 	bl	801915c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80192b8:	4658      	mov	r0, fp
 80192ba:	b003      	add	sp, #12
 80192bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192c0:	eb07 010a 	add.w	r1, r7, sl
 80192c4:	4449      	add	r1, r9
 80192c6:	4441      	add	r1, r8
 80192c8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80192cc:	e7d2      	b.n	8019274 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80192ce:	f04f 0b00 	mov.w	fp, #0
 80192d2:	e7f1      	b.n	80192b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080192d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80192d4:	b570      	push	{r4, r5, r6, lr}
 80192d6:	8810      	ldrh	r0, [r2, #0]
 80192d8:	4298      	cmp	r0, r3
 80192da:	d817      	bhi.n	801930c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80192dc:	1e48      	subs	r0, r1, #1
 80192de:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80192e2:	4298      	cmp	r0, r3
 80192e4:	d312      	bcc.n	801930c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80192e6:	2400      	movs	r4, #0
 80192e8:	428c      	cmp	r4, r1
 80192ea:	d20f      	bcs.n	801930c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80192ec:	1860      	adds	r0, r4, r1
 80192ee:	1040      	asrs	r0, r0, #1
 80192f0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80192f4:	0085      	lsls	r5, r0, #2
 80192f6:	42b3      	cmp	r3, r6
 80192f8:	d902      	bls.n	8019300 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80192fa:	3001      	adds	r0, #1
 80192fc:	b284      	uxth	r4, r0
 80192fe:	e7f3      	b.n	80192e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019300:	d201      	bcs.n	8019306 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8019302:	b281      	uxth	r1, r0
 8019304:	e7f0      	b.n	80192e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019306:	442a      	add	r2, r5
 8019308:	8850      	ldrh	r0, [r2, #2]
 801930a:	bd70      	pop	{r4, r5, r6, pc}
 801930c:	2000      	movs	r0, #0
 801930e:	e7fc      	b.n	801930a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019310 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019314:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8019316:	4604      	mov	r4, r0
 8019318:	260b      	movs	r6, #11
 801931a:	886f      	ldrh	r7, [r5, #2]
 801931c:	087f      	lsrs	r7, r7, #1
 801931e:	3e01      	subs	r6, #1
 8019320:	d013      	beq.n	801934a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019322:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8019324:	462a      	mov	r2, r5
 8019326:	4639      	mov	r1, r7
 8019328:	4620      	mov	r0, r4
 801932a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801932e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8019332:	4643      	mov	r3, r8
 8019334:	f7ff ffce 	bl	80192d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019338:	b138      	cbz	r0, 801934a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801933a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801933e:	4642      	mov	r2, r8
 8019340:	4620      	mov	r0, r4
 8019342:	f7ff ff93 	bl	801926c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019346:	2800      	cmp	r0, #0
 8019348:	d1e9      	bne.n	801931e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801934a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08019350 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019350:	b570      	push	{r4, r5, r6, lr}
 8019352:	694a      	ldr	r2, [r1, #20]
 8019354:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8019356:	684b      	ldr	r3, [r1, #4]
 8019358:	1b54      	subs	r4, r2, r5
 801935a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801935c:	f000 8106 	beq.w	801956c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8019360:	1b9b      	subs	r3, r3, r6
 8019362:	d003      	beq.n	801936c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019364:	4363      	muls	r3, r4
 8019366:	2210      	movs	r2, #16
 8019368:	fb93 f3f2 	sdiv	r3, r3, r2
 801936c:	680c      	ldr	r4, [r1, #0]
 801936e:	698a      	ldr	r2, [r1, #24]
 8019370:	1b65      	subs	r5, r4, r5
 8019372:	f000 80fd 	beq.w	8019570 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8019376:	1b92      	subs	r2, r2, r6
 8019378:	d003      	beq.n	8019382 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801937a:	436a      	muls	r2, r5
 801937c:	2410      	movs	r4, #16
 801937e:	fb92 f2f4 	sdiv	r2, r2, r4
 8019382:	1a9b      	subs	r3, r3, r2
 8019384:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 80195ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8019388:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801938c:	460a      	mov	r2, r1
 801938e:	ee07 3a90 	vmov	s15, r3
 8019392:	f100 040c 	add.w	r4, r0, #12
 8019396:	4603      	mov	r3, r0
 8019398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801939c:	ee67 7a84 	vmul.f32	s15, s15, s8
 80193a0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80193a4:	eeb1 6a43 	vneg.f32	s12, s6
 80193a8:	edd2 7a02 	vldr	s15, [r2, #8]
 80193ac:	3214      	adds	r2, #20
 80193ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80193b2:	ece3 6a01 	vstmia	r3!, {s13}
 80193b6:	429c      	cmp	r4, r3
 80193b8:	ed52 7a02 	vldr	s15, [r2, #-8]
 80193bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80193c0:	edc3 7a02 	vstr	s15, [r3, #8]
 80193c4:	ed52 7a01 	vldr	s15, [r2, #-4]
 80193c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80193cc:	edc3 7a05 	vstr	s15, [r3, #20]
 80193d0:	d1ea      	bne.n	80193a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80193d2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80193d4:	698b      	ldr	r3, [r1, #24]
 80193d6:	edd0 4a02 	vldr	s9, [r0, #8]
 80193da:	1a9b      	subs	r3, r3, r2
 80193dc:	edd0 3a00 	vldr	s7, [r0]
 80193e0:	edd0 6a01 	vldr	s13, [r0, #4]
 80193e4:	ee07 3a90 	vmov	s15, r3
 80193e8:	684b      	ldr	r3, [r1, #4]
 80193ea:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80193ee:	ed90 5a05 	vldr	s10, [r0, #20]
 80193f2:	1a9b      	subs	r3, r3, r2
 80193f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80193f8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80193fc:	ed90 2a03 	vldr	s4, [r0, #12]
 8019400:	ee07 3a10 	vmov	s14, r3
 8019404:	edd0 5a04 	vldr	s11, [r0, #16]
 8019408:	ee67 7a84 	vmul.f32	s15, s15, s8
 801940c:	ed90 1a07 	vldr	s2, [r0, #28]
 8019410:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019414:	edd0 2a06 	vldr	s5, [r0, #24]
 8019418:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801941c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8019420:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019424:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019428:	eee6 7a87 	vfma.f32	s15, s13, s14
 801942c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019430:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8019434:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019436:	694a      	ldr	r2, [r1, #20]
 8019438:	1b13      	subs	r3, r2, r4
 801943a:	ee07 3a10 	vmov	s14, r3
 801943e:	680b      	ldr	r3, [r1, #0]
 8019440:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019444:	1b1b      	subs	r3, r3, r4
 8019446:	ee27 7a04 	vmul.f32	s14, s14, s8
 801944a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801944e:	ee07 3a10 	vmov	s14, r3
 8019452:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019456:	ee27 7a04 	vmul.f32	s14, s14, s8
 801945a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801945e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019462:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8019466:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019468:	698b      	ldr	r3, [r1, #24]
 801946a:	1a9b      	subs	r3, r3, r2
 801946c:	ee06 3a90 	vmov	s13, r3
 8019470:	684b      	ldr	r3, [r1, #4]
 8019472:	1a9b      	subs	r3, r3, r2
 8019474:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019478:	ee07 3a10 	vmov	s14, r3
 801947c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019480:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019484:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019488:	ee27 7a04 	vmul.f32	s14, s14, s8
 801948c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019490:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019494:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8019498:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801949a:	694a      	ldr	r2, [r1, #20]
 801949c:	1b13      	subs	r3, r2, r4
 801949e:	ee07 3a10 	vmov	s14, r3
 80194a2:	680b      	ldr	r3, [r1, #0]
 80194a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80194a8:	1b1b      	subs	r3, r3, r4
 80194aa:	ee27 7a04 	vmul.f32	s14, s14, s8
 80194ae:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80194b2:	ee07 3a10 	vmov	s14, r3
 80194b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80194ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 80194be:	eea5 5a87 	vfma.f32	s10, s11, s14
 80194c2:	edd0 5a08 	vldr	s11, [r0, #32]
 80194c6:	ee31 1a65 	vsub.f32	s2, s2, s11
 80194ca:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80194ce:	ee25 5a06 	vmul.f32	s10, s10, s12
 80194d2:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80194d6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80194d8:	698b      	ldr	r3, [r1, #24]
 80194da:	1a9b      	subs	r3, r3, r2
 80194dc:	ee07 3a10 	vmov	s14, r3
 80194e0:	684b      	ldr	r3, [r1, #4]
 80194e2:	1a9b      	subs	r3, r3, r2
 80194e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80194e8:	ee01 3a90 	vmov	s3, r3
 80194ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 80194f0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80194f4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80194f8:	ee61 1a84 	vmul.f32	s3, s3, s8
 80194fc:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019500:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019504:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019508:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801950a:	694a      	ldr	r2, [r1, #20]
 801950c:	1b13      	subs	r3, r2, r4
 801950e:	ee03 3a10 	vmov	s6, r3
 8019512:	680b      	ldr	r3, [r1, #0]
 8019514:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019518:	1b1b      	subs	r3, r3, r4
 801951a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801951e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019522:	ee03 3a10 	vmov	s6, r3
 8019526:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801952a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801952e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019532:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019536:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801953a:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801953e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019542:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801954a:	dd13      	ble.n	8019574 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801954c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019550:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019554:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019556:	eee3 7a87 	vfma.f32	s15, s7, s14
 801955a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801955e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019562:	dd15      	ble.n	8019590 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8019564:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019568:	6403      	str	r3, [r0, #64]	@ 0x40
 801956a:	bd70      	pop	{r4, r5, r6, pc}
 801956c:	4623      	mov	r3, r4
 801956e:	e6fd      	b.n	801936c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019570:	462a      	mov	r2, r5
 8019572:	e706      	b.n	8019382 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019574:	d502      	bpl.n	801957c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8019576:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801957a:	e7e9      	b.n	8019550 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801957c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019580:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019584:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801958c:	dade      	bge.n	801954c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801958e:	e7f2      	b.n	8019576 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019590:	d502      	bpl.n	8019598 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8019592:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019596:	e7e7      	b.n	8019568 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8019598:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801959c:	eee3 4a86 	vfma.f32	s9, s7, s12
 80195a0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80195a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195a8:	dadc      	bge.n	8019564 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80195aa:	e7f2      	b.n	8019592 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80195ac:	3d800000 	.word	0x3d800000

080195b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80195b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195b4:	2714      	movs	r7, #20
 80195b6:	435f      	muls	r7, r3
 80195b8:	eb02 0c07 	add.w	ip, r2, r7
 80195bc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80195c0:	f115 0e0f 	adds.w	lr, r5, #15
 80195c4:	f100 80a2 	bmi.w	801970c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80195c8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80195cc:	9c08      	ldr	r4, [sp, #32]
 80195ce:	2614      	movs	r6, #20
 80195d0:	f8c0 e014 	str.w	lr, [r0, #20]
 80195d4:	4366      	muls	r6, r4
 80195d6:	eb02 0806 	add.w	r8, r2, r6
 80195da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80195de:	f115 040f 	adds.w	r4, r5, #15
 80195e2:	f100 809f 	bmi.w	8019724 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80195e6:	1124      	asrs	r4, r4, #4
 80195e8:	eba4 040e 	sub.w	r4, r4, lr
 80195ec:	6184      	str	r4, [r0, #24]
 80195ee:	2c00      	cmp	r4, #0
 80195f0:	f000 808a 	beq.w	8019708 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80195f4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80195f8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80195fc:	5995      	ldr	r5, [r2, r6]
 80195fe:	eba4 0809 	sub.w	r8, r4, r9
 8019602:	59d4      	ldr	r4, [r2, r7]
 8019604:	eba5 0a04 	sub.w	sl, r5, r4
 8019608:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801960c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8019610:	fb0e fe05 	mul.w	lr, lr, r5
 8019614:	fb0a ee19 	mls	lr, sl, r9, lr
 8019618:	fb08 e404 	mla	r4, r8, r4, lr
 801961c:	3c01      	subs	r4, #1
 801961e:	19a4      	adds	r4, r4, r6
 8019620:	f100 808c 	bmi.w	801973c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019624:	fb94 fef6 	sdiv	lr, r4, r6
 8019628:	fb06 441e 	mls	r4, r6, lr, r4
 801962c:	f8c0 e000 	str.w	lr, [r0]
 8019630:	6104      	str	r4, [r0, #16]
 8019632:	2d00      	cmp	r5, #0
 8019634:	f2c0 8095 	blt.w	8019762 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8019638:	fb95 f4f6 	sdiv	r4, r5, r6
 801963c:	fb06 5514 	mls	r5, r6, r4, r5
 8019640:	6044      	str	r4, [r0, #4]
 8019642:	6085      	str	r5, [r0, #8]
 8019644:	60c6      	str	r6, [r0, #12]
 8019646:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801964a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801964e:	6945      	ldr	r5, [r0, #20]
 8019650:	59d2      	ldr	r2, [r2, r7]
 8019652:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019656:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8019784 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801965a:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801965e:	ee07 4a10 	vmov	s14, r4
 8019662:	6804      	ldr	r4, [r0, #0]
 8019664:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019668:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801966c:	ee07 2a90 	vmov	s15, r2
 8019670:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019678:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801967c:	edd3 6a00 	vldr	s13, [r3]
 8019680:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019684:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8019688:	eee6 6a27 	vfma.f32	s13, s12, s15
 801968c:	edc0 6a07 	vstr	s13, [r0, #28]
 8019690:	edd0 6a01 	vldr	s13, [r0, #4]
 8019694:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8019698:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801969c:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80196a0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80196a4:	ed80 6a08 	vstr	s12, [r0, #32]
 80196a8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80196aa:	6242      	str	r2, [r0, #36]	@ 0x24
 80196ac:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 80196b0:	ed93 6a03 	vldr	s12, [r3, #12]
 80196b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80196b8:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80196bc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80196c0:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 80196c4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80196c8:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80196cc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80196d0:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80196d4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80196d6:	6302      	str	r2, [r0, #48]	@ 0x30
 80196d8:	ed93 6a06 	vldr	s12, [r3, #24]
 80196dc:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80196e0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80196e4:	eeb0 7a46 	vmov.f32	s14, s12
 80196e8:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80196ec:	eea6 7a27 	vfma.f32	s14, s12, s15
 80196f0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80196f4:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80196f8:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80196fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019700:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8019704:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8019706:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801970c:	2410      	movs	r4, #16
 801970e:	f1c5 0501 	rsb	r5, r5, #1
 8019712:	fb9e fef4 	sdiv	lr, lr, r4
 8019716:	f015 050f 	ands.w	r5, r5, #15
 801971a:	bf18      	it	ne
 801971c:	2501      	movne	r5, #1
 801971e:	ebae 0e05 	sub.w	lr, lr, r5
 8019722:	e753      	b.n	80195cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8019724:	f04f 0910 	mov.w	r9, #16
 8019728:	f1c5 0501 	rsb	r5, r5, #1
 801972c:	fb94 f4f9 	sdiv	r4, r4, r9
 8019730:	f015 050f 	ands.w	r5, r5, #15
 8019734:	bf18      	it	ne
 8019736:	2501      	movne	r5, #1
 8019738:	1b64      	subs	r4, r4, r5
 801973a:	e755      	b.n	80195e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801973c:	4264      	negs	r4, r4
 801973e:	fb94 fef6 	sdiv	lr, r4, r6
 8019742:	f1ce 0800 	rsb	r8, lr, #0
 8019746:	fb06 441e 	mls	r4, r6, lr, r4
 801974a:	f8c0 8000 	str.w	r8, [r0]
 801974e:	6104      	str	r4, [r0, #16]
 8019750:	2c00      	cmp	r4, #0
 8019752:	f43f af6e 	beq.w	8019632 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8019756:	ea6f 0e0e 	mvn.w	lr, lr
 801975a:	1b34      	subs	r4, r6, r4
 801975c:	f8c0 e000 	str.w	lr, [r0]
 8019760:	e766      	b.n	8019630 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8019762:	426d      	negs	r5, r5
 8019764:	fb95 f4f6 	sdiv	r4, r5, r6
 8019768:	f1c4 0e00 	rsb	lr, r4, #0
 801976c:	fb06 5514 	mls	r5, r6, r4, r5
 8019770:	f8c0 e004 	str.w	lr, [r0, #4]
 8019774:	6085      	str	r5, [r0, #8]
 8019776:	2d00      	cmp	r5, #0
 8019778:	f43f af64 	beq.w	8019644 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801977c:	43e4      	mvns	r4, r4
 801977e:	1b75      	subs	r5, r6, r5
 8019780:	6044      	str	r4, [r0, #4]
 8019782:	e75e      	b.n	8019642 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8019784:	3d800000 	.word	0x3d800000

08019788 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8019788:	4602      	mov	r2, r0
 801978a:	b148      	cbz	r0, 80197a0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801978c:	2300      	movs	r3, #0
 801978e:	b298      	uxth	r0, r3
 8019790:	3301      	adds	r3, #1
 8019792:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019796:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801979a:	2900      	cmp	r1, #0
 801979c:	d1f7      	bne.n	801978e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801979e:	4770      	bx	lr
 80197a0:	4770      	bx	lr

080197a2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80197a2:	b530      	push	{r4, r5, lr}
 80197a4:	4604      	mov	r4, r0
 80197a6:	b159      	cbz	r1, 80197c0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80197a8:	b148      	cbz	r0, 80197be <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80197aa:	2300      	movs	r3, #0
 80197ac:	b298      	uxth	r0, r3
 80197ae:	4282      	cmp	r2, r0
 80197b0:	d905      	bls.n	80197be <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80197b2:	5ccd      	ldrb	r5, [r1, r3]
 80197b4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80197b8:	3301      	adds	r3, #1
 80197ba:	2d00      	cmp	r5, #0
 80197bc:	d1f6      	bne.n	80197ac <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80197be:	bd30      	pop	{r4, r5, pc}
 80197c0:	4608      	mov	r0, r1
 80197c2:	e7fc      	b.n	80197be <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080197c4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 80197c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197c6:	b08b      	sub	sp, #44	@ 0x2c
 80197c8:	468c      	mov	ip, r1
 80197ca:	4604      	mov	r4, r0
 80197cc:	2100      	movs	r1, #0
 80197ce:	261f      	movs	r6, #31
 80197d0:	af01      	add	r7, sp, #4
 80197d2:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80197d6:	1e71      	subs	r1, r6, #1
 80197d8:	fb94 fef3 	sdiv	lr, r4, r3
 80197dc:	fb03 441e 	mls	r4, r3, lr, r4
 80197e0:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80197e4:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80197e8:	b2ec      	uxtb	r4, r5
 80197ea:	2d09      	cmp	r5, #9
 80197ec:	bfd4      	ite	le
 80197ee:	3430      	addle	r4, #48	@ 0x30
 80197f0:	3457      	addgt	r4, #87	@ 0x57
 80197f2:	b2e4      	uxtb	r4, r4
 80197f4:	55bc      	strb	r4, [r7, r6]
 80197f6:	4674      	mov	r4, lr
 80197f8:	b974      	cbnz	r4, 8019818 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 80197fa:	2800      	cmp	r0, #0
 80197fc:	da05      	bge.n	801980a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 80197fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8019800:	4419      	add	r1, r3
 8019802:	232d      	movs	r3, #45	@ 0x2d
 8019804:	f801 3c24 	strb.w	r3, [r1, #-36]
 8019808:	1eb1      	subs	r1, r6, #2
 801980a:	3101      	adds	r1, #1
 801980c:	4660      	mov	r0, ip
 801980e:	4439      	add	r1, r7
 8019810:	f7ff ffc7 	bl	80197a2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019814:	b00b      	add	sp, #44	@ 0x2c
 8019816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019818:	460e      	mov	r6, r1
 801981a:	e7dc      	b.n	80197d6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801981c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801981c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801981e:	468c      	mov	ip, r1
 8019820:	b08b      	sub	sp, #44	@ 0x2c
 8019822:	2100      	movs	r1, #0
 8019824:	ae01      	add	r6, sp, #4
 8019826:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801982a:	211f      	movs	r1, #31
 801982c:	fbb0 f7f3 	udiv	r7, r0, r3
 8019830:	fb03 0517 	mls	r5, r3, r7, r0
 8019834:	4638      	mov	r0, r7
 8019836:	b2ec      	uxtb	r4, r5
 8019838:	2d09      	cmp	r5, #9
 801983a:	bfd4      	ite	le
 801983c:	3430      	addle	r4, #48	@ 0x30
 801983e:	3457      	addgt	r4, #87	@ 0x57
 8019840:	b2e4      	uxtb	r4, r4
 8019842:	558c      	strb	r4, [r1, r6]
 8019844:	1e4c      	subs	r4, r1, #1
 8019846:	b92f      	cbnz	r7, 8019854 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8019848:	4431      	add	r1, r6
 801984a:	4660      	mov	r0, ip
 801984c:	f7ff ffa9 	bl	80197a2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019850:	b00b      	add	sp, #44	@ 0x2c
 8019852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019854:	4621      	mov	r1, r4
 8019856:	e7e9      	b.n	801982c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08019858 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8019858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801985c:	b085      	sub	sp, #20
 801985e:	4691      	mov	r9, r2
 8019860:	6802      	ldr	r2, [r0, #0]
 8019862:	4688      	mov	r8, r1
 8019864:	461c      	mov	r4, r3
 8019866:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801986a:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801986e:	4683      	mov	fp, r0
 8019870:	4610      	mov	r0, r2
 8019872:	9103      	str	r1, [sp, #12]
 8019874:	9302      	str	r3, [sp, #8]
 8019876:	9201      	str	r2, [sp, #4]
 8019878:	f7ff ff86 	bl	8019788 <_ZN8touchgfx7Unicode6strlenEPKt>
 801987c:	f1b8 0f00 	cmp.w	r8, #0
 8019880:	bf0c      	ite	eq
 8019882:	4684      	moveq	ip, r0
 8019884:	f100 0c01 	addne.w	ip, r0, #1
 8019888:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801988c:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8019890:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019892:	fa1f fc8c 	uxth.w	ip, ip
 8019896:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8019898:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801989c:	9903      	ldr	r1, [sp, #12]
 801989e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80198a2:	d041      	beq.n	8019928 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80198a4:	d834      	bhi.n	8019910 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 80198a6:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 80198aa:	d059      	beq.n	8019960 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 80198ac:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 80198b0:	d03a      	beq.n	8019928 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80198b2:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 80198b6:	d034      	beq.n	8019922 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80198b8:	2400      	movs	r4, #0
 80198ba:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 80198be:	3a01      	subs	r2, #1
 80198c0:	b169      	cbz	r1, 80198de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80198c2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80198c4:	458c      	cmp	ip, r1
 80198c6:	da09      	bge.n	80198dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80198c8:	eba1 010c 	sub.w	r1, r1, ip
 80198cc:	b289      	uxth	r1, r1
 80198ce:	b933      	cbnz	r3, 80198de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80198d0:	2e00      	cmp	r6, #0
 80198d2:	d051      	beq.n	8019978 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80198d4:	2800      	cmp	r0, #0
 80198d6:	d04f      	beq.n	8019978 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80198d8:	440c      	add	r4, r1
 80198da:	b2a4      	uxth	r4, r4
 80198dc:	2100      	movs	r1, #0
 80198de:	682b      	ldr	r3, [r5, #0]
 80198e0:	4293      	cmp	r3, r2
 80198e2:	da07      	bge.n	80198f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80198e4:	f1b8 0f00 	cmp.w	r8, #0
 80198e8:	d004      	beq.n	80198f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80198ea:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80198ee:	682b      	ldr	r3, [r5, #0]
 80198f0:	3301      	adds	r3, #1
 80198f2:	602b      	str	r3, [r5, #0]
 80198f4:	2730      	movs	r7, #48	@ 0x30
 80198f6:	2c00      	cmp	r4, #0
 80198f8:	d04e      	beq.n	8019998 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80198fa:	682e      	ldr	r6, [r5, #0]
 80198fc:	3c01      	subs	r4, #1
 80198fe:	42b2      	cmp	r2, r6
 8019900:	b2a4      	uxth	r4, r4
 8019902:	dd49      	ble.n	8019998 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8019904:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8019908:	682b      	ldr	r3, [r5, #0]
 801990a:	3301      	adds	r3, #1
 801990c:	602b      	str	r3, [r5, #0]
 801990e:	e7f2      	b.n	80198f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8019910:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 8019914:	d01d      	beq.n	8019952 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8019916:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801991a:	d002      	beq.n	8019922 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801991c:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 8019920:	e7c9      	b.n	80198b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8019922:	4684      	mov	ip, r0
 8019924:	f04f 0800 	mov.w	r8, #0
 8019928:	2c00      	cmp	r4, #0
 801992a:	d0c6      	beq.n	80198ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801992c:	b947      	cbnz	r7, 8019940 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801992e:	2801      	cmp	r0, #1
 8019930:	d106      	bne.n	8019940 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8019932:	8814      	ldrh	r4, [r2, #0]
 8019934:	2c30      	cmp	r4, #48	@ 0x30
 8019936:	bf02      	ittt	eq
 8019938:	3202      	addeq	r2, #2
 801993a:	4638      	moveq	r0, r7
 801993c:	f8cb 2000 	streq.w	r2, [fp]
 8019940:	45bc      	cmp	ip, r7
 8019942:	da14      	bge.n	801996e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8019944:	b2bf      	uxth	r7, r7
 8019946:	eba7 040c 	sub.w	r4, r7, ip
 801994a:	46bc      	mov	ip, r7
 801994c:	b2a4      	uxth	r4, r4
 801994e:	2600      	movs	r6, #0
 8019950:	e7b3      	b.n	80198ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019952:	4684      	mov	ip, r0
 8019954:	b16c      	cbz	r4, 8019972 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8019956:	42b8      	cmp	r0, r7
 8019958:	dd00      	ble.n	801995c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801995a:	b2b8      	uxth	r0, r7
 801995c:	2400      	movs	r4, #0
 801995e:	e003      	b.n	8019968 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8019960:	f04f 0c01 	mov.w	ip, #1
 8019964:	2400      	movs	r4, #0
 8019966:	4660      	mov	r0, ip
 8019968:	4626      	mov	r6, r4
 801996a:	46a0      	mov	r8, r4
 801996c:	e7a5      	b.n	80198ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801996e:	2400      	movs	r4, #0
 8019970:	e7ed      	b.n	801994e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8019972:	4626      	mov	r6, r4
 8019974:	46a0      	mov	r8, r4
 8019976:	e7a0      	b.n	80198ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019978:	2900      	cmp	r1, #0
 801997a:	d0b0      	beq.n	80198de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801997c:	2720      	movs	r7, #32
 801997e:	682e      	ldr	r6, [r5, #0]
 8019980:	2900      	cmp	r1, #0
 8019982:	d0ac      	beq.n	80198de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019984:	3901      	subs	r1, #1
 8019986:	4296      	cmp	r6, r2
 8019988:	b289      	uxth	r1, r1
 801998a:	daa7      	bge.n	80198dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801998c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8019990:	682b      	ldr	r3, [r5, #0]
 8019992:	3301      	adds	r3, #1
 8019994:	602b      	str	r3, [r5, #0]
 8019996:	e7f2      	b.n	801997e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8019998:	b188      	cbz	r0, 80199be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801999a:	682b      	ldr	r3, [r5, #0]
 801999c:	3801      	subs	r0, #1
 801999e:	429a      	cmp	r2, r3
 80199a0:	b280      	uxth	r0, r0
 80199a2:	dd0c      	ble.n	80199be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80199a4:	f8db 3000 	ldr.w	r3, [fp]
 80199a8:	1c9c      	adds	r4, r3, #2
 80199aa:	f8cb 4000 	str.w	r4, [fp]
 80199ae:	881c      	ldrh	r4, [r3, #0]
 80199b0:	682b      	ldr	r3, [r5, #0]
 80199b2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80199b6:	682b      	ldr	r3, [r5, #0]
 80199b8:	3301      	adds	r3, #1
 80199ba:	602b      	str	r3, [r5, #0]
 80199bc:	e7ec      	b.n	8019998 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80199be:	2620      	movs	r6, #32
 80199c0:	b151      	cbz	r1, 80199d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80199c2:	6828      	ldr	r0, [r5, #0]
 80199c4:	3901      	subs	r1, #1
 80199c6:	4282      	cmp	r2, r0
 80199c8:	b289      	uxth	r1, r1
 80199ca:	dd05      	ble.n	80199d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80199cc:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80199d0:	682b      	ldr	r3, [r5, #0]
 80199d2:	3301      	adds	r3, #1
 80199d4:	602b      	str	r3, [r5, #0]
 80199d6:	e7f3      	b.n	80199c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80199d8:	b005      	add	sp, #20
 80199da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080199de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80199de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199e2:	2400      	movs	r4, #0
 80199e4:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80199e8:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 80199ec:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 80199f0:	8014      	strh	r4, [r2, #0]
 80199f2:	701c      	strb	r4, [r3, #0]
 80199f4:	f888 4000 	strb.w	r4, [r8]
 80199f8:	f88c 4000 	strb.w	r4, [ip]
 80199fc:	f88e 4000 	strb.w	r4, [lr]
 8019a00:	703c      	strb	r4, [r7, #0]
 8019a02:	6804      	ldr	r4, [r0, #0]
 8019a04:	b1a4      	cbz	r4, 8019a30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8019a06:	8824      	ldrh	r4, [r4, #0]
 8019a08:	f04f 0901 	mov.w	r9, #1
 8019a0c:	b314      	cbz	r4, 8019a54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019a0e:	2c2b      	cmp	r4, #43	@ 0x2b
 8019a10:	d001      	beq.n	8019a16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8019a12:	2c20      	cmp	r4, #32
 8019a14:	d110      	bne.n	8019a38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8019a16:	8014      	strh	r4, [r2, #0]
 8019a18:	6804      	ldr	r4, [r0, #0]
 8019a1a:	b10c      	cbz	r4, 8019a20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8019a1c:	3402      	adds	r4, #2
 8019a1e:	6004      	str	r4, [r0, #0]
 8019a20:	680c      	ldr	r4, [r1, #0]
 8019a22:	b10c      	cbz	r4, 8019a28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8019a24:	3401      	adds	r4, #1
 8019a26:	600c      	str	r4, [r1, #0]
 8019a28:	6804      	ldr	r4, [r0, #0]
 8019a2a:	b17c      	cbz	r4, 8019a4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8019a2c:	8824      	ldrh	r4, [r4, #0]
 8019a2e:	e7ed      	b.n	8019a0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8019a30:	680c      	ldr	r4, [r1, #0]
 8019a32:	b17c      	cbz	r4, 8019a54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019a34:	7824      	ldrb	r4, [r4, #0]
 8019a36:	e7e7      	b.n	8019a08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8019a38:	2c2d      	cmp	r4, #45	@ 0x2d
 8019a3a:	d102      	bne.n	8019a42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8019a3c:	f883 9000 	strb.w	r9, [r3]
 8019a40:	e7ea      	b.n	8019a18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8019a42:	2c23      	cmp	r4, #35	@ 0x23
 8019a44:	d107      	bne.n	8019a56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8019a46:	f888 9000 	strb.w	r9, [r8]
 8019a4a:	e7e5      	b.n	8019a18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8019a4c:	680c      	ldr	r4, [r1, #0]
 8019a4e:	b10c      	cbz	r4, 8019a54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019a50:	7824      	ldrb	r4, [r4, #0]
 8019a52:	e7db      	b.n	8019a0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8019a54:	2400      	movs	r4, #0
 8019a56:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8019a5a:	2b09      	cmp	r3, #9
 8019a5c:	d901      	bls.n	8019a62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8019a5e:	2c2a      	cmp	r4, #42	@ 0x2a
 8019a60:	d122      	bne.n	8019aa8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8019a62:	2301      	movs	r3, #1
 8019a64:	2c30      	cmp	r4, #48	@ 0x30
 8019a66:	f88e 3000 	strb.w	r3, [lr]
 8019a6a:	d10d      	bne.n	8019a88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8019a6c:	f88c 3000 	strb.w	r3, [ip]
 8019a70:	6803      	ldr	r3, [r0, #0]
 8019a72:	b10b      	cbz	r3, 8019a78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8019a74:	3302      	adds	r3, #2
 8019a76:	6003      	str	r3, [r0, #0]
 8019a78:	680b      	ldr	r3, [r1, #0]
 8019a7a:	b10b      	cbz	r3, 8019a80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8019a7c:	3301      	adds	r3, #1
 8019a7e:	600b      	str	r3, [r1, #0]
 8019a80:	6803      	ldr	r3, [r0, #0]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d02f      	beq.n	8019ae6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8019a86:	881c      	ldrh	r4, [r3, #0]
 8019a88:	2c2a      	cmp	r4, #42	@ 0x2a
 8019a8a:	d135      	bne.n	8019af8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8019a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8019a90:	6033      	str	r3, [r6, #0]
 8019a92:	6803      	ldr	r3, [r0, #0]
 8019a94:	b10b      	cbz	r3, 8019a9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8019a96:	3302      	adds	r3, #2
 8019a98:	6003      	str	r3, [r0, #0]
 8019a9a:	680b      	ldr	r3, [r1, #0]
 8019a9c:	b10b      	cbz	r3, 8019aa2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8019a9e:	3301      	adds	r3, #1
 8019aa0:	600b      	str	r3, [r1, #0]
 8019aa2:	6803      	ldr	r3, [r0, #0]
 8019aa4:	b31b      	cbz	r3, 8019aee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8019aa6:	881c      	ldrh	r4, [r3, #0]
 8019aa8:	2c2e      	cmp	r4, #46	@ 0x2e
 8019aaa:	d11a      	bne.n	8019ae2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019aac:	2301      	movs	r3, #1
 8019aae:	703b      	strb	r3, [r7, #0]
 8019ab0:	6803      	ldr	r3, [r0, #0]
 8019ab2:	b10b      	cbz	r3, 8019ab8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8019ab4:	3302      	adds	r3, #2
 8019ab6:	6003      	str	r3, [r0, #0]
 8019ab8:	680b      	ldr	r3, [r1, #0]
 8019aba:	b10b      	cbz	r3, 8019ac0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8019abc:	3301      	adds	r3, #1
 8019abe:	600b      	str	r3, [r1, #0]
 8019ac0:	6803      	ldr	r3, [r0, #0]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d036      	beq.n	8019b34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8019ac6:	881b      	ldrh	r3, [r3, #0]
 8019ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8019aca:	d137      	bne.n	8019b3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8019acc:	f04f 33ff 	mov.w	r3, #4294967295
 8019ad0:	602b      	str	r3, [r5, #0]
 8019ad2:	6803      	ldr	r3, [r0, #0]
 8019ad4:	b10b      	cbz	r3, 8019ada <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8019ad6:	3302      	adds	r3, #2
 8019ad8:	6003      	str	r3, [r0, #0]
 8019ada:	680b      	ldr	r3, [r1, #0]
 8019adc:	b10b      	cbz	r3, 8019ae2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019ade:	3301      	adds	r3, #1
 8019ae0:	600b      	str	r3, [r1, #0]
 8019ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ae6:	680c      	ldr	r4, [r1, #0]
 8019ae8:	b134      	cbz	r4, 8019af8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8019aea:	7824      	ldrb	r4, [r4, #0]
 8019aec:	e7cc      	b.n	8019a88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8019aee:	680b      	ldr	r3, [r1, #0]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d0f6      	beq.n	8019ae2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019af4:	781c      	ldrb	r4, [r3, #0]
 8019af6:	e7d7      	b.n	8019aa8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8019af8:	2300      	movs	r3, #0
 8019afa:	220a      	movs	r2, #10
 8019afc:	6033      	str	r3, [r6, #0]
 8019afe:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019b02:	fa1f f38c 	uxth.w	r3, ip
 8019b06:	2b09      	cmp	r3, #9
 8019b08:	d8ce      	bhi.n	8019aa8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8019b0a:	6833      	ldr	r3, [r6, #0]
 8019b0c:	fb02 c303 	mla	r3, r2, r3, ip
 8019b10:	6033      	str	r3, [r6, #0]
 8019b12:	6803      	ldr	r3, [r0, #0]
 8019b14:	b10b      	cbz	r3, 8019b1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8019b16:	3302      	adds	r3, #2
 8019b18:	6003      	str	r3, [r0, #0]
 8019b1a:	680b      	ldr	r3, [r1, #0]
 8019b1c:	b10b      	cbz	r3, 8019b22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8019b1e:	3301      	adds	r3, #1
 8019b20:	600b      	str	r3, [r1, #0]
 8019b22:	6803      	ldr	r3, [r0, #0]
 8019b24:	b10b      	cbz	r3, 8019b2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8019b26:	881c      	ldrh	r4, [r3, #0]
 8019b28:	e7e9      	b.n	8019afe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019b2a:	680c      	ldr	r4, [r1, #0]
 8019b2c:	2c00      	cmp	r4, #0
 8019b2e:	d0e6      	beq.n	8019afe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019b30:	7824      	ldrb	r4, [r4, #0]
 8019b32:	e7e4      	b.n	8019afe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019b34:	680b      	ldr	r3, [r1, #0]
 8019b36:	b10b      	cbz	r3, 8019b3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8019b38:	781b      	ldrb	r3, [r3, #0]
 8019b3a:	e7c5      	b.n	8019ac8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	240a      	movs	r4, #10
 8019b40:	602a      	str	r2, [r5, #0]
 8019b42:	3b30      	subs	r3, #48	@ 0x30
 8019b44:	682a      	ldr	r2, [r5, #0]
 8019b46:	b29e      	uxth	r6, r3
 8019b48:	2e09      	cmp	r6, #9
 8019b4a:	d813      	bhi.n	8019b74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8019b4c:	fb04 3302 	mla	r3, r4, r2, r3
 8019b50:	602b      	str	r3, [r5, #0]
 8019b52:	6803      	ldr	r3, [r0, #0]
 8019b54:	b10b      	cbz	r3, 8019b5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8019b56:	3302      	adds	r3, #2
 8019b58:	6003      	str	r3, [r0, #0]
 8019b5a:	680b      	ldr	r3, [r1, #0]
 8019b5c:	b10b      	cbz	r3, 8019b62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8019b5e:	3301      	adds	r3, #1
 8019b60:	600b      	str	r3, [r1, #0]
 8019b62:	6803      	ldr	r3, [r0, #0]
 8019b64:	b10b      	cbz	r3, 8019b6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8019b66:	881b      	ldrh	r3, [r3, #0]
 8019b68:	e7eb      	b.n	8019b42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019b6a:	680b      	ldr	r3, [r1, #0]
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d0e8      	beq.n	8019b42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019b70:	781b      	ldrb	r3, [r3, #0]
 8019b72:	e7e6      	b.n	8019b42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019b74:	2a06      	cmp	r2, #6
 8019b76:	bfa8      	it	ge
 8019b78:	2206      	movge	r2, #6
 8019b7a:	602a      	str	r2, [r5, #0]
 8019b7c:	e7b1      	b.n	8019ae2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08019b7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8019b7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b82:	b0a3      	sub	sp, #140	@ 0x8c
 8019b84:	2600      	movs	r6, #0
 8019b86:	4607      	mov	r7, r0
 8019b88:	4688      	mov	r8, r1
 8019b8a:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8019b8e:	4631      	mov	r1, r6
 8019b90:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8019b92:	4648      	mov	r0, r9
 8019b94:	960d      	str	r6, [sp, #52]	@ 0x34
 8019b96:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8019b9a:	2242      	movs	r2, #66	@ 0x42
 8019b9c:	f00b fe5c 	bl	8025858 <memset>
 8019ba0:	b15f      	cbz	r7, 8019bba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8019ba2:	f108 3aff 	add.w	sl, r8, #4294967295
 8019ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ba8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019baa:	b152      	cbz	r2, 8019bc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8019bac:	8812      	ldrh	r2, [r2, #0]
 8019bae:	b10a      	cbz	r2, 8019bb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8019bb0:	459a      	cmp	sl, r3
 8019bb2:	dc2e      	bgt.n	8019c12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8019bb4:	2200      	movs	r2, #0
 8019bb6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019bba:	4638      	mov	r0, r7
 8019bbc:	b023      	add	sp, #140	@ 0x8c
 8019bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bc2:	9a08      	ldr	r2, [sp, #32]
 8019bc4:	2a00      	cmp	r2, #0
 8019bc6:	d0f5      	beq.n	8019bb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8019bc8:	7812      	ldrb	r2, [r2, #0]
 8019bca:	e7f0      	b.n	8019bae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8019bcc:	2d00      	cmp	r5, #0
 8019bce:	d0ea      	beq.n	8019ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019bd0:	782a      	ldrb	r2, [r5, #0]
 8019bd2:	b142      	cbz	r2, 8019be6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8019bd4:	2a25      	cmp	r2, #37	@ 0x25
 8019bd6:	d001      	beq.n	8019bdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8019bd8:	459a      	cmp	sl, r3
 8019bda:	dc08      	bgt.n	8019bee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8019bdc:	f1bb 0f00 	cmp.w	fp, #0
 8019be0:	d121      	bne.n	8019c26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8019be2:	2d00      	cmp	r5, #0
 8019be4:	d0df      	beq.n	8019ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019be6:	782a      	ldrb	r2, [r5, #0]
 8019be8:	f04f 0b00 	mov.w	fp, #0
 8019bec:	e01d      	b.n	8019c2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8019bee:	f1bb 0f00 	cmp.w	fp, #0
 8019bf2:	d077      	beq.n	8019ce4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8019bf4:	f8bb 2000 	ldrh.w	r2, [fp]
 8019bf8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019bfc:	f1bb 0f00 	cmp.w	fp, #0
 8019c00:	d002      	beq.n	8019c08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8019c02:	f10b 0202 	add.w	r2, fp, #2
 8019c06:	9209      	str	r2, [sp, #36]	@ 0x24
 8019c08:	b10d      	cbz	r5, 8019c0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8019c0a:	3501      	adds	r5, #1
 8019c0c:	9508      	str	r5, [sp, #32]
 8019c0e:	3301      	adds	r3, #1
 8019c10:	930d      	str	r3, [sp, #52]	@ 0x34
 8019c12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019c14:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8019c18:	f1bb 0f00 	cmp.w	fp, #0
 8019c1c:	d0d6      	beq.n	8019bcc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8019c1e:	f8bb 2000 	ldrh.w	r2, [fp]
 8019c22:	2a00      	cmp	r2, #0
 8019c24:	d1d6      	bne.n	8019bd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8019c26:	f8bb 2000 	ldrh.w	r2, [fp]
 8019c2a:	2a00      	cmp	r2, #0
 8019c2c:	d0bb      	beq.n	8019ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019c2e:	459a      	cmp	sl, r3
 8019c30:	ddb9      	ble.n	8019ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019c32:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8019c36:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8019c3a:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8019c3e:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8019c42:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8019c46:	960e      	str	r6, [sp, #56]	@ 0x38
 8019c48:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8019c4c:	960f      	str	r6, [sp, #60]	@ 0x3c
 8019c4e:	f1bb 0f00 	cmp.w	fp, #0
 8019c52:	d002      	beq.n	8019c5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8019c54:	f10b 0302 	add.w	r3, fp, #2
 8019c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c5a:	b10d      	cbz	r5, 8019c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8019c5c:	1c6b      	adds	r3, r5, #1
 8019c5e:	9308      	str	r3, [sp, #32]
 8019c60:	ab0f      	add	r3, sp, #60	@ 0x3c
 8019c62:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8019c66:	a908      	add	r1, sp, #32
 8019c68:	a809      	add	r0, sp, #36	@ 0x24
 8019c6a:	9305      	str	r3, [sp, #20]
 8019c6c:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8019c70:	9304      	str	r3, [sp, #16]
 8019c72:	ab0e      	add	r3, sp, #56	@ 0x38
 8019c74:	9303      	str	r3, [sp, #12]
 8019c76:	ab0c      	add	r3, sp, #48	@ 0x30
 8019c78:	9302      	str	r3, [sp, #8]
 8019c7a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8019c7e:	9301      	str	r3, [sp, #4]
 8019c80:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8019c84:	9300      	str	r3, [sp, #0]
 8019c86:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8019c8a:	f7ff fea8 	bl	80199de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8019c8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	bfbf      	itttt	lt
 8019c94:	6823      	ldrlt	r3, [r4, #0]
 8019c96:	3404      	addlt	r4, #4
 8019c98:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019c9c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8019c9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	bfbe      	ittt	lt
 8019ca4:	6823      	ldrlt	r3, [r4, #0]
 8019ca6:	3404      	addlt	r4, #4
 8019ca8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019cac:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8019cb0:	bfb8      	it	lt
 8019cb2:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8019cb4:	b1d9      	cbz	r1, 8019cee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8019cb6:	880b      	ldrh	r3, [r1, #0]
 8019cb8:	2b69      	cmp	r3, #105	@ 0x69
 8019cba:	d01f      	beq.n	8019cfc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019cbc:	d82f      	bhi.n	8019d1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8019cbe:	2b58      	cmp	r3, #88	@ 0x58
 8019cc0:	d01c      	beq.n	8019cfc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019cc2:	d818      	bhi.n	8019cf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8019cc4:	2b25      	cmp	r3, #37	@ 0x25
 8019cc6:	d034      	beq.n	8019d32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8019cc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019cca:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8019cce:	f1bb 0f00 	cmp.w	fp, #0
 8019cd2:	f000 80b7 	beq.w	8019e44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8019cd6:	f8bb 5000 	ldrh.w	r5, [fp]
 8019cda:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8019cde:	3301      	adds	r3, #1
 8019ce0:	930d      	str	r3, [sp, #52]	@ 0x34
 8019ce2:	e029      	b.n	8019d38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8019ce4:	b10d      	cbz	r5, 8019cea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8019ce6:	782a      	ldrb	r2, [r5, #0]
 8019ce8:	e786      	b.n	8019bf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8019cea:	462a      	mov	r2, r5
 8019cec:	e784      	b.n	8019bf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8019cee:	2a00      	cmp	r2, #0
 8019cf0:	d0ea      	beq.n	8019cc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019cf2:	7813      	ldrb	r3, [r2, #0]
 8019cf4:	e7e0      	b.n	8019cb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8019cf6:	3b63      	subs	r3, #99	@ 0x63
 8019cf8:	2b01      	cmp	r3, #1
 8019cfa:	d8e5      	bhi.n	8019cc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019cfc:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8019d00:	b329      	cbz	r1, 8019d4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8019d02:	880b      	ldrh	r3, [r1, #0]
 8019d04:	2b69      	cmp	r3, #105	@ 0x69
 8019d06:	d063      	beq.n	8019dd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8019d08:	d825      	bhi.n	8019d56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8019d0a:	2b63      	cmp	r3, #99	@ 0x63
 8019d0c:	d038      	beq.n	8019d80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8019d0e:	2b64      	cmp	r3, #100	@ 0x64
 8019d10:	d05e      	beq.n	8019dd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8019d12:	2b58      	cmp	r3, #88	@ 0x58
 8019d14:	d07a      	beq.n	8019e0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8019d16:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8019d1a:	4625      	mov	r5, r4
 8019d1c:	e036      	b.n	8019d8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019d1e:	2b73      	cmp	r3, #115	@ 0x73
 8019d20:	d0ec      	beq.n	8019cfc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019d22:	d802      	bhi.n	8019d2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8019d24:	2b6f      	cmp	r3, #111	@ 0x6f
 8019d26:	d1cf      	bne.n	8019cc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019d28:	e7e8      	b.n	8019cfc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019d2a:	2b75      	cmp	r3, #117	@ 0x75
 8019d2c:	d0e6      	beq.n	8019cfc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019d2e:	2b78      	cmp	r3, #120	@ 0x78
 8019d30:	e7f9      	b.n	8019d26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8019d32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019d34:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8019d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d3a:	b10b      	cbz	r3, 8019d40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8019d3c:	3302      	adds	r3, #2
 8019d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d40:	9b08      	ldr	r3, [sp, #32]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	f43f af2f 	beq.w	8019ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019d48:	3301      	adds	r3, #1
 8019d4a:	9308      	str	r3, [sp, #32]
 8019d4c:	e72b      	b.n	8019ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019d4e:	2a00      	cmp	r2, #0
 8019d50:	d0e1      	beq.n	8019d16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019d52:	7813      	ldrb	r3, [r2, #0]
 8019d54:	e7d6      	b.n	8019d04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8019d56:	2b73      	cmp	r3, #115	@ 0x73
 8019d58:	d036      	beq.n	8019dc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8019d5a:	d807      	bhi.n	8019d6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8019d5c:	2b6f      	cmp	r3, #111	@ 0x6f
 8019d5e:	d1da      	bne.n	8019d16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019d60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019d62:	1d25      	adds	r5, r4, #4
 8019d64:	2308      	movs	r3, #8
 8019d66:	eba8 0202 	sub.w	r2, r8, r2
 8019d6a:	e049      	b.n	8019e00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8019d6c:	2b75      	cmp	r3, #117	@ 0x75
 8019d6e:	d042      	beq.n	8019df6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8019d70:	2b78      	cmp	r3, #120	@ 0x78
 8019d72:	d1d0      	bne.n	8019d16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019d74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019d76:	1d25      	adds	r5, r4, #4
 8019d78:	2310      	movs	r3, #16
 8019d7a:	eba8 0202 	sub.w	r2, r8, r2
 8019d7e:	e03f      	b.n	8019e00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8019d80:	6823      	ldr	r3, [r4, #0]
 8019d82:	1d25      	adds	r5, r4, #4
 8019d84:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8019d88:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8019d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d8e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d051      	beq.n	8019e3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8019d96:	881a      	ldrh	r2, [r3, #0]
 8019d98:	a80d      	add	r0, sp, #52	@ 0x34
 8019d9a:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8019d9e:	462c      	mov	r4, r5
 8019da0:	9005      	str	r0, [sp, #20]
 8019da2:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8019da6:	9004      	str	r0, [sp, #16]
 8019da8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8019daa:	9003      	str	r0, [sp, #12]
 8019dac:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8019db0:	9002      	str	r0, [sp, #8]
 8019db2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019db4:	9001      	str	r0, [sp, #4]
 8019db6:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8019dba:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8019dbe:	9000      	str	r0, [sp, #0]
 8019dc0:	a810      	add	r0, sp, #64	@ 0x40
 8019dc2:	f7ff fd49 	bl	8019858 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8019dc6:	e7b7      	b.n	8019d38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8019dc8:	1d25      	adds	r5, r4, #4
 8019dca:	6823      	ldr	r3, [r4, #0]
 8019dcc:	9310      	str	r3, [sp, #64]	@ 0x40
 8019dce:	e7dd      	b.n	8019d8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019dd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019dd2:	230a      	movs	r3, #10
 8019dd4:	4649      	mov	r1, r9
 8019dd6:	6820      	ldr	r0, [r4, #0]
 8019dd8:	eba8 0202 	sub.w	r2, r8, r2
 8019ddc:	1d25      	adds	r5, r4, #4
 8019dde:	b292      	uxth	r2, r2
 8019de0:	f7ff fcf0 	bl	80197c4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8019de4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8019de8:	2b2d      	cmp	r3, #45	@ 0x2d
 8019dea:	d1cf      	bne.n	8019d8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019dec:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019df0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019df2:	3302      	adds	r3, #2
 8019df4:	e7ea      	b.n	8019dcc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8019df6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019df8:	1d25      	adds	r5, r4, #4
 8019dfa:	230a      	movs	r3, #10
 8019dfc:	eba8 0202 	sub.w	r2, r8, r2
 8019e00:	b292      	uxth	r2, r2
 8019e02:	4649      	mov	r1, r9
 8019e04:	6820      	ldr	r0, [r4, #0]
 8019e06:	f7ff fd09 	bl	801981c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8019e0a:	e7bf      	b.n	8019d8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019e0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019e0e:	2310      	movs	r3, #16
 8019e10:	4649      	mov	r1, r9
 8019e12:	6820      	ldr	r0, [r4, #0]
 8019e14:	eba8 0202 	sub.w	r2, r8, r2
 8019e18:	1d25      	adds	r5, r4, #4
 8019e1a:	b292      	uxth	r2, r2
 8019e1c:	f7ff fcfe 	bl	801981c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8019e20:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8019e24:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d0af      	beq.n	8019d8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019e2c:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8019e30:	2919      	cmp	r1, #25
 8019e32:	d8f7      	bhi.n	8019e24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8019e34:	3b20      	subs	r3, #32
 8019e36:	8013      	strh	r3, [r2, #0]
 8019e38:	e7f4      	b.n	8019e24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8019e3a:	9a08      	ldr	r2, [sp, #32]
 8019e3c:	2a00      	cmp	r2, #0
 8019e3e:	d0ab      	beq.n	8019d98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019e40:	7812      	ldrb	r2, [r2, #0]
 8019e42:	e7a9      	b.n	8019d98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019e44:	2d00      	cmp	r5, #0
 8019e46:	f43f af48 	beq.w	8019cda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8019e4a:	782d      	ldrb	r5, [r5, #0]
 8019e4c:	e745      	b.n	8019cda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08019e4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8019e4e:	b507      	push	{r0, r1, r2, lr}
 8019e50:	9300      	str	r3, [sp, #0]
 8019e52:	4613      	mov	r3, r2
 8019e54:	2200      	movs	r2, #0
 8019e56:	f7ff fe92 	bl	8019b7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8019e5a:	b003      	add	sp, #12
 8019e5c:	f85d fb04 	ldr.w	pc, [sp], #4

08019e60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8019e60:	b40c      	push	{r2, r3}
 8019e62:	b507      	push	{r0, r1, r2, lr}
 8019e64:	ab04      	add	r3, sp, #16
 8019e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e6a:	9301      	str	r3, [sp, #4]
 8019e6c:	f7ff ffef 	bl	8019e4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8019e70:	b003      	add	sp, #12
 8019e72:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e76:	b002      	add	sp, #8
 8019e78:	4770      	bx	lr
	...

08019e7c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019e7c:	4b01      	ldr	r3, [pc, #4]	@ (8019e84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8019e7e:	6018      	str	r0, [r3, #0]
 8019e80:	4770      	bx	lr
 8019e82:	bf00      	nop
 8019e84:	24028e94 	.word	0x24028e94

08019e88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019e88:	4b06      	ldr	r3, [pc, #24]	@ (8019ea4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019e8a:	881a      	ldrh	r2, [r3, #0]
 8019e8c:	4282      	cmp	r2, r0
 8019e8e:	d807      	bhi.n	8019ea0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019e90:	4b05      	ldr	r3, [pc, #20]	@ (8019ea8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019e92:	881b      	ldrh	r3, [r3, #0]
 8019e94:	4413      	add	r3, r2
 8019e96:	4298      	cmp	r0, r3
 8019e98:	bfac      	ite	ge
 8019e9a:	2000      	movge	r0, #0
 8019e9c:	2001      	movlt	r0, #1
 8019e9e:	4770      	bx	lr
 8019ea0:	2000      	movs	r0, #0
 8019ea2:	4770      	bx	lr
 8019ea4:	24028eb4 	.word	0x24028eb4
 8019ea8:	24028eb8 	.word	0x24028eb8

08019eac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019eac:	b508      	push	{r3, lr}
 8019eae:	4601      	mov	r1, r0
 8019eb0:	f7ff ffea 	bl	8019e88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019eb4:	b118      	cbz	r0, 8019ebe <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8019eb6:	4b02      	ldr	r3, [pc, #8]	@ (8019ec0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019ebe:	bd08      	pop	{r3, pc}
 8019ec0:	24028e98 	.word	0x24028e98

08019ec4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8019ec4:	b538      	push	{r3, r4, r5, lr}
 8019ec6:	4604      	mov	r4, r0
 8019ec8:	f7ff ffde 	bl	8019e88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019ecc:	b1d8      	cbz	r0, 8019f06 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8019ece:	4b0f      	ldr	r3, [pc, #60]	@ (8019f0c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8019ed0:	881b      	ldrh	r3, [r3, #0]
 8019ed2:	1ae4      	subs	r4, r4, r3
 8019ed4:	230e      	movs	r3, #14
 8019ed6:	4363      	muls	r3, r4
 8019ed8:	4c0d      	ldr	r4, [pc, #52]	@ (8019f10 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8019eda:	6825      	ldr	r5, [r4, #0]
 8019edc:	18ea      	adds	r2, r5, r3
 8019ede:	7b12      	ldrb	r2, [r2, #12]
 8019ee0:	f012 0220 	ands.w	r2, r2, #32
 8019ee4:	d010      	beq.n	8019f08 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 8019ee6:	f9b1 2000 	ldrsh.w	r2, [r1]
 8019eea:	52ea      	strh	r2, [r5, r3]
 8019eec:	6822      	ldr	r2, [r4, #0]
 8019eee:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019ef2:	441a      	add	r2, r3
 8019ef4:	8055      	strh	r5, [r2, #2]
 8019ef6:	6822      	ldr	r2, [r4, #0]
 8019ef8:	4413      	add	r3, r2
 8019efa:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8019efe:	809a      	strh	r2, [r3, #4]
 8019f00:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8019f04:	80da      	strh	r2, [r3, #6]
 8019f06:	bd38      	pop	{r3, r4, r5, pc}
 8019f08:	4610      	mov	r0, r2
 8019f0a:	e7fc      	b.n	8019f06 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8019f0c:	24028eb4 	.word	0x24028eb4
 8019f10:	24028e9c 	.word	0x24028e9c

08019f14 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8019f14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f18:	4606      	mov	r6, r0
 8019f1a:	460c      	mov	r4, r1
 8019f1c:	f7ff ffb4 	bl	8019e88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019f20:	b918      	cbnz	r0, 8019f2a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8019f22:	2000      	movs	r0, #0
 8019f24:	b002      	add	sp, #8
 8019f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f2a:	4608      	mov	r0, r1
 8019f2c:	f7f6 fcff 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019f30:	2800      	cmp	r0, #0
 8019f32:	d1f6      	bne.n	8019f22 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019f34:	4b3f      	ldr	r3, [pc, #252]	@ (801a034 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8019f36:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801a038 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8019f3a:	881d      	ldrh	r5, [r3, #0]
 8019f3c:	f8d9 a000 	ldr.w	sl, [r9]
 8019f40:	46c8      	mov	r8, r9
 8019f42:	1b73      	subs	r3, r6, r5
 8019f44:	250e      	movs	r5, #14
 8019f46:	435d      	muls	r5, r3
 8019f48:	eb0a 0705 	add.w	r7, sl, r5
 8019f4c:	7b3b      	ldrb	r3, [r7, #12]
 8019f4e:	f013 0f20 	tst.w	r3, #32
 8019f52:	d0e6      	beq.n	8019f22 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019f54:	4621      	mov	r1, r4
 8019f56:	4638      	mov	r0, r7
 8019f58:	f7fc fb52 	bl	8016600 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019f5c:	2800      	cmp	r0, #0
 8019f5e:	d1e1      	bne.n	8019f24 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8019f60:	4639      	mov	r1, r7
 8019f62:	4620      	mov	r0, r4
 8019f64:	f7fc fb4c 	bl	8016600 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019f68:	b108      	cbz	r0, 8019f6e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8019f6a:	4621      	mov	r1, r4
 8019f6c:	e020      	b.n	8019fb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8019f6e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019f72:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8019f76:	429a      	cmp	r2, r3
 8019f78:	d11e      	bne.n	8019fb8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8019f7a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019f7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8019f82:	429a      	cmp	r2, r3
 8019f84:	d118      	bne.n	8019fb8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8019f86:	6820      	ldr	r0, [r4, #0]
 8019f88:	466b      	mov	r3, sp
 8019f8a:	6861      	ldr	r1, [r4, #4]
 8019f8c:	c303      	stmia	r3!, {r0, r1}
 8019f8e:	4639      	mov	r1, r7
 8019f90:	4668      	mov	r0, sp
 8019f92:	f7fc fb5b 	bl	801664c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019f96:	f8d9 3000 	ldr.w	r3, [r9]
 8019f9a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019f9e:	442b      	add	r3, r5
 8019fa0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019fa4:	4413      	add	r3, r2
 8019fa6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8019faa:	4293      	cmp	r3, r2
 8019fac:	dc04      	bgt.n	8019fb8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8019fae:	4669      	mov	r1, sp
 8019fb0:	4630      	mov	r0, r6
 8019fb2:	f7ff ff87 	bl	8019ec4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8019fb6:	e7b5      	b.n	8019f24 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8019fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8019fbc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019fc0:	442b      	add	r3, r5
 8019fc2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019fc6:	4291      	cmp	r1, r2
 8019fc8:	d119      	bne.n	8019ffe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8019fca:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8019fce:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8019fd2:	4291      	cmp	r1, r2
 8019fd4:	d113      	bne.n	8019ffe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8019fd6:	6820      	ldr	r0, [r4, #0]
 8019fd8:	466a      	mov	r2, sp
 8019fda:	6861      	ldr	r1, [r4, #4]
 8019fdc:	c203      	stmia	r2!, {r0, r1}
 8019fde:	4619      	mov	r1, r3
 8019fe0:	4668      	mov	r0, sp
 8019fe2:	f7fc fb33 	bl	801664c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8019fea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019fee:	442b      	add	r3, r5
 8019ff0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019ff4:	4413      	add	r3, r2
 8019ff6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8019ffa:	4293      	cmp	r3, r2
 8019ffc:	ddd7      	ble.n	8019fae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8019ffe:	4620      	mov	r0, r4
 801a000:	f7f6 fc95 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a004:	b990      	cbnz	r0, 801a02c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801a006:	88a7      	ldrh	r7, [r4, #4]
 801a008:	88e3      	ldrh	r3, [r4, #6]
 801a00a:	fb17 f703 	smulbb	r7, r7, r3
 801a00e:	f8d8 3000 	ldr.w	r3, [r8]
 801a012:	441d      	add	r5, r3
 801a014:	4628      	mov	r0, r5
 801a016:	f7f6 fc8a 	bl	801092e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a01a:	b948      	cbnz	r0, 801a030 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801a01c:	88ab      	ldrh	r3, [r5, #4]
 801a01e:	88ea      	ldrh	r2, [r5, #6]
 801a020:	fb13 f302 	smulbb	r3, r3, r2
 801a024:	42bb      	cmp	r3, r7
 801a026:	f6bf af7c 	bge.w	8019f22 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a02a:	e79e      	b.n	8019f6a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801a02c:	2700      	movs	r7, #0
 801a02e:	e7ee      	b.n	801a00e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801a030:	2300      	movs	r3, #0
 801a032:	e7f7      	b.n	801a024 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801a034:	24028eb4 	.word	0x24028eb4
 801a038:	24028e9c 	.word	0x24028e9c

0801a03c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a03e:	4c24      	ldr	r4, [pc, #144]	@ (801a0d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801a040:	6823      	ldr	r3, [r4, #0]
 801a042:	2b00      	cmp	r3, #0
 801a044:	d042      	beq.n	801a0cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a046:	4a23      	ldr	r2, [pc, #140]	@ (801a0d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801a048:	4d23      	ldr	r5, [pc, #140]	@ (801a0d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801a04a:	8811      	ldrh	r1, [r2, #0]
 801a04c:	f8b5 c000 	ldrh.w	ip, [r5]
 801a050:	4822      	ldr	r0, [pc, #136]	@ (801a0dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a052:	4461      	add	r1, ip
 801a054:	1c4a      	adds	r2, r1, #1
 801a056:	008f      	lsls	r7, r1, #2
 801a058:	f022 0201 	bic.w	r2, r2, #1
 801a05c:	19de      	adds	r6, r3, r7
 801a05e:	0412      	lsls	r2, r2, #16
 801a060:	6006      	str	r6, [r0, #0]
 801a062:	4e1f      	ldr	r6, [pc, #124]	@ (801a0e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a064:	0c12      	lsrs	r2, r2, #16
 801a066:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801a06a:	19da      	adds	r2, r3, r7
 801a06c:	6032      	str	r2, [r6, #0]
 801a06e:	220e      	movs	r2, #14
 801a070:	fb02 f20c 	mul.w	r2, r2, ip
 801a074:	3203      	adds	r2, #3
 801a076:	f022 0203 	bic.w	r2, r2, #3
 801a07a:	443a      	add	r2, r7
 801a07c:	4f19      	ldr	r7, [pc, #100]	@ (801a0e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a07e:	4413      	add	r3, r2
 801a080:	603b      	str	r3, [r7, #0]
 801a082:	2300      	movs	r3, #0
 801a084:	4f18      	ldr	r7, [pc, #96]	@ (801a0e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a086:	469c      	mov	ip, r3
 801a088:	803b      	strh	r3, [r7, #0]
 801a08a:	4f18      	ldr	r7, [pc, #96]	@ (801a0ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a08c:	683f      	ldr	r7, [r7, #0]
 801a08e:	1aba      	subs	r2, r7, r2
 801a090:	4f17      	ldr	r7, [pc, #92]	@ (801a0f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a092:	603a      	str	r2, [r7, #0]
 801a094:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801a098:	4a16      	ldr	r2, [pc, #88]	@ (801a0f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a09a:	8013      	strh	r3, [r2, #0]
 801a09c:	428b      	cmp	r3, r1
 801a09e:	d10d      	bne.n	801a0bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801a0a0:	882d      	ldrh	r5, [r5, #0]
 801a0a2:	2300      	movs	r3, #0
 801a0a4:	6830      	ldr	r0, [r6, #0]
 801a0a6:	240e      	movs	r4, #14
 801a0a8:	429d      	cmp	r5, r3
 801a0aa:	d90f      	bls.n	801a0cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a0ac:	fb04 0203 	mla	r2, r4, r3, r0
 801a0b0:	3301      	adds	r3, #1
 801a0b2:	7b11      	ldrb	r1, [r2, #12]
 801a0b4:	f36f 1145 	bfc	r1, #5, #1
 801a0b8:	7311      	strb	r1, [r2, #12]
 801a0ba:	e7f5      	b.n	801a0a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801a0bc:	6822      	ldr	r2, [r4, #0]
 801a0be:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a0c2:	6802      	ldr	r2, [r0, #0]
 801a0c4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801a0c8:	3301      	adds	r3, #1
 801a0ca:	e7e7      	b.n	801a09c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801a0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0ce:	bf00      	nop
 801a0d0:	24028e98 	.word	0x24028e98
 801a0d4:	24028eb4 	.word	0x24028eb4
 801a0d8:	24028eb8 	.word	0x24028eb8
 801a0dc:	24028eac 	.word	0x24028eac
 801a0e0:	24028e9c 	.word	0x24028e9c
 801a0e4:	24028ea4 	.word	0x24028ea4
 801a0e8:	24028eb6 	.word	0x24028eb6
 801a0ec:	24028ea0 	.word	0x24028ea0
 801a0f0:	24028eb0 	.word	0x24028eb0
 801a0f4:	24028ea8 	.word	0x24028ea8

0801a0f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a0f8:	4b06      	ldr	r3, [pc, #24]	@ (801a114 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	b943      	cbnz	r3, 801a110 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a0fe:	b139      	cbz	r1, 801a110 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a100:	4b05      	ldr	r3, [pc, #20]	@ (801a118 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801a102:	801a      	strh	r2, [r3, #0]
 801a104:	4b05      	ldr	r3, [pc, #20]	@ (801a11c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801a106:	6019      	str	r1, [r3, #0]
 801a108:	4b05      	ldr	r3, [pc, #20]	@ (801a120 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801a10a:	6018      	str	r0, [r3, #0]
 801a10c:	f7ff bf96 	b.w	801a03c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a110:	4770      	bx	lr
 801a112:	bf00      	nop
 801a114:	24028ea4 	.word	0x24028ea4
 801a118:	24028eb8 	.word	0x24028eb8
 801a11c:	24028ea0 	.word	0x24028ea0
 801a120:	24028e98 	.word	0x24028e98

0801a124 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a124:	b470      	push	{r4, r5, r6}
 801a126:	4c07      	ldr	r4, [pc, #28]	@ (801a144 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a128:	4605      	mov	r5, r0
 801a12a:	4610      	mov	r0, r2
 801a12c:	9a03      	ldr	r2, [sp, #12]
 801a12e:	6826      	ldr	r6, [r4, #0]
 801a130:	b936      	cbnz	r6, 801a140 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a132:	6025      	str	r5, [r4, #0]
 801a134:	4c04      	ldr	r4, [pc, #16]	@ (801a148 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a136:	8021      	strh	r1, [r4, #0]
 801a138:	4619      	mov	r1, r3
 801a13a:	bc70      	pop	{r4, r5, r6}
 801a13c:	f7ff bfdc 	b.w	801a0f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a140:	bc70      	pop	{r4, r5, r6}
 801a142:	4770      	bx	lr
 801a144:	24028ebc 	.word	0x24028ebc
 801a148:	24028eb4 	.word	0x24028eb4

0801a14c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a14c:	4a12      	ldr	r2, [pc, #72]	@ (801a198 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801a14e:	8803      	ldrh	r3, [r0, #0]
 801a150:	8812      	ldrh	r2, [r2, #0]
 801a152:	4293      	cmp	r3, r2
 801a154:	d207      	bcs.n	801a166 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801a156:	4a11      	ldr	r2, [pc, #68]	@ (801a19c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801a158:	2114      	movs	r1, #20
 801a15a:	6812      	ldr	r2, [r2, #0]
 801a15c:	fb01 2303 	mla	r3, r1, r3, r2
 801a160:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801a164:	4770      	bx	lr
 801a166:	490e      	ldr	r1, [pc, #56]	@ (801a1a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a168:	8809      	ldrh	r1, [r1, #0]
 801a16a:	4411      	add	r1, r2
 801a16c:	428b      	cmp	r3, r1
 801a16e:	da04      	bge.n	801a17a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801a170:	1a9b      	subs	r3, r3, r2
 801a172:	4a0c      	ldr	r2, [pc, #48]	@ (801a1a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a174:	210e      	movs	r1, #14
 801a176:	6812      	ldr	r2, [r2, #0]
 801a178:	e7f0      	b.n	801a15c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801a17a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a17e:	4293      	cmp	r3, r2
 801a180:	d108      	bne.n	801a194 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801a182:	4b09      	ldr	r3, [pc, #36]	@ (801a1a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a184:	781b      	ldrb	r3, [r3, #0]
 801a186:	b91b      	cbnz	r3, 801a190 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801a188:	4b08      	ldr	r3, [pc, #32]	@ (801a1ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a18a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a18e:	4770      	bx	lr
 801a190:	4b07      	ldr	r3, [pc, #28]	@ (801a1b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a192:	e7fa      	b.n	801a18a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801a194:	2000      	movs	r0, #0
 801a196:	4770      	bx	lr
 801a198:	24028eb4 	.word	0x24028eb4
 801a19c:	24028ebc 	.word	0x24028ebc
 801a1a0:	24028eb8 	.word	0x24028eb8
 801a1a4:	24028e9c 	.word	0x24028e9c
 801a1a8:	24028e24 	.word	0x24028e24
 801a1ac:	24028e26 	.word	0x24028e26
 801a1b0:	24028e28 	.word	0x24028e28

0801a1b4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a1b4:	4a12      	ldr	r2, [pc, #72]	@ (801a200 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801a1b6:	8803      	ldrh	r3, [r0, #0]
 801a1b8:	8812      	ldrh	r2, [r2, #0]
 801a1ba:	4293      	cmp	r3, r2
 801a1bc:	d207      	bcs.n	801a1ce <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801a1be:	4a11      	ldr	r2, [pc, #68]	@ (801a204 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801a1c0:	2114      	movs	r1, #20
 801a1c2:	6812      	ldr	r2, [r2, #0]
 801a1c4:	fb01 2303 	mla	r3, r1, r3, r2
 801a1c8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801a1cc:	4770      	bx	lr
 801a1ce:	490e      	ldr	r1, [pc, #56]	@ (801a208 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a1d0:	8809      	ldrh	r1, [r1, #0]
 801a1d2:	4411      	add	r1, r2
 801a1d4:	428b      	cmp	r3, r1
 801a1d6:	da04      	bge.n	801a1e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801a1d8:	1a9b      	subs	r3, r3, r2
 801a1da:	4a0c      	ldr	r2, [pc, #48]	@ (801a20c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a1dc:	210e      	movs	r1, #14
 801a1de:	6812      	ldr	r2, [r2, #0]
 801a1e0:	e7f0      	b.n	801a1c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801a1e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a1e6:	4293      	cmp	r3, r2
 801a1e8:	d108      	bne.n	801a1fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801a1ea:	4b09      	ldr	r3, [pc, #36]	@ (801a210 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a1ec:	781b      	ldrb	r3, [r3, #0]
 801a1ee:	b91b      	cbnz	r3, 801a1f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801a1f0:	4b08      	ldr	r3, [pc, #32]	@ (801a214 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a1f2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a1f6:	4770      	bx	lr
 801a1f8:	4b07      	ldr	r3, [pc, #28]	@ (801a218 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a1fa:	e7fa      	b.n	801a1f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801a1fc:	2000      	movs	r0, #0
 801a1fe:	4770      	bx	lr
 801a200:	24028eb4 	.word	0x24028eb4
 801a204:	24028ebc 	.word	0x24028ebc
 801a208:	24028eb8 	.word	0x24028eb8
 801a20c:	24028e9c 	.word	0x24028e9c
 801a210:	24028e24 	.word	0x24028e24
 801a214:	24028e28 	.word	0x24028e28
 801a218:	24028e26 	.word	0x24028e26

0801a21c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a21c:	4a12      	ldr	r2, [pc, #72]	@ (801a268 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a21e:	8803      	ldrh	r3, [r0, #0]
 801a220:	8811      	ldrh	r1, [r2, #0]
 801a222:	428b      	cmp	r3, r1
 801a224:	d20b      	bcs.n	801a23e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801a226:	4a11      	ldr	r2, [pc, #68]	@ (801a26c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a228:	6812      	ldr	r2, [r2, #0]
 801a22a:	b112      	cbz	r2, 801a232 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a22c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a230:	b9c0      	cbnz	r0, 801a264 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801a232:	4a0f      	ldr	r2, [pc, #60]	@ (801a270 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a234:	6811      	ldr	r1, [r2, #0]
 801a236:	2214      	movs	r2, #20
 801a238:	4353      	muls	r3, r2
 801a23a:	58c8      	ldr	r0, [r1, r3]
 801a23c:	4770      	bx	lr
 801a23e:	4a0d      	ldr	r2, [pc, #52]	@ (801a274 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a240:	8812      	ldrh	r2, [r2, #0]
 801a242:	440a      	add	r2, r1
 801a244:	4293      	cmp	r3, r2
 801a246:	da04      	bge.n	801a252 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801a248:	4a08      	ldr	r2, [pc, #32]	@ (801a26c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a24a:	6812      	ldr	r2, [r2, #0]
 801a24c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a250:	4770      	bx	lr
 801a252:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a256:	4293      	cmp	r3, r2
 801a258:	d103      	bne.n	801a262 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a25a:	4b07      	ldr	r3, [pc, #28]	@ (801a278 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801a260:	4770      	bx	lr
 801a262:	2000      	movs	r0, #0
 801a264:	4770      	bx	lr
 801a266:	bf00      	nop
 801a268:	24028eb4 	.word	0x24028eb4
 801a26c:	24028e98 	.word	0x24028e98
 801a270:	24028ebc 	.word	0x24028ebc
 801a274:	24028eb8 	.word	0x24028eb8
 801a278:	24028e2c 	.word	0x24028e2c

0801a27c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a27c:	4b24      	ldr	r3, [pc, #144]	@ (801a310 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a27e:	8802      	ldrh	r2, [r0, #0]
 801a280:	8818      	ldrh	r0, [r3, #0]
 801a282:	4282      	cmp	r2, r0
 801a284:	d221      	bcs.n	801a2ca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801a286:	4b23      	ldr	r3, [pc, #140]	@ (801a314 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a288:	6819      	ldr	r1, [r3, #0]
 801a28a:	2314      	movs	r3, #20
 801a28c:	fb03 1302 	mla	r3, r3, r2, r1
 801a290:	6858      	ldr	r0, [r3, #4]
 801a292:	2800      	cmp	r0, #0
 801a294:	d03a      	beq.n	801a30c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a296:	4920      	ldr	r1, [pc, #128]	@ (801a318 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a298:	6809      	ldr	r1, [r1, #0]
 801a29a:	2900      	cmp	r1, #0
 801a29c:	d036      	beq.n	801a30c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a29e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a2a2:	2900      	cmp	r1, #0
 801a2a4:	d032      	beq.n	801a30c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a2a6:	891a      	ldrh	r2, [r3, #8]
 801a2a8:	8958      	ldrh	r0, [r3, #10]
 801a2aa:	4350      	muls	r0, r2
 801a2ac:	7c5a      	ldrb	r2, [r3, #17]
 801a2ae:	7cdb      	ldrb	r3, [r3, #19]
 801a2b0:	0952      	lsrs	r2, r2, #5
 801a2b2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a2b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a2ba:	2b0b      	cmp	r3, #11
 801a2bc:	bf18      	it	ne
 801a2be:	0040      	lslne	r0, r0, #1
 801a2c0:	3003      	adds	r0, #3
 801a2c2:	f020 0003 	bic.w	r0, r0, #3
 801a2c6:	4408      	add	r0, r1
 801a2c8:	4770      	bx	lr
 801a2ca:	4b14      	ldr	r3, [pc, #80]	@ (801a31c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a2cc:	881b      	ldrh	r3, [r3, #0]
 801a2ce:	4403      	add	r3, r0
 801a2d0:	429a      	cmp	r2, r3
 801a2d2:	da1a      	bge.n	801a30a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a2d4:	4b12      	ldr	r3, [pc, #72]	@ (801a320 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801a2d6:	1a10      	subs	r0, r2, r0
 801a2d8:	210e      	movs	r1, #14
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	fb01 3000 	mla	r0, r1, r0, r3
 801a2e0:	7b03      	ldrb	r3, [r0, #12]
 801a2e2:	f003 031f 	and.w	r3, r3, #31
 801a2e6:	2b0b      	cmp	r3, #11
 801a2e8:	d10b      	bne.n	801a302 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801a2ea:	8903      	ldrh	r3, [r0, #8]
 801a2ec:	8940      	ldrh	r0, [r0, #10]
 801a2ee:	4358      	muls	r0, r3
 801a2f0:	4b09      	ldr	r3, [pc, #36]	@ (801a318 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a2f2:	3003      	adds	r0, #3
 801a2f4:	6819      	ldr	r1, [r3, #0]
 801a2f6:	f020 0303 	bic.w	r3, r0, #3
 801a2fa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a2fe:	4418      	add	r0, r3
 801a300:	4770      	bx	lr
 801a302:	2b0d      	cmp	r3, #13
 801a304:	d101      	bne.n	801a30a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a306:	300d      	adds	r0, #13
 801a308:	4770      	bx	lr
 801a30a:	2000      	movs	r0, #0
 801a30c:	4770      	bx	lr
 801a30e:	bf00      	nop
 801a310:	24028eb4 	.word	0x24028eb4
 801a314:	24028ebc 	.word	0x24028ebc
 801a318:	24028e98 	.word	0x24028e98
 801a31c:	24028eb8 	.word	0x24028eb8
 801a320:	24028e9c 	.word	0x24028e9c

0801a324 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a324:	4b1f      	ldr	r3, [pc, #124]	@ (801a3a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801a326:	b510      	push	{r4, lr}
 801a328:	8802      	ldrh	r2, [r0, #0]
 801a32a:	881b      	ldrh	r3, [r3, #0]
 801a32c:	429a      	cmp	r2, r3
 801a32e:	d21a      	bcs.n	801a366 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801a330:	4b1d      	ldr	r3, [pc, #116]	@ (801a3a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801a332:	2114      	movs	r1, #20
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	fb01 3102 	mla	r1, r1, r2, r3
 801a33a:	7c4b      	ldrb	r3, [r1, #17]
 801a33c:	0958      	lsrs	r0, r3, #5
 801a33e:	7ccb      	ldrb	r3, [r1, #19]
 801a340:	491a      	ldr	r1, [pc, #104]	@ (801a3ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801a342:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a346:	6809      	ldr	r1, [r1, #0]
 801a348:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801a34c:	b2d8      	uxtb	r0, r3
 801a34e:	b149      	cbz	r1, 801a364 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a350:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801a354:	b132      	cbz	r2, 801a364 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a356:	2b0e      	cmp	r3, #14
 801a358:	d021      	beq.n	801a39e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801a35a:	280f      	cmp	r0, #15
 801a35c:	d01d      	beq.n	801a39a <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801a35e:	2810      	cmp	r0, #16
 801a360:	bf08      	it	eq
 801a362:	2002      	moveq	r0, #2
 801a364:	bd10      	pop	{r4, pc}
 801a366:	4912      	ldr	r1, [pc, #72]	@ (801a3b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801a368:	8809      	ldrh	r1, [r1, #0]
 801a36a:	4419      	add	r1, r3
 801a36c:	428a      	cmp	r2, r1
 801a36e:	da09      	bge.n	801a384 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801a370:	1ad3      	subs	r3, r2, r3
 801a372:	4a10      	ldr	r2, [pc, #64]	@ (801a3b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801a374:	210e      	movs	r1, #14
 801a376:	6812      	ldr	r2, [r2, #0]
 801a378:	fb01 2303 	mla	r3, r1, r3, r2
 801a37c:	7b18      	ldrb	r0, [r3, #12]
 801a37e:	f000 001f 	and.w	r0, r0, #31
 801a382:	e7ef      	b.n	801a364 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a384:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801a388:	429a      	cmp	r2, r3
 801a38a:	d108      	bne.n	801a39e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801a38c:	f7e9 feee 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 801a390:	6803      	ldr	r3, [r0, #0]
 801a392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a398:	4718      	bx	r3
 801a39a:	2001      	movs	r0, #1
 801a39c:	e7e2      	b.n	801a364 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a39e:	2000      	movs	r0, #0
 801a3a0:	e7e0      	b.n	801a364 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a3a2:	bf00      	nop
 801a3a4:	24028eb4 	.word	0x24028eb4
 801a3a8:	24028ebc 	.word	0x24028ebc
 801a3ac:	24028e98 	.word	0x24028e98
 801a3b0:	24028eb8 	.word	0x24028eb8
 801a3b4:	24028e9c 	.word	0x24028e9c

0801a3b8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801a3b8:	2018      	movs	r0, #24
 801a3ba:	4770      	bx	lr

0801a3bc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801a3bc:	2001      	movs	r0, #1
 801a3be:	4770      	bx	lr

0801a3c0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801a3c0:	4b02      	ldr	r3, [pc, #8]	@ (801a3cc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801a3c2:	8818      	ldrh	r0, [r3, #0]
 801a3c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a3c8:	b280      	uxth	r0, r0
 801a3ca:	4770      	bx	lr
 801a3cc:	24028e26 	.word	0x24028e26

0801a3d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a3d0:	2bff      	cmp	r3, #255	@ 0xff
 801a3d2:	d04c      	beq.n	801a46e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a3d4:	2a2c      	cmp	r2, #44	@ 0x2c
 801a3d6:	d030      	beq.n	801a43a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801a3d8:	d80f      	bhi.n	801a3fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801a3da:	2a08      	cmp	r2, #8
 801a3dc:	d043      	beq.n	801a466 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a3de:	d805      	bhi.n	801a3ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801a3e0:	2a04      	cmp	r2, #4
 801a3e2:	d03e      	beq.n	801a462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801a3e4:	2a05      	cmp	r2, #5
 801a3e6:	d03a      	beq.n	801a45e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	e024      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a3ec:	2a0a      	cmp	r2, #10
 801a3ee:	d03a      	beq.n	801a466 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a3f0:	d301      	bcc.n	801a3f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801a3f2:	2a0b      	cmp	r2, #11
 801a3f4:	d1f8      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a3f6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801a3f8:	e01d      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a3fa:	2a30      	cmp	r2, #48	@ 0x30
 801a3fc:	d035      	beq.n	801a46a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a3fe:	d80a      	bhi.n	801a416 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801a400:	2a2e      	cmp	r2, #46	@ 0x2e
 801a402:	684b      	ldr	r3, [r1, #4]
 801a404:	d023      	beq.n	801a44e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a406:	d90d      	bls.n	801a424 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801a408:	781a      	ldrb	r2, [r3, #0]
 801a40a:	785b      	ldrb	r3, [r3, #1]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d1eb      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a410:	b98a      	cbnz	r2, 801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a412:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801a414:	e00f      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a416:	2a32      	cmp	r2, #50	@ 0x32
 801a418:	d027      	beq.n	801a46a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a41a:	d301      	bcc.n	801a420 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801a41c:	2a33      	cmp	r2, #51	@ 0x33
 801a41e:	d1e3      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a420:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801a422:	e008      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a424:	781a      	ldrb	r2, [r3, #0]
 801a426:	785b      	ldrb	r3, [r3, #1]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d1dd      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a42c:	2a00      	cmp	r2, #0
 801a42e:	d0f0      	beq.n	801a412 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801a430:	2a01      	cmp	r2, #1
 801a432:	d1d9      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a434:	6943      	ldr	r3, [r0, #20]
 801a436:	4618      	mov	r0, r3
 801a438:	4770      	bx	lr
 801a43a:	684b      	ldr	r3, [r1, #4]
 801a43c:	781a      	ldrb	r2, [r3, #0]
 801a43e:	785b      	ldrb	r3, [r3, #1]
 801a440:	2b00      	cmp	r3, #0
 801a442:	d1d1      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a444:	b14a      	cbz	r2, 801a45a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801a446:	2a01      	cmp	r2, #1
 801a448:	bf08      	it	eq
 801a44a:	68c3      	ldreq	r3, [r0, #12]
 801a44c:	e7f3      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a44e:	781a      	ldrb	r2, [r3, #0]
 801a450:	785b      	ldrb	r3, [r3, #1]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d1c8      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a456:	2a00      	cmp	r2, #0
 801a458:	d1ed      	bne.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a45a:	69c3      	ldr	r3, [r0, #28]
 801a45c:	e7eb      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a45e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801a460:	e7e9      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a462:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a464:	e7e7      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a466:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a468:	e7e5      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a46a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801a46c:	e7e3      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a46e:	2a2c      	cmp	r2, #44	@ 0x2c
 801a470:	d030      	beq.n	801a4d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801a472:	d80f      	bhi.n	801a494 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801a474:	2a08      	cmp	r2, #8
 801a476:	d042      	beq.n	801a4fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801a478:	d805      	bhi.n	801a486 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801a47a:	2a04      	cmp	r2, #4
 801a47c:	d03d      	beq.n	801a4fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801a47e:	2a05      	cmp	r2, #5
 801a480:	d1b2      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a482:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801a484:	e7d7      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a486:	2a0a      	cmp	r2, #10
 801a488:	d039      	beq.n	801a4fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801a48a:	d301      	bcc.n	801a490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801a48c:	2a0b      	cmp	r2, #11
 801a48e:	d1ab      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a490:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801a492:	e7d0      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a494:	2a30      	cmp	r2, #48	@ 0x30
 801a496:	d034      	beq.n	801a502 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801a498:	d80b      	bhi.n	801a4b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801a49a:	2a2e      	cmp	r2, #46	@ 0x2e
 801a49c:	684b      	ldr	r3, [r1, #4]
 801a49e:	d023      	beq.n	801a4e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801a4a0:	d90e      	bls.n	801a4c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801a4a2:	781a      	ldrb	r2, [r3, #0]
 801a4a4:	785b      	ldrb	r3, [r3, #1]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d19e      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a4aa:	2a00      	cmp	r2, #0
 801a4ac:	d1c3      	bne.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a4ae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801a4b0:	e7c1      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a4b2:	2a32      	cmp	r2, #50	@ 0x32
 801a4b4:	d025      	beq.n	801a502 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801a4b6:	d301      	bcc.n	801a4bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801a4b8:	2a33      	cmp	r2, #51	@ 0x33
 801a4ba:	d195      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a4bc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801a4be:	e7ba      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a4c0:	781a      	ldrb	r2, [r3, #0]
 801a4c2:	785b      	ldrb	r3, [r3, #1]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d18f      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a4c8:	2a00      	cmp	r2, #0
 801a4ca:	d0f0      	beq.n	801a4ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801a4cc:	2a01      	cmp	r2, #1
 801a4ce:	d18b      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a4d0:	6983      	ldr	r3, [r0, #24]
 801a4d2:	e7b0      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a4d4:	684b      	ldr	r3, [r1, #4]
 801a4d6:	781a      	ldrb	r2, [r3, #0]
 801a4d8:	785b      	ldrb	r3, [r3, #1]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d184      	bne.n	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a4de:	b152      	cbz	r2, 801a4f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801a4e0:	2a01      	cmp	r2, #1
 801a4e2:	bf08      	it	eq
 801a4e4:	6903      	ldreq	r3, [r0, #16]
 801a4e6:	e7a6      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a4e8:	781a      	ldrb	r2, [r3, #0]
 801a4ea:	785b      	ldrb	r3, [r3, #1]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	f47f af7b 	bne.w	801a3e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a4f2:	2a00      	cmp	r2, #0
 801a4f4:	d19f      	bne.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a4f6:	6a03      	ldr	r3, [r0, #32]
 801a4f8:	e79d      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a4fa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a4fc:	e79b      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a4fe:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801a500:	e799      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a502:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801a504:	e797      	b.n	801a436 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801a506 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a506:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a50a:	b085      	sub	sp, #20
 801a50c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a50e:	9203      	str	r2, [sp, #12]
 801a510:	6870      	ldr	r0, [r6, #4]
 801a512:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801a516:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801a51a:	9101      	str	r1, [sp, #4]
 801a51c:	fa1f f885 	uxth.w	r8, r5
 801a520:	43ed      	mvns	r5, r5
 801a522:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801a526:	b2ed      	uxtb	r5, r5
 801a528:	fb00 2404 	mla	r4, r0, r4, r2
 801a52c:	6832      	ldr	r2, [r6, #0]
 801a52e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a532:	4414      	add	r4, r2
 801a534:	f8dc 2000 	ldr.w	r2, [ip]
 801a538:	9202      	str	r2, [sp, #8]
 801a53a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a53e:	f102 0e04 	add.w	lr, r2, #4
 801a542:	9a01      	ldr	r2, [sp, #4]
 801a544:	2a00      	cmp	r2, #0
 801a546:	dc03      	bgt.n	801a550 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a548:	9a03      	ldr	r2, [sp, #12]
 801a54a:	2a00      	cmp	r2, #0
 801a54c:	f340 8116 	ble.w	801a77c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801a550:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a552:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801a556:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a55a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a55c:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801a560:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a564:	2b00      	cmp	r3, #0
 801a566:	dd0e      	ble.n	801a586 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a568:	1406      	asrs	r6, r0, #16
 801a56a:	d405      	bmi.n	801a578 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a56c:	4556      	cmp	r6, sl
 801a56e:	da03      	bge.n	801a578 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a570:	1416      	asrs	r6, r2, #16
 801a572:	d401      	bmi.n	801a578 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a574:	454e      	cmp	r6, r9
 801a576:	db07      	blt.n	801a588 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801a578:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801a57a:	3b01      	subs	r3, #1
 801a57c:	3403      	adds	r4, #3
 801a57e:	4430      	add	r0, r6
 801a580:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801a582:	4432      	add	r2, r6
 801a584:	e7ee      	b.n	801a564 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a586:	d063      	beq.n	801a650 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a588:	1e5e      	subs	r6, r3, #1
 801a58a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801a58c:	fb07 0706 	mla	r7, r7, r6, r0
 801a590:	143f      	asrs	r7, r7, #16
 801a592:	d454      	bmi.n	801a63e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a594:	4557      	cmp	r7, sl
 801a596:	da52      	bge.n	801a63e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a598:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801a59a:	fb07 2606 	mla	r6, r7, r6, r2
 801a59e:	1436      	asrs	r6, r6, #16
 801a5a0:	d44d      	bmi.n	801a63e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a5a2:	454e      	cmp	r6, r9
 801a5a4:	da4b      	bge.n	801a63e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a5a6:	1ce6      	adds	r6, r4, #3
 801a5a8:	4699      	mov	r9, r3
 801a5aa:	f1b9 0f00 	cmp.w	r9, #0
 801a5ae:	f106 0603 	add.w	r6, r6, #3
 801a5b2:	dd48      	ble.n	801a646 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a5b4:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801a5b8:	1417      	asrs	r7, r2, #16
 801a5ba:	9902      	ldr	r1, [sp, #8]
 801a5bc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a5c0:	f109 39ff 	add.w	r9, r9, #4294967295
 801a5c4:	fb0b 1707 	mla	r7, fp, r7, r1
 801a5c8:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801a5cc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a5ce:	f817 700a 	ldrb.w	r7, [r7, sl]
 801a5d2:	fb1b fb05 	smulbb	fp, fp, r5
 801a5d6:	4408      	add	r0, r1
 801a5d8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a5da:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a5de:	440a      	add	r2, r1
 801a5e0:	eb0e 0a07 	add.w	sl, lr, r7
 801a5e4:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801a5e8:	fb07 b708 	mla	r7, r7, r8, fp
 801a5ec:	b2bf      	uxth	r7, r7
 801a5ee:	f107 0b01 	add.w	fp, r7, #1
 801a5f2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a5f6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801a5fa:	fb1b fb05 	smulbb	fp, fp, r5
 801a5fe:	123f      	asrs	r7, r7, #8
 801a600:	f806 7c06 	strb.w	r7, [r6, #-6]
 801a604:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801a608:	fb07 b708 	mla	r7, r7, r8, fp
 801a60c:	b2bf      	uxth	r7, r7
 801a60e:	f107 0b01 	add.w	fp, r7, #1
 801a612:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a616:	123f      	asrs	r7, r7, #8
 801a618:	f806 7c05 	strb.w	r7, [r6, #-5]
 801a61c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801a620:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a624:	fb1a fa05 	smulbb	sl, sl, r5
 801a628:	fb07 a708 	mla	r7, r7, r8, sl
 801a62c:	b2bf      	uxth	r7, r7
 801a62e:	f107 0a01 	add.w	sl, r7, #1
 801a632:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a636:	123f      	asrs	r7, r7, #8
 801a638:	f806 7c04 	strb.w	r7, [r6, #-4]
 801a63c:	e7b5      	b.n	801a5aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801a63e:	2700      	movs	r7, #0
 801a640:	1bde      	subs	r6, r3, r7
 801a642:	2e00      	cmp	r6, #0
 801a644:	dc42      	bgt.n	801a6cc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801a646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a64a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a64e:	441c      	add	r4, r3
 801a650:	9b01      	ldr	r3, [sp, #4]
 801a652:	2b00      	cmp	r3, #0
 801a654:	f340 8092 	ble.w	801a77c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801a658:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a65c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a65e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a662:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a666:	eef0 6a62 	vmov.f32	s13, s5
 801a66a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a66e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a672:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a676:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801a67a:	eef0 6a43 	vmov.f32	s13, s6
 801a67e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a682:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801a686:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a68a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a68e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a692:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a696:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a69a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a69e:	ee12 2a90 	vmov	r2, s5
 801a6a2:	eef0 2a47 	vmov.f32	s5, s14
 801a6a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a6aa:	ee13 2a10 	vmov	r2, s6
 801a6ae:	9311      	str	r3, [sp, #68]	@ 0x44
 801a6b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a6b2:	eeb0 3a67 	vmov.f32	s6, s15
 801a6b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a6ba:	9312      	str	r3, [sp, #72]	@ 0x48
 801a6bc:	9b01      	ldr	r3, [sp, #4]
 801a6be:	9a03      	ldr	r2, [sp, #12]
 801a6c0:	3b01      	subs	r3, #1
 801a6c2:	9301      	str	r3, [sp, #4]
 801a6c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a6c6:	bf08      	it	eq
 801a6c8:	4613      	moveq	r3, r2
 801a6ca:	e73a      	b.n	801a542 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a6cc:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801a6d0:	d44e      	bmi.n	801a770 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a6d2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a6d6:	4556      	cmp	r6, sl
 801a6d8:	dd4a      	ble.n	801a770 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a6da:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a6de:	d447      	bmi.n	801a770 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a6e0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801a6e4:	4559      	cmp	r1, fp
 801a6e6:	dd43      	ble.n	801a770 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a6e8:	fa0f f986 	sxth.w	r9, r6
 801a6ec:	9902      	ldr	r1, [sp, #8]
 801a6ee:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801a6f2:	fb0b 1909 	mla	r9, fp, r9, r1
 801a6f6:	f814 b006 	ldrb.w	fp, [r4, r6]
 801a6fa:	f819 900a 	ldrb.w	r9, [r9, sl]
 801a6fe:	fb1b fb05 	smulbb	fp, fp, r5
 801a702:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a706:	eb0e 0a09 	add.w	sl, lr, r9
 801a70a:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801a70e:	fb09 b908 	mla	r9, r9, r8, fp
 801a712:	fa1f f989 	uxth.w	r9, r9
 801a716:	f109 0b01 	add.w	fp, r9, #1
 801a71a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a71e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a722:	f804 9006 	strb.w	r9, [r4, r6]
 801a726:	4426      	add	r6, r4
 801a728:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a72c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a730:	fb1b fb05 	smulbb	fp, fp, r5
 801a734:	fb09 b908 	mla	r9, r9, r8, fp
 801a738:	fa1f f989 	uxth.w	r9, r9
 801a73c:	f109 0b01 	add.w	fp, r9, #1
 801a740:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a744:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a748:	f886 9001 	strb.w	r9, [r6, #1]
 801a74c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a750:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a754:	fb1a fa05 	smulbb	sl, sl, r5
 801a758:	fb09 a908 	mla	r9, r9, r8, sl
 801a75c:	fa1f f989 	uxth.w	r9, r9
 801a760:	f109 0a01 	add.w	sl, r9, #1
 801a764:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801a768:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a76c:	f886 9002 	strb.w	r9, [r6, #2]
 801a770:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a772:	3701      	adds	r7, #1
 801a774:	4408      	add	r0, r1
 801a776:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a778:	440a      	add	r2, r1
 801a77a:	e761      	b.n	801a640 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a77c:	b005      	add	sp, #20
 801a77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a782 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a782:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a786:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801a788:	4693      	mov	fp, r2
 801a78a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a78c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a790:	6868      	ldr	r0, [r5, #4]
 801a792:	6877      	ldr	r7, [r6, #4]
 801a794:	9100      	str	r1, [sp, #0]
 801a796:	3704      	adds	r7, #4
 801a798:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801a79c:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801a7a0:	fb00 2404 	mla	r4, r0, r4, r2
 801a7a4:	682a      	ldr	r2, [r5, #0]
 801a7a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a7aa:	4414      	add	r4, r2
 801a7ac:	6832      	ldr	r2, [r6, #0]
 801a7ae:	9201      	str	r2, [sp, #4]
 801a7b0:	9a00      	ldr	r2, [sp, #0]
 801a7b2:	2a00      	cmp	r2, #0
 801a7b4:	dc03      	bgt.n	801a7be <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a7b6:	f1bb 0f00 	cmp.w	fp, #0
 801a7ba:	f340 80bc 	ble.w	801a936 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801a7be:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a7c0:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801a7c4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a7c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a7ca:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801a7ce:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	dd0c      	ble.n	801a7f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a7d6:	1405      	asrs	r5, r0, #16
 801a7d8:	d405      	bmi.n	801a7e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a7da:	4555      	cmp	r5, sl
 801a7dc:	da03      	bge.n	801a7e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a7de:	1415      	asrs	r5, r2, #16
 801a7e0:	d401      	bmi.n	801a7e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a7e2:	454d      	cmp	r5, r9
 801a7e4:	db05      	blt.n	801a7f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a7e6:	4440      	add	r0, r8
 801a7e8:	4472      	add	r2, lr
 801a7ea:	3b01      	subs	r3, #1
 801a7ec:	3403      	adds	r4, #3
 801a7ee:	e7f0      	b.n	801a7d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a7f0:	d03f      	beq.n	801a872 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801a7f2:	1e5d      	subs	r5, r3, #1
 801a7f4:	fb08 0c05 	mla	ip, r8, r5, r0
 801a7f8:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801a7fc:	d42e      	bmi.n	801a85c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a7fe:	45d4      	cmp	ip, sl
 801a800:	da2c      	bge.n	801a85c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a802:	fb0e 2505 	mla	r5, lr, r5, r2
 801a806:	142d      	asrs	r5, r5, #16
 801a808:	d428      	bmi.n	801a85c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a80a:	454d      	cmp	r5, r9
 801a80c:	da26      	bge.n	801a85c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a80e:	1ce5      	adds	r5, r4, #3
 801a810:	469c      	mov	ip, r3
 801a812:	f1bc 0f00 	cmp.w	ip, #0
 801a816:	f105 0503 	add.w	r5, r5, #3
 801a81a:	dd25      	ble.n	801a868 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801a81c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a820:	ea4f 4922 	mov.w	r9, r2, asr #16
 801a824:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a828:	4472      	add	r2, lr
 801a82a:	468a      	mov	sl, r1
 801a82c:	9901      	ldr	r1, [sp, #4]
 801a82e:	fb0a 1909 	mla	r9, sl, r9, r1
 801a832:	1401      	asrs	r1, r0, #16
 801a834:	4440      	add	r0, r8
 801a836:	f819 9001 	ldrb.w	r9, [r9, r1]
 801a83a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a83e:	eb07 0a09 	add.w	sl, r7, r9
 801a842:	f817 9009 	ldrb.w	r9, [r7, r9]
 801a846:	f805 9c06 	strb.w	r9, [r5, #-6]
 801a84a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a84e:	f805 9c05 	strb.w	r9, [r5, #-5]
 801a852:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a856:	f805 9c04 	strb.w	r9, [r5, #-4]
 801a85a:	e7da      	b.n	801a812 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a85c:	2500      	movs	r5, #0
 801a85e:	eba3 0c05 	sub.w	ip, r3, r5
 801a862:	f1bc 0f00 	cmp.w	ip, #0
 801a866:	dc3b      	bgt.n	801a8e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a86c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a870:	441c      	add	r4, r3
 801a872:	9b00      	ldr	r3, [sp, #0]
 801a874:	2b00      	cmp	r3, #0
 801a876:	dd5e      	ble.n	801a936 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801a878:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a87c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a87e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a882:	eeb0 6a62 	vmov.f32	s12, s5
 801a886:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a88a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a88e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a892:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801a896:	eeb0 6a43 	vmov.f32	s12, s6
 801a89a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a89e:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801a8a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a8a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a8aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a8ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a8b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a8b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a8ba:	ee12 2a90 	vmov	r2, s5
 801a8be:	eef0 2a47 	vmov.f32	s5, s14
 801a8c2:	fb92 f8f3 	sdiv	r8, r2, r3
 801a8c6:	ee13 2a10 	vmov	r2, s6
 801a8ca:	eeb0 3a67 	vmov.f32	s6, s15
 801a8ce:	fb92 fef3 	sdiv	lr, r2, r3
 801a8d2:	9b00      	ldr	r3, [sp, #0]
 801a8d4:	3b01      	subs	r3, #1
 801a8d6:	9300      	str	r3, [sp, #0]
 801a8d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a8da:	bf08      	it	eq
 801a8dc:	465b      	moveq	r3, fp
 801a8de:	e767      	b.n	801a7b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a8e0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a8e4:	d423      	bmi.n	801a92e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a8e6:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801a8ea:	45cc      	cmp	ip, r9
 801a8ec:	dd1f      	ble.n	801a92e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a8ee:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a8f2:	d41c      	bmi.n	801a92e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a8f4:	68f1      	ldr	r1, [r6, #12]
 801a8f6:	4551      	cmp	r1, sl
 801a8f8:	dd19      	ble.n	801a92e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a8fa:	fa0f fc8c 	sxth.w	ip, ip
 801a8fe:	9901      	ldr	r1, [sp, #4]
 801a900:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801a904:	f81c c009 	ldrb.w	ip, [ip, r9]
 801a908:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a90c:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801a910:	eb07 090c 	add.w	r9, r7, ip
 801a914:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801a918:	f804 a00c 	strb.w	sl, [r4, ip]
 801a91c:	44a4      	add	ip, r4
 801a91e:	f899 a001 	ldrb.w	sl, [r9, #1]
 801a922:	f88c a001 	strb.w	sl, [ip, #1]
 801a926:	f899 9002 	ldrb.w	r9, [r9, #2]
 801a92a:	f88c 9002 	strb.w	r9, [ip, #2]
 801a92e:	4440      	add	r0, r8
 801a930:	4472      	add	r2, lr
 801a932:	3501      	adds	r5, #1
 801a934:	e793      	b.n	801a85e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801a936:	b003      	add	sp, #12
 801a938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a93c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a940:	b085      	sub	sp, #20
 801a942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a946:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801a948:	9202      	str	r2, [sp, #8]
 801a94a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801a94e:	6860      	ldr	r0, [r4, #4]
 801a950:	9203      	str	r2, [sp, #12]
 801a952:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801a956:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801a95a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801a95e:	fb00 2505 	mla	r5, r0, r5, r2
 801a962:	6822      	ldr	r2, [r4, #0]
 801a964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a968:	4415      	add	r5, r2
 801a96a:	f8dc 2000 	ldr.w	r2, [ip]
 801a96e:	9200      	str	r2, [sp, #0]
 801a970:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a974:	3204      	adds	r2, #4
 801a976:	9201      	str	r2, [sp, #4]
 801a978:	2900      	cmp	r1, #0
 801a97a:	dc03      	bgt.n	801a984 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a97c:	9a02      	ldr	r2, [sp, #8]
 801a97e:	2a00      	cmp	r2, #0
 801a980:	f340 8127 	ble.w	801abd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801a984:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a986:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a98a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801a98e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a990:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a994:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a998:	2b00      	cmp	r3, #0
 801a99a:	dd0d      	ble.n	801a9b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a99c:	1422      	asrs	r2, r4, #16
 801a99e:	d405      	bmi.n	801a9ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a9a0:	4542      	cmp	r2, r8
 801a9a2:	da03      	bge.n	801a9ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a9a4:	1402      	asrs	r2, r0, #16
 801a9a6:	d401      	bmi.n	801a9ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a9a8:	42ba      	cmp	r2, r7
 801a9aa:	db06      	blt.n	801a9ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a9ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a9ae:	4474      	add	r4, lr
 801a9b0:	3b01      	subs	r3, #1
 801a9b2:	3503      	adds	r5, #3
 801a9b4:	4410      	add	r0, r2
 801a9b6:	e7ef      	b.n	801a998 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a9b8:	d075      	beq.n	801aaa6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a9ba:	1e5a      	subs	r2, r3, #1
 801a9bc:	fb0e 4602 	mla	r6, lr, r2, r4
 801a9c0:	1436      	asrs	r6, r6, #16
 801a9c2:	d465      	bmi.n	801aa90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a9c4:	4546      	cmp	r6, r8
 801a9c6:	da63      	bge.n	801aa90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a9c8:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801a9ca:	fb06 0202 	mla	r2, r6, r2, r0
 801a9ce:	1412      	asrs	r2, r2, #16
 801a9d0:	d45e      	bmi.n	801aa90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a9d2:	42ba      	cmp	r2, r7
 801a9d4:	da5c      	bge.n	801aa90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a9d6:	1cef      	adds	r7, r5, #3
 801a9d8:	4699      	mov	r9, r3
 801a9da:	f1b9 0f00 	cmp.w	r9, #0
 801a9de:	dd5d      	ble.n	801aa9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801a9e0:	1402      	asrs	r2, r0, #16
 801a9e2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a9e6:	1426      	asrs	r6, r4, #16
 801a9e8:	4692      	mov	sl, r2
 801a9ea:	9a00      	ldr	r2, [sp, #0]
 801a9ec:	fb08 220a 	mla	r2, r8, sl, r2
 801a9f0:	5d92      	ldrb	r2, [r2, r6]
 801a9f2:	9e01      	ldr	r6, [sp, #4]
 801a9f4:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801a9f8:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801a9fc:	d041      	beq.n	801aa82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a9fe:	9a03      	ldr	r2, [sp, #12]
 801aa00:	fa5f fb86 	uxtb.w	fp, r6
 801aa04:	fb02 f808 	mul.w	r8, r2, r8
 801aa08:	f108 0201 	add.w	r2, r8, #1
 801aa0c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801aa10:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801aa14:	1212      	asrs	r2, r2, #8
 801aa16:	fa1f fa82 	uxth.w	sl, r2
 801aa1a:	43d2      	mvns	r2, r2
 801aa1c:	fb1b fb0a 	smulbb	fp, fp, sl
 801aa20:	b2d2      	uxtb	r2, r2
 801aa22:	fb08 b802 	mla	r8, r8, r2, fp
 801aa26:	fa1f f888 	uxth.w	r8, r8
 801aa2a:	f108 0b01 	add.w	fp, r8, #1
 801aa2e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801aa32:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801aa36:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801aa3a:	fb1b fb0a 	smulbb	fp, fp, sl
 801aa3e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aa42:	fb16 fa0a 	smulbb	sl, r6, sl
 801aa46:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801aa4a:	f807 8c03 	strb.w	r8, [r7, #-3]
 801aa4e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801aa52:	fb06 aa02 	mla	sl, r6, r2, sl
 801aa56:	fb08 b802 	mla	r8, r8, r2, fp
 801aa5a:	fa1f fa8a 	uxth.w	sl, sl
 801aa5e:	fa1f f888 	uxth.w	r8, r8
 801aa62:	f10a 0601 	add.w	r6, sl, #1
 801aa66:	f108 0b01 	add.w	fp, r8, #1
 801aa6a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801aa6e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801aa72:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aa76:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aa7a:	f807 ac01 	strb.w	sl, [r7, #-1]
 801aa7e:	f807 8c02 	strb.w	r8, [r7, #-2]
 801aa82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801aa84:	4474      	add	r4, lr
 801aa86:	3703      	adds	r7, #3
 801aa88:	f109 39ff 	add.w	r9, r9, #4294967295
 801aa8c:	4410      	add	r0, r2
 801aa8e:	e7a4      	b.n	801a9da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801aa90:	f04f 0800 	mov.w	r8, #0
 801aa94:	eba3 0208 	sub.w	r2, r3, r8
 801aa98:	2a00      	cmp	r2, #0
 801aa9a:	dc3b      	bgt.n	801ab14 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801aa9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aaa0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aaa4:	441d      	add	r5, r3
 801aaa6:	2900      	cmp	r1, #0
 801aaa8:	f340 8093 	ble.w	801abd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801aaac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aab2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aab6:	3901      	subs	r1, #1
 801aab8:	eeb0 6a62 	vmov.f32	s12, s5
 801aabc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aac0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aac4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aac8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801aacc:	eeb0 6a43 	vmov.f32	s12, s6
 801aad0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aad4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801aad8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aadc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aae0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aae4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aae8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aaec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aaf0:	ee12 2a90 	vmov	r2, s5
 801aaf4:	eef0 2a47 	vmov.f32	s5, s14
 801aaf8:	fb92 fef3 	sdiv	lr, r2, r3
 801aafc:	ee13 2a10 	vmov	r2, s6
 801ab00:	eeb0 3a67 	vmov.f32	s6, s15
 801ab04:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab08:	9a02      	ldr	r2, [sp, #8]
 801ab0a:	9312      	str	r3, [sp, #72]	@ 0x48
 801ab0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ab0e:	bf08      	it	eq
 801ab10:	4613      	moveq	r3, r2
 801ab12:	e731      	b.n	801a978 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ab14:	1427      	asrs	r7, r4, #16
 801ab16:	d456      	bmi.n	801abc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ab18:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ab1c:	42be      	cmp	r6, r7
 801ab1e:	dd52      	ble.n	801abc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ab20:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ab24:	d44f      	bmi.n	801abc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ab26:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ab2a:	454a      	cmp	r2, r9
 801ab2c:	dd4b      	ble.n	801abc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ab2e:	9a00      	ldr	r2, [sp, #0]
 801ab30:	b236      	sxth	r6, r6
 801ab32:	fb09 2606 	mla	r6, r9, r6, r2
 801ab36:	5df2      	ldrb	r2, [r6, r7]
 801ab38:	9e01      	ldr	r6, [sp, #4]
 801ab3a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801ab3e:	0e3a      	lsrs	r2, r7, #24
 801ab40:	d041      	beq.n	801abc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ab42:	9e03      	ldr	r6, [sp, #12]
 801ab44:	fa5f fb87 	uxtb.w	fp, r7
 801ab48:	4372      	muls	r2, r6
 801ab4a:	1c56      	adds	r6, r2, #1
 801ab4c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ab50:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801ab54:	1212      	asrs	r2, r2, #8
 801ab56:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ab5a:	fa1f fa82 	uxth.w	sl, r2
 801ab5e:	43d2      	mvns	r2, r2
 801ab60:	fb1b fb0a 	smulbb	fp, fp, sl
 801ab64:	b2d2      	uxtb	r2, r2
 801ab66:	fb09 b902 	mla	r9, r9, r2, fp
 801ab6a:	fa1f f989 	uxth.w	r9, r9
 801ab6e:	f109 0b01 	add.w	fp, r9, #1
 801ab72:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ab76:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ab7a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ab7e:	fb1b fb0a 	smulbb	fp, fp, sl
 801ab82:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ab86:	fb17 fa0a 	smulbb	sl, r7, sl
 801ab8a:	f805 9006 	strb.w	r9, [r5, r6]
 801ab8e:	442e      	add	r6, r5
 801ab90:	78b7      	ldrb	r7, [r6, #2]
 801ab92:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ab96:	fb07 aa02 	mla	sl, r7, r2, sl
 801ab9a:	fb09 b902 	mla	r9, r9, r2, fp
 801ab9e:	fa1f fa8a 	uxth.w	sl, sl
 801aba2:	fa1f f989 	uxth.w	r9, r9
 801aba6:	f10a 0701 	add.w	r7, sl, #1
 801abaa:	f109 0b01 	add.w	fp, r9, #1
 801abae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801abb2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801abb6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801abba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801abbe:	f886 a002 	strb.w	sl, [r6, #2]
 801abc2:	f886 9001 	strb.w	r9, [r6, #1]
 801abc6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801abc8:	4474      	add	r4, lr
 801abca:	f108 0801 	add.w	r8, r8, #1
 801abce:	4410      	add	r0, r2
 801abd0:	e760      	b.n	801aa94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801abd2:	b005      	add	sp, #20
 801abd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801abd8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abdc:	b085      	sub	sp, #20
 801abde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801abe2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801abe4:	9203      	str	r2, [sp, #12]
 801abe6:	6868      	ldr	r0, [r5, #4]
 801abe8:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801abec:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801abf0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801abf4:	fb00 2404 	mla	r4, r0, r4, r2
 801abf8:	682a      	ldr	r2, [r5, #0]
 801abfa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801abfe:	4414      	add	r4, r2
 801ac00:	f8dc 2000 	ldr.w	r2, [ip]
 801ac04:	9201      	str	r2, [sp, #4]
 801ac06:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ac0a:	3204      	adds	r2, #4
 801ac0c:	9202      	str	r2, [sp, #8]
 801ac0e:	2900      	cmp	r1, #0
 801ac10:	dc03      	bgt.n	801ac1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ac12:	9a03      	ldr	r2, [sp, #12]
 801ac14:	2a00      	cmp	r2, #0
 801ac16:	f340 8137 	ble.w	801ae88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ac1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ac1c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ac20:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ac24:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ac26:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ac2a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	dd0d      	ble.n	801ac4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ac32:	1405      	asrs	r5, r0, #16
 801ac34:	d405      	bmi.n	801ac42 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ac36:	4545      	cmp	r5, r8
 801ac38:	da03      	bge.n	801ac42 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ac3a:	1415      	asrs	r5, r2, #16
 801ac3c:	d401      	bmi.n	801ac42 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ac3e:	42bd      	cmp	r5, r7
 801ac40:	db06      	blt.n	801ac50 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ac42:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ac44:	4470      	add	r0, lr
 801ac46:	3b01      	subs	r3, #1
 801ac48:	3403      	adds	r4, #3
 801ac4a:	442a      	add	r2, r5
 801ac4c:	e7ef      	b.n	801ac2e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ac4e:	d070      	beq.n	801ad32 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801ac50:	1e5d      	subs	r5, r3, #1
 801ac52:	fb0e 0605 	mla	r6, lr, r5, r0
 801ac56:	1436      	asrs	r6, r6, #16
 801ac58:	d462      	bmi.n	801ad20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ac5a:	4546      	cmp	r6, r8
 801ac5c:	da60      	bge.n	801ad20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ac5e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801ac60:	fb06 2505 	mla	r5, r6, r5, r2
 801ac64:	142d      	asrs	r5, r5, #16
 801ac66:	d45b      	bmi.n	801ad20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ac68:	42bd      	cmp	r5, r7
 801ac6a:	da59      	bge.n	801ad20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ac6c:	1ce5      	adds	r5, r4, #3
 801ac6e:	469a      	mov	sl, r3
 801ac70:	f1ba 0f00 	cmp.w	sl, #0
 801ac74:	dd58      	ble.n	801ad28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801ac76:	1416      	asrs	r6, r2, #16
 801ac78:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ac7c:	1407      	asrs	r7, r0, #16
 801ac7e:	46b1      	mov	r9, r6
 801ac80:	9e01      	ldr	r6, [sp, #4]
 801ac82:	fb08 6609 	mla	r6, r8, r9, r6
 801ac86:	5df6      	ldrb	r6, [r6, r7]
 801ac88:	9f02      	ldr	r7, [sp, #8]
 801ac8a:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801ac8e:	0e37      	lsrs	r7, r6, #24
 801ac90:	2fff      	cmp	r7, #255	@ 0xff
 801ac92:	f000 80f0 	beq.w	801ae76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ac96:	fa5f f887 	uxtb.w	r8, r7
 801ac9a:	b3d7      	cbz	r7, 801ad12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ac9c:	fa1f f788 	uxth.w	r7, r8
 801aca0:	ea6f 0808 	mvn.w	r8, r8
 801aca4:	fa5f fb86 	uxtb.w	fp, r6
 801aca8:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801acac:	fa5f f888 	uxtb.w	r8, r8
 801acb0:	fb1b fb07 	smulbb	fp, fp, r7
 801acb4:	fb09 b908 	mla	r9, r9, r8, fp
 801acb8:	fa1f f989 	uxth.w	r9, r9
 801acbc:	f109 0b01 	add.w	fp, r9, #1
 801acc0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801acc4:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801acc8:	fb1b fb08 	smulbb	fp, fp, r8
 801accc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801acd0:	f805 9c03 	strb.w	r9, [r5, #-3]
 801acd4:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801acd8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801acdc:	fb09 b907 	mla	r9, r9, r7, fp
 801ace0:	fa1f f989 	uxth.w	r9, r9
 801ace4:	f109 0b01 	add.w	fp, r9, #1
 801ace8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801acec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801acf0:	f805 9c02 	strb.w	r9, [r5, #-2]
 801acf4:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801acf8:	fb19 f808 	smulbb	r8, r9, r8
 801acfc:	fb06 8607 	mla	r6, r6, r7, r8
 801ad00:	b2b6      	uxth	r6, r6
 801ad02:	f106 0801 	add.w	r8, r6, #1
 801ad06:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801ad0a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ad0e:	f805 8c01 	strb.w	r8, [r5, #-1]
 801ad12:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801ad14:	4470      	add	r0, lr
 801ad16:	3503      	adds	r5, #3
 801ad18:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ad1c:	4432      	add	r2, r6
 801ad1e:	e7a7      	b.n	801ac70 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ad20:	2600      	movs	r6, #0
 801ad22:	1b9d      	subs	r5, r3, r6
 801ad24:	2d00      	cmp	r5, #0
 801ad26:	dc3b      	bgt.n	801ada0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ad28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad30:	441c      	add	r4, r3
 801ad32:	2900      	cmp	r1, #0
 801ad34:	f340 80a8 	ble.w	801ae88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ad38:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad42:	3901      	subs	r1, #1
 801ad44:	eeb0 6a62 	vmov.f32	s12, s5
 801ad48:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ad4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ad50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad54:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ad58:	eeb0 6a43 	vmov.f32	s12, s6
 801ad5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad60:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ad64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ad68:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ad6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ad70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ad74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ad78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ad7c:	ee12 2a90 	vmov	r2, s5
 801ad80:	eef0 2a47 	vmov.f32	s5, s14
 801ad84:	fb92 fef3 	sdiv	lr, r2, r3
 801ad88:	ee13 2a10 	vmov	r2, s6
 801ad8c:	eeb0 3a67 	vmov.f32	s6, s15
 801ad90:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad94:	9a03      	ldr	r2, [sp, #12]
 801ad96:	9312      	str	r3, [sp, #72]	@ 0x48
 801ad98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad9a:	bf08      	it	eq
 801ad9c:	4613      	moveq	r3, r2
 801ad9e:	e736      	b.n	801ac0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ada0:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ada4:	d457      	bmi.n	801ae56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ada6:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801adaa:	4547      	cmp	r7, r8
 801adac:	dd53      	ble.n	801ae56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801adae:	ea5f 4922 	movs.w	r9, r2, asr #16
 801adb2:	d450      	bmi.n	801ae56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801adb4:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801adb8:	454d      	cmp	r5, r9
 801adba:	dd4c      	ble.n	801ae56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801adbc:	9d01      	ldr	r5, [sp, #4]
 801adbe:	b23f      	sxth	r7, r7
 801adc0:	fb09 5707 	mla	r7, r9, r7, r5
 801adc4:	f817 5008 	ldrb.w	r5, [r7, r8]
 801adc8:	9f02      	ldr	r7, [sp, #8]
 801adca:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801adce:	0e2f      	lsrs	r7, r5, #24
 801add0:	2fff      	cmp	r7, #255	@ 0xff
 801add2:	d045      	beq.n	801ae60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801add4:	fa5f f987 	uxtb.w	r9, r7
 801add8:	b3ef      	cbz	r7, 801ae56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801adda:	fa1f f889 	uxth.w	r8, r9
 801adde:	ea6f 0909 	mvn.w	r9, r9
 801ade2:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ade6:	fa5f fb85 	uxtb.w	fp, r5
 801adea:	f814 a007 	ldrb.w	sl, [r4, r7]
 801adee:	fa5f f989 	uxtb.w	r9, r9
 801adf2:	fb1b fb08 	smulbb	fp, fp, r8
 801adf6:	fb0a ba09 	mla	sl, sl, r9, fp
 801adfa:	fa1f fa8a 	uxth.w	sl, sl
 801adfe:	f10a 0b01 	add.w	fp, sl, #1
 801ae02:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ae06:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ae0a:	f804 a007 	strb.w	sl, [r4, r7]
 801ae0e:	4427      	add	r7, r4
 801ae10:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ae14:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801ae18:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ae1c:	fb1b fb09 	smulbb	fp, fp, r9
 801ae20:	fb0a ba08 	mla	sl, sl, r8, fp
 801ae24:	fa1f fa8a 	uxth.w	sl, sl
 801ae28:	f10a 0b01 	add.w	fp, sl, #1
 801ae2c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ae30:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ae34:	f887 a001 	strb.w	sl, [r7, #1]
 801ae38:	f897 a002 	ldrb.w	sl, [r7, #2]
 801ae3c:	fb1a f909 	smulbb	r9, sl, r9
 801ae40:	fb05 9508 	mla	r5, r5, r8, r9
 801ae44:	b2ad      	uxth	r5, r5
 801ae46:	f105 0901 	add.w	r9, r5, #1
 801ae4a:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801ae4e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ae52:	f887 9002 	strb.w	r9, [r7, #2]
 801ae56:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ae58:	4470      	add	r0, lr
 801ae5a:	3601      	adds	r6, #1
 801ae5c:	442a      	add	r2, r5
 801ae5e:	e760      	b.n	801ad22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801ae60:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ae64:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801ae68:	55e5      	strb	r5, [r4, r7]
 801ae6a:	4427      	add	r7, r4
 801ae6c:	0c2d      	lsrs	r5, r5, #16
 801ae6e:	f887 8001 	strb.w	r8, [r7, #1]
 801ae72:	70bd      	strb	r5, [r7, #2]
 801ae74:	e7ef      	b.n	801ae56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ae76:	0a37      	lsrs	r7, r6, #8
 801ae78:	f805 6c03 	strb.w	r6, [r5, #-3]
 801ae7c:	0c36      	lsrs	r6, r6, #16
 801ae7e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ae82:	f805 6c01 	strb.w	r6, [r5, #-1]
 801ae86:	e744      	b.n	801ad12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ae88:	b005      	add	sp, #20
 801ae8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ae8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae92:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801ae94:	9201      	str	r2, [sp, #4]
 801ae96:	6870      	ldr	r0, [r6, #4]
 801ae98:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801ae9c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801aea0:	fa1f fe85 	uxth.w	lr, r5
 801aea4:	43ed      	mvns	r5, r5
 801aea6:	f8dc 8000 	ldr.w	r8, [ip]
 801aeaa:	b2ed      	uxtb	r5, r5
 801aeac:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801aeb0:	fb00 2404 	mla	r4, r0, r4, r2
 801aeb4:	6832      	ldr	r2, [r6, #0]
 801aeb6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801aeba:	4414      	add	r4, r2
 801aebc:	2900      	cmp	r1, #0
 801aebe:	dc03      	bgt.n	801aec8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801aec0:	9a01      	ldr	r2, [sp, #4]
 801aec2:	2a00      	cmp	r2, #0
 801aec4:	f340 810d 	ble.w	801b0e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801aec8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801aeca:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801aece:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801aed2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aed4:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801aed8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801aedc:	2b00      	cmp	r3, #0
 801aede:	dd0e      	ble.n	801aefe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801aee0:	1406      	asrs	r6, r0, #16
 801aee2:	d405      	bmi.n	801aef0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801aee4:	4556      	cmp	r6, sl
 801aee6:	da03      	bge.n	801aef0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801aee8:	1416      	asrs	r6, r2, #16
 801aeea:	d401      	bmi.n	801aef0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801aeec:	454e      	cmp	r6, r9
 801aeee:	db07      	blt.n	801af00 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801aef0:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801aef2:	3b01      	subs	r3, #1
 801aef4:	3403      	adds	r4, #3
 801aef6:	4430      	add	r0, r6
 801aef8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801aefa:	4432      	add	r2, r6
 801aefc:	e7ee      	b.n	801aedc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801aefe:	d060      	beq.n	801afc2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801af00:	1e5e      	subs	r6, r3, #1
 801af02:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801af04:	fb07 0706 	mla	r7, r7, r6, r0
 801af08:	143f      	asrs	r7, r7, #16
 801af0a:	d451      	bmi.n	801afb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801af0c:	4557      	cmp	r7, sl
 801af0e:	da4f      	bge.n	801afb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801af10:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801af12:	fb07 2606 	mla	r6, r7, r6, r2
 801af16:	1436      	asrs	r6, r6, #16
 801af18:	d44a      	bmi.n	801afb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801af1a:	454e      	cmp	r6, r9
 801af1c:	da48      	bge.n	801afb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801af1e:	1ce6      	adds	r6, r4, #3
 801af20:	4699      	mov	r9, r3
 801af22:	f1b9 0f00 	cmp.w	r9, #0
 801af26:	f106 0603 	add.w	r6, r6, #3
 801af2a:	dd45      	ble.n	801afb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801af2c:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801af30:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801af34:	1417      	asrs	r7, r2, #16
 801af36:	f109 39ff 	add.w	r9, r9, #4294967295
 801af3a:	fb0b a707 	mla	r7, fp, r7, sl
 801af3e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801af42:	fb1b fb05 	smulbb	fp, fp, r5
 801af46:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801af4a:	eb08 0a07 	add.w	sl, r8, r7
 801af4e:	f818 7007 	ldrb.w	r7, [r8, r7]
 801af52:	fb07 b70e 	mla	r7, r7, lr, fp
 801af56:	b2bf      	uxth	r7, r7
 801af58:	f107 0b01 	add.w	fp, r7, #1
 801af5c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801af60:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801af64:	fb1b fb05 	smulbb	fp, fp, r5
 801af68:	123f      	asrs	r7, r7, #8
 801af6a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801af6e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801af72:	fb07 b70e 	mla	r7, r7, lr, fp
 801af76:	b2bf      	uxth	r7, r7
 801af78:	f107 0b01 	add.w	fp, r7, #1
 801af7c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801af80:	123f      	asrs	r7, r7, #8
 801af82:	f806 7c05 	strb.w	r7, [r6, #-5]
 801af86:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801af8a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801af8e:	fb1a fa05 	smulbb	sl, sl, r5
 801af92:	fb07 a70e 	mla	r7, r7, lr, sl
 801af96:	b2bf      	uxth	r7, r7
 801af98:	f107 0a01 	add.w	sl, r7, #1
 801af9c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801afa0:	123f      	asrs	r7, r7, #8
 801afa2:	f806 7c04 	strb.w	r7, [r6, #-4]
 801afa6:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801afa8:	4438      	add	r0, r7
 801afaa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801afac:	443a      	add	r2, r7
 801afae:	e7b8      	b.n	801af22 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801afb0:	2700      	movs	r7, #0
 801afb2:	1bde      	subs	r6, r3, r7
 801afb4:	2e00      	cmp	r6, #0
 801afb6:	dc3f      	bgt.n	801b038 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801afb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801afbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801afc0:	441c      	add	r4, r3
 801afc2:	2900      	cmp	r1, #0
 801afc4:	f340 808d 	ble.w	801b0e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801afc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801afcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801afce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801afd2:	3901      	subs	r1, #1
 801afd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801afd8:	eef0 6a62 	vmov.f32	s13, s5
 801afdc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801afe0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801afe4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801afe8:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801afec:	eef0 6a43 	vmov.f32	s13, s6
 801aff0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aff4:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801aff8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801affc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b000:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b004:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b008:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b00c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b010:	ee12 2a90 	vmov	r2, s5
 801b014:	eef0 2a47 	vmov.f32	s5, s14
 801b018:	fb92 f3f3 	sdiv	r3, r2, r3
 801b01c:	ee13 2a10 	vmov	r2, s6
 801b020:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b022:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b024:	eeb0 3a67 	vmov.f32	s6, s15
 801b028:	fb92 f3f3 	sdiv	r3, r2, r3
 801b02c:	9a01      	ldr	r2, [sp, #4]
 801b02e:	9310      	str	r3, [sp, #64]	@ 0x40
 801b030:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b032:	bf08      	it	eq
 801b034:	4613      	moveq	r3, r2
 801b036:	e741      	b.n	801aebc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b038:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b03c:	d44b      	bmi.n	801b0d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b03e:	f8dc b008 	ldr.w	fp, [ip, #8]
 801b042:	45cb      	cmp	fp, r9
 801b044:	dd47      	ble.n	801b0d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b046:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b04a:	d444      	bmi.n	801b0d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b04c:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801b050:	4556      	cmp	r6, sl
 801b052:	dd40      	ble.n	801b0d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b054:	fa0f f68b 	sxth.w	r6, fp
 801b058:	fb0a 9906 	mla	r9, sl, r6, r9
 801b05c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b060:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b064:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b068:	fb1b fb05 	smulbb	fp, fp, r5
 801b06c:	eb08 0a09 	add.w	sl, r8, r9
 801b070:	f818 9009 	ldrb.w	r9, [r8, r9]
 801b074:	fb09 b90e 	mla	r9, r9, lr, fp
 801b078:	fa1f f989 	uxth.w	r9, r9
 801b07c:	f109 0b01 	add.w	fp, r9, #1
 801b080:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b084:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b088:	f804 9006 	strb.w	r9, [r4, r6]
 801b08c:	4426      	add	r6, r4
 801b08e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b092:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b096:	fb1b fb05 	smulbb	fp, fp, r5
 801b09a:	fb09 b90e 	mla	r9, r9, lr, fp
 801b09e:	fa1f f989 	uxth.w	r9, r9
 801b0a2:	f109 0b01 	add.w	fp, r9, #1
 801b0a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b0aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b0ae:	f886 9001 	strb.w	r9, [r6, #1]
 801b0b2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b0b6:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b0ba:	fb1a fa05 	smulbb	sl, sl, r5
 801b0be:	fb09 a90e 	mla	r9, r9, lr, sl
 801b0c2:	fa1f f989 	uxth.w	r9, r9
 801b0c6:	f109 0a01 	add.w	sl, r9, #1
 801b0ca:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b0ce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b0d2:	f886 9002 	strb.w	r9, [r6, #2]
 801b0d6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801b0d8:	3701      	adds	r7, #1
 801b0da:	4430      	add	r0, r6
 801b0dc:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801b0de:	4432      	add	r2, r6
 801b0e0:	e767      	b.n	801afb2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801b0e2:	b003      	add	sp, #12
 801b0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b0e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0ec:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801b0ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b0f2:	9201      	str	r2, [sp, #4]
 801b0f4:	6868      	ldr	r0, [r5, #4]
 801b0f6:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801b0f8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801b0fc:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801b100:	fb00 2404 	mla	r4, r0, r4, r2
 801b104:	682a      	ldr	r2, [r5, #0]
 801b106:	f8d7 8000 	ldr.w	r8, [r7]
 801b10a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b10e:	4414      	add	r4, r2
 801b110:	2900      	cmp	r1, #0
 801b112:	dc03      	bgt.n	801b11c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b114:	9a01      	ldr	r2, [sp, #4]
 801b116:	2a00      	cmp	r2, #0
 801b118:	f340 80af 	ble.w	801b27a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801b11c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b11e:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801b122:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b126:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b128:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801b12c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b130:	2b00      	cmp	r3, #0
 801b132:	dd0c      	ble.n	801b14e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b134:	1405      	asrs	r5, r0, #16
 801b136:	d405      	bmi.n	801b144 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b138:	4555      	cmp	r5, sl
 801b13a:	da03      	bge.n	801b144 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b13c:	1415      	asrs	r5, r2, #16
 801b13e:	d401      	bmi.n	801b144 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b140:	454d      	cmp	r5, r9
 801b142:	db05      	blt.n	801b150 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b144:	4470      	add	r0, lr
 801b146:	4462      	add	r2, ip
 801b148:	3b01      	subs	r3, #1
 801b14a:	3403      	adds	r4, #3
 801b14c:	e7f0      	b.n	801b130 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b14e:	d038      	beq.n	801b1c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b150:	1e5d      	subs	r5, r3, #1
 801b152:	fb0e 0605 	mla	r6, lr, r5, r0
 801b156:	1436      	asrs	r6, r6, #16
 801b158:	d42a      	bmi.n	801b1b0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b15a:	4556      	cmp	r6, sl
 801b15c:	da28      	bge.n	801b1b0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b15e:	fb0c 2505 	mla	r5, ip, r5, r2
 801b162:	142d      	asrs	r5, r5, #16
 801b164:	d424      	bmi.n	801b1b0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b166:	454d      	cmp	r5, r9
 801b168:	da22      	bge.n	801b1b0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b16a:	1ce6      	adds	r6, r4, #3
 801b16c:	4699      	mov	r9, r3
 801b16e:	f1b9 0f00 	cmp.w	r9, #0
 801b172:	f106 0603 	add.w	r6, r6, #3
 801b176:	dd1f      	ble.n	801b1b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801b178:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801b17c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b180:	1415      	asrs	r5, r2, #16
 801b182:	4470      	add	r0, lr
 801b184:	4462      	add	r2, ip
 801b186:	f109 39ff 	add.w	r9, r9, #4294967295
 801b18a:	fb0b a505 	mla	r5, fp, r5, sl
 801b18e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b192:	eb08 0a05 	add.w	sl, r8, r5
 801b196:	f818 5005 	ldrb.w	r5, [r8, r5]
 801b19a:	f806 5c06 	strb.w	r5, [r6, #-6]
 801b19e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801b1a2:	f806 5c05 	strb.w	r5, [r6, #-5]
 801b1a6:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801b1aa:	f806 5c04 	strb.w	r5, [r6, #-4]
 801b1ae:	e7de      	b.n	801b16e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b1b0:	2600      	movs	r6, #0
 801b1b2:	1b9d      	subs	r5, r3, r6
 801b1b4:	2d00      	cmp	r5, #0
 801b1b6:	dc38      	bgt.n	801b22a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b1b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b1bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b1c0:	441c      	add	r4, r3
 801b1c2:	2900      	cmp	r1, #0
 801b1c4:	dd59      	ble.n	801b27a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801b1c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b1ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b1cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b1d0:	3901      	subs	r1, #1
 801b1d2:	eeb0 6a62 	vmov.f32	s12, s5
 801b1d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b1da:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b1de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b1e2:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801b1e6:	eeb0 6a43 	vmov.f32	s12, s6
 801b1ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b1ee:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801b1f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b1f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b1fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b1fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b202:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b206:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b20a:	ee12 2a90 	vmov	r2, s5
 801b20e:	eef0 2a47 	vmov.f32	s5, s14
 801b212:	fb92 fef3 	sdiv	lr, r2, r3
 801b216:	ee13 2a10 	vmov	r2, s6
 801b21a:	eeb0 3a67 	vmov.f32	s6, s15
 801b21e:	fb92 fcf3 	sdiv	ip, r2, r3
 801b222:	9a01      	ldr	r2, [sp, #4]
 801b224:	bf08      	it	eq
 801b226:	4613      	moveq	r3, r2
 801b228:	e772      	b.n	801b110 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801b22a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b22e:	d420      	bmi.n	801b272 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b230:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801b234:	45cb      	cmp	fp, r9
 801b236:	dd1c      	ble.n	801b272 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b238:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b23c:	d419      	bmi.n	801b272 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b23e:	68fd      	ldr	r5, [r7, #12]
 801b240:	4555      	cmp	r5, sl
 801b242:	dd16      	ble.n	801b272 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b244:	fa0f f58b 	sxth.w	r5, fp
 801b248:	fb0a 9505 	mla	r5, sl, r5, r9
 801b24c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b250:	f818 9005 	ldrb.w	r9, [r8, r5]
 801b254:	eb08 0b05 	add.w	fp, r8, r5
 801b258:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801b25c:	f804 9005 	strb.w	r9, [r4, r5]
 801b260:	4425      	add	r5, r4
 801b262:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801b266:	f885 9001 	strb.w	r9, [r5, #1]
 801b26a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b26e:	f885 9002 	strb.w	r9, [r5, #2]
 801b272:	4470      	add	r0, lr
 801b274:	4462      	add	r2, ip
 801b276:	3601      	adds	r6, #1
 801b278:	e79b      	b.n	801b1b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801b27a:	b003      	add	sp, #12
 801b27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b280 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b284:	b085      	sub	sp, #20
 801b286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b28a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b28c:	9202      	str	r2, [sp, #8]
 801b28e:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801b292:	6860      	ldr	r0, [r4, #4]
 801b294:	9203      	str	r2, [sp, #12]
 801b296:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801b29a:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801b29e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801b2a2:	fb00 2505 	mla	r5, r0, r5, r2
 801b2a6:	6822      	ldr	r2, [r4, #0]
 801b2a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b2ac:	4415      	add	r5, r2
 801b2ae:	f8dc 2000 	ldr.w	r2, [ip]
 801b2b2:	9201      	str	r2, [sp, #4]
 801b2b4:	2900      	cmp	r1, #0
 801b2b6:	dc03      	bgt.n	801b2c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b2b8:	9a02      	ldr	r2, [sp, #8]
 801b2ba:	2a00      	cmp	r2, #0
 801b2bc:	f340 8122 	ble.w	801b504 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b2c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b2c2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b2c6:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b2ca:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b2cc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b2d0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	dd0d      	ble.n	801b2f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b2d8:	1422      	asrs	r2, r4, #16
 801b2da:	d405      	bmi.n	801b2e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b2dc:	4542      	cmp	r2, r8
 801b2de:	da03      	bge.n	801b2e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b2e0:	1402      	asrs	r2, r0, #16
 801b2e2:	d401      	bmi.n	801b2e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b2e4:	42ba      	cmp	r2, r7
 801b2e6:	db06      	blt.n	801b2f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b2ea:	4474      	add	r4, lr
 801b2ec:	3b01      	subs	r3, #1
 801b2ee:	3503      	adds	r5, #3
 801b2f0:	4410      	add	r0, r2
 801b2f2:	e7ef      	b.n	801b2d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b2f4:	d072      	beq.n	801b3dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801b2f6:	1e5a      	subs	r2, r3, #1
 801b2f8:	fb0e 4602 	mla	r6, lr, r2, r4
 801b2fc:	1436      	asrs	r6, r6, #16
 801b2fe:	d462      	bmi.n	801b3c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b300:	4546      	cmp	r6, r8
 801b302:	da60      	bge.n	801b3c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b304:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801b306:	fb06 0202 	mla	r2, r6, r2, r0
 801b30a:	1412      	asrs	r2, r2, #16
 801b30c:	d45b      	bmi.n	801b3c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b30e:	42ba      	cmp	r2, r7
 801b310:	da59      	bge.n	801b3c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b312:	1cef      	adds	r7, r5, #3
 801b314:	4699      	mov	r9, r3
 801b316:	f1b9 0f00 	cmp.w	r9, #0
 801b31a:	dd5a      	ble.n	801b3d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b31c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b320:	1426      	asrs	r6, r4, #16
 801b322:	1402      	asrs	r2, r0, #16
 801b324:	fb08 6202 	mla	r2, r8, r2, r6
 801b328:	9e01      	ldr	r6, [sp, #4]
 801b32a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801b32e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801b332:	d041      	beq.n	801b3b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b334:	9a03      	ldr	r2, [sp, #12]
 801b336:	fa5f fb86 	uxtb.w	fp, r6
 801b33a:	fb02 f808 	mul.w	r8, r2, r8
 801b33e:	f108 0201 	add.w	r2, r8, #1
 801b342:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801b346:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801b34a:	1212      	asrs	r2, r2, #8
 801b34c:	fa1f fa82 	uxth.w	sl, r2
 801b350:	43d2      	mvns	r2, r2
 801b352:	fb1b fb0a 	smulbb	fp, fp, sl
 801b356:	b2d2      	uxtb	r2, r2
 801b358:	fb08 b802 	mla	r8, r8, r2, fp
 801b35c:	fa1f f888 	uxth.w	r8, r8
 801b360:	f108 0b01 	add.w	fp, r8, #1
 801b364:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b368:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b36c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b370:	fb1b fb0a 	smulbb	fp, fp, sl
 801b374:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b378:	fb16 fa0a 	smulbb	sl, r6, sl
 801b37c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b380:	f807 8c03 	strb.w	r8, [r7, #-3]
 801b384:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801b388:	fb06 aa02 	mla	sl, r6, r2, sl
 801b38c:	fb08 b802 	mla	r8, r8, r2, fp
 801b390:	fa1f fa8a 	uxth.w	sl, sl
 801b394:	fa1f f888 	uxth.w	r8, r8
 801b398:	f10a 0601 	add.w	r6, sl, #1
 801b39c:	f108 0b01 	add.w	fp, r8, #1
 801b3a0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b3a4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b3a8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b3ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b3b0:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b3b4:	f807 8c02 	strb.w	r8, [r7, #-2]
 801b3b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b3ba:	4474      	add	r4, lr
 801b3bc:	3703      	adds	r7, #3
 801b3be:	f109 39ff 	add.w	r9, r9, #4294967295
 801b3c2:	4410      	add	r0, r2
 801b3c4:	e7a7      	b.n	801b316 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3c6:	f04f 0800 	mov.w	r8, #0
 801b3ca:	eba3 0208 	sub.w	r2, r3, r8
 801b3ce:	2a00      	cmp	r2, #0
 801b3d0:	dc3b      	bgt.n	801b44a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801b3d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b3da:	441d      	add	r5, r3
 801b3dc:	2900      	cmp	r1, #0
 801b3de:	f340 8091 	ble.w	801b504 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b3e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b3e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3ec:	3901      	subs	r1, #1
 801b3ee:	eeb0 6a62 	vmov.f32	s12, s5
 801b3f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b3f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b3fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3fe:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b402:	eeb0 6a43 	vmov.f32	s12, s6
 801b406:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b40a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b40e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b412:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b416:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b41a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b41e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b422:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b426:	ee12 2a90 	vmov	r2, s5
 801b42a:	eef0 2a47 	vmov.f32	s5, s14
 801b42e:	fb92 fef3 	sdiv	lr, r2, r3
 801b432:	ee13 2a10 	vmov	r2, s6
 801b436:	eeb0 3a67 	vmov.f32	s6, s15
 801b43a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b43e:	9a02      	ldr	r2, [sp, #8]
 801b440:	9312      	str	r3, [sp, #72]	@ 0x48
 801b442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b444:	bf08      	it	eq
 801b446:	4613      	moveq	r3, r2
 801b448:	e734      	b.n	801b2b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b44a:	1427      	asrs	r7, r4, #16
 801b44c:	d454      	bmi.n	801b4f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b44e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b452:	42be      	cmp	r6, r7
 801b454:	dd50      	ble.n	801b4f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b456:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b45a:	d44d      	bmi.n	801b4f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b45c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b460:	454a      	cmp	r2, r9
 801b462:	dd49      	ble.n	801b4f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b464:	b236      	sxth	r6, r6
 801b466:	9a01      	ldr	r2, [sp, #4]
 801b468:	fb09 7606 	mla	r6, r9, r6, r7
 801b46c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801b470:	0e3a      	lsrs	r2, r7, #24
 801b472:	d041      	beq.n	801b4f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b474:	9e03      	ldr	r6, [sp, #12]
 801b476:	fa5f fb87 	uxtb.w	fp, r7
 801b47a:	4372      	muls	r2, r6
 801b47c:	1c56      	adds	r6, r2, #1
 801b47e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b482:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801b486:	1212      	asrs	r2, r2, #8
 801b488:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b48c:	fa1f fa82 	uxth.w	sl, r2
 801b490:	43d2      	mvns	r2, r2
 801b492:	fb1b fb0a 	smulbb	fp, fp, sl
 801b496:	b2d2      	uxtb	r2, r2
 801b498:	fb09 b902 	mla	r9, r9, r2, fp
 801b49c:	fa1f f989 	uxth.w	r9, r9
 801b4a0:	f109 0b01 	add.w	fp, r9, #1
 801b4a4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b4a8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b4ac:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b4b0:	fb1b fb0a 	smulbb	fp, fp, sl
 801b4b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b4b8:	fb17 fa0a 	smulbb	sl, r7, sl
 801b4bc:	f805 9006 	strb.w	r9, [r5, r6]
 801b4c0:	442e      	add	r6, r5
 801b4c2:	78b7      	ldrb	r7, [r6, #2]
 801b4c4:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b4c8:	fb07 aa02 	mla	sl, r7, r2, sl
 801b4cc:	fb09 b902 	mla	r9, r9, r2, fp
 801b4d0:	fa1f fa8a 	uxth.w	sl, sl
 801b4d4:	fa1f f989 	uxth.w	r9, r9
 801b4d8:	f10a 0701 	add.w	r7, sl, #1
 801b4dc:	f109 0b01 	add.w	fp, r9, #1
 801b4e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b4e4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b4e8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b4ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b4f0:	f886 a002 	strb.w	sl, [r6, #2]
 801b4f4:	f886 9001 	strb.w	r9, [r6, #1]
 801b4f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b4fa:	4474      	add	r4, lr
 801b4fc:	f108 0801 	add.w	r8, r8, #1
 801b500:	4410      	add	r0, r2
 801b502:	e762      	b.n	801b3ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b504:	b005      	add	sp, #20
 801b506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b50a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b50a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b50e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b510:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b514:	9201      	str	r2, [sp, #4]
 801b516:	6860      	ldr	r0, [r4, #4]
 801b518:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801b51c:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801b520:	fb00 2505 	mla	r5, r0, r5, r2
 801b524:	6822      	ldr	r2, [r4, #0]
 801b526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b52a:	4415      	add	r5, r2
 801b52c:	f8dc 2000 	ldr.w	r2, [ip]
 801b530:	9200      	str	r2, [sp, #0]
 801b532:	2900      	cmp	r1, #0
 801b534:	dc03      	bgt.n	801b53e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b536:	9a01      	ldr	r2, [sp, #4]
 801b538:	2a00      	cmp	r2, #0
 801b53a:	f340 812b 	ble.w	801b794 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b53e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b540:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b544:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b54a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b54e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b552:	2b00      	cmp	r3, #0
 801b554:	dd0e      	ble.n	801b574 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b556:	1422      	asrs	r2, r4, #16
 801b558:	d405      	bmi.n	801b566 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b55a:	4572      	cmp	r2, lr
 801b55c:	da03      	bge.n	801b566 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b55e:	1402      	asrs	r2, r0, #16
 801b560:	d401      	bmi.n	801b566 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b562:	42ba      	cmp	r2, r7
 801b564:	db07      	blt.n	801b576 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b566:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b568:	3b01      	subs	r3, #1
 801b56a:	3503      	adds	r5, #3
 801b56c:	4414      	add	r4, r2
 801b56e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b570:	4410      	add	r0, r2
 801b572:	e7ee      	b.n	801b552 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b574:	d06f      	beq.n	801b656 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b576:	1e5a      	subs	r2, r3, #1
 801b578:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801b57a:	fb06 4602 	mla	r6, r6, r2, r4
 801b57e:	1436      	asrs	r6, r6, #16
 801b580:	d45e      	bmi.n	801b640 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b582:	4576      	cmp	r6, lr
 801b584:	da5c      	bge.n	801b640 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b586:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801b588:	fb06 0202 	mla	r2, r6, r2, r0
 801b58c:	1412      	asrs	r2, r2, #16
 801b58e:	d457      	bmi.n	801b640 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b590:	42ba      	cmp	r2, r7
 801b592:	da55      	bge.n	801b640 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b594:	1cee      	adds	r6, r5, #3
 801b596:	469a      	mov	sl, r3
 801b598:	f1ba 0f00 	cmp.w	sl, #0
 801b59c:	dd56      	ble.n	801b64c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b59e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b5a2:	1427      	asrs	r7, r4, #16
 801b5a4:	1402      	asrs	r2, r0, #16
 801b5a6:	fb0e 7202 	mla	r2, lr, r2, r7
 801b5aa:	9f00      	ldr	r7, [sp, #0]
 801b5ac:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801b5b0:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801b5b4:	d03c      	beq.n	801b630 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b5b6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801b5ba:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b5be:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b5c2:	fa5f f28e 	uxtb.w	r2, lr
 801b5c6:	b2ff      	uxtb	r7, r7
 801b5c8:	f000 80dd 	beq.w	801b786 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b5cc:	fa1f f882 	uxth.w	r8, r2
 801b5d0:	43d2      	mvns	r2, r2
 801b5d2:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801b5d6:	fb17 f708 	smulbb	r7, r7, r8
 801b5da:	b2d2      	uxtb	r2, r2
 801b5dc:	fb19 f908 	smulbb	r9, r9, r8
 801b5e0:	fb0e 7702 	mla	r7, lr, r2, r7
 801b5e4:	fb1b f808 	smulbb	r8, fp, r8
 801b5e8:	b2bf      	uxth	r7, r7
 801b5ea:	f107 0e01 	add.w	lr, r7, #1
 801b5ee:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b5f2:	123f      	asrs	r7, r7, #8
 801b5f4:	f806 7c03 	strb.w	r7, [r6, #-3]
 801b5f8:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801b5fc:	fb07 9902 	mla	r9, r7, r2, r9
 801b600:	fa1f f989 	uxth.w	r9, r9
 801b604:	f109 0701 	add.w	r7, r9, #1
 801b608:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801b60c:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801b610:	fb07 8802 	mla	r8, r7, r2, r8
 801b614:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b618:	fa1f f888 	uxth.w	r8, r8
 801b61c:	f806 9c02 	strb.w	r9, [r6, #-2]
 801b620:	f108 0201 	add.w	r2, r8, #1
 801b624:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b628:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b62c:	f806 8c01 	strb.w	r8, [r6, #-1]
 801b630:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b632:	3603      	adds	r6, #3
 801b634:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b638:	4414      	add	r4, r2
 801b63a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b63c:	4410      	add	r0, r2
 801b63e:	e7ab      	b.n	801b598 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b640:	f04f 0e00 	mov.w	lr, #0
 801b644:	eba3 020e 	sub.w	r2, r3, lr
 801b648:	2a00      	cmp	r2, #0
 801b64a:	dc3d      	bgt.n	801b6c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801b64c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b650:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b654:	441d      	add	r5, r3
 801b656:	2900      	cmp	r1, #0
 801b658:	f340 809c 	ble.w	801b794 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b65c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b662:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b666:	3901      	subs	r1, #1
 801b668:	eeb0 6a62 	vmov.f32	s12, s5
 801b66c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b670:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b674:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b678:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801b67c:	eeb0 6a43 	vmov.f32	s12, s6
 801b680:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b684:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801b688:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b68c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b690:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b694:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b698:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b69c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b6a0:	ee12 2a90 	vmov	r2, s5
 801b6a4:	eef0 2a47 	vmov.f32	s5, s14
 801b6a8:	fb92 f3f3 	sdiv	r3, r2, r3
 801b6ac:	ee13 2a10 	vmov	r2, s6
 801b6b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b6b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b6b4:	eeb0 3a67 	vmov.f32	s6, s15
 801b6b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801b6bc:	9a01      	ldr	r2, [sp, #4]
 801b6be:	9310      	str	r3, [sp, #64]	@ 0x40
 801b6c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b6c2:	bf08      	it	eq
 801b6c4:	4613      	moveq	r3, r2
 801b6c6:	e734      	b.n	801b532 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801b6c8:	1427      	asrs	r7, r4, #16
 801b6ca:	d44d      	bmi.n	801b768 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b6cc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b6d0:	42be      	cmp	r6, r7
 801b6d2:	dd49      	ble.n	801b768 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b6d4:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b6d8:	d446      	bmi.n	801b768 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b6da:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b6de:	4542      	cmp	r2, r8
 801b6e0:	dd42      	ble.n	801b768 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b6e2:	b236      	sxth	r6, r6
 801b6e4:	9a00      	ldr	r2, [sp, #0]
 801b6e6:	fb08 7606 	mla	r6, r8, r6, r7
 801b6ea:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801b6ee:	0e3a      	lsrs	r2, r7, #24
 801b6f0:	d03a      	beq.n	801b768 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b6f2:	2aff      	cmp	r2, #255	@ 0xff
 801b6f4:	b2d6      	uxtb	r6, r2
 801b6f6:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b6fa:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801b6fe:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801b702:	b2ff      	uxtb	r7, r7
 801b704:	d037      	beq.n	801b776 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801b706:	fa1f f986 	uxth.w	r9, r6
 801b70a:	4472      	add	r2, lr
 801b70c:	43f6      	mvns	r6, r6
 801b70e:	f815 8002 	ldrb.w	r8, [r5, r2]
 801b712:	fb17 f709 	smulbb	r7, r7, r9
 801b716:	fb1a fa09 	smulbb	sl, sl, r9
 801b71a:	b2f6      	uxtb	r6, r6
 801b71c:	fb1b f909 	smulbb	r9, fp, r9
 801b720:	fb08 7706 	mla	r7, r8, r6, r7
 801b724:	b2bf      	uxth	r7, r7
 801b726:	f107 0801 	add.w	r8, r7, #1
 801b72a:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801b72e:	123f      	asrs	r7, r7, #8
 801b730:	54af      	strb	r7, [r5, r2]
 801b732:	442a      	add	r2, r5
 801b734:	7857      	ldrb	r7, [r2, #1]
 801b736:	fb07 aa06 	mla	sl, r7, r6, sl
 801b73a:	fa1f fa8a 	uxth.w	sl, sl
 801b73e:	f10a 0701 	add.w	r7, sl, #1
 801b742:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b746:	7897      	ldrb	r7, [r2, #2]
 801b748:	fb07 9906 	mla	r9, r7, r6, r9
 801b74c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b750:	fa1f f989 	uxth.w	r9, r9
 801b754:	f882 a001 	strb.w	sl, [r2, #1]
 801b758:	f109 0601 	add.w	r6, r9, #1
 801b75c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801b760:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b764:	f882 9002 	strb.w	r9, [r2, #2]
 801b768:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b76a:	f10e 0e01 	add.w	lr, lr, #1
 801b76e:	4414      	add	r4, r2
 801b770:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b772:	4410      	add	r0, r2
 801b774:	e766      	b.n	801b644 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b776:	4472      	add	r2, lr
 801b778:	54af      	strb	r7, [r5, r2]
 801b77a:	442a      	add	r2, r5
 801b77c:	f882 a001 	strb.w	sl, [r2, #1]
 801b780:	f882 b002 	strb.w	fp, [r2, #2]
 801b784:	e7f0      	b.n	801b768 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b786:	f806 7c03 	strb.w	r7, [r6, #-3]
 801b78a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801b78e:	f806 bc01 	strb.w	fp, [r6, #-1]
 801b792:	e74d      	b.n	801b630 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b794:	b003      	add	sp, #12
 801b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b79c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7a0:	b087      	sub	sp, #28
 801b7a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b7a6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b7a8:	9204      	str	r2, [sp, #16]
 801b7aa:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801b7ae:	6860      	ldr	r0, [r4, #4]
 801b7b0:	9205      	str	r2, [sp, #20]
 801b7b2:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801b7b6:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801b7ba:	9101      	str	r1, [sp, #4]
 801b7bc:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801b7c0:	fb00 2505 	mla	r5, r0, r5, r2
 801b7c4:	6822      	ldr	r2, [r4, #0]
 801b7c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b7ca:	4415      	add	r5, r2
 801b7cc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b7d0:	3201      	adds	r2, #1
 801b7d2:	f022 0201 	bic.w	r2, r2, #1
 801b7d6:	9202      	str	r2, [sp, #8]
 801b7d8:	f8dc 2000 	ldr.w	r2, [ip]
 801b7dc:	9203      	str	r2, [sp, #12]
 801b7de:	9a01      	ldr	r2, [sp, #4]
 801b7e0:	2a00      	cmp	r2, #0
 801b7e2:	dc03      	bgt.n	801b7ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b7e4:	9a04      	ldr	r2, [sp, #16]
 801b7e6:	2a00      	cmp	r2, #0
 801b7e8:	f340 8135 	ble.w	801ba56 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b7ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b7ee:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b7f2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b7f6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b7f8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b7fc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b800:	2b00      	cmp	r3, #0
 801b802:	dd0d      	ble.n	801b820 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b804:	1422      	asrs	r2, r4, #16
 801b806:	d405      	bmi.n	801b814 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b808:	4542      	cmp	r2, r8
 801b80a:	da03      	bge.n	801b814 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b80c:	1402      	asrs	r2, r0, #16
 801b80e:	d401      	bmi.n	801b814 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b810:	42ba      	cmp	r2, r7
 801b812:	db06      	blt.n	801b822 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b814:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b816:	4474      	add	r4, lr
 801b818:	3b01      	subs	r3, #1
 801b81a:	3503      	adds	r5, #3
 801b81c:	4410      	add	r0, r2
 801b81e:	e7ef      	b.n	801b800 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b820:	d077      	beq.n	801b912 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801b822:	1e5a      	subs	r2, r3, #1
 801b824:	fb0e 4602 	mla	r6, lr, r2, r4
 801b828:	1436      	asrs	r6, r6, #16
 801b82a:	d469      	bmi.n	801b900 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b82c:	4546      	cmp	r6, r8
 801b82e:	da67      	bge.n	801b900 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b830:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b832:	fb06 0202 	mla	r2, r6, r2, r0
 801b836:	1412      	asrs	r2, r2, #16
 801b838:	d462      	bmi.n	801b900 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b83a:	42ba      	cmp	r2, r7
 801b83c:	da60      	bge.n	801b900 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b83e:	1cee      	adds	r6, r5, #3
 801b840:	4699      	mov	r9, r3
 801b842:	f1b9 0f00 	cmp.w	r9, #0
 801b846:	dd5f      	ble.n	801b908 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b848:	1422      	asrs	r2, r4, #16
 801b84a:	9902      	ldr	r1, [sp, #8]
 801b84c:	1407      	asrs	r7, r0, #16
 801b84e:	fb01 2707 	mla	r7, r1, r7, r2
 801b852:	9903      	ldr	r1, [sp, #12]
 801b854:	087a      	lsrs	r2, r7, #1
 801b856:	5c8a      	ldrb	r2, [r1, r2]
 801b858:	07f9      	lsls	r1, r7, #31
 801b85a:	bf54      	ite	pl
 801b85c:	f002 020f 	andpl.w	r2, r2, #15
 801b860:	1112      	asrmi	r2, r2, #4
 801b862:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b866:	b2d2      	uxtb	r2, r2
 801b868:	2a00      	cmp	r2, #0
 801b86a:	d042      	beq.n	801b8f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b86c:	497b      	ldr	r1, [pc, #492]	@ (801ba5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801b86e:	680f      	ldr	r7, [r1, #0]
 801b870:	9905      	ldr	r1, [sp, #20]
 801b872:	fa5f fb87 	uxtb.w	fp, r7
 801b876:	434a      	muls	r2, r1
 801b878:	f102 0801 	add.w	r8, r2, #1
 801b87c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801b880:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801b884:	1212      	asrs	r2, r2, #8
 801b886:	fa1f fa82 	uxth.w	sl, r2
 801b88a:	43d2      	mvns	r2, r2
 801b88c:	fb1b fb0a 	smulbb	fp, fp, sl
 801b890:	b2d2      	uxtb	r2, r2
 801b892:	fb08 b802 	mla	r8, r8, r2, fp
 801b896:	fa1f f888 	uxth.w	r8, r8
 801b89a:	f108 0b01 	add.w	fp, r8, #1
 801b89e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b8a2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b8a6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b8aa:	fb1b fb0a 	smulbb	fp, fp, sl
 801b8ae:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b8b2:	fb17 fa0a 	smulbb	sl, r7, sl
 801b8b6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801b8ba:	f806 8c03 	strb.w	r8, [r6, #-3]
 801b8be:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801b8c2:	fb07 aa02 	mla	sl, r7, r2, sl
 801b8c6:	fb08 b802 	mla	r8, r8, r2, fp
 801b8ca:	fa1f fa8a 	uxth.w	sl, sl
 801b8ce:	fa1f f888 	uxth.w	r8, r8
 801b8d2:	f10a 0701 	add.w	r7, sl, #1
 801b8d6:	f108 0b01 	add.w	fp, r8, #1
 801b8da:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b8de:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b8e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b8e6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b8ea:	f806 ac01 	strb.w	sl, [r6, #-1]
 801b8ee:	f806 8c02 	strb.w	r8, [r6, #-2]
 801b8f2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b8f4:	4474      	add	r4, lr
 801b8f6:	3603      	adds	r6, #3
 801b8f8:	f109 39ff 	add.w	r9, r9, #4294967295
 801b8fc:	4410      	add	r0, r2
 801b8fe:	e7a0      	b.n	801b842 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b900:	2700      	movs	r7, #0
 801b902:	1bda      	subs	r2, r3, r7
 801b904:	2a00      	cmp	r2, #0
 801b906:	dc3e      	bgt.n	801b986 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b908:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b90c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b910:	441d      	add	r5, r3
 801b912:	9b01      	ldr	r3, [sp, #4]
 801b914:	2b00      	cmp	r3, #0
 801b916:	f340 809e 	ble.w	801ba56 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b91a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b91e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b920:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b924:	eeb0 6a62 	vmov.f32	s12, s5
 801b928:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b92c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b930:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b934:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801b938:	eeb0 6a43 	vmov.f32	s12, s6
 801b93c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b940:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801b944:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b948:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b94c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b950:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b954:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b958:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b95c:	ee12 2a90 	vmov	r2, s5
 801b960:	eef0 2a47 	vmov.f32	s5, s14
 801b964:	fb92 fef3 	sdiv	lr, r2, r3
 801b968:	ee13 2a10 	vmov	r2, s6
 801b96c:	eeb0 3a67 	vmov.f32	s6, s15
 801b970:	fb92 f3f3 	sdiv	r3, r2, r3
 801b974:	9314      	str	r3, [sp, #80]	@ 0x50
 801b976:	9b01      	ldr	r3, [sp, #4]
 801b978:	9a04      	ldr	r2, [sp, #16]
 801b97a:	3b01      	subs	r3, #1
 801b97c:	9301      	str	r3, [sp, #4]
 801b97e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b980:	bf08      	it	eq
 801b982:	4613      	moveq	r3, r2
 801b984:	e72b      	b.n	801b7de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801b986:	1426      	asrs	r6, r4, #16
 801b988:	d460      	bmi.n	801ba4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b98a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b98e:	42b2      	cmp	r2, r6
 801b990:	dd5c      	ble.n	801ba4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b992:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b996:	d459      	bmi.n	801ba4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b998:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b99c:	4542      	cmp	r2, r8
 801b99e:	dd55      	ble.n	801ba4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b9a0:	9a02      	ldr	r2, [sp, #8]
 801b9a2:	9903      	ldr	r1, [sp, #12]
 801b9a4:	fb08 6602 	mla	r6, r8, r2, r6
 801b9a8:	0872      	lsrs	r2, r6, #1
 801b9aa:	07f6      	lsls	r6, r6, #31
 801b9ac:	5c8a      	ldrb	r2, [r1, r2]
 801b9ae:	bf54      	ite	pl
 801b9b0:	f002 020f 	andpl.w	r2, r2, #15
 801b9b4:	1112      	asrmi	r2, r2, #4
 801b9b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b9ba:	b2d2      	uxtb	r2, r2
 801b9bc:	2a00      	cmp	r2, #0
 801b9be:	d045      	beq.n	801ba4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b9c0:	4926      	ldr	r1, [pc, #152]	@ (801ba5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801b9c2:	f8d1 8000 	ldr.w	r8, [r1]
 801b9c6:	9905      	ldr	r1, [sp, #20]
 801b9c8:	fa5f fb88 	uxtb.w	fp, r8
 801b9cc:	434a      	muls	r2, r1
 801b9ce:	1c56      	adds	r6, r2, #1
 801b9d0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b9d4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b9d8:	1212      	asrs	r2, r2, #8
 801b9da:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b9de:	fa1f fa82 	uxth.w	sl, r2
 801b9e2:	43d2      	mvns	r2, r2
 801b9e4:	fb1b fb0a 	smulbb	fp, fp, sl
 801b9e8:	b2d2      	uxtb	r2, r2
 801b9ea:	fb09 b902 	mla	r9, r9, r2, fp
 801b9ee:	fa1f f989 	uxth.w	r9, r9
 801b9f2:	f109 0b01 	add.w	fp, r9, #1
 801b9f6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b9fa:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801b9fe:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801ba02:	fb1b fb0a 	smulbb	fp, fp, sl
 801ba06:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ba0a:	fb18 fa0a 	smulbb	sl, r8, sl
 801ba0e:	f805 9006 	strb.w	r9, [r5, r6]
 801ba12:	442e      	add	r6, r5
 801ba14:	f896 8002 	ldrb.w	r8, [r6, #2]
 801ba18:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ba1c:	fb08 aa02 	mla	sl, r8, r2, sl
 801ba20:	fb09 b902 	mla	r9, r9, r2, fp
 801ba24:	fa1f fa8a 	uxth.w	sl, sl
 801ba28:	fa1f f989 	uxth.w	r9, r9
 801ba2c:	f10a 0801 	add.w	r8, sl, #1
 801ba30:	f109 0b01 	add.w	fp, r9, #1
 801ba34:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801ba38:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ba3c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ba40:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ba44:	f886 a002 	strb.w	sl, [r6, #2]
 801ba48:	f886 9001 	strb.w	r9, [r6, #1]
 801ba4c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ba4e:	4474      	add	r4, lr
 801ba50:	3701      	adds	r7, #1
 801ba52:	4410      	add	r0, r2
 801ba54:	e755      	b.n	801b902 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801ba56:	b007      	add	sp, #28
 801ba58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba5c:	24028e3c 	.word	0x24028e3c

0801ba60 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ba60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba64:	b085      	sub	sp, #20
 801ba66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ba6a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ba6c:	9203      	str	r2, [sp, #12]
 801ba6e:	6860      	ldr	r0, [r4, #4]
 801ba70:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ba74:	9100      	str	r1, [sp, #0]
 801ba76:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801ba7a:	fb00 2606 	mla	r6, r0, r6, r2
 801ba7e:	6822      	ldr	r2, [r4, #0]
 801ba80:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ba84:	4416      	add	r6, r2
 801ba86:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ba8a:	3201      	adds	r2, #1
 801ba8c:	f022 0201 	bic.w	r2, r2, #1
 801ba90:	9201      	str	r2, [sp, #4]
 801ba92:	f8dc 2000 	ldr.w	r2, [ip]
 801ba96:	9202      	str	r2, [sp, #8]
 801ba98:	9a00      	ldr	r2, [sp, #0]
 801ba9a:	2a00      	cmp	r2, #0
 801ba9c:	dc03      	bgt.n	801baa6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ba9e:	9a03      	ldr	r2, [sp, #12]
 801baa0:	2a00      	cmp	r2, #0
 801baa2:	f340 8140 	ble.w	801bd26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801baa6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801baa8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801baac:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801bab0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bab2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bab6:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801baba:	2b00      	cmp	r3, #0
 801babc:	dd0e      	ble.n	801badc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801babe:	142a      	asrs	r2, r5, #16
 801bac0:	d405      	bmi.n	801bace <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bac2:	4572      	cmp	r2, lr
 801bac4:	da03      	bge.n	801bace <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bac6:	1422      	asrs	r2, r4, #16
 801bac8:	d401      	bmi.n	801bace <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801baca:	42ba      	cmp	r2, r7
 801bacc:	db07      	blt.n	801bade <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bace:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bad0:	3b01      	subs	r3, #1
 801bad2:	3603      	adds	r6, #3
 801bad4:	4415      	add	r5, r2
 801bad6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bad8:	4414      	add	r4, r2
 801bada:	e7ee      	b.n	801baba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801badc:	d072      	beq.n	801bbc4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bade:	1e5a      	subs	r2, r3, #1
 801bae0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801bae2:	fb00 5002 	mla	r0, r0, r2, r5
 801bae6:	1400      	asrs	r0, r0, #16
 801bae8:	d463      	bmi.n	801bbb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801baea:	4570      	cmp	r0, lr
 801baec:	da61      	bge.n	801bbb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801baee:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801baf0:	fb00 4202 	mla	r2, r0, r2, r4
 801baf4:	1412      	asrs	r2, r2, #16
 801baf6:	d45c      	bmi.n	801bbb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801baf8:	42ba      	cmp	r2, r7
 801bafa:	da5a      	bge.n	801bbb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801bafc:	1cf0      	adds	r0, r6, #3
 801bafe:	469a      	mov	sl, r3
 801bb00:	f1ba 0f00 	cmp.w	sl, #0
 801bb04:	dd59      	ble.n	801bbba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801bb06:	142a      	asrs	r2, r5, #16
 801bb08:	9901      	ldr	r1, [sp, #4]
 801bb0a:	1427      	asrs	r7, r4, #16
 801bb0c:	fb01 2707 	mla	r7, r1, r7, r2
 801bb10:	9902      	ldr	r1, [sp, #8]
 801bb12:	087a      	lsrs	r2, r7, #1
 801bb14:	5c8a      	ldrb	r2, [r1, r2]
 801bb16:	07f9      	lsls	r1, r7, #31
 801bb18:	bf54      	ite	pl
 801bb1a:	f002 020f 	andpl.w	r2, r2, #15
 801bb1e:	1112      	asrmi	r2, r2, #4
 801bb20:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bb24:	b2d2      	uxtb	r2, r2
 801bb26:	2a00      	cmp	r2, #0
 801bb28:	d03b      	beq.n	801bba2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801bb2a:	4980      	ldr	r1, [pc, #512]	@ (801bd2c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801bb2c:	2aff      	cmp	r2, #255	@ 0xff
 801bb2e:	680f      	ldr	r7, [r1, #0]
 801bb30:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801bb34:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801bb38:	b2ff      	uxtb	r7, r7
 801bb3a:	f000 80ed 	beq.w	801bd18 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801bb3e:	fa1f f882 	uxth.w	r8, r2
 801bb42:	43d2      	mvns	r2, r2
 801bb44:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801bb48:	fb17 f708 	smulbb	r7, r7, r8
 801bb4c:	b2d2      	uxtb	r2, r2
 801bb4e:	fb19 f908 	smulbb	r9, r9, r8
 801bb52:	fb0e 7702 	mla	r7, lr, r2, r7
 801bb56:	fb1b f808 	smulbb	r8, fp, r8
 801bb5a:	b2bf      	uxth	r7, r7
 801bb5c:	f107 0e01 	add.w	lr, r7, #1
 801bb60:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801bb64:	123f      	asrs	r7, r7, #8
 801bb66:	f800 7c03 	strb.w	r7, [r0, #-3]
 801bb6a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801bb6e:	fb07 9902 	mla	r9, r7, r2, r9
 801bb72:	fa1f f989 	uxth.w	r9, r9
 801bb76:	f109 0701 	add.w	r7, r9, #1
 801bb7a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801bb7e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801bb82:	fb07 8802 	mla	r8, r7, r2, r8
 801bb86:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bb8a:	fa1f f888 	uxth.w	r8, r8
 801bb8e:	f800 9c02 	strb.w	r9, [r0, #-2]
 801bb92:	f108 0201 	add.w	r2, r8, #1
 801bb96:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801bb9a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bb9e:	f800 8c01 	strb.w	r8, [r0, #-1]
 801bba2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bba4:	3003      	adds	r0, #3
 801bba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bbaa:	4415      	add	r5, r2
 801bbac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bbae:	4414      	add	r4, r2
 801bbb0:	e7a6      	b.n	801bb00 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bbb2:	2700      	movs	r7, #0
 801bbb4:	1bda      	subs	r2, r3, r7
 801bbb6:	2a00      	cmp	r2, #0
 801bbb8:	dc40      	bgt.n	801bc3c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801bbba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bbbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bbc2:	441e      	add	r6, r3
 801bbc4:	9b00      	ldr	r3, [sp, #0]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	f340 80ad 	ble.w	801bd26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801bbcc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bbd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bbd2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bbd6:	eeb0 6a62 	vmov.f32	s12, s5
 801bbda:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bbde:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bbe2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bbe6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801bbea:	eeb0 6a43 	vmov.f32	s12, s6
 801bbee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bbf2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801bbf6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bbfa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bbfe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bc02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bc06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bc0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bc0e:	ee12 2a90 	vmov	r2, s5
 801bc12:	eef0 2a47 	vmov.f32	s5, s14
 801bc16:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc1a:	ee13 2a10 	vmov	r2, s6
 801bc1e:	9311      	str	r3, [sp, #68]	@ 0x44
 801bc20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bc22:	eeb0 3a67 	vmov.f32	s6, s15
 801bc26:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc2a:	9312      	str	r3, [sp, #72]	@ 0x48
 801bc2c:	9b00      	ldr	r3, [sp, #0]
 801bc2e:	9a03      	ldr	r2, [sp, #12]
 801bc30:	3b01      	subs	r3, #1
 801bc32:	9300      	str	r3, [sp, #0]
 801bc34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bc36:	bf08      	it	eq
 801bc38:	4613      	moveq	r3, r2
 801bc3a:	e72d      	b.n	801ba98 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801bc3c:	1428      	asrs	r0, r5, #16
 801bc3e:	d45c      	bmi.n	801bcfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bc40:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801bc44:	4282      	cmp	r2, r0
 801bc46:	dd58      	ble.n	801bcfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bc48:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801bc4c:	d455      	bmi.n	801bcfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bc4e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bc52:	4572      	cmp	r2, lr
 801bc54:	dd51      	ble.n	801bcfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bc56:	9a01      	ldr	r2, [sp, #4]
 801bc58:	9902      	ldr	r1, [sp, #8]
 801bc5a:	fb0e 0002 	mla	r0, lr, r2, r0
 801bc5e:	0842      	lsrs	r2, r0, #1
 801bc60:	07c0      	lsls	r0, r0, #31
 801bc62:	5c8a      	ldrb	r2, [r1, r2]
 801bc64:	bf54      	ite	pl
 801bc66:	f002 020f 	andpl.w	r2, r2, #15
 801bc6a:	1112      	asrmi	r2, r2, #4
 801bc6c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bc70:	b2d2      	uxtb	r2, r2
 801bc72:	2a00      	cmp	r2, #0
 801bc74:	d041      	beq.n	801bcfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bc76:	492d      	ldr	r1, [pc, #180]	@ (801bd2c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801bc78:	2aff      	cmp	r2, #255	@ 0xff
 801bc7a:	6808      	ldr	r0, [r1, #0]
 801bc7c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801bc80:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801bc84:	fa5f fe80 	uxtb.w	lr, r0
 801bc88:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801bc8c:	d03b      	beq.n	801bd06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801bc8e:	fa1f f982 	uxth.w	r9, r2
 801bc92:	4438      	add	r0, r7
 801bc94:	43d2      	mvns	r2, r2
 801bc96:	f816 8000 	ldrb.w	r8, [r6, r0]
 801bc9a:	fb1e fe09 	smulbb	lr, lr, r9
 801bc9e:	fb1a fa09 	smulbb	sl, sl, r9
 801bca2:	b2d2      	uxtb	r2, r2
 801bca4:	fb1b f909 	smulbb	r9, fp, r9
 801bca8:	fb08 ee02 	mla	lr, r8, r2, lr
 801bcac:	fa1f fe8e 	uxth.w	lr, lr
 801bcb0:	f10e 0801 	add.w	r8, lr, #1
 801bcb4:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801bcb8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bcbc:	f806 e000 	strb.w	lr, [r6, r0]
 801bcc0:	4430      	add	r0, r6
 801bcc2:	f890 e001 	ldrb.w	lr, [r0, #1]
 801bcc6:	fb0e aa02 	mla	sl, lr, r2, sl
 801bcca:	fa1f fa8a 	uxth.w	sl, sl
 801bcce:	f10a 0e01 	add.w	lr, sl, #1
 801bcd2:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801bcd6:	f890 e002 	ldrb.w	lr, [r0, #2]
 801bcda:	fb0e 9902 	mla	r9, lr, r2, r9
 801bcde:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bce2:	fa1f f989 	uxth.w	r9, r9
 801bce6:	f880 a001 	strb.w	sl, [r0, #1]
 801bcea:	f109 0201 	add.w	r2, r9, #1
 801bcee:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801bcf2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bcf6:	f880 9002 	strb.w	r9, [r0, #2]
 801bcfa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bcfc:	3701      	adds	r7, #1
 801bcfe:	4415      	add	r5, r2
 801bd00:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bd02:	4414      	add	r4, r2
 801bd04:	e756      	b.n	801bbb4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bd06:	4438      	add	r0, r7
 801bd08:	f806 e000 	strb.w	lr, [r6, r0]
 801bd0c:	4430      	add	r0, r6
 801bd0e:	f880 a001 	strb.w	sl, [r0, #1]
 801bd12:	f880 b002 	strb.w	fp, [r0, #2]
 801bd16:	e7f0      	b.n	801bcfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bd18:	f800 7c03 	strb.w	r7, [r0, #-3]
 801bd1c:	f800 9c02 	strb.w	r9, [r0, #-2]
 801bd20:	f800 bc01 	strb.w	fp, [r0, #-1]
 801bd24:	e73d      	b.n	801bba2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801bd26:	b005      	add	sp, #20
 801bd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd2c:	24028e3c 	.word	0x24028e3c

0801bd30 <_ZN8touchgfx8LCD24bppD1Ev>:
 801bd30:	4770      	bx	lr

0801bd32 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801bd32:	4770      	bx	lr

0801bd34 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801bd34:	4770      	bx	lr

0801bd36 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801bd36:	4770      	bx	lr

0801bd38 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801bd38:	4770      	bx	lr

0801bd3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801bd3a:	4770      	bx	lr

0801bd3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801bd3c:	4770      	bx	lr

0801bd3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801bd3e:	4770      	bx	lr

0801bd40 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801bd40:	4770      	bx	lr

0801bd42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bd42:	4770      	bx	lr

0801bd44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bd44:	4770      	bx	lr

0801bd46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bd46:	4770      	bx	lr

0801bd48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bd48:	4770      	bx	lr

0801bd4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bd4a:	4770      	bx	lr

0801bd4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bd4c:	4770      	bx	lr

0801bd4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bd4e:	4770      	bx	lr

0801bd50 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bd50:	4770      	bx	lr

0801bd52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bd52:	4770      	bx	lr

0801bd54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bd54:	4770      	bx	lr

0801bd56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bd56:	4770      	bx	lr

0801bd58 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bd58:	4770      	bx	lr

0801bd5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bd5a:	4770      	bx	lr

0801bd5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bd5c:	4770      	bx	lr

0801bd5e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bd5e:	4770      	bx	lr

0801bd60 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bd60:	4770      	bx	lr
	...

0801bd64 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801bd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd66:	4606      	mov	r6, r0
 801bd68:	b087      	sub	sp, #28
 801bd6a:	4615      	mov	r5, r2
 801bd6c:	461f      	mov	r7, r3
 801bd6e:	b353      	cbz	r3, 801bdc6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801bd70:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	dd26      	ble.n	801bdc6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801bd78:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	dd22      	ble.n	801bdc6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801bd80:	6808      	ldr	r0, [r1, #0]
 801bd82:	aa04      	add	r2, sp, #16
 801bd84:	6849      	ldr	r1, [r1, #4]
 801bd86:	4c1b      	ldr	r4, [pc, #108]	@ (801bdf4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801bd88:	c203      	stmia	r2!, {r0, r1}
 801bd8a:	a804      	add	r0, sp, #16
 801bd8c:	f7fa fb0c 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bd90:	6820      	ldr	r0, [r4, #0]
 801bd92:	6803      	ldr	r3, [r0, #0]
 801bd94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bd96:	4798      	blx	r3
 801bd98:	2fff      	cmp	r7, #255	@ 0xff
 801bd9a:	d016      	beq.n	801bdca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801bd9c:	f010 0f08 	tst.w	r0, #8
 801bda0:	6820      	ldr	r0, [r4, #0]
 801bda2:	d015      	beq.n	801bdd0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801bda4:	2400      	movs	r4, #0
 801bda6:	6801      	ldr	r1, [r0, #0]
 801bda8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801bdac:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bdb0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801bdb4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801bdb8:	9401      	str	r4, [sp, #4]
 801bdba:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801bdbe:	9400      	str	r4, [sp, #0]
 801bdc0:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801bdc2:	4629      	mov	r1, r5
 801bdc4:	47a0      	blx	r4
 801bdc6:	b007      	add	sp, #28
 801bdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bdca:	f010 0f02 	tst.w	r0, #2
 801bdce:	e7e7      	b.n	801bda0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801bdd0:	6803      	ldr	r3, [r0, #0]
 801bdd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bdd4:	4798      	blx	r3
 801bdd6:	4b08      	ldr	r3, [pc, #32]	@ (801bdf8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801bdd8:	4601      	mov	r1, r0
 801bdda:	4630      	mov	r0, r6
 801bddc:	881a      	ldrh	r2, [r3, #0]
 801bdde:	6833      	ldr	r3, [r6, #0]
 801bde0:	e9cd 5700 	strd	r5, r7, [sp]
 801bde4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801bde6:	ab04      	add	r3, sp, #16
 801bde8:	47a8      	blx	r5
 801bdea:	6820      	ldr	r0, [r4, #0]
 801bdec:	6803      	ldr	r3, [r0, #0]
 801bdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bdf0:	4798      	blx	r3
 801bdf2:	e7e8      	b.n	801bdc6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801bdf4:	24028e2c 	.word	0x24028e2c
 801bdf8:	24028e26 	.word	0x24028e26

0801bdfc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801bdfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be00:	b08b      	sub	sp, #44	@ 0x2c
 801be02:	460d      	mov	r5, r1
 801be04:	4616      	mov	r6, r2
 801be06:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801be0a:	f1b8 0f00 	cmp.w	r8, #0
 801be0e:	d047      	beq.n	801bea0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801be10:	6810      	ldr	r0, [r2, #0]
 801be12:	ac06      	add	r4, sp, #24
 801be14:	6851      	ldr	r1, [r2, #4]
 801be16:	4f51      	ldr	r7, [pc, #324]	@ (801bf5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801be18:	c403      	stmia	r4!, {r0, r1}
 801be1a:	6818      	ldr	r0, [r3, #0]
 801be1c:	ac08      	add	r4, sp, #32
 801be1e:	6859      	ldr	r1, [r3, #4]
 801be20:	c403      	stmia	r4!, {r0, r1}
 801be22:	a806      	add	r0, sp, #24
 801be24:	f7fa fac0 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be28:	4631      	mov	r1, r6
 801be2a:	a808      	add	r0, sp, #32
 801be2c:	f7fa fae4 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801be30:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801be34:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801be38:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801be3c:	6838      	ldr	r0, [r7, #0]
 801be3e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801be42:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801be46:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801be4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801be4e:	440d      	add	r5, r1
 801be50:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801be54:	440a      	add	r2, r1
 801be56:	f8ad 2020 	strh.w	r2, [sp, #32]
 801be5a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801be5e:	4413      	add	r3, r2
 801be60:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801be64:	6803      	ldr	r3, [r0, #0]
 801be66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801be68:	4798      	blx	r3
 801be6a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801be6e:	d01a      	beq.n	801bea6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801be70:	f010 0f04 	tst.w	r0, #4
 801be74:	6838      	ldr	r0, [r7, #0]
 801be76:	d019      	beq.n	801beac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801be78:	2100      	movs	r1, #0
 801be7a:	6807      	ldr	r7, [r0, #0]
 801be7c:	b2a4      	uxth	r4, r4
 801be7e:	f8cd 800c 	str.w	r8, [sp, #12]
 801be82:	b2b6      	uxth	r6, r6
 801be84:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801be88:	9401      	str	r4, [sp, #4]
 801be8a:	9600      	str	r6, [sp, #0]
 801be8c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801be90:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801be94:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801be98:	9102      	str	r1, [sp, #8]
 801be9a:	4629      	mov	r1, r5
 801be9c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801be9e:	47a0      	blx	r4
 801bea0:	b00b      	add	sp, #44	@ 0x2c
 801bea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bea6:	f010 0f01 	tst.w	r0, #1
 801beaa:	e7e3      	b.n	801be74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801beac:	6803      	ldr	r3, [r0, #0]
 801beae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801beb0:	4798      	blx	r3
 801beb2:	4a2b      	ldr	r2, [pc, #172]	@ (801bf60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801beb4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801beb8:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801bebc:	8813      	ldrh	r3, [r2, #0]
 801bebe:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801bec2:	fb03 f404 	mul.w	r4, r3, r4
 801bec6:	fb03 c101 	mla	r1, r3, r1, ip
 801beca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bece:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bed2:	4408      	add	r0, r1
 801bed4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801bed8:	4404      	add	r4, r0
 801beda:	d02e      	beq.n	801bf3a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801bedc:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801bee0:	1b9b      	subs	r3, r3, r6
 801bee2:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801bee6:	1b96      	subs	r6, r2, r6
 801bee8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801beec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801bef0:	42a0      	cmp	r0, r4
 801bef2:	d22d      	bcs.n	801bf50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801bef4:	eb00 0e01 	add.w	lr, r0, r1
 801bef8:	4570      	cmp	r0, lr
 801befa:	d210      	bcs.n	801bf1e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801befc:	f890 9000 	ldrb.w	r9, [r0]
 801bf00:	f815 2b01 	ldrb.w	r2, [r5], #1
 801bf04:	fb19 f90c 	smulbb	r9, r9, ip
 801bf08:	fb02 9208 	mla	r2, r2, r8, r9
 801bf0c:	b292      	uxth	r2, r2
 801bf0e:	f102 0901 	add.w	r9, r2, #1
 801bf12:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801bf16:	1212      	asrs	r2, r2, #8
 801bf18:	f800 2b01 	strb.w	r2, [r0], #1
 801bf1c:	e7ec      	b.n	801bef8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801bf1e:	4418      	add	r0, r3
 801bf20:	4435      	add	r5, r6
 801bf22:	e7e5      	b.n	801bef0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801bf24:	8813      	ldrh	r3, [r2, #0]
 801bf26:	1b9b      	subs	r3, r3, r6
 801bf28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf2c:	4418      	add	r0, r3
 801bf2e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801bf32:	1b9b      	subs	r3, r3, r6
 801bf34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf38:	441d      	add	r5, r3
 801bf3a:	42a0      	cmp	r0, r4
 801bf3c:	d208      	bcs.n	801bf50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801bf3e:	eb00 0c01 	add.w	ip, r0, r1
 801bf42:	4560      	cmp	r0, ip
 801bf44:	d2ee      	bcs.n	801bf24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801bf46:	f815 3b01 	ldrb.w	r3, [r5], #1
 801bf4a:	f800 3b01 	strb.w	r3, [r0], #1
 801bf4e:	e7f8      	b.n	801bf42 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801bf50:	6838      	ldr	r0, [r7, #0]
 801bf52:	6803      	ldr	r3, [r0, #0]
 801bf54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bf56:	4798      	blx	r3
 801bf58:	e7a2      	b.n	801bea0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801bf5a:	bf00      	nop
 801bf5c:	24028e2c 	.word	0x24028e2c
 801bf60:	24028e26 	.word	0x24028e26

0801bf64 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801bf64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf66:	2300      	movs	r3, #0
 801bf68:	b085      	sub	sp, #20
 801bf6a:	9300      	str	r3, [sp, #0]
 801bf6c:	4b41      	ldr	r3, [pc, #260]	@ (801c074 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801bf6e:	781b      	ldrb	r3, [r3, #0]
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d136      	bne.n	801bfe2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801bf74:	4a40      	ldr	r2, [pc, #256]	@ (801c078 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801bf76:	f9b2 2000 	ldrsh.w	r2, [r2]
 801bf7a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d131      	bne.n	801bfe6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801bf82:	4b3e      	ldr	r3, [pc, #248]	@ (801c07c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801bf84:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bf88:	ac02      	add	r4, sp, #8
 801bf8a:	6808      	ldr	r0, [r1, #0]
 801bf8c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bf90:	ab02      	add	r3, sp, #8
 801bf92:	6849      	ldr	r1, [r1, #4]
 801bf94:	4d3a      	ldr	r5, [pc, #232]	@ (801c080 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801bf96:	c303      	stmia	r3!, {r0, r1}
 801bf98:	4669      	mov	r1, sp
 801bf9a:	4620      	mov	r0, r4
 801bf9c:	f7fa fa2c 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bfa0:	4668      	mov	r0, sp
 801bfa2:	f7fa fa01 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bfa6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bfaa:	f8bd 2000 	ldrh.w	r2, [sp]
 801bfae:	462e      	mov	r6, r5
 801bfb0:	6828      	ldr	r0, [r5, #0]
 801bfb2:	4413      	add	r3, r2
 801bfb4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801bfb8:	f8ad 3008 	strh.w	r3, [sp, #8]
 801bfbc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801bfc0:	4413      	add	r3, r2
 801bfc2:	f8ad 300a 	strh.w	r3, [sp, #10]
 801bfc6:	6803      	ldr	r3, [r0, #0]
 801bfc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bfca:	4798      	blx	r3
 801bfcc:	f010 0f01 	tst.w	r0, #1
 801bfd0:	d00b      	beq.n	801bfea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801bfd2:	6828      	ldr	r0, [r5, #0]
 801bfd4:	6803      	ldr	r3, [r0, #0]
 801bfd6:	e894 0006 	ldmia.w	r4, {r1, r2}
 801bfda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bfdc:	4798      	blx	r3
 801bfde:	b005      	add	sp, #20
 801bfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfe2:	4a26      	ldr	r2, [pc, #152]	@ (801c07c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801bfe4:	e7c7      	b.n	801bf76 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801bfe6:	4b24      	ldr	r3, [pc, #144]	@ (801c078 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801bfe8:	e7cc      	b.n	801bf84 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801bfea:	6830      	ldr	r0, [r6, #0]
 801bfec:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801bff0:	6803      	ldr	r3, [r0, #0]
 801bff2:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801bff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bff8:	4798      	blx	r3
 801bffa:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801bffe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c002:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801c006:	fb14 3402 	smlabb	r4, r4, r2, r3
 801c00a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c00e:	4404      	add	r4, r0
 801c010:	6830      	ldr	r0, [r6, #0]
 801c012:	6803      	ldr	r3, [r0, #0]
 801c014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c016:	4798      	blx	r3
 801c018:	4917      	ldr	r1, [pc, #92]	@ (801c078 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801c01a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801c01e:	880b      	ldrh	r3, [r1, #0]
 801c020:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801c024:	fb03 c202 	mla	r2, r3, r2, ip
 801c028:	437b      	muls	r3, r7
 801c02a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801c02e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c032:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c036:	4410      	add	r0, r2
 801c038:	18c2      	adds	r2, r0, r3
 801c03a:	4290      	cmp	r0, r2
 801c03c:	d214      	bcs.n	801c068 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801c03e:	eb00 0c07 	add.w	ip, r0, r7
 801c042:	4560      	cmp	r0, ip
 801c044:	d204      	bcs.n	801c050 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801c046:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c04a:	f800 3b01 	strb.w	r3, [r0], #1
 801c04e:	e7f8      	b.n	801c042 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801c050:	880b      	ldrh	r3, [r1, #0]
 801c052:	1b5b      	subs	r3, r3, r5
 801c054:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c058:	4418      	add	r0, r3
 801c05a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c05e:	1b5b      	subs	r3, r3, r5
 801c060:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c064:	441c      	add	r4, r3
 801c066:	e7e8      	b.n	801c03a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801c068:	6830      	ldr	r0, [r6, #0]
 801c06a:	6803      	ldr	r3, [r0, #0]
 801c06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c06e:	4798      	blx	r3
 801c070:	e7b5      	b.n	801bfde <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c072:	bf00      	nop
 801c074:	24028e24 	.word	0x24028e24
 801c078:	24028e26 	.word	0x24028e26
 801c07c:	24028e28 	.word	0x24028e28
 801c080:	24028e2c 	.word	0x24028e2c

0801c084 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801c084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c088:	b08f      	sub	sp, #60	@ 0x3c
 801c08a:	461c      	mov	r4, r3
 801c08c:	9203      	str	r2, [sp, #12]
 801c08e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c092:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c094:	6820      	ldr	r0, [r4, #0]
 801c096:	9100      	str	r1, [sp, #0]
 801c098:	9204      	str	r2, [sp, #16]
 801c09a:	aa0a      	add	r2, sp, #40	@ 0x28
 801c09c:	6861      	ldr	r1, [r4, #4]
 801c09e:	c203      	stmia	r2!, {r0, r1}
 801c0a0:	6818      	ldr	r0, [r3, #0]
 801c0a2:	aa0c      	add	r2, sp, #48	@ 0x30
 801c0a4:	6859      	ldr	r1, [r3, #4]
 801c0a6:	c203      	stmia	r2!, {r0, r1}
 801c0a8:	a80a      	add	r0, sp, #40	@ 0x28
 801c0aa:	f7fa f97d 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c0ae:	4621      	mov	r1, r4
 801c0b0:	a80c      	add	r0, sp, #48	@ 0x30
 801c0b2:	f7fa f9a1 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c0b6:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801c0ba:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801c0be:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801c0c2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801c0c6:	bfdb      	ittet	le
 801c0c8:	b2b3      	uxthle	r3, r6
 801c0ca:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801c0ce:	2301      	movgt	r3, #1
 801c0d0:	fb92 f3f3 	sdivle	r3, r2, r3
 801c0d4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801c0d8:	441d      	add	r5, r3
 801c0da:	fb92 f1f3 	sdiv	r1, r2, r3
 801c0de:	fa1f fc81 	uxth.w	ip, r1
 801c0e2:	3d01      	subs	r5, #1
 801c0e4:	fb0c 2413 	mls	r4, ip, r3, r2
 801c0e8:	4661      	mov	r1, ip
 801c0ea:	fb14 f406 	smulbb	r4, r4, r6
 801c0ee:	4404      	add	r4, r0
 801c0f0:	fb95 f5f3 	sdiv	r5, r5, r3
 801c0f4:	b2a4      	uxth	r4, r4
 801c0f6:	b131      	cbz	r1, 801c106 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801c0f8:	9b03      	ldr	r3, [sp, #12]
 801c0fa:	9900      	ldr	r1, [sp, #0]
 801c0fc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c100:	ba1b      	rev	r3, r3
 801c102:	4419      	add	r1, r3
 801c104:	9100      	str	r1, [sp, #0]
 801c106:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801c10a:	b2ad      	uxth	r5, r5
 801c10c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801c110:	4418      	add	r0, r3
 801c112:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801c116:	00ad      	lsls	r5, r5, #2
 801c118:	441a      	add	r2, r3
 801c11a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801c11e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801c122:	9301      	str	r3, [sp, #4]
 801c124:	4b79      	ldr	r3, [pc, #484]	@ (801c30c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801c126:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801c12a:	6818      	ldr	r0, [r3, #0]
 801c12c:	6803      	ldr	r3, [r0, #0]
 801c12e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c130:	4798      	blx	r3
 801c132:	4a77      	ldr	r2, [pc, #476]	@ (801c310 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801c134:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801c138:	2c00      	cmp	r4, #0
 801c13a:	8813      	ldrh	r3, [r2, #0]
 801c13c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801c140:	9209      	str	r2, [sp, #36]	@ 0x24
 801c142:	fb03 c101 	mla	r1, r3, r1, ip
 801c146:	fb06 f303 	mul.w	r3, r6, r3
 801c14a:	bf18      	it	ne
 801c14c:	2600      	movne	r6, #0
 801c14e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c152:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c156:	4408      	add	r0, r1
 801c158:	4403      	add	r3, r0
 801c15a:	9306      	str	r3, [sp, #24]
 801c15c:	f105 0304 	add.w	r3, r5, #4
 801c160:	9305      	str	r3, [sp, #20]
 801c162:	9b01      	ldr	r3, [sp, #4]
 801c164:	bf08      	it	eq
 801c166:	461e      	moveq	r6, r3
 801c168:	2300      	movs	r3, #0
 801c16a:	b2b6      	uxth	r6, r6
 801c16c:	9302      	str	r3, [sp, #8]
 801c16e:	9a06      	ldr	r2, [sp, #24]
 801c170:	4290      	cmp	r0, r2
 801c172:	f080 80c2 	bcs.w	801c2fa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801c176:	b963      	cbnz	r3, 801c192 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801c178:	9b00      	ldr	r3, [sp, #0]
 801c17a:	781a      	ldrb	r2, [r3, #0]
 801c17c:	0993      	lsrs	r3, r2, #6
 801c17e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801c182:	9202      	str	r2, [sp, #8]
 801c184:	1e5a      	subs	r2, r3, #1
 801c186:	2a02      	cmp	r2, #2
 801c188:	d815      	bhi.n	801c1b6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801c18a:	9a00      	ldr	r2, [sp, #0]
 801c18c:	b29b      	uxth	r3, r3
 801c18e:	3201      	adds	r2, #1
 801c190:	9200      	str	r2, [sp, #0]
 801c192:	b1b4      	cbz	r4, 801c1c2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801c194:	429c      	cmp	r4, r3
 801c196:	bf91      	iteee	ls
 801c198:	1b1c      	subls	r4, r3, r4
 801c19a:	1ae4      	subhi	r4, r4, r3
 801c19c:	4635      	movhi	r5, r6
 801c19e:	f04f 0e00 	movhi.w	lr, #0
 801c1a2:	bf9b      	ittet	ls
 801c1a4:	fa1f fe84 	uxthls.w	lr, r4
 801c1a8:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801c1ac:	b2a4      	uxthhi	r4, r4
 801c1ae:	2400      	movls	r4, #0
 801c1b0:	4673      	mov	r3, lr
 801c1b2:	462e      	mov	r6, r5
 801c1b4:	e7db      	b.n	801c16e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801c1b6:	9a00      	ldr	r2, [sp, #0]
 801c1b8:	9b00      	ldr	r3, [sp, #0]
 801c1ba:	3202      	adds	r2, #2
 801c1bc:	785b      	ldrb	r3, [r3, #1]
 801c1be:	9200      	str	r2, [sp, #0]
 801c1c0:	e7e7      	b.n	801c192 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801c1c2:	2204      	movs	r2, #4
 801c1c4:	9905      	ldr	r1, [sp, #20]
 801c1c6:	429e      	cmp	r6, r3
 801c1c8:	4615      	mov	r5, r2
 801c1ca:	9a02      	ldr	r2, [sp, #8]
 801c1cc:	bf94      	ite	ls
 801c1ce:	eba3 0e06 	subls.w	lr, r3, r6
 801c1d2:	46a6      	movhi	lr, r4
 801c1d4:	fb15 1202 	smlabb	r2, r5, r2, r1
 801c1d8:	9903      	ldr	r1, [sp, #12]
 801c1da:	bf8c      	ite	hi
 801c1dc:	1af5      	subhi	r5, r6, r3
 801c1de:	fa1f fe8e 	uxthls.w	lr, lr
 801c1e2:	f851 c002 	ldr.w	ip, [r1, r2]
 801c1e6:	bf9a      	itte	ls
 801c1e8:	4625      	movls	r5, r4
 801c1ea:	4632      	movls	r2, r6
 801c1ec:	b2ad      	uxthhi	r5, r5
 801c1ee:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801c1f2:	bf88      	it	hi
 801c1f4:	461a      	movhi	r2, r3
 801c1f6:	b179      	cbz	r1, 801c218 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801c1f8:	29ff      	cmp	r1, #255	@ 0xff
 801c1fa:	fa5f f98c 	uxtb.w	r9, ip
 801c1fe:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801c202:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801c206:	d126      	bne.n	801c256 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801c208:	9f04      	ldr	r7, [sp, #16]
 801c20a:	2fff      	cmp	r7, #255	@ 0xff
 801c20c:	d123      	bne.n	801c256 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801c20e:	4682      	mov	sl, r0
 801c210:	4611      	mov	r1, r2
 801c212:	f10a 0a03 	add.w	sl, sl, #3
 801c216:	b9a9      	cbnz	r1, 801c244 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801c218:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c21c:	429e      	cmp	r6, r3
 801c21e:	4410      	add	r0, r2
 801c220:	d8c6      	bhi.n	801c1b0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801c222:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801c226:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801c22a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c22c:	1b64      	subs	r4, r4, r5
 801c22e:	9a01      	ldr	r2, [sp, #4]
 801c230:	881b      	ldrh	r3, [r3, #0]
 801c232:	b2a4      	uxth	r4, r4
 801c234:	1a9b      	subs	r3, r3, r2
 801c236:	2c00      	cmp	r4, #0
 801c238:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c23c:	bf18      	it	ne
 801c23e:	2500      	movne	r5, #0
 801c240:	4418      	add	r0, r3
 801c242:	e7b5      	b.n	801c1b0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801c244:	3901      	subs	r1, #1
 801c246:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801c24a:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801c24e:	f80a cc01 	strb.w	ip, [sl, #-1]
 801c252:	b289      	uxth	r1, r1
 801c254:	e7dd      	b.n	801c212 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801c256:	9f04      	ldr	r7, [sp, #16]
 801c258:	fb07 fa01 	mul.w	sl, r7, r1
 801c25c:	f10a 0101 	add.w	r1, sl, #1
 801c260:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801c264:	1209      	asrs	r1, r1, #8
 801c266:	ea6f 0a01 	mvn.w	sl, r1
 801c26a:	b289      	uxth	r1, r1
 801c26c:	fb19 f901 	smulbb	r9, r9, r1
 801c270:	fa5f fa8a 	uxtb.w	sl, sl
 801c274:	fb18 f801 	smulbb	r8, r8, r1
 801c278:	fb1c f101 	smulbb	r1, ip, r1
 801c27c:	fa1f f789 	uxth.w	r7, r9
 801c280:	4684      	mov	ip, r0
 801c282:	4691      	mov	r9, r2
 801c284:	9707      	str	r7, [sp, #28]
 801c286:	b289      	uxth	r1, r1
 801c288:	fa1f f788 	uxth.w	r7, r8
 801c28c:	9708      	str	r7, [sp, #32]
 801c28e:	f10c 0c03 	add.w	ip, ip, #3
 801c292:	f1b9 0f00 	cmp.w	r9, #0
 801c296:	d0bf      	beq.n	801c218 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801c298:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801c29c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c2a0:	9f07      	ldr	r7, [sp, #28]
 801c2a2:	fa1f f989 	uxth.w	r9, r9
 801c2a6:	fb08 780a 	mla	r8, r8, sl, r7
 801c2aa:	9f08      	ldr	r7, [sp, #32]
 801c2ac:	fa1f f888 	uxth.w	r8, r8
 801c2b0:	f108 0b01 	add.w	fp, r8, #1
 801c2b4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c2b8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c2bc:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801c2c0:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801c2c4:	fb08 780a 	mla	r8, r8, sl, r7
 801c2c8:	fa1f f888 	uxth.w	r8, r8
 801c2cc:	f108 0b01 	add.w	fp, r8, #1
 801c2d0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c2d4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c2d8:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801c2dc:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801c2e0:	fb08 180a 	mla	r8, r8, sl, r1
 801c2e4:	fa1f f888 	uxth.w	r8, r8
 801c2e8:	f108 0b01 	add.w	fp, r8, #1
 801c2ec:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c2f0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c2f4:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801c2f8:	e7c9      	b.n	801c28e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801c2fa:	4b04      	ldr	r3, [pc, #16]	@ (801c30c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801c2fc:	6818      	ldr	r0, [r3, #0]
 801c2fe:	6803      	ldr	r3, [r0, #0]
 801c300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c302:	4798      	blx	r3
 801c304:	b00f      	add	sp, #60	@ 0x3c
 801c306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c30a:	bf00      	nop
 801c30c:	24028e2c 	.word	0x24028e2c
 801c310:	24028e26 	.word	0x24028e26

0801c314 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c318:	b089      	sub	sp, #36	@ 0x24
 801c31a:	4607      	mov	r7, r0
 801c31c:	4689      	mov	r9, r1
 801c31e:	4692      	mov	sl, r2
 801c320:	ac08      	add	r4, sp, #32
 801c322:	461e      	mov	r6, r3
 801c324:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801c328:	4620      	mov	r0, r4
 801c32a:	f7fd ff77 	bl	801a21c <_ZNK8touchgfx6Bitmap7getDataEv>
 801c32e:	683b      	ldr	r3, [r7, #0]
 801c330:	4605      	mov	r5, r0
 801c332:	4620      	mov	r0, r4
 801c334:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801c338:	f7fd ff08 	bl	801a14c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c33c:	4683      	mov	fp, r0
 801c33e:	4620      	mov	r0, r4
 801c340:	f7fd ff38 	bl	801a1b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c344:	4653      	mov	r3, sl
 801c346:	464a      	mov	r2, r9
 801c348:	4639      	mov	r1, r7
 801c34a:	9500      	str	r5, [sp, #0]
 801c34c:	e9cd b001 	strd	fp, r0, [sp, #4]
 801c350:	a806      	add	r0, sp, #24
 801c352:	47c0      	blx	r8
 801c354:	a906      	add	r1, sp, #24
 801c356:	4630      	mov	r0, r6
 801c358:	f7fd fddc 	bl	8019f14 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801c35c:	4628      	mov	r0, r5
 801c35e:	b009      	add	sp, #36	@ 0x24
 801c360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c364 <_ZN8touchgfx8LCD24bppD0Ev>:
 801c364:	b510      	push	{r4, lr}
 801c366:	4604      	mov	r4, r0
 801c368:	216c      	movs	r1, #108	@ 0x6c
 801c36a:	f008 fc60 	bl	8024c2e <_ZdlPvj>
 801c36e:	4620      	mov	r0, r4
 801c370:	bd10      	pop	{r4, pc}

0801c372 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801c372:	b510      	push	{r4, lr}
 801c374:	4604      	mov	r4, r0
 801c376:	2104      	movs	r1, #4
 801c378:	f008 fc59 	bl	8024c2e <_ZdlPvj>
 801c37c:	4620      	mov	r0, r4
 801c37e:	bd10      	pop	{r4, pc}

0801c380 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801c380:	b510      	push	{r4, lr}
 801c382:	4604      	mov	r4, r0
 801c384:	2104      	movs	r1, #4
 801c386:	f008 fc52 	bl	8024c2e <_ZdlPvj>
 801c38a:	4620      	mov	r0, r4
 801c38c:	bd10      	pop	{r4, pc}

0801c38e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801c38e:	b510      	push	{r4, lr}
 801c390:	4604      	mov	r4, r0
 801c392:	f640 0144 	movw	r1, #2116	@ 0x844
 801c396:	f008 fc4a 	bl	8024c2e <_ZdlPvj>
 801c39a:	4620      	mov	r0, r4
 801c39c:	bd10      	pop	{r4, pc}

0801c39e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801c39e:	b510      	push	{r4, lr}
 801c3a0:	4604      	mov	r4, r0
 801c3a2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801c3a6:	f008 fc42 	bl	8024c2e <_ZdlPvj>
 801c3aa:	4620      	mov	r0, r4
 801c3ac:	bd10      	pop	{r4, pc}

0801c3ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c3ae:	b510      	push	{r4, lr}
 801c3b0:	4604      	mov	r4, r0
 801c3b2:	2104      	movs	r1, #4
 801c3b4:	f008 fc3b 	bl	8024c2e <_ZdlPvj>
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	bd10      	pop	{r4, pc}

0801c3bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c3bc:	b510      	push	{r4, lr}
 801c3be:	4604      	mov	r4, r0
 801c3c0:	2104      	movs	r1, #4
 801c3c2:	f008 fc34 	bl	8024c2e <_ZdlPvj>
 801c3c6:	4620      	mov	r0, r4
 801c3c8:	bd10      	pop	{r4, pc}

0801c3ca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c3ca:	b510      	push	{r4, lr}
 801c3cc:	4604      	mov	r4, r0
 801c3ce:	2104      	movs	r1, #4
 801c3d0:	f008 fc2d 	bl	8024c2e <_ZdlPvj>
 801c3d4:	4620      	mov	r0, r4
 801c3d6:	bd10      	pop	{r4, pc}

0801c3d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c3d8:	b510      	push	{r4, lr}
 801c3da:	4604      	mov	r4, r0
 801c3dc:	2104      	movs	r1, #4
 801c3de:	f008 fc26 	bl	8024c2e <_ZdlPvj>
 801c3e2:	4620      	mov	r0, r4
 801c3e4:	bd10      	pop	{r4, pc}

0801c3e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c3e6:	b510      	push	{r4, lr}
 801c3e8:	4604      	mov	r4, r0
 801c3ea:	2104      	movs	r1, #4
 801c3ec:	f008 fc1f 	bl	8024c2e <_ZdlPvj>
 801c3f0:	4620      	mov	r0, r4
 801c3f2:	bd10      	pop	{r4, pc}

0801c3f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c3f4:	b510      	push	{r4, lr}
 801c3f6:	4604      	mov	r4, r0
 801c3f8:	2104      	movs	r1, #4
 801c3fa:	f008 fc18 	bl	8024c2e <_ZdlPvj>
 801c3fe:	4620      	mov	r0, r4
 801c400:	bd10      	pop	{r4, pc}

0801c402 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c402:	b510      	push	{r4, lr}
 801c404:	4604      	mov	r4, r0
 801c406:	2104      	movs	r1, #4
 801c408:	f008 fc11 	bl	8024c2e <_ZdlPvj>
 801c40c:	4620      	mov	r0, r4
 801c40e:	bd10      	pop	{r4, pc}

0801c410 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c410:	b510      	push	{r4, lr}
 801c412:	4604      	mov	r4, r0
 801c414:	2104      	movs	r1, #4
 801c416:	f008 fc0a 	bl	8024c2e <_ZdlPvj>
 801c41a:	4620      	mov	r0, r4
 801c41c:	bd10      	pop	{r4, pc}

0801c41e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c41e:	b510      	push	{r4, lr}
 801c420:	4604      	mov	r4, r0
 801c422:	2104      	movs	r1, #4
 801c424:	f008 fc03 	bl	8024c2e <_ZdlPvj>
 801c428:	4620      	mov	r0, r4
 801c42a:	bd10      	pop	{r4, pc}

0801c42c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c42c:	b510      	push	{r4, lr}
 801c42e:	4604      	mov	r4, r0
 801c430:	2104      	movs	r1, #4
 801c432:	f008 fbfc 	bl	8024c2e <_ZdlPvj>
 801c436:	4620      	mov	r0, r4
 801c438:	bd10      	pop	{r4, pc}

0801c43a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c43a:	b510      	push	{r4, lr}
 801c43c:	4604      	mov	r4, r0
 801c43e:	2104      	movs	r1, #4
 801c440:	f008 fbf5 	bl	8024c2e <_ZdlPvj>
 801c444:	4620      	mov	r0, r4
 801c446:	bd10      	pop	{r4, pc}

0801c448 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c448:	b510      	push	{r4, lr}
 801c44a:	4604      	mov	r4, r0
 801c44c:	2104      	movs	r1, #4
 801c44e:	f008 fbee 	bl	8024c2e <_ZdlPvj>
 801c452:	4620      	mov	r0, r4
 801c454:	bd10      	pop	{r4, pc}

0801c456 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c456:	b510      	push	{r4, lr}
 801c458:	4604      	mov	r4, r0
 801c45a:	2104      	movs	r1, #4
 801c45c:	f008 fbe7 	bl	8024c2e <_ZdlPvj>
 801c460:	4620      	mov	r0, r4
 801c462:	bd10      	pop	{r4, pc}

0801c464 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c464:	b510      	push	{r4, lr}
 801c466:	4604      	mov	r4, r0
 801c468:	2104      	movs	r1, #4
 801c46a:	f008 fbe0 	bl	8024c2e <_ZdlPvj>
 801c46e:	4620      	mov	r0, r4
 801c470:	bd10      	pop	{r4, pc}

0801c472 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c472:	b510      	push	{r4, lr}
 801c474:	4604      	mov	r4, r0
 801c476:	2104      	movs	r1, #4
 801c478:	f008 fbd9 	bl	8024c2e <_ZdlPvj>
 801c47c:	4620      	mov	r0, r4
 801c47e:	bd10      	pop	{r4, pc}

0801c480 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c480:	b510      	push	{r4, lr}
 801c482:	4604      	mov	r4, r0
 801c484:	2104      	movs	r1, #4
 801c486:	f008 fbd2 	bl	8024c2e <_ZdlPvj>
 801c48a:	4620      	mov	r0, r4
 801c48c:	bd10      	pop	{r4, pc}

0801c48e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c48e:	b510      	push	{r4, lr}
 801c490:	4604      	mov	r4, r0
 801c492:	2104      	movs	r1, #4
 801c494:	f008 fbcb 	bl	8024c2e <_ZdlPvj>
 801c498:	4620      	mov	r0, r4
 801c49a:	bd10      	pop	{r4, pc}

0801c49c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c49c:	b510      	push	{r4, lr}
 801c49e:	4604      	mov	r4, r0
 801c4a0:	2104      	movs	r1, #4
 801c4a2:	f008 fbc4 	bl	8024c2e <_ZdlPvj>
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	bd10      	pop	{r4, pc}

0801c4aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c4aa:	b510      	push	{r4, lr}
 801c4ac:	4604      	mov	r4, r0
 801c4ae:	2104      	movs	r1, #4
 801c4b0:	f008 fbbd 	bl	8024c2e <_ZdlPvj>
 801c4b4:	4620      	mov	r0, r4
 801c4b6:	bd10      	pop	{r4, pc}

0801c4b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c4b8:	b510      	push	{r4, lr}
 801c4ba:	4604      	mov	r4, r0
 801c4bc:	2104      	movs	r1, #4
 801c4be:	f008 fbb6 	bl	8024c2e <_ZdlPvj>
 801c4c2:	4620      	mov	r0, r4
 801c4c4:	bd10      	pop	{r4, pc}
	...

0801c4c8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4cc:	b08f      	sub	sp, #60	@ 0x3c
 801c4ce:	461c      	mov	r4, r3
 801c4d0:	460e      	mov	r6, r1
 801c4d2:	9206      	str	r2, [sp, #24]
 801c4d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c4d8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c4da:	9202      	str	r2, [sp, #8]
 801c4dc:	2a00      	cmp	r2, #0
 801c4de:	f000 8128 	beq.w	801c732 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801c4e2:	6820      	ldr	r0, [r4, #0]
 801c4e4:	aa0a      	add	r2, sp, #40	@ 0x28
 801c4e6:	6861      	ldr	r1, [r4, #4]
 801c4e8:	c203      	stmia	r2!, {r0, r1}
 801c4ea:	6818      	ldr	r0, [r3, #0]
 801c4ec:	aa0c      	add	r2, sp, #48	@ 0x30
 801c4ee:	6859      	ldr	r1, [r3, #4]
 801c4f0:	c203      	stmia	r2!, {r0, r1}
 801c4f2:	a80a      	add	r0, sp, #40	@ 0x28
 801c4f4:	f7f9 ff58 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c4f8:	4621      	mov	r1, r4
 801c4fa:	a80c      	add	r0, sp, #48	@ 0x30
 801c4fc:	f7f9 ff7c 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c500:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801c504:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801c508:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801c50c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801c510:	bfdb      	ittet	le
 801c512:	b2bb      	uxthle	r3, r7
 801c514:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801c518:	2301      	movgt	r3, #1
 801c51a:	fb92 f3f3 	sdivle	r3, r2, r3
 801c51e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801c522:	441d      	add	r5, r3
 801c524:	fb92 f1f3 	sdiv	r1, r2, r3
 801c528:	fa1f fc81 	uxth.w	ip, r1
 801c52c:	3d01      	subs	r5, #1
 801c52e:	fb0c 2413 	mls	r4, ip, r3, r2
 801c532:	4661      	mov	r1, ip
 801c534:	fb14 f407 	smulbb	r4, r4, r7
 801c538:	4404      	add	r4, r0
 801c53a:	fb95 f5f3 	sdiv	r5, r5, r3
 801c53e:	b2a4      	uxth	r4, r4
 801c540:	b121      	cbz	r1, 801c54c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801c542:	9b06      	ldr	r3, [sp, #24]
 801c544:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c548:	ba1b      	rev	r3, r3
 801c54a:	441e      	add	r6, r3
 801c54c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801c550:	b2ad      	uxth	r5, r5
 801c552:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801c556:	4418      	add	r0, r3
 801c558:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801c55c:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801c560:	00ad      	lsls	r5, r5, #2
 801c562:	441a      	add	r2, r3
 801c564:	4b74      	ldr	r3, [pc, #464]	@ (801c738 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801c566:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801c56a:	6818      	ldr	r0, [r3, #0]
 801c56c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801c570:	6803      	ldr	r3, [r0, #0]
 801c572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c574:	4798      	blx	r3
 801c576:	4a71      	ldr	r2, [pc, #452]	@ (801c73c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801c578:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801c57c:	2c00      	cmp	r4, #0
 801c57e:	8813      	ldrh	r3, [r2, #0]
 801c580:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801c584:	9209      	str	r2, [sp, #36]	@ 0x24
 801c586:	fb03 c101 	mla	r1, r3, r1, ip
 801c58a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c58e:	fb03 f307 	mul.w	r3, r3, r7
 801c592:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c596:	9204      	str	r2, [sp, #16]
 801c598:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c59c:	9a02      	ldr	r2, [sp, #8]
 801c59e:	4408      	add	r0, r1
 801c5a0:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801c5a4:	4403      	add	r3, r0
 801c5a6:	b292      	uxth	r2, r2
 801c5a8:	9307      	str	r3, [sp, #28]
 801c5aa:	f105 0304 	add.w	r3, r5, #4
 801c5ae:	bf0c      	ite	eq
 801c5b0:	4645      	moveq	r5, r8
 801c5b2:	2500      	movne	r5, #0
 801c5b4:	9308      	str	r3, [sp, #32]
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	b2ad      	uxth	r5, r5
 801c5ba:	9205      	str	r2, [sp, #20]
 801c5bc:	9303      	str	r3, [sp, #12]
 801c5be:	9a07      	ldr	r2, [sp, #28]
 801c5c0:	4282      	cmp	r2, r0
 801c5c2:	f240 80b1 	bls.w	801c728 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801c5c6:	b95b      	cbnz	r3, 801c5e0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801c5c8:	7832      	ldrb	r2, [r6, #0]
 801c5ca:	0993      	lsrs	r3, r2, #6
 801c5cc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801c5d0:	9203      	str	r2, [sp, #12]
 801c5d2:	1e5a      	subs	r2, r3, #1
 801c5d4:	2a02      	cmp	r2, #2
 801c5d6:	bf8d      	iteet	hi
 801c5d8:	7873      	ldrbhi	r3, [r6, #1]
 801c5da:	3601      	addls	r6, #1
 801c5dc:	b29b      	uxthls	r3, r3
 801c5de:	3602      	addhi	r6, #2
 801c5e0:	b184      	cbz	r4, 801c604 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801c5e2:	429c      	cmp	r4, r3
 801c5e4:	bf91      	iteee	ls
 801c5e6:	1b1c      	subls	r4, r3, r4
 801c5e8:	1ae4      	subhi	r4, r4, r3
 801c5ea:	4629      	movhi	r1, r5
 801c5ec:	f04f 0e00 	movhi.w	lr, #0
 801c5f0:	bf9b      	ittet	ls
 801c5f2:	fa1f fe84 	uxthls.w	lr, r4
 801c5f6:	2400      	movls	r4, #0
 801c5f8:	b2a4      	uxthhi	r4, r4
 801c5fa:	fa1f f188 	uxthls.w	r1, r8
 801c5fe:	4673      	mov	r3, lr
 801c600:	460d      	mov	r5, r1
 801c602:	e7dc      	b.n	801c5be <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801c604:	2203      	movs	r2, #3
 801c606:	9908      	ldr	r1, [sp, #32]
 801c608:	42ab      	cmp	r3, r5
 801c60a:	4617      	mov	r7, r2
 801c60c:	9a03      	ldr	r2, [sp, #12]
 801c60e:	bf24      	itt	cs
 801c610:	eba3 0e05 	subcs.w	lr, r3, r5
 801c614:	9501      	strcs	r5, [sp, #4]
 801c616:	fb17 1702 	smlabb	r7, r7, r2, r1
 801c61a:	9a06      	ldr	r2, [sp, #24]
 801c61c:	bf34      	ite	cc
 801c61e:	1ae9      	subcc	r1, r5, r3
 801c620:	fa1f fe8e 	uxthcs.w	lr, lr
 801c624:	4417      	add	r7, r2
 801c626:	9a02      	ldr	r2, [sp, #8]
 801c628:	bf2f      	iteee	cs
 801c62a:	4621      	movcs	r1, r4
 801c62c:	b289      	uxthcc	r1, r1
 801c62e:	9301      	strcc	r3, [sp, #4]
 801c630:	46a6      	movcc	lr, r4
 801c632:	2aff      	cmp	r2, #255	@ 0xff
 801c634:	d11e      	bne.n	801c674 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801c636:	4681      	mov	r9, r0
 801c638:	f8dd c004 	ldr.w	ip, [sp, #4]
 801c63c:	f109 0903 	add.w	r9, r9, #3
 801c640:	f1bc 0f00 	cmp.w	ip, #0
 801c644:	d15f      	bne.n	801c706 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801c646:	9a01      	ldr	r2, [sp, #4]
 801c648:	42ab      	cmp	r3, r5
 801c64a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c64e:	4410      	add	r0, r2
 801c650:	d3d5      	bcc.n	801c5fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801c652:	fa1f f188 	uxth.w	r1, r8
 801c656:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801c65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c65c:	1a64      	subs	r4, r4, r1
 801c65e:	881b      	ldrh	r3, [r3, #0]
 801c660:	b2a4      	uxth	r4, r4
 801c662:	eba3 0308 	sub.w	r3, r3, r8
 801c666:	2c00      	cmp	r4, #0
 801c668:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c66c:	bf18      	it	ne
 801c66e:	2100      	movne	r1, #0
 801c670:	4418      	add	r0, r3
 801c672:	e7c4      	b.n	801c5fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801c674:	4684      	mov	ip, r0
 801c676:	f8dd a004 	ldr.w	sl, [sp, #4]
 801c67a:	f10c 0c03 	add.w	ip, ip, #3
 801c67e:	f1ba 0f00 	cmp.w	sl, #0
 801c682:	d0e0      	beq.n	801c646 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801c684:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801c688:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c68c:	9a05      	ldr	r2, [sp, #20]
 801c68e:	f897 9000 	ldrb.w	r9, [r7]
 801c692:	fa1f fa8a 	uxth.w	sl, sl
 801c696:	fb1b fb02 	smulbb	fp, fp, r2
 801c69a:	9a04      	ldr	r2, [sp, #16]
 801c69c:	fb09 b902 	mla	r9, r9, r2, fp
 801c6a0:	9a05      	ldr	r2, [sp, #20]
 801c6a2:	fa1f f989 	uxth.w	r9, r9
 801c6a6:	f109 0b01 	add.w	fp, r9, #1
 801c6aa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c6ae:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801c6b2:	fb1b fb02 	smulbb	fp, fp, r2
 801c6b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c6ba:	9a04      	ldr	r2, [sp, #16]
 801c6bc:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801c6c0:	f897 9001 	ldrb.w	r9, [r7, #1]
 801c6c4:	fb09 b902 	mla	r9, r9, r2, fp
 801c6c8:	9a05      	ldr	r2, [sp, #20]
 801c6ca:	fa1f f989 	uxth.w	r9, r9
 801c6ce:	f109 0b01 	add.w	fp, r9, #1
 801c6d2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c6d6:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801c6da:	fb1b fb02 	smulbb	fp, fp, r2
 801c6de:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c6e2:	9a04      	ldr	r2, [sp, #16]
 801c6e4:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801c6e8:	f897 9002 	ldrb.w	r9, [r7, #2]
 801c6ec:	fb09 b902 	mla	r9, r9, r2, fp
 801c6f0:	fa1f f989 	uxth.w	r9, r9
 801c6f4:	f109 0b01 	add.w	fp, r9, #1
 801c6f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c6fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c700:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801c704:	e7b9      	b.n	801c67a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801c706:	f897 a000 	ldrb.w	sl, [r7]
 801c70a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c70e:	f809 ac03 	strb.w	sl, [r9, #-3]
 801c712:	fa1f fc8c 	uxth.w	ip, ip
 801c716:	f897 a001 	ldrb.w	sl, [r7, #1]
 801c71a:	f809 ac02 	strb.w	sl, [r9, #-2]
 801c71e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c722:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c726:	e789      	b.n	801c63c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801c728:	4b03      	ldr	r3, [pc, #12]	@ (801c738 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801c72a:	6818      	ldr	r0, [r3, #0]
 801c72c:	6803      	ldr	r3, [r0, #0]
 801c72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c730:	4798      	blx	r3
 801c732:	b00f      	add	sp, #60	@ 0x3c
 801c734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c738:	24028e2c 	.word	0x24028e2c
 801c73c:	24028e26 	.word	0x24028e26

0801c740 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c744:	b09b      	sub	sp, #108	@ 0x6c
 801c746:	461d      	mov	r5, r3
 801c748:	4604      	mov	r4, r0
 801c74a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c74c:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801c750:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801c754:	9208      	str	r2, [sp, #32]
 801c756:	2a00      	cmp	r2, #0
 801c758:	f000 81f3 	beq.w	801cb42 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801c75c:	6828      	ldr	r0, [r5, #0]
 801c75e:	aa16      	add	r2, sp, #88	@ 0x58
 801c760:	6869      	ldr	r1, [r5, #4]
 801c762:	c203      	stmia	r2!, {r0, r1}
 801c764:	6818      	ldr	r0, [r3, #0]
 801c766:	aa18      	add	r2, sp, #96	@ 0x60
 801c768:	6859      	ldr	r1, [r3, #4]
 801c76a:	c203      	stmia	r2!, {r0, r1}
 801c76c:	a816      	add	r0, sp, #88	@ 0x58
 801c76e:	f7f9 fe1b 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c772:	4629      	mov	r1, r5
 801c774:	a818      	add	r0, sp, #96	@ 0x60
 801c776:	f7f9 fe3f 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c77a:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801c77e:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801c782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801c786:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801c78a:	bfdb      	ittet	le
 801c78c:	b29a      	uxthle	r2, r3
 801c78e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801c792:	f04f 0a01 	movgt.w	sl, #1
 801c796:	fb91 faf2 	sdivle	sl, r1, r2
 801c79a:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801c79e:	4456      	add	r6, sl
 801c7a0:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801c7a4:	3e01      	subs	r6, #1
 801c7a6:	fb92 f0fa 	sdiv	r0, r2, sl
 801c7aa:	b280      	uxth	r0, r0
 801c7ac:	fb00 281a 	mls	r8, r0, sl, r2
 801c7b0:	900e      	str	r0, [sp, #56]	@ 0x38
 801c7b2:	fb18 f803 	smulbb	r8, r8, r3
 801c7b6:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801c7ba:	4488      	add	r8, r1
 801c7bc:	4419      	add	r1, r3
 801c7be:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801c7c2:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801c7c6:	fa1f f888 	uxth.w	r8, r8
 801c7ca:	441a      	add	r2, r3
 801c7cc:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801c7d0:	9303      	str	r3, [sp, #12]
 801c7d2:	4b9c      	ldr	r3, [pc, #624]	@ (801ca44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801c7d4:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801c7d8:	6818      	ldr	r0, [r3, #0]
 801c7da:	6803      	ldr	r3, [r0, #0]
 801c7dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c7de:	4798      	blx	r3
 801c7e0:	4b99      	ldr	r3, [pc, #612]	@ (801ca48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801c7e2:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801c7e6:	f1b8 0f00 	cmp.w	r8, #0
 801c7ea:	881a      	ldrh	r2, [r3, #0]
 801c7ec:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801c7f0:	fb02 f505 	mul.w	r5, r2, r5
 801c7f4:	fb02 7101 	mla	r1, r2, r1, r7
 801c7f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c7fc:	9314      	str	r3, [sp, #80]	@ 0x50
 801c7fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c802:	9b08      	ldr	r3, [sp, #32]
 801c804:	fb96 f6fa 	sdiv	r6, r6, sl
 801c808:	4408      	add	r0, r1
 801c80a:	f106 0601 	add.w	r6, r6, #1
 801c80e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801c812:	f04f 0100 	mov.w	r1, #0
 801c816:	eb00 0205 	add.w	r2, r0, r5
 801c81a:	b2b6      	uxth	r6, r6
 801c81c:	b29b      	uxth	r3, r3
 801c81e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c820:	9209      	str	r2, [sp, #36]	@ 0x24
 801c822:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c824:	930d      	str	r3, [sp, #52]	@ 0x34
 801c826:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c82a:	4b88      	ldr	r3, [pc, #544]	@ (801ca4c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801c82c:	f106 0204 	add.w	r2, r6, #4
 801c830:	eba3 0304 	sub.w	r3, r3, r4
 801c834:	9205      	str	r2, [sp, #20]
 801c836:	9a03      	ldr	r2, [sp, #12]
 801c838:	bf18      	it	ne
 801c83a:	2200      	movne	r2, #0
 801c83c:	9315      	str	r3, [sp, #84]	@ 0x54
 801c83e:	b292      	uxth	r2, r2
 801c840:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c844:	fa11 f383 	uxtah	r3, r1, r3
 801c848:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801c84a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c84e:	3304      	adds	r3, #4
 801c850:	9306      	str	r3, [sp, #24]
 801c852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c854:	4283      	cmp	r3, r0
 801c856:	f240 816f 	bls.w	801cb38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801c85a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801c85e:	f04f 0900 	mov.w	r9, #0
 801c862:	9d06      	ldr	r5, [sp, #24]
 801c864:	fbb8 f3f3 	udiv	r3, r8, r3
 801c868:	ebaa 0303 	sub.w	r3, sl, r3
 801c86c:	782d      	ldrb	r5, [r5, #0]
 801c86e:	b29b      	uxth	r3, r3
 801c870:	950f      	str	r5, [sp, #60]	@ 0x3c
 801c872:	3501      	adds	r5, #1
 801c874:	9312      	str	r3, [sp, #72]	@ 0x48
 801c876:	9b06      	ldr	r3, [sp, #24]
 801c878:	9504      	str	r5, [sp, #16]
 801c87a:	7859      	ldrb	r1, [r3, #1]
 801c87c:	789b      	ldrb	r3, [r3, #2]
 801c87e:	021b      	lsls	r3, r3, #8
 801c880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801c884:	9906      	ldr	r1, [sp, #24]
 801c886:	78c9      	ldrb	r1, [r1, #3]
 801c888:	430b      	orrs	r3, r1
 801c88a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801c88c:	4419      	add	r1, r3
 801c88e:	1c4d      	adds	r5, r1, #1
 801c890:	7849      	ldrb	r1, [r1, #1]
 801c892:	9502      	str	r5, [sp, #8]
 801c894:	0209      	lsls	r1, r1, #8
 801c896:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801c898:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801c89c:	5ceb      	ldrb	r3, [r5, r3]
 801c89e:	4319      	orrs	r1, r3
 801c8a0:	b28b      	uxth	r3, r1
 801c8a2:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801c8a6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c8a8:	2300      	movs	r3, #0
 801c8aa:	9307      	str	r3, [sp, #28]
 801c8ac:	2301      	movs	r3, #1
 801c8ae:	e9cd 3300 	strd	r3, r3, [sp]
 801c8b2:	469c      	mov	ip, r3
 801c8b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c8b8:	930c      	str	r3, [sp, #48]	@ 0x30
 801c8ba:	f1b8 0f00 	cmp.w	r8, #0
 801c8be:	f000 8082 	beq.w	801c9c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801c8c2:	45c4      	cmp	ip, r8
 801c8c4:	d270      	bcs.n	801c9a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801c8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c8c8:	eba8 080c 	sub.w	r8, r8, ip
 801c8cc:	4611      	mov	r1, r2
 801c8ce:	4283      	cmp	r3, r0
 801c8d0:	fa1f f888 	uxth.w	r8, r8
 801c8d4:	d802      	bhi.n	801c8dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801c8d6:	e074      	b.n	801c9c2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d15f      	bne.n	801c99c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801c8dc:	9b02      	ldr	r3, [sp, #8]
 801c8de:	9a01      	ldr	r2, [sp, #4]
 801c8e0:	785b      	ldrb	r3, [r3, #1]
 801c8e2:	f1c2 0207 	rsb	r2, r2, #7
 801c8e6:	9d01      	ldr	r5, [sp, #4]
 801c8e8:	4093      	lsls	r3, r2
 801c8ea:	005b      	lsls	r3, r3, #1
 801c8ec:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801c8f0:	9b02      	ldr	r3, [sp, #8]
 801c8f2:	781b      	ldrb	r3, [r3, #0]
 801c8f4:	412b      	asrs	r3, r5
 801c8f6:	b2db      	uxtb	r3, r3
 801c8f8:	4313      	orrs	r3, r2
 801c8fa:	462a      	mov	r2, r5
 801c8fc:	3201      	adds	r2, #1
 801c8fe:	b29e      	uxth	r6, r3
 801c900:	b2d2      	uxtb	r2, r2
 801c902:	2a08      	cmp	r2, #8
 801c904:	9201      	str	r2, [sp, #4]
 801c906:	9a02      	ldr	r2, [sp, #8]
 801c908:	bf09      	itett	eq
 801c90a:	3202      	addeq	r2, #2
 801c90c:	3201      	addne	r2, #1
 801c90e:	9202      	streq	r2, [sp, #8]
 801c910:	2200      	moveq	r2, #0
 801c912:	bf14      	ite	ne
 801c914:	9202      	strne	r2, [sp, #8]
 801c916:	9201      	streq	r2, [sp, #4]
 801c918:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c91a:	42b2      	cmp	r2, r6
 801c91c:	d309      	bcc.n	801c932 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801c91e:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801c922:	2301      	movs	r3, #1
 801c924:	9a04      	ldr	r2, [sp, #16]
 801c926:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801c92a:	d30e      	bcc.n	801c94a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801c92c:	9300      	str	r3, [sp, #0]
 801c92e:	2500      	movs	r5, #0
 801c930:	e035      	b.n	801c99e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801c932:	9b04      	ldr	r3, [sp, #16]
 801c934:	429e      	cmp	r6, r3
 801c936:	d318      	bcc.n	801c96a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801c938:	9b00      	ldr	r3, [sp, #0]
 801c93a:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801c93e:	18e3      	adds	r3, r4, r3
 801c940:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801c944:	9b00      	ldr	r3, [sp, #0]
 801c946:	3301      	adds	r3, #1
 801c948:	b29b      	uxth	r3, r3
 801c94a:	9a04      	ldr	r2, [sp, #16]
 801c94c:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801c950:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c954:	9f00      	ldr	r7, [sp, #0]
 801c956:	7115      	strb	r5, [r2, #4]
 801c958:	3701      	adds	r7, #1
 801c95a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c95c:	7157      	strb	r7, [r2, #5]
 801c95e:	80d5      	strh	r5, [r2, #6]
 801c960:	9a04      	ldr	r2, [sp, #16]
 801c962:	3201      	adds	r2, #1
 801c964:	b292      	uxth	r2, r2
 801c966:	9204      	str	r2, [sp, #16]
 801c968:	e7e0      	b.n	801c92c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801c96a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801c96e:	4632      	mov	r2, r6
 801c970:	795b      	ldrb	r3, [r3, #5]
 801c972:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801c976:	4425      	add	r5, r4
 801c978:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801c97a:	eb07 0c05 	add.w	ip, r7, r5
 801c97e:	f1bc 0f00 	cmp.w	ip, #0
 801c982:	dd07      	ble.n	801c994 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801c984:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c988:	f892 c004 	ldrb.w	ip, [r2, #4]
 801c98c:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801c990:	88d2      	ldrh	r2, [r2, #6]
 801c992:	e7f1      	b.n	801c978 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801c994:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801c998:	b29b      	uxth	r3, r3
 801c99a:	e7c3      	b.n	801c924 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801c99c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c99e:	460a      	mov	r2, r1
 801c9a0:	960a      	str	r6, [sp, #40]	@ 0x28
 801c9a2:	46a9      	mov	r9, r5
 801c9a4:	469c      	mov	ip, r3
 801c9a6:	e788      	b.n	801c8ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801c9a8:	ebac 0308 	sub.w	r3, ip, r8
 801c9ac:	eb09 0508 	add.w	r5, r9, r8
 801c9b0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c9b4:	b29b      	uxth	r3, r3
 801c9b6:	b2ad      	uxth	r5, r5
 801c9b8:	f04f 0800 	mov.w	r8, #0
 801c9bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c9be:	4282      	cmp	r2, r0
 801c9c0:	d88a      	bhi.n	801c8d8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801c9c2:	460a      	mov	r2, r1
 801c9c4:	e745      	b.n	801c852 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801c9c6:	4594      	cmp	ip, r2
 801c9c8:	9d08      	ldr	r5, [sp, #32]
 801c9ca:	4686      	mov	lr, r0
 801c9cc:	bf27      	ittee	cs
 801c9ce:	ebac 0302 	subcs.w	r3, ip, r2
 801c9d2:	4616      	movcs	r6, r2
 801c9d4:	eba2 010c 	subcc.w	r1, r2, ip
 801c9d8:	4666      	movcc	r6, ip
 801c9da:	bf27      	ittee	cs
 801c9dc:	b29b      	uxthcs	r3, r3
 801c9de:	4641      	movcs	r1, r8
 801c9e0:	b289      	uxthcc	r1, r1
 801c9e2:	4643      	movcc	r3, r8
 801c9e4:	2dff      	cmp	r5, #255	@ 0xff
 801c9e6:	eb09 0506 	add.w	r5, r9, r6
 801c9ea:	b2ad      	uxth	r5, r5
 801c9ec:	d130      	bne.n	801ca50 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801c9ee:	45a9      	cmp	r9, r5
 801c9f0:	f10e 0e03 	add.w	lr, lr, #3
 801c9f4:	d17a      	bne.n	801caec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801c9f6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c9fa:	4594      	cmp	ip, r2
 801c9fc:	4430      	add	r0, r6
 801c9fe:	d3db      	bcc.n	801c9b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801ca00:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ca02:	9903      	ldr	r1, [sp, #12]
 801ca04:	8812      	ldrh	r2, [r2, #0]
 801ca06:	1a52      	subs	r2, r2, r1
 801ca08:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ca0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ca0e:	4410      	add	r0, r2
 801ca10:	9a07      	ldr	r2, [sp, #28]
 801ca12:	3201      	adds	r2, #1
 801ca14:	428a      	cmp	r2, r1
 801ca16:	9207      	str	r2, [sp, #28]
 801ca18:	f040 8081 	bne.w	801cb1e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801ca1c:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801ca20:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801ca24:	9b03      	ldr	r3, [sp, #12]
 801ca26:	eba8 080c 	sub.w	r8, r8, ip
 801ca2a:	fa1f f888 	uxth.w	r8, r8
 801ca2e:	f1b8 0f00 	cmp.w	r8, #0
 801ca32:	bf08      	it	eq
 801ca34:	461a      	moveq	r2, r3
 801ca36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca38:	bf18      	it	ne
 801ca3a:	2200      	movne	r2, #0
 801ca3c:	3301      	adds	r3, #1
 801ca3e:	b292      	uxth	r2, r2
 801ca40:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ca42:	e6fd      	b.n	801c840 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801ca44:	24028e2c 	.word	0x24028e2c
 801ca48:	24028e26 	.word	0x24028e26
 801ca4c:	fffff7fb 	.word	0xfffff7fb
 801ca50:	45a9      	cmp	r9, r5
 801ca52:	f10e 0e03 	add.w	lr, lr, #3
 801ca56:	d0ce      	beq.n	801c9f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801ca58:	f109 0701 	add.w	r7, r9, #1
 801ca5c:	44a1      	add	r9, r4
 801ca5e:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801ca62:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801ca66:	9713      	str	r7, [sp, #76]	@ 0x4c
 801ca68:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ca6c:	9f05      	ldr	r7, [sp, #20]
 801ca6e:	eb07 0908 	add.w	r9, r7, r8
 801ca72:	f817 8008 	ldrb.w	r8, [r7, r8]
 801ca76:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ca78:	fb1b fb07 	smulbb	fp, fp, r7
 801ca7c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ca7e:	fb08 b807 	mla	r8, r8, r7, fp
 801ca82:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ca84:	fa1f f888 	uxth.w	r8, r8
 801ca88:	f108 0b01 	add.w	fp, r8, #1
 801ca8c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ca90:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801ca94:	fb1b fb07 	smulbb	fp, fp, r7
 801ca98:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ca9c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ca9e:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801caa2:	f899 8001 	ldrb.w	r8, [r9, #1]
 801caa6:	fb08 b807 	mla	r8, r8, r7, fp
 801caaa:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801caac:	fa1f f888 	uxth.w	r8, r8
 801cab0:	f108 0b01 	add.w	fp, r8, #1
 801cab4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cab8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cabc:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801cac0:	f899 8002 	ldrb.w	r8, [r9, #2]
 801cac4:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801cac8:	fb19 f907 	smulbb	r9, r9, r7
 801cacc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801cace:	fb08 9807 	mla	r8, r8, r7, r9
 801cad2:	fa1f f888 	uxth.w	r8, r8
 801cad6:	f108 0901 	add.w	r9, r8, #1
 801cada:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801cade:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801cae2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cae6:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801caea:	e7b1      	b.n	801ca50 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801caec:	f109 0b01 	add.w	fp, r9, #1
 801caf0:	44a1      	add	r9, r4
 801caf2:	9f05      	ldr	r7, [sp, #20]
 801caf4:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801caf8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cafc:	eb07 0908 	add.w	r9, r7, r8
 801cb00:	f817 8008 	ldrb.w	r8, [r7, r8]
 801cb04:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801cb08:	f899 8001 	ldrb.w	r8, [r9, #1]
 801cb0c:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801cb10:	f899 8002 	ldrb.w	r8, [r9, #2]
 801cb14:	fa1f f98b 	uxth.w	r9, fp
 801cb18:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801cb1c:	e767      	b.n	801c9ee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801cb1e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801cb22:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801cb26:	eba8 0801 	sub.w	r8, r8, r1
 801cb2a:	fa1f f888 	uxth.w	r8, r8
 801cb2e:	f1b8 0f00 	cmp.w	r8, #0
 801cb32:	bf18      	it	ne
 801cb34:	2100      	movne	r1, #0
 801cb36:	e741      	b.n	801c9bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801cb38:	4b03      	ldr	r3, [pc, #12]	@ (801cb48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801cb3a:	6818      	ldr	r0, [r3, #0]
 801cb3c:	6803      	ldr	r3, [r0, #0]
 801cb3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb40:	4798      	blx	r3
 801cb42:	b01b      	add	sp, #108	@ 0x6c
 801cb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb48:	24028e2c 	.word	0x24028e2c

0801cb4c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801cb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb50:	b09d      	sub	sp, #116	@ 0x74
 801cb52:	461d      	mov	r5, r3
 801cb54:	4604      	mov	r4, r0
 801cb56:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cb58:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801cb5c:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801cb60:	920c      	str	r2, [sp, #48]	@ 0x30
 801cb62:	2a00      	cmp	r2, #0
 801cb64:	f000 81de 	beq.w	801cf24 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801cb68:	6828      	ldr	r0, [r5, #0]
 801cb6a:	aa18      	add	r2, sp, #96	@ 0x60
 801cb6c:	6869      	ldr	r1, [r5, #4]
 801cb6e:	c203      	stmia	r2!, {r0, r1}
 801cb70:	6818      	ldr	r0, [r3, #0]
 801cb72:	aa1a      	add	r2, sp, #104	@ 0x68
 801cb74:	6859      	ldr	r1, [r3, #4]
 801cb76:	c203      	stmia	r2!, {r0, r1}
 801cb78:	a818      	add	r0, sp, #96	@ 0x60
 801cb7a:	f7f9 fc15 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cb7e:	4629      	mov	r1, r5
 801cb80:	a81a      	add	r0, sp, #104	@ 0x68
 801cb82:	f7f9 fc39 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cb86:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801cb8a:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801cb8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801cb92:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801cb96:	bfdb      	ittet	le
 801cb98:	b29a      	uxthle	r2, r3
 801cb9a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801cb9e:	2201      	movgt	r2, #1
 801cba0:	fb91 f2f2 	sdivle	r2, r1, r2
 801cba4:	9201      	str	r2, [sp, #4]
 801cba6:	9801      	ldr	r0, [sp, #4]
 801cba8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801cbac:	9901      	ldr	r1, [sp, #4]
 801cbae:	fb92 f0f0 	sdiv	r0, r2, r0
 801cbb2:	b280      	uxth	r0, r0
 801cbb4:	440f      	add	r7, r1
 801cbb6:	900d      	str	r0, [sp, #52]	@ 0x34
 801cbb8:	3f01      	subs	r7, #1
 801cbba:	9801      	ldr	r0, [sp, #4]
 801cbbc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801cbbe:	fb05 2510 	mls	r5, r5, r0, r2
 801cbc2:	fb97 f7f1 	sdiv	r7, r7, r1
 801cbc6:	fb15 f503 	smulbb	r5, r5, r3
 801cbca:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801cbce:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801cbd2:	3701      	adds	r7, #1
 801cbd4:	440d      	add	r5, r1
 801cbd6:	4419      	add	r1, r3
 801cbd8:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801cbdc:	b2bf      	uxth	r7, r7
 801cbde:	441a      	add	r2, r3
 801cbe0:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801cbe4:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801cbe8:	00bf      	lsls	r7, r7, #2
 801cbea:	9304      	str	r3, [sp, #16]
 801cbec:	b2ad      	uxth	r5, r5
 801cbee:	4bb0      	ldr	r3, [pc, #704]	@ (801ceb0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801cbf0:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801cbf4:	6818      	ldr	r0, [r3, #0]
 801cbf6:	6803      	ldr	r3, [r0, #0]
 801cbf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cbfa:	4798      	blx	r3
 801cbfc:	4bad      	ldr	r3, [pc, #692]	@ (801ceb4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801cbfe:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801cc02:	2d00      	cmp	r5, #0
 801cc04:	881a      	ldrh	r2, [r3, #0]
 801cc06:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801cc0a:	fb02 f606 	mul.w	r6, r2, r6
 801cc0e:	fb02 c101 	mla	r1, r2, r1, ip
 801cc12:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cc16:	9316      	str	r3, [sp, #88]	@ 0x58
 801cc18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cc1c:	4ba6      	ldr	r3, [pc, #664]	@ (801ceb8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801cc1e:	eb00 0801 	add.w	r8, r0, r1
 801cc22:	bf18      	it	ne
 801cc24:	2100      	movne	r1, #0
 801cc26:	eba3 0304 	sub.w	r3, r3, r4
 801cc2a:	eb08 0206 	add.w	r2, r8, r6
 801cc2e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801cc30:	9208      	str	r2, [sp, #32]
 801cc32:	f107 0204 	add.w	r2, r7, #4
 801cc36:	9211      	str	r2, [sp, #68]	@ 0x44
 801cc38:	9a04      	ldr	r2, [sp, #16]
 801cc3a:	bf08      	it	eq
 801cc3c:	4611      	moveq	r1, r2
 801cc3e:	2200      	movs	r2, #0
 801cc40:	b289      	uxth	r1, r1
 801cc42:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cc44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cc46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cc48:	fa12 f383 	uxtah	r3, r2, r3
 801cc4c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cc4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cc52:	3304      	adds	r3, #4
 801cc54:	9306      	str	r3, [sp, #24]
 801cc56:	9b08      	ldr	r3, [sp, #32]
 801cc58:	4543      	cmp	r3, r8
 801cc5a:	f240 815e 	bls.w	801cf1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801cc5e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801cc62:	f04f 0b01 	mov.w	fp, #1
 801cc66:	9a01      	ldr	r2, [sp, #4]
 801cc68:	9806      	ldr	r0, [sp, #24]
 801cc6a:	465e      	mov	r6, fp
 801cc6c:	f8cd b008 	str.w	fp, [sp, #8]
 801cc70:	7800      	ldrb	r0, [r0, #0]
 801cc72:	fbb5 f3f3 	udiv	r3, r5, r3
 801cc76:	1ad3      	subs	r3, r2, r3
 801cc78:	900e      	str	r0, [sp, #56]	@ 0x38
 801cc7a:	3001      	adds	r0, #1
 801cc7c:	b29b      	uxth	r3, r3
 801cc7e:	9005      	str	r0, [sp, #20]
 801cc80:	9312      	str	r3, [sp, #72]	@ 0x48
 801cc82:	9b06      	ldr	r3, [sp, #24]
 801cc84:	785a      	ldrb	r2, [r3, #1]
 801cc86:	789b      	ldrb	r3, [r3, #2]
 801cc88:	021b      	lsls	r3, r3, #8
 801cc8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cc8e:	9a06      	ldr	r2, [sp, #24]
 801cc90:	78d2      	ldrb	r2, [r2, #3]
 801cc92:	4313      	orrs	r3, r2
 801cc94:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cc96:	441a      	add	r2, r3
 801cc98:	1c50      	adds	r0, r2, #1
 801cc9a:	7852      	ldrb	r2, [r2, #1]
 801cc9c:	9003      	str	r0, [sp, #12]
 801cc9e:	0212      	lsls	r2, r2, #8
 801cca0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801cca2:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801cca6:	5cc3      	ldrb	r3, [r0, r3]
 801cca8:	431a      	orrs	r2, r3
 801ccaa:	b293      	uxth	r3, r2
 801ccac:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801ccb0:	930a      	str	r3, [sp, #40]	@ 0x28
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	461a      	mov	r2, r3
 801ccb6:	9307      	str	r3, [sp, #28]
 801ccb8:	2d00      	cmp	r5, #0
 801ccba:	d07c      	beq.n	801cdb6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801ccbc:	42ae      	cmp	r6, r5
 801ccbe:	d26c      	bcs.n	801cd9a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801ccc0:	9b08      	ldr	r3, [sp, #32]
 801ccc2:	1bad      	subs	r5, r5, r6
 801ccc4:	4608      	mov	r0, r1
 801ccc6:	4543      	cmp	r3, r8
 801ccc8:	b2ad      	uxth	r5, r5
 801ccca:	d802      	bhi.n	801ccd2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801cccc:	e071      	b.n	801cdb2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d15d      	bne.n	801cd8e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801ccd2:	9b03      	ldr	r3, [sp, #12]
 801ccd4:	9a02      	ldr	r2, [sp, #8]
 801ccd6:	785b      	ldrb	r3, [r3, #1]
 801ccd8:	f1c2 0207 	rsb	r2, r2, #7
 801ccdc:	9902      	ldr	r1, [sp, #8]
 801ccde:	4093      	lsls	r3, r2
 801cce0:	005b      	lsls	r3, r3, #1
 801cce2:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801cce6:	9b03      	ldr	r3, [sp, #12]
 801cce8:	781b      	ldrb	r3, [r3, #0]
 801ccea:	410b      	asrs	r3, r1
 801ccec:	3101      	adds	r1, #1
 801ccee:	b2c9      	uxtb	r1, r1
 801ccf0:	b2db      	uxtb	r3, r3
 801ccf2:	2908      	cmp	r1, #8
 801ccf4:	9102      	str	r1, [sp, #8]
 801ccf6:	9903      	ldr	r1, [sp, #12]
 801ccf8:	ea43 0302 	orr.w	r3, r3, r2
 801ccfc:	bf0c      	ite	eq
 801ccfe:	3102      	addeq	r1, #2
 801cd00:	3101      	addne	r1, #1
 801cd02:	b29a      	uxth	r2, r3
 801cd04:	bf05      	ittet	eq
 801cd06:	9103      	streq	r1, [sp, #12]
 801cd08:	2100      	moveq	r1, #0
 801cd0a:	9103      	strne	r1, [sp, #12]
 801cd0c:	9102      	streq	r1, [sp, #8]
 801cd0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801cd10:	4291      	cmp	r1, r2
 801cd12:	d30a      	bcc.n	801cd2a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801cd14:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801cd18:	2301      	movs	r3, #1
 801cd1a:	9905      	ldr	r1, [sp, #20]
 801cd1c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801cd20:	d30f      	bcc.n	801cd42 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801cd22:	469b      	mov	fp, r3
 801cd24:	f04f 0c00 	mov.w	ip, #0
 801cd28:	e032      	b.n	801cd90 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801cd2a:	9b05      	ldr	r3, [sp, #20]
 801cd2c:	429a      	cmp	r2, r3
 801cd2e:	d318      	bcc.n	801cd62 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801cd30:	eb04 030b 	add.w	r3, r4, fp
 801cd34:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801cd38:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801cd3c:	f10b 0301 	add.w	r3, fp, #1
 801cd40:	b29b      	uxth	r3, r3
 801cd42:	9905      	ldr	r1, [sp, #20]
 801cd44:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801cd48:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801cd4c:	710e      	strb	r6, [r1, #4]
 801cd4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801cd50:	80ce      	strh	r6, [r1, #6]
 801cd52:	f10b 0601 	add.w	r6, fp, #1
 801cd56:	714e      	strb	r6, [r1, #5]
 801cd58:	9905      	ldr	r1, [sp, #20]
 801cd5a:	3101      	adds	r1, #1
 801cd5c:	b289      	uxth	r1, r1
 801cd5e:	9105      	str	r1, [sp, #20]
 801cd60:	e7df      	b.n	801cd22 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801cd62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cd66:	4611      	mov	r1, r2
 801cd68:	795b      	ldrb	r3, [r3, #5]
 801cd6a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801cd6e:	4426      	add	r6, r4
 801cd70:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801cd72:	4437      	add	r7, r6
 801cd74:	2f00      	cmp	r7, #0
 801cd76:	dd06      	ble.n	801cd86 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801cd78:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801cd7c:	790f      	ldrb	r7, [r1, #4]
 801cd7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cd82:	88c9      	ldrh	r1, [r1, #6]
 801cd84:	e7f4      	b.n	801cd70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801cd86:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801cd8a:	b29b      	uxth	r3, r3
 801cd8c:	e7c5      	b.n	801cd1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801cd8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cd90:	920a      	str	r2, [sp, #40]	@ 0x28
 801cd92:	4601      	mov	r1, r0
 801cd94:	4662      	mov	r2, ip
 801cd96:	461e      	mov	r6, r3
 801cd98:	e78e      	b.n	801ccb8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801cd9a:	1b73      	subs	r3, r6, r5
 801cd9c:	eb02 0c05 	add.w	ip, r2, r5
 801cda0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801cda4:	b29b      	uxth	r3, r3
 801cda6:	fa1f fc8c 	uxth.w	ip, ip
 801cdaa:	2500      	movs	r5, #0
 801cdac:	9a08      	ldr	r2, [sp, #32]
 801cdae:	4542      	cmp	r2, r8
 801cdb0:	d88d      	bhi.n	801ccce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801cdb2:	4601      	mov	r1, r0
 801cdb4:	e74f      	b.n	801cc56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801cdb6:	428e      	cmp	r6, r1
 801cdb8:	bf2b      	itete	cs
 801cdba:	468e      	movcs	lr, r1
 801cdbc:	46b6      	movcc	lr, r6
 801cdbe:	1a73      	subcs	r3, r6, r1
 801cdc0:	1b88      	subcc	r0, r1, r6
 801cdc2:	eb02 0c0e 	add.w	ip, r2, lr
 801cdc6:	bf2b      	itete	cs
 801cdc8:	4628      	movcs	r0, r5
 801cdca:	462b      	movcc	r3, r5
 801cdcc:	b29b      	uxthcs	r3, r3
 801cdce:	b280      	uxthcc	r0, r0
 801cdd0:	f108 0503 	add.w	r5, r8, #3
 801cdd4:	fa1f fc8c 	uxth.w	ip, ip
 801cdd8:	4562      	cmp	r2, ip
 801cdda:	d06f      	beq.n	801cebc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801cddc:	1c57      	adds	r7, r2, #1
 801cdde:	4422      	add	r2, r4
 801cde0:	b2bf      	uxth	r7, r7
 801cde2:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801cde6:	9713      	str	r7, [sp, #76]	@ 0x4c
 801cde8:	2704      	movs	r7, #4
 801cdea:	46b9      	mov	r9, r7
 801cdec:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801cdee:	fb19 7202 	smlabb	r2, r9, r2, r7
 801cdf2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801cdf4:	58bf      	ldr	r7, [r7, r2]
 801cdf6:	0e3a      	lsrs	r2, r7, #24
 801cdf8:	9209      	str	r2, [sp, #36]	@ 0x24
 801cdfa:	d016      	beq.n	801ce2a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801cdfc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ce00:	fa5f fa87 	uxtb.w	sl, r7
 801ce04:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ce08:	fa5f f289 	uxtb.w	r2, r9
 801ce0c:	9214      	str	r2, [sp, #80]	@ 0x50
 801ce0e:	b2fa      	uxtb	r2, r7
 801ce10:	9215      	str	r2, [sp, #84]	@ 0x54
 801ce12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ce14:	2aff      	cmp	r2, #255	@ 0xff
 801ce16:	d10b      	bne.n	801ce30 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801ce18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ce1a:	2aff      	cmp	r2, #255	@ 0xff
 801ce1c:	d108      	bne.n	801ce30 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801ce1e:	f805 ac03 	strb.w	sl, [r5, #-3]
 801ce22:	f805 9c02 	strb.w	r9, [r5, #-2]
 801ce26:	f805 7c01 	strb.w	r7, [r5, #-1]
 801ce2a:	3503      	adds	r5, #3
 801ce2c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ce2e:	e7d3      	b.n	801cdd8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801ce30:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801ce32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ce34:	437a      	muls	r2, r7
 801ce36:	1c57      	adds	r7, r2, #1
 801ce38:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801ce3c:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801ce40:	1212      	asrs	r2, r2, #8
 801ce42:	fa1f f982 	uxth.w	r9, r2
 801ce46:	43d2      	mvns	r2, r2
 801ce48:	fb1a fa09 	smulbb	sl, sl, r9
 801ce4c:	b2d2      	uxtb	r2, r2
 801ce4e:	fb07 a702 	mla	r7, r7, r2, sl
 801ce52:	9209      	str	r2, [sp, #36]	@ 0x24
 801ce54:	b2bf      	uxth	r7, r7
 801ce56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ce58:	f107 0a01 	add.w	sl, r7, #1
 801ce5c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801ce60:	fb12 fa09 	smulbb	sl, r2, r9
 801ce64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ce66:	123f      	asrs	r7, r7, #8
 801ce68:	f805 7c03 	strb.w	r7, [r5, #-3]
 801ce6c:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801ce70:	fb07 aa02 	mla	sl, r7, r2, sl
 801ce74:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ce76:	fb12 f909 	smulbb	r9, r2, r9
 801ce7a:	fa1f fa8a 	uxth.w	sl, sl
 801ce7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ce80:	f10a 0701 	add.w	r7, sl, #1
 801ce84:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ce88:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801ce8c:	fb07 9902 	mla	r9, r7, r2, r9
 801ce90:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ce94:	fa1f f989 	uxth.w	r9, r9
 801ce98:	f805 ac02 	strb.w	sl, [r5, #-2]
 801ce9c:	f109 0201 	add.w	r2, r9, #1
 801cea0:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801cea4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cea8:	f805 9c01 	strb.w	r9, [r5, #-1]
 801ceac:	e7bd      	b.n	801ce2a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801ceae:	bf00      	nop
 801ceb0:	24028e2c 	.word	0x24028e2c
 801ceb4:	24028e26 	.word	0x24028e26
 801ceb8:	fffff7fb 	.word	0xfffff7fb
 801cebc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cec0:	428e      	cmp	r6, r1
 801cec2:	44f0      	add	r8, lr
 801cec4:	f4ff af71 	bcc.w	801cdaa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801cec8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ceca:	9904      	ldr	r1, [sp, #16]
 801cecc:	8812      	ldrh	r2, [r2, #0]
 801cece:	1a52      	subs	r2, r2, r1
 801ced0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ced2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ced6:	4490      	add	r8, r2
 801ced8:	9a07      	ldr	r2, [sp, #28]
 801ceda:	3201      	adds	r2, #1
 801cedc:	428a      	cmp	r2, r1
 801cede:	9207      	str	r2, [sp, #28]
 801cee0:	d111      	bne.n	801cf06 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801cee2:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801cee6:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801ceea:	9b04      	ldr	r3, [sp, #16]
 801ceec:	eba5 050c 	sub.w	r5, r5, ip
 801cef0:	b2ad      	uxth	r5, r5
 801cef2:	2d00      	cmp	r5, #0
 801cef4:	bf08      	it	eq
 801cef6:	4619      	moveq	r1, r3
 801cef8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cefa:	bf18      	it	ne
 801cefc:	2100      	movne	r1, #0
 801cefe:	3301      	adds	r3, #1
 801cf00:	b289      	uxth	r1, r1
 801cf02:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cf04:	e69e      	b.n	801cc44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801cf06:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801cf0a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801cf0e:	1a2d      	subs	r5, r5, r0
 801cf10:	b2ad      	uxth	r5, r5
 801cf12:	2d00      	cmp	r5, #0
 801cf14:	bf18      	it	ne
 801cf16:	2000      	movne	r0, #0
 801cf18:	e748      	b.n	801cdac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801cf1a:	4b04      	ldr	r3, [pc, #16]	@ (801cf2c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801cf1c:	6818      	ldr	r0, [r3, #0]
 801cf1e:	6803      	ldr	r3, [r0, #0]
 801cf20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cf22:	4798      	blx	r3
 801cf24:	b01d      	add	sp, #116	@ 0x74
 801cf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf2a:	bf00      	nop
 801cf2c:	24028e2c 	.word	0x24028e2c

0801cf30 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf34:	b08f      	sub	sp, #60	@ 0x3c
 801cf36:	4616      	mov	r6, r2
 801cf38:	4681      	mov	r9, r0
 801cf3a:	460d      	mov	r5, r1
 801cf3c:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801cf40:	9205      	str	r2, [sp, #20]
 801cf42:	2a00      	cmp	r2, #0
 801cf44:	f000 82a8 	beq.w	801d498 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801cf48:	6830      	ldr	r0, [r6, #0]
 801cf4a:	ac0a      	add	r4, sp, #40	@ 0x28
 801cf4c:	6871      	ldr	r1, [r6, #4]
 801cf4e:	c403      	stmia	r4!, {r0, r1}
 801cf50:	6818      	ldr	r0, [r3, #0]
 801cf52:	ac0c      	add	r4, sp, #48	@ 0x30
 801cf54:	6859      	ldr	r1, [r3, #4]
 801cf56:	c403      	stmia	r4!, {r0, r1}
 801cf58:	a80a      	add	r0, sp, #40	@ 0x28
 801cf5a:	f7f9 fa25 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf5e:	4631      	mov	r1, r6
 801cf60:	a80c      	add	r0, sp, #48	@ 0x30
 801cf62:	f7f9 fa49 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cf66:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801cf6a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801cf6e:	bfdb      	ittet	le
 801cf70:	b293      	uxthle	r3, r2
 801cf72:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801cf76:	2301      	movgt	r3, #1
 801cf78:	fb91 f3f3 	sdivle	r3, r1, r3
 801cf7c:	9300      	str	r3, [sp, #0]
 801cf7e:	f105 0308 	add.w	r3, r5, #8
 801cf82:	9900      	ldr	r1, [sp, #0]
 801cf84:	9306      	str	r3, [sp, #24]
 801cf86:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801cf8a:	440b      	add	r3, r1
 801cf8c:	3b01      	subs	r3, #1
 801cf8e:	fb93 f3f1 	sdiv	r3, r3, r1
 801cf92:	3b01      	subs	r3, #1
 801cf94:	9906      	ldr	r1, [sp, #24]
 801cf96:	b29b      	uxth	r3, r3
 801cf98:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801cf9c:	9900      	ldr	r1, [sp, #0]
 801cf9e:	9307      	str	r3, [sp, #28]
 801cfa0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801cfa4:	fb93 f0f1 	sdiv	r0, r3, r1
 801cfa8:	b284      	uxth	r4, r0
 801cfaa:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801cfae:	b280      	uxth	r0, r0
 801cfb0:	9402      	str	r4, [sp, #8]
 801cfb2:	9d02      	ldr	r5, [sp, #8]
 801cfb4:	9c00      	ldr	r4, [sp, #0]
 801cfb6:	fb05 3514 	mls	r5, r5, r4, r3
 801cfba:	fb15 f502 	smulbb	r5, r5, r2
 801cfbe:	440d      	add	r5, r1
 801cfc0:	b2ad      	uxth	r5, r5
 801cfc2:	2800      	cmp	r0, #0
 801cfc4:	d071      	beq.n	801d0aa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801cfc6:	1e42      	subs	r2, r0, #1
 801cfc8:	9806      	ldr	r0, [sp, #24]
 801cfca:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801cfce:	9a07      	ldr	r2, [sp, #28]
 801cfd0:	fa98 f888 	rev.w	r8, r8
 801cfd4:	4490      	add	r8, r2
 801cfd6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801cfda:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801cfde:	4411      	add	r1, r2
 801cfe0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801cfe4:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801d330 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801cfe8:	4413      	add	r3, r2
 801cfea:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801cfee:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801cff2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801cff6:	9301      	str	r3, [sp, #4]
 801cff8:	4bcb      	ldr	r3, [pc, #812]	@ (801d328 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801cffa:	6818      	ldr	r0, [r3, #0]
 801cffc:	6803      	ldr	r3, [r0, #0]
 801cffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d000:	4798      	blx	r3
 801d002:	4bca      	ldr	r3, [pc, #808]	@ (801d32c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801d004:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801d008:	881b      	ldrh	r3, [r3, #0]
 801d00a:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801d00e:	fb03 2707 	mla	r7, r3, r7, r2
 801d012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d016:	4363      	muls	r3, r4
 801d018:	2400      	movs	r4, #0
 801d01a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d01e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d022:	4621      	mov	r1, r4
 801d024:	4407      	add	r7, r0
 801d026:	18fb      	adds	r3, r7, r3
 801d028:	9309      	str	r3, [sp, #36]	@ 0x24
 801d02a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801d02e:	fb95 f3f3 	sdiv	r3, r5, r3
 801d032:	9304      	str	r3, [sp, #16]
 801d034:	f109 0304 	add.w	r3, r9, #4
 801d038:	4618      	mov	r0, r3
 801d03a:	9308      	str	r3, [sp, #32]
 801d03c:	f008 fc0c 	bl	8025858 <memset>
 801d040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d042:	42bb      	cmp	r3, r7
 801d044:	f240 8223 	bls.w	801d48e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801d048:	2003      	movs	r0, #3
 801d04a:	f04f 0c07 	mov.w	ip, #7
 801d04e:	f04f 0e0b 	mov.w	lr, #11
 801d052:	2d00      	cmp	r5, #0
 801d054:	f000 813c 	beq.w	801d2d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801d058:	f898 3000 	ldrb.w	r3, [r8]
 801d05c:	b2db      	uxtb	r3, r3
 801d05e:	2bfe      	cmp	r3, #254	@ 0xfe
 801d060:	d126      	bne.n	801d0b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801d062:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d066:	f108 0604 	add.w	r6, r8, #4
 801d06a:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d06e:	3d01      	subs	r5, #1
 801d070:	b2c9      	uxtb	r1, r1
 801d072:	f898 8003 	ldrb.w	r8, [r8, #3]
 801d076:	b2d2      	uxtb	r2, r2
 801d078:	f361 0407 	bfi	r4, r1, #0, #8
 801d07c:	fa5f f888 	uxtb.w	r8, r8
 801d080:	b2ad      	uxth	r5, r5
 801d082:	f362 240f 	bfi	r4, r2, #8, #8
 801d086:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d08a:	fb10 2208 	smlabb	r2, r0, r8, r2
 801d08e:	f368 4417 	bfi	r4, r8, #16, #8
 801d092:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801d096:	0e23      	lsrs	r3, r4, #24
 801d098:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801d09c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d0a0:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d0a4:	605c      	str	r4, [r3, #4]
 801d0a6:	46b0      	mov	r8, r6
 801d0a8:	e7d3      	b.n	801d052 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801d0aa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801d0ae:	e792      	b.n	801cfd6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801d0b0:	2bff      	cmp	r3, #255	@ 0xff
 801d0b2:	d127      	bne.n	801d104 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801d0b4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d0b8:	f108 0605 	add.w	r6, r8, #5
 801d0bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 801d0c0:	3d01      	subs	r5, #1
 801d0c2:	b2d2      	uxtb	r2, r2
 801d0c4:	f898 1003 	ldrb.w	r1, [r8, #3]
 801d0c8:	b2db      	uxtb	r3, r3
 801d0ca:	f898 8004 	ldrb.w	r8, [r8, #4]
 801d0ce:	f362 0407 	bfi	r4, r2, #0, #8
 801d0d2:	b2c9      	uxtb	r1, r1
 801d0d4:	fa5f f888 	uxtb.w	r8, r8
 801d0d8:	f363 240f 	bfi	r4, r3, #8, #8
 801d0dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d0e0:	b2ad      	uxth	r5, r5
 801d0e2:	fb10 3301 	smlabb	r3, r0, r1, r3
 801d0e6:	f361 4417 	bfi	r4, r1, #16, #8
 801d0ea:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801d0ee:	f368 641f 	bfi	r4, r8, #24, #8
 801d0f2:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801d0f6:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801d0fa:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801d0fe:	f8c8 4004 	str.w	r4, [r8, #4]
 801d102:	e7d0      	b.n	801d0a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801d104:	119a      	asrs	r2, r3, #6
 801d106:	f108 0601 	add.w	r6, r8, #1
 801d10a:	d107      	bne.n	801d11c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801d10c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d110:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d114:	685c      	ldr	r4, [r3, #4]
 801d116:	3d01      	subs	r5, #1
 801d118:	b2ad      	uxth	r5, r5
 801d11a:	e7c4      	b.n	801d0a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801d11c:	2a01      	cmp	r2, #1
 801d11e:	d129      	bne.n	801d174 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801d120:	f003 0203 	and.w	r2, r3, #3
 801d124:	1ea1      	subs	r1, r4, #2
 801d126:	4411      	add	r1, r2
 801d128:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801d12c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d130:	b2c9      	uxtb	r1, r1
 801d132:	3a02      	subs	r2, #2
 801d134:	3b02      	subs	r3, #2
 801d136:	f361 0407 	bfi	r4, r1, #0, #8
 801d13a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d13e:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d142:	f362 240f 	bfi	r4, r2, #8, #8
 801d146:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d14a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d14e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801d152:	fb10 2203 	smlabb	r2, r0, r3, r2
 801d156:	f363 4417 	bfi	r4, r3, #16, #8
 801d15a:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801d15e:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801d162:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801d166:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801d16a:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801d16e:	f8c8 4004 	str.w	r4, [r8, #4]
 801d172:	e7d0      	b.n	801d116 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801d174:	2a02      	cmp	r2, #2
 801d176:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d17a:	d12e      	bne.n	801d1da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801d17c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d180:	f1a3 0a20 	sub.w	sl, r3, #32
 801d184:	f108 0602 	add.w	r6, r8, #2
 801d188:	b2d2      	uxtb	r2, r2
 801d18a:	f002 010f 	and.w	r1, r2, #15
 801d18e:	1112      	asrs	r2, r2, #4
 801d190:	3908      	subs	r1, #8
 801d192:	3a08      	subs	r2, #8
 801d194:	4451      	add	r1, sl
 801d196:	4492      	add	sl, r2
 801d198:	4421      	add	r1, r4
 801d19a:	b2c9      	uxtb	r1, r1
 801d19c:	f361 0407 	bfi	r4, r1, #0, #8
 801d1a0:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801d1a4:	f1a8 0820 	sub.w	r8, r8, #32
 801d1a8:	4443      	add	r3, r8
 801d1aa:	b2db      	uxtb	r3, r3
 801d1ac:	f363 240f 	bfi	r4, r3, #8, #8
 801d1b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d1b4:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801d1b8:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801d1bc:	fb10 330a 	smlabb	r3, r0, sl, r3
 801d1c0:	f36a 4417 	bfi	r4, sl, #16, #8
 801d1c4:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801d1c8:	0e22      	lsrs	r2, r4, #24
 801d1ca:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801d1ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d1d2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801d1d6:	6054      	str	r4, [r2, #4]
 801d1d8:	e79d      	b.n	801d116 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801d1da:	3301      	adds	r3, #1
 801d1dc:	42ab      	cmp	r3, r5
 801d1de:	dd59      	ble.n	801d294 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801d1e0:	1b5d      	subs	r5, r3, r5
 801d1e2:	2d00      	cmp	r5, #0
 801d1e4:	dc58      	bgt.n	801d298 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801d1e6:	f8dd a004 	ldr.w	sl, [sp, #4]
 801d1ea:	f04f 0800 	mov.w	r8, #0
 801d1ee:	f1ba 0f00 	cmp.w	sl, #0
 801d1f2:	f340 8108 	ble.w	801d406 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801d1f6:	1c73      	adds	r3, r6, #1
 801d1f8:	9303      	str	r3, [sp, #12]
 801d1fa:	7833      	ldrb	r3, [r6, #0]
 801d1fc:	b2db      	uxtb	r3, r3
 801d1fe:	2bfe      	cmp	r3, #254	@ 0xfe
 801d200:	d16a      	bne.n	801d2d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801d202:	7871      	ldrb	r1, [r6, #1]
 801d204:	1d33      	adds	r3, r6, #4
 801d206:	78b2      	ldrb	r2, [r6, #2]
 801d208:	b2c9      	uxtb	r1, r1
 801d20a:	78f0      	ldrb	r0, [r6, #3]
 801d20c:	b2d2      	uxtb	r2, r2
 801d20e:	9303      	str	r3, [sp, #12]
 801d210:	f361 0407 	bfi	r4, r1, #0, #8
 801d214:	b2c0      	uxtb	r0, r0
 801d216:	2303      	movs	r3, #3
 801d218:	f362 240f 	bfi	r4, r2, #8, #8
 801d21c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d220:	fb13 2200 	smlabb	r2, r3, r0, r2
 801d224:	f360 4417 	bfi	r4, r0, #16, #8
 801d228:	2307      	movs	r3, #7
 801d22a:	0e25      	lsrs	r5, r4, #24
 801d22c:	fb13 2101 	smlabb	r1, r3, r1, r2
 801d230:	230b      	movs	r3, #11
 801d232:	fb13 1305 	smlabb	r3, r3, r5, r1
 801d236:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d23a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d23e:	605c      	str	r4, [r3, #4]
 801d240:	2501      	movs	r5, #1
 801d242:	462e      	mov	r6, r5
 801d244:	eb06 0308 	add.w	r3, r6, r8
 801d248:	ebaa 0a06 	sub.w	sl, sl, r6
 801d24c:	1bad      	subs	r5, r5, r6
 801d24e:	2b40      	cmp	r3, #64	@ 0x40
 801d250:	dd16      	ble.n	801d280 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801d252:	4658      	mov	r0, fp
 801d254:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801d258:	f7e6 f8c0 	bl	80033dc <_ZN8touchgfx5paint9flushLineEPmi>
 801d25c:	4659      	mov	r1, fp
 801d25e:	9b05      	ldr	r3, [sp, #20]
 801d260:	4642      	mov	r2, r8
 801d262:	4638      	mov	r0, r7
 801d264:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d268:	f7e6 f920 	bl	80034ac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801d26c:	4b30      	ldr	r3, [pc, #192]	@ (801d330 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801d26e:	4447      	add	r7, r8
 801d270:	f04f 0800 	mov.w	r8, #0
 801d274:	459b      	cmp	fp, r3
 801d276:	bf0c      	ite	eq
 801d278:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801d334 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801d27c:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801d330 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801d280:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801d284:	4633      	mov	r3, r6
 801d286:	3b01      	subs	r3, #1
 801d288:	f842 4b04 	str.w	r4, [r2], #4
 801d28c:	d1fb      	bne.n	801d286 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801d28e:	44b0      	add	r8, r6
 801d290:	9e03      	ldr	r6, [sp, #12]
 801d292:	e7ac      	b.n	801d1ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801d294:	1aed      	subs	r5, r5, r3
 801d296:	e73f      	b.n	801d118 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801d298:	9b01      	ldr	r3, [sp, #4]
 801d29a:	42ab      	cmp	r3, r5
 801d29c:	bfa8      	it	ge
 801d29e:	462b      	movge	r3, r5
 801d2a0:	4698      	mov	r8, r3
 801d2a2:	9b01      	ldr	r3, [sp, #4]
 801d2a4:	eba3 0a08 	sub.w	sl, r3, r8
 801d2a8:	0e23      	lsrs	r3, r4, #24
 801d2aa:	eba5 0508 	sub.w	r5, r5, r8
 801d2ae:	d00b      	beq.n	801d2c8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801d2b0:	9a05      	ldr	r2, [sp, #20]
 801d2b2:	4641      	mov	r1, r8
 801d2b4:	4638      	mov	r0, r7
 801d2b6:	4353      	muls	r3, r2
 801d2b8:	1c5a      	adds	r2, r3, #1
 801d2ba:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801d2be:	4622      	mov	r2, r4
 801d2c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d2c4:	f7e6 f8a4 	bl	8003410 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801d2c8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d2cc:	4447      	add	r7, r8
 801d2ce:	e78c      	b.n	801d1ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801d2d0:	f8dd a004 	ldr.w	sl, [sp, #4]
 801d2d4:	4646      	mov	r6, r8
 801d2d6:	e788      	b.n	801d1ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801d2d8:	2bff      	cmp	r3, #255	@ 0xff
 801d2da:	d11d      	bne.n	801d318 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801d2dc:	7870      	ldrb	r0, [r6, #1]
 801d2de:	1d73      	adds	r3, r6, #5
 801d2e0:	78b2      	ldrb	r2, [r6, #2]
 801d2e2:	b2c0      	uxtb	r0, r0
 801d2e4:	78f5      	ldrb	r5, [r6, #3]
 801d2e6:	b2d2      	uxtb	r2, r2
 801d2e8:	9303      	str	r3, [sp, #12]
 801d2ea:	f360 0407 	bfi	r4, r0, #0, #8
 801d2ee:	7933      	ldrb	r3, [r6, #4]
 801d2f0:	b2ed      	uxtb	r5, r5
 801d2f2:	b2d9      	uxtb	r1, r3
 801d2f4:	f362 240f 	bfi	r4, r2, #8, #8
 801d2f8:	2303      	movs	r3, #3
 801d2fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d2fe:	f365 4417 	bfi	r4, r5, #16, #8
 801d302:	fb13 2205 	smlabb	r2, r3, r5, r2
 801d306:	2307      	movs	r3, #7
 801d308:	f361 641f 	bfi	r4, r1, #24, #8
 801d30c:	fb13 2000 	smlabb	r0, r3, r0, r2
 801d310:	230b      	movs	r3, #11
 801d312:	fb13 0301 	smlabb	r3, r3, r1, r0
 801d316:	e78e      	b.n	801d236 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801d318:	119d      	asrs	r5, r3, #6
 801d31a:	d10d      	bne.n	801d338 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801d31c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d320:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d324:	685c      	ldr	r4, [r3, #4]
 801d326:	e78b      	b.n	801d240 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801d328:	24028e2c 	.word	0x24028e2c
 801d32c:	24028e26 	.word	0x24028e26
 801d330:	24000140 	.word	0x24000140
 801d334:	24000240 	.word	0x24000240
 801d338:	2d01      	cmp	r5, #1
 801d33a:	d12a      	bne.n	801d392 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801d33c:	f003 0203 	and.w	r2, r3, #3
 801d340:	1ea1      	subs	r1, r4, #2
 801d342:	2603      	movs	r6, #3
 801d344:	4411      	add	r1, r2
 801d346:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801d34a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d34e:	b2c9      	uxtb	r1, r1
 801d350:	3a02      	subs	r2, #2
 801d352:	3b02      	subs	r3, #2
 801d354:	f361 0407 	bfi	r4, r1, #0, #8
 801d358:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d35c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d360:	f362 240f 	bfi	r4, r2, #8, #8
 801d364:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d368:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d36c:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801d370:	fb16 2203 	smlabb	r2, r6, r3, r2
 801d374:	f363 4417 	bfi	r4, r3, #16, #8
 801d378:	2307      	movs	r3, #7
 801d37a:	0e20      	lsrs	r0, r4, #24
 801d37c:	fb13 2101 	smlabb	r1, r3, r1, r2
 801d380:	230b      	movs	r3, #11
 801d382:	fb13 1300 	smlabb	r3, r3, r0, r1
 801d386:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d38a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d38e:	605c      	str	r4, [r3, #4]
 801d390:	e757      	b.n	801d242 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801d392:	2d02      	cmp	r5, #2
 801d394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d398:	d12f      	bne.n	801d3fa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801d39a:	1cb2      	adds	r2, r6, #2
 801d39c:	f1a3 0020 	sub.w	r0, r3, #32
 801d3a0:	9203      	str	r2, [sp, #12]
 801d3a2:	7872      	ldrb	r2, [r6, #1]
 801d3a4:	b2d2      	uxtb	r2, r2
 801d3a6:	f002 010f 	and.w	r1, r2, #15
 801d3aa:	1112      	asrs	r2, r2, #4
 801d3ac:	3908      	subs	r1, #8
 801d3ae:	3a08      	subs	r2, #8
 801d3b0:	4401      	add	r1, r0
 801d3b2:	4402      	add	r2, r0
 801d3b4:	4421      	add	r1, r4
 801d3b6:	b2c9      	uxtb	r1, r1
 801d3b8:	f361 0407 	bfi	r4, r1, #0, #8
 801d3bc:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801d3c0:	3d20      	subs	r5, #32
 801d3c2:	442b      	add	r3, r5
 801d3c4:	2503      	movs	r5, #3
 801d3c6:	b2db      	uxtb	r3, r3
 801d3c8:	f363 240f 	bfi	r4, r3, #8, #8
 801d3cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d3d0:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801d3d4:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d3d8:	fb15 3302 	smlabb	r3, r5, r2, r3
 801d3dc:	f362 4417 	bfi	r4, r2, #16, #8
 801d3e0:	2207      	movs	r2, #7
 801d3e2:	0e20      	lsrs	r0, r4, #24
 801d3e4:	fb12 3201 	smlabb	r2, r2, r1, r3
 801d3e8:	210b      	movs	r1, #11
 801d3ea:	fb11 2100 	smlabb	r1, r1, r0, r2
 801d3ee:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801d3f2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801d3f6:	604c      	str	r4, [r1, #4]
 801d3f8:	e722      	b.n	801d240 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801d3fa:	1c5d      	adds	r5, r3, #1
 801d3fc:	4656      	mov	r6, sl
 801d3fe:	45aa      	cmp	sl, r5
 801d400:	bfa8      	it	ge
 801d402:	462e      	movge	r6, r5
 801d404:	e71e      	b.n	801d244 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801d406:	f1b8 0f00 	cmp.w	r8, #0
 801d40a:	d00d      	beq.n	801d428 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801d40c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801d410:	4658      	mov	r0, fp
 801d412:	f7e5 ffe3 	bl	80033dc <_ZN8touchgfx5paint9flushLineEPmi>
 801d416:	4642      	mov	r2, r8
 801d418:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d41c:	4638      	mov	r0, r7
 801d41e:	9b05      	ldr	r3, [sp, #20]
 801d420:	4659      	mov	r1, fp
 801d422:	4447      	add	r7, r8
 801d424:	f7e6 f842 	bl	80034ac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801d428:	4b1d      	ldr	r3, [pc, #116]	@ (801d4a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801d42a:	9a01      	ldr	r2, [sp, #4]
 801d42c:	881b      	ldrh	r3, [r3, #0]
 801d42e:	1a9b      	subs	r3, r3, r2
 801d430:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d434:	441f      	add	r7, r3
 801d436:	9b04      	ldr	r3, [sp, #16]
 801d438:	3301      	adds	r3, #1
 801d43a:	9304      	str	r3, [sp, #16]
 801d43c:	9a04      	ldr	r2, [sp, #16]
 801d43e:	9b00      	ldr	r3, [sp, #0]
 801d440:	4293      	cmp	r3, r2
 801d442:	d11d      	bne.n	801d480 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801d444:	9b02      	ldr	r3, [sp, #8]
 801d446:	2400      	movs	r4, #0
 801d448:	9a02      	ldr	r2, [sp, #8]
 801d44a:	f103 0801 	add.w	r8, r3, #1
 801d44e:	9b06      	ldr	r3, [sp, #24]
 801d450:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801d454:	4621      	mov	r1, r4
 801d456:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d45a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d45e:	9b07      	ldr	r3, [sp, #28]
 801d460:	ba36      	rev	r6, r6
 801d462:	9808      	ldr	r0, [sp, #32]
 801d464:	441e      	add	r6, r3
 801d466:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801d46a:	1aed      	subs	r5, r5, r3
 801d46c:	f008 f9f4 	bl	8025858 <memset>
 801d470:	f8cd 8008 	str.w	r8, [sp, #8]
 801d474:	b2ad      	uxth	r5, r5
 801d476:	9404      	str	r4, [sp, #16]
 801d478:	f7e5 ffa6 	bl	80033c8 <_ZN8touchgfx5paint8tearDownEv>
 801d47c:	46b0      	mov	r8, r6
 801d47e:	e5df      	b.n	801d040 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801d480:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801d484:	9a01      	ldr	r2, [sp, #4]
 801d486:	1a9b      	subs	r3, r3, r2
 801d488:	1b5d      	subs	r5, r3, r5
 801d48a:	b2ad      	uxth	r5, r5
 801d48c:	e7f4      	b.n	801d478 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801d48e:	4b05      	ldr	r3, [pc, #20]	@ (801d4a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801d490:	6818      	ldr	r0, [r3, #0]
 801d492:	6803      	ldr	r3, [r0, #0]
 801d494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d496:	4798      	blx	r3
 801d498:	b00f      	add	sp, #60	@ 0x3c
 801d49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d49e:	bf00      	nop
 801d4a0:	24028e26 	.word	0x24028e26
 801d4a4:	24028e2c 	.word	0x24028e2c

0801d4a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801d4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4ac:	b093      	sub	sp, #76	@ 0x4c
 801d4ae:	460d      	mov	r5, r1
 801d4b0:	4616      	mov	r6, r2
 801d4b2:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801d4b6:	9000      	str	r0, [sp, #0]
 801d4b8:	f1bb 0f00 	cmp.w	fp, #0
 801d4bc:	f000 82ac 	beq.w	801da18 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801d4c0:	6810      	ldr	r0, [r2, #0]
 801d4c2:	ac0e      	add	r4, sp, #56	@ 0x38
 801d4c4:	6851      	ldr	r1, [r2, #4]
 801d4c6:	c403      	stmia	r4!, {r0, r1}
 801d4c8:	6818      	ldr	r0, [r3, #0]
 801d4ca:	ac10      	add	r4, sp, #64	@ 0x40
 801d4cc:	6859      	ldr	r1, [r3, #4]
 801d4ce:	c403      	stmia	r4!, {r0, r1}
 801d4d0:	a80e      	add	r0, sp, #56	@ 0x38
 801d4d2:	f7f8 ff69 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d4d6:	4631      	mov	r1, r6
 801d4d8:	a810      	add	r0, sp, #64	@ 0x40
 801d4da:	f7f8 ff8d 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d4de:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801d4e2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801d4e6:	bfdb      	ittet	le
 801d4e8:	b293      	uxthle	r3, r2
 801d4ea:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d4ee:	2301      	movgt	r3, #1
 801d4f0:	fb91 f3f3 	sdivle	r3, r1, r3
 801d4f4:	9301      	str	r3, [sp, #4]
 801d4f6:	f105 0308 	add.w	r3, r5, #8
 801d4fa:	9901      	ldr	r1, [sp, #4]
 801d4fc:	9305      	str	r3, [sp, #20]
 801d4fe:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801d502:	440b      	add	r3, r1
 801d504:	3b01      	subs	r3, #1
 801d506:	fb93 f3f1 	sdiv	r3, r3, r1
 801d50a:	3b01      	subs	r3, #1
 801d50c:	9905      	ldr	r1, [sp, #20]
 801d50e:	b29b      	uxth	r3, r3
 801d510:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d514:	9901      	ldr	r1, [sp, #4]
 801d516:	9306      	str	r3, [sp, #24]
 801d518:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801d51c:	fb93 f0f1 	sdiv	r0, r3, r1
 801d520:	b284      	uxth	r4, r0
 801d522:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801d526:	9403      	str	r4, [sp, #12]
 801d528:	9d03      	ldr	r5, [sp, #12]
 801d52a:	9c01      	ldr	r4, [sp, #4]
 801d52c:	fb05 3714 	mls	r7, r5, r4, r3
 801d530:	fb17 f702 	smulbb	r7, r7, r2
 801d534:	440f      	add	r7, r1
 801d536:	b2bf      	uxth	r7, r7
 801d538:	2d00      	cmp	r5, #0
 801d53a:	d06b      	beq.n	801d614 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801d53c:	1e6a      	subs	r2, r5, #1
 801d53e:	9805      	ldr	r0, [sp, #20]
 801d540:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801d544:	9a06      	ldr	r2, [sp, #24]
 801d546:	fa99 f989 	rev.w	r9, r9
 801d54a:	4491      	add	r9, r2
 801d54c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801d550:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801d554:	4411      	add	r1, r2
 801d556:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801d55a:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801d8b8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801d55e:	4413      	add	r3, r2
 801d560:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801d564:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801d568:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801d56c:	9302      	str	r3, [sp, #8]
 801d56e:	4bd0      	ldr	r3, [pc, #832]	@ (801d8b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801d570:	6818      	ldr	r0, [r3, #0]
 801d572:	6803      	ldr	r3, [r0, #0]
 801d574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d576:	4798      	blx	r3
 801d578:	4bce      	ldr	r3, [pc, #824]	@ (801d8b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801d57a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801d57e:	881b      	ldrh	r3, [r3, #0]
 801d580:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801d584:	fb03 2404 	mla	r4, r3, r4, r2
 801d588:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d58c:	436b      	muls	r3, r5
 801d58e:	2500      	movs	r5, #0
 801d590:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d598:	4629      	mov	r1, r5
 801d59a:	4404      	add	r4, r0
 801d59c:	18e3      	adds	r3, r4, r3
 801d59e:	930d      	str	r3, [sp, #52]	@ 0x34
 801d5a0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801d5a4:	fb97 f3f3 	sdiv	r3, r7, r3
 801d5a8:	9304      	str	r3, [sp, #16]
 801d5aa:	9b00      	ldr	r3, [sp, #0]
 801d5ac:	3304      	adds	r3, #4
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d5b2:	f008 f951 	bl	8025858 <memset>
 801d5b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d5b8:	42a3      	cmp	r3, r4
 801d5ba:	f240 8228 	bls.w	801da0e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801d5be:	2003      	movs	r0, #3
 801d5c0:	2607      	movs	r6, #7
 801d5c2:	2f00      	cmp	r7, #0
 801d5c4:	f000 80cb 	beq.w	801d75e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801d5c8:	f899 3000 	ldrb.w	r3, [r9]
 801d5cc:	b2db      	uxtb	r3, r3
 801d5ce:	2bfe      	cmp	r3, #254	@ 0xfe
 801d5d0:	d123      	bne.n	801d61a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801d5d2:	f899 3001 	ldrb.w	r3, [r9, #1]
 801d5d6:	3f01      	subs	r7, #1
 801d5d8:	f899 2002 	ldrb.w	r2, [r9, #2]
 801d5dc:	f109 0804 	add.w	r8, r9, #4
 801d5e0:	b2db      	uxtb	r3, r3
 801d5e2:	f899 1003 	ldrb.w	r1, [r9, #3]
 801d5e6:	b2d2      	uxtb	r2, r2
 801d5e8:	f363 0507 	bfi	r5, r3, #0, #8
 801d5ec:	b2c9      	uxtb	r1, r1
 801d5ee:	b2bf      	uxth	r7, r7
 801d5f0:	f362 250f 	bfi	r5, r2, #8, #8
 801d5f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d5f8:	fb10 2201 	smlabb	r2, r0, r1, r2
 801d5fc:	f361 4517 	bfi	r5, r1, #16, #8
 801d600:	fb16 2303 	smlabb	r3, r6, r3, r2
 801d604:	9a00      	ldr	r2, [sp, #0]
 801d606:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d60a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d60e:	605d      	str	r5, [r3, #4]
 801d610:	46c1      	mov	r9, r8
 801d612:	e7d6      	b.n	801d5c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801d614:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801d618:	e798      	b.n	801d54c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801d61a:	119a      	asrs	r2, r3, #6
 801d61c:	f109 0801 	add.w	r8, r9, #1
 801d620:	d108      	bne.n	801d634 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801d622:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d626:	9a00      	ldr	r2, [sp, #0]
 801d628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d62c:	685d      	ldr	r5, [r3, #4]
 801d62e:	3f01      	subs	r7, #1
 801d630:	b2bf      	uxth	r7, r7
 801d632:	e7ed      	b.n	801d610 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801d634:	2a01      	cmp	r2, #1
 801d636:	d125      	bne.n	801d684 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801d638:	f003 0103 	and.w	r1, r3, #3
 801d63c:	1eaa      	subs	r2, r5, #2
 801d63e:	440a      	add	r2, r1
 801d640:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801d644:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d648:	b2d2      	uxtb	r2, r2
 801d64a:	3902      	subs	r1, #2
 801d64c:	3b02      	subs	r3, #2
 801d64e:	f362 0507 	bfi	r5, r2, #0, #8
 801d652:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801d656:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801d65a:	f361 250f 	bfi	r5, r1, #8, #8
 801d65e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801d662:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801d666:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801d66a:	fb10 1103 	smlabb	r1, r0, r3, r1
 801d66e:	f363 4517 	bfi	r5, r3, #16, #8
 801d672:	9b00      	ldr	r3, [sp, #0]
 801d674:	fb16 1202 	smlabb	r2, r6, r2, r1
 801d678:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d67c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801d680:	6055      	str	r5, [r2, #4]
 801d682:	e7d4      	b.n	801d62e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801d684:	2a02      	cmp	r2, #2
 801d686:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d68a:	d12c      	bne.n	801d6e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801d68c:	f899 2001 	ldrb.w	r2, [r9, #1]
 801d690:	f1a3 0c20 	sub.w	ip, r3, #32
 801d694:	f109 0802 	add.w	r8, r9, #2
 801d698:	b2d2      	uxtb	r2, r2
 801d69a:	f002 010f 	and.w	r1, r2, #15
 801d69e:	1112      	asrs	r2, r2, #4
 801d6a0:	3908      	subs	r1, #8
 801d6a2:	3a08      	subs	r2, #8
 801d6a4:	4461      	add	r1, ip
 801d6a6:	4494      	add	ip, r2
 801d6a8:	4429      	add	r1, r5
 801d6aa:	b2c9      	uxtb	r1, r1
 801d6ac:	f361 0507 	bfi	r5, r1, #0, #8
 801d6b0:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801d6b4:	f1ae 0e20 	sub.w	lr, lr, #32
 801d6b8:	4473      	add	r3, lr
 801d6ba:	b2db      	uxtb	r3, r3
 801d6bc:	f363 250f 	bfi	r5, r3, #8, #8
 801d6c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d6c4:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801d6c8:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801d6cc:	fb10 330c 	smlabb	r3, r0, ip, r3
 801d6d0:	f36c 4517 	bfi	r5, ip, #16, #8
 801d6d4:	fb16 3101 	smlabb	r1, r6, r1, r3
 801d6d8:	9b00      	ldr	r3, [sp, #0]
 801d6da:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801d6de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801d6e2:	604d      	str	r5, [r1, #4]
 801d6e4:	e7a3      	b.n	801d62e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801d6e6:	3301      	adds	r3, #1
 801d6e8:	42bb      	cmp	r3, r7
 801d6ea:	dd23      	ble.n	801d734 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801d6ec:	eba3 0907 	sub.w	r9, r3, r7
 801d6f0:	f1b9 0f00 	cmp.w	r9, #0
 801d6f4:	dc20      	bgt.n	801d738 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801d6f6:	9e02      	ldr	r6, [sp, #8]
 801d6f8:	2700      	movs	r7, #0
 801d6fa:	2e00      	cmp	r6, #0
 801d6fc:	f340 8142 	ble.w	801d984 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801d700:	f108 0301 	add.w	r3, r8, #1
 801d704:	9307      	str	r3, [sp, #28]
 801d706:	f898 3000 	ldrb.w	r3, [r8]
 801d70a:	b2db      	uxtb	r3, r3
 801d70c:	119a      	asrs	r2, r3, #6
 801d70e:	d12a      	bne.n	801d766 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801d710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d714:	9a00      	ldr	r2, [sp, #0]
 801d716:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d71a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d71e:	685d      	ldr	r5, [r3, #4]
 801d720:	f040 811f 	bne.w	801d962 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801d724:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801d728:	7025      	strb	r5, [r4, #0]
 801d72a:	7063      	strb	r3, [r4, #1]
 801d72c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801d730:	70a3      	strb	r3, [r4, #2]
 801d732:	e04e      	b.n	801d7d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801d734:	1aff      	subs	r7, r7, r3
 801d736:	e77b      	b.n	801d630 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801d738:	9b02      	ldr	r3, [sp, #8]
 801d73a:	4620      	mov	r0, r4
 801d73c:	462a      	mov	r2, r5
 801d73e:	454b      	cmp	r3, r9
 801d740:	bfa8      	it	ge
 801d742:	464b      	movge	r3, r9
 801d744:	461f      	mov	r7, r3
 801d746:	9b02      	ldr	r3, [sp, #8]
 801d748:	4639      	mov	r1, r7
 801d74a:	1bde      	subs	r6, r3, r7
 801d74c:	eba9 0907 	sub.w	r9, r9, r7
 801d750:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d754:	465b      	mov	r3, fp
 801d756:	f7e5 fe5b 	bl	8003410 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801d75a:	443c      	add	r4, r7
 801d75c:	e7cc      	b.n	801d6f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801d75e:	46c8      	mov	r8, r9
 801d760:	9e02      	ldr	r6, [sp, #8]
 801d762:	46b9      	mov	r9, r7
 801d764:	e7c8      	b.n	801d6f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801d766:	2a01      	cmp	r2, #1
 801d768:	d136      	bne.n	801d7d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801d76a:	f003 0103 	and.w	r1, r3, #3
 801d76e:	1ea8      	subs	r0, r5, #2
 801d770:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d774:	4408      	add	r0, r1
 801d776:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801d77a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d77e:	b2c0      	uxtb	r0, r0
 801d780:	f1a1 0102 	sub.w	r1, r1, #2
 801d784:	f1a3 0302 	sub.w	r3, r3, #2
 801d788:	f360 0507 	bfi	r5, r0, #0, #8
 801d78c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801d790:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801d794:	f361 250f 	bfi	r5, r1, #8, #8
 801d798:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801d79c:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801d7a0:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801d7a4:	f04f 0303 	mov.w	r3, #3
 801d7a8:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801d7ac:	f04f 0c07 	mov.w	ip, #7
 801d7b0:	9b00      	ldr	r3, [sp, #0]
 801d7b2:	f368 4517 	bfi	r5, r8, #16, #8
 801d7b6:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801d7ba:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801d7be:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801d7c2:	f8cc 5004 	str.w	r5, [ip, #4]
 801d7c6:	f040 80cd 	bne.w	801d964 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801d7ca:	7020      	strb	r0, [r4, #0]
 801d7cc:	7061      	strb	r1, [r4, #1]
 801d7ce:	f884 8002 	strb.w	r8, [r4, #2]
 801d7d2:	3e01      	subs	r6, #1
 801d7d4:	3403      	adds	r4, #3
 801d7d6:	e0c1      	b.n	801d95c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801d7d8:	2a02      	cmp	r2, #2
 801d7da:	d13d      	bne.n	801d858 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801d7dc:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d7e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d7e4:	f108 0202 	add.w	r2, r8, #2
 801d7e8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d7ec:	b2c9      	uxtb	r1, r1
 801d7ee:	f1a3 0c20 	sub.w	ip, r3, #32
 801d7f2:	9207      	str	r2, [sp, #28]
 801d7f4:	f001 000f 	and.w	r0, r1, #15
 801d7f8:	f1a0 0008 	sub.w	r0, r0, #8
 801d7fc:	4460      	add	r0, ip
 801d7fe:	4428      	add	r0, r5
 801d800:	b2c0      	uxtb	r0, r0
 801d802:	f360 0507 	bfi	r5, r0, #0, #8
 801d806:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801d80a:	f1a2 0220 	sub.w	r2, r2, #32
 801d80e:	4413      	add	r3, r2
 801d810:	ea4f 1221 	mov.w	r2, r1, asr #4
 801d814:	b2db      	uxtb	r3, r3
 801d816:	f1a2 0208 	sub.w	r2, r2, #8
 801d81a:	f363 250f 	bfi	r5, r3, #8, #8
 801d81e:	4462      	add	r2, ip
 801d820:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801d824:	f04f 0c03 	mov.w	ip, #3
 801d828:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801d82c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d830:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801d834:	f04f 0107 	mov.w	r1, #7
 801d838:	f362 4517 	bfi	r5, r2, #16, #8
 801d83c:	fb11 c100 	smlabb	r1, r1, r0, ip
 801d840:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801d844:	9900      	ldr	r1, [sp, #0]
 801d846:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801d84a:	604d      	str	r5, [r1, #4]
 801d84c:	f040 8089 	bne.w	801d962 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801d850:	7020      	strb	r0, [r4, #0]
 801d852:	7063      	strb	r3, [r4, #1]
 801d854:	70a2      	strb	r2, [r4, #2]
 801d856:	e7bc      	b.n	801d7d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801d858:	2bfe      	cmp	r3, #254	@ 0xfe
 801d85a:	d12f      	bne.n	801d8bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801d85c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801d860:	f108 0304 	add.w	r3, r8, #4
 801d864:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d868:	f04f 0c03 	mov.w	ip, #3
 801d86c:	f898 1003 	ldrb.w	r1, [r8, #3]
 801d870:	b2c0      	uxtb	r0, r0
 801d872:	b2d2      	uxtb	r2, r2
 801d874:	9307      	str	r3, [sp, #28]
 801d876:	b2c9      	uxtb	r1, r1
 801d878:	f360 0507 	bfi	r5, r0, #0, #8
 801d87c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801d880:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d884:	f362 250f 	bfi	r5, r2, #8, #8
 801d888:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801d88c:	f04f 0307 	mov.w	r3, #7
 801d890:	f361 4517 	bfi	r5, r1, #16, #8
 801d894:	fb13 c300 	smlabb	r3, r3, r0, ip
 801d898:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801d89c:	9b00      	ldr	r3, [sp, #0]
 801d89e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801d8a2:	605d      	str	r5, [r3, #4]
 801d8a4:	d15d      	bne.n	801d962 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801d8a6:	7020      	strb	r0, [r4, #0]
 801d8a8:	7062      	strb	r2, [r4, #1]
 801d8aa:	70a1      	strb	r1, [r4, #2]
 801d8ac:	e791      	b.n	801d7d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801d8ae:	bf00      	nop
 801d8b0:	24028e2c 	.word	0x24028e2c
 801d8b4:	24028e26 	.word	0x24028e26
 801d8b8:	24000140 	.word	0x24000140
 801d8bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d8c0:	1c5a      	adds	r2, r3, #1
 801d8c2:	b94b      	cbnz	r3, 801d8d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801d8c4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d8c8:	d14c      	bne.n	801d964 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801d8ca:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801d8ce:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801d8d2:	7025      	strb	r5, [r4, #0]
 801d8d4:	7062      	strb	r2, [r4, #1]
 801d8d6:	e72b      	b.n	801d730 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801d8d8:	4296      	cmp	r6, r2
 801d8da:	46b0      	mov	r8, r6
 801d8dc:	bfa8      	it	ge
 801d8de:	4690      	movge	r8, r2
 801d8e0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d8e4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d8e8:	eba6 0608 	sub.w	r6, r6, r8
 801d8ec:	eba2 0908 	sub.w	r9, r2, r8
 801d8f0:	9308      	str	r3, [sp, #32]
 801d8f2:	b2eb      	uxtb	r3, r5
 801d8f4:	930c      	str	r3, [sp, #48]	@ 0x30
 801d8f6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801d8fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d8fc:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801d900:	930a      	str	r3, [sp, #40]	@ 0x28
 801d902:	9b08      	ldr	r3, [sp, #32]
 801d904:	d030      	beq.n	801d968 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801d906:	18fb      	adds	r3, r7, r3
 801d908:	2bc0      	cmp	r3, #192	@ 0xc0
 801d90a:	dd15      	ble.n	801d938 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801d90c:	4650      	mov	r0, sl
 801d90e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801d912:	f7e5 fd63 	bl	80033dc <_ZN8touchgfx5paint9flushLineEPmi>
 801d916:	2203      	movs	r2, #3
 801d918:	4651      	mov	r1, sl
 801d91a:	465b      	mov	r3, fp
 801d91c:	4620      	mov	r0, r4
 801d91e:	443c      	add	r4, r7
 801d920:	fb97 f2f2 	sdiv	r2, r7, r2
 801d924:	f7e5 fd9e 	bl	8003464 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801d928:	4b3d      	ldr	r3, [pc, #244]	@ (801da20 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801d92a:	2700      	movs	r7, #0
 801d92c:	459a      	cmp	sl, r3
 801d92e:	bf0c      	ite	eq
 801d930:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801da2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801d934:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801da20 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801d938:	eb0a 0307 	add.w	r3, sl, r7
 801d93c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d93e:	f1b8 0801 	subs.w	r8, r8, #1
 801d942:	f103 0303 	add.w	r3, r3, #3
 801d946:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d94a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d94c:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d950:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d952:	f803 2c01 	strb.w	r2, [r3, #-1]
 801d956:	d1f1      	bne.n	801d93c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801d958:	9b08      	ldr	r3, [sp, #32]
 801d95a:	441f      	add	r7, r3
 801d95c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801d960:	e6cb      	b.n	801d6fa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801d962:	2201      	movs	r2, #1
 801d964:	4690      	mov	r8, r2
 801d966:	e7bb      	b.n	801d8e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801d968:	4423      	add	r3, r4
 801d96a:	42a3      	cmp	r3, r4
 801d96c:	d9f6      	bls.n	801d95c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801d96e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d970:	3403      	adds	r4, #3
 801d972:	f804 2c03 	strb.w	r2, [r4, #-3]
 801d976:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d978:	f804 2c02 	strb.w	r2, [r4, #-2]
 801d97c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d97e:	f804 2c01 	strb.w	r2, [r4, #-1]
 801d982:	e7f2      	b.n	801d96a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801d984:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d988:	d00e      	beq.n	801d9a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801d98a:	b16f      	cbz	r7, 801d9a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801d98c:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801d990:	4650      	mov	r0, sl
 801d992:	f7e5 fd23 	bl	80033dc <_ZN8touchgfx5paint9flushLineEPmi>
 801d996:	2203      	movs	r2, #3
 801d998:	4620      	mov	r0, r4
 801d99a:	443c      	add	r4, r7
 801d99c:	465b      	mov	r3, fp
 801d99e:	4651      	mov	r1, sl
 801d9a0:	fb97 f2f2 	sdiv	r2, r7, r2
 801d9a4:	f7e5 fd5e 	bl	8003464 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801d9a8:	4b1e      	ldr	r3, [pc, #120]	@ (801da24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801d9aa:	9a02      	ldr	r2, [sp, #8]
 801d9ac:	881b      	ldrh	r3, [r3, #0]
 801d9ae:	1a9b      	subs	r3, r3, r2
 801d9b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9b4:	441c      	add	r4, r3
 801d9b6:	9b04      	ldr	r3, [sp, #16]
 801d9b8:	3301      	adds	r3, #1
 801d9ba:	9304      	str	r3, [sp, #16]
 801d9bc:	9a04      	ldr	r2, [sp, #16]
 801d9be:	9b01      	ldr	r3, [sp, #4]
 801d9c0:	4293      	cmp	r3, r2
 801d9c2:	d11c      	bne.n	801d9fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801d9c4:	9b03      	ldr	r3, [sp, #12]
 801d9c6:	2500      	movs	r5, #0
 801d9c8:	9a03      	ldr	r2, [sp, #12]
 801d9ca:	1c5e      	adds	r6, r3, #1
 801d9cc:	9b05      	ldr	r3, [sp, #20]
 801d9ce:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801d9d2:	4629      	mov	r1, r5
 801d9d4:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801d9d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d9dc:	9b06      	ldr	r3, [sp, #24]
 801d9de:	fa98 f888 	rev.w	r8, r8
 801d9e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d9e4:	4498      	add	r8, r3
 801d9e6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801d9ea:	1aff      	subs	r7, r7, r3
 801d9ec:	f007 ff34 	bl	8025858 <memset>
 801d9f0:	b2bf      	uxth	r7, r7
 801d9f2:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801d9f6:	f7e5 fce7 	bl	80033c8 <_ZN8touchgfx5paint8tearDownEv>
 801d9fa:	46c1      	mov	r9, r8
 801d9fc:	e5db      	b.n	801d5b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801d9fe:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801da02:	9b02      	ldr	r3, [sp, #8]
 801da04:	1aff      	subs	r7, r7, r3
 801da06:	eba7 0709 	sub.w	r7, r7, r9
 801da0a:	b2bf      	uxth	r7, r7
 801da0c:	e7f3      	b.n	801d9f6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801da0e:	4b06      	ldr	r3, [pc, #24]	@ (801da28 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801da10:	6818      	ldr	r0, [r3, #0]
 801da12:	6803      	ldr	r3, [r0, #0]
 801da14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da16:	4798      	blx	r3
 801da18:	b013      	add	sp, #76	@ 0x4c
 801da1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da1e:	bf00      	nop
 801da20:	24000140 	.word	0x24000140
 801da24:	24028e26 	.word	0x24028e26
 801da28:	24028e2c 	.word	0x24028e2c
 801da2c:	24000240 	.word	0x24000240

0801da30 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801da30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da34:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801da38:	9c06      	ldr	r4, [sp, #24]
 801da3a:	2800      	cmp	r0, #0
 801da3c:	d06e      	beq.n	801db1c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801da3e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801da42:	2d00      	cmp	r5, #0
 801da44:	dd6a      	ble.n	801db1c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801da46:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801da4a:	f1bc 0f00 	cmp.w	ip, #0
 801da4e:	dd65      	ble.n	801db1c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801da50:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801da54:	28ff      	cmp	r0, #255	@ 0xff
 801da56:	f9b3 3000 	ldrsh.w	r3, [r3]
 801da5a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801da5e:	fb02 3306 	mla	r3, r2, r6, r3
 801da62:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801da66:	b2e4      	uxtb	r4, r4
 801da68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da6c:	4419      	add	r1, r3
 801da6e:	fb02 f30c 	mul.w	r3, r2, ip
 801da72:	eba2 0205 	sub.w	r2, r2, r5
 801da76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801da7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801da82:	440b      	add	r3, r1
 801da84:	d03e      	beq.n	801db04 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801da86:	fa1f fc80 	uxth.w	ip, r0
 801da8a:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801da8e:	fb06 f60c 	mul.w	r6, r6, ip
 801da92:	b280      	uxth	r0, r0
 801da94:	fb07 f70c 	mul.w	r7, r7, ip
 801da98:	fb04 f40c 	mul.w	r4, r4, ip
 801da9c:	4299      	cmp	r1, r3
 801da9e:	d23d      	bcs.n	801db1c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801daa0:	eb01 0c05 	add.w	ip, r1, r5
 801daa4:	458c      	cmp	ip, r1
 801daa6:	f101 0e03 	add.w	lr, r1, #3
 801daaa:	d928      	bls.n	801dafe <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801daac:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801dab0:	fb11 f100 	smulbb	r1, r1, r0
 801dab4:	4421      	add	r1, r4
 801dab6:	b289      	uxth	r1, r1
 801dab8:	f101 0801 	add.w	r8, r1, #1
 801dabc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801dac0:	1209      	asrs	r1, r1, #8
 801dac2:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801dac6:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801daca:	fb11 f100 	smulbb	r1, r1, r0
 801dace:	4439      	add	r1, r7
 801dad0:	b289      	uxth	r1, r1
 801dad2:	f101 0801 	add.w	r8, r1, #1
 801dad6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801dada:	1209      	asrs	r1, r1, #8
 801dadc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801dae0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801dae4:	fb11 f100 	smulbb	r1, r1, r0
 801dae8:	4431      	add	r1, r6
 801daea:	b289      	uxth	r1, r1
 801daec:	f101 0801 	add.w	r8, r1, #1
 801daf0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801daf4:	1209      	asrs	r1, r1, #8
 801daf6:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801dafa:	4671      	mov	r1, lr
 801dafc:	e7d2      	b.n	801daa4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801dafe:	4411      	add	r1, r2
 801db00:	e7cc      	b.n	801da9c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801db02:	4411      	add	r1, r2
 801db04:	4299      	cmp	r1, r3
 801db06:	d209      	bcs.n	801db1c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801db08:	1948      	adds	r0, r1, r5
 801db0a:	4281      	cmp	r1, r0
 801db0c:	d2f9      	bcs.n	801db02 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801db0e:	700c      	strb	r4, [r1, #0]
 801db10:	3103      	adds	r1, #3
 801db12:	f801 7c02 	strb.w	r7, [r1, #-2]
 801db16:	f801 6c01 	strb.w	r6, [r1, #-1]
 801db1a:	e7f6      	b.n	801db0a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801db1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801db20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db24:	b093      	sub	sp, #76	@ 0x4c
 801db26:	4699      	mov	r9, r3
 801db28:	4617      	mov	r7, r2
 801db2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801db2e:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801db32:	4604      	mov	r4, r0
 801db34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801db38:	a80c      	add	r0, sp, #48	@ 0x30
 801db3a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801db3e:	460d      	mov	r5, r1
 801db40:	4649      	mov	r1, r9
 801db42:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801db46:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801db4a:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801db4e:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801db52:	f7f2 fea9 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 801db56:	4639      	mov	r1, r7
 801db58:	a80c      	add	r0, sp, #48	@ 0x30
 801db5a:	f7f2 fea5 	bl	80108a8 <_ZN8touchgfx4RectaNERKS0_>
 801db5e:	4b78      	ldr	r3, [pc, #480]	@ (801dd40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801db60:	8818      	ldrh	r0, [r3, #0]
 801db62:	4b78      	ldr	r3, [pc, #480]	@ (801dd44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801db64:	b202      	sxth	r2, r0
 801db66:	8819      	ldrh	r1, [r3, #0]
 801db68:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801db6c:	b20f      	sxth	r7, r1
 801db6e:	2b00      	cmp	r3, #0
 801db70:	da07      	bge.n	801db82 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801db72:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801db76:	4463      	add	r3, ip
 801db78:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801db7c:	2300      	movs	r3, #0
 801db7e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801db82:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801db86:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801db8a:	1ad2      	subs	r2, r2, r3
 801db8c:	4594      	cmp	ip, r2
 801db8e:	bfc4      	itt	gt
 801db90:	1ac2      	subgt	r2, r0, r3
 801db92:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801db96:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801db9a:	2a00      	cmp	r2, #0
 801db9c:	da07      	bge.n	801dbae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801db9e:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801dba2:	4462      	add	r2, ip
 801dba4:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801dba8:	2200      	movs	r2, #0
 801dbaa:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801dbae:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801dbb2:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801dbb6:	1abf      	subs	r7, r7, r2
 801dbb8:	45bc      	cmp	ip, r7
 801dbba:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801dd4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801dbbe:	bfc8      	it	gt
 801dbc0:	1a8f      	subgt	r7, r1, r2
 801dbc2:	f89c c000 	ldrb.w	ip, [ip]
 801dbc6:	bfc8      	it	gt
 801dbc8:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801dbcc:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801dbd0:	f1bc 0f00 	cmp.w	ip, #0
 801dbd4:	d176      	bne.n	801dcc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801dbd6:	4287      	cmp	r7, r0
 801dbd8:	bf14      	ite	ne
 801dbda:	2100      	movne	r1, #0
 801dbdc:	2101      	moveq	r1, #1
 801dbde:	2f00      	cmp	r7, #0
 801dbe0:	9107      	str	r1, [sp, #28]
 801dbe2:	dd73      	ble.n	801dccc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801dbe4:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801dbe8:	2900      	cmp	r1, #0
 801dbea:	9104      	str	r1, [sp, #16]
 801dbec:	dd6e      	ble.n	801dccc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801dbee:	f8b9 1000 	ldrh.w	r1, [r9]
 801dbf2:	a80e      	add	r0, sp, #56	@ 0x38
 801dbf4:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801dbf8:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801dbfc:	1a5b      	subs	r3, r3, r1
 801dbfe:	a910      	add	r1, sp, #64	@ 0x40
 801dc00:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801dc04:	b21b      	sxth	r3, r3
 801dc06:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801dc0a:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801dd50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801dc0e:	9305      	str	r3, [sp, #20]
 801dc10:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801dc14:	1ad2      	subs	r2, r2, r3
 801dc16:	b213      	sxth	r3, r2
 801dc18:	9306      	str	r3, [sp, #24]
 801dc1a:	9b05      	ldr	r3, [sp, #20]
 801dc1c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801dc20:	9b06      	ldr	r3, [sp, #24]
 801dc22:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801dc26:	9b04      	ldr	r3, [sp, #16]
 801dc28:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801dc2c:	2300      	movs	r3, #0
 801dc2e:	9310      	str	r3, [sp, #64]	@ 0x40
 801dc30:	f7f8 fbe2 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dc34:	4640      	mov	r0, r8
 801dc36:	f7f8 fbb7 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc3a:	a810      	add	r0, sp, #64	@ 0x40
 801dc3c:	f7f8 fbb4 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc40:	4b41      	ldr	r3, [pc, #260]	@ (801dd48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801dc42:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801dc46:	4628      	mov	r0, r5
 801dc48:	881b      	ldrh	r3, [r3, #0]
 801dc4a:	9308      	str	r3, [sp, #32]
 801dc4c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801dc50:	b21b      	sxth	r3, r3
 801dc52:	9303      	str	r3, [sp, #12]
 801dc54:	682b      	ldr	r3, [r5, #0]
 801dc56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dc58:	4798      	blx	r3
 801dc5a:	9a03      	ldr	r2, [sp, #12]
 801dc5c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801dc60:	4681      	mov	r9, r0
 801dc62:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801dc66:	fb13 f302 	smulbb	r3, r3, r2
 801dc6a:	2203      	movs	r2, #3
 801dc6c:	f8da 0000 	ldr.w	r0, [sl]
 801dc70:	fb15 3302 	smlabb	r3, r5, r2, r3
 801dc74:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801dc76:	920b      	str	r2, [sp, #44]	@ 0x2c
 801dc78:	441d      	add	r5, r3
 801dc7a:	6803      	ldr	r3, [r0, #0]
 801dc7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dc7e:	4798      	blx	r3
 801dc80:	9009      	str	r0, [sp, #36]	@ 0x24
 801dc82:	f8da 0000 	ldr.w	r0, [sl]
 801dc86:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801dc8a:	6803      	ldr	r3, [r0, #0]
 801dc8c:	910a      	str	r1, [sp, #40]	@ 0x28
 801dc8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dc90:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801dc94:	4798      	blx	r3
 801dc96:	f010 0f01 	tst.w	r0, #1
 801dc9a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801dc9e:	d01e      	beq.n	801dcde <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801dca0:	f8da 0000 	ldr.w	r0, [sl]
 801dca4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801dca8:	6803      	ldr	r3, [r0, #0]
 801dcaa:	9200      	str	r2, [sp, #0]
 801dcac:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801dcae:	462b      	mov	r3, r5
 801dcb0:	e898 0006 	ldmia.w	r8, {r1, r2}
 801dcb4:	47b0      	blx	r6
 801dcb6:	9b05      	ldr	r3, [sp, #20]
 801dcb8:	80a7      	strh	r7, [r4, #4]
 801dcba:	8023      	strh	r3, [r4, #0]
 801dcbc:	9b06      	ldr	r3, [sp, #24]
 801dcbe:	8063      	strh	r3, [r4, #2]
 801dcc0:	9b04      	ldr	r3, [sp, #16]
 801dcc2:	e007      	b.n	801dcd4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801dcc4:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801dcc8:	4288      	cmp	r0, r1
 801dcca:	e785      	b.n	801dbd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801dccc:	2300      	movs	r3, #0
 801dcce:	8023      	strh	r3, [r4, #0]
 801dcd0:	8063      	strh	r3, [r4, #2]
 801dcd2:	80a3      	strh	r3, [r4, #4]
 801dcd4:	4620      	mov	r0, r4
 801dcd6:	80e3      	strh	r3, [r4, #6]
 801dcd8:	b013      	add	sp, #76	@ 0x4c
 801dcda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcde:	fb09 f606 	mul.w	r6, r9, r6
 801dce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dce4:	fb11 6602 	smlabb	r6, r1, r2, r6
 801dce8:	9a07      	ldr	r2, [sp, #28]
 801dcea:	4433      	add	r3, r6
 801dcec:	461e      	mov	r6, r3
 801dcee:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801dcf2:	b16a      	cbz	r2, 801dd10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801dcf4:	9a08      	ldr	r2, [sp, #32]
 801dcf6:	4593      	cmp	fp, r2
 801dcf8:	d10a      	bne.n	801dd10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801dcfa:	f8da 0000 	ldr.w	r0, [sl]
 801dcfe:	fb09 f303 	mul.w	r3, r9, r3
 801dd02:	4629      	mov	r1, r5
 801dd04:	6802      	ldr	r2, [r0, #0]
 801dd06:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801dd0a:	4632      	mov	r2, r6
 801dd0c:	47d0      	blx	sl
 801dd0e:	e7d2      	b.n	801dcb6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801dd10:	9a03      	ldr	r2, [sp, #12]
 801dd12:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801dd50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801dd16:	fb02 5803 	mla	r8, r2, r3, r5
 801dd1a:	4545      	cmp	r5, r8
 801dd1c:	d2cb      	bcs.n	801dcb6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801dd1e:	f8db 0000 	ldr.w	r0, [fp]
 801dd22:	4629      	mov	r1, r5
 801dd24:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801dd28:	6802      	ldr	r2, [r0, #0]
 801dd2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd2e:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801dd32:	4632      	mov	r2, r6
 801dd34:	47d0      	blx	sl
 801dd36:	9b03      	ldr	r3, [sp, #12]
 801dd38:	444e      	add	r6, r9
 801dd3a:	441d      	add	r5, r3
 801dd3c:	e7ed      	b.n	801dd1a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801dd3e:	bf00      	nop
 801dd40:	24028e20 	.word	0x24028e20
 801dd44:	24028e22 	.word	0x24028e22
 801dd48:	24028e26 	.word	0x24028e26
 801dd4c:	24028e24 	.word	0x24028e24
 801dd50:	24028e2c 	.word	0x24028e2c

0801dd54 <_ZN8touchgfx8LCD24bppC1Ev>:
 801dd54:	2200      	movs	r2, #0
 801dd56:	490e      	ldr	r1, [pc, #56]	@ (801dd90 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801dd58:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801dd5c:	6001      	str	r1, [r0, #0]
 801dd5e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801dd62:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801dd66:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801dd6a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801dd6e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801dd72:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801dd76:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801dd7a:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801dd7e:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801dd82:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801dd86:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801dd8a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801dd8e:	4770      	bx	lr
 801dd90:	080299ac 	.word	0x080299ac

0801dd94 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801dd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd98:	b091      	sub	sp, #68	@ 0x44
 801dd9a:	4607      	mov	r7, r0
 801dd9c:	4688      	mov	r8, r1
 801dd9e:	6810      	ldr	r0, [r2, #0]
 801dda0:	6851      	ldr	r1, [r2, #4]
 801dda2:	ac0c      	add	r4, sp, #48	@ 0x30
 801dda4:	4616      	mov	r6, r2
 801dda6:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801ddaa:	4d64      	ldr	r5, [pc, #400]	@ (801df3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801ddac:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801df40 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801ddb0:	c403      	stmia	r4!, {r0, r1}
 801ddb2:	6818      	ldr	r0, [r3, #0]
 801ddb4:	ac0e      	add	r4, sp, #56	@ 0x38
 801ddb6:	6859      	ldr	r1, [r3, #4]
 801ddb8:	c403      	stmia	r4!, {r0, r1}
 801ddba:	a80c      	add	r0, sp, #48	@ 0x30
 801ddbc:	f7f8 faf4 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ddc0:	4631      	mov	r1, r6
 801ddc2:	a80e      	add	r0, sp, #56	@ 0x38
 801ddc4:	f7f8 fb18 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ddc8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801ddcc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ddd0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801ddd4:	6828      	ldr	r0, [r5, #0]
 801ddd6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ddda:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801ddde:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801dde2:	440f      	add	r7, r1
 801dde4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801dde8:	440a      	add	r2, r1
 801ddea:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801ddee:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801ddf2:	4413      	add	r3, r2
 801ddf4:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801ddf8:	6803      	ldr	r3, [r0, #0]
 801ddfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ddfc:	4798      	blx	r3
 801ddfe:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801de02:	6828      	ldr	r0, [r5, #0]
 801de04:	d01f      	beq.n	801de46 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801de06:	2201      	movs	r2, #1
 801de08:	2500      	movs	r5, #0
 801de0a:	6801      	ldr	r1, [r0, #0]
 801de0c:	b2a4      	uxth	r4, r4
 801de0e:	b2b6      	uxth	r6, r6
 801de10:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801de14:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801de18:	250b      	movs	r5, #11
 801de1a:	9507      	str	r5, [sp, #28]
 801de1c:	f8ba 5000 	ldrh.w	r5, [sl]
 801de20:	f8cd 9010 	str.w	r9, [sp, #16]
 801de24:	9602      	str	r6, [sp, #8]
 801de26:	9401      	str	r4, [sp, #4]
 801de28:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801de2c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801de30:	9203      	str	r2, [sp, #12]
 801de32:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801de36:	9200      	str	r2, [sp, #0]
 801de38:	4642      	mov	r2, r8
 801de3a:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801de3c:	4639      	mov	r1, r7
 801de3e:	47a0      	blx	r4
 801de40:	b011      	add	sp, #68	@ 0x44
 801de42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de46:	6803      	ldr	r3, [r0, #0]
 801de48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de4a:	4798      	blx	r3
 801de4c:	f8ba 5000 	ldrh.w	r5, [sl]
 801de50:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801de54:	f04f 0e04 	mov.w	lr, #4
 801de58:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801de5c:	436e      	muls	r6, r5
 801de5e:	fb05 2303 	mla	r3, r5, r3, r2
 801de62:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801de66:	1b2d      	subs	r5, r5, r4
 801de68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801de70:	4418      	add	r0, r3
 801de72:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801de76:	1982      	adds	r2, r0, r6
 801de78:	1b1b      	subs	r3, r3, r4
 801de7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801de7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801de80:	4290      	cmp	r0, r2
 801de82:	d254      	bcs.n	801df2e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801de84:	eb00 0a04 	add.w	sl, r0, r4
 801de88:	4550      	cmp	r0, sl
 801de8a:	d24c      	bcs.n	801df26 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801de8c:	f817 1b01 	ldrb.w	r1, [r7], #1
 801de90:	fb1e e101 	smlabb	r1, lr, r1, lr
 801de94:	eb08 0c01 	add.w	ip, r8, r1
 801de98:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801de9c:	b173      	cbz	r3, 801debc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801de9e:	2bff      	cmp	r3, #255	@ 0xff
 801dea0:	f818 b001 	ldrb.w	fp, [r8, r1]
 801dea4:	d10c      	bne.n	801dec0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801dea6:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801deaa:	d109      	bne.n	801dec0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801deac:	f880 b000 	strb.w	fp, [r0]
 801deb0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801deb4:	7043      	strb	r3, [r0, #1]
 801deb6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801deba:	7083      	strb	r3, [r0, #2]
 801debc:	3003      	adds	r0, #3
 801debe:	e7e3      	b.n	801de88 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801dec0:	fb09 f103 	mul.w	r1, r9, r3
 801dec4:	1c4b      	adds	r3, r1, #1
 801dec6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801deca:	7801      	ldrb	r1, [r0, #0]
 801decc:	121b      	asrs	r3, r3, #8
 801dece:	b29e      	uxth	r6, r3
 801ded0:	43db      	mvns	r3, r3
 801ded2:	fb1b fb06 	smulbb	fp, fp, r6
 801ded6:	b2db      	uxtb	r3, r3
 801ded8:	fb01 b103 	mla	r1, r1, r3, fp
 801dedc:	b289      	uxth	r1, r1
 801dede:	f101 0b01 	add.w	fp, r1, #1
 801dee2:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801dee6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801deea:	fb1b fb03 	smulbb	fp, fp, r3
 801deee:	1209      	asrs	r1, r1, #8
 801def0:	7001      	strb	r1, [r0, #0]
 801def2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801def6:	fb01 b106 	mla	r1, r1, r6, fp
 801defa:	b289      	uxth	r1, r1
 801defc:	f101 0b01 	add.w	fp, r1, #1
 801df00:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801df04:	1209      	asrs	r1, r1, #8
 801df06:	7041      	strb	r1, [r0, #1]
 801df08:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801df0c:	f890 c002 	ldrb.w	ip, [r0, #2]
 801df10:	fb1c f303 	smulbb	r3, ip, r3
 801df14:	fb01 3606 	mla	r6, r1, r6, r3
 801df18:	b2b6      	uxth	r6, r6
 801df1a:	1c73      	adds	r3, r6, #1
 801df1c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801df20:	1236      	asrs	r6, r6, #8
 801df22:	7086      	strb	r6, [r0, #2]
 801df24:	e7ca      	b.n	801debc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801df26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801df28:	4428      	add	r0, r5
 801df2a:	441f      	add	r7, r3
 801df2c:	e7a8      	b.n	801de80 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801df2e:	4b03      	ldr	r3, [pc, #12]	@ (801df3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801df30:	6818      	ldr	r0, [r3, #0]
 801df32:	6803      	ldr	r3, [r0, #0]
 801df34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801df36:	4798      	blx	r3
 801df38:	e782      	b.n	801de40 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801df3a:	bf00      	nop
 801df3c:	24028e2c 	.word	0x24028e2c
 801df40:	24028e26 	.word	0x24028e26

0801df44 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801df44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df48:	b091      	sub	sp, #68	@ 0x44
 801df4a:	4680      	mov	r8, r0
 801df4c:	460e      	mov	r6, r1
 801df4e:	6810      	ldr	r0, [r2, #0]
 801df50:	6851      	ldr	r1, [r2, #4]
 801df52:	ad0c      	add	r5, sp, #48	@ 0x30
 801df54:	4614      	mov	r4, r2
 801df56:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801df5a:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801e0f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801df5e:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801e0f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801df62:	c503      	stmia	r5!, {r0, r1}
 801df64:	6818      	ldr	r0, [r3, #0]
 801df66:	ad0e      	add	r5, sp, #56	@ 0x38
 801df68:	6859      	ldr	r1, [r3, #4]
 801df6a:	c503      	stmia	r5!, {r0, r1}
 801df6c:	a80c      	add	r0, sp, #48	@ 0x30
 801df6e:	f7f8 fa1b 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df72:	4621      	mov	r1, r4
 801df74:	a80e      	add	r0, sp, #56	@ 0x38
 801df76:	f7f8 fa3f 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801df7a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801df7e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801df82:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801df86:	f8d9 0000 	ldr.w	r0, [r9]
 801df8a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801df8e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801df92:	eb08 0401 	add.w	r4, r8, r1
 801df96:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801df9a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801df9e:	440a      	add	r2, r1
 801dfa0:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801dfa4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801dfa8:	4413      	add	r3, r2
 801dfaa:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801dfae:	6803      	ldr	r3, [r0, #0]
 801dfb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dfb2:	4798      	blx	r3
 801dfb4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801dfb8:	f8d9 0000 	ldr.w	r0, [r9]
 801dfbc:	d022      	beq.n	801e004 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801dfbe:	2200      	movs	r2, #0
 801dfc0:	f04f 0c01 	mov.w	ip, #1
 801dfc4:	6801      	ldr	r1, [r0, #0]
 801dfc6:	b2ad      	uxth	r5, r5
 801dfc8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801dfcc:	e9cd c208 	strd	ip, r2, [sp, #32]
 801dfd0:	f04f 0c0b 	mov.w	ip, #11
 801dfd4:	f8cd c01c 	str.w	ip, [sp, #28]
 801dfd8:	f8ba c000 	ldrh.w	ip, [sl]
 801dfdc:	9704      	str	r7, [sp, #16]
 801dfde:	9502      	str	r5, [sp, #8]
 801dfe0:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801dfe4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801dfe8:	9203      	str	r2, [sp, #12]
 801dfea:	fa1f f288 	uxth.w	r2, r8
 801dfee:	9201      	str	r2, [sp, #4]
 801dff0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801dff4:	9200      	str	r2, [sp, #0]
 801dff6:	4632      	mov	r2, r6
 801dff8:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801dffa:	4621      	mov	r1, r4
 801dffc:	47a8      	blx	r5
 801dffe:	b011      	add	sp, #68	@ 0x44
 801e000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e004:	6803      	ldr	r3, [r0, #0]
 801e006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e008:	4798      	blx	r3
 801e00a:	f8ba 2000 	ldrh.w	r2, [sl]
 801e00e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801e012:	f04f 0e03 	mov.w	lr, #3
 801e016:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801e01a:	4355      	muls	r5, r2
 801e01c:	fa1f fc87 	uxth.w	ip, r7
 801e020:	fb02 1303 	mla	r3, r2, r3, r1
 801e024:	eba2 0208 	sub.w	r2, r2, r8
 801e028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e02c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e030:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e034:	4418      	add	r0, r3
 801e036:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e038:	1943      	adds	r3, r0, r5
 801e03a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801e03e:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801e042:	eba2 0208 	sub.w	r2, r2, r8
 801e046:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e04a:	b2ad      	uxth	r5, r5
 801e04c:	4298      	cmp	r0, r3
 801e04e:	d24a      	bcs.n	801e0e6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801e050:	eb00 0908 	add.w	r9, r0, r8
 801e054:	4621      	mov	r1, r4
 801e056:	4548      	cmp	r0, r9
 801e058:	460c      	mov	r4, r1
 801e05a:	d240      	bcs.n	801e0de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801e05c:	f04f 0a04 	mov.w	sl, #4
 801e060:	7824      	ldrb	r4, [r4, #0]
 801e062:	2fff      	cmp	r7, #255	@ 0xff
 801e064:	f101 0101 	add.w	r1, r1, #1
 801e068:	fb1e a404 	smlabb	r4, lr, r4, sl
 801e06c:	eb06 0a04 	add.w	sl, r6, r4
 801e070:	f816 b004 	ldrb.w	fp, [r6, r4]
 801e074:	d02b      	beq.n	801e0ce <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801e076:	7804      	ldrb	r4, [r0, #0]
 801e078:	fb14 f405 	smulbb	r4, r4, r5
 801e07c:	fb0b 440c 	mla	r4, fp, ip, r4
 801e080:	b2a4      	uxth	r4, r4
 801e082:	f104 0b01 	add.w	fp, r4, #1
 801e086:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e08a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e08e:	fb1b fb05 	smulbb	fp, fp, r5
 801e092:	1224      	asrs	r4, r4, #8
 801e094:	7004      	strb	r4, [r0, #0]
 801e096:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e09a:	fb04 b40c 	mla	r4, r4, ip, fp
 801e09e:	b2a4      	uxth	r4, r4
 801e0a0:	f104 0b01 	add.w	fp, r4, #1
 801e0a4:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e0a8:	1224      	asrs	r4, r4, #8
 801e0aa:	7044      	strb	r4, [r0, #1]
 801e0ac:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e0b0:	f890 a002 	ldrb.w	sl, [r0, #2]
 801e0b4:	fb1a fa05 	smulbb	sl, sl, r5
 801e0b8:	fb04 a40c 	mla	r4, r4, ip, sl
 801e0bc:	b2a4      	uxth	r4, r4
 801e0be:	f104 0a01 	add.w	sl, r4, #1
 801e0c2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e0c6:	1224      	asrs	r4, r4, #8
 801e0c8:	7084      	strb	r4, [r0, #2]
 801e0ca:	3003      	adds	r0, #3
 801e0cc:	e7c3      	b.n	801e056 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801e0ce:	f880 b000 	strb.w	fp, [r0]
 801e0d2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e0d6:	7044      	strb	r4, [r0, #1]
 801e0d8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e0dc:	e7f4      	b.n	801e0c8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801e0de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e0e0:	4420      	add	r0, r4
 801e0e2:	188c      	adds	r4, r1, r2
 801e0e4:	e7b2      	b.n	801e04c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801e0e6:	4b03      	ldr	r3, [pc, #12]	@ (801e0f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801e0e8:	6818      	ldr	r0, [r3, #0]
 801e0ea:	6803      	ldr	r3, [r0, #0]
 801e0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e0ee:	4798      	blx	r3
 801e0f0:	e785      	b.n	801dffe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801e0f2:	bf00      	nop
 801e0f4:	24028e2c 	.word	0x24028e2c
 801e0f8:	24028e26 	.word	0x24028e26

0801e0fc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e0fc:	b4f0      	push	{r4, r5, r6, r7}
 801e0fe:	460c      	mov	r4, r1
 801e100:	4611      	mov	r1, r2
 801e102:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801e106:	461a      	mov	r2, r3
 801e108:	780f      	ldrb	r7, [r1, #0]
 801e10a:	9b04      	ldr	r3, [sp, #16]
 801e10c:	784e      	ldrb	r6, [r1, #1]
 801e10e:	b11f      	cbz	r7, 801e118 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801e110:	2f01      	cmp	r7, #1
 801e112:	d01d      	beq.n	801e150 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801e114:	bcf0      	pop	{r4, r5, r6, r7}
 801e116:	4770      	bx	lr
 801e118:	2e03      	cmp	r6, #3
 801e11a:	d8fb      	bhi.n	801e114 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801e11c:	e8df f006 	tbb	[pc, r6]
 801e120:	16140702 	.word	0x16140702
 801e124:	9504      	str	r5, [sp, #16]
 801e126:	4620      	mov	r0, r4
 801e128:	bcf0      	pop	{r4, r5, r6, r7}
 801e12a:	f7ff be33 	b.w	801dd94 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e12e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801e130:	2800      	cmp	r0, #0
 801e132:	d0ef      	beq.n	801e114 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801e134:	6806      	ldr	r6, [r0, #0]
 801e136:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801e13a:	68f5      	ldr	r5, [r6, #12]
 801e13c:	4613      	mov	r3, r2
 801e13e:	46ac      	mov	ip, r5
 801e140:	460a      	mov	r2, r1
 801e142:	4621      	mov	r1, r4
 801e144:	bcf0      	pop	{r4, r5, r6, r7}
 801e146:	4760      	bx	ip
 801e148:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801e14a:	e7f1      	b.n	801e130 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801e14c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801e14e:	e7ef      	b.n	801e130 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801e150:	2e03      	cmp	r6, #3
 801e152:	d8df      	bhi.n	801e114 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801e154:	e8df f006 	tbb	[pc, r6]
 801e158:	110f0702 	.word	0x110f0702
 801e15c:	9504      	str	r5, [sp, #16]
 801e15e:	4620      	mov	r0, r4
 801e160:	bcf0      	pop	{r4, r5, r6, r7}
 801e162:	f7ff beef 	b.w	801df44 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e166:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801e168:	2800      	cmp	r0, #0
 801e16a:	d0d3      	beq.n	801e114 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801e16c:	6806      	ldr	r6, [r0, #0]
 801e16e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801e172:	68b5      	ldr	r5, [r6, #8]
 801e174:	e7e2      	b.n	801e13c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801e176:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801e178:	e7f6      	b.n	801e168 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801e17a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801e17c:	e7f4      	b.n	801e168 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801e180 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801e180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e184:	4605      	mov	r5, r0
 801e186:	b08f      	sub	sp, #60	@ 0x3c
 801e188:	460c      	mov	r4, r1
 801e18a:	461f      	mov	r7, r3
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d052      	beq.n	801e236 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801e190:	6808      	ldr	r0, [r1, #0]
 801e192:	ab0a      	add	r3, sp, #40	@ 0x28
 801e194:	6849      	ldr	r1, [r1, #4]
 801e196:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801e360 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801e19a:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801e364 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801e19e:	c303      	stmia	r3!, {r0, r1}
 801e1a0:	6810      	ldr	r0, [r2, #0]
 801e1a2:	ab0c      	add	r3, sp, #48	@ 0x30
 801e1a4:	6851      	ldr	r1, [r2, #4]
 801e1a6:	c303      	stmia	r3!, {r0, r1}
 801e1a8:	a80a      	add	r0, sp, #40	@ 0x28
 801e1aa:	f7f8 f8fd 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e1ae:	4621      	mov	r1, r4
 801e1b0:	a80c      	add	r0, sp, #48	@ 0x30
 801e1b2:	f7f8 f921 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e1b6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801e1ba:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801e1be:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801e1c2:	f8d8 0000 	ldr.w	r0, [r8]
 801e1c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e1ca:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801e1ce:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801e1d2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801e1d6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801e1da:	440a      	add	r2, r1
 801e1dc:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801e1e0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801e1e4:	4413      	add	r3, r2
 801e1e6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e1ea:	6803      	ldr	r3, [r0, #0]
 801e1ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e1ee:	4798      	blx	r3
 801e1f0:	2fff      	cmp	r7, #255	@ 0xff
 801e1f2:	d023      	beq.n	801e23c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801e1f4:	f010 0f04 	tst.w	r0, #4
 801e1f8:	f8d8 0000 	ldr.w	r0, [r8]
 801e1fc:	d021      	beq.n	801e242 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801e1fe:	2100      	movs	r1, #0
 801e200:	f04f 0e01 	mov.w	lr, #1
 801e204:	f8d0 c000 	ldr.w	ip, [r0]
 801e208:	b2a4      	uxth	r4, r4
 801e20a:	9106      	str	r1, [sp, #24]
 801e20c:	b2b6      	uxth	r6, r6
 801e20e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801e212:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801e216:	e9cd e107 	strd	lr, r1, [sp, #28]
 801e21a:	f8b9 e000 	ldrh.w	lr, [r9]
 801e21e:	9703      	str	r7, [sp, #12]
 801e220:	9401      	str	r4, [sp, #4]
 801e222:	9600      	str	r6, [sp, #0]
 801e224:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801e228:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801e22c:	9102      	str	r1, [sp, #8]
 801e22e:	4629      	mov	r1, r5
 801e230:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801e234:	47a0      	blx	r4
 801e236:	b00f      	add	sp, #60	@ 0x3c
 801e238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e23c:	f010 0f01 	tst.w	r0, #1
 801e240:	e7da      	b.n	801e1f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801e242:	6803      	ldr	r3, [r0, #0]
 801e244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e246:	4798      	blx	r3
 801e248:	f8b9 1000 	ldrh.w	r1, [r9]
 801e24c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801e250:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801e254:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801e258:	434c      	muls	r4, r1
 801e25a:	2fff      	cmp	r7, #255	@ 0xff
 801e25c:	fb01 2303 	mla	r3, r1, r3, r2
 801e260:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e264:	eba1 0106 	sub.w	r1, r1, r6
 801e268:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e26c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e270:	4418      	add	r0, r3
 801e272:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801e276:	eba3 0606 	sub.w	r6, r3, r6
 801e27a:	4404      	add	r4, r0
 801e27c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801e280:	d04a      	beq.n	801e318 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801e282:	43fa      	mvns	r2, r7
 801e284:	b2bb      	uxth	r3, r7
 801e286:	b2d7      	uxtb	r7, r2
 801e288:	42a0      	cmp	r0, r4
 801e28a:	d263      	bcs.n	801e354 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801e28c:	eb00 0e0c 	add.w	lr, r0, ip
 801e290:	4586      	cmp	lr, r0
 801e292:	f100 0803 	add.w	r8, r0, #3
 801e296:	d93a      	bls.n	801e30e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801e298:	f835 2b02 	ldrh.w	r2, [r5], #2
 801e29c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801e2a0:	00d0      	lsls	r0, r2, #3
 801e2a2:	fb19 f907 	smulbb	r9, r9, r7
 801e2a6:	b2c0      	uxtb	r0, r0
 801e2a8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e2ac:	fb00 9003 	mla	r0, r0, r3, r9
 801e2b0:	b280      	uxth	r0, r0
 801e2b2:	f100 0901 	add.w	r9, r0, #1
 801e2b6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e2ba:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801e2be:	fb19 f907 	smulbb	r9, r9, r7
 801e2c2:	1200      	asrs	r0, r0, #8
 801e2c4:	f808 0c03 	strb.w	r0, [r8, #-3]
 801e2c8:	10d0      	asrs	r0, r2, #3
 801e2ca:	1212      	asrs	r2, r2, #8
 801e2cc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801e2d0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801e2d4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801e2d8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e2dc:	fb00 9003 	mla	r0, r0, r3, r9
 801e2e0:	b280      	uxth	r0, r0
 801e2e2:	f100 0901 	add.w	r9, r0, #1
 801e2e6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e2ea:	1200      	asrs	r0, r0, #8
 801e2ec:	f808 0c02 	strb.w	r0, [r8, #-2]
 801e2f0:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801e2f4:	fb10 f007 	smulbb	r0, r0, r7
 801e2f8:	fb02 0203 	mla	r2, r2, r3, r0
 801e2fc:	b292      	uxth	r2, r2
 801e2fe:	1c50      	adds	r0, r2, #1
 801e300:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e304:	4640      	mov	r0, r8
 801e306:	1212      	asrs	r2, r2, #8
 801e308:	f808 2c01 	strb.w	r2, [r8, #-1]
 801e30c:	e7c0      	b.n	801e290 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801e30e:	4408      	add	r0, r1
 801e310:	4435      	add	r5, r6
 801e312:	e7b9      	b.n	801e288 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801e314:	4408      	add	r0, r1
 801e316:	4435      	add	r5, r6
 801e318:	42a0      	cmp	r0, r4
 801e31a:	d21b      	bcs.n	801e354 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801e31c:	eb00 070c 	add.w	r7, r0, ip
 801e320:	42b8      	cmp	r0, r7
 801e322:	d2f7      	bcs.n	801e314 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801e324:	f835 3b02 	ldrh.w	r3, [r5], #2
 801e328:	3003      	adds	r0, #3
 801e32a:	00da      	lsls	r2, r3, #3
 801e32c:	b2d2      	uxtb	r2, r2
 801e32e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e332:	f800 2c03 	strb.w	r2, [r0, #-3]
 801e336:	10da      	asrs	r2, r3, #3
 801e338:	121b      	asrs	r3, r3, #8
 801e33a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801e33e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801e342:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801e346:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801e34a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801e34e:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e352:	e7e5      	b.n	801e320 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801e354:	4b02      	ldr	r3, [pc, #8]	@ (801e360 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801e356:	6818      	ldr	r0, [r3, #0]
 801e358:	6803      	ldr	r3, [r0, #0]
 801e35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e35c:	4798      	blx	r3
 801e35e:	e76a      	b.n	801e236 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801e360:	24028e2c 	.word	0x24028e2c
 801e364:	24028e26 	.word	0x24028e26

0801e368 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e36c:	b08a      	sub	sp, #40	@ 0x28
 801e36e:	460d      	mov	r5, r1
 801e370:	4604      	mov	r4, r0
 801e372:	461e      	mov	r6, r3
 801e374:	6808      	ldr	r0, [r1, #0]
 801e376:	ab06      	add	r3, sp, #24
 801e378:	6849      	ldr	r1, [r1, #4]
 801e37a:	4f5d      	ldr	r7, [pc, #372]	@ (801e4f0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801e37c:	c303      	stmia	r3!, {r0, r1}
 801e37e:	6810      	ldr	r0, [r2, #0]
 801e380:	ab08      	add	r3, sp, #32
 801e382:	6851      	ldr	r1, [r2, #4]
 801e384:	c303      	stmia	r3!, {r0, r1}
 801e386:	a806      	add	r0, sp, #24
 801e388:	f7f8 f80e 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e38c:	4629      	mov	r1, r5
 801e38e:	a808      	add	r0, sp, #32
 801e390:	f7f8 f832 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e394:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e398:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801e39c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e3a0:	6838      	ldr	r0, [r7, #0]
 801e3a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e3a6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801e3aa:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801e3ae:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e3b2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e3b6:	440a      	add	r2, r1
 801e3b8:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e3bc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e3c0:	4413      	add	r3, r2
 801e3c2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801e3c6:	6803      	ldr	r3, [r0, #0]
 801e3c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e3ca:	4798      	blx	r3
 801e3cc:	2eff      	cmp	r6, #255	@ 0xff
 801e3ce:	d119      	bne.n	801e404 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e3d0:	f010 0f20 	tst.w	r0, #32
 801e3d4:	6838      	ldr	r0, [r7, #0]
 801e3d6:	d018      	beq.n	801e40a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e3d8:	b2ad      	uxth	r5, r5
 801e3da:	2700      	movs	r7, #0
 801e3dc:	6801      	ldr	r1, [r0, #0]
 801e3de:	9501      	str	r5, [sp, #4]
 801e3e0:	fa1f f588 	uxth.w	r5, r8
 801e3e4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801e3e8:	9500      	str	r5, [sp, #0]
 801e3ea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e3ee:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801e3f2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e3f6:	9602      	str	r6, [sp, #8]
 801e3f8:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801e3fa:	4621      	mov	r1, r4
 801e3fc:	47a8      	blx	r5
 801e3fe:	b00a      	add	sp, #40	@ 0x28
 801e400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e404:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e408:	e7e4      	b.n	801e3d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801e40a:	6803      	ldr	r3, [r0, #0]
 801e40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e40e:	4798      	blx	r3
 801e410:	4b38      	ldr	r3, [pc, #224]	@ (801e4f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801e412:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e416:	f8b3 c000 	ldrh.w	ip, [r3]
 801e41a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801e41e:	fb0c f505 	mul.w	r5, ip, r5
 801e422:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801e426:	fb0c 2303 	mla	r3, ip, r3, r2
 801e42a:	ebac 0c08 	sub.w	ip, ip, r8
 801e42e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e432:	ebae 0e08 	sub.w	lr, lr, r8
 801e436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e43a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e43e:	4418      	add	r0, r3
 801e440:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801e444:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e448:	4405      	add	r5, r0
 801e44a:	42a8      	cmp	r0, r5
 801e44c:	d24a      	bcs.n	801e4e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801e44e:	eb00 0803 	add.w	r8, r0, r3
 801e452:	4540      	cmp	r0, r8
 801e454:	d243      	bcs.n	801e4de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801e456:	78e2      	ldrb	r2, [r4, #3]
 801e458:	b15a      	cbz	r2, 801e472 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e45a:	2aff      	cmp	r2, #255	@ 0xff
 801e45c:	f894 9000 	ldrb.w	r9, [r4]
 801e460:	d10a      	bne.n	801e478 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e462:	2eff      	cmp	r6, #255	@ 0xff
 801e464:	d108      	bne.n	801e478 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e466:	f880 9000 	strb.w	r9, [r0]
 801e46a:	7862      	ldrb	r2, [r4, #1]
 801e46c:	7042      	strb	r2, [r0, #1]
 801e46e:	78a2      	ldrb	r2, [r4, #2]
 801e470:	7082      	strb	r2, [r0, #2]
 801e472:	3003      	adds	r0, #3
 801e474:	3404      	adds	r4, #4
 801e476:	e7ec      	b.n	801e452 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801e478:	4372      	muls	r2, r6
 801e47a:	1c51      	adds	r1, r2, #1
 801e47c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801e480:	1209      	asrs	r1, r1, #8
 801e482:	fa1f fa81 	uxth.w	sl, r1
 801e486:	43c9      	mvns	r1, r1
 801e488:	fb19 f90a 	smulbb	r9, r9, sl
 801e48c:	b2ca      	uxtb	r2, r1
 801e48e:	7801      	ldrb	r1, [r0, #0]
 801e490:	fb01 9902 	mla	r9, r1, r2, r9
 801e494:	fa1f f989 	uxth.w	r9, r9
 801e498:	f109 0101 	add.w	r1, r9, #1
 801e49c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801e4a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e4a4:	f880 9000 	strb.w	r9, [r0]
 801e4a8:	f890 9001 	ldrb.w	r9, [r0, #1]
 801e4ac:	7861      	ldrb	r1, [r4, #1]
 801e4ae:	fb19 f902 	smulbb	r9, r9, r2
 801e4b2:	fb01 910a 	mla	r1, r1, sl, r9
 801e4b6:	b289      	uxth	r1, r1
 801e4b8:	f101 0901 	add.w	r9, r1, #1
 801e4bc:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801e4c0:	1209      	asrs	r1, r1, #8
 801e4c2:	7041      	strb	r1, [r0, #1]
 801e4c4:	7881      	ldrb	r1, [r0, #2]
 801e4c6:	f894 9002 	ldrb.w	r9, [r4, #2]
 801e4ca:	fb11 f202 	smulbb	r2, r1, r2
 801e4ce:	fb09 220a 	mla	r2, r9, sl, r2
 801e4d2:	b292      	uxth	r2, r2
 801e4d4:	1c51      	adds	r1, r2, #1
 801e4d6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e4da:	1212      	asrs	r2, r2, #8
 801e4dc:	e7c8      	b.n	801e470 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801e4de:	4460      	add	r0, ip
 801e4e0:	4474      	add	r4, lr
 801e4e2:	e7b2      	b.n	801e44a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801e4e4:	6838      	ldr	r0, [r7, #0]
 801e4e6:	6803      	ldr	r3, [r0, #0]
 801e4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e4ea:	4798      	blx	r3
 801e4ec:	e787      	b.n	801e3fe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e4ee:	bf00      	nop
 801e4f0:	24028e2c 	.word	0x24028e2c
 801e4f4:	24028e26 	.word	0x24028e26

0801e4f8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e4fc:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801e500:	4607      	mov	r7, r0
 801e502:	460c      	mov	r4, r1
 801e504:	4692      	mov	sl, r2
 801e506:	4699      	mov	r9, r3
 801e508:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e50a:	b335      	cbz	r5, 801e55a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e50c:	4608      	mov	r0, r1
 801e50e:	f7fb fe1d 	bl	801a14c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e512:	4680      	mov	r8, r0
 801e514:	4620      	mov	r0, r4
 801e516:	f7fb fe4d 	bl	801a1b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e51a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e51e:	4620      	mov	r0, r4
 801e520:	f8ad a008 	strh.w	sl, [sp, #8]
 801e524:	f8ad 900a 	strh.w	r9, [sp, #10]
 801e528:	f8ad 800c 	strh.w	r8, [sp, #12]
 801e52c:	f7fb fefa 	bl	801a324 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e530:	2810      	cmp	r0, #16
 801e532:	d812      	bhi.n	801e55a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e534:	e8df f000 	tbb	[pc, r0]
 801e538:	11092d24 	.word	0x11092d24
 801e53c:	11111111 	.word	0x11111111
 801e540:	14111111 	.word	0x14111111
 801e544:	4c111111 	.word	0x4c111111
 801e548:	3c          	.byte	0x3c
 801e549:	00          	.byte	0x00
 801e54a:	4620      	mov	r0, r4
 801e54c:	f7fb fe66 	bl	801a21c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e550:	462b      	mov	r3, r5
 801e552:	4632      	mov	r2, r6
 801e554:	a902      	add	r1, sp, #8
 801e556:	f7ff ff07 	bl	801e368 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e55a:	b004      	add	sp, #16
 801e55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e560:	4620      	mov	r0, r4
 801e562:	f7fb fe5b 	bl	801a21c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e566:	4680      	mov	r8, r0
 801e568:	4620      	mov	r0, r4
 801e56a:	f7fb fe87 	bl	801a27c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e56e:	ab02      	add	r3, sp, #8
 801e570:	4602      	mov	r2, r0
 801e572:	4641      	mov	r1, r8
 801e574:	4638      	mov	r0, r7
 801e576:	e9cd 6500 	strd	r6, r5, [sp]
 801e57a:	f7ff fdbf 	bl	801e0fc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e57e:	e7ec      	b.n	801e55a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e580:	4620      	mov	r0, r4
 801e582:	f7fb fe4b 	bl	801a21c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e586:	462b      	mov	r3, r5
 801e588:	4632      	mov	r2, r6
 801e58a:	a902      	add	r1, sp, #8
 801e58c:	f7ff fdf8 	bl	801e180 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801e590:	e7e3      	b.n	801e55a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e592:	683b      	ldr	r3, [r7, #0]
 801e594:	4620      	mov	r0, r4
 801e596:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801e59a:	f7fb fe3f 	bl	801a21c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e59e:	2300      	movs	r3, #0
 801e5a0:	4601      	mov	r1, r0
 801e5a2:	aa02      	add	r2, sp, #8
 801e5a4:	4638      	mov	r0, r7
 801e5a6:	e9cd 5300 	strd	r5, r3, [sp]
 801e5aa:	4633      	mov	r3, r6
 801e5ac:	47c0      	blx	r8
 801e5ae:	e7d4      	b.n	801e55a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e5b0:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801e5b2:	2f00      	cmp	r7, #0
 801e5b4:	d0d1      	beq.n	801e55a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e5b6:	683b      	ldr	r3, [r7, #0]
 801e5b8:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801e5bc:	4620      	mov	r0, r4
 801e5be:	f7fb fe2d 	bl	801a21c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e5c2:	9500      	str	r5, [sp, #0]
 801e5c4:	4601      	mov	r1, r0
 801e5c6:	4633      	mov	r3, r6
 801e5c8:	aa02      	add	r2, sp, #8
 801e5ca:	4638      	mov	r0, r7
 801e5cc:	47c0      	blx	r8
 801e5ce:	e7c4      	b.n	801e55a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e5d0:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801e5d2:	2f00      	cmp	r7, #0
 801e5d4:	d0c1      	beq.n	801e55a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e5d6:	683b      	ldr	r3, [r7, #0]
 801e5d8:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801e5dc:	e7ee      	b.n	801e5bc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801e5de <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e5de:	b4f0      	push	{r4, r5, r6, r7}
 801e5e0:	4616      	mov	r6, r2
 801e5e2:	461c      	mov	r4, r3
 801e5e4:	460d      	mov	r5, r1
 801e5e6:	9a04      	ldr	r2, [sp, #16]
 801e5e8:	2e01      	cmp	r6, #1
 801e5ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e5ee:	d00e      	beq.n	801e60e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801e5f0:	d303      	bcc.n	801e5fa <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801e5f2:	2e02      	cmp	r6, #2
 801e5f4:	d006      	beq.n	801e604 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801e5f6:	bcf0      	pop	{r4, r5, r6, r7}
 801e5f8:	4770      	bx	lr
 801e5fa:	4621      	mov	r1, r4
 801e5fc:	4628      	mov	r0, r5
 801e5fe:	bcf0      	pop	{r4, r5, r6, r7}
 801e600:	f7ff bdbe 	b.w	801e180 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801e604:	4621      	mov	r1, r4
 801e606:	4628      	mov	r0, r5
 801e608:	bcf0      	pop	{r4, r5, r6, r7}
 801e60a:	f7ff bead 	b.w	801e368 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e60e:	6805      	ldr	r5, [r0, #0]
 801e610:	2600      	movs	r6, #0
 801e612:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e616:	68ed      	ldr	r5, [r5, #12]
 801e618:	4613      	mov	r3, r2
 801e61a:	4622      	mov	r2, r4
 801e61c:	46ac      	mov	ip, r5
 801e61e:	bcf0      	pop	{r4, r5, r6, r7}
 801e620:	4760      	bx	ip
	...

0801e624 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e624:	b160      	cbz	r0, 801e640 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801e626:	2903      	cmp	r1, #3
 801e628:	d818      	bhi.n	801e65c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801e62a:	e8df f001 	tbb	[pc, r1]
 801e62e:	1902      	.short	0x1902
 801e630:	1b06      	.short	0x1b06
 801e632:	4b0e      	ldr	r3, [pc, #56]	@ (801e66c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801e634:	8818      	ldrh	r0, [r3, #0]
 801e636:	4240      	negs	r0, r0
 801e638:	4770      	bx	lr
 801e63a:	4b0c      	ldr	r3, [pc, #48]	@ (801e66c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801e63c:	8818      	ldrh	r0, [r3, #0]
 801e63e:	4770      	bx	lr
 801e640:	2903      	cmp	r1, #3
 801e642:	d80b      	bhi.n	801e65c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801e644:	a301      	add	r3, pc, #4	@ (adr r3, 801e64c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801e646:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e64a:	bf00      	nop
 801e64c:	0801e661 	.word	0x0801e661
 801e650:	0801e63b 	.word	0x0801e63b
 801e654:	0801e665 	.word	0x0801e665
 801e658:	0801e633 	.word	0x0801e633
 801e65c:	2000      	movs	r0, #0
 801e65e:	4770      	bx	lr
 801e660:	2001      	movs	r0, #1
 801e662:	4770      	bx	lr
 801e664:	f04f 30ff 	mov.w	r0, #4294967295
 801e668:	4770      	bx	lr
 801e66a:	bf00      	nop
 801e66c:	24028e26 	.word	0x24028e26

0801e670 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e670:	b160      	cbz	r0, 801e68c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801e672:	2903      	cmp	r1, #3
 801e674:	d818      	bhi.n	801e6a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801e676:	e8df f001 	tbb	[pc, r1]
 801e67a:	0219      	.short	0x0219
 801e67c:	051b      	.short	0x051b
 801e67e:	4b0e      	ldr	r3, [pc, #56]	@ (801e6b8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801e680:	8818      	ldrh	r0, [r3, #0]
 801e682:	4770      	bx	lr
 801e684:	4b0c      	ldr	r3, [pc, #48]	@ (801e6b8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801e686:	8818      	ldrh	r0, [r3, #0]
 801e688:	4240      	negs	r0, r0
 801e68a:	4770      	bx	lr
 801e68c:	2903      	cmp	r1, #3
 801e68e:	d80b      	bhi.n	801e6a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801e690:	a301      	add	r3, pc, #4	@ (adr r3, 801e698 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801e692:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e696:	bf00      	nop
 801e698:	0801e67f 	.word	0x0801e67f
 801e69c:	0801e6b1 	.word	0x0801e6b1
 801e6a0:	0801e685 	.word	0x0801e685
 801e6a4:	0801e6ad 	.word	0x0801e6ad
 801e6a8:	2000      	movs	r0, #0
 801e6aa:	4770      	bx	lr
 801e6ac:	2001      	movs	r0, #1
 801e6ae:	4770      	bx	lr
 801e6b0:	f04f 30ff 	mov.w	r0, #4294967295
 801e6b4:	4770      	bx	lr
 801e6b6:	bf00      	nop
 801e6b8:	24028e26 	.word	0x24028e26

0801e6bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c0:	b097      	sub	sp, #92	@ 0x5c
 801e6c2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e6c4:	a912      	add	r1, sp, #72	@ 0x48
 801e6c6:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801e6ca:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801e6ce:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801e6d2:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801e6d6:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801e6da:	e881 000c 	stmia.w	r1, {r2, r3}
 801e6de:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801e6e2:	930a      	str	r3, [sp, #40]	@ 0x28
 801e6e4:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801e6e8:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801e6ec:	9311      	str	r3, [sp, #68]	@ 0x44
 801e6ee:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801e6f2:	798d      	ldrb	r5, [r1, #6]
 801e6f4:	930c      	str	r3, [sp, #48]	@ 0x30
 801e6f6:	7b4b      	ldrb	r3, [r1, #13]
 801e6f8:	0158      	lsls	r0, r3, #5
 801e6fa:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801e6fe:	4328      	orrs	r0, r5
 801e700:	9009      	str	r0, [sp, #36]	@ 0x24
 801e702:	f000 817c 	beq.w	801e9fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e706:	011b      	lsls	r3, r3, #4
 801e708:	79c8      	ldrb	r0, [r1, #7]
 801e70a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e70e:	4303      	orrs	r3, r0
 801e710:	930e      	str	r3, [sp, #56]	@ 0x38
 801e712:	f000 8174 	beq.w	801e9fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e716:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e71a:	b29b      	uxth	r3, r3
 801e71c:	2f00      	cmp	r7, #0
 801e71e:	f000 8116 	beq.w	801e94e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801e722:	1aff      	subs	r7, r7, r3
 801e724:	b2bf      	uxth	r7, r7
 801e726:	043b      	lsls	r3, r7, #16
 801e728:	d502      	bpl.n	801e730 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e72a:	1bf6      	subs	r6, r6, r7
 801e72c:	2700      	movs	r7, #0
 801e72e:	b236      	sxth	r6, r6
 801e730:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e734:	a812      	add	r0, sp, #72	@ 0x48
 801e736:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e73a:	428e      	cmp	r6, r1
 801e73c:	b28b      	uxth	r3, r1
 801e73e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801e742:	bfbf      	itttt	lt
 801e744:	18ff      	addlt	r7, r7, r3
 801e746:	1bbe      	sublt	r6, r7, r6
 801e748:	b2b7      	uxthlt	r7, r6
 801e74a:	460e      	movlt	r6, r1
 801e74c:	8891      	ldrh	r1, [r2, #4]
 801e74e:	440b      	add	r3, r1
 801e750:	4631      	mov	r1, r6
 801e752:	b21b      	sxth	r3, r3
 801e754:	9310      	str	r3, [sp, #64]	@ 0x40
 801e756:	88d3      	ldrh	r3, [r2, #6]
 801e758:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e75a:	449a      	add	sl, r3
 801e75c:	fa0f f38a 	sxth.w	r3, sl
 801e760:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801e764:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e766:	4bb5      	ldr	r3, [pc, #724]	@ (801ea3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801e768:	f893 b000 	ldrb.w	fp, [r3]
 801e76c:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e770:	f1dc 0300 	rsbs	r3, ip, #0
 801e774:	eb43 030c 	adc.w	r3, r3, ip
 801e778:	930d      	str	r3, [sp, #52]	@ 0x34
 801e77a:	464b      	mov	r3, r9
 801e77c:	f7f7 fc89 	bl	8016092 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e780:	4631      	mov	r1, r6
 801e782:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801e786:	464b      	mov	r3, r9
 801e788:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e78a:	a812      	add	r0, sp, #72	@ 0x48
 801e78c:	f7f7 fc9e 	bl	80160cc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e790:	a916      	add	r1, sp, #88	@ 0x58
 801e792:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e796:	a815      	add	r0, sp, #84	@ 0x54
 801e798:	f7f7 fdc4 	bl	8016324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e79c:	f1b9 0f00 	cmp.w	r9, #0
 801e7a0:	f040 80d8 	bne.w	801e954 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801e7a4:	f1bb 0f01 	cmp.w	fp, #1
 801e7a8:	f040 80dc 	bne.w	801e964 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801e7ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e7ae:	b153      	cbz	r3, 801e7c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801e7b0:	2508      	movs	r5, #8
 801e7b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e7b4:	fb95 f3f8 	sdiv	r3, r5, r8
 801e7b8:	1e5d      	subs	r5, r3, #1
 801e7ba:	4415      	add	r5, r2
 801e7bc:	fb95 f5f3 	sdiv	r5, r5, r3
 801e7c0:	fb15 f503 	smulbb	r5, r5, r3
 801e7c4:	b2ad      	uxth	r5, r5
 801e7c6:	b907      	cbnz	r7, 801e7ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801e7c8:	b16c      	cbz	r4, 801e7e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801e7ca:	fb04 7305 	mla	r3, r4, r5, r7
 801e7ce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801e7d0:	ebaa 0a04 	sub.w	sl, sl, r4
 801e7d4:	fb08 f303 	mul.w	r3, r8, r3
 801e7d8:	fa1f fa8a 	uxth.w	sl, sl
 801e7dc:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801e7e0:	f003 0407 	and.w	r4, r3, #7
 801e7e4:	9226      	str	r2, [sp, #152]	@ 0x98
 801e7e6:	4649      	mov	r1, r9
 801e7e8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e7ea:	f7ff ff1b 	bl	801e624 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801e7ee:	4683      	mov	fp, r0
 801e7f0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e7f2:	f7ff ff3d 	bl	801e670 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801e7f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e7f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e7fa:	4681      	mov	r9, r0
 801e7fc:	1a9b      	subs	r3, r3, r2
 801e7fe:	459a      	cmp	sl, r3
 801e800:	bfa8      	it	ge
 801e802:	469a      	movge	sl, r3
 801e804:	f1ba 0f00 	cmp.w	sl, #0
 801e808:	f340 80f9 	ble.w	801e9fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e80c:	1bf6      	subs	r6, r6, r7
 801e80e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e810:	1b9e      	subs	r6, r3, r6
 801e812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e814:	429e      	cmp	r6, r3
 801e816:	bfd4      	ite	le
 801e818:	ebc7 0706 	rsble	r7, r7, r6
 801e81c:	ebc7 0703 	rsbgt	r7, r7, r3
 801e820:	2f00      	cmp	r7, #0
 801e822:	f340 80ec 	ble.w	801e9fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e826:	1bed      	subs	r5, r5, r7
 801e828:	fb08 f305 	mul.w	r3, r8, r5
 801e82c:	930d      	str	r3, [sp, #52]	@ 0x34
 801e82e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e830:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e834:	930e      	str	r3, [sp, #56]	@ 0x38
 801e836:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e838:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e83c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e83e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e840:	b2db      	uxtb	r3, r3
 801e842:	9310      	str	r3, [sp, #64]	@ 0x40
 801e844:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e846:	2b00      	cmp	r3, #0
 801e848:	f040 80de 	bne.w	801ea08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801e84c:	4b7c      	ldr	r3, [pc, #496]	@ (801ea40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801e84e:	6818      	ldr	r0, [r3, #0]
 801e850:	6803      	ldr	r3, [r0, #0]
 801e852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e854:	4798      	blx	r3
 801e856:	2301      	movs	r3, #1
 801e858:	4a7a      	ldr	r2, [pc, #488]	@ (801ea44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801e85a:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801e85e:	fb07 9b1b 	mls	fp, r7, fp, r9
 801e862:	fa03 f308 	lsl.w	r3, r3, r8
 801e866:	8811      	ldrh	r1, [r2, #0]
 801e868:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801e86c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801e870:	3b01      	subs	r3, #1
 801e872:	fb06 bb07 	mla	fp, r6, r7, fp
 801e876:	b2db      	uxtb	r3, r3
 801e878:	930a      	str	r3, [sp, #40]	@ 0x28
 801e87a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801e87e:	fb01 2303 	mla	r3, r1, r3, r2
 801e882:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e886:	18c3      	adds	r3, r0, r3
 801e888:	9309      	str	r3, [sp, #36]	@ 0x24
 801e88a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e88c:	781a      	ldrb	r2, [r3, #0]
 801e88e:	4122      	asrs	r2, r4
 801e890:	b2d2      	uxtb	r2, r2
 801e892:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e896:	f0c0 80d7 	bcc.w	801ea48 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801e89a:	46be      	mov	lr, r7
 801e89c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e89e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e8a2:	f0c0 80ba 	bcc.w	801ea1a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801e8a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e8a8:	4013      	ands	r3, r2
 801e8aa:	d041      	beq.n	801e930 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801e8ac:	20ff      	movs	r0, #255	@ 0xff
 801e8ae:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e8b0:	fb90 f5f5 	sdiv	r5, r0, r5
 801e8b4:	436b      	muls	r3, r5
 801e8b6:	2bfe      	cmp	r3, #254	@ 0xfe
 801e8b8:	dd03      	ble.n	801e8c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801e8ba:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801e8bc:	4285      	cmp	r5, r0
 801e8be:	f000 80a5 	beq.w	801ea0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801e8c2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801e8c4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e8c6:	fb15 f303 	smulbb	r3, r5, r3
 801e8ca:	b29b      	uxth	r3, r3
 801e8cc:	1c5d      	adds	r5, r3, #1
 801e8ce:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e8d2:	780d      	ldrb	r5, [r1, #0]
 801e8d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e8d8:	fa1f fc83 	uxth.w	ip, r3
 801e8dc:	43db      	mvns	r3, r3
 801e8de:	fb10 f90c 	smulbb	r9, r0, ip
 801e8e2:	b2db      	uxtb	r3, r3
 801e8e4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e8e6:	fb05 9503 	mla	r5, r5, r3, r9
 801e8ea:	b2ad      	uxth	r5, r5
 801e8ec:	f105 0901 	add.w	r9, r5, #1
 801e8f0:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e8f4:	fb10 f90c 	smulbb	r9, r0, ip
 801e8f8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e8fa:	122d      	asrs	r5, r5, #8
 801e8fc:	fb10 fc0c 	smulbb	ip, r0, ip
 801e900:	700d      	strb	r5, [r1, #0]
 801e902:	784d      	ldrb	r5, [r1, #1]
 801e904:	fb05 9503 	mla	r5, r5, r3, r9
 801e908:	b2ad      	uxth	r5, r5
 801e90a:	f105 0901 	add.w	r9, r5, #1
 801e90e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e912:	122d      	asrs	r5, r5, #8
 801e914:	704d      	strb	r5, [r1, #1]
 801e916:	788d      	ldrb	r5, [r1, #2]
 801e918:	fb05 cc03 	mla	ip, r5, r3, ip
 801e91c:	fa1f fc8c 	uxth.w	ip, ip
 801e920:	f10c 0301 	add.w	r3, ip, #1
 801e924:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e928:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e92c:	f881 c002 	strb.w	ip, [r1, #2]
 801e930:	4444      	add	r4, r8
 801e932:	4431      	add	r1, r6
 801e934:	b2a4      	uxth	r4, r4
 801e936:	2c07      	cmp	r4, #7
 801e938:	bf89      	itett	hi
 801e93a:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801e93c:	fa42 f208 	asrls.w	r2, r2, r8
 801e940:	2400      	movhi	r4, #0
 801e942:	785a      	ldrbhi	r2, [r3, #1]
 801e944:	bf8a      	itet	hi
 801e946:	3301      	addhi	r3, #1
 801e948:	b2d2      	uxtbls	r2, r2
 801e94a:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801e94c:	e7a7      	b.n	801e89e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801e94e:	441e      	add	r6, r3
 801e950:	b236      	sxth	r6, r6
 801e952:	e6ed      	b.n	801e730 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e954:	f1b9 0f01 	cmp.w	r9, #1
 801e958:	f47f af28 	bne.w	801e7ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e95c:	f1bb 0f01 	cmp.w	fp, #1
 801e960:	f47f af24 	bne.w	801e7ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e964:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801ea40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801e968:	f8db 0000 	ldr.w	r0, [fp]
 801e96c:	6803      	ldr	r3, [r0, #0]
 801e96e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e970:	4798      	blx	r3
 801e972:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801e976:	465a      	mov	r2, fp
 801e978:	d006      	beq.n	801e988 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801e97a:	f1b8 0f04 	cmp.w	r8, #4
 801e97e:	d141      	bne.n	801ea04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801e980:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e982:	3300      	adds	r3, #0
 801e984:	bf18      	it	ne
 801e986:	2301      	movne	r3, #1
 801e988:	0580      	lsls	r0, r0, #22
 801e98a:	d566      	bpl.n	801ea5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e98c:	f1b8 0f08 	cmp.w	r8, #8
 801e990:	d163      	bne.n	801ea5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e992:	2b00      	cmp	r3, #0
 801e994:	bf0c      	ite	eq
 801e996:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801e99a:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801e99e:	2f00      	cmp	r7, #0
 801e9a0:	f47f af04 	bne.w	801e7ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e9a4:	2c00      	cmp	r4, #0
 801e9a6:	f47f af01 	bne.w	801e7ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e9aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e9ae:	18f3      	adds	r3, r6, r3
 801e9b0:	4283      	cmp	r3, r0
 801e9b2:	f73f aefb 	bgt.w	801e7ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e9b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e9b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9ba:	4403      	add	r3, r0
 801e9bc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e9be:	4283      	cmp	r3, r0
 801e9c0:	f73f aef4 	bgt.w	801e7ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e9c4:	f1b8 0f08 	cmp.w	r8, #8
 801e9c8:	6810      	ldr	r0, [r2, #0]
 801e9ca:	f04f 0600 	mov.w	r6, #0
 801e9ce:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801e9d2:	bf18      	it	ne
 801e9d4:	3501      	addne	r5, #1
 801e9d6:	6804      	ldr	r4, [r0, #0]
 801e9d8:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801e9dc:	bf18      	it	ne
 801e9de:	f025 0501 	bicne.w	r5, r5, #1
 801e9e2:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801e9e6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801e9e8:	bf18      	it	ne
 801e9ea:	b2ad      	uxthne	r5, r5
 801e9ec:	9104      	str	r1, [sp, #16]
 801e9ee:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801e9f0:	e9cd 5a00 	strd	r5, sl, [sp]
 801e9f4:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801e9f8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801e9fa:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801e9fc:	47a0      	blx	r4
 801e9fe:	b017      	add	sp, #92	@ 0x5c
 801ea00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea04:	2300      	movs	r3, #0
 801ea06:	e7bf      	b.n	801e988 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801ea08:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ea0a:	e724      	b.n	801e856 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801ea0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea0e:	700b      	strb	r3, [r1, #0]
 801ea10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ea12:	704b      	strb	r3, [r1, #1]
 801ea14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea16:	708b      	strb	r3, [r1, #2]
 801ea18:	e78a      	b.n	801e930 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801ea1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ea1c:	b153      	cbz	r3, 801ea34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801ea1e:	441c      	add	r4, r3
 801ea20:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ea22:	b2a4      	uxth	r4, r4
 801ea24:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801ea28:	f004 0407 	and.w	r4, r4, #7
 801ea2c:	781a      	ldrb	r2, [r3, #0]
 801ea2e:	9326      	str	r3, [sp, #152]	@ 0x98
 801ea30:	4122      	asrs	r2, r4
 801ea32:	b2d2      	uxtb	r2, r2
 801ea34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea36:	445b      	add	r3, fp
 801ea38:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea3a:	e72a      	b.n	801e892 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801ea3c:	24028e24 	.word	0x24028e24
 801ea40:	24028e2c 	.word	0x24028e2c
 801ea44:	24028e26 	.word	0x24028e26
 801ea48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ea4a:	2b00      	cmp	r3, #0
 801ea4c:	d1d7      	bne.n	801e9fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ea4e:	4b06      	ldr	r3, [pc, #24]	@ (801ea68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801ea50:	6818      	ldr	r0, [r3, #0]
 801ea52:	6803      	ldr	r3, [r0, #0]
 801ea54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ea56:	4798      	blx	r3
 801ea58:	e7d1      	b.n	801e9fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ea5a:	2b00      	cmp	r3, #0
 801ea5c:	f43f aea6 	beq.w	801e7ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ea60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ea64:	e79b      	b.n	801e99e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801ea66:	bf00      	nop
 801ea68:	24028e2c 	.word	0x24028e2c

0801ea6c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ea6c:	b538      	push	{r3, r4, r5, lr}
 801ea6e:	4c15      	ldr	r4, [pc, #84]	@ (801eac4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ea70:	4605      	mov	r5, r0
 801ea72:	7823      	ldrb	r3, [r4, #0]
 801ea74:	f3bf 8f5b 	dmb	ish
 801ea78:	07da      	lsls	r2, r3, #31
 801ea7a:	d40b      	bmi.n	801ea94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ea7c:	4620      	mov	r0, r4
 801ea7e:	f006 f8d8 	bl	8024c32 <__cxa_guard_acquire>
 801ea82:	b138      	cbz	r0, 801ea94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ea84:	4620      	mov	r0, r4
 801ea86:	f006 f8e0 	bl	8024c4a <__cxa_guard_release>
 801ea8a:	4a0f      	ldr	r2, [pc, #60]	@ (801eac8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ea8c:	490f      	ldr	r1, [pc, #60]	@ (801eacc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ea8e:	4810      	ldr	r0, [pc, #64]	@ (801ead0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ea90:	f006 f8c8 	bl	8024c24 <__aeabi_atexit>
 801ea94:	4c0f      	ldr	r4, [pc, #60]	@ (801ead4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ea96:	7823      	ldrb	r3, [r4, #0]
 801ea98:	f3bf 8f5b 	dmb	ish
 801ea9c:	07db      	lsls	r3, r3, #31
 801ea9e:	d40b      	bmi.n	801eab8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801eaa0:	4620      	mov	r0, r4
 801eaa2:	f006 f8c6 	bl	8024c32 <__cxa_guard_acquire>
 801eaa6:	b138      	cbz	r0, 801eab8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801eaa8:	4620      	mov	r0, r4
 801eaaa:	f006 f8ce 	bl	8024c4a <__cxa_guard_release>
 801eaae:	4a06      	ldr	r2, [pc, #24]	@ (801eac8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801eab0:	4909      	ldr	r1, [pc, #36]	@ (801ead8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801eab2:	480a      	ldr	r0, [pc, #40]	@ (801eadc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801eab4:	f006 f8b6 	bl	8024c24 <__aeabi_atexit>
 801eab8:	4b05      	ldr	r3, [pc, #20]	@ (801ead0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801eaba:	616b      	str	r3, [r5, #20]
 801eabc:	4b07      	ldr	r3, [pc, #28]	@ (801eadc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801eabe:	61ab      	str	r3, [r5, #24]
 801eac0:	bd38      	pop	{r3, r4, r5, pc}
 801eac2:	bf00      	nop
 801eac4:	24028f10 	.word	0x24028f10
 801eac8:	24000000 	.word	0x24000000
 801eacc:	0801bd5d 	.word	0x0801bd5d
 801ead0:	240000c8 	.word	0x240000c8
 801ead4:	24028f14 	.word	0x24028f14
 801ead8:	0801bd5b 	.word	0x0801bd5b
 801eadc:	240000cc 	.word	0x240000cc

0801eae0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801eae0:	b538      	push	{r3, r4, r5, lr}
 801eae2:	4c15      	ldr	r4, [pc, #84]	@ (801eb38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801eae4:	4605      	mov	r5, r0
 801eae6:	7823      	ldrb	r3, [r4, #0]
 801eae8:	f3bf 8f5b 	dmb	ish
 801eaec:	07da      	lsls	r2, r3, #31
 801eaee:	d40b      	bmi.n	801eb08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801eaf0:	4620      	mov	r0, r4
 801eaf2:	f006 f89e 	bl	8024c32 <__cxa_guard_acquire>
 801eaf6:	b138      	cbz	r0, 801eb08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801eaf8:	4620      	mov	r0, r4
 801eafa:	f006 f8a6 	bl	8024c4a <__cxa_guard_release>
 801eafe:	4a0f      	ldr	r2, [pc, #60]	@ (801eb3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801eb00:	490f      	ldr	r1, [pc, #60]	@ (801eb40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801eb02:	4810      	ldr	r0, [pc, #64]	@ (801eb44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801eb04:	f006 f88e 	bl	8024c24 <__aeabi_atexit>
 801eb08:	4c0f      	ldr	r4, [pc, #60]	@ (801eb48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801eb0a:	7823      	ldrb	r3, [r4, #0]
 801eb0c:	f3bf 8f5b 	dmb	ish
 801eb10:	07db      	lsls	r3, r3, #31
 801eb12:	d40b      	bmi.n	801eb2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801eb14:	4620      	mov	r0, r4
 801eb16:	f006 f88c 	bl	8024c32 <__cxa_guard_acquire>
 801eb1a:	b138      	cbz	r0, 801eb2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801eb1c:	4620      	mov	r0, r4
 801eb1e:	f006 f894 	bl	8024c4a <__cxa_guard_release>
 801eb22:	4a06      	ldr	r2, [pc, #24]	@ (801eb3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801eb24:	4909      	ldr	r1, [pc, #36]	@ (801eb4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801eb26:	480a      	ldr	r0, [pc, #40]	@ (801eb50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801eb28:	f006 f87c 	bl	8024c24 <__aeabi_atexit>
 801eb2c:	4b05      	ldr	r3, [pc, #20]	@ (801eb44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801eb2e:	60eb      	str	r3, [r5, #12]
 801eb30:	4b07      	ldr	r3, [pc, #28]	@ (801eb50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801eb32:	612b      	str	r3, [r5, #16]
 801eb34:	bd38      	pop	{r3, r4, r5, pc}
 801eb36:	bf00      	nop
 801eb38:	24028ef0 	.word	0x24028ef0
 801eb3c:	24000000 	.word	0x24000000
 801eb40:	0801bd61 	.word	0x0801bd61
 801eb44:	240000a8 	.word	0x240000a8
 801eb48:	24028ef4 	.word	0x24028ef4
 801eb4c:	0801bd5f 	.word	0x0801bd5f
 801eb50:	240000ac 	.word	0x240000ac

0801eb54 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801eb54:	b510      	push	{r4, lr}
 801eb56:	4604      	mov	r4, r0
 801eb58:	f7ff ff88 	bl	801ea6c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801eb5c:	4620      	mov	r0, r4
 801eb5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb62:	f7ff bfbd 	b.w	801eae0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801eb68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801eb68:	b538      	push	{r3, r4, r5, lr}
 801eb6a:	4c15      	ldr	r4, [pc, #84]	@ (801ebc0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801eb6c:	4605      	mov	r5, r0
 801eb6e:	7823      	ldrb	r3, [r4, #0]
 801eb70:	f3bf 8f5b 	dmb	ish
 801eb74:	07da      	lsls	r2, r3, #31
 801eb76:	d40b      	bmi.n	801eb90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801eb78:	4620      	mov	r0, r4
 801eb7a:	f006 f85a 	bl	8024c32 <__cxa_guard_acquire>
 801eb7e:	b138      	cbz	r0, 801eb90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801eb80:	4620      	mov	r0, r4
 801eb82:	f006 f862 	bl	8024c4a <__cxa_guard_release>
 801eb86:	4a0f      	ldr	r2, [pc, #60]	@ (801ebc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801eb88:	490f      	ldr	r1, [pc, #60]	@ (801ebc8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801eb8a:	4810      	ldr	r0, [pc, #64]	@ (801ebcc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801eb8c:	f006 f84a 	bl	8024c24 <__aeabi_atexit>
 801eb90:	4c0f      	ldr	r4, [pc, #60]	@ (801ebd0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801eb92:	7823      	ldrb	r3, [r4, #0]
 801eb94:	f3bf 8f5b 	dmb	ish
 801eb98:	07db      	lsls	r3, r3, #31
 801eb9a:	d40b      	bmi.n	801ebb4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801eb9c:	4620      	mov	r0, r4
 801eb9e:	f006 f848 	bl	8024c32 <__cxa_guard_acquire>
 801eba2:	b138      	cbz	r0, 801ebb4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801eba4:	4620      	mov	r0, r4
 801eba6:	f006 f850 	bl	8024c4a <__cxa_guard_release>
 801ebaa:	4a06      	ldr	r2, [pc, #24]	@ (801ebc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ebac:	4909      	ldr	r1, [pc, #36]	@ (801ebd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ebae:	480a      	ldr	r0, [pc, #40]	@ (801ebd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ebb0:	f006 f838 	bl	8024c24 <__aeabi_atexit>
 801ebb4:	4b05      	ldr	r3, [pc, #20]	@ (801ebcc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ebb6:	626b      	str	r3, [r5, #36]	@ 0x24
 801ebb8:	4b07      	ldr	r3, [pc, #28]	@ (801ebd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ebba:	62ab      	str	r3, [r5, #40]	@ 0x28
 801ebbc:	bd38      	pop	{r3, r4, r5, pc}
 801ebbe:	bf00      	nop
 801ebc0:	24028f18 	.word	0x24028f18
 801ebc4:	24000000 	.word	0x24000000
 801ebc8:	0801bd55 	.word	0x0801bd55
 801ebcc:	240000d0 	.word	0x240000d0
 801ebd0:	24028f1c 	.word	0x24028f1c
 801ebd4:	0801bd53 	.word	0x0801bd53
 801ebd8:	240000d4 	.word	0x240000d4

0801ebdc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ebdc:	b538      	push	{r3, r4, r5, lr}
 801ebde:	4c15      	ldr	r4, [pc, #84]	@ (801ec34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ebe0:	4605      	mov	r5, r0
 801ebe2:	7823      	ldrb	r3, [r4, #0]
 801ebe4:	f3bf 8f5b 	dmb	ish
 801ebe8:	07da      	lsls	r2, r3, #31
 801ebea:	d40b      	bmi.n	801ec04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ebec:	4620      	mov	r0, r4
 801ebee:	f006 f820 	bl	8024c32 <__cxa_guard_acquire>
 801ebf2:	b138      	cbz	r0, 801ec04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ebf4:	4620      	mov	r0, r4
 801ebf6:	f006 f828 	bl	8024c4a <__cxa_guard_release>
 801ebfa:	4a0f      	ldr	r2, [pc, #60]	@ (801ec38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ebfc:	490f      	ldr	r1, [pc, #60]	@ (801ec3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ebfe:	4810      	ldr	r0, [pc, #64]	@ (801ec40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ec00:	f006 f810 	bl	8024c24 <__aeabi_atexit>
 801ec04:	4c0f      	ldr	r4, [pc, #60]	@ (801ec44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ec06:	7823      	ldrb	r3, [r4, #0]
 801ec08:	f3bf 8f5b 	dmb	ish
 801ec0c:	07db      	lsls	r3, r3, #31
 801ec0e:	d40b      	bmi.n	801ec28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ec10:	4620      	mov	r0, r4
 801ec12:	f006 f80e 	bl	8024c32 <__cxa_guard_acquire>
 801ec16:	b138      	cbz	r0, 801ec28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ec18:	4620      	mov	r0, r4
 801ec1a:	f006 f816 	bl	8024c4a <__cxa_guard_release>
 801ec1e:	4a06      	ldr	r2, [pc, #24]	@ (801ec38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ec20:	4909      	ldr	r1, [pc, #36]	@ (801ec48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801ec22:	480a      	ldr	r0, [pc, #40]	@ (801ec4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ec24:	f005 fffe 	bl	8024c24 <__aeabi_atexit>
 801ec28:	4b05      	ldr	r3, [pc, #20]	@ (801ec40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ec2a:	61eb      	str	r3, [r5, #28]
 801ec2c:	4b07      	ldr	r3, [pc, #28]	@ (801ec4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ec2e:	622b      	str	r3, [r5, #32]
 801ec30:	bd38      	pop	{r3, r4, r5, pc}
 801ec32:	bf00      	nop
 801ec34:	24028ef8 	.word	0x24028ef8
 801ec38:	24000000 	.word	0x24000000
 801ec3c:	0801bd59 	.word	0x0801bd59
 801ec40:	240000b0 	.word	0x240000b0
 801ec44:	24028efc 	.word	0x24028efc
 801ec48:	0801bd57 	.word	0x0801bd57
 801ec4c:	240000b4 	.word	0x240000b4

0801ec50 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801ec50:	b510      	push	{r4, lr}
 801ec52:	4604      	mov	r4, r0
 801ec54:	f7ff ff88 	bl	801eb68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801ec58:	4620      	mov	r0, r4
 801ec5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec5e:	f7ff bfbd 	b.w	801ebdc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801ec64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801ec64:	b538      	push	{r3, r4, r5, lr}
 801ec66:	4c15      	ldr	r4, [pc, #84]	@ (801ecbc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801ec68:	4605      	mov	r5, r0
 801ec6a:	7823      	ldrb	r3, [r4, #0]
 801ec6c:	f3bf 8f5b 	dmb	ish
 801ec70:	07da      	lsls	r2, r3, #31
 801ec72:	d40b      	bmi.n	801ec8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801ec74:	4620      	mov	r0, r4
 801ec76:	f005 ffdc 	bl	8024c32 <__cxa_guard_acquire>
 801ec7a:	b138      	cbz	r0, 801ec8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801ec7c:	4620      	mov	r0, r4
 801ec7e:	f005 ffe4 	bl	8024c4a <__cxa_guard_release>
 801ec82:	4a0f      	ldr	r2, [pc, #60]	@ (801ecc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801ec84:	490f      	ldr	r1, [pc, #60]	@ (801ecc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801ec86:	4810      	ldr	r0, [pc, #64]	@ (801ecc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801ec88:	f005 ffcc 	bl	8024c24 <__aeabi_atexit>
 801ec8c:	4c0f      	ldr	r4, [pc, #60]	@ (801eccc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801ec8e:	7823      	ldrb	r3, [r4, #0]
 801ec90:	f3bf 8f5b 	dmb	ish
 801ec94:	07db      	lsls	r3, r3, #31
 801ec96:	d40b      	bmi.n	801ecb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801ec98:	4620      	mov	r0, r4
 801ec9a:	f005 ffca 	bl	8024c32 <__cxa_guard_acquire>
 801ec9e:	b138      	cbz	r0, 801ecb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801eca0:	4620      	mov	r0, r4
 801eca2:	f005 ffd2 	bl	8024c4a <__cxa_guard_release>
 801eca6:	4a06      	ldr	r2, [pc, #24]	@ (801ecc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801eca8:	4909      	ldr	r1, [pc, #36]	@ (801ecd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801ecaa:	480a      	ldr	r0, [pc, #40]	@ (801ecd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ecac:	f005 ffba 	bl	8024c24 <__aeabi_atexit>
 801ecb0:	4b05      	ldr	r3, [pc, #20]	@ (801ecc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801ecb2:	636b      	str	r3, [r5, #52]	@ 0x34
 801ecb4:	4b07      	ldr	r3, [pc, #28]	@ (801ecd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ecb6:	63ab      	str	r3, [r5, #56]	@ 0x38
 801ecb8:	bd38      	pop	{r3, r4, r5, pc}
 801ecba:	bf00      	nop
 801ecbc:	24028f00 	.word	0x24028f00
 801ecc0:	24000000 	.word	0x24000000
 801ecc4:	0801bd4d 	.word	0x0801bd4d
 801ecc8:	240000b8 	.word	0x240000b8
 801eccc:	24028f04 	.word	0x24028f04
 801ecd0:	0801bd4b 	.word	0x0801bd4b
 801ecd4:	240000bc 	.word	0x240000bc

0801ecd8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801ecd8:	b538      	push	{r3, r4, r5, lr}
 801ecda:	4c15      	ldr	r4, [pc, #84]	@ (801ed30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801ecdc:	4605      	mov	r5, r0
 801ecde:	7823      	ldrb	r3, [r4, #0]
 801ece0:	f3bf 8f5b 	dmb	ish
 801ece4:	07da      	lsls	r2, r3, #31
 801ece6:	d40b      	bmi.n	801ed00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ece8:	4620      	mov	r0, r4
 801ecea:	f005 ffa2 	bl	8024c32 <__cxa_guard_acquire>
 801ecee:	b138      	cbz	r0, 801ed00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ecf0:	4620      	mov	r0, r4
 801ecf2:	f005 ffaa 	bl	8024c4a <__cxa_guard_release>
 801ecf6:	4a0f      	ldr	r2, [pc, #60]	@ (801ed34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ecf8:	490f      	ldr	r1, [pc, #60]	@ (801ed38 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801ecfa:	4810      	ldr	r0, [pc, #64]	@ (801ed3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ecfc:	f005 ff92 	bl	8024c24 <__aeabi_atexit>
 801ed00:	4c0f      	ldr	r4, [pc, #60]	@ (801ed40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801ed02:	7823      	ldrb	r3, [r4, #0]
 801ed04:	f3bf 8f5b 	dmb	ish
 801ed08:	07db      	lsls	r3, r3, #31
 801ed0a:	d40b      	bmi.n	801ed24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ed0c:	4620      	mov	r0, r4
 801ed0e:	f005 ff90 	bl	8024c32 <__cxa_guard_acquire>
 801ed12:	b138      	cbz	r0, 801ed24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ed14:	4620      	mov	r0, r4
 801ed16:	f005 ff98 	bl	8024c4a <__cxa_guard_release>
 801ed1a:	4a06      	ldr	r2, [pc, #24]	@ (801ed34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ed1c:	4909      	ldr	r1, [pc, #36]	@ (801ed44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801ed1e:	480a      	ldr	r0, [pc, #40]	@ (801ed48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ed20:	f005 ff80 	bl	8024c24 <__aeabi_atexit>
 801ed24:	4b05      	ldr	r3, [pc, #20]	@ (801ed3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ed26:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801ed28:	4b07      	ldr	r3, [pc, #28]	@ (801ed48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ed2a:	632b      	str	r3, [r5, #48]	@ 0x30
 801ed2c:	bd38      	pop	{r3, r4, r5, pc}
 801ed2e:	bf00      	nop
 801ed30:	24028ed8 	.word	0x24028ed8
 801ed34:	24000000 	.word	0x24000000
 801ed38:	0801bd51 	.word	0x0801bd51
 801ed3c:	24000090 	.word	0x24000090
 801ed40:	24028edc 	.word	0x24028edc
 801ed44:	0801bd4f 	.word	0x0801bd4f
 801ed48:	24000094 	.word	0x24000094

0801ed4c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801ed4c:	b510      	push	{r4, lr}
 801ed4e:	4604      	mov	r4, r0
 801ed50:	f7ff ff88 	bl	801ec64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801ed54:	4620      	mov	r0, r4
 801ed56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed5a:	f7ff bfbd 	b.w	801ecd8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801ed60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ed60:	b538      	push	{r3, r4, r5, lr}
 801ed62:	4c15      	ldr	r4, [pc, #84]	@ (801edb8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ed64:	4605      	mov	r5, r0
 801ed66:	7823      	ldrb	r3, [r4, #0]
 801ed68:	f3bf 8f5b 	dmb	ish
 801ed6c:	07da      	lsls	r2, r3, #31
 801ed6e:	d40b      	bmi.n	801ed88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ed70:	4620      	mov	r0, r4
 801ed72:	f005 ff5e 	bl	8024c32 <__cxa_guard_acquire>
 801ed76:	b138      	cbz	r0, 801ed88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ed78:	4620      	mov	r0, r4
 801ed7a:	f005 ff66 	bl	8024c4a <__cxa_guard_release>
 801ed7e:	4a0f      	ldr	r2, [pc, #60]	@ (801edbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ed80:	490f      	ldr	r1, [pc, #60]	@ (801edc0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ed82:	4810      	ldr	r0, [pc, #64]	@ (801edc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ed84:	f005 ff4e 	bl	8024c24 <__aeabi_atexit>
 801ed88:	4c0f      	ldr	r4, [pc, #60]	@ (801edc8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801ed8a:	7823      	ldrb	r3, [r4, #0]
 801ed8c:	f3bf 8f5b 	dmb	ish
 801ed90:	07db      	lsls	r3, r3, #31
 801ed92:	d40b      	bmi.n	801edac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ed94:	4620      	mov	r0, r4
 801ed96:	f005 ff4c 	bl	8024c32 <__cxa_guard_acquire>
 801ed9a:	b138      	cbz	r0, 801edac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ed9c:	4620      	mov	r0, r4
 801ed9e:	f005 ff54 	bl	8024c4a <__cxa_guard_release>
 801eda2:	4a06      	ldr	r2, [pc, #24]	@ (801edbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801eda4:	4909      	ldr	r1, [pc, #36]	@ (801edcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801eda6:	480a      	ldr	r0, [pc, #40]	@ (801edd0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801eda8:	f005 ff3c 	bl	8024c24 <__aeabi_atexit>
 801edac:	4b05      	ldr	r3, [pc, #20]	@ (801edc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801edae:	646b      	str	r3, [r5, #68]	@ 0x44
 801edb0:	4b07      	ldr	r3, [pc, #28]	@ (801edd0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801edb2:	64ab      	str	r3, [r5, #72]	@ 0x48
 801edb4:	bd38      	pop	{r3, r4, r5, pc}
 801edb6:	bf00      	nop
 801edb8:	24028f08 	.word	0x24028f08
 801edbc:	24000000 	.word	0x24000000
 801edc0:	0801bd45 	.word	0x0801bd45
 801edc4:	240000c0 	.word	0x240000c0
 801edc8:	24028f0c 	.word	0x24028f0c
 801edcc:	0801bd43 	.word	0x0801bd43
 801edd0:	240000c4 	.word	0x240000c4

0801edd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801edd4:	b538      	push	{r3, r4, r5, lr}
 801edd6:	4c15      	ldr	r4, [pc, #84]	@ (801ee2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801edd8:	4605      	mov	r5, r0
 801edda:	7823      	ldrb	r3, [r4, #0]
 801eddc:	f3bf 8f5b 	dmb	ish
 801ede0:	07da      	lsls	r2, r3, #31
 801ede2:	d40b      	bmi.n	801edfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ede4:	4620      	mov	r0, r4
 801ede6:	f005 ff24 	bl	8024c32 <__cxa_guard_acquire>
 801edea:	b138      	cbz	r0, 801edfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801edec:	4620      	mov	r0, r4
 801edee:	f005 ff2c 	bl	8024c4a <__cxa_guard_release>
 801edf2:	4a0f      	ldr	r2, [pc, #60]	@ (801ee30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801edf4:	490f      	ldr	r1, [pc, #60]	@ (801ee34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801edf6:	4810      	ldr	r0, [pc, #64]	@ (801ee38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801edf8:	f005 ff14 	bl	8024c24 <__aeabi_atexit>
 801edfc:	4c0f      	ldr	r4, [pc, #60]	@ (801ee3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801edfe:	7823      	ldrb	r3, [r4, #0]
 801ee00:	f3bf 8f5b 	dmb	ish
 801ee04:	07db      	lsls	r3, r3, #31
 801ee06:	d40b      	bmi.n	801ee20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ee08:	4620      	mov	r0, r4
 801ee0a:	f005 ff12 	bl	8024c32 <__cxa_guard_acquire>
 801ee0e:	b138      	cbz	r0, 801ee20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ee10:	4620      	mov	r0, r4
 801ee12:	f005 ff1a 	bl	8024c4a <__cxa_guard_release>
 801ee16:	4a06      	ldr	r2, [pc, #24]	@ (801ee30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ee18:	4909      	ldr	r1, [pc, #36]	@ (801ee40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ee1a:	480a      	ldr	r0, [pc, #40]	@ (801ee44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ee1c:	f005 ff02 	bl	8024c24 <__aeabi_atexit>
 801ee20:	4b05      	ldr	r3, [pc, #20]	@ (801ee38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ee22:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801ee24:	4b07      	ldr	r3, [pc, #28]	@ (801ee44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ee26:	642b      	str	r3, [r5, #64]	@ 0x40
 801ee28:	bd38      	pop	{r3, r4, r5, pc}
 801ee2a:	bf00      	nop
 801ee2c:	24028ee8 	.word	0x24028ee8
 801ee30:	24000000 	.word	0x24000000
 801ee34:	0801bd49 	.word	0x0801bd49
 801ee38:	240000a0 	.word	0x240000a0
 801ee3c:	24028eec 	.word	0x24028eec
 801ee40:	0801bd47 	.word	0x0801bd47
 801ee44:	240000a4 	.word	0x240000a4

0801ee48 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ee48:	b510      	push	{r4, lr}
 801ee4a:	4604      	mov	r4, r0
 801ee4c:	f7ff ff88 	bl	801ed60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ee50:	4620      	mov	r0, r4
 801ee52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee56:	f7ff bfbd 	b.w	801edd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ee5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ee5c:	b538      	push	{r3, r4, r5, lr}
 801ee5e:	4c15      	ldr	r4, [pc, #84]	@ (801eeb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ee60:	4605      	mov	r5, r0
 801ee62:	7823      	ldrb	r3, [r4, #0]
 801ee64:	f3bf 8f5b 	dmb	ish
 801ee68:	07da      	lsls	r2, r3, #31
 801ee6a:	d40b      	bmi.n	801ee84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	f005 fee0 	bl	8024c32 <__cxa_guard_acquire>
 801ee72:	b138      	cbz	r0, 801ee84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ee74:	4620      	mov	r0, r4
 801ee76:	f005 fee8 	bl	8024c4a <__cxa_guard_release>
 801ee7a:	4a0f      	ldr	r2, [pc, #60]	@ (801eeb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ee7c:	490f      	ldr	r1, [pc, #60]	@ (801eebc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ee7e:	4810      	ldr	r0, [pc, #64]	@ (801eec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ee80:	f005 fed0 	bl	8024c24 <__aeabi_atexit>
 801ee84:	4c0f      	ldr	r4, [pc, #60]	@ (801eec4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ee86:	7823      	ldrb	r3, [r4, #0]
 801ee88:	f3bf 8f5b 	dmb	ish
 801ee8c:	07db      	lsls	r3, r3, #31
 801ee8e:	d40b      	bmi.n	801eea8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ee90:	4620      	mov	r0, r4
 801ee92:	f005 fece 	bl	8024c32 <__cxa_guard_acquire>
 801ee96:	b138      	cbz	r0, 801eea8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ee98:	4620      	mov	r0, r4
 801ee9a:	f005 fed6 	bl	8024c4a <__cxa_guard_release>
 801ee9e:	4a06      	ldr	r2, [pc, #24]	@ (801eeb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801eea0:	4909      	ldr	r1, [pc, #36]	@ (801eec8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801eea2:	480a      	ldr	r0, [pc, #40]	@ (801eecc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801eea4:	f005 febe 	bl	8024c24 <__aeabi_atexit>
 801eea8:	4b05      	ldr	r3, [pc, #20]	@ (801eec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801eeaa:	656b      	str	r3, [r5, #84]	@ 0x54
 801eeac:	4b07      	ldr	r3, [pc, #28]	@ (801eecc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801eeae:	65ab      	str	r3, [r5, #88]	@ 0x58
 801eeb0:	bd38      	pop	{r3, r4, r5, pc}
 801eeb2:	bf00      	nop
 801eeb4:	24028ee0 	.word	0x24028ee0
 801eeb8:	24000000 	.word	0x24000000
 801eebc:	0801bd3d 	.word	0x0801bd3d
 801eec0:	24000098 	.word	0x24000098
 801eec4:	24028ee4 	.word	0x24028ee4
 801eec8:	0801bd3b 	.word	0x0801bd3b
 801eecc:	2400009c 	.word	0x2400009c

0801eed0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801eed0:	b538      	push	{r3, r4, r5, lr}
 801eed2:	4c15      	ldr	r4, [pc, #84]	@ (801ef28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801eed4:	4605      	mov	r5, r0
 801eed6:	7823      	ldrb	r3, [r4, #0]
 801eed8:	f3bf 8f5b 	dmb	ish
 801eedc:	07da      	lsls	r2, r3, #31
 801eede:	d40b      	bmi.n	801eef8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801eee0:	4620      	mov	r0, r4
 801eee2:	f005 fea6 	bl	8024c32 <__cxa_guard_acquire>
 801eee6:	b138      	cbz	r0, 801eef8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801eee8:	4620      	mov	r0, r4
 801eeea:	f005 feae 	bl	8024c4a <__cxa_guard_release>
 801eeee:	4a0f      	ldr	r2, [pc, #60]	@ (801ef2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801eef0:	490f      	ldr	r1, [pc, #60]	@ (801ef30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801eef2:	4810      	ldr	r0, [pc, #64]	@ (801ef34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801eef4:	f005 fe96 	bl	8024c24 <__aeabi_atexit>
 801eef8:	4c0f      	ldr	r4, [pc, #60]	@ (801ef38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801eefa:	7823      	ldrb	r3, [r4, #0]
 801eefc:	f3bf 8f5b 	dmb	ish
 801ef00:	07db      	lsls	r3, r3, #31
 801ef02:	d40b      	bmi.n	801ef1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ef04:	4620      	mov	r0, r4
 801ef06:	f005 fe94 	bl	8024c32 <__cxa_guard_acquire>
 801ef0a:	b138      	cbz	r0, 801ef1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ef0c:	4620      	mov	r0, r4
 801ef0e:	f005 fe9c 	bl	8024c4a <__cxa_guard_release>
 801ef12:	4a06      	ldr	r2, [pc, #24]	@ (801ef2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ef14:	4909      	ldr	r1, [pc, #36]	@ (801ef3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ef16:	480a      	ldr	r0, [pc, #40]	@ (801ef40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ef18:	f005 fe84 	bl	8024c24 <__aeabi_atexit>
 801ef1c:	4b05      	ldr	r3, [pc, #20]	@ (801ef34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ef1e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801ef20:	4b07      	ldr	r3, [pc, #28]	@ (801ef40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ef22:	652b      	str	r3, [r5, #80]	@ 0x50
 801ef24:	bd38      	pop	{r3, r4, r5, pc}
 801ef26:	bf00      	nop
 801ef28:	24028ed0 	.word	0x24028ed0
 801ef2c:	24000000 	.word	0x24000000
 801ef30:	0801bd41 	.word	0x0801bd41
 801ef34:	24000088 	.word	0x24000088
 801ef38:	24028ed4 	.word	0x24028ed4
 801ef3c:	0801bd3f 	.word	0x0801bd3f
 801ef40:	2400008c 	.word	0x2400008c

0801ef44 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801ef44:	b510      	push	{r4, lr}
 801ef46:	4604      	mov	r4, r0
 801ef48:	f7ff ff88 	bl	801ee5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef52:	f7ff bfbd 	b.w	801eed0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801ef56 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801ef56:	b510      	push	{r4, lr}
 801ef58:	4604      	mov	r4, r0
 801ef5a:	f7ff fff3 	bl	801ef44 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801ef5e:	4620      	mov	r0, r4
 801ef60:	f7ff ff72 	bl	801ee48 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801ef64:	4620      	mov	r0, r4
 801ef66:	f7ff fe73 	bl	801ec50 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801ef6a:	4620      	mov	r0, r4
 801ef6c:	f7ff fdf2 	bl	801eb54 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801ef70:	4620      	mov	r0, r4
 801ef72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef76:	f7ff bee9 	b.w	801ed4c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801ef7c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801ef7c:	b538      	push	{r3, r4, r5, lr}
 801ef7e:	4c0b      	ldr	r4, [pc, #44]	@ (801efac <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801ef80:	4605      	mov	r5, r0
 801ef82:	7823      	ldrb	r3, [r4, #0]
 801ef84:	f3bf 8f5b 	dmb	ish
 801ef88:	07db      	lsls	r3, r3, #31
 801ef8a:	d40b      	bmi.n	801efa4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801ef8c:	4620      	mov	r0, r4
 801ef8e:	f005 fe50 	bl	8024c32 <__cxa_guard_acquire>
 801ef92:	b138      	cbz	r0, 801efa4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801ef94:	4620      	mov	r0, r4
 801ef96:	f005 fe58 	bl	8024c4a <__cxa_guard_release>
 801ef9a:	4a05      	ldr	r2, [pc, #20]	@ (801efb0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801ef9c:	4905      	ldr	r1, [pc, #20]	@ (801efb4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801ef9e:	4806      	ldr	r0, [pc, #24]	@ (801efb8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801efa0:	f005 fe40 	bl	8024c24 <__aeabi_atexit>
 801efa4:	4b04      	ldr	r3, [pc, #16]	@ (801efb8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801efa6:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801efa8:	bd38      	pop	{r3, r4, r5, pc}
 801efaa:	bf00      	nop
 801efac:	24028ec4 	.word	0x24028ec4
 801efb0:	24000000 	.word	0x24000000
 801efb4:	0801bd39 	.word	0x0801bd39
 801efb8:	24000080 	.word	0x24000080

0801efbc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801efbc:	b538      	push	{r3, r4, r5, lr}
 801efbe:	4c0b      	ldr	r4, [pc, #44]	@ (801efec <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801efc0:	4605      	mov	r5, r0
 801efc2:	7823      	ldrb	r3, [r4, #0]
 801efc4:	f3bf 8f5b 	dmb	ish
 801efc8:	07db      	lsls	r3, r3, #31
 801efca:	d40b      	bmi.n	801efe4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801efcc:	4620      	mov	r0, r4
 801efce:	f005 fe30 	bl	8024c32 <__cxa_guard_acquire>
 801efd2:	b138      	cbz	r0, 801efe4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801efd4:	4620      	mov	r0, r4
 801efd6:	f005 fe38 	bl	8024c4a <__cxa_guard_release>
 801efda:	4a05      	ldr	r2, [pc, #20]	@ (801eff0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801efdc:	4905      	ldr	r1, [pc, #20]	@ (801eff4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801efde:	4806      	ldr	r0, [pc, #24]	@ (801eff8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801efe0:	f005 fe20 	bl	8024c24 <__aeabi_atexit>
 801efe4:	4b04      	ldr	r3, [pc, #16]	@ (801eff8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801efe6:	662b      	str	r3, [r5, #96]	@ 0x60
 801efe8:	bd38      	pop	{r3, r4, r5, pc}
 801efea:	bf00      	nop
 801efec:	24028ec8 	.word	0x24028ec8
 801eff0:	24000000 	.word	0x24000000
 801eff4:	0801bd37 	.word	0x0801bd37
 801eff8:	24000084 	.word	0x24000084

0801effc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801effc:	b570      	push	{r4, r5, r6, lr}
 801effe:	4d0c      	ldr	r5, [pc, #48]	@ (801f030 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801f000:	4606      	mov	r6, r0
 801f002:	4c0c      	ldr	r4, [pc, #48]	@ (801f034 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801f004:	782b      	ldrb	r3, [r5, #0]
 801f006:	f3bf 8f5b 	dmb	ish
 801f00a:	f013 0f01 	tst.w	r3, #1
 801f00e:	d10d      	bne.n	801f02c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801f010:	4628      	mov	r0, r5
 801f012:	f005 fe0e 	bl	8024c32 <__cxa_guard_acquire>
 801f016:	b148      	cbz	r0, 801f02c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801f018:	4b07      	ldr	r3, [pc, #28]	@ (801f038 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801f01a:	4628      	mov	r0, r5
 801f01c:	6023      	str	r3, [r4, #0]
 801f01e:	f005 fe14 	bl	8024c4a <__cxa_guard_release>
 801f022:	4a06      	ldr	r2, [pc, #24]	@ (801f03c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801f024:	4620      	mov	r0, r4
 801f026:	4906      	ldr	r1, [pc, #24]	@ (801f040 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801f028:	f005 fdfc 	bl	8024c24 <__aeabi_atexit>
 801f02c:	6674      	str	r4, [r6, #100]	@ 0x64
 801f02e:	bd70      	pop	{r4, r5, r6, pc}
 801f030:	24028ecc 	.word	0x24028ecc
 801f034:	24029024 	.word	0x24029024
 801f038:	080297ec 	.word	0x080297ec
 801f03c:	24000000 	.word	0x24000000
 801f040:	0801bd35 	.word	0x0801bd35

0801f044 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801f044:	b510      	push	{r4, lr}
 801f046:	4604      	mov	r4, r0
 801f048:	f7ff ff98 	bl	801ef7c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801f04c:	4620      	mov	r0, r4
 801f04e:	f7ff ffb5 	bl	801efbc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801f052:	4620      	mov	r0, r4
 801f054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f058:	f7ff bfd0 	b.w	801effc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801f05c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801f05c:	b570      	push	{r4, r5, r6, lr}
 801f05e:	4d0c      	ldr	r5, [pc, #48]	@ (801f090 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801f060:	4606      	mov	r6, r0
 801f062:	4c0c      	ldr	r4, [pc, #48]	@ (801f094 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801f064:	782b      	ldrb	r3, [r5, #0]
 801f066:	f3bf 8f5b 	dmb	ish
 801f06a:	f013 0f01 	tst.w	r3, #1
 801f06e:	d10d      	bne.n	801f08c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801f070:	4628      	mov	r0, r5
 801f072:	f005 fdde 	bl	8024c32 <__cxa_guard_acquire>
 801f076:	b148      	cbz	r0, 801f08c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801f078:	4b07      	ldr	r3, [pc, #28]	@ (801f098 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801f07a:	4628      	mov	r0, r5
 801f07c:	6023      	str	r3, [r4, #0]
 801f07e:	f005 fde4 	bl	8024c4a <__cxa_guard_release>
 801f082:	4a06      	ldr	r2, [pc, #24]	@ (801f09c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801f084:	4620      	mov	r0, r4
 801f086:	4906      	ldr	r1, [pc, #24]	@ (801f0a0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801f088:	f005 fdcc 	bl	8024c24 <__aeabi_atexit>
 801f08c:	66b4      	str	r4, [r6, #104]	@ 0x68
 801f08e:	bd70      	pop	{r4, r5, r6, pc}
 801f090:	24028ec0 	.word	0x24028ec0
 801f094:	24028f20 	.word	0x24028f20
 801f098:	08029804 	.word	0x08029804
 801f09c:	24000000 	.word	0x24000000
 801f0a0:	0801bd33 	.word	0x0801bd33

0801f0a4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0a8:	b087      	sub	sp, #28
 801f0aa:	788d      	ldrb	r5, [r1, #2]
 801f0ac:	f891 9000 	ldrb.w	r9, [r1]
 801f0b0:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801f0b4:	9501      	str	r5, [sp, #4]
 801f0b6:	784d      	ldrb	r5, [r1, #1]
 801f0b8:	9203      	str	r2, [sp, #12]
 801f0ba:	9502      	str	r5, [sp, #8]
 801f0bc:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801f0c0:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801f0c4:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801f0c8:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801f0cc:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801f0d0:	fb06 0708 	mla	r7, r6, r8, r0
 801f0d4:	2e00      	cmp	r6, #0
 801f0d6:	eb02 0a07 	add.w	sl, r2, r7
 801f0da:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801f0de:	9d01      	ldr	r5, [sp, #4]
 801f0e0:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801f0e4:	ea45 0509 	orr.w	r5, r5, r9
 801f0e8:	9505      	str	r5, [sp, #20]
 801f0ea:	f2c0 80b2 	blt.w	801f252 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801f0ee:	45b3      	cmp	fp, r6
 801f0f0:	f340 80af 	ble.w	801f252 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801f0f4:	2800      	cmp	r0, #0
 801f0f6:	f2c0 80aa 	blt.w	801f24e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801f0fa:	4580      	cmp	r8, r0
 801f0fc:	f340 80a7 	ble.w	801f24e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801f100:	9a03      	ldr	r2, [sp, #12]
 801f102:	5dd7      	ldrb	r7, [r2, r7]
 801f104:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f108:	441f      	add	r7, r3
 801f10a:	1c42      	adds	r2, r0, #1
 801f10c:	f100 80a4 	bmi.w	801f258 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801f110:	4590      	cmp	r8, r2
 801f112:	f340 80a1 	ble.w	801f258 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801f116:	2c00      	cmp	r4, #0
 801f118:	f000 809e 	beq.w	801f258 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801f11c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801f120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f124:	441d      	add	r5, r3
 801f126:	3601      	adds	r6, #1
 801f128:	f100 809a 	bmi.w	801f260 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801f12c:	45b3      	cmp	fp, r6
 801f12e:	f340 8097 	ble.w	801f260 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801f132:	f1bc 0f00 	cmp.w	ip, #0
 801f136:	f000 8093 	beq.w	801f260 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801f13a:	2800      	cmp	r0, #0
 801f13c:	f2c0 808e 	blt.w	801f25c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801f140:	4580      	cmp	r8, r0
 801f142:	f340 808b 	ble.w	801f25c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801f146:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801f14a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f14e:	441e      	add	r6, r3
 801f150:	3001      	adds	r0, #1
 801f152:	f100 8088 	bmi.w	801f266 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f156:	4580      	cmp	r8, r0
 801f158:	f340 8085 	ble.w	801f266 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f15c:	2c00      	cmp	r4, #0
 801f15e:	f000 8082 	beq.w	801f266 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f162:	44d0      	add	r8, sl
 801f164:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f168:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f16c:	4413      	add	r3, r2
 801f16e:	b2a4      	uxth	r4, r4
 801f170:	f895 a000 	ldrb.w	sl, [r5]
 801f174:	fa1f fc8c 	uxth.w	ip, ip
 801f178:	fb04 fb0c 	mul.w	fp, r4, ip
 801f17c:	0124      	lsls	r4, r4, #4
 801f17e:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801f182:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801f186:	eba4 040b 	sub.w	r4, r4, fp
 801f18a:	fa1f f08c 	uxth.w	r0, ip
 801f18e:	b2a2      	uxth	r2, r4
 801f190:	783c      	ldrb	r4, [r7, #0]
 801f192:	eba8 0800 	sub.w	r8, r8, r0
 801f196:	fa1f fc8e 	uxth.w	ip, lr
 801f19a:	fb02 fa0a 	mul.w	sl, r2, sl
 801f19e:	ea6f 0e0e 	mvn.w	lr, lr
 801f1a2:	fa1f f888 	uxth.w	r8, r8
 801f1a6:	fa5f fe8e 	uxtb.w	lr, lr
 801f1aa:	fb08 aa04 	mla	sl, r8, r4, sl
 801f1ae:	7834      	ldrb	r4, [r6, #0]
 801f1b0:	fb19 f90e 	smulbb	r9, r9, lr
 801f1b4:	fb00 aa04 	mla	sl, r0, r4, sl
 801f1b8:	781c      	ldrb	r4, [r3, #0]
 801f1ba:	fb0b a404 	mla	r4, fp, r4, sl
 801f1be:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f1c2:	fb04 990c 	mla	r9, r4, ip, r9
 801f1c6:	fa1f f989 	uxth.w	r9, r9
 801f1ca:	f109 0401 	add.w	r4, r9, #1
 801f1ce:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f1d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f1d6:	f881 9000 	strb.w	r9, [r1]
 801f1da:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f1de:	787c      	ldrb	r4, [r7, #1]
 801f1e0:	fb02 f909 	mul.w	r9, r2, r9
 801f1e4:	fb08 9904 	mla	r9, r8, r4, r9
 801f1e8:	7874      	ldrb	r4, [r6, #1]
 801f1ea:	fb00 9904 	mla	r9, r0, r4, r9
 801f1ee:	785c      	ldrb	r4, [r3, #1]
 801f1f0:	fb0b 9404 	mla	r4, fp, r4, r9
 801f1f4:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801f1f8:	9c02      	ldr	r4, [sp, #8]
 801f1fa:	fb14 f90e 	smulbb	r9, r4, lr
 801f1fe:	fb0a 940c 	mla	r4, sl, ip, r9
 801f202:	b2a4      	uxth	r4, r4
 801f204:	f104 0901 	add.w	r9, r4, #1
 801f208:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801f20c:	1224      	asrs	r4, r4, #8
 801f20e:	704c      	strb	r4, [r1, #1]
 801f210:	78ad      	ldrb	r5, [r5, #2]
 801f212:	78bc      	ldrb	r4, [r7, #2]
 801f214:	436a      	muls	r2, r5
 801f216:	789b      	ldrb	r3, [r3, #2]
 801f218:	fb08 2204 	mla	r2, r8, r4, r2
 801f21c:	78b4      	ldrb	r4, [r6, #2]
 801f21e:	fb00 2004 	mla	r0, r0, r4, r2
 801f222:	fb0b 0b03 	mla	fp, fp, r3, r0
 801f226:	9b01      	ldr	r3, [sp, #4]
 801f228:	fb13 fe0e 	smulbb	lr, r3, lr
 801f22c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801f230:	fb0b ec0c 	mla	ip, fp, ip, lr
 801f234:	fa1f fc8c 	uxth.w	ip, ip
 801f238:	f10c 0e01 	add.w	lr, ip, #1
 801f23c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801f240:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f244:	f881 c002 	strb.w	ip, [r1, #2]
 801f248:	b007      	add	sp, #28
 801f24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f24e:	af05      	add	r7, sp, #20
 801f250:	e75b      	b.n	801f10a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801f252:	ad05      	add	r5, sp, #20
 801f254:	462f      	mov	r7, r5
 801f256:	e766      	b.n	801f126 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801f258:	ad05      	add	r5, sp, #20
 801f25a:	e764      	b.n	801f126 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801f25c:	ae05      	add	r6, sp, #20
 801f25e:	e777      	b.n	801f150 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801f260:	ab05      	add	r3, sp, #20
 801f262:	461e      	mov	r6, r3
 801f264:	e783      	b.n	801f16e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801f266:	ab05      	add	r3, sp, #20
 801f268:	e781      	b.n	801f16e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801f26a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f26a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f26e:	b093      	sub	sp, #76	@ 0x4c
 801f270:	9210      	str	r2, [sp, #64]	@ 0x40
 801f272:	9309      	str	r3, [sp, #36]	@ 0x24
 801f274:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f276:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801f27a:	9011      	str	r0, [sp, #68]	@ 0x44
 801f27c:	930e      	str	r3, [sp, #56]	@ 0x38
 801f27e:	6850      	ldr	r0, [r2, #4]
 801f280:	910d      	str	r1, [sp, #52]	@ 0x34
 801f282:	6812      	ldr	r2, [r2, #0]
 801f284:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801f288:	fb00 1303 	mla	r3, r0, r3, r1
 801f28c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f290:	18d3      	adds	r3, r2, r3
 801f292:	930a      	str	r3, [sp, #40]	@ 0x28
 801f294:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f296:	681b      	ldr	r3, [r3, #0]
 801f298:	930c      	str	r3, [sp, #48]	@ 0x30
 801f29a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f29c:	685c      	ldr	r4, [r3, #4]
 801f29e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2a0:	3404      	adds	r4, #4
 801f2a2:	43db      	mvns	r3, r3
 801f2a4:	b2db      	uxtb	r3, r3
 801f2a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f2a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	dc03      	bgt.n	801f2b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f2ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2b0:	2b00      	cmp	r3, #0
 801f2b2:	f340 8250 	ble.w	801f756 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801f2b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f2b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f2bc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f2c0:	1e48      	subs	r0, r1, #1
 801f2c2:	1e55      	subs	r5, r2, #1
 801f2c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2c6:	2b00      	cmp	r3, #0
 801f2c8:	f340 80ee 	ble.w	801f4a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801f2cc:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801f2ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f2d0:	1436      	asrs	r6, r6, #16
 801f2d2:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f2d6:	d406      	bmi.n	801f2e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f2d8:	4286      	cmp	r6, r0
 801f2da:	da04      	bge.n	801f2e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f2dc:	2b00      	cmp	r3, #0
 801f2de:	db02      	blt.n	801f2e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f2e0:	42ab      	cmp	r3, r5
 801f2e2:	f2c0 80e2 	blt.w	801f4aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f2e6:	3601      	adds	r6, #1
 801f2e8:	f100 80cf 	bmi.w	801f48a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f2ec:	42b1      	cmp	r1, r6
 801f2ee:	f2c0 80cc 	blt.w	801f48a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f2f2:	3301      	adds	r3, #1
 801f2f4:	f100 80c9 	bmi.w	801f48a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f2f8:	429a      	cmp	r2, r3
 801f2fa:	f2c0 80c6 	blt.w	801f48a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f2fe:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801f302:	f1bb 0f00 	cmp.w	fp, #0
 801f306:	f340 80f1 	ble.w	801f4ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801f30a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f30c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f30e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801f310:	141d      	asrs	r5, r3, #16
 801f312:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f314:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f318:	68c7      	ldr	r7, [r0, #12]
 801f31a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f31c:	1418      	asrs	r0, r3, #16
 801f31e:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801f322:	6892      	ldr	r2, [r2, #8]
 801f324:	f100 8137 	bmi.w	801f596 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f328:	f102 3cff 	add.w	ip, r2, #4294967295
 801f32c:	4560      	cmp	r0, ip
 801f32e:	f280 8132 	bge.w	801f596 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f332:	2d00      	cmp	r5, #0
 801f334:	f2c0 812f 	blt.w	801f596 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f338:	f107 3cff 	add.w	ip, r7, #4294967295
 801f33c:	4565      	cmp	r5, ip
 801f33e:	f280 812a 	bge.w	801f596 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f342:	b212      	sxth	r2, r2
 801f344:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f346:	fb05 0002 	mla	r0, r5, r2, r0
 801f34a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f34c:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f350:	4405      	add	r5, r0
 801f352:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f356:	eb04 0e0c 	add.w	lr, r4, ip
 801f35a:	f1b8 0f00 	cmp.w	r8, #0
 801f35e:	f000 810c 	beq.w	801f57a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801f362:	786f      	ldrb	r7, [r5, #1]
 801f364:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f368:	4427      	add	r7, r4
 801f36a:	2900      	cmp	r1, #0
 801f36c:	f000 810d 	beq.w	801f58a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801f370:	18a8      	adds	r0, r5, r2
 801f372:	5caa      	ldrb	r2, [r5, r2]
 801f374:	7840      	ldrb	r0, [r0, #1]
 801f376:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f37a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f37e:	4422      	add	r2, r4
 801f380:	4420      	add	r0, r4
 801f382:	fa1f f388 	uxth.w	r3, r8
 801f386:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801f38a:	b289      	uxth	r1, r1
 801f38c:	f897 c000 	ldrb.w	ip, [r7]
 801f390:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801f394:	fb03 f901 	mul.w	r9, r3, r1
 801f398:	011b      	lsls	r3, r3, #4
 801f39a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f39e:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801f3a2:	eba3 0309 	sub.w	r3, r3, r9
 801f3a6:	b289      	uxth	r1, r1
 801f3a8:	b29b      	uxth	r3, r3
 801f3aa:	eba8 0801 	sub.w	r8, r8, r1
 801f3ae:	fb03 fc0c 	mul.w	ip, r3, ip
 801f3b2:	fa1f f888 	uxth.w	r8, r8
 801f3b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f3b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f3ba:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f3be:	f892 a000 	ldrb.w	sl, [r2]
 801f3c2:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f3c6:	f890 a000 	ldrb.w	sl, [r0]
 801f3ca:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f3ce:	f896 a000 	ldrb.w	sl, [r6]
 801f3d2:	fb1a fa03 	smulbb	sl, sl, r3
 801f3d6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f3da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f3dc:	fb0c ac05 	mla	ip, ip, r5, sl
 801f3e0:	fa1f fc8c 	uxth.w	ip, ip
 801f3e4:	f10c 0a01 	add.w	sl, ip, #1
 801f3e8:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f3ec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f3f0:	f886 a000 	strb.w	sl, [r6]
 801f3f4:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f3f8:	f89e a001 	ldrb.w	sl, [lr, #1]
 801f3fc:	fb03 fc0c 	mul.w	ip, r3, ip
 801f400:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f402:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f406:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f40a:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f40e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f412:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f416:	f896 a001 	ldrb.w	sl, [r6, #1]
 801f41a:	fb1a fa03 	smulbb	sl, sl, r3
 801f41e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f424:	fb0c ac05 	mla	ip, ip, r5, sl
 801f428:	fa1f fc8c 	uxth.w	ip, ip
 801f42c:	f10c 0a01 	add.w	sl, ip, #1
 801f430:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801f434:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f438:	f886 c001 	strb.w	ip, [r6, #1]
 801f43c:	78bf      	ldrb	r7, [r7, #2]
 801f43e:	f89e c002 	ldrb.w	ip, [lr, #2]
 801f442:	437b      	muls	r3, r7
 801f444:	fb08 330c 	mla	r3, r8, ip, r3
 801f448:	f892 c002 	ldrb.w	ip, [r2, #2]
 801f44c:	7882      	ldrb	r2, [r0, #2]
 801f44e:	fb01 310c 	mla	r1, r1, ip, r3
 801f452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f454:	fb09 1902 	mla	r9, r9, r2, r1
 801f458:	78b1      	ldrb	r1, [r6, #2]
 801f45a:	fb11 f103 	smulbb	r1, r1, r3
 801f45e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f462:	fb09 1505 	mla	r5, r9, r5, r1
 801f466:	b2ad      	uxth	r5, r5
 801f468:	1c6b      	adds	r3, r5, #1
 801f46a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f46e:	122d      	asrs	r5, r5, #8
 801f470:	70b5      	strb	r5, [r6, #2]
 801f472:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f474:	3603      	adds	r6, #3
 801f476:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801f478:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f47c:	4413      	add	r3, r2
 801f47e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f480:	931d      	str	r3, [sp, #116]	@ 0x74
 801f482:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f484:	4413      	add	r3, r2
 801f486:	931e      	str	r3, [sp, #120]	@ 0x78
 801f488:	e73b      	b.n	801f302 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f48a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f48c:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801f48e:	4433      	add	r3, r6
 801f490:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801f492:	931d      	str	r3, [sp, #116]	@ 0x74
 801f494:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f496:	4433      	add	r3, r6
 801f498:	931e      	str	r3, [sp, #120]	@ 0x78
 801f49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f49c:	3b01      	subs	r3, #1
 801f49e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f4a2:	3303      	adds	r3, #3
 801f4a4:	930a      	str	r3, [sp, #40]	@ 0x28
 801f4a6:	e70d      	b.n	801f2c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f4a8:	d028      	beq.n	801f4fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801f4aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4ac:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801f4ae:	3b01      	subs	r3, #1
 801f4b0:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801f4b2:	fb00 5003 	mla	r0, r0, r3, r5
 801f4b6:	1400      	asrs	r0, r0, #16
 801f4b8:	f53f af21 	bmi.w	801f2fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f4bc:	3901      	subs	r1, #1
 801f4be:	4288      	cmp	r0, r1
 801f4c0:	f6bf af1d 	bge.w	801f2fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f4c4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801f4c6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801f4c8:	fb01 0303 	mla	r3, r1, r3, r0
 801f4cc:	141b      	asrs	r3, r3, #16
 801f4ce:	f53f af16 	bmi.w	801f2fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f4d2:	3a01      	subs	r2, #1
 801f4d4:	4293      	cmp	r3, r2
 801f4d6:	f6bf af12 	bge.w	801f2fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f4da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f4dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801f4e0:	1cdf      	adds	r7, r3, #3
 801f4e2:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801f4e6:	f1b9 0f00 	cmp.w	r9, #0
 801f4ea:	dc73      	bgt.n	801f5d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801f4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f4f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4f8:	441a      	add	r2, r3
 801f4fa:	920a      	str	r2, [sp, #40]	@ 0x28
 801f4fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	f340 8129 	ble.w	801f756 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801f504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f508:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f50a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f50e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f512:	eef0 6a62 	vmov.f32	s13, s5
 801f516:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f51a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f51e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f522:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801f526:	eef0 6a43 	vmov.f32	s13, s6
 801f52a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f52e:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801f532:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f536:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f53a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f53e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f542:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f546:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f54a:	ee12 2a90 	vmov	r2, s5
 801f54e:	eef0 2a47 	vmov.f32	s5, s14
 801f552:	fb92 f3f3 	sdiv	r3, r2, r3
 801f556:	ee13 2a10 	vmov	r2, s6
 801f55a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801f55c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f55e:	eeb0 3a67 	vmov.f32	s6, s15
 801f562:	fb92 f3f3 	sdiv	r3, r2, r3
 801f566:	9320      	str	r3, [sp, #128]	@ 0x80
 801f568:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f56a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f56c:	3b01      	subs	r3, #1
 801f56e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f570:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f572:	bf08      	it	eq
 801f574:	4613      	moveq	r3, r2
 801f576:	9309      	str	r3, [sp, #36]	@ 0x24
 801f578:	e696      	b.n	801f2a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f57a:	b149      	cbz	r1, 801f590 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801f57c:	5caa      	ldrb	r2, [r5, r2]
 801f57e:	4670      	mov	r0, lr
 801f580:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f584:	4422      	add	r2, r4
 801f586:	4677      	mov	r7, lr
 801f588:	e6fb      	b.n	801f382 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801f58a:	4670      	mov	r0, lr
 801f58c:	4672      	mov	r2, lr
 801f58e:	e6f8      	b.n	801f382 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801f590:	4670      	mov	r0, lr
 801f592:	4672      	mov	r2, lr
 801f594:	e7f7      	b.n	801f586 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801f596:	f110 0c01 	adds.w	ip, r0, #1
 801f59a:	f53f af6a 	bmi.w	801f472 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f59e:	4562      	cmp	r2, ip
 801f5a0:	f6ff af67 	blt.w	801f472 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f5a4:	f115 0c01 	adds.w	ip, r5, #1
 801f5a8:	f53f af63 	bmi.w	801f472 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f5ac:	4567      	cmp	r7, ip
 801f5ae:	f6ff af60 	blt.w	801f472 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5b4:	b23f      	sxth	r7, r7
 801f5b6:	b212      	sxth	r2, r2
 801f5b8:	9002      	str	r0, [sp, #8]
 801f5ba:	9701      	str	r7, [sp, #4]
 801f5bc:	9200      	str	r2, [sp, #0]
 801f5be:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f5c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f5c2:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801f5c6:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801f5ca:	4623      	mov	r3, r4
 801f5cc:	4631      	mov	r1, r6
 801f5ce:	f7ff fd69 	bl	801f0a4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f5d2:	e74e      	b.n	801f472 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f5d4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f5d6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801f5d8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f5dc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801f5de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f5e0:	1400      	asrs	r0, r0, #16
 801f5e2:	142d      	asrs	r5, r5, #16
 801f5e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f5e6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f5ea:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f5ee:	fb02 5000 	mla	r0, r2, r0, r5
 801f5f2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f5f4:	f815 e000 	ldrb.w	lr, [r5, r0]
 801f5f8:	eb05 0c00 	add.w	ip, r5, r0
 801f5fc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f600:	eb04 060e 	add.w	r6, r4, lr
 801f604:	2b00      	cmp	r3, #0
 801f606:	f000 8097 	beq.w	801f738 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801f60a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f60e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f612:	4425      	add	r5, r4
 801f614:	2900      	cmp	r1, #0
 801f616:	f000 8098 	beq.w	801f74a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801f61a:	eb0c 0002 	add.w	r0, ip, r2
 801f61e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f622:	7840      	ldrb	r0, [r0, #1]
 801f624:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f628:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f62c:	4422      	add	r2, r4
 801f62e:	4420      	add	r0, r4
 801f630:	b29b      	uxth	r3, r3
 801f632:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f636:	b289      	uxth	r1, r1
 801f638:	f895 e000 	ldrb.w	lr, [r5]
 801f63c:	3703      	adds	r7, #3
 801f63e:	f109 39ff 	add.w	r9, r9, #4294967295
 801f642:	fb03 f801 	mul.w	r8, r3, r1
 801f646:	011b      	lsls	r3, r3, #4
 801f648:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801f64c:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801f650:	eba3 0308 	sub.w	r3, r3, r8
 801f654:	b289      	uxth	r1, r1
 801f656:	b29b      	uxth	r3, r3
 801f658:	ebac 0c01 	sub.w	ip, ip, r1
 801f65c:	fb03 fe0e 	mul.w	lr, r3, lr
 801f660:	fa1f fc8c 	uxth.w	ip, ip
 801f664:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f668:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f66c:	f892 b000 	ldrb.w	fp, [r2]
 801f670:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f674:	f890 b000 	ldrb.w	fp, [r0]
 801f678:	fb08 ee0b 	mla	lr, r8, fp, lr
 801f67c:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801f680:	fb1b fb03 	smulbb	fp, fp, r3
 801f684:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f68a:	fb0e be0a 	mla	lr, lr, sl, fp
 801f68e:	fa1f fe8e 	uxth.w	lr, lr
 801f692:	f10e 0b01 	add.w	fp, lr, #1
 801f696:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f69a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f69e:	f807 ec06 	strb.w	lr, [r7, #-6]
 801f6a2:	f895 e001 	ldrb.w	lr, [r5, #1]
 801f6a6:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f6aa:	fb03 fe0e 	mul.w	lr, r3, lr
 801f6ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f6b0:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f6b4:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f6b8:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f6bc:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f6c0:	fb08 ee0b 	mla	lr, r8, fp, lr
 801f6c4:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801f6c8:	fb1b fb03 	smulbb	fp, fp, r3
 801f6cc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f6d2:	fb0e be0a 	mla	lr, lr, sl, fp
 801f6d6:	fa1f fe8e 	uxth.w	lr, lr
 801f6da:	f10e 0b01 	add.w	fp, lr, #1
 801f6de:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f6e2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f6e6:	f807 ec05 	strb.w	lr, [r7, #-5]
 801f6ea:	78ad      	ldrb	r5, [r5, #2]
 801f6ec:	78b6      	ldrb	r6, [r6, #2]
 801f6ee:	436b      	muls	r3, r5
 801f6f0:	7895      	ldrb	r5, [r2, #2]
 801f6f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f6f4:	fb0c 3306 	mla	r3, ip, r6, r3
 801f6f8:	fb01 3305 	mla	r3, r1, r5, r3
 801f6fc:	7885      	ldrb	r5, [r0, #2]
 801f6fe:	fb08 3805 	mla	r8, r8, r5, r3
 801f702:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801f706:	fb13 f302 	smulbb	r3, r3, r2
 801f70a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f70e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801f710:	fb08 380a 	mla	r8, r8, sl, r3
 801f714:	fa1f f888 	uxth.w	r8, r8
 801f718:	f108 0301 	add.w	r3, r8, #1
 801f71c:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801f720:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f722:	4413      	add	r3, r2
 801f724:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f726:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f72a:	931d      	str	r3, [sp, #116]	@ 0x74
 801f72c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f72e:	f807 8c04 	strb.w	r8, [r7, #-4]
 801f732:	4413      	add	r3, r2
 801f734:	931e      	str	r3, [sp, #120]	@ 0x78
 801f736:	e6d6      	b.n	801f4e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f738:	b151      	cbz	r1, 801f750 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801f73a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f73e:	4630      	mov	r0, r6
 801f740:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f744:	4422      	add	r2, r4
 801f746:	4635      	mov	r5, r6
 801f748:	e772      	b.n	801f630 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801f74a:	4630      	mov	r0, r6
 801f74c:	4632      	mov	r2, r6
 801f74e:	e76f      	b.n	801f630 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801f750:	4630      	mov	r0, r6
 801f752:	4632      	mov	r2, r6
 801f754:	e7f7      	b.n	801f746 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f756:	b013      	add	sp, #76	@ 0x4c
 801f758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f75c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801f75c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f760:	784c      	ldrb	r4, [r1, #1]
 801f762:	f891 a002 	ldrb.w	sl, [r1, #2]
 801f766:	0224      	lsls	r4, r4, #8
 801f768:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801f76c:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801f770:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801f774:	f891 a000 	ldrb.w	sl, [r1]
 801f778:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801f77c:	ea44 040a 	orr.w	r4, r4, sl
 801f780:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801f784:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801f788:	9401      	str	r4, [sp, #4]
 801f78a:	fb05 c70e 	mla	r7, r5, lr, ip
 801f78e:	2d00      	cmp	r5, #0
 801f790:	eb02 0807 	add.w	r8, r2, r7
 801f794:	db72      	blt.n	801f87c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801f796:	45a9      	cmp	r9, r5
 801f798:	dd70      	ble.n	801f87c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801f79a:	f1bc 0f00 	cmp.w	ip, #0
 801f79e:	db6b      	blt.n	801f878 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801f7a0:	45e6      	cmp	lr, ip
 801f7a2:	dd69      	ble.n	801f878 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801f7a4:	5dd7      	ldrb	r7, [r2, r7]
 801f7a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f7aa:	441f      	add	r7, r3
 801f7ac:	f11c 0201 	adds.w	r2, ip, #1
 801f7b0:	d467      	bmi.n	801f882 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801f7b2:	4596      	cmp	lr, r2
 801f7b4:	dd65      	ble.n	801f882 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801f7b6:	2800      	cmp	r0, #0
 801f7b8:	d063      	beq.n	801f882 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801f7ba:	f898 4001 	ldrb.w	r4, [r8, #1]
 801f7be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f7c2:	441c      	add	r4, r3
 801f7c4:	3501      	adds	r5, #1
 801f7c6:	d460      	bmi.n	801f88a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801f7c8:	45a9      	cmp	r9, r5
 801f7ca:	dd5e      	ble.n	801f88a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801f7cc:	2e00      	cmp	r6, #0
 801f7ce:	d05c      	beq.n	801f88a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801f7d0:	f1bc 0f00 	cmp.w	ip, #0
 801f7d4:	db57      	blt.n	801f886 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801f7d6:	45e6      	cmp	lr, ip
 801f7d8:	dd55      	ble.n	801f886 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801f7da:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f7de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f7e2:	441d      	add	r5, r3
 801f7e4:	f11c 0201 	adds.w	r2, ip, #1
 801f7e8:	d452      	bmi.n	801f890 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801f7ea:	4596      	cmp	lr, r2
 801f7ec:	dd50      	ble.n	801f890 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801f7ee:	2800      	cmp	r0, #0
 801f7f0:	d04e      	beq.n	801f890 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801f7f2:	44c6      	add	lr, r8
 801f7f4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f7f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f7fc:	4413      	add	r3, r2
 801f7fe:	b280      	uxth	r0, r0
 801f800:	f897 8000 	ldrb.w	r8, [r7]
 801f804:	b2b2      	uxth	r2, r6
 801f806:	fb00 f602 	mul.w	r6, r0, r2
 801f80a:	0100      	lsls	r0, r0, #4
 801f80c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801f810:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801f814:	1b80      	subs	r0, r0, r6
 801f816:	fa1f fc82 	uxth.w	ip, r2
 801f81a:	b282      	uxth	r2, r0
 801f81c:	7820      	ldrb	r0, [r4, #0]
 801f81e:	ebae 0e0c 	sub.w	lr, lr, ip
 801f822:	4350      	muls	r0, r2
 801f824:	fa1f fe8e 	uxth.w	lr, lr
 801f828:	fb0e 0808 	mla	r8, lr, r8, r0
 801f82c:	7828      	ldrb	r0, [r5, #0]
 801f82e:	fb0c 8800 	mla	r8, ip, r0, r8
 801f832:	7818      	ldrb	r0, [r3, #0]
 801f834:	fb06 8000 	mla	r0, r6, r0, r8
 801f838:	1200      	asrs	r0, r0, #8
 801f83a:	7008      	strb	r0, [r1, #0]
 801f83c:	7860      	ldrb	r0, [r4, #1]
 801f83e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f842:	4350      	muls	r0, r2
 801f844:	fb0e 0808 	mla	r8, lr, r8, r0
 801f848:	7868      	ldrb	r0, [r5, #1]
 801f84a:	fb0c 8800 	mla	r8, ip, r0, r8
 801f84e:	7858      	ldrb	r0, [r3, #1]
 801f850:	fb06 8000 	mla	r0, r6, r0, r8
 801f854:	1200      	asrs	r0, r0, #8
 801f856:	7048      	strb	r0, [r1, #1]
 801f858:	78a0      	ldrb	r0, [r4, #2]
 801f85a:	78bf      	ldrb	r7, [r7, #2]
 801f85c:	4350      	muls	r0, r2
 801f85e:	78aa      	ldrb	r2, [r5, #2]
 801f860:	fb0e 0007 	mla	r0, lr, r7, r0
 801f864:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f868:	789a      	ldrb	r2, [r3, #2]
 801f86a:	fb06 c202 	mla	r2, r6, r2, ip
 801f86e:	1212      	asrs	r2, r2, #8
 801f870:	708a      	strb	r2, [r1, #2]
 801f872:	b002      	add	sp, #8
 801f874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f878:	af01      	add	r7, sp, #4
 801f87a:	e797      	b.n	801f7ac <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801f87c:	ac01      	add	r4, sp, #4
 801f87e:	4627      	mov	r7, r4
 801f880:	e7a0      	b.n	801f7c4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f882:	ac01      	add	r4, sp, #4
 801f884:	e79e      	b.n	801f7c4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f886:	ad01      	add	r5, sp, #4
 801f888:	e7ac      	b.n	801f7e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801f88a:	ab01      	add	r3, sp, #4
 801f88c:	461d      	mov	r5, r3
 801f88e:	e7b6      	b.n	801f7fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801f890:	ab01      	add	r3, sp, #4
 801f892:	e7b4      	b.n	801f7fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801f894 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f898:	b08d      	sub	sp, #52	@ 0x34
 801f89a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f89e:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801f8a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f8a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 801f8a6:	9306      	str	r3, [sp, #24]
 801f8a8:	6850      	ldr	r0, [r2, #4]
 801f8aa:	6812      	ldr	r2, [r2, #0]
 801f8ac:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801f8ae:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801f8b2:	fb00 1303 	mla	r3, r0, r3, r1
 801f8b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8ba:	18d3      	adds	r3, r2, r3
 801f8bc:	9307      	str	r3, [sp, #28]
 801f8be:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f8c0:	681b      	ldr	r3, [r3, #0]
 801f8c2:	9308      	str	r3, [sp, #32]
 801f8c4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f8c6:	685d      	ldr	r5, [r3, #4]
 801f8c8:	3504      	adds	r5, #4
 801f8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8cc:	2b00      	cmp	r3, #0
 801f8ce:	dc03      	bgt.n	801f8d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f8d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	f340 81e6 	ble.w	801fca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801f8d8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f8da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f8de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f8e2:	1e48      	subs	r0, r1, #1
 801f8e4:	1e56      	subs	r6, r2, #1
 801f8e6:	9b06      	ldr	r3, [sp, #24]
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	f340 80bd 	ble.w	801fa68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f8ee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f8f0:	1427      	asrs	r7, r4, #16
 801f8f2:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f8f6:	d406      	bmi.n	801f906 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f8f8:	4287      	cmp	r7, r0
 801f8fa:	da04      	bge.n	801f906 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	db02      	blt.n	801f906 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f900:	42b3      	cmp	r3, r6
 801f902:	f2c0 80b2 	blt.w	801fa6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801f906:	3701      	adds	r7, #1
 801f908:	f100 80a1 	bmi.w	801fa4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f90c:	42b9      	cmp	r1, r7
 801f90e:	f2c0 809e 	blt.w	801fa4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f912:	3301      	adds	r3, #1
 801f914:	f100 809b 	bmi.w	801fa4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f918:	429a      	cmp	r2, r3
 801f91a:	f2c0 8098 	blt.w	801fa4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f91e:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801f922:	f1bb 0f00 	cmp.w	fp, #0
 801f926:	f340 80bf 	ble.w	801faa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f92a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f92c:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801f92e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f930:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f934:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801f938:	1420      	asrs	r0, r4, #16
 801f93a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f93c:	ea4f 4723 	mov.w	r7, r3, asr #16
 801f940:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801f944:	6892      	ldr	r2, [r2, #8]
 801f946:	f100 8103 	bmi.w	801fb50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f94a:	f102 3eff 	add.w	lr, r2, #4294967295
 801f94e:	4570      	cmp	r0, lr
 801f950:	f280 80fe 	bge.w	801fb50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f954:	2f00      	cmp	r7, #0
 801f956:	f2c0 80fb 	blt.w	801fb50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f95a:	f10c 3eff 	add.w	lr, ip, #4294967295
 801f95e:	4577      	cmp	r7, lr
 801f960:	f280 80f6 	bge.w	801fb50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f964:	b212      	sxth	r2, r2
 801f966:	fb07 0002 	mla	r0, r7, r2, r0
 801f96a:	9f08      	ldr	r7, [sp, #32]
 801f96c:	f817 8000 	ldrb.w	r8, [r7, r0]
 801f970:	eb07 0e00 	add.w	lr, r7, r0
 801f974:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f978:	eb05 0c08 	add.w	ip, r5, r8
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	f000 80d8 	beq.w	801fb32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801f982:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801f986:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f98a:	442f      	add	r7, r5
 801f98c:	2900      	cmp	r1, #0
 801f98e:	f000 80d9 	beq.w	801fb44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f992:	eb0e 0002 	add.w	r0, lr, r2
 801f996:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801f99a:	7840      	ldrb	r0, [r0, #1]
 801f99c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f9a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f9a4:	442a      	add	r2, r5
 801f9a6:	4428      	add	r0, r5
 801f9a8:	b29b      	uxth	r3, r3
 801f9aa:	f815 a008 	ldrb.w	sl, [r5, r8]
 801f9ae:	b289      	uxth	r1, r1
 801f9b0:	f897 8000 	ldrb.w	r8, [r7]
 801f9b4:	fb03 f901 	mul.w	r9, r3, r1
 801f9b8:	011b      	lsls	r3, r3, #4
 801f9ba:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f9be:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801f9c2:	eba3 0309 	sub.w	r3, r3, r9
 801f9c6:	b289      	uxth	r1, r1
 801f9c8:	b29b      	uxth	r3, r3
 801f9ca:	ebae 0e01 	sub.w	lr, lr, r1
 801f9ce:	fb03 f808 	mul.w	r8, r3, r8
 801f9d2:	fa1f fe8e 	uxth.w	lr, lr
 801f9d6:	fb0e 880a 	mla	r8, lr, sl, r8
 801f9da:	f892 a000 	ldrb.w	sl, [r2]
 801f9de:	fb01 880a 	mla	r8, r1, sl, r8
 801f9e2:	f890 a000 	ldrb.w	sl, [r0]
 801f9e6:	fb09 880a 	mla	r8, r9, sl, r8
 801f9ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f9ee:	f886 8000 	strb.w	r8, [r6]
 801f9f2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f9f6:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f9fa:	fb03 f808 	mul.w	r8, r3, r8
 801f9fe:	fb0e 880a 	mla	r8, lr, sl, r8
 801fa02:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fa06:	fb01 880a 	mla	r8, r1, sl, r8
 801fa0a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fa0e:	fb09 880a 	mla	r8, r9, sl, r8
 801fa12:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fa16:	f886 8001 	strb.w	r8, [r6, #1]
 801fa1a:	78bf      	ldrb	r7, [r7, #2]
 801fa1c:	f89c c002 	ldrb.w	ip, [ip, #2]
 801fa20:	437b      	muls	r3, r7
 801fa22:	7892      	ldrb	r2, [r2, #2]
 801fa24:	fb0e 330c 	mla	r3, lr, ip, r3
 801fa28:	fb01 3102 	mla	r1, r1, r2, r3
 801fa2c:	7882      	ldrb	r2, [r0, #2]
 801fa2e:	fb09 1902 	mla	r9, r9, r2, r1
 801fa32:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa36:	f886 9002 	strb.w	r9, [r6, #2]
 801fa3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fa3c:	3603      	adds	r6, #3
 801fa3e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801fa40:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fa44:	441c      	add	r4, r3
 801fa46:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fa48:	4413      	add	r3, r2
 801fa4a:	9318      	str	r3, [sp, #96]	@ 0x60
 801fa4c:	e769      	b.n	801f922 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fa4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fa50:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801fa52:	441c      	add	r4, r3
 801fa54:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fa56:	443b      	add	r3, r7
 801fa58:	9318      	str	r3, [sp, #96]	@ 0x60
 801fa5a:	9b06      	ldr	r3, [sp, #24]
 801fa5c:	3b01      	subs	r3, #1
 801fa5e:	9306      	str	r3, [sp, #24]
 801fa60:	9b07      	ldr	r3, [sp, #28]
 801fa62:	3303      	adds	r3, #3
 801fa64:	9307      	str	r3, [sp, #28]
 801fa66:	e73e      	b.n	801f8e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fa68:	d026      	beq.n	801fab8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801fa6a:	9b06      	ldr	r3, [sp, #24]
 801fa6c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801fa6e:	3b01      	subs	r3, #1
 801fa70:	fb00 4003 	mla	r0, r0, r3, r4
 801fa74:	1400      	asrs	r0, r0, #16
 801fa76:	f53f af52 	bmi.w	801f91e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fa7a:	3901      	subs	r1, #1
 801fa7c:	4288      	cmp	r0, r1
 801fa7e:	f6bf af4e 	bge.w	801f91e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fa82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fa84:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801fa86:	fb01 0303 	mla	r3, r1, r3, r0
 801fa8a:	141b      	asrs	r3, r3, #16
 801fa8c:	f53f af47 	bmi.w	801f91e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fa90:	3a01      	subs	r2, #1
 801fa92:	4293      	cmp	r3, r2
 801fa94:	f6bf af43 	bge.w	801f91e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fa98:	9b07      	ldr	r3, [sp, #28]
 801fa9a:	f8dd a018 	ldr.w	sl, [sp, #24]
 801fa9e:	f103 0803 	add.w	r8, r3, #3
 801faa2:	f1ba 0f00 	cmp.w	sl, #0
 801faa6:	dc71      	bgt.n	801fb8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801faa8:	9b06      	ldr	r3, [sp, #24]
 801faaa:	9a07      	ldr	r2, [sp, #28]
 801faac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fab0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fab4:	441a      	add	r2, r3
 801fab6:	9207      	str	r2, [sp, #28]
 801fab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801faba:	2b00      	cmp	r3, #0
 801fabc:	f340 80f2 	ble.w	801fca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801fac0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fac4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fac6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801faca:	eeb0 6a62 	vmov.f32	s12, s5
 801face:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fad2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fad6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fada:	ee16 4a10 	vmov	r4, s12
 801fade:	eeb0 6a43 	vmov.f32	s12, s6
 801fae2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fae6:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801faea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801faee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801faf2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801faf6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fafa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fafe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fb02:	ee12 2a90 	vmov	r2, s5
 801fb06:	eef0 2a47 	vmov.f32	s5, s14
 801fb0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb0e:	ee13 2a10 	vmov	r2, s6
 801fb12:	9319      	str	r3, [sp, #100]	@ 0x64
 801fb14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fb16:	eeb0 3a67 	vmov.f32	s6, s15
 801fb1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb1e:	931a      	str	r3, [sp, #104]	@ 0x68
 801fb20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fb24:	3b01      	subs	r3, #1
 801fb26:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fb2a:	bf08      	it	eq
 801fb2c:	4613      	moveq	r3, r2
 801fb2e:	9306      	str	r3, [sp, #24]
 801fb30:	e6cb      	b.n	801f8ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801fb32:	b151      	cbz	r1, 801fb4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fb34:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801fb38:	4660      	mov	r0, ip
 801fb3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb3e:	442a      	add	r2, r5
 801fb40:	4667      	mov	r7, ip
 801fb42:	e731      	b.n	801f9a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801fb44:	4660      	mov	r0, ip
 801fb46:	4662      	mov	r2, ip
 801fb48:	e72e      	b.n	801f9a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801fb4a:	4660      	mov	r0, ip
 801fb4c:	4662      	mov	r2, ip
 801fb4e:	e7f7      	b.n	801fb40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801fb50:	f110 0e01 	adds.w	lr, r0, #1
 801fb54:	f53f af71 	bmi.w	801fa3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801fb58:	4572      	cmp	r2, lr
 801fb5a:	f6ff af6e 	blt.w	801fa3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801fb5e:	f117 0e01 	adds.w	lr, r7, #1
 801fb62:	f53f af6a 	bmi.w	801fa3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801fb66:	45f4      	cmp	ip, lr
 801fb68:	f6ff af67 	blt.w	801fa3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801fb6c:	b212      	sxth	r2, r2
 801fb6e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fb72:	fa0f f38c 	sxth.w	r3, ip
 801fb76:	9200      	str	r2, [sp, #0]
 801fb78:	4631      	mov	r1, r6
 801fb7a:	9a08      	ldr	r2, [sp, #32]
 801fb7c:	9301      	str	r3, [sp, #4]
 801fb7e:	462b      	mov	r3, r5
 801fb80:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801fb84:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801fb86:	f7ff fde9 	bl	801f75c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801fb8a:	e756      	b.n	801fa3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801fb8c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801fb8e:	1426      	asrs	r6, r4, #16
 801fb90:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801fb92:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801fb96:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fb9a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801fb9c:	1400      	asrs	r0, r0, #16
 801fb9e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fba2:	fb02 6000 	mla	r0, r2, r0, r6
 801fba6:	9e08      	ldr	r6, [sp, #32]
 801fba8:	f816 e000 	ldrb.w	lr, [r6, r0]
 801fbac:	eb06 0c00 	add.w	ip, r6, r0
 801fbb0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fbb4:	eb05 070e 	add.w	r7, r5, lr
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	d064      	beq.n	801fc86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801fbbc:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801fbc0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fbc4:	442e      	add	r6, r5
 801fbc6:	2900      	cmp	r1, #0
 801fbc8:	d066      	beq.n	801fc98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801fbca:	eb0c 0002 	add.w	r0, ip, r2
 801fbce:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fbd2:	7840      	ldrb	r0, [r0, #1]
 801fbd4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fbd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fbdc:	442a      	add	r2, r5
 801fbde:	4428      	add	r0, r5
 801fbe0:	b29b      	uxth	r3, r3
 801fbe2:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801fbe6:	b289      	uxth	r1, r1
 801fbe8:	f896 e000 	ldrb.w	lr, [r6]
 801fbec:	f108 0803 	add.w	r8, r8, #3
 801fbf0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fbf4:	fb03 f901 	mul.w	r9, r3, r1
 801fbf8:	011b      	lsls	r3, r3, #4
 801fbfa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fbfe:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801fc02:	eba3 0309 	sub.w	r3, r3, r9
 801fc06:	b289      	uxth	r1, r1
 801fc08:	b29b      	uxth	r3, r3
 801fc0a:	ebac 0c01 	sub.w	ip, ip, r1
 801fc0e:	fb03 fe0e 	mul.w	lr, r3, lr
 801fc12:	fa1f fc8c 	uxth.w	ip, ip
 801fc16:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fc1a:	f892 b000 	ldrb.w	fp, [r2]
 801fc1e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fc22:	f890 b000 	ldrb.w	fp, [r0]
 801fc26:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fc2a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fc2e:	f808 ec06 	strb.w	lr, [r8, #-6]
 801fc32:	f896 e001 	ldrb.w	lr, [r6, #1]
 801fc36:	f897 b001 	ldrb.w	fp, [r7, #1]
 801fc3a:	fb03 fe0e 	mul.w	lr, r3, lr
 801fc3e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fc42:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fc46:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fc4a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fc4e:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fc52:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fc56:	f808 ec05 	strb.w	lr, [r8, #-5]
 801fc5a:	78b6      	ldrb	r6, [r6, #2]
 801fc5c:	78bf      	ldrb	r7, [r7, #2]
 801fc5e:	4373      	muls	r3, r6
 801fc60:	7896      	ldrb	r6, [r2, #2]
 801fc62:	7882      	ldrb	r2, [r0, #2]
 801fc64:	fb0c 3307 	mla	r3, ip, r7, r3
 801fc68:	fb01 3306 	mla	r3, r1, r6, r3
 801fc6c:	fb09 3902 	mla	r9, r9, r2, r3
 801fc70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fc72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801fc74:	441c      	add	r4, r3
 801fc76:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fc78:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc7c:	4413      	add	r3, r2
 801fc7e:	f808 9c04 	strb.w	r9, [r8, #-4]
 801fc82:	9318      	str	r3, [sp, #96]	@ 0x60
 801fc84:	e70d      	b.n	801faa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801fc86:	b151      	cbz	r1, 801fc9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801fc88:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fc8c:	4638      	mov	r0, r7
 801fc8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc92:	442a      	add	r2, r5
 801fc94:	463e      	mov	r6, r7
 801fc96:	e7a3      	b.n	801fbe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801fc98:	4638      	mov	r0, r7
 801fc9a:	463a      	mov	r2, r7
 801fc9c:	e7a0      	b.n	801fbe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801fc9e:	4638      	mov	r0, r7
 801fca0:	463a      	mov	r2, r7
 801fca2:	e7f7      	b.n	801fc94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801fca4:	b00d      	add	sp, #52	@ 0x34
 801fca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fcaa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801fcaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcae:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801fcb2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801fcb6:	2d00      	cmp	r5, #0
 801fcb8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801fcbc:	fb05 700c 	mla	r0, r5, ip, r7
 801fcc0:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801fcc4:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801fcc8:	eb02 0800 	add.w	r8, r2, r0
 801fccc:	f2c0 8118 	blt.w	801ff00 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801fcd0:	45a9      	cmp	r9, r5
 801fcd2:	f340 8115 	ble.w	801ff00 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801fcd6:	2f00      	cmp	r7, #0
 801fcd8:	f2c0 8110 	blt.w	801fefc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801fcdc:	45bc      	cmp	ip, r7
 801fcde:	f340 810d 	ble.w	801fefc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801fce2:	5c12      	ldrb	r2, [r2, r0]
 801fce4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801fce8:	1c7a      	adds	r2, r7, #1
 801fcea:	f100 810c 	bmi.w	801ff06 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801fcee:	4594      	cmp	ip, r2
 801fcf0:	f340 8109 	ble.w	801ff06 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801fcf4:	2c00      	cmp	r4, #0
 801fcf6:	f000 8108 	beq.w	801ff0a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801fcfa:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fcfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801fd02:	3501      	adds	r5, #1
 801fd04:	f100 8105 	bmi.w	801ff12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801fd08:	45a9      	cmp	r9, r5
 801fd0a:	f340 8102 	ble.w	801ff12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801fd0e:	f1be 0f00 	cmp.w	lr, #0
 801fd12:	f000 8101 	beq.w	801ff18 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801fd16:	2f00      	cmp	r7, #0
 801fd18:	f2c0 80f9 	blt.w	801ff0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801fd1c:	45bc      	cmp	ip, r7
 801fd1e:	f340 80f6 	ble.w	801ff0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801fd22:	f818 200c 	ldrb.w	r2, [r8, ip]
 801fd26:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fd2a:	3701      	adds	r7, #1
 801fd2c:	f100 80f7 	bmi.w	801ff1e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801fd30:	45bc      	cmp	ip, r7
 801fd32:	f340 80f4 	ble.w	801ff1e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801fd36:	2c00      	cmp	r4, #0
 801fd38:	f000 80f3 	beq.w	801ff22 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801fd3c:	44c4      	add	ip, r8
 801fd3e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fd42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fd46:	fa1f fc84 	uxth.w	ip, r4
 801fd4a:	fa1f f48e 	uxth.w	r4, lr
 801fd4e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801fd52:	fb04 fe0c 	mul.w	lr, r4, ip
 801fd56:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801fd5a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801fd5e:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801fd62:	ebac 070e 	sub.w	r7, ip, lr
 801fd66:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801fd6a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801fd6e:	b2a4      	uxth	r4, r4
 801fd70:	b2bf      	uxth	r7, r7
 801fd72:	1b1b      	subs	r3, r3, r4
 801fd74:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fd78:	fb07 fc0a 	mul.w	ip, r7, sl
 801fd7c:	b29b      	uxth	r3, r3
 801fd7e:	fb03 cc0b 	mla	ip, r3, fp, ip
 801fd82:	9300      	str	r3, [sp, #0]
 801fd84:	fb04 cc09 	mla	ip, r4, r9, ip
 801fd88:	fb0e cc08 	mla	ip, lr, r8, ip
 801fd8c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fd90:	9301      	str	r3, [sp, #4]
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	f000 80af 	beq.w	801fef6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801fd98:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801fd9c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801fda0:	fb0b fc0c 	mul.w	ip, fp, ip
 801fda4:	fb0b f606 	mul.w	r6, fp, r6
 801fda8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fdac:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fdb0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801fdb4:	44dc      	add	ip, fp
 801fdb6:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801fdba:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801fdbe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fdc2:	fb0a fb0b 	mul.w	fp, sl, fp
 801fdc6:	fb0a fa00 	mul.w	sl, sl, r0
 801fdca:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801fdce:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801fdd2:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801fdd6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fdda:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801fdde:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fde2:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801fde6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fdea:	0a36      	lsrs	r6, r6, #8
 801fdec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fdf0:	44dc      	add	ip, fp
 801fdf2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801fdf6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801fdfa:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801fdfe:	fb09 fb0b 	mul.w	fp, r9, fp
 801fe02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe06:	fb09 f905 	mul.w	r9, r9, r5
 801fe0a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801fe0e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fe12:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801fe16:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fe1a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801fe1e:	fb0c fc07 	mul.w	ip, ip, r7
 801fe22:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801fe26:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801fe2a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fe2e:	4458      	add	r0, fp
 801fe30:	fb08 f505 	mul.w	r5, r8, r5
 801fe34:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fe38:	fb08 f802 	mul.w	r8, r8, r2
 801fe3c:	0a00      	lsrs	r0, r0, #8
 801fe3e:	0a2a      	lsrs	r2, r5, #8
 801fe40:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801fe44:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801fe48:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801fe4c:	4415      	add	r5, r2
 801fe4e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801fe52:	0a2d      	lsrs	r5, r5, #8
 801fe54:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fe58:	9a00      	ldr	r2, [sp, #0]
 801fe5a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801fe5e:	fb03 cc02 	mla	ip, r3, r2, ip
 801fe62:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fe66:	9b01      	ldr	r3, [sp, #4]
 801fe68:	fb05 c50e 	mla	r5, r5, lr, ip
 801fe6c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801fe70:	fb00 5004 	mla	r0, r0, r4, r5
 801fe74:	0a00      	lsrs	r0, r0, #8
 801fe76:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801fe7a:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801fe7e:	4378      	muls	r0, r7
 801fe80:	fb02 0006 	mla	r0, r2, r6, r0
 801fe84:	fb0e 0e08 	mla	lr, lr, r8, r0
 801fe88:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801fe8c:	fb04 e000 	mla	r0, r4, r0, lr
 801fe90:	0a00      	lsrs	r0, r0, #8
 801fe92:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801fe96:	4328      	orrs	r0, r5
 801fe98:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801fe9c:	b2ad      	uxth	r5, r5
 801fe9e:	b2c4      	uxtb	r4, r0
 801fea0:	436b      	muls	r3, r5
 801fea2:	fb14 f405 	smulbb	r4, r4, r5
 801fea6:	1c5a      	adds	r2, r3, #1
 801fea8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801feac:	780b      	ldrb	r3, [r1, #0]
 801feae:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801feb2:	b2d2      	uxtb	r2, r2
 801feb4:	fb03 4302 	mla	r3, r3, r2, r4
 801feb8:	b29b      	uxth	r3, r3
 801feba:	1c5c      	adds	r4, r3, #1
 801febc:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801fec0:	784c      	ldrb	r4, [r1, #1]
 801fec2:	fb14 f402 	smulbb	r4, r4, r2
 801fec6:	121b      	asrs	r3, r3, #8
 801fec8:	700b      	strb	r3, [r1, #0]
 801feca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801fece:	fb03 4305 	mla	r3, r3, r5, r4
 801fed2:	b29b      	uxth	r3, r3
 801fed4:	1c5c      	adds	r4, r3, #1
 801fed6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801feda:	0c04      	lsrs	r4, r0, #16
 801fedc:	7888      	ldrb	r0, [r1, #2]
 801fede:	121b      	asrs	r3, r3, #8
 801fee0:	fb10 f002 	smulbb	r0, r0, r2
 801fee4:	704b      	strb	r3, [r1, #1]
 801fee6:	fb04 0005 	mla	r0, r4, r5, r0
 801feea:	b280      	uxth	r0, r0
 801feec:	1c43      	adds	r3, r0, #1
 801feee:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fef2:	1200      	asrs	r0, r0, #8
 801fef4:	7088      	strb	r0, [r1, #2]
 801fef6:	b003      	add	sp, #12
 801fef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fefc:	2600      	movs	r6, #0
 801fefe:	e6f3      	b.n	801fce8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801ff00:	2000      	movs	r0, #0
 801ff02:	4606      	mov	r6, r0
 801ff04:	e6fd      	b.n	801fd02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ff06:	2000      	movs	r0, #0
 801ff08:	e6fb      	b.n	801fd02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ff0a:	4620      	mov	r0, r4
 801ff0c:	e6f9      	b.n	801fd02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ff0e:	2500      	movs	r5, #0
 801ff10:	e70b      	b.n	801fd2a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801ff12:	2200      	movs	r2, #0
 801ff14:	4615      	mov	r5, r2
 801ff16:	e716      	b.n	801fd46 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801ff18:	4672      	mov	r2, lr
 801ff1a:	4675      	mov	r5, lr
 801ff1c:	e713      	b.n	801fd46 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801ff1e:	2200      	movs	r2, #0
 801ff20:	e711      	b.n	801fd46 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801ff22:	4622      	mov	r2, r4
 801ff24:	e70f      	b.n	801fd46 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801ff26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff2a:	b09f      	sub	sp, #124	@ 0x7c
 801ff2c:	921b      	str	r2, [sp, #108]	@ 0x6c
 801ff2e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ff30:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801ff32:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801ff36:	901d      	str	r0, [sp, #116]	@ 0x74
 801ff38:	931c      	str	r3, [sp, #112]	@ 0x70
 801ff3a:	6850      	ldr	r0, [r2, #4]
 801ff3c:	9119      	str	r1, [sp, #100]	@ 0x64
 801ff3e:	6812      	ldr	r2, [r2, #0]
 801ff40:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801ff42:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801ff46:	fb00 1303 	mla	r3, r0, r3, r1
 801ff4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff4e:	18d3      	adds	r3, r2, r3
 801ff50:	930c      	str	r3, [sp, #48]	@ 0x30
 801ff52:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	9312      	str	r3, [sp, #72]	@ 0x48
 801ff58:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ff5a:	685e      	ldr	r6, [r3, #4]
 801ff5c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801ff60:	3604      	adds	r6, #4
 801ff62:	930d      	str	r3, [sp, #52]	@ 0x34
 801ff64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	dc03      	bgt.n	801ff72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ff6a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	f340 8378 	ble.w	8020662 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801ff72:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ff74:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ff78:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ff7c:	1e48      	subs	r0, r1, #1
 801ff7e:	1e57      	subs	r7, r2, #1
 801ff80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff82:	2b00      	cmp	r3, #0
 801ff84:	f340 818c 	ble.w	80202a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801ff88:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801ff8a:	142b      	asrs	r3, r5, #16
 801ff8c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801ff90:	d406      	bmi.n	801ffa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ff92:	4584      	cmp	ip, r0
 801ff94:	da04      	bge.n	801ffa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ff96:	2b00      	cmp	r3, #0
 801ff98:	db02      	blt.n	801ffa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ff9a:	42bb      	cmp	r3, r7
 801ff9c:	f2c0 8181 	blt.w	80202a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801ffa0:	f11c 0c01 	adds.w	ip, ip, #1
 801ffa4:	f100 816f 	bmi.w	8020286 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ffa8:	4561      	cmp	r1, ip
 801ffaa:	f2c0 816c 	blt.w	8020286 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ffae:	3301      	adds	r3, #1
 801ffb0:	f100 8169 	bmi.w	8020286 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ffb4:	429a      	cmp	r2, r3
 801ffb6:	f2c0 8166 	blt.w	8020286 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ffba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffbc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ffbe:	931a      	str	r3, [sp, #104]	@ 0x68
 801ffc0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	f340 818c 	ble.w	80202e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801ffc8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ffca:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ffce:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ffd2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ffd6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ffd8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801ffdc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ffde:	141b      	asrs	r3, r3, #16
 801ffe0:	f100 81d0 	bmi.w	8020384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ffe4:	f100 38ff 	add.w	r8, r0, #4294967295
 801ffe8:	4543      	cmp	r3, r8
 801ffea:	f280 81cb 	bge.w	8020384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ffee:	f1bc 0f00 	cmp.w	ip, #0
 801fff2:	f2c0 81c7 	blt.w	8020384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801fff6:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fffa:	45c4      	cmp	ip, r8
 801fffc:	f280 81c2 	bge.w	8020384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020000:	b200      	sxth	r0, r0
 8020002:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020004:	fb0c 3300 	mla	r3, ip, r0, r3
 8020008:	eb04 0803 	add.w	r8, r4, r3
 802000c:	5ce3      	ldrb	r3, [r4, r3]
 802000e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020012:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020016:	2a00      	cmp	r2, #0
 8020018:	f000 81a9 	beq.w	802036e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 802001c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020020:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020024:	940e      	str	r4, [sp, #56]	@ 0x38
 8020026:	0e24      	lsrs	r4, r4, #24
 8020028:	9415      	str	r4, [sp, #84]	@ 0x54
 802002a:	b179      	cbz	r1, 802004c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802002c:	eb08 0c00 	add.w	ip, r8, r0
 8020030:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020034:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020038:	900a      	str	r0, [sp, #40]	@ 0x28
 802003a:	0e00      	lsrs	r0, r0, #24
 802003c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802003e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020042:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020046:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020048:	0e00      	lsrs	r0, r0, #24
 802004a:	9016      	str	r0, [sp, #88]	@ 0x58
 802004c:	b292      	uxth	r2, r2
 802004e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020050:	b289      	uxth	r1, r1
 8020052:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020054:	fb02 f901 	mul.w	r9, r2, r1
 8020058:	0112      	lsls	r2, r2, #4
 802005a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802005e:	eba2 0809 	sub.w	r8, r2, r9
 8020062:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8020066:	b289      	uxth	r1, r1
 8020068:	fa1f f888 	uxth.w	r8, r8
 802006c:	1a52      	subs	r2, r2, r1
 802006e:	fb08 f000 	mul.w	r0, r8, r0
 8020072:	b292      	uxth	r2, r2
 8020074:	fb02 000e 	mla	r0, r2, lr, r0
 8020078:	fb01 0004 	mla	r0, r1, r4, r0
 802007c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802007e:	fb09 0004 	mla	r0, r9, r4, r0
 8020082:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020086:	2800      	cmp	r0, #0
 8020088:	f000 80f2 	beq.w	8020270 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802008c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020090:	d01b      	beq.n	80200ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020092:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020096:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802009a:	fb0e fa0a 	mul.w	sl, lr, sl
 802009e:	fb0e fe03 	mul.w	lr, lr, r3
 80200a2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80200a6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80200aa:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80200ae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80200b2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80200b6:	4453      	add	r3, sl
 80200b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80200bc:	0a1b      	lsrs	r3, r3, #8
 80200be:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80200c2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80200c6:	ea43 030c 	orr.w	r3, r3, ip
 80200ca:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80200cc:	2cff      	cmp	r4, #255	@ 0xff
 80200ce:	d021      	beq.n	8020114 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80200d0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80200d2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80200d6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80200d8:	fb04 fb0b 	mul.w	fp, r4, fp
 80200dc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80200de:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80200e2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80200e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80200e8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80200ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80200f0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80200f4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80200f8:	44de      	add	lr, fp
 80200fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80200fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020102:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020106:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802010a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802010e:	ea4e 040a 	orr.w	r4, lr, sl
 8020112:	940e      	str	r4, [sp, #56]	@ 0x38
 8020114:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020116:	2cff      	cmp	r4, #255	@ 0xff
 8020118:	d021      	beq.n	802015e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802011a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802011c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020120:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020122:	fb04 fb0b 	mul.w	fp, r4, fp
 8020126:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020128:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802012c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802012e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020132:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020136:	fb04 fa0a 	mul.w	sl, r4, sl
 802013a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802013e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020142:	44de      	add	lr, fp
 8020144:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020148:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802014c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020150:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020154:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020158:	ea4e 040a 	orr.w	r4, lr, sl
 802015c:	940a      	str	r4, [sp, #40]	@ 0x28
 802015e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020160:	2cff      	cmp	r4, #255	@ 0xff
 8020162:	d021      	beq.n	80201a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8020164:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020166:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802016a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802016c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020170:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020172:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020176:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020178:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802017c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020180:	fb04 fa0a 	mul.w	sl, r4, sl
 8020184:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020188:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802018c:	44de      	add	lr, fp
 802018e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020192:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020196:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802019a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802019e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80201a2:	ea4e 040a 	orr.w	r4, lr, sl
 80201a6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80201a8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80201aa:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80201ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80201b2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80201b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80201b8:	fb08 fc0c 	mul.w	ip, r8, ip
 80201bc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80201c0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80201c4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80201c6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80201ca:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80201ce:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80201d0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80201d4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80201d8:	fb08 f80e 	mul.w	r8, r8, lr
 80201dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80201e0:	fb02 8303 	mla	r3, r2, r3, r8
 80201e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80201e6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80201ea:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80201ee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80201f0:	fb01 330a 	mla	r3, r1, sl, r3
 80201f4:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 80201f8:	fb09 3901 	mla	r9, r9, r1, r3
 80201fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80201fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020200:	4343      	muls	r3, r0
 8020202:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020206:	1c58      	adds	r0, r3, #1
 8020208:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802020c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020210:	ea4c 0c09 	orr.w	ip, ip, r9
 8020214:	783b      	ldrb	r3, [r7, #0]
 8020216:	fa5f f28c 	uxtb.w	r2, ip
 802021a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802021e:	fb12 f201 	smulbb	r2, r2, r1
 8020222:	b2c0      	uxtb	r0, r0
 8020224:	fb03 2300 	mla	r3, r3, r0, r2
 8020228:	b29b      	uxth	r3, r3
 802022a:	1c5a      	adds	r2, r3, #1
 802022c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020230:	787a      	ldrb	r2, [r7, #1]
 8020232:	fb12 f200 	smulbb	r2, r2, r0
 8020236:	121b      	asrs	r3, r3, #8
 8020238:	703b      	strb	r3, [r7, #0]
 802023a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802023e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020242:	fb03 2301 	mla	r3, r3, r1, r2
 8020246:	b29b      	uxth	r3, r3
 8020248:	1c5a      	adds	r2, r3, #1
 802024a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802024e:	121b      	asrs	r3, r3, #8
 8020250:	707b      	strb	r3, [r7, #1]
 8020252:	78bb      	ldrb	r3, [r7, #2]
 8020254:	fb13 f000 	smulbb	r0, r3, r0
 8020258:	fb0c 0c01 	mla	ip, ip, r1, r0
 802025c:	fa1f fc8c 	uxth.w	ip, ip
 8020260:	f10c 0301 	add.w	r3, ip, #1
 8020264:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020268:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802026c:	f887 c002 	strb.w	ip, [r7, #2]
 8020270:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020272:	3703      	adds	r7, #3
 8020274:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020276:	441a      	add	r2, r3
 8020278:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802027a:	441d      	add	r5, r3
 802027c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802027e:	9229      	str	r2, [sp, #164]	@ 0xa4
 8020280:	3b01      	subs	r3, #1
 8020282:	931a      	str	r3, [sp, #104]	@ 0x68
 8020284:	e69c      	b.n	801ffc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020286:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020288:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802028a:	441c      	add	r4, r3
 802028c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802028e:	441d      	add	r5, r3
 8020290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020292:	9429      	str	r4, [sp, #164]	@ 0xa4
 8020294:	3b01      	subs	r3, #1
 8020296:	9309      	str	r3, [sp, #36]	@ 0x24
 8020298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802029a:	3303      	adds	r3, #3
 802029c:	930c      	str	r3, [sp, #48]	@ 0x30
 802029e:	e66f      	b.n	801ff80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80202a0:	d026      	beq.n	80202f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80202a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202a4:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80202a6:	3b01      	subs	r3, #1
 80202a8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80202aa:	fb00 4003 	mla	r0, r0, r3, r4
 80202ae:	1400      	asrs	r0, r0, #16
 80202b0:	f53f ae83 	bmi.w	801ffba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80202b4:	3901      	subs	r1, #1
 80202b6:	4288      	cmp	r0, r1
 80202b8:	f6bf ae7f 	bge.w	801ffba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80202bc:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80202be:	fb01 5303 	mla	r3, r1, r3, r5
 80202c2:	141b      	asrs	r3, r3, #16
 80202c4:	f53f ae79 	bmi.w	801ffba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80202c8:	3a01      	subs	r2, #1
 80202ca:	4293      	cmp	r3, r2
 80202cc:	f6bf ae75 	bge.w	801ffba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80202d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80202d2:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80202d6:	f103 0e03 	add.w	lr, r3, #3
 80202da:	f1bb 0f00 	cmp.w	fp, #0
 80202de:	dc71      	bgt.n	80203c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80202e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202e2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80202e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80202e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80202ec:	4423      	add	r3, r4
 80202ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80202f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80202f2:	2b00      	cmp	r3, #0
 80202f4:	f340 81b5 	ble.w	8020662 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80202f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80202fc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80202fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020302:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020306:	eef0 6a62 	vmov.f32	s13, s5
 802030a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802030e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020312:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020316:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 802031a:	eef0 6a43 	vmov.f32	s13, s6
 802031e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020322:	ee16 5a90 	vmov	r5, s13
 8020326:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802032a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802032e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020332:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020336:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802033a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802033e:	ee12 2a90 	vmov	r2, s5
 8020342:	eef0 2a47 	vmov.f32	s5, s14
 8020346:	fb92 f3f3 	sdiv	r3, r2, r3
 802034a:	ee13 2a10 	vmov	r2, s6
 802034e:	932b      	str	r3, [sp, #172]	@ 0xac
 8020350:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020352:	eeb0 3a67 	vmov.f32	s6, s15
 8020356:	fb92 f3f3 	sdiv	r3, r2, r3
 802035a:	932c      	str	r3, [sp, #176]	@ 0xb0
 802035c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802035e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020360:	3b01      	subs	r3, #1
 8020362:	9319      	str	r3, [sp, #100]	@ 0x64
 8020364:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020366:	bf08      	it	eq
 8020368:	4613      	moveq	r3, r2
 802036a:	9309      	str	r3, [sp, #36]	@ 0x24
 802036c:	e5fa      	b.n	801ff64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802036e:	2900      	cmp	r1, #0
 8020370:	f43f ae6c 	beq.w	802004c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020374:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020378:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802037c:	900a      	str	r0, [sp, #40]	@ 0x28
 802037e:	0e00      	lsrs	r0, r0, #24
 8020380:	9013      	str	r0, [sp, #76]	@ 0x4c
 8020382:	e663      	b.n	802004c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020384:	f113 0801 	adds.w	r8, r3, #1
 8020388:	f53f af72 	bmi.w	8020270 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802038c:	4540      	cmp	r0, r8
 802038e:	f6ff af6f 	blt.w	8020270 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020392:	f11c 0801 	adds.w	r8, ip, #1
 8020396:	f53f af6b 	bmi.w	8020270 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802039a:	45c6      	cmp	lr, r8
 802039c:	f6ff af68 	blt.w	8020270 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80203a0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80203a2:	b200      	sxth	r0, r0
 80203a4:	9302      	str	r3, [sp, #8]
 80203a6:	fa0f f38e 	sxth.w	r3, lr
 80203aa:	9000      	str	r0, [sp, #0]
 80203ac:	9301      	str	r3, [sp, #4]
 80203ae:	4633      	mov	r3, r6
 80203b0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80203b2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80203b6:	e9cd c203 	strd	ip, r2, [sp, #12]
 80203ba:	4639      	mov	r1, r7
 80203bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80203be:	f7ff fc74 	bl	801fcaa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80203c2:	e755      	b.n	8020270 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80203c4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80203c6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80203ca:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80203cc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80203d0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80203d2:	1427      	asrs	r7, r4, #16
 80203d4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80203d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80203da:	142b      	asrs	r3, r5, #16
 80203dc:	fb01 7303 	mla	r3, r1, r3, r7
 80203e0:	18e7      	adds	r7, r4, r3
 80203e2:	5ce3      	ldrb	r3, [r4, r3]
 80203e4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80203e8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80203ec:	2a00      	cmp	r2, #0
 80203ee:	f000 812e 	beq.w	802064e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 80203f2:	f897 8001 	ldrb.w	r8, [r7, #1]
 80203f6:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80203fa:	9410      	str	r4, [sp, #64]	@ 0x40
 80203fc:	0e24      	lsrs	r4, r4, #24
 80203fe:	9417      	str	r4, [sp, #92]	@ 0x5c
 8020400:	b170      	cbz	r0, 8020420 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020402:	eb07 0801 	add.w	r8, r7, r1
 8020406:	5c79      	ldrb	r1, [r7, r1]
 8020408:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802040c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802040e:	0e09      	lsrs	r1, r1, #24
 8020410:	9114      	str	r1, [sp, #80]	@ 0x50
 8020412:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020416:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802041a:	9111      	str	r1, [sp, #68]	@ 0x44
 802041c:	0e09      	lsrs	r1, r1, #24
 802041e:	9118      	str	r1, [sp, #96]	@ 0x60
 8020420:	b292      	uxth	r2, r2
 8020422:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020424:	b280      	uxth	r0, r0
 8020426:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020428:	fb02 f900 	mul.w	r9, r2, r0
 802042c:	0112      	lsls	r2, r2, #4
 802042e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020432:	eba2 0809 	sub.w	r8, r2, r9
 8020436:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802043a:	b280      	uxth	r0, r0
 802043c:	fa1f f888 	uxth.w	r8, r8
 8020440:	1a12      	subs	r2, r2, r0
 8020442:	fb08 f101 	mul.w	r1, r8, r1
 8020446:	b292      	uxth	r2, r2
 8020448:	fb02 110c 	mla	r1, r2, ip, r1
 802044c:	fb00 1104 	mla	r1, r0, r4, r1
 8020450:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020452:	fb09 1104 	mla	r1, r9, r4, r1
 8020456:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802045a:	2900      	cmp	r1, #0
 802045c:	f000 80ec 	beq.w	8020638 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8020460:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8020464:	d019      	beq.n	802049a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8020466:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802046a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802046e:	fb0c fa0a 	mul.w	sl, ip, sl
 8020472:	fb0c fc03 	mul.w	ip, ip, r3
 8020476:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802047a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802047e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8020482:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020486:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802048a:	4453      	add	r3, sl
 802048c:	0a3f      	lsrs	r7, r7, #8
 802048e:	0a1b      	lsrs	r3, r3, #8
 8020490:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8020494:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020498:	433b      	orrs	r3, r7
 802049a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802049c:	2cff      	cmp	r4, #255	@ 0xff
 802049e:	d020      	beq.n	80204e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 80204a0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80204a2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80204a6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80204a8:	4367      	muls	r7, r4
 80204aa:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80204ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80204b0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80204b4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80204b6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80204ba:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80204be:	fb04 fa0a 	mul.w	sl, r4, sl
 80204c2:	44bc      	add	ip, r7
 80204c4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80204c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80204d0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80204d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80204dc:	ea4c 040a 	orr.w	r4, ip, sl
 80204e0:	9410      	str	r4, [sp, #64]	@ 0x40
 80204e2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80204e4:	2cff      	cmp	r4, #255	@ 0xff
 80204e6:	d020      	beq.n	802052a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 80204e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80204ea:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80204ee:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80204f0:	4367      	muls	r7, r4
 80204f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80204f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80204f8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80204fc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80204fe:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020502:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020506:	fb04 fa0a 	mul.w	sl, r4, sl
 802050a:	44bc      	add	ip, r7
 802050c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020510:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020514:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020518:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802051c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020520:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020524:	ea4c 040a 	orr.w	r4, ip, sl
 8020528:	940b      	str	r4, [sp, #44]	@ 0x2c
 802052a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802052c:	2cff      	cmp	r4, #255	@ 0xff
 802052e:	d020      	beq.n	8020572 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8020530:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020532:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020536:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020538:	4367      	muls	r7, r4
 802053a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802053c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020540:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020544:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020546:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802054a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802054e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020552:	44bc      	add	ip, r7
 8020554:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020558:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802055c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020560:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020564:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020568:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802056c:	ea4c 040a 	orr.w	r4, ip, sl
 8020570:	9411      	str	r4, [sp, #68]	@ 0x44
 8020572:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020574:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8020578:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802057c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020580:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020582:	fb08 f707 	mul.w	r7, r8, r7
 8020586:	fb02 770c 	mla	r7, r2, ip, r7
 802058a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802058e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020590:	fb00 770c 	mla	r7, r0, ip, r7
 8020594:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020598:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802059a:	fb09 770c 	mla	r7, r9, ip, r7
 802059e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80205a2:	fb08 f80c 	mul.w	r8, r8, ip
 80205a6:	0a3f      	lsrs	r7, r7, #8
 80205a8:	fb02 8303 	mla	r3, r2, r3, r8
 80205ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80205ae:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80205b2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80205b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80205b8:	fb00 330a 	mla	r3, r0, sl, r3
 80205bc:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80205c0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80205c2:	fb09 3c0c 	mla	ip, r9, ip, r3
 80205c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80205c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205cc:	434b      	muls	r3, r1
 80205ce:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80205d2:	1c59      	adds	r1, r3, #1
 80205d4:	ea47 070c 	orr.w	r7, r7, ip
 80205d8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80205dc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80205e0:	b2fa      	uxtb	r2, r7
 80205e2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80205e6:	fb12 f200 	smulbb	r2, r2, r0
 80205ea:	b2c9      	uxtb	r1, r1
 80205ec:	fb03 2301 	mla	r3, r3, r1, r2
 80205f0:	b29b      	uxth	r3, r3
 80205f2:	1c5a      	adds	r2, r3, #1
 80205f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80205f8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80205fc:	fb12 f201 	smulbb	r2, r2, r1
 8020600:	121b      	asrs	r3, r3, #8
 8020602:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020606:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802060a:	0c3f      	lsrs	r7, r7, #16
 802060c:	fb03 2300 	mla	r3, r3, r0, r2
 8020610:	b29b      	uxth	r3, r3
 8020612:	1c5a      	adds	r2, r3, #1
 8020614:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020618:	121b      	asrs	r3, r3, #8
 802061a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802061e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020622:	fb13 f101 	smulbb	r1, r3, r1
 8020626:	fb07 1700 	mla	r7, r7, r0, r1
 802062a:	b2bf      	uxth	r7, r7
 802062c:	1c7b      	adds	r3, r7, #1
 802062e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8020632:	123f      	asrs	r7, r7, #8
 8020634:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020638:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802063a:	f10e 0e03 	add.w	lr, lr, #3
 802063e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020640:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020644:	441a      	add	r2, r3
 8020646:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020648:	9229      	str	r2, [sp, #164]	@ 0xa4
 802064a:	441d      	add	r5, r3
 802064c:	e645      	b.n	80202da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802064e:	2800      	cmp	r0, #0
 8020650:	f43f aee6 	beq.w	8020420 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020654:	5c79      	ldrb	r1, [r7, r1]
 8020656:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802065a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802065c:	0e09      	lsrs	r1, r1, #24
 802065e:	9114      	str	r1, [sp, #80]	@ 0x50
 8020660:	e6de      	b.n	8020420 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020662:	b01f      	add	sp, #124	@ 0x7c
 8020664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020668 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802066c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8020670:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8020674:	2d00      	cmp	r5, #0
 8020676:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802067a:	fb05 700e 	mla	r0, r5, lr, r7
 802067e:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8020682:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 8020686:	eb02 0800 	add.w	r8, r2, r0
 802068a:	f2c0 8105 	blt.w	8020898 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 802068e:	45a9      	cmp	r9, r5
 8020690:	f340 8102 	ble.w	8020898 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8020694:	2f00      	cmp	r7, #0
 8020696:	f2c0 80fd 	blt.w	8020894 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 802069a:	45be      	cmp	lr, r7
 802069c:	f340 80fa 	ble.w	8020894 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80206a0:	5c12      	ldrb	r2, [r2, r0]
 80206a2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80206a6:	1c7a      	adds	r2, r7, #1
 80206a8:	f100 80f9 	bmi.w	802089e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80206ac:	4596      	cmp	lr, r2
 80206ae:	f340 80f6 	ble.w	802089e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80206b2:	2c00      	cmp	r4, #0
 80206b4:	f000 80f5 	beq.w	80208a2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 80206b8:	f898 2001 	ldrb.w	r2, [r8, #1]
 80206bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80206c0:	3501      	adds	r5, #1
 80206c2:	f100 80f2 	bmi.w	80208aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80206c6:	45a9      	cmp	r9, r5
 80206c8:	f340 80ef 	ble.w	80208aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80206cc:	f1bc 0f00 	cmp.w	ip, #0
 80206d0:	f000 80ee 	beq.w	80208b0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 80206d4:	2f00      	cmp	r7, #0
 80206d6:	f2c0 80e6 	blt.w	80208a6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80206da:	45be      	cmp	lr, r7
 80206dc:	f340 80e3 	ble.w	80208a6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80206e0:	f818 200e 	ldrb.w	r2, [r8, lr]
 80206e4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80206e8:	3701      	adds	r7, #1
 80206ea:	f100 80e4 	bmi.w	80208b6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80206ee:	45be      	cmp	lr, r7
 80206f0:	f340 80e1 	ble.w	80208b6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80206f4:	2c00      	cmp	r4, #0
 80206f6:	f000 80e0 	beq.w	80208ba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 80206fa:	44c6      	add	lr, r8
 80206fc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020700:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020704:	b2a3      	uxth	r3, r4
 8020706:	fa1f fc8c 	uxth.w	ip, ip
 802070a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802070e:	fb0c fe03 	mul.w	lr, ip, r3
 8020712:	011b      	lsls	r3, r3, #4
 8020714:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020718:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 802071c:	eba3 070e 	sub.w	r7, r3, lr
 8020720:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8020724:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020728:	fa1f f48c 	uxth.w	r4, ip
 802072c:	b2bf      	uxth	r7, r7
 802072e:	1b1b      	subs	r3, r3, r4
 8020730:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020734:	fb07 fc0a 	mul.w	ip, r7, sl
 8020738:	b29b      	uxth	r3, r3
 802073a:	fb03 cc0b 	mla	ip, r3, fp, ip
 802073e:	9300      	str	r3, [sp, #0]
 8020740:	fb04 cc09 	mla	ip, r4, r9, ip
 8020744:	fb0e cc08 	mla	ip, lr, r8, ip
 8020748:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802074c:	9301      	str	r3, [sp, #4]
 802074e:	2b00      	cmp	r3, #0
 8020750:	f000 809d 	beq.w	802088e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8020754:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8020758:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802075c:	fb0b fc0c 	mul.w	ip, fp, ip
 8020760:	fb0b f606 	mul.w	r6, fp, r6
 8020764:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020768:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802076c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8020770:	44dc      	add	ip, fp
 8020772:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8020776:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802077a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802077e:	fb0a fb0b 	mul.w	fp, sl, fp
 8020782:	fb0a fa00 	mul.w	sl, sl, r0
 8020786:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 802078a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802078e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8020792:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020796:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802079a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802079e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80207a2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80207a6:	0a36      	lsrs	r6, r6, #8
 80207a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80207ac:	44dc      	add	ip, fp
 80207ae:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80207b2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80207b6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80207ba:	fb09 fb0b 	mul.w	fp, r9, fp
 80207be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207c2:	fb09 f905 	mul.w	r9, r9, r5
 80207c6:	ea4f 201b 	mov.w	r0, fp, lsr #8
 80207ca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80207ce:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 80207d2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80207d6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80207da:	fb0c fc07 	mul.w	ip, ip, r7
 80207de:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80207e2:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 80207e6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80207ea:	4458      	add	r0, fp
 80207ec:	fb08 f505 	mul.w	r5, r8, r5
 80207f0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80207f4:	fb08 f802 	mul.w	r8, r8, r2
 80207f8:	0a00      	lsrs	r0, r0, #8
 80207fa:	0a2a      	lsrs	r2, r5, #8
 80207fc:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8020800:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020804:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020808:	4415      	add	r5, r2
 802080a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802080e:	0a2d      	lsrs	r5, r5, #8
 8020810:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020814:	9a00      	ldr	r2, [sp, #0]
 8020816:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802081a:	fb03 cc02 	mla	ip, r3, r2, ip
 802081e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020822:	9b01      	ldr	r3, [sp, #4]
 8020824:	fb05 c50e 	mla	r5, r5, lr, ip
 8020828:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802082c:	43db      	mvns	r3, r3
 802082e:	fb00 5004 	mla	r0, r0, r4, r5
 8020832:	b2db      	uxtb	r3, r3
 8020834:	0a00      	lsrs	r0, r0, #8
 8020836:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 802083a:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 802083e:	4378      	muls	r0, r7
 8020840:	fb02 0006 	mla	r0, r2, r6, r0
 8020844:	780a      	ldrb	r2, [r1, #0]
 8020846:	fb0e 0e08 	mla	lr, lr, r8, r0
 802084a:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 802084e:	fb04 e000 	mla	r0, r4, r0, lr
 8020852:	fb02 f403 	mul.w	r4, r2, r3
 8020856:	0a00      	lsrs	r0, r0, #8
 8020858:	1c62      	adds	r2, r4, #1
 802085a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802085e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020862:	4328      	orrs	r0, r5
 8020864:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020868:	700a      	strb	r2, [r1, #0]
 802086a:	784a      	ldrb	r2, [r1, #1]
 802086c:	435a      	muls	r2, r3
 802086e:	1c54      	adds	r4, r2, #1
 8020870:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8020874:	0a02      	lsrs	r2, r0, #8
 8020876:	0c00      	lsrs	r0, r0, #16
 8020878:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802087c:	704a      	strb	r2, [r1, #1]
 802087e:	788a      	ldrb	r2, [r1, #2]
 8020880:	4353      	muls	r3, r2
 8020882:	1c5a      	adds	r2, r3, #1
 8020884:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020888:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802088c:	7088      	strb	r0, [r1, #2]
 802088e:	b003      	add	sp, #12
 8020890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020894:	2600      	movs	r6, #0
 8020896:	e706      	b.n	80206a6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8020898:	2000      	movs	r0, #0
 802089a:	4606      	mov	r6, r0
 802089c:	e710      	b.n	80206c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802089e:	2000      	movs	r0, #0
 80208a0:	e70e      	b.n	80206c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80208a2:	4620      	mov	r0, r4
 80208a4:	e70c      	b.n	80206c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80208a6:	2500      	movs	r5, #0
 80208a8:	e71e      	b.n	80206e8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 80208aa:	2200      	movs	r2, #0
 80208ac:	4615      	mov	r5, r2
 80208ae:	e729      	b.n	8020704 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80208b0:	4662      	mov	r2, ip
 80208b2:	4665      	mov	r5, ip
 80208b4:	e726      	b.n	8020704 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80208b6:	2200      	movs	r2, #0
 80208b8:	e724      	b.n	8020704 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80208ba:	4622      	mov	r2, r4
 80208bc:	e722      	b.n	8020704 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

080208be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208c2:	b09b      	sub	sp, #108	@ 0x6c
 80208c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80208c8:	9218      	str	r2, [sp, #96]	@ 0x60
 80208ca:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80208cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80208ce:	9116      	str	r1, [sp, #88]	@ 0x58
 80208d0:	6850      	ldr	r0, [r2, #4]
 80208d2:	9307      	str	r3, [sp, #28]
 80208d4:	6812      	ldr	r2, [r2, #0]
 80208d6:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80208d8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80208dc:	fb00 1303 	mla	r3, r0, r3, r1
 80208e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208e4:	18d3      	adds	r3, r2, r3
 80208e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80208e8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80208ea:	681b      	ldr	r3, [r3, #0]
 80208ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80208ee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80208f0:	685e      	ldr	r6, [r3, #4]
 80208f2:	3604      	adds	r6, #4
 80208f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80208f6:	2b00      	cmp	r3, #0
 80208f8:	dc03      	bgt.n	8020902 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80208fa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80208fc:	2b00      	cmp	r3, #0
 80208fe:	f340 834f 	ble.w	8020fa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8020902:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020904:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020908:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802090c:	1e48      	subs	r0, r1, #1
 802090e:	1e57      	subs	r7, r2, #1
 8020910:	9b07      	ldr	r3, [sp, #28]
 8020912:	2b00      	cmp	r3, #0
 8020914:	f340 8178 	ble.w	8020c08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020918:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802091a:	142b      	asrs	r3, r5, #16
 802091c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020920:	d406      	bmi.n	8020930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020922:	4584      	cmp	ip, r0
 8020924:	da04      	bge.n	8020930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020926:	2b00      	cmp	r3, #0
 8020928:	db02      	blt.n	8020930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802092a:	42bb      	cmp	r3, r7
 802092c:	f2c0 816d 	blt.w	8020c0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8020930:	f11c 0c01 	adds.w	ip, ip, #1
 8020934:	f100 815b 	bmi.w	8020bee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020938:	4561      	cmp	r1, ip
 802093a:	f2c0 8158 	blt.w	8020bee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802093e:	3301      	adds	r3, #1
 8020940:	f100 8155 	bmi.w	8020bee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020944:	429a      	cmp	r2, r3
 8020946:	f2c0 8152 	blt.w	8020bee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802094a:	9b07      	ldr	r3, [sp, #28]
 802094c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802094e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020950:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020952:	2b00      	cmp	r3, #0
 8020954:	f340 8178 	ble.w	8020c48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020958:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802095a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802095e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020962:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020966:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020968:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802096c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802096e:	141b      	asrs	r3, r3, #16
 8020970:	f100 81ba 	bmi.w	8020ce8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020974:	f101 38ff 	add.w	r8, r1, #4294967295
 8020978:	4543      	cmp	r3, r8
 802097a:	f280 81b5 	bge.w	8020ce8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802097e:	f1bc 0f00 	cmp.w	ip, #0
 8020982:	f2c0 81b1 	blt.w	8020ce8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020986:	f10e 38ff 	add.w	r8, lr, #4294967295
 802098a:	45c4      	cmp	ip, r8
 802098c:	f280 81ac 	bge.w	8020ce8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020990:	b209      	sxth	r1, r1
 8020992:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020994:	fb0c 3301 	mla	r3, ip, r1, r3
 8020998:	eb04 0803 	add.w	r8, r4, r3
 802099c:	5ce3      	ldrb	r3, [r4, r3]
 802099e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80209a2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80209a6:	2a00      	cmp	r2, #0
 80209a8:	f000 8193 	beq.w	8020cd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80209ac:	f898 c001 	ldrb.w	ip, [r8, #1]
 80209b0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80209b4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80209b6:	0e24      	lsrs	r4, r4, #24
 80209b8:	9412      	str	r4, [sp, #72]	@ 0x48
 80209ba:	b178      	cbz	r0, 80209dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80209bc:	eb08 0c01 	add.w	ip, r8, r1
 80209c0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80209c4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80209c8:	9108      	str	r1, [sp, #32]
 80209ca:	0e09      	lsrs	r1, r1, #24
 80209cc:	9110      	str	r1, [sp, #64]	@ 0x40
 80209ce:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80209d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80209d6:	910c      	str	r1, [sp, #48]	@ 0x30
 80209d8:	0e09      	lsrs	r1, r1, #24
 80209da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80209dc:	b292      	uxth	r2, r2
 80209de:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80209e0:	b280      	uxth	r0, r0
 80209e2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80209e4:	fb02 f900 	mul.w	r9, r2, r0
 80209e8:	0112      	lsls	r2, r2, #4
 80209ea:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80209ee:	eba2 0809 	sub.w	r8, r2, r9
 80209f2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80209f6:	b280      	uxth	r0, r0
 80209f8:	fa1f f888 	uxth.w	r8, r8
 80209fc:	1a12      	subs	r2, r2, r0
 80209fe:	fb08 f101 	mul.w	r1, r8, r1
 8020a02:	b292      	uxth	r2, r2
 8020a04:	fb02 110e 	mla	r1, r2, lr, r1
 8020a08:	fb00 1104 	mla	r1, r0, r4, r1
 8020a0c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020a0e:	fb09 1104 	mla	r1, r9, r4, r1
 8020a12:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020a16:	2900      	cmp	r1, #0
 8020a18:	f000 80de 	beq.w	8020bd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020a1c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020a20:	d01b      	beq.n	8020a5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8020a22:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020a26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020a2a:	fb0e fa0a 	mul.w	sl, lr, sl
 8020a2e:	fb0e fe03 	mul.w	lr, lr, r3
 8020a32:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020a36:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020a3a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020a3e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020a42:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020a46:	4453      	add	r3, sl
 8020a48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a4c:	0a1b      	lsrs	r3, r3, #8
 8020a4e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020a52:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020a56:	ea43 030c 	orr.w	r3, r3, ip
 8020a5a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020a5c:	2cff      	cmp	r4, #255	@ 0xff
 8020a5e:	d021      	beq.n	8020aa4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020a60:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020a62:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020a66:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020a68:	fb04 fb0b 	mul.w	fp, r4, fp
 8020a6c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020a6e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020a72:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020a74:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020a78:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020a7c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a80:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020a84:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020a88:	44de      	add	lr, fp
 8020a8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a96:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020a9a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020a9e:	ea4e 040a 	orr.w	r4, lr, sl
 8020aa2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020aa4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020aa6:	2cff      	cmp	r4, #255	@ 0xff
 8020aa8:	d021      	beq.n	8020aee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020aaa:	9c08      	ldr	r4, [sp, #32]
 8020aac:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020ab0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020ab2:	fb04 fb0b 	mul.w	fp, r4, fp
 8020ab6:	9c08      	ldr	r4, [sp, #32]
 8020ab8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020abc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020abe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020ac2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020ac6:	fb04 fa0a 	mul.w	sl, r4, sl
 8020aca:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020ace:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020ad2:	44de      	add	lr, fp
 8020ad4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020ad8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020adc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ae0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020ae4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020ae8:	ea4e 040a 	orr.w	r4, lr, sl
 8020aec:	9408      	str	r4, [sp, #32]
 8020aee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020af0:	2cff      	cmp	r4, #255	@ 0xff
 8020af2:	d021      	beq.n	8020b38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020af4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020af6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020afa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020afc:	fb04 fb0b 	mul.w	fp, r4, fp
 8020b00:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020b02:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020b06:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020b08:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020b0c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020b10:	fb04 fa0a 	mul.w	sl, r4, sl
 8020b14:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020b18:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020b1c:	44de      	add	lr, fp
 8020b1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020b22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020b26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b2a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020b2e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020b32:	ea4e 040a 	orr.w	r4, lr, sl
 8020b36:	940c      	str	r4, [sp, #48]	@ 0x30
 8020b38:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020b3a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8020b3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020b42:	43c9      	mvns	r1, r1
 8020b44:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020b48:	9c08      	ldr	r4, [sp, #32]
 8020b4a:	b2c9      	uxtb	r1, r1
 8020b4c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020b50:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020b54:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020b58:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020b5a:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020b5e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020b62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020b64:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020b68:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020b6c:	fb08 f80e 	mul.w	r8, r8, lr
 8020b70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b74:	fb02 8303 	mla	r3, r2, r3, r8
 8020b78:	9a08      	ldr	r2, [sp, #32]
 8020b7a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020b7e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020b82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020b84:	fb00 330a 	mla	r3, r0, sl, r3
 8020b88:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8020b8c:	fb09 3900 	mla	r9, r9, r0, r3
 8020b90:	783b      	ldrb	r3, [r7, #0]
 8020b92:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020b96:	fb03 f201 	mul.w	r2, r3, r1
 8020b9a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8020b9e:	1c53      	adds	r3, r2, #1
 8020ba0:	ea4c 0c09 	orr.w	ip, ip, r9
 8020ba4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020ba8:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020bac:	703b      	strb	r3, [r7, #0]
 8020bae:	787b      	ldrb	r3, [r7, #1]
 8020bb0:	434b      	muls	r3, r1
 8020bb2:	1c5a      	adds	r2, r3, #1
 8020bb4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020bb8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020bbc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020bc0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020bc4:	707b      	strb	r3, [r7, #1]
 8020bc6:	78bb      	ldrb	r3, [r7, #2]
 8020bc8:	4359      	muls	r1, r3
 8020bca:	1c4b      	adds	r3, r1, #1
 8020bcc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020bd0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020bd4:	f887 c002 	strb.w	ip, [r7, #2]
 8020bd8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020bda:	3703      	adds	r7, #3
 8020bdc:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020bde:	441a      	add	r2, r3
 8020be0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020be2:	441d      	add	r5, r3
 8020be4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020be6:	9225      	str	r2, [sp, #148]	@ 0x94
 8020be8:	3b01      	subs	r3, #1
 8020bea:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020bec:	e6b0      	b.n	8020950 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020bee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020bf0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020bf2:	441c      	add	r4, r3
 8020bf4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020bf6:	441d      	add	r5, r3
 8020bf8:	9b07      	ldr	r3, [sp, #28]
 8020bfa:	9425      	str	r4, [sp, #148]	@ 0x94
 8020bfc:	3b01      	subs	r3, #1
 8020bfe:	9307      	str	r3, [sp, #28]
 8020c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020c02:	3303      	adds	r3, #3
 8020c04:	930a      	str	r3, [sp, #40]	@ 0x28
 8020c06:	e683      	b.n	8020910 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020c08:	d026      	beq.n	8020c58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8020c0a:	9b07      	ldr	r3, [sp, #28]
 8020c0c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8020c0e:	3b01      	subs	r3, #1
 8020c10:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020c12:	fb00 4003 	mla	r0, r0, r3, r4
 8020c16:	1400      	asrs	r0, r0, #16
 8020c18:	f53f ae97 	bmi.w	802094a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020c1c:	3901      	subs	r1, #1
 8020c1e:	4288      	cmp	r0, r1
 8020c20:	f6bf ae93 	bge.w	802094a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020c24:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8020c26:	fb01 5303 	mla	r3, r1, r3, r5
 8020c2a:	141b      	asrs	r3, r3, #16
 8020c2c:	f53f ae8d 	bmi.w	802094a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020c30:	3a01      	subs	r2, #1
 8020c32:	4293      	cmp	r3, r2
 8020c34:	f6bf ae89 	bge.w	802094a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020c3a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020c3e:	f103 0e03 	add.w	lr, r3, #3
 8020c42:	f1bb 0f00 	cmp.w	fp, #0
 8020c46:	dc6d      	bgt.n	8020d24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8020c48:	9b07      	ldr	r3, [sp, #28]
 8020c4a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020c4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020c50:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020c54:	4423      	add	r3, r4
 8020c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8020c58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	f340 81a0 	ble.w	8020fa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8020c60:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020c66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c6a:	eeb0 6a62 	vmov.f32	s12, s5
 8020c6e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020c72:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c7a:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 8020c7e:	eeb0 6a43 	vmov.f32	s12, s6
 8020c82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c86:	ee16 5a10 	vmov	r5, s12
 8020c8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020c92:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020c96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020c9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020c9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020ca2:	ee12 2a90 	vmov	r2, s5
 8020ca6:	eef0 2a47 	vmov.f32	s5, s14
 8020caa:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cae:	ee13 2a10 	vmov	r2, s6
 8020cb2:	9327      	str	r3, [sp, #156]	@ 0x9c
 8020cb4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020cb6:	eeb0 3a67 	vmov.f32	s6, s15
 8020cba:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cbe:	9328      	str	r3, [sp, #160]	@ 0xa0
 8020cc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020cc2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020cc4:	3b01      	subs	r3, #1
 8020cc6:	9316      	str	r3, [sp, #88]	@ 0x58
 8020cc8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020cca:	bf08      	it	eq
 8020ccc:	4613      	moveq	r3, r2
 8020cce:	9307      	str	r3, [sp, #28]
 8020cd0:	e610      	b.n	80208f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020cd2:	2800      	cmp	r0, #0
 8020cd4:	f43f ae82 	beq.w	80209dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020cd8:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020cdc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020ce0:	9108      	str	r1, [sp, #32]
 8020ce2:	0e09      	lsrs	r1, r1, #24
 8020ce4:	9110      	str	r1, [sp, #64]	@ 0x40
 8020ce6:	e679      	b.n	80209dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020ce8:	f113 0801 	adds.w	r8, r3, #1
 8020cec:	f53f af74 	bmi.w	8020bd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020cf0:	4541      	cmp	r1, r8
 8020cf2:	f6ff af71 	blt.w	8020bd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020cf6:	f11c 0801 	adds.w	r8, ip, #1
 8020cfa:	f53f af6d 	bmi.w	8020bd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020cfe:	45c6      	cmp	lr, r8
 8020d00:	f6ff af6a 	blt.w	8020bd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020d04:	b209      	sxth	r1, r1
 8020d06:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020d0a:	fa0f f38e 	sxth.w	r3, lr
 8020d0e:	9100      	str	r1, [sp, #0]
 8020d10:	4639      	mov	r1, r7
 8020d12:	9301      	str	r3, [sp, #4]
 8020d14:	4633      	mov	r3, r6
 8020d16:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020d1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020d1c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8020d1e:	f7ff fca3 	bl	8020668 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020d22:	e759      	b.n	8020bd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020d24:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020d26:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020d2a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020d2c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020d30:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020d32:	1427      	asrs	r7, r4, #16
 8020d34:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020d36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020d3a:	142b      	asrs	r3, r5, #16
 8020d3c:	fb01 7303 	mla	r3, r1, r3, r7
 8020d40:	18e7      	adds	r7, r4, r3
 8020d42:	5ce3      	ldrb	r3, [r4, r3]
 8020d44:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020d48:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020d4c:	2a00      	cmp	r2, #0
 8020d4e:	f000 811d 	beq.w	8020f8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8020d52:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020d56:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8020d5a:	940d      	str	r4, [sp, #52]	@ 0x34
 8020d5c:	0e24      	lsrs	r4, r4, #24
 8020d5e:	9414      	str	r4, [sp, #80]	@ 0x50
 8020d60:	b170      	cbz	r0, 8020d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020d62:	eb07 0801 	add.w	r8, r7, r1
 8020d66:	5c79      	ldrb	r1, [r7, r1]
 8020d68:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020d6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8020d6e:	0e09      	lsrs	r1, r1, #24
 8020d70:	9111      	str	r1, [sp, #68]	@ 0x44
 8020d72:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020d76:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020d7a:	910e      	str	r1, [sp, #56]	@ 0x38
 8020d7c:	0e09      	lsrs	r1, r1, #24
 8020d7e:	9115      	str	r1, [sp, #84]	@ 0x54
 8020d80:	b292      	uxth	r2, r2
 8020d82:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020d84:	b280      	uxth	r0, r0
 8020d86:	fb02 f900 	mul.w	r9, r2, r0
 8020d8a:	0112      	lsls	r2, r2, #4
 8020d8c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020d90:	eba2 0809 	sub.w	r8, r2, r9
 8020d94:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8020d98:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020d9a:	b280      	uxth	r0, r0
 8020d9c:	fa1f f888 	uxth.w	r8, r8
 8020da0:	1a09      	subs	r1, r1, r0
 8020da2:	fb08 f202 	mul.w	r2, r8, r2
 8020da6:	b289      	uxth	r1, r1
 8020da8:	fb01 220c 	mla	r2, r1, ip, r2
 8020dac:	fb00 2204 	mla	r2, r0, r4, r2
 8020db0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020db2:	fb09 2204 	mla	r2, r9, r4, r2
 8020db6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020dba:	2a00      	cmp	r2, #0
 8020dbc:	f000 80db 	beq.w	8020f76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8020dc0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8020dc4:	d019      	beq.n	8020dfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8020dc6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020dca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020dce:	fb0c fa0a 	mul.w	sl, ip, sl
 8020dd2:	fb0c fc03 	mul.w	ip, ip, r3
 8020dd6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020dda:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020dde:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8020de2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020de6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020dea:	4453      	add	r3, sl
 8020dec:	0a3f      	lsrs	r7, r7, #8
 8020dee:	0a1b      	lsrs	r3, r3, #8
 8020df0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8020df4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020df8:	433b      	orrs	r3, r7
 8020dfa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020dfc:	2cff      	cmp	r4, #255	@ 0xff
 8020dfe:	d020      	beq.n	8020e42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8020e00:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020e02:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020e06:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020e08:	4367      	muls	r7, r4
 8020e0a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020e0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020e10:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020e14:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020e16:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020e1a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020e1e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e22:	44bc      	add	ip, r7
 8020e24:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020e28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020e30:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020e34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e38:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020e3c:	ea4c 040a 	orr.w	r4, ip, sl
 8020e40:	940d      	str	r4, [sp, #52]	@ 0x34
 8020e42:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020e44:	2cff      	cmp	r4, #255	@ 0xff
 8020e46:	d020      	beq.n	8020e8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8020e48:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020e4a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020e4e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020e50:	4367      	muls	r7, r4
 8020e52:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020e54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020e58:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020e5c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020e5e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020e62:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020e66:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e6a:	44bc      	add	ip, r7
 8020e6c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020e70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020e78:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020e7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e80:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020e84:	ea4c 040a 	orr.w	r4, ip, sl
 8020e88:	9409      	str	r4, [sp, #36]	@ 0x24
 8020e8a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020e8c:	2cff      	cmp	r4, #255	@ 0xff
 8020e8e:	d020      	beq.n	8020ed2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8020e90:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020e92:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020e96:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020e98:	4367      	muls	r7, r4
 8020e9a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020e9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020ea0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020ea4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020ea6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020eaa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020eae:	fb04 fa0a 	mul.w	sl, r4, sl
 8020eb2:	44bc      	add	ip, r7
 8020eb4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020eb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ebc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020ec0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020ec4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ec8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020ecc:	ea4c 040a 	orr.w	r4, ip, sl
 8020ed0:	940e      	str	r4, [sp, #56]	@ 0x38
 8020ed2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020ed4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8020ed8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020edc:	43d2      	mvns	r2, r2
 8020ede:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020ee2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020ee4:	b2d2      	uxtb	r2, r2
 8020ee6:	fb08 f707 	mul.w	r7, r8, r7
 8020eea:	fb01 770c 	mla	r7, r1, ip, r7
 8020eee:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020ef2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020ef4:	fb00 770c 	mla	r7, r0, ip, r7
 8020ef8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020efc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020efe:	fb09 770c 	mla	r7, r9, ip, r7
 8020f02:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8020f06:	fb08 f80c 	mul.w	r8, r8, ip
 8020f0a:	0a3f      	lsrs	r7, r7, #8
 8020f0c:	fb01 8303 	mla	r3, r1, r3, r8
 8020f10:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020f12:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8020f16:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8020f1a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020f1c:	fb00 330a 	mla	r3, r0, sl, r3
 8020f20:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8020f24:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020f28:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020f2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f30:	fb03 f102 	mul.w	r1, r3, r2
 8020f34:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020f38:	1c4b      	adds	r3, r1, #1
 8020f3a:	ea47 070c 	orr.w	r7, r7, ip
 8020f3e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020f42:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8020f46:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020f4a:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8020f4e:	4353      	muls	r3, r2
 8020f50:	1c59      	adds	r1, r3, #1
 8020f52:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020f56:	0a3b      	lsrs	r3, r7, #8
 8020f58:	0c3f      	lsrs	r7, r7, #16
 8020f5a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020f5e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020f62:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020f66:	435a      	muls	r2, r3
 8020f68:	1c53      	adds	r3, r2, #1
 8020f6a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020f6e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020f72:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020f76:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020f78:	f10e 0e03 	add.w	lr, lr, #3
 8020f7c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020f7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020f82:	441a      	add	r2, r3
 8020f84:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020f86:	9225      	str	r2, [sp, #148]	@ 0x94
 8020f88:	441d      	add	r5, r3
 8020f8a:	e65a      	b.n	8020c42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020f8c:	2800      	cmp	r0, #0
 8020f8e:	f43f aef7 	beq.w	8020d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020f92:	5c79      	ldrb	r1, [r7, r1]
 8020f94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f98:	9109      	str	r1, [sp, #36]	@ 0x24
 8020f9a:	0e09      	lsrs	r1, r1, #24
 8020f9c:	9111      	str	r1, [sp, #68]	@ 0x44
 8020f9e:	e6ef      	b.n	8020d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020fa0:	b01b      	add	sp, #108	@ 0x6c
 8020fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020fa6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8020fa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020faa:	b08d      	sub	sp, #52	@ 0x34
 8020fac:	468b      	mov	fp, r1
 8020fae:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 8020fb2:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 8020fb6:	fb0c 5703 	mla	r7, ip, r3, r5
 8020fba:	f1bc 0f00 	cmp.w	ip, #0
 8020fbe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020fc0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020fc4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 8020fc8:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8020fcc:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8020fd0:	eb02 0607 	add.w	r6, r2, r7
 8020fd4:	f89b 4000 	ldrb.w	r4, [fp]
 8020fd8:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8020fdc:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8020fe0:	f2c0 80c1 	blt.w	8021166 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8020fe4:	45e6      	cmp	lr, ip
 8020fe6:	f340 80be 	ble.w	8021166 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8020fea:	2d00      	cmp	r5, #0
 8020fec:	f2c0 80b7 	blt.w	802115e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8020ff0:	42ab      	cmp	r3, r5
 8020ff2:	f340 80b4 	ble.w	802115e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8020ff6:	5dd2      	ldrb	r2, [r2, r7]
 8020ff8:	9205      	str	r2, [sp, #20]
 8020ffa:	7872      	ldrb	r2, [r6, #1]
 8020ffc:	9206      	str	r2, [sp, #24]
 8020ffe:	78b2      	ldrb	r2, [r6, #2]
 8021000:	9207      	str	r2, [sp, #28]
 8021002:	1c6a      	adds	r2, r5, #1
 8021004:	f100 80b6 	bmi.w	8021174 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8021008:	4293      	cmp	r3, r2
 802100a:	f340 80b3 	ble.w	8021174 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802100e:	f1b8 0f00 	cmp.w	r8, #0
 8021012:	f000 80af 	beq.w	8021174 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8021016:	78f2      	ldrb	r2, [r6, #3]
 8021018:	9201      	str	r2, [sp, #4]
 802101a:	7932      	ldrb	r2, [r6, #4]
 802101c:	9202      	str	r2, [sp, #8]
 802101e:	7972      	ldrb	r2, [r6, #5]
 8021020:	9203      	str	r2, [sp, #12]
 8021022:	f11c 0c01 	adds.w	ip, ip, #1
 8021026:	f100 80ad 	bmi.w	8021184 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802102a:	45e6      	cmp	lr, ip
 802102c:	f340 80aa 	ble.w	8021184 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8021030:	f1ba 0f00 	cmp.w	sl, #0
 8021034:	f000 80a6 	beq.w	8021184 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8021038:	2d00      	cmp	r5, #0
 802103a:	f2c0 809f 	blt.w	802117c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 802103e:	42ab      	cmp	r3, r5
 8021040:	f340 809c 	ble.w	802117c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8021044:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021048:	f816 9002 	ldrb.w	r9, [r6, r2]
 802104c:	2203      	movs	r2, #3
 802104e:	fb03 6c02 	mla	ip, r3, r2, r6
 8021052:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8021056:	f89c e002 	ldrb.w	lr, [ip, #2]
 802105a:	9704      	str	r7, [sp, #16]
 802105c:	3501      	adds	r5, #1
 802105e:	f100 8098 	bmi.w	8021192 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8021062:	42ab      	cmp	r3, r5
 8021064:	f340 8095 	ble.w	8021192 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8021068:	f1b8 0f00 	cmp.w	r8, #0
 802106c:	f000 8091 	beq.w	8021192 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8021070:	f04f 0c03 	mov.w	ip, #3
 8021074:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8021078:	5cb5      	ldrb	r5, [r6, r2]
 802107a:	fb03 620c 	mla	r2, r3, ip, r6
 802107e:	fb03 630c 	mla	r3, r3, ip, r6
 8021082:	7912      	ldrb	r2, [r2, #4]
 8021084:	795e      	ldrb	r6, [r3, #5]
 8021086:	fa1f f388 	uxth.w	r3, r8
 802108a:	fa1f fc8a 	uxth.w	ip, sl
 802108e:	fb03 f70c 	mul.w	r7, r3, ip
 8021092:	011b      	lsls	r3, r3, #4
 8021094:	9708      	str	r7, [sp, #32]
 8021096:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 802109a:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 802109e:	1bdb      	subs	r3, r3, r7
 80210a0:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 80210a4:	fa1f fc8c 	uxth.w	ip, ip
 80210a8:	b29b      	uxth	r3, r3
 80210aa:	9709      	str	r7, [sp, #36]	@ 0x24
 80210ac:	ebaa 0a0c 	sub.w	sl, sl, ip
 80210b0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80210b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80210b4:	fa1f fa8a 	uxth.w	sl, sl
 80210b8:	ea6f 0807 	mvn.w	r8, r7
 80210bc:	9f01      	ldr	r7, [sp, #4]
 80210be:	435f      	muls	r7, r3
 80210c0:	9b05      	ldr	r3, [sp, #20]
 80210c2:	fa5f f888 	uxtb.w	r8, r8
 80210c6:	fb0a 7703 	mla	r7, sl, r3, r7
 80210ca:	9b08      	ldr	r3, [sp, #32]
 80210cc:	fb14 f408 	smulbb	r4, r4, r8
 80210d0:	fb0c 7709 	mla	r7, ip, r9, r7
 80210d4:	fb10 f008 	smulbb	r0, r0, r8
 80210d8:	fb11 f108 	smulbb	r1, r1, r8
 80210dc:	fb03 7705 	mla	r7, r3, r5, r7
 80210e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80210e2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80210e6:	fb07 4703 	mla	r7, r7, r3, r4
 80210ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80210ec:	b2bf      	uxth	r7, r7
 80210ee:	1c7c      	adds	r4, r7, #1
 80210f0:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 80210f4:	1224      	asrs	r4, r4, #8
 80210f6:	f88b 4000 	strb.w	r4, [fp]
 80210fa:	9c02      	ldr	r4, [sp, #8]
 80210fc:	435c      	muls	r4, r3
 80210fe:	9b06      	ldr	r3, [sp, #24]
 8021100:	fb0a 4403 	mla	r4, sl, r3, r4
 8021104:	9b04      	ldr	r3, [sp, #16]
 8021106:	fb0c 4403 	mla	r4, ip, r3, r4
 802110a:	9b08      	ldr	r3, [sp, #32]
 802110c:	fb03 4402 	mla	r4, r3, r2, r4
 8021110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021114:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021118:	fb04 0403 	mla	r4, r4, r3, r0
 802111c:	9b03      	ldr	r3, [sp, #12]
 802111e:	435a      	muls	r2, r3
 8021120:	b2a4      	uxth	r4, r4
 8021122:	4613      	mov	r3, r2
 8021124:	9a07      	ldr	r2, [sp, #28]
 8021126:	1c60      	adds	r0, r4, #1
 8021128:	fb0a 3a02 	mla	sl, sl, r2, r3
 802112c:	9b08      	ldr	r3, [sp, #32]
 802112e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8021132:	fb0c ac0e 	mla	ip, ip, lr, sl
 8021136:	1224      	asrs	r4, r4, #8
 8021138:	fb03 c606 	mla	r6, r3, r6, ip
 802113c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802113e:	f88b 4001 	strb.w	r4, [fp, #1]
 8021142:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021146:	fb06 1103 	mla	r1, r6, r3, r1
 802114a:	b289      	uxth	r1, r1
 802114c:	1c4e      	adds	r6, r1, #1
 802114e:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8021152:	1209      	asrs	r1, r1, #8
 8021154:	f88b 1002 	strb.w	r1, [fp, #2]
 8021158:	b00d      	add	sp, #52	@ 0x34
 802115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802115e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021162:	9405      	str	r4, [sp, #20]
 8021164:	e74d      	b.n	8021002 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8021166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802116a:	9401      	str	r4, [sp, #4]
 802116c:	9405      	str	r4, [sp, #20]
 802116e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021172:	e756      	b.n	8021022 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8021174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021178:	9401      	str	r4, [sp, #4]
 802117a:	e752      	b.n	8021022 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 802117c:	468e      	mov	lr, r1
 802117e:	9004      	str	r0, [sp, #16]
 8021180:	46a1      	mov	r9, r4
 8021182:	e76b      	b.n	802105c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8021184:	460e      	mov	r6, r1
 8021186:	4602      	mov	r2, r0
 8021188:	4625      	mov	r5, r4
 802118a:	468e      	mov	lr, r1
 802118c:	9004      	str	r0, [sp, #16]
 802118e:	46a1      	mov	r9, r4
 8021190:	e779      	b.n	8021086 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8021192:	460e      	mov	r6, r1
 8021194:	4602      	mov	r2, r0
 8021196:	4625      	mov	r5, r4
 8021198:	e775      	b.n	8021086 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0802119a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802119a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802119e:	b09f      	sub	sp, #124	@ 0x7c
 80211a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80211a2:	9307      	str	r3, [sp, #28]
 80211a4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80211a6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80211aa:	901d      	str	r0, [sp, #116]	@ 0x74
 80211ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80211ae:	6850      	ldr	r0, [r2, #4]
 80211b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80211b2:	6812      	ldr	r2, [r2, #0]
 80211b4:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80211b8:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 80211bc:	fb00 1303 	mla	r3, r0, r3, r1
 80211c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80211c4:	18d3      	adds	r3, r2, r3
 80211c6:	9308      	str	r3, [sp, #32]
 80211c8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80211ca:	681b      	ldr	r3, [r3, #0]
 80211cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80211ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80211d0:	43db      	mvns	r3, r3
 80211d2:	b2db      	uxtb	r3, r3
 80211d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80211d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80211d8:	2b00      	cmp	r3, #0
 80211da:	dc03      	bgt.n	80211e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80211dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80211de:	2b00      	cmp	r3, #0
 80211e0:	f340 81f5 	ble.w	80215ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80211e4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80211e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80211ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80211ee:	1e48      	subs	r0, r1, #1
 80211f0:	1e54      	subs	r4, r2, #1
 80211f2:	9b07      	ldr	r3, [sp, #28]
 80211f4:	2b00      	cmp	r3, #0
 80211f6:	f340 80d5 	ble.w	80213a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80211fa:	ea5f 452a 	movs.w	r5, sl, asr #16
 80211fe:	ea4f 4328 	mov.w	r3, r8, asr #16
 8021202:	d406      	bmi.n	8021212 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021204:	4285      	cmp	r5, r0
 8021206:	da04      	bge.n	8021212 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021208:	2b00      	cmp	r3, #0
 802120a:	db02      	blt.n	8021212 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802120c:	42a3      	cmp	r3, r4
 802120e:	f2c0 80ca 	blt.w	80213a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021212:	3501      	adds	r5, #1
 8021214:	f100 80bb 	bmi.w	802138e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021218:	42a9      	cmp	r1, r5
 802121a:	f2c0 80b8 	blt.w	802138e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802121e:	3301      	adds	r3, #1
 8021220:	f100 80b5 	bmi.w	802138e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021224:	429a      	cmp	r2, r3
 8021226:	f2c0 80b2 	blt.w	802138e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802122a:	9b07      	ldr	r3, [sp, #28]
 802122c:	9d08      	ldr	r5, [sp, #32]
 802122e:	930d      	str	r3, [sp, #52]	@ 0x34
 8021230:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021232:	2b00      	cmp	r3, #0
 8021234:	f340 80d6 	ble.w	80213e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8021238:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 802123a:	ea4f 4428 	mov.w	r4, r8, asr #16
 802123e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021240:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8021244:	68c6      	ldr	r6, [r0, #12]
 8021246:	ea5f 402a 	movs.w	r0, sl, asr #16
 802124a:	f3c8 3103 	ubfx	r1, r8, #12, #4
 802124e:	689b      	ldr	r3, [r3, #8]
 8021250:	f100 810f 	bmi.w	8021472 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021254:	1e5f      	subs	r7, r3, #1
 8021256:	42b8      	cmp	r0, r7
 8021258:	f280 810b 	bge.w	8021472 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802125c:	2c00      	cmp	r4, #0
 802125e:	f2c0 8108 	blt.w	8021472 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021262:	1e77      	subs	r7, r6, #1
 8021264:	42bc      	cmp	r4, r7
 8021266:	f280 8104 	bge.w	8021472 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802126a:	b21b      	sxth	r3, r3
 802126c:	fb04 0003 	mla	r0, r4, r3, r0
 8021270:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021272:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021276:	1826      	adds	r6, r4, r0
 8021278:	5c24      	ldrb	r4, [r4, r0]
 802127a:	78b7      	ldrb	r7, [r6, #2]
 802127c:	7870      	ldrb	r0, [r6, #1]
 802127e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8021280:	7977      	ldrb	r7, [r6, #5]
 8021282:	f896 e003 	ldrb.w	lr, [r6, #3]
 8021286:	f896 c004 	ldrb.w	ip, [r6, #4]
 802128a:	9710      	str	r7, [sp, #64]	@ 0x40
 802128c:	b1c9      	cbz	r1, 80212c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802128e:	f04f 0b03 	mov.w	fp, #3
 8021292:	f06f 0904 	mvn.w	r9, #4
 8021296:	3605      	adds	r6, #5
 8021298:	fb13 930b 	smlabb	r3, r3, fp, r9
 802129c:	eb06 0b03 	add.w	fp, r6, r3
 80212a0:	5cf3      	ldrb	r3, [r6, r3]
 80212a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80212a4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80212a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80212aa:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80212ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80212b0:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80212b4:	9312      	str	r3, [sp, #72]	@ 0x48
 80212b6:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80212ba:	9314      	str	r3, [sp, #80]	@ 0x50
 80212bc:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80212c0:	9316      	str	r3, [sp, #88]	@ 0x58
 80212c2:	b292      	uxth	r2, r2
 80212c4:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80212c6:	b289      	uxth	r1, r1
 80212c8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80212cc:	fb02 f601 	mul.w	r6, r2, r1
 80212d0:	0112      	lsls	r2, r2, #4
 80212d2:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80212d6:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 80212da:	1b92      	subs	r2, r2, r6
 80212dc:	b289      	uxth	r1, r1
 80212de:	b292      	uxth	r2, r2
 80212e0:	eba9 0901 	sub.w	r9, r9, r1
 80212e4:	fb02 fe0e 	mul.w	lr, r2, lr
 80212e8:	fa1f f989 	uxth.w	r9, r9
 80212ec:	fb02 fc0c 	mul.w	ip, r2, ip
 80212f0:	fb09 e404 	mla	r4, r9, r4, lr
 80212f4:	f895 e000 	ldrb.w	lr, [r5]
 80212f8:	fb09 c000 	mla	r0, r9, r0, ip
 80212fc:	fb01 4407 	mla	r4, r1, r7, r4
 8021300:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8021302:	fb06 4407 	mla	r4, r6, r7, r4
 8021306:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021308:	fb1e fe07 	smulbb	lr, lr, r7
 802130c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021310:	fb04 e403 	mla	r4, r4, r3, lr
 8021314:	b2a4      	uxth	r4, r4
 8021316:	f104 0e01 	add.w	lr, r4, #1
 802131a:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 802131e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021320:	fb01 0004 	mla	r0, r1, r4, r0
 8021324:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021326:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802132a:	fb06 0004 	mla	r0, r6, r4, r0
 802132e:	786c      	ldrb	r4, [r5, #1]
 8021330:	f885 e000 	strb.w	lr, [r5]
 8021334:	fb14 f407 	smulbb	r4, r4, r7
 8021338:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802133c:	fb00 4003 	mla	r0, r0, r3, r4
 8021340:	b280      	uxth	r0, r0
 8021342:	1c44      	adds	r4, r0, #1
 8021344:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021348:	1200      	asrs	r0, r0, #8
 802134a:	7068      	strb	r0, [r5, #1]
 802134c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802134e:	4342      	muls	r2, r0
 8021350:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021352:	fb09 2200 	mla	r2, r9, r0, r2
 8021356:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021358:	fb01 2100 	mla	r1, r1, r0, r2
 802135c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802135e:	fb06 1602 	mla	r6, r6, r2, r1
 8021362:	78a9      	ldrb	r1, [r5, #2]
 8021364:	fb11 f107 	smulbb	r1, r1, r7
 8021368:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802136c:	fb06 1303 	mla	r3, r6, r3, r1
 8021370:	b29b      	uxth	r3, r3
 8021372:	1c5e      	adds	r6, r3, #1
 8021374:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021378:	121b      	asrs	r3, r3, #8
 802137a:	70ab      	strb	r3, [r5, #2]
 802137c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802137e:	3503      	adds	r5, #3
 8021380:	449a      	add	sl, r3
 8021382:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021384:	4498      	add	r8, r3
 8021386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021388:	3b01      	subs	r3, #1
 802138a:	930d      	str	r3, [sp, #52]	@ 0x34
 802138c:	e750      	b.n	8021230 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802138e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021390:	449a      	add	sl, r3
 8021392:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021394:	4498      	add	r8, r3
 8021396:	9b07      	ldr	r3, [sp, #28]
 8021398:	3b01      	subs	r3, #1
 802139a:	9307      	str	r3, [sp, #28]
 802139c:	9b08      	ldr	r3, [sp, #32]
 802139e:	3303      	adds	r3, #3
 80213a0:	9308      	str	r3, [sp, #32]
 80213a2:	e726      	b.n	80211f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80213a4:	d026      	beq.n	80213f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80213a6:	9b07      	ldr	r3, [sp, #28]
 80213a8:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80213aa:	3b01      	subs	r3, #1
 80213ac:	fb00 a003 	mla	r0, r0, r3, sl
 80213b0:	1400      	asrs	r0, r0, #16
 80213b2:	f53f af3a 	bmi.w	802122a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80213b6:	3901      	subs	r1, #1
 80213b8:	4288      	cmp	r0, r1
 80213ba:	f6bf af36 	bge.w	802122a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80213be:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80213c0:	fb01 8303 	mla	r3, r1, r3, r8
 80213c4:	141b      	asrs	r3, r3, #16
 80213c6:	f53f af30 	bmi.w	802122a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80213ca:	3a01      	subs	r2, #1
 80213cc:	4293      	cmp	r3, r2
 80213ce:	f6bf af2c 	bge.w	802122a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80213d2:	9b08      	ldr	r3, [sp, #32]
 80213d4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80213d8:	1cdd      	adds	r5, r3, #3
 80213da:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 80213de:	f1bc 0f00 	cmp.w	ip, #0
 80213e2:	dc5f      	bgt.n	80214a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 80213e4:	9b07      	ldr	r3, [sp, #28]
 80213e6:	9a08      	ldr	r2, [sp, #32]
 80213e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80213ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80213f0:	441a      	add	r2, r3
 80213f2:	9208      	str	r2, [sp, #32]
 80213f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	f340 80e9 	ble.w	80215ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80213fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021400:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021402:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021406:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802140a:	eef0 6a62 	vmov.f32	s13, s5
 802140e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021412:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021416:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802141a:	ee16 aa90 	vmov	sl, s13
 802141e:	eef0 6a43 	vmov.f32	s13, s6
 8021422:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021426:	ee16 8a90 	vmov	r8, s13
 802142a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802142e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021432:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021436:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802143a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802143e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021442:	ee12 2a90 	vmov	r2, s5
 8021446:	eef0 2a47 	vmov.f32	s5, s14
 802144a:	fb92 f3f3 	sdiv	r3, r2, r3
 802144e:	ee13 2a10 	vmov	r2, s6
 8021452:	932b      	str	r3, [sp, #172]	@ 0xac
 8021454:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021456:	eeb0 3a67 	vmov.f32	s6, s15
 802145a:	fb92 f3f3 	sdiv	r3, r2, r3
 802145e:	932c      	str	r3, [sp, #176]	@ 0xb0
 8021460:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021462:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021464:	3b01      	subs	r3, #1
 8021466:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021468:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802146a:	bf08      	it	eq
 802146c:	4613      	moveq	r3, r2
 802146e:	9307      	str	r3, [sp, #28]
 8021470:	e6b1      	b.n	80211d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021472:	1c47      	adds	r7, r0, #1
 8021474:	d482      	bmi.n	802137c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021476:	42bb      	cmp	r3, r7
 8021478:	db80      	blt.n	802137c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802147a:	1c67      	adds	r7, r4, #1
 802147c:	f53f af7e 	bmi.w	802137c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021480:	42be      	cmp	r6, r7
 8021482:	f6ff af7b 	blt.w	802137c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021486:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021488:	b236      	sxth	r6, r6
 802148a:	9001      	str	r0, [sp, #4]
 802148c:	b21b      	sxth	r3, r3
 802148e:	9600      	str	r6, [sp, #0]
 8021490:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8021492:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8021496:	e9cd 4202 	strd	r4, r2, [sp, #8]
 802149a:	4629      	mov	r1, r5
 802149c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802149e:	f7ff fd82 	bl	8020fa6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80214a2:	e76b      	b.n	802137c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80214a4:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 80214a6:	ea4f 402a 	mov.w	r0, sl, asr #16
 80214aa:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80214ae:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80214b2:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80214b6:	ea4f 4128 	mov.w	r1, r8, asr #16
 80214ba:	fb07 0101 	mla	r1, r7, r1, r0
 80214be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80214c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80214c4:	1844      	adds	r4, r0, r1
 80214c6:	5c40      	ldrb	r0, [r0, r1]
 80214c8:	78a6      	ldrb	r6, [r4, #2]
 80214ca:	7861      	ldrb	r1, [r4, #1]
 80214cc:	960f      	str	r6, [sp, #60]	@ 0x3c
 80214ce:	78e6      	ldrb	r6, [r4, #3]
 80214d0:	910d      	str	r1, [sp, #52]	@ 0x34
 80214d2:	9610      	str	r6, [sp, #64]	@ 0x40
 80214d4:	f894 9004 	ldrb.w	r9, [r4, #4]
 80214d8:	f894 b005 	ldrb.w	fp, [r4, #5]
 80214dc:	b192      	cbz	r2, 8021504 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80214de:	f06f 0604 	mvn.w	r6, #4
 80214e2:	2103      	movs	r1, #3
 80214e4:	3405      	adds	r4, #5
 80214e6:	fb17 6701 	smlabb	r7, r7, r1, r6
 80214ea:	19e6      	adds	r6, r4, r7
 80214ec:	5de4      	ldrb	r4, [r4, r7]
 80214ee:	9417      	str	r4, [sp, #92]	@ 0x5c
 80214f0:	7874      	ldrb	r4, [r6, #1]
 80214f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80214f4:	78b4      	ldrb	r4, [r6, #2]
 80214f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80214f8:	78f4      	ldrb	r4, [r6, #3]
 80214fa:	9418      	str	r4, [sp, #96]	@ 0x60
 80214fc:	7934      	ldrb	r4, [r6, #4]
 80214fe:	941a      	str	r4, [sp, #104]	@ 0x68
 8021500:	7974      	ldrb	r4, [r6, #5]
 8021502:	941c      	str	r4, [sp, #112]	@ 0x70
 8021504:	b29b      	uxth	r3, r3
 8021506:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021508:	b292      	uxth	r2, r2
 802150a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802150c:	3503      	adds	r5, #3
 802150e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021512:	fb03 f402 	mul.w	r4, r3, r2
 8021516:	011b      	lsls	r3, r3, #4
 8021518:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802151c:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8021520:	1b1b      	subs	r3, r3, r4
 8021522:	b292      	uxth	r2, r2
 8021524:	b29b      	uxth	r3, r3
 8021526:	1ab6      	subs	r6, r6, r2
 8021528:	435f      	muls	r7, r3
 802152a:	b2b6      	uxth	r6, r6
 802152c:	fb03 f909 	mul.w	r9, r3, r9
 8021530:	fb03 fb0b 	mul.w	fp, r3, fp
 8021534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021536:	fb06 7000 	mla	r0, r6, r0, r7
 802153a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 802153c:	fb06 bb03 	mla	fp, r6, r3, fp
 8021540:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021542:	fb02 0007 	mla	r0, r2, r7, r0
 8021546:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8021548:	fb02 bb03 	mla	fp, r2, r3, fp
 802154c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802154e:	fb04 0007 	mla	r0, r4, r7, r0
 8021552:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8021556:	fb17 f701 	smulbb	r7, r7, r1
 802155a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802155e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021560:	fb00 700e 	mla	r0, r0, lr, r7
 8021564:	fb06 9101 	mla	r1, r6, r1, r9
 8021568:	b280      	uxth	r0, r0
 802156a:	1c47      	adds	r7, r0, #1
 802156c:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8021570:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021572:	1200      	asrs	r0, r0, #8
 8021574:	f805 0c06 	strb.w	r0, [r5, #-6]
 8021578:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802157a:	fb02 1100 	mla	r1, r2, r0, r1
 802157e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8021580:	fb04 1100 	mla	r1, r4, r0, r1
 8021584:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8021588:	fb04 b403 	mla	r4, r4, r3, fp
 802158c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8021590:	fb10 f007 	smulbb	r0, r0, r7
 8021594:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021598:	fb13 f307 	smulbb	r3, r3, r7
 802159c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80215a0:	fb01 010e 	mla	r1, r1, lr, r0
 80215a4:	fb04 340e 	mla	r4, r4, lr, r3
 80215a8:	b289      	uxth	r1, r1
 80215aa:	b2a4      	uxth	r4, r4
 80215ac:	1c48      	adds	r0, r1, #1
 80215ae:	1c63      	adds	r3, r4, #1
 80215b0:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80215b4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80215b8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80215ba:	1209      	asrs	r1, r1, #8
 80215bc:	1224      	asrs	r4, r4, #8
 80215be:	449a      	add	sl, r3
 80215c0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80215c2:	f805 1c05 	strb.w	r1, [r5, #-5]
 80215c6:	f805 4c04 	strb.w	r4, [r5, #-4]
 80215ca:	4498      	add	r8, r3
 80215cc:	e707      	b.n	80213de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80215ce:	b01f      	add	sp, #124	@ 0x7c
 80215d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080215d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80215d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215d8:	b087      	sub	sp, #28
 80215da:	780d      	ldrb	r5, [r1, #0]
 80215dc:	784c      	ldrb	r4, [r1, #1]
 80215de:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80215e2:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 80215e6:	9004      	str	r0, [sp, #16]
 80215e8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80215ec:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 80215f0:	9005      	str	r0, [sp, #20]
 80215f2:	fb06 bc03 	mla	ip, r6, r3, fp
 80215f6:	2e00      	cmp	r6, #0
 80215f8:	7888      	ldrb	r0, [r1, #2]
 80215fa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80215fe:	eb02 090c 	add.w	r9, r2, ip
 8021602:	f2c0 8084 	blt.w	802170e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8021606:	42b7      	cmp	r7, r6
 8021608:	f340 8081 	ble.w	802170e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 802160c:	f1bb 0f00 	cmp.w	fp, #0
 8021610:	db79      	blt.n	8021706 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8021612:	455b      	cmp	r3, fp
 8021614:	dd77      	ble.n	8021706 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8021616:	f812 200c 	ldrb.w	r2, [r2, ip]
 802161a:	9201      	str	r2, [sp, #4]
 802161c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021620:	9202      	str	r2, [sp, #8]
 8021622:	f899 2002 	ldrb.w	r2, [r9, #2]
 8021626:	9203      	str	r2, [sp, #12]
 8021628:	f11b 0201 	adds.w	r2, fp, #1
 802162c:	d476      	bmi.n	802171c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802162e:	4293      	cmp	r3, r2
 8021630:	dd74      	ble.n	802171c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8021632:	9a04      	ldr	r2, [sp, #16]
 8021634:	2a00      	cmp	r2, #0
 8021636:	d071      	beq.n	802171c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8021638:	f899 8003 	ldrb.w	r8, [r9, #3]
 802163c:	f899 c004 	ldrb.w	ip, [r9, #4]
 8021640:	f899 a005 	ldrb.w	sl, [r9, #5]
 8021644:	3601      	adds	r6, #1
 8021646:	d471      	bmi.n	802172c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021648:	42b7      	cmp	r7, r6
 802164a:	dd6f      	ble.n	802172c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 802164c:	9a05      	ldr	r2, [sp, #20]
 802164e:	2a00      	cmp	r2, #0
 8021650:	d06c      	beq.n	802172c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021652:	f1bb 0f00 	cmp.w	fp, #0
 8021656:	db65      	blt.n	8021724 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8021658:	455b      	cmp	r3, fp
 802165a:	dd63      	ble.n	8021724 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 802165c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021660:	f819 e002 	ldrb.w	lr, [r9, r2]
 8021664:	2203      	movs	r2, #3
 8021666:	fb03 9602 	mla	r6, r3, r2, r9
 802166a:	7877      	ldrb	r7, [r6, #1]
 802166c:	78b6      	ldrb	r6, [r6, #2]
 802166e:	f11b 0b01 	adds.w	fp, fp, #1
 8021672:	d40c      	bmi.n	802168e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021674:	455b      	cmp	r3, fp
 8021676:	dd0a      	ble.n	802168e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021678:	9a04      	ldr	r2, [sp, #16]
 802167a:	b142      	cbz	r2, 802168e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 802167c:	2203      	movs	r2, #3
 802167e:	fb13 2002 	smlabb	r0, r3, r2, r2
 8021682:	f819 5000 	ldrb.w	r5, [r9, r0]
 8021686:	fb03 9002 	mla	r0, r3, r2, r9
 802168a:	7904      	ldrb	r4, [r0, #4]
 802168c:	7940      	ldrb	r0, [r0, #5]
 802168e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8021692:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8021696:	fb03 fb02 	mul.w	fp, r3, r2
 802169a:	011b      	lsls	r3, r3, #4
 802169c:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80216a0:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 80216a4:	eba3 030b 	sub.w	r3, r3, fp
 80216a8:	b292      	uxth	r2, r2
 80216aa:	b29b      	uxth	r3, r3
 80216ac:	eba9 0902 	sub.w	r9, r9, r2
 80216b0:	9304      	str	r3, [sp, #16]
 80216b2:	fa1f f989 	uxth.w	r9, r9
 80216b6:	fb03 f808 	mul.w	r8, r3, r8
 80216ba:	9b01      	ldr	r3, [sp, #4]
 80216bc:	fb09 8803 	mla	r8, r9, r3, r8
 80216c0:	9b04      	ldr	r3, [sp, #16]
 80216c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80216c6:	9b02      	ldr	r3, [sp, #8]
 80216c8:	fb02 880e 	mla	r8, r2, lr, r8
 80216cc:	fb09 cc03 	mla	ip, r9, r3, ip
 80216d0:	9b04      	ldr	r3, [sp, #16]
 80216d2:	fb0b 8805 	mla	r8, fp, r5, r8
 80216d6:	fb02 c707 	mla	r7, r2, r7, ip
 80216da:	fb03 f30a 	mul.w	r3, r3, sl
 80216de:	ea4f 2828 	mov.w	r8, r8, asr #8
 80216e2:	fb0b 7404 	mla	r4, fp, r4, r7
 80216e6:	f881 8000 	strb.w	r8, [r1]
 80216ea:	1224      	asrs	r4, r4, #8
 80216ec:	704c      	strb	r4, [r1, #1]
 80216ee:	9c03      	ldr	r4, [sp, #12]
 80216f0:	fb09 3904 	mla	r9, r9, r4, r3
 80216f4:	fb02 9206 	mla	r2, r2, r6, r9
 80216f8:	fb0b 2000 	mla	r0, fp, r0, r2
 80216fc:	1200      	asrs	r0, r0, #8
 80216fe:	7088      	strb	r0, [r1, #2]
 8021700:	b007      	add	sp, #28
 8021702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021706:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802170a:	9501      	str	r5, [sp, #4]
 802170c:	e78c      	b.n	8021628 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 802170e:	4682      	mov	sl, r0
 8021710:	46a4      	mov	ip, r4
 8021712:	46a8      	mov	r8, r5
 8021714:	9501      	str	r5, [sp, #4]
 8021716:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802171a:	e793      	b.n	8021644 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 802171c:	4682      	mov	sl, r0
 802171e:	46a4      	mov	ip, r4
 8021720:	46a8      	mov	r8, r5
 8021722:	e78f      	b.n	8021644 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8021724:	4606      	mov	r6, r0
 8021726:	4627      	mov	r7, r4
 8021728:	46ae      	mov	lr, r5
 802172a:	e7a0      	b.n	802166e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 802172c:	4606      	mov	r6, r0
 802172e:	4627      	mov	r7, r4
 8021730:	46ae      	mov	lr, r5
 8021732:	e7ac      	b.n	802168e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08021734 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021738:	b09b      	sub	sp, #108	@ 0x6c
 802173a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802173c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802173e:	9019      	str	r0, [sp, #100]	@ 0x64
 8021740:	9109      	str	r1, [sp, #36]	@ 0x24
 8021742:	6850      	ldr	r0, [r2, #4]
 8021744:	9306      	str	r3, [sp, #24]
 8021746:	6812      	ldr	r2, [r2, #0]
 8021748:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802174c:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 8021750:	fb00 1303 	mla	r3, r0, r3, r1
 8021754:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021758:	18d3      	adds	r3, r2, r3
 802175a:	9307      	str	r3, [sp, #28]
 802175c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802175e:	681b      	ldr	r3, [r3, #0]
 8021760:	9308      	str	r3, [sp, #32]
 8021762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021764:	2b00      	cmp	r3, #0
 8021766:	dc03      	bgt.n	8021770 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021768:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802176a:	2b00      	cmp	r3, #0
 802176c:	f340 81ab 	ble.w	8021ac6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021770:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021772:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021776:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802177a:	1e48      	subs	r0, r1, #1
 802177c:	1e55      	subs	r5, r2, #1
 802177e:	9b06      	ldr	r3, [sp, #24]
 8021780:	2b00      	cmp	r3, #0
 8021782:	f340 80b1 	ble.w	80218e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021786:	ea5f 462b 	movs.w	r6, fp, asr #16
 802178a:	ea4f 4324 	mov.w	r3, r4, asr #16
 802178e:	d406      	bmi.n	802179e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021790:	4286      	cmp	r6, r0
 8021792:	da04      	bge.n	802179e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021794:	2b00      	cmp	r3, #0
 8021796:	db02      	blt.n	802179e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021798:	42ab      	cmp	r3, r5
 802179a:	f2c0 80a6 	blt.w	80218ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802179e:	3601      	adds	r6, #1
 80217a0:	f100 8097 	bmi.w	80218d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80217a4:	42b1      	cmp	r1, r6
 80217a6:	f2c0 8094 	blt.w	80218d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80217aa:	3301      	adds	r3, #1
 80217ac:	f100 8091 	bmi.w	80218d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80217b0:	429a      	cmp	r2, r3
 80217b2:	f2c0 808e 	blt.w	80218d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80217b6:	9b06      	ldr	r3, [sp, #24]
 80217b8:	9e07      	ldr	r6, [sp, #28]
 80217ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80217bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80217be:	2b00      	cmp	r3, #0
 80217c0:	f340 80b0 	ble.w	8021924 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80217c4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80217c6:	1425      	asrs	r5, r4, #16
 80217c8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80217ca:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80217ce:	68c7      	ldr	r7, [r0, #12]
 80217d0:	ea5f 402b 	movs.w	r0, fp, asr #16
 80217d4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80217d8:	689b      	ldr	r3, [r3, #8]
 80217da:	f100 80ea 	bmi.w	80219b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80217de:	f103 3cff 	add.w	ip, r3, #4294967295
 80217e2:	4560      	cmp	r0, ip
 80217e4:	f280 80e5 	bge.w	80219b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80217e8:	2d00      	cmp	r5, #0
 80217ea:	f2c0 80e2 	blt.w	80219b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80217ee:	f107 3cff 	add.w	ip, r7, #4294967295
 80217f2:	4565      	cmp	r5, ip
 80217f4:	f280 80dd 	bge.w	80219b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80217f8:	b21b      	sxth	r3, r3
 80217fa:	fb05 0003 	mla	r0, r5, r3, r0
 80217fe:	9d08      	ldr	r5, [sp, #32]
 8021800:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021804:	182f      	adds	r7, r5, r0
 8021806:	5c2d      	ldrb	r5, [r5, r0]
 8021808:	7878      	ldrb	r0, [r7, #1]
 802180a:	f897 e002 	ldrb.w	lr, [r7, #2]
 802180e:	900c      	str	r0, [sp, #48]	@ 0x30
 8021810:	f897 9003 	ldrb.w	r9, [r7, #3]
 8021814:	f897 8004 	ldrb.w	r8, [r7, #4]
 8021818:	f897 a005 	ldrb.w	sl, [r7, #5]
 802181c:	b1c9      	cbz	r1, 8021852 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802181e:	f04f 0c03 	mov.w	ip, #3
 8021822:	f06f 0004 	mvn.w	r0, #4
 8021826:	3705      	adds	r7, #5
 8021828:	fb13 030c 	smlabb	r3, r3, ip, r0
 802182c:	eb07 0c03 	add.w	ip, r7, r3
 8021830:	5cfb      	ldrb	r3, [r7, r3]
 8021832:	930d      	str	r3, [sp, #52]	@ 0x34
 8021834:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021838:	930f      	str	r3, [sp, #60]	@ 0x3c
 802183a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802183e:	9311      	str	r3, [sp, #68]	@ 0x44
 8021840:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021844:	930e      	str	r3, [sp, #56]	@ 0x38
 8021846:	f89c 3004 	ldrb.w	r3, [ip, #4]
 802184a:	9310      	str	r3, [sp, #64]	@ 0x40
 802184c:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8021850:	9312      	str	r3, [sp, #72]	@ 0x48
 8021852:	b292      	uxth	r2, r2
 8021854:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021856:	b289      	uxth	r1, r1
 8021858:	fb02 f301 	mul.w	r3, r2, r1
 802185c:	0112      	lsls	r2, r2, #4
 802185e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021862:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8021866:	1ad2      	subs	r2, r2, r3
 8021868:	b289      	uxth	r1, r1
 802186a:	b292      	uxth	r2, r2
 802186c:	1a7f      	subs	r7, r7, r1
 802186e:	fb02 f909 	mul.w	r9, r2, r9
 8021872:	b2bf      	uxth	r7, r7
 8021874:	fb02 f808 	mul.w	r8, r2, r8
 8021878:	fb02 fa0a 	mul.w	sl, r2, sl
 802187c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802187e:	fb07 9905 	mla	r9, r7, r5, r9
 8021882:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021884:	fb07 8800 	mla	r8, r7, r0, r8
 8021888:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802188a:	fb07 aa0e 	mla	sl, r7, lr, sl
 802188e:	fb01 9905 	mla	r9, r1, r5, r9
 8021892:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021894:	fb01 8800 	mla	r8, r1, r0, r8
 8021898:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802189a:	fb01 a102 	mla	r1, r1, r2, sl
 802189e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80218a0:	fb03 9905 	mla	r9, r3, r5, r9
 80218a4:	fb03 8800 	mla	r8, r3, r0, r8
 80218a8:	fb03 1302 	mla	r3, r3, r2, r1
 80218ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 80218b0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80218b4:	121b      	asrs	r3, r3, #8
 80218b6:	f886 9000 	strb.w	r9, [r6]
 80218ba:	f886 8001 	strb.w	r8, [r6, #1]
 80218be:	70b3      	strb	r3, [r6, #2]
 80218c0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80218c2:	3603      	adds	r6, #3
 80218c4:	449b      	add	fp, r3
 80218c6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80218c8:	441c      	add	r4, r3
 80218ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80218cc:	3b01      	subs	r3, #1
 80218ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80218d0:	e774      	b.n	80217bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80218d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80218d4:	449b      	add	fp, r3
 80218d6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80218d8:	441c      	add	r4, r3
 80218da:	9b06      	ldr	r3, [sp, #24]
 80218dc:	3b01      	subs	r3, #1
 80218de:	9306      	str	r3, [sp, #24]
 80218e0:	9b07      	ldr	r3, [sp, #28]
 80218e2:	3303      	adds	r3, #3
 80218e4:	9307      	str	r3, [sp, #28]
 80218e6:	e74a      	b.n	802177e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80218e8:	d024      	beq.n	8021934 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80218ea:	9b06      	ldr	r3, [sp, #24]
 80218ec:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80218ee:	3b01      	subs	r3, #1
 80218f0:	fb00 b003 	mla	r0, r0, r3, fp
 80218f4:	1400      	asrs	r0, r0, #16
 80218f6:	f53f af5e 	bmi.w	80217b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80218fa:	3901      	subs	r1, #1
 80218fc:	4288      	cmp	r0, r1
 80218fe:	f6bf af5a 	bge.w	80217b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021902:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8021904:	fb01 4303 	mla	r3, r1, r3, r4
 8021908:	141b      	asrs	r3, r3, #16
 802190a:	f53f af54 	bmi.w	80217b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802190e:	3a01      	subs	r2, #1
 8021910:	4293      	cmp	r3, r2
 8021912:	f6bf af50 	bge.w	80217b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021916:	9b07      	ldr	r3, [sp, #28]
 8021918:	f8dd e018 	ldr.w	lr, [sp, #24]
 802191c:	1cde      	adds	r6, r3, #3
 802191e:	f1be 0f00 	cmp.w	lr, #0
 8021922:	dc5f      	bgt.n	80219e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021924:	9b06      	ldr	r3, [sp, #24]
 8021926:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802192a:	9b07      	ldr	r3, [sp, #28]
 802192c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021930:	4423      	add	r3, r4
 8021932:	9307      	str	r3, [sp, #28]
 8021934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021936:	2b00      	cmp	r3, #0
 8021938:	f340 80c5 	ble.w	8021ac6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802193c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021940:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021942:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021946:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802194a:	eef0 6a62 	vmov.f32	s13, s5
 802194e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021952:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021956:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802195a:	ee16 ba90 	vmov	fp, s13
 802195e:	eef0 6a43 	vmov.f32	s13, s6
 8021962:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021966:	ee16 4a90 	vmov	r4, s13
 802196a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802196e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021972:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021976:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802197a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802197e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021982:	ee12 2a90 	vmov	r2, s5
 8021986:	eef0 2a47 	vmov.f32	s5, s14
 802198a:	fb92 f3f3 	sdiv	r3, r2, r3
 802198e:	ee13 2a10 	vmov	r2, s6
 8021992:	9327      	str	r3, [sp, #156]	@ 0x9c
 8021994:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021996:	eeb0 3a67 	vmov.f32	s6, s15
 802199a:	fb92 f3f3 	sdiv	r3, r2, r3
 802199e:	9328      	str	r3, [sp, #160]	@ 0xa0
 80219a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80219a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80219a4:	3b01      	subs	r3, #1
 80219a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80219a8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80219aa:	bf08      	it	eq
 80219ac:	4613      	moveq	r3, r2
 80219ae:	9306      	str	r3, [sp, #24]
 80219b0:	e6d7      	b.n	8021762 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80219b2:	f110 0c01 	adds.w	ip, r0, #1
 80219b6:	d483      	bmi.n	80218c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80219b8:	4563      	cmp	r3, ip
 80219ba:	db81      	blt.n	80218c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80219bc:	f115 0c01 	adds.w	ip, r5, #1
 80219c0:	f53f af7e 	bmi.w	80218c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80219c4:	4567      	cmp	r7, ip
 80219c6:	f6ff af7b 	blt.w	80218c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80219ca:	b23f      	sxth	r7, r7
 80219cc:	b21b      	sxth	r3, r3
 80219ce:	9700      	str	r7, [sp, #0]
 80219d0:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80219d4:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80219d8:	9a08      	ldr	r2, [sp, #32]
 80219da:	4631      	mov	r1, r6
 80219dc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80219de:	f7ff fdf9 	bl	80215d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80219e2:	e76d      	b.n	80218c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80219e4:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80219e6:	ea4f 402b 	mov.w	r0, fp, asr #16
 80219ea:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80219ee:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80219f2:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 80219f6:	1421      	asrs	r1, r4, #16
 80219f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80219fa:	fb0c 0101 	mla	r1, ip, r1, r0
 80219fe:	9808      	ldr	r0, [sp, #32]
 8021a00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021a04:	1845      	adds	r5, r0, r1
 8021a06:	5c40      	ldrb	r0, [r0, r1]
 8021a08:	796f      	ldrb	r7, [r5, #5]
 8021a0a:	7869      	ldrb	r1, [r5, #1]
 8021a0c:	f895 8002 	ldrb.w	r8, [r5, #2]
 8021a10:	f895 a003 	ldrb.w	sl, [r5, #3]
 8021a14:	f895 9004 	ldrb.w	r9, [r5, #4]
 8021a18:	970c      	str	r7, [sp, #48]	@ 0x30
 8021a1a:	b1a2      	cbz	r2, 8021a46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8021a1c:	2703      	movs	r7, #3
 8021a1e:	f06f 0304 	mvn.w	r3, #4
 8021a22:	3505      	adds	r5, #5
 8021a24:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8021a28:	eb05 070c 	add.w	r7, r5, ip
 8021a2c:	f815 500c 	ldrb.w	r5, [r5, ip]
 8021a30:	9513      	str	r5, [sp, #76]	@ 0x4c
 8021a32:	787d      	ldrb	r5, [r7, #1]
 8021a34:	9515      	str	r5, [sp, #84]	@ 0x54
 8021a36:	78bd      	ldrb	r5, [r7, #2]
 8021a38:	9517      	str	r5, [sp, #92]	@ 0x5c
 8021a3a:	78fd      	ldrb	r5, [r7, #3]
 8021a3c:	9514      	str	r5, [sp, #80]	@ 0x50
 8021a3e:	793d      	ldrb	r5, [r7, #4]
 8021a40:	9516      	str	r5, [sp, #88]	@ 0x58
 8021a42:	797d      	ldrb	r5, [r7, #5]
 8021a44:	9518      	str	r5, [sp, #96]	@ 0x60
 8021a46:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021a4a:	b292      	uxth	r2, r2
 8021a4c:	3603      	adds	r6, #3
 8021a4e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021a52:	fb03 f502 	mul.w	r5, r3, r2
 8021a56:	011b      	lsls	r3, r3, #4
 8021a58:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8021a5c:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 8021a60:	1b5b      	subs	r3, r3, r5
 8021a62:	b292      	uxth	r2, r2
 8021a64:	b29b      	uxth	r3, r3
 8021a66:	1abf      	subs	r7, r7, r2
 8021a68:	fb03 f909 	mul.w	r9, r3, r9
 8021a6c:	b2bf      	uxth	r7, r7
 8021a6e:	fb03 fa0a 	mul.w	sl, r3, sl
 8021a72:	fb07 9901 	mla	r9, r7, r1, r9
 8021a76:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8021a78:	fb07 aa00 	mla	sl, r7, r0, sl
 8021a7c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021a7e:	fb02 9901 	mla	r9, r2, r1, r9
 8021a82:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8021a84:	fb02 aa00 	mla	sl, r2, r0, sl
 8021a88:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8021a8a:	fb05 9901 	mla	r9, r5, r1, r9
 8021a8e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021a90:	fb05 aa00 	mla	sl, r5, r0, sl
 8021a94:	434b      	muls	r3, r1
 8021a96:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021a98:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021a9c:	fb07 3308 	mla	r3, r7, r8, r3
 8021aa0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021aa4:	f806 ac06 	strb.w	sl, [r6, #-6]
 8021aa8:	fb02 3201 	mla	r2, r2, r1, r3
 8021aac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021aae:	f806 9c05 	strb.w	r9, [r6, #-5]
 8021ab2:	fb05 2503 	mla	r5, r5, r3, r2
 8021ab6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021ab8:	122d      	asrs	r5, r5, #8
 8021aba:	449b      	add	fp, r3
 8021abc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021abe:	f806 5c04 	strb.w	r5, [r6, #-4]
 8021ac2:	441c      	add	r4, r3
 8021ac4:	e72b      	b.n	802191e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021ac6:	b01b      	add	sp, #108	@ 0x6c
 8021ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021acc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ad0:	b087      	sub	sp, #28
 8021ad2:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8021ad6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8021ada:	fb05 7003 	mla	r0, r5, r3, r7
 8021ade:	2d00      	cmp	r5, #0
 8021ae0:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8021ae4:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8021ae8:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8021aec:	f2c0 811f 	blt.w	8021d2e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8021af0:	45a8      	cmp	r8, r5
 8021af2:	f340 811c 	ble.w	8021d2e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8021af6:	2f00      	cmp	r7, #0
 8021af8:	f2c0 8117 	blt.w	8021d2a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8021afc:	42bb      	cmp	r3, r7
 8021afe:	f340 8114 	ble.w	8021d2a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8021b02:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8021b06:	1c7a      	adds	r2, r7, #1
 8021b08:	f100 8114 	bmi.w	8021d34 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8021b0c:	4293      	cmp	r3, r2
 8021b0e:	f340 8111 	ble.w	8021d34 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8021b12:	2c00      	cmp	r4, #0
 8021b14:	f000 8110 	beq.w	8021d38 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8021b18:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8021b1c:	3501      	adds	r5, #1
 8021b1e:	f100 810f 	bmi.w	8021d40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8021b22:	45a8      	cmp	r8, r5
 8021b24:	f340 810c 	ble.w	8021d40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8021b28:	f1be 0f00 	cmp.w	lr, #0
 8021b2c:	f000 810b 	beq.w	8021d46 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8021b30:	2f00      	cmp	r7, #0
 8021b32:	f2c0 8103 	blt.w	8021d3c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8021b36:	42bb      	cmp	r3, r7
 8021b38:	f340 8100 	ble.w	8021d3c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8021b3c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8021b40:	3701      	adds	r7, #1
 8021b42:	f100 8103 	bmi.w	8021d4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8021b46:	42bb      	cmp	r3, r7
 8021b48:	f340 8100 	ble.w	8021d4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8021b4c:	2c00      	cmp	r4, #0
 8021b4e:	f000 80ff 	beq.w	8021d50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8021b52:	3301      	adds	r3, #1
 8021b54:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021b58:	fa1f fc84 	uxth.w	ip, r4
 8021b5c:	fa1f fe8e 	uxth.w	lr, lr
 8021b60:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021b64:	fb0c f90e 	mul.w	r9, ip, lr
 8021b68:	0e13      	lsrs	r3, r2, #24
 8021b6a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021b6e:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8021b72:	9302      	str	r3, [sp, #8]
 8021b74:	ebac 0709 	sub.w	r7, ip, r9
 8021b78:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8021b7c:	fa1f f48e 	uxth.w	r4, lr
 8021b80:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8021b84:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8021b88:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8021b8c:	fb0a fe0e 	mul.w	lr, sl, lr
 8021b90:	1b1b      	subs	r3, r3, r4
 8021b92:	fb0a f606 	mul.w	r6, sl, r6
 8021b96:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8021b9a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021b9e:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8021ba2:	b29b      	uxth	r3, r3
 8021ba4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021ba8:	b2bf      	uxth	r7, r7
 8021baa:	9301      	str	r3, [sp, #4]
 8021bac:	44e6      	add	lr, ip
 8021bae:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8021bb2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021bb6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021bba:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8021bbe:	9303      	str	r3, [sp, #12]
 8021bc0:	0a33      	lsrs	r3, r6, #8
 8021bc2:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8021bc6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8021bca:	9304      	str	r3, [sp, #16]
 8021bcc:	fb0b f606 	mul.w	r6, fp, r6
 8021bd0:	fb0b f000 	mul.w	r0, fp, r0
 8021bd4:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8021bd8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021bdc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021be0:	44b6      	add	lr, r6
 8021be2:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8021be6:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8021bea:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8021bee:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8021bf2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021bf6:	fb08 f606 	mul.w	r6, r8, r6
 8021bfa:	0a03      	lsrs	r3, r0, #8
 8021bfc:	fb08 f505 	mul.w	r5, r8, r5
 8021c00:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021c04:	0a30      	lsrs	r0, r6, #8
 8021c06:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021c0a:	9305      	str	r3, [sp, #20]
 8021c0c:	0e13      	lsrs	r3, r2, #24
 8021c0e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021c12:	fb0e fe07 	mul.w	lr, lr, r7
 8021c16:	4430      	add	r0, r6
 8021c18:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8021c1c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021c20:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8021c24:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021c28:	0a00      	lsrs	r0, r0, #8
 8021c2a:	435e      	muls	r6, r3
 8021c2c:	0a2d      	lsrs	r5, r5, #8
 8021c2e:	435a      	muls	r2, r3
 8021c30:	9b03      	ldr	r3, [sp, #12]
 8021c32:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8021c36:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021c3a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021c3e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021c42:	44b4      	add	ip, r6
 8021c44:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8021c48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c4c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8021c50:	9e01      	ldr	r6, [sp, #4]
 8021c52:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021c56:	fb03 ee06 	mla	lr, r3, r6, lr
 8021c5a:	9b04      	ldr	r3, [sp, #16]
 8021c5c:	0a12      	lsrs	r2, r2, #8
 8021c5e:	fb0c ee09 	mla	lr, ip, r9, lr
 8021c62:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8021c66:	9b05      	ldr	r3, [sp, #20]
 8021c68:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021c6c:	fb00 ee04 	mla	lr, r0, r4, lr
 8021c70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021c74:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8021c78:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8021c7c:	9b01      	ldr	r3, [sp, #4]
 8021c7e:	fb07 fe0e 	mul.w	lr, r7, lr
 8021c82:	fb07 f70b 	mul.w	r7, r7, fp
 8021c86:	fb03 ee06 	mla	lr, r3, r6, lr
 8021c8a:	fb03 730a 	mla	r3, r3, sl, r7
 8021c8e:	fb09 e202 	mla	r2, r9, r2, lr
 8021c92:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8021c96:	fb04 2e0e 	mla	lr, r4, lr, r2
 8021c9a:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8021c9e:	fb04 3408 	mla	r4, r4, r8, r3
 8021ca2:	9b02      	ldr	r3, [sp, #8]
 8021ca4:	b292      	uxth	r2, r2
 8021ca6:	fb09 4903 	mla	r9, r9, r3, r4
 8021caa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021cae:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021cb2:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8021cb6:	fb09 f902 	mul.w	r9, r9, r2
 8021cba:	ea40 0e0e 	orr.w	lr, r0, lr
 8021cbe:	f109 0301 	add.w	r3, r9, #1
 8021cc2:	fa5f f08e 	uxtb.w	r0, lr
 8021cc6:	fb10 f002 	smulbb	r0, r0, r2
 8021cca:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8021cce:	780b      	ldrb	r3, [r1, #0]
 8021cd0:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8021cd4:	fa5f f989 	uxtb.w	r9, r9
 8021cd8:	fb03 0309 	mla	r3, r3, r9, r0
 8021cdc:	b29b      	uxth	r3, r3
 8021cde:	1c58      	adds	r0, r3, #1
 8021ce0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021ce4:	7848      	ldrb	r0, [r1, #1]
 8021ce6:	fb10 f009 	smulbb	r0, r0, r9
 8021cea:	121b      	asrs	r3, r3, #8
 8021cec:	700b      	strb	r3, [r1, #0]
 8021cee:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8021cf2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021cf6:	fb03 0302 	mla	r3, r3, r2, r0
 8021cfa:	b29b      	uxth	r3, r3
 8021cfc:	1c58      	adds	r0, r3, #1
 8021cfe:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021d02:	121b      	asrs	r3, r3, #8
 8021d04:	704b      	strb	r3, [r1, #1]
 8021d06:	788b      	ldrb	r3, [r1, #2]
 8021d08:	fb13 f909 	smulbb	r9, r3, r9
 8021d0c:	fb0e 9e02 	mla	lr, lr, r2, r9
 8021d10:	fa1f fe8e 	uxth.w	lr, lr
 8021d14:	f10e 0301 	add.w	r3, lr, #1
 8021d18:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8021d1c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021d20:	f881 e002 	strb.w	lr, [r1, #2]
 8021d24:	b007      	add	sp, #28
 8021d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d2a:	2600      	movs	r6, #0
 8021d2c:	e6eb      	b.n	8021b06 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8021d2e:	2000      	movs	r0, #0
 8021d30:	4606      	mov	r6, r0
 8021d32:	e6f3      	b.n	8021b1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021d34:	2000      	movs	r0, #0
 8021d36:	e6f1      	b.n	8021b1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021d38:	4620      	mov	r0, r4
 8021d3a:	e6ef      	b.n	8021b1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021d3c:	2500      	movs	r5, #0
 8021d3e:	e6ff      	b.n	8021b40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8021d40:	2200      	movs	r2, #0
 8021d42:	4615      	mov	r5, r2
 8021d44:	e708      	b.n	8021b58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021d46:	4672      	mov	r2, lr
 8021d48:	4675      	mov	r5, lr
 8021d4a:	e705      	b.n	8021b58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021d4c:	2200      	movs	r2, #0
 8021d4e:	e703      	b.n	8021b58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021d50:	4622      	mov	r2, r4
 8021d52:	e701      	b.n	8021b58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08021d54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d58:	b09d      	sub	sp, #116	@ 0x74
 8021d5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8021d5c:	9307      	str	r3, [sp, #28]
 8021d5e:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8021d60:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8021d64:	901b      	str	r0, [sp, #108]	@ 0x6c
 8021d66:	931a      	str	r3, [sp, #104]	@ 0x68
 8021d68:	6850      	ldr	r0, [r2, #4]
 8021d6a:	9117      	str	r1, [sp, #92]	@ 0x5c
 8021d6c:	6812      	ldr	r2, [r2, #0]
 8021d6e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8021d72:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8021d76:	fb00 1303 	mla	r3, r0, r3, r1
 8021d7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d7e:	18d3      	adds	r3, r2, r3
 8021d80:	930a      	str	r3, [sp, #40]	@ 0x28
 8021d82:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8021d84:	681b      	ldr	r3, [r3, #0]
 8021d86:	9310      	str	r3, [sp, #64]	@ 0x40
 8021d88:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8021d8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021d8e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021d90:	2b00      	cmp	r3, #0
 8021d92:	dc03      	bgt.n	8021d9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021d94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021d96:	2b00      	cmp	r3, #0
 8021d98:	f340 8368 	ble.w	802246c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8021d9c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8021d9e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021da2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021da6:	1e48      	subs	r0, r1, #1
 8021da8:	1e57      	subs	r7, r2, #1
 8021daa:	9b07      	ldr	r3, [sp, #28]
 8021dac:	2b00      	cmp	r3, #0
 8021dae:	f340 8187 	ble.w	80220c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021db2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8021db6:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021dba:	d406      	bmi.n	8021dca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021dbc:	4584      	cmp	ip, r0
 8021dbe:	da04      	bge.n	8021dca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	db02      	blt.n	8021dca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021dc4:	42bb      	cmp	r3, r7
 8021dc6:	f2c0 817c 	blt.w	80220c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021dca:	f11c 0c01 	adds.w	ip, ip, #1
 8021dce:	f100 816c 	bmi.w	80220aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021dd2:	4561      	cmp	r1, ip
 8021dd4:	f2c0 8169 	blt.w	80220aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021dd8:	3301      	adds	r3, #1
 8021dda:	f100 8166 	bmi.w	80220aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021dde:	429a      	cmp	r2, r3
 8021de0:	f2c0 8163 	blt.w	80220aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021de4:	9b07      	ldr	r3, [sp, #28]
 8021de6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021de8:	9318      	str	r3, [sp, #96]	@ 0x60
 8021dea:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021dec:	2b00      	cmp	r3, #0
 8021dee:	f340 8186 	ble.w	80220fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8021df2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8021df4:	142a      	asrs	r2, r5, #16
 8021df6:	ea4f 4026 	mov.w	r0, r6, asr #16
 8021dfa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021dfe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021e02:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8021e06:	f100 81cb 	bmi.w	80221a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021e0a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021e0e:	4542      	cmp	r2, r8
 8021e10:	f280 81c6 	bge.w	80221a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021e14:	2800      	cmp	r0, #0
 8021e16:	f2c0 81c3 	blt.w	80221a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021e1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8021e1e:	4540      	cmp	r0, r8
 8021e20:	f280 81be 	bge.w	80221a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021e24:	fa0f f38e 	sxth.w	r3, lr
 8021e28:	fb00 2203 	mla	r2, r0, r3, r2
 8021e2c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021e2e:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8021e32:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8021e36:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021e3a:	2900      	cmp	r1, #0
 8021e3c:	f000 81a6 	beq.w	802218c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8021e40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021e44:	900c      	str	r0, [sp, #48]	@ 0x30
 8021e46:	0e00      	lsrs	r0, r0, #24
 8021e48:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021e4a:	f1bc 0f00 	cmp.w	ip, #0
 8021e4e:	d00f      	beq.n	8021e70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021e50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8021e54:	3b01      	subs	r3, #1
 8021e56:	009b      	lsls	r3, r3, #2
 8021e58:	3304      	adds	r3, #4
 8021e5a:	eb08 0003 	add.w	r0, r8, r3
 8021e5e:	f858 3003 	ldr.w	r3, [r8, r3]
 8021e62:	9308      	str	r3, [sp, #32]
 8021e64:	0e1b      	lsrs	r3, r3, #24
 8021e66:	9311      	str	r3, [sp, #68]	@ 0x44
 8021e68:	6843      	ldr	r3, [r0, #4]
 8021e6a:	930d      	str	r3, [sp, #52]	@ 0x34
 8021e6c:	0e1b      	lsrs	r3, r3, #24
 8021e6e:	9314      	str	r3, [sp, #80]	@ 0x50
 8021e70:	b289      	uxth	r1, r1
 8021e72:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021e74:	fa1f fc8c 	uxth.w	ip, ip
 8021e78:	0108      	lsls	r0, r1, #4
 8021e7a:	fb01 f90c 	mul.w	r9, r1, ip
 8021e7e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8021e82:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8021e86:	eba0 0809 	sub.w	r8, r0, r9
 8021e8a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021e8c:	fa1f f18c 	uxth.w	r1, ip
 8021e90:	fa1f f888 	uxth.w	r8, r8
 8021e94:	1a5b      	subs	r3, r3, r1
 8021e96:	fb08 f000 	mul.w	r0, r8, r0
 8021e9a:	b29b      	uxth	r3, r3
 8021e9c:	fb03 000e 	mla	r0, r3, lr, r0
 8021ea0:	fb01 0004 	mla	r0, r1, r4, r0
 8021ea4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021ea6:	fb09 0004 	mla	r0, r9, r4, r0
 8021eaa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021eae:	2800      	cmp	r0, #0
 8021eb0:	f000 80f2 	beq.w	8022098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021eb4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8021eb8:	d01b      	beq.n	8021ef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021eba:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8021ebe:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021ec2:	fb0e fa0a 	mul.w	sl, lr, sl
 8021ec6:	fb0e fe02 	mul.w	lr, lr, r2
 8021eca:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021ece:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021ed2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8021ed6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8021eda:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021ede:	4452      	add	r2, sl
 8021ee0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ee4:	0a12      	lsrs	r2, r2, #8
 8021ee6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021eea:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8021eee:	ea42 020c 	orr.w	r2, r2, ip
 8021ef2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021ef4:	2cff      	cmp	r4, #255	@ 0xff
 8021ef6:	d021      	beq.n	8021f3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8021ef8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021efa:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021efe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021f00:	fb04 fb0b 	mul.w	fp, r4, fp
 8021f04:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021f06:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021f0a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021f0c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021f10:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021f14:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f18:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021f1c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021f20:	44de      	add	lr, fp
 8021f22:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021f26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f2e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021f32:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021f36:	ea4e 040a 	orr.w	r4, lr, sl
 8021f3a:	940c      	str	r4, [sp, #48]	@ 0x30
 8021f3c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021f3e:	2cff      	cmp	r4, #255	@ 0xff
 8021f40:	d021      	beq.n	8021f86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8021f42:	9c08      	ldr	r4, [sp, #32]
 8021f44:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021f48:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021f4a:	fb04 fb0b 	mul.w	fp, r4, fp
 8021f4e:	9c08      	ldr	r4, [sp, #32]
 8021f50:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021f54:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021f56:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021f5a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021f5e:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f62:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021f66:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021f6a:	44de      	add	lr, fp
 8021f6c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021f70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f78:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021f7c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021f80:	ea4e 040a 	orr.w	r4, lr, sl
 8021f84:	9408      	str	r4, [sp, #32]
 8021f86:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021f88:	2cff      	cmp	r4, #255	@ 0xff
 8021f8a:	d021      	beq.n	8021fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021f8c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021f8e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021f92:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021f94:	fb04 fb0b 	mul.w	fp, r4, fp
 8021f98:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021f9a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021f9e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021fa0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021fa4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021fa8:	fb04 fa0a 	mul.w	sl, r4, sl
 8021fac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021fb0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021fb4:	44de      	add	lr, fp
 8021fb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021fba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021fbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021fc2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021fc6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021fca:	ea4e 040a 	orr.w	r4, lr, sl
 8021fce:	940d      	str	r4, [sp, #52]	@ 0x34
 8021fd0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021fd2:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8021fd6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021fda:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021fde:	9c08      	ldr	r4, [sp, #32]
 8021fe0:	fb08 fc0c 	mul.w	ip, r8, ip
 8021fe4:	fb03 cc0e 	mla	ip, r3, lr, ip
 8021fe8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021fec:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021fee:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021ff2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021ff6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021ff8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021ffc:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022000:	fb08 f80e 	mul.w	r8, r8, lr
 8022004:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022008:	fb03 8202 	mla	r2, r3, r2, r8
 802200c:	9b08      	ldr	r3, [sp, #32]
 802200e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022012:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8022016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022018:	fb01 220a 	mla	r2, r1, sl, r2
 802201c:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8022020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022022:	fb09 2901 	mla	r9, r9, r1, r2
 8022026:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022028:	4343      	muls	r3, r0
 802202a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802202e:	1c58      	adds	r0, r3, #1
 8022030:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8022034:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022038:	783b      	ldrb	r3, [r7, #0]
 802203a:	ea4c 0c09 	orr.w	ip, ip, r9
 802203e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022042:	fa5f f28c 	uxtb.w	r2, ip
 8022046:	b2c0      	uxtb	r0, r0
 8022048:	fb12 f201 	smulbb	r2, r2, r1
 802204c:	fb03 2300 	mla	r3, r3, r0, r2
 8022050:	b29b      	uxth	r3, r3
 8022052:	1c5a      	adds	r2, r3, #1
 8022054:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022058:	787a      	ldrb	r2, [r7, #1]
 802205a:	fb12 f200 	smulbb	r2, r2, r0
 802205e:	121b      	asrs	r3, r3, #8
 8022060:	703b      	strb	r3, [r7, #0]
 8022062:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022066:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802206a:	fb03 2301 	mla	r3, r3, r1, r2
 802206e:	b29b      	uxth	r3, r3
 8022070:	1c5a      	adds	r2, r3, #1
 8022072:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022076:	121b      	asrs	r3, r3, #8
 8022078:	707b      	strb	r3, [r7, #1]
 802207a:	78bb      	ldrb	r3, [r7, #2]
 802207c:	fb13 f000 	smulbb	r0, r3, r0
 8022080:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022084:	fa1f fc8c 	uxth.w	ip, ip
 8022088:	f10c 0301 	add.w	r3, ip, #1
 802208c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022090:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022094:	f887 c002 	strb.w	ip, [r7, #2]
 8022098:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802209a:	3703      	adds	r7, #3
 802209c:	441d      	add	r5, r3
 802209e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80220a0:	441e      	add	r6, r3
 80220a2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80220a4:	3b01      	subs	r3, #1
 80220a6:	9318      	str	r3, [sp, #96]	@ 0x60
 80220a8:	e69f      	b.n	8021dea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80220aa:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80220ac:	441d      	add	r5, r3
 80220ae:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80220b0:	441e      	add	r6, r3
 80220b2:	9b07      	ldr	r3, [sp, #28]
 80220b4:	3b01      	subs	r3, #1
 80220b6:	9307      	str	r3, [sp, #28]
 80220b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80220ba:	3303      	adds	r3, #3
 80220bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80220be:	e674      	b.n	8021daa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80220c0:	d025      	beq.n	802210e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80220c2:	9b07      	ldr	r3, [sp, #28]
 80220c4:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80220c6:	3b01      	subs	r3, #1
 80220c8:	fb00 5003 	mla	r0, r0, r3, r5
 80220cc:	1400      	asrs	r0, r0, #16
 80220ce:	f53f ae89 	bmi.w	8021de4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80220d2:	3901      	subs	r1, #1
 80220d4:	4288      	cmp	r0, r1
 80220d6:	f6bf ae85 	bge.w	8021de4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80220da:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80220dc:	fb01 6303 	mla	r3, r1, r3, r6
 80220e0:	141b      	asrs	r3, r3, #16
 80220e2:	f53f ae7f 	bmi.w	8021de4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80220e6:	3a01      	subs	r2, #1
 80220e8:	4293      	cmp	r3, r2
 80220ea:	f6bf ae7b 	bge.w	8021de4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80220ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80220f0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80220f4:	f103 0e03 	add.w	lr, r3, #3
 80220f8:	f1bb 0f00 	cmp.w	fp, #0
 80220fc:	dc6e      	bgt.n	80221dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80220fe:	9b07      	ldr	r3, [sp, #28]
 8022100:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022106:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802210a:	4423      	add	r3, r4
 802210c:	930a      	str	r3, [sp, #40]	@ 0x28
 802210e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022110:	2b00      	cmp	r3, #0
 8022112:	f340 81ab 	ble.w	802246c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8022116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802211a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802211c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022120:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022124:	eef0 6a62 	vmov.f32	s13, s5
 8022128:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802212c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022130:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022134:	ee16 5a90 	vmov	r5, s13
 8022138:	eef0 6a43 	vmov.f32	s13, s6
 802213c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022140:	ee16 6a90 	vmov	r6, s13
 8022144:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022148:	ee61 7a27 	vmul.f32	s15, s2, s15
 802214c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022150:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022154:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022158:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802215c:	ee12 2a90 	vmov	r2, s5
 8022160:	eef0 2a47 	vmov.f32	s5, s14
 8022164:	fb92 f3f3 	sdiv	r3, r2, r3
 8022168:	ee13 2a10 	vmov	r2, s6
 802216c:	9329      	str	r3, [sp, #164]	@ 0xa4
 802216e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022170:	eeb0 3a67 	vmov.f32	s6, s15
 8022174:	fb92 f3f3 	sdiv	r3, r2, r3
 8022178:	932a      	str	r3, [sp, #168]	@ 0xa8
 802217a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802217c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802217e:	3b01      	subs	r3, #1
 8022180:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022182:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022184:	bf08      	it	eq
 8022186:	4613      	moveq	r3, r2
 8022188:	9307      	str	r3, [sp, #28]
 802218a:	e600      	b.n	8021d8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802218c:	f1bc 0f00 	cmp.w	ip, #0
 8022190:	f43f ae6e 	beq.w	8021e70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022194:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8022198:	9308      	str	r3, [sp, #32]
 802219a:	0e1b      	lsrs	r3, r3, #24
 802219c:	9311      	str	r3, [sp, #68]	@ 0x44
 802219e:	e667      	b.n	8021e70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80221a0:	f112 0801 	adds.w	r8, r2, #1
 80221a4:	f53f af78 	bmi.w	8022098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80221a8:	45c6      	cmp	lr, r8
 80221aa:	f6ff af75 	blt.w	8022098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80221ae:	f110 0801 	adds.w	r8, r0, #1
 80221b2:	f53f af71 	bmi.w	8022098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80221b6:	4543      	cmp	r3, r8
 80221b8:	f6ff af6e 	blt.w	8022098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80221bc:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80221be:	b21b      	sxth	r3, r3
 80221c0:	9201      	str	r2, [sp, #4]
 80221c2:	9300      	str	r3, [sp, #0]
 80221c4:	fa0f f38e 	sxth.w	r3, lr
 80221c8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80221ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80221ce:	e9cd c404 	strd	ip, r4, [sp, #16]
 80221d2:	4639      	mov	r1, r7
 80221d4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80221d6:	f7ff fc79 	bl	8021acc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80221da:	e75d      	b.n	8022098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80221dc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80221de:	142f      	asrs	r7, r5, #16
 80221e0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80221e2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80221e6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80221ea:	1433      	asrs	r3, r6, #16
 80221ec:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80221f0:	fb02 7303 	mla	r3, r2, r3, r7
 80221f4:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80221f8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80221fc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022200:	2900      	cmp	r1, #0
 8022202:	f000 812a 	beq.w	802245a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8022206:	687c      	ldr	r4, [r7, #4]
 8022208:	940e      	str	r4, [sp, #56]	@ 0x38
 802220a:	0e24      	lsrs	r4, r4, #24
 802220c:	9415      	str	r4, [sp, #84]	@ 0x54
 802220e:	b178      	cbz	r0, 8022230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022210:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8022214:	3a01      	subs	r2, #1
 8022216:	0092      	lsls	r2, r2, #2
 8022218:	3204      	adds	r2, #4
 802221a:	eb07 0802 	add.w	r8, r7, r2
 802221e:	58ba      	ldr	r2, [r7, r2]
 8022220:	9209      	str	r2, [sp, #36]	@ 0x24
 8022222:	0e12      	lsrs	r2, r2, #24
 8022224:	9212      	str	r2, [sp, #72]	@ 0x48
 8022226:	f8d8 2004 	ldr.w	r2, [r8, #4]
 802222a:	920f      	str	r2, [sp, #60]	@ 0x3c
 802222c:	0e12      	lsrs	r2, r2, #24
 802222e:	9216      	str	r2, [sp, #88]	@ 0x58
 8022230:	b289      	uxth	r1, r1
 8022232:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022234:	b280      	uxth	r0, r0
 8022236:	fb01 f900 	mul.w	r9, r1, r0
 802223a:	0109      	lsls	r1, r1, #4
 802223c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022240:	eba1 0809 	sub.w	r8, r1, r9
 8022244:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8022248:	9915      	ldr	r1, [sp, #84]	@ 0x54
 802224a:	b280      	uxth	r0, r0
 802224c:	fa1f f888 	uxth.w	r8, r8
 8022250:	1a12      	subs	r2, r2, r0
 8022252:	fb08 f101 	mul.w	r1, r8, r1
 8022256:	b292      	uxth	r2, r2
 8022258:	fb02 110c 	mla	r1, r2, ip, r1
 802225c:	fb00 1104 	mla	r1, r0, r4, r1
 8022260:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022262:	fb09 1104 	mla	r1, r9, r4, r1
 8022266:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802226a:	2900      	cmp	r1, #0
 802226c:	f000 80ec 	beq.w	8022448 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8022270:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8022274:	d019      	beq.n	80222aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8022276:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802227a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802227e:	fb0c fa0a 	mul.w	sl, ip, sl
 8022282:	fb0c fc03 	mul.w	ip, ip, r3
 8022286:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802228a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802228e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8022292:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022296:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802229a:	4453      	add	r3, sl
 802229c:	0a3f      	lsrs	r7, r7, #8
 802229e:	0a1b      	lsrs	r3, r3, #8
 80222a0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80222a4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80222a8:	433b      	orrs	r3, r7
 80222aa:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80222ac:	2cff      	cmp	r4, #255	@ 0xff
 80222ae:	d020      	beq.n	80222f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 80222b0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80222b2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80222b6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80222b8:	4367      	muls	r7, r4
 80222ba:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80222bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80222c0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80222c4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80222c6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80222ca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80222ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80222d2:	44bc      	add	ip, r7
 80222d4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80222d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80222e0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80222e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80222e8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80222ec:	ea4c 040a 	orr.w	r4, ip, sl
 80222f0:	940e      	str	r4, [sp, #56]	@ 0x38
 80222f2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80222f4:	2cff      	cmp	r4, #255	@ 0xff
 80222f6:	d020      	beq.n	802233a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 80222f8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80222fa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80222fe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022300:	4367      	muls	r7, r4
 8022302:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022304:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022308:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802230c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802230e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022312:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022316:	fb04 fa0a 	mul.w	sl, r4, sl
 802231a:	44bc      	add	ip, r7
 802231c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022320:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022324:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022328:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802232c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022330:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022334:	ea4c 040a 	orr.w	r4, ip, sl
 8022338:	9409      	str	r4, [sp, #36]	@ 0x24
 802233a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802233c:	2cff      	cmp	r4, #255	@ 0xff
 802233e:	d020      	beq.n	8022382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8022340:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022342:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022346:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022348:	4367      	muls	r7, r4
 802234a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802234c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022350:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022354:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022356:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802235a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802235e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022362:	44bc      	add	ip, r7
 8022364:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022368:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802236c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022370:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022374:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022378:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802237c:	ea4c 040a 	orr.w	r4, ip, sl
 8022380:	940f      	str	r4, [sp, #60]	@ 0x3c
 8022382:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022384:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8022388:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802238c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022390:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022392:	fb08 f707 	mul.w	r7, r8, r7
 8022396:	fb02 770c 	mla	r7, r2, ip, r7
 802239a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802239e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80223a0:	fb00 770c 	mla	r7, r0, ip, r7
 80223a4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80223a8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80223aa:	fb09 770c 	mla	r7, r9, ip, r7
 80223ae:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80223b2:	fb08 f80c 	mul.w	r8, r8, ip
 80223b6:	0a3f      	lsrs	r7, r7, #8
 80223b8:	fb02 8303 	mla	r3, r2, r3, r8
 80223bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80223be:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80223c2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80223c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80223c8:	fb00 330a 	mla	r3, r0, sl, r3
 80223cc:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80223d0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80223d2:	fb09 3c0c 	mla	ip, r9, ip, r3
 80223d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80223d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223dc:	434b      	muls	r3, r1
 80223de:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80223e2:	1c59      	adds	r1, r3, #1
 80223e4:	ea47 070c 	orr.w	r7, r7, ip
 80223e8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80223ec:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80223f0:	b2fa      	uxtb	r2, r7
 80223f2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80223f6:	fb12 f200 	smulbb	r2, r2, r0
 80223fa:	b2c9      	uxtb	r1, r1
 80223fc:	fb03 2301 	mla	r3, r3, r1, r2
 8022400:	b29b      	uxth	r3, r3
 8022402:	1c5a      	adds	r2, r3, #1
 8022404:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022408:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802240c:	fb12 f201 	smulbb	r2, r2, r1
 8022410:	121b      	asrs	r3, r3, #8
 8022412:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022416:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802241a:	0c3f      	lsrs	r7, r7, #16
 802241c:	fb03 2300 	mla	r3, r3, r0, r2
 8022420:	b29b      	uxth	r3, r3
 8022422:	1c5a      	adds	r2, r3, #1
 8022424:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022428:	121b      	asrs	r3, r3, #8
 802242a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802242e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022432:	fb13 f101 	smulbb	r1, r3, r1
 8022436:	fb07 1700 	mla	r7, r7, r0, r1
 802243a:	b2bf      	uxth	r7, r7
 802243c:	1c79      	adds	r1, r7, #1
 802243e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022442:	123f      	asrs	r7, r7, #8
 8022444:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8022448:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802244a:	f10e 0e03 	add.w	lr, lr, #3
 802244e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022452:	441d      	add	r5, r3
 8022454:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022456:	441e      	add	r6, r3
 8022458:	e64e      	b.n	80220f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 802245a:	2800      	cmp	r0, #0
 802245c:	f43f aee8 	beq.w	8022230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022460:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8022464:	9209      	str	r2, [sp, #36]	@ 0x24
 8022466:	0e12      	lsrs	r2, r2, #24
 8022468:	9212      	str	r2, [sp, #72]	@ 0x48
 802246a:	e6e1      	b.n	8022230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802246c:	b01d      	add	sp, #116	@ 0x74
 802246e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022472 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8022472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022476:	b087      	sub	sp, #28
 8022478:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 802247c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8022480:	fb05 7003 	mla	r0, r5, r3, r7
 8022484:	2d00      	cmp	r5, #0
 8022486:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 802248a:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 802248e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8022492:	f2c0 810a 	blt.w	80226aa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8022496:	45a8      	cmp	r8, r5
 8022498:	f340 8107 	ble.w	80226aa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 802249c:	2f00      	cmp	r7, #0
 802249e:	f2c0 8102 	blt.w	80226a6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80224a2:	42bb      	cmp	r3, r7
 80224a4:	f340 80ff 	ble.w	80226a6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80224a8:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80224ac:	1c7a      	adds	r2, r7, #1
 80224ae:	f100 80ff 	bmi.w	80226b0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80224b2:	4293      	cmp	r3, r2
 80224b4:	f340 80fc 	ble.w	80226b0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80224b8:	2c00      	cmp	r4, #0
 80224ba:	f000 80fb 	beq.w	80226b4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 80224be:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80224c2:	3501      	adds	r5, #1
 80224c4:	f100 80fa 	bmi.w	80226bc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80224c8:	45a8      	cmp	r8, r5
 80224ca:	f340 80f7 	ble.w	80226bc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80224ce:	f1be 0f00 	cmp.w	lr, #0
 80224d2:	f000 80f6 	beq.w	80226c2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 80224d6:	2f00      	cmp	r7, #0
 80224d8:	f2c0 80ee 	blt.w	80226b8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80224dc:	42bb      	cmp	r3, r7
 80224de:	f340 80eb 	ble.w	80226b8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80224e2:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80224e6:	3701      	adds	r7, #1
 80224e8:	f100 80ee 	bmi.w	80226c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80224ec:	42bb      	cmp	r3, r7
 80224ee:	f340 80eb 	ble.w	80226c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80224f2:	2c00      	cmp	r4, #0
 80224f4:	f000 80ea 	beq.w	80226cc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 80224f8:	3301      	adds	r3, #1
 80224fa:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80224fe:	fa1f fc84 	uxth.w	ip, r4
 8022502:	fa1f fe8e 	uxth.w	lr, lr
 8022506:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802250a:	fb0c f90e 	mul.w	r9, ip, lr
 802250e:	0e13      	lsrs	r3, r2, #24
 8022510:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022514:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8022518:	9302      	str	r3, [sp, #8]
 802251a:	ebac 0709 	sub.w	r7, ip, r9
 802251e:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8022522:	fa1f f48e 	uxth.w	r4, lr
 8022526:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 802252a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802252e:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8022532:	fb0a fe0e 	mul.w	lr, sl, lr
 8022536:	1b1b      	subs	r3, r3, r4
 8022538:	fb0a f606 	mul.w	r6, sl, r6
 802253c:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8022540:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022544:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8022548:	b29b      	uxth	r3, r3
 802254a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802254e:	b2bf      	uxth	r7, r7
 8022550:	9301      	str	r3, [sp, #4]
 8022552:	44e6      	add	lr, ip
 8022554:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8022558:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802255c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022560:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8022564:	9303      	str	r3, [sp, #12]
 8022566:	0a33      	lsrs	r3, r6, #8
 8022568:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 802256c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8022570:	9304      	str	r3, [sp, #16]
 8022572:	fb0b f606 	mul.w	r6, fp, r6
 8022576:	fb0b f000 	mul.w	r0, fp, r0
 802257a:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802257e:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022582:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022586:	44b6      	add	lr, r6
 8022588:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 802258c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8022590:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8022594:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8022598:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802259c:	fb08 f606 	mul.w	r6, r8, r6
 80225a0:	0a03      	lsrs	r3, r0, #8
 80225a2:	fb08 f505 	mul.w	r5, r8, r5
 80225a6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80225aa:	0a30      	lsrs	r0, r6, #8
 80225ac:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80225b0:	9305      	str	r3, [sp, #20]
 80225b2:	0e13      	lsrs	r3, r2, #24
 80225b4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80225b8:	fb0e fe07 	mul.w	lr, lr, r7
 80225bc:	4430      	add	r0, r6
 80225be:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 80225c2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80225c6:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 80225ca:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80225ce:	0a00      	lsrs	r0, r0, #8
 80225d0:	435e      	muls	r6, r3
 80225d2:	0a2d      	lsrs	r5, r5, #8
 80225d4:	435a      	muls	r2, r3
 80225d6:	9b03      	ldr	r3, [sp, #12]
 80225d8:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80225dc:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80225e0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80225e4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80225e8:	44b4      	add	ip, r6
 80225ea:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80225ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80225f2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80225f6:	9e01      	ldr	r6, [sp, #4]
 80225f8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80225fc:	fb03 ee06 	mla	lr, r3, r6, lr
 8022600:	9b04      	ldr	r3, [sp, #16]
 8022602:	0a12      	lsrs	r2, r2, #8
 8022604:	fb0c ee09 	mla	lr, ip, r9, lr
 8022608:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 802260c:	9b05      	ldr	r3, [sp, #20]
 802260e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022612:	fb00 ee04 	mla	lr, r0, r4, lr
 8022616:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802261a:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 802261e:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8022622:	9b01      	ldr	r3, [sp, #4]
 8022624:	fb07 fe0e 	mul.w	lr, r7, lr
 8022628:	fb07 f70b 	mul.w	r7, r7, fp
 802262c:	fb03 ee06 	mla	lr, r3, r6, lr
 8022630:	fb03 730a 	mla	r3, r3, sl, r7
 8022634:	fb09 e202 	mla	r2, r9, r2, lr
 8022638:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802263c:	fb04 2e0e 	mla	lr, r4, lr, r2
 8022640:	fb04 3408 	mla	r4, r4, r8, r3
 8022644:	9b02      	ldr	r3, [sp, #8]
 8022646:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802264a:	fb09 4903 	mla	r9, r9, r3, r4
 802264e:	780b      	ldrb	r3, [r1, #0]
 8022650:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8022654:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8022658:	ea40 0e0e 	orr.w	lr, r0, lr
 802265c:	fa5f f989 	uxtb.w	r9, r9
 8022660:	fb03 f209 	mul.w	r2, r3, r9
 8022664:	1c53      	adds	r3, r2, #1
 8022666:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802266a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802266e:	700b      	strb	r3, [r1, #0]
 8022670:	784b      	ldrb	r3, [r1, #1]
 8022672:	fb03 f309 	mul.w	r3, r3, r9
 8022676:	1c5a      	adds	r2, r3, #1
 8022678:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802267c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022680:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022684:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022688:	704b      	strb	r3, [r1, #1]
 802268a:	788b      	ldrb	r3, [r1, #2]
 802268c:	fb03 f909 	mul.w	r9, r3, r9
 8022690:	f109 0301 	add.w	r3, r9, #1
 8022694:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8022698:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 802269c:	f881 e002 	strb.w	lr, [r1, #2]
 80226a0:	b007      	add	sp, #28
 80226a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226a6:	2600      	movs	r6, #0
 80226a8:	e700      	b.n	80224ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 80226aa:	2000      	movs	r0, #0
 80226ac:	4606      	mov	r6, r0
 80226ae:	e708      	b.n	80224c2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80226b0:	2000      	movs	r0, #0
 80226b2:	e706      	b.n	80224c2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80226b4:	4620      	mov	r0, r4
 80226b6:	e704      	b.n	80224c2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80226b8:	2500      	movs	r5, #0
 80226ba:	e714      	b.n	80224e6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 80226bc:	2200      	movs	r2, #0
 80226be:	4615      	mov	r5, r2
 80226c0:	e71d      	b.n	80224fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80226c2:	4672      	mov	r2, lr
 80226c4:	4675      	mov	r5, lr
 80226c6:	e71a      	b.n	80224fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80226c8:	2200      	movs	r2, #0
 80226ca:	e718      	b.n	80224fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80226cc:	4622      	mov	r2, r4
 80226ce:	e716      	b.n	80224fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

080226d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80226d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226d4:	b099      	sub	sp, #100	@ 0x64
 80226d6:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 80226da:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80226dc:	9017      	str	r0, [sp, #92]	@ 0x5c
 80226de:	9306      	str	r3, [sp, #24]
 80226e0:	6850      	ldr	r0, [r2, #4]
 80226e2:	6812      	ldr	r2, [r2, #0]
 80226e4:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 80226e8:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 80226ec:	fb00 1303 	mla	r3, r0, r3, r1
 80226f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80226f4:	18d3      	adds	r3, r2, r3
 80226f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80226f8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80226fa:	681b      	ldr	r3, [r3, #0]
 80226fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80226fe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022700:	2b00      	cmp	r3, #0
 8022702:	dc03      	bgt.n	802270c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022704:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022706:	2b00      	cmp	r3, #0
 8022708:	f340 8360 	ble.w	8022dcc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 802270c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802270e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022712:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022716:	1e48      	subs	r0, r1, #1
 8022718:	1e57      	subs	r7, r2, #1
 802271a:	9b06      	ldr	r3, [sp, #24]
 802271c:	2b00      	cmp	r3, #0
 802271e:	f340 817b 	ble.w	8022a18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8022722:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022726:	ea4f 4326 	mov.w	r3, r6, asr #16
 802272a:	d406      	bmi.n	802273a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802272c:	4584      	cmp	ip, r0
 802272e:	da04      	bge.n	802273a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022730:	2b00      	cmp	r3, #0
 8022732:	db02      	blt.n	802273a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022734:	42bb      	cmp	r3, r7
 8022736:	f2c0 8170 	blt.w	8022a1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802273a:	f11c 0c01 	adds.w	ip, ip, #1
 802273e:	f100 8160 	bmi.w	8022a02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022742:	4561      	cmp	r1, ip
 8022744:	f2c0 815d 	blt.w	8022a02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022748:	3301      	adds	r3, #1
 802274a:	f100 815a 	bmi.w	8022a02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802274e:	429a      	cmp	r2, r3
 8022750:	f2c0 8157 	blt.w	8022a02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022754:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022758:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802275a:	f1b8 0f00 	cmp.w	r8, #0
 802275e:	f340 8179 	ble.w	8022a54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8022762:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8022764:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022768:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802276a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802276e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022772:	142a      	asrs	r2, r5, #16
 8022774:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022778:	689b      	ldr	r3, [r3, #8]
 802277a:	f100 81be 	bmi.w	8022afa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802277e:	f103 39ff 	add.w	r9, r3, #4294967295
 8022782:	454a      	cmp	r2, r9
 8022784:	f280 81b9 	bge.w	8022afa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022788:	f1bc 0f00 	cmp.w	ip, #0
 802278c:	f2c0 81b5 	blt.w	8022afa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022790:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022794:	45cc      	cmp	ip, r9
 8022796:	f280 81b0 	bge.w	8022afa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802279a:	b21b      	sxth	r3, r3
 802279c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802279e:	fb0c 2203 	mla	r2, ip, r3, r2
 80227a2:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80227a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80227aa:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80227ae:	2900      	cmp	r1, #0
 80227b0:	f000 8197 	beq.w	8022ae2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80227b4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80227b8:	940a      	str	r4, [sp, #40]	@ 0x28
 80227ba:	0e24      	lsrs	r4, r4, #24
 80227bc:	9411      	str	r4, [sp, #68]	@ 0x44
 80227be:	b180      	cbz	r0, 80227e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80227c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80227c4:	3b01      	subs	r3, #1
 80227c6:	009b      	lsls	r3, r3, #2
 80227c8:	3304      	adds	r3, #4
 80227ca:	eb09 0c03 	add.w	ip, r9, r3
 80227ce:	f859 3003 	ldr.w	r3, [r9, r3]
 80227d2:	9307      	str	r3, [sp, #28]
 80227d4:	0e1b      	lsrs	r3, r3, #24
 80227d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80227d8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80227dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80227de:	0e1b      	lsrs	r3, r3, #24
 80227e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80227e2:	b289      	uxth	r1, r1
 80227e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80227e6:	b280      	uxth	r0, r0
 80227e8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80227ea:	fb01 fa00 	mul.w	sl, r1, r0
 80227ee:	0109      	lsls	r1, r1, #4
 80227f0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80227f4:	eba1 090a 	sub.w	r9, r1, sl
 80227f8:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80227fc:	b280      	uxth	r0, r0
 80227fe:	fa1f f989 	uxth.w	r9, r9
 8022802:	1a09      	subs	r1, r1, r0
 8022804:	fb09 f303 	mul.w	r3, r9, r3
 8022808:	b289      	uxth	r1, r1
 802280a:	fb01 330e 	mla	r3, r1, lr, r3
 802280e:	fb00 3304 	mla	r3, r0, r4, r3
 8022812:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022814:	fb0a 3304 	mla	r3, sl, r4, r3
 8022818:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802281c:	2b00      	cmp	r3, #0
 802281e:	f000 80e8 	beq.w	80229f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022822:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8022826:	d01b      	beq.n	8022860 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8022828:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 802282c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022830:	fb0e fb0b 	mul.w	fp, lr, fp
 8022834:	fb0e fe02 	mul.w	lr, lr, r2
 8022838:	ea4f 221b 	mov.w	r2, fp, lsr #8
 802283c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022840:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8022844:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022848:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802284c:	445a      	add	r2, fp
 802284e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022852:	0a12      	lsrs	r2, r2, #8
 8022854:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022858:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802285c:	ea42 020c 	orr.w	r2, r2, ip
 8022860:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022862:	2cff      	cmp	r4, #255	@ 0xff
 8022864:	d021      	beq.n	80228aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022866:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022868:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802286c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802286e:	fb04 fc0c 	mul.w	ip, r4, ip
 8022872:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022874:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022878:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802287c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802287e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022882:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022886:	fb04 fb0b 	mul.w	fp, r4, fp
 802288a:	44e6      	add	lr, ip
 802288c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8022890:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022894:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022898:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802289c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80228a0:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80228a4:	ea4e 040b 	orr.w	r4, lr, fp
 80228a8:	940a      	str	r4, [sp, #40]	@ 0x28
 80228aa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80228ac:	2cff      	cmp	r4, #255	@ 0xff
 80228ae:	d021      	beq.n	80228f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80228b0:	9c07      	ldr	r4, [sp, #28]
 80228b2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80228b6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80228b8:	fb04 fc0c 	mul.w	ip, r4, ip
 80228bc:	9c07      	ldr	r4, [sp, #28]
 80228be:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80228c2:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80228c6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80228c8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80228cc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80228d0:	fb04 fb0b 	mul.w	fp, r4, fp
 80228d4:	44e6      	add	lr, ip
 80228d6:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80228da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80228de:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80228e2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80228e6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80228ea:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80228ee:	ea4e 040b 	orr.w	r4, lr, fp
 80228f2:	9407      	str	r4, [sp, #28]
 80228f4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80228f6:	2cff      	cmp	r4, #255	@ 0xff
 80228f8:	d021      	beq.n	802293e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80228fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80228fc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022900:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022902:	fb04 fc0c 	mul.w	ip, r4, ip
 8022906:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022908:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802290c:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8022910:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022912:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022916:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802291a:	fb04 fb0b 	mul.w	fp, r4, fp
 802291e:	44e6      	add	lr, ip
 8022920:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8022924:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022928:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802292c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022930:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022934:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8022938:	ea4e 040b 	orr.w	r4, lr, fp
 802293c:	940b      	str	r4, [sp, #44]	@ 0x2c
 802293e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022940:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8022944:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022948:	2bff      	cmp	r3, #255	@ 0xff
 802294a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802294e:	9c07      	ldr	r4, [sp, #28]
 8022950:	fb09 fc0c 	mul.w	ip, r9, ip
 8022954:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022958:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802295c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802295e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022962:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022966:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022968:	fb0a cc0e 	mla	ip, sl, lr, ip
 802296c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022970:	fb09 f90e 	mul.w	r9, r9, lr
 8022974:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022978:	fb01 9202 	mla	r2, r1, r2, r9
 802297c:	9907      	ldr	r1, [sp, #28]
 802297e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022982:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8022986:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022988:	fb00 220b 	mla	r2, r0, fp, r2
 802298c:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8022990:	fb0a 2a00 	mla	sl, sl, r0, r2
 8022994:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022998:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802299c:	ea4c 0c0a 	orr.w	ip, ip, sl
 80229a0:	fa5f f08c 	uxtb.w	r0, ip
 80229a4:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80229a8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80229ac:	f000 80a2 	beq.w	8022af4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80229b0:	43db      	mvns	r3, r3
 80229b2:	783a      	ldrb	r2, [r7, #0]
 80229b4:	f897 a002 	ldrb.w	sl, [r7, #2]
 80229b8:	b2db      	uxtb	r3, r3
 80229ba:	fb02 fe03 	mul.w	lr, r2, r3
 80229be:	fb0a fa03 	mul.w	sl, sl, r3
 80229c2:	f10e 0201 	add.w	r2, lr, #1
 80229c6:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80229ca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80229ce:	703a      	strb	r2, [r7, #0]
 80229d0:	787a      	ldrb	r2, [r7, #1]
 80229d2:	fb02 f003 	mul.w	r0, r2, r3
 80229d6:	f10a 0301 	add.w	r3, sl, #1
 80229da:	1c42      	adds	r2, r0, #1
 80229dc:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80229e0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80229e4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80229e8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80229ec:	707a      	strb	r2, [r7, #1]
 80229ee:	f887 c002 	strb.w	ip, [r7, #2]
 80229f2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80229f4:	3703      	adds	r7, #3
 80229f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80229fa:	441d      	add	r5, r3
 80229fc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80229fe:	441e      	add	r6, r3
 8022a00:	e6ab      	b.n	802275a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022a02:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022a04:	441d      	add	r5, r3
 8022a06:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022a08:	441e      	add	r6, r3
 8022a0a:	9b06      	ldr	r3, [sp, #24]
 8022a0c:	3b01      	subs	r3, #1
 8022a0e:	9306      	str	r3, [sp, #24]
 8022a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a12:	3303      	adds	r3, #3
 8022a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8022a16:	e680      	b.n	802271a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022a18:	d024      	beq.n	8022a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8022a1a:	9b06      	ldr	r3, [sp, #24]
 8022a1c:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8022a1e:	3b01      	subs	r3, #1
 8022a20:	fb00 5003 	mla	r0, r0, r3, r5
 8022a24:	1400      	asrs	r0, r0, #16
 8022a26:	f53f ae95 	bmi.w	8022754 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022a2a:	3901      	subs	r1, #1
 8022a2c:	4288      	cmp	r0, r1
 8022a2e:	f6bf ae91 	bge.w	8022754 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022a32:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8022a34:	fb01 6303 	mla	r3, r1, r3, r6
 8022a38:	141b      	asrs	r3, r3, #16
 8022a3a:	f53f ae8b 	bmi.w	8022754 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022a3e:	3a01      	subs	r2, #1
 8022a40:	4293      	cmp	r3, r2
 8022a42:	f6bf ae87 	bge.w	8022754 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a48:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022a4c:	1cdf      	adds	r7, r3, #3
 8022a4e:	f1bb 0f00 	cmp.w	fp, #0
 8022a52:	dc6e      	bgt.n	8022b32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8022a54:	9b06      	ldr	r3, [sp, #24]
 8022a56:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022a60:	4423      	add	r3, r4
 8022a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8022a64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022a66:	2b00      	cmp	r3, #0
 8022a68:	f340 81b0 	ble.w	8022dcc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8022a6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022a70:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022a72:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a7a:	eef0 6a62 	vmov.f32	s13, s5
 8022a7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022a82:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022a86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a8a:	ee16 5a90 	vmov	r5, s13
 8022a8e:	eef0 6a43 	vmov.f32	s13, s6
 8022a92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a96:	ee16 6a90 	vmov	r6, s13
 8022a9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022aa2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022aa6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022aaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022aae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022ab2:	ee12 2a90 	vmov	r2, s5
 8022ab6:	eef0 2a47 	vmov.f32	s5, s14
 8022aba:	fb92 f3f3 	sdiv	r3, r2, r3
 8022abe:	ee13 2a10 	vmov	r2, s6
 8022ac2:	9325      	str	r3, [sp, #148]	@ 0x94
 8022ac4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022ac6:	eeb0 3a67 	vmov.f32	s6, s15
 8022aca:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ace:	9326      	str	r3, [sp, #152]	@ 0x98
 8022ad0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022ad2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022ad4:	3b01      	subs	r3, #1
 8022ad6:	9315      	str	r3, [sp, #84]	@ 0x54
 8022ad8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022ada:	bf08      	it	eq
 8022adc:	4613      	moveq	r3, r2
 8022ade:	9306      	str	r3, [sp, #24]
 8022ae0:	e60d      	b.n	80226fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022ae2:	2800      	cmp	r0, #0
 8022ae4:	f43f ae7d 	beq.w	80227e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022ae8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8022aec:	9307      	str	r3, [sp, #28]
 8022aee:	0e1b      	lsrs	r3, r3, #24
 8022af0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022af2:	e676      	b.n	80227e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022af4:	7038      	strb	r0, [r7, #0]
 8022af6:	7079      	strb	r1, [r7, #1]
 8022af8:	e779      	b.n	80229ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8022afa:	f112 0901 	adds.w	r9, r2, #1
 8022afe:	f53f af78 	bmi.w	80229f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022b02:	454b      	cmp	r3, r9
 8022b04:	f6ff af75 	blt.w	80229f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022b08:	f11c 0901 	adds.w	r9, ip, #1
 8022b0c:	f53f af71 	bmi.w	80229f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022b10:	45ce      	cmp	lr, r9
 8022b12:	f6ff af6e 	blt.w	80229f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022b16:	b21b      	sxth	r3, r3
 8022b18:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8022b1c:	fa0f f28e 	sxth.w	r2, lr
 8022b20:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8022b24:	9200      	str	r2, [sp, #0]
 8022b26:	4639      	mov	r1, r7
 8022b28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022b2a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8022b2c:	f7ff fca1 	bl	8022472 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8022b30:	e75f      	b.n	80229f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022b32:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022b34:	1429      	asrs	r1, r5, #16
 8022b36:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022b38:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022b3c:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8022b40:	1433      	asrs	r3, r6, #16
 8022b42:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022b46:	fb0c 1303 	mla	r3, ip, r3, r1
 8022b4a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022b4c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022b50:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022b54:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022b58:	2a00      	cmp	r2, #0
 8022b5a:	f000 8129 	beq.w	8022db0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8022b5e:	684c      	ldr	r4, [r1, #4]
 8022b60:	940c      	str	r4, [sp, #48]	@ 0x30
 8022b62:	0e24      	lsrs	r4, r4, #24
 8022b64:	9413      	str	r4, [sp, #76]	@ 0x4c
 8022b66:	b198      	cbz	r0, 8022b90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022b68:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8022b6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022b70:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8022b74:	f10c 0c04 	add.w	ip, ip, #4
 8022b78:	eb01 080c 	add.w	r8, r1, ip
 8022b7c:	f851 100c 	ldr.w	r1, [r1, ip]
 8022b80:	9108      	str	r1, [sp, #32]
 8022b82:	0e09      	lsrs	r1, r1, #24
 8022b84:	9110      	str	r1, [sp, #64]	@ 0x40
 8022b86:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022b8a:	910d      	str	r1, [sp, #52]	@ 0x34
 8022b8c:	0e09      	lsrs	r1, r1, #24
 8022b8e:	9114      	str	r1, [sp, #80]	@ 0x50
 8022b90:	b292      	uxth	r2, r2
 8022b92:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022b94:	b280      	uxth	r0, r0
 8022b96:	fb02 f900 	mul.w	r9, r2, r0
 8022b9a:	0112      	lsls	r2, r2, #4
 8022b9c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022ba0:	eba2 0809 	sub.w	r8, r2, r9
 8022ba4:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8022ba8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022baa:	b280      	uxth	r0, r0
 8022bac:	fa1f f888 	uxth.w	r8, r8
 8022bb0:	1a09      	subs	r1, r1, r0
 8022bb2:	fb08 f202 	mul.w	r2, r8, r2
 8022bb6:	b289      	uxth	r1, r1
 8022bb8:	fb01 220e 	mla	r2, r1, lr, r2
 8022bbc:	fb00 2204 	mla	r2, r0, r4, r2
 8022bc0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022bc2:	fb09 2204 	mla	r2, r9, r4, r2
 8022bc6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022bca:	2a00      	cmp	r2, #0
 8022bcc:	f000 80e8 	beq.w	8022da0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8022bd0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8022bd4:	d01b      	beq.n	8022c0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8022bd6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8022bda:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022bde:	fb0e fa0a 	mul.w	sl, lr, sl
 8022be2:	fb0e fe03 	mul.w	lr, lr, r3
 8022be6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022bea:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8022bee:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8022bf2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022bf6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022bfa:	4453      	add	r3, sl
 8022bfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c00:	0a1b      	lsrs	r3, r3, #8
 8022c02:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022c06:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022c0a:	ea43 030c 	orr.w	r3, r3, ip
 8022c0e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022c10:	2cff      	cmp	r4, #255	@ 0xff
 8022c12:	d021      	beq.n	8022c58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8022c14:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022c16:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022c1a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022c1c:	fb04 fc0c 	mul.w	ip, r4, ip
 8022c20:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022c22:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022c26:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022c2a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022c2c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022c30:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022c34:	fb04 fa0a 	mul.w	sl, r4, sl
 8022c38:	44e6      	add	lr, ip
 8022c3a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022c3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c42:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022c46:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022c4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c4e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022c52:	ea4e 040a 	orr.w	r4, lr, sl
 8022c56:	940c      	str	r4, [sp, #48]	@ 0x30
 8022c58:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022c5a:	2cff      	cmp	r4, #255	@ 0xff
 8022c5c:	d021      	beq.n	8022ca2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8022c5e:	9c08      	ldr	r4, [sp, #32]
 8022c60:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022c64:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022c66:	fb04 fc0c 	mul.w	ip, r4, ip
 8022c6a:	9c08      	ldr	r4, [sp, #32]
 8022c6c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022c70:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022c72:	fb04 fa0e 	mul.w	sl, r4, lr
 8022c76:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022c7a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022c7e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022c82:	44e6      	add	lr, ip
 8022c84:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022c88:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022c8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c94:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022c98:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022c9c:	ea4e 040a 	orr.w	r4, lr, sl
 8022ca0:	9408      	str	r4, [sp, #32]
 8022ca2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022ca4:	2cff      	cmp	r4, #255	@ 0xff
 8022ca6:	d021      	beq.n	8022cec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8022ca8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022caa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022cae:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022cb0:	fb04 fc0c 	mul.w	ip, r4, ip
 8022cb4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022cb6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022cba:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022cbe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022cc0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022cc4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022cc8:	fb04 fa0a 	mul.w	sl, r4, sl
 8022ccc:	44e6      	add	lr, ip
 8022cce:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022cd2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022cd6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022cda:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022cde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022ce2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022ce6:	ea4e 040a 	orr.w	r4, lr, sl
 8022cea:	940d      	str	r4, [sp, #52]	@ 0x34
 8022cec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022cee:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8022cf2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022cf6:	2aff      	cmp	r2, #255	@ 0xff
 8022cf8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022cfc:	9c08      	ldr	r4, [sp, #32]
 8022cfe:	fb08 fc0c 	mul.w	ip, r8, ip
 8022d02:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022d06:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022d0a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022d0c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022d10:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022d14:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022d16:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022d1a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022d1e:	fb08 f80e 	mul.w	r8, r8, lr
 8022d22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d26:	fb01 8303 	mla	r3, r1, r3, r8
 8022d2a:	9908      	ldr	r1, [sp, #32]
 8022d2c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022d30:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8022d34:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022d36:	fb00 330a 	mla	r3, r0, sl, r3
 8022d3a:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8022d3e:	fb09 3e0e 	mla	lr, r9, lr, r3
 8022d42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d46:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8022d4a:	ea4c 0c0e 	orr.w	ip, ip, lr
 8022d4e:	fa5f f08c 	uxtb.w	r0, ip
 8022d52:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8022d56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022d5a:	d032      	beq.n	8022dc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8022d5c:	43d2      	mvns	r2, r2
 8022d5e:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8022d62:	b2d2      	uxtb	r2, r2
 8022d64:	fb0e fe02 	mul.w	lr, lr, r2
 8022d68:	f10e 0301 	add.w	r3, lr, #1
 8022d6c:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8022d70:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022d74:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8022d78:	4350      	muls	r0, r2
 8022d7a:	f807 3c03 	strb.w	r3, [r7, #-3]
 8022d7e:	1c43      	adds	r3, r0, #1
 8022d80:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022d84:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022d88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8022d8c:	4353      	muls	r3, r2
 8022d8e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8022d92:	1c5a      	adds	r2, r3, #1
 8022d94:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022d98:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8022d9c:	f807 cc01 	strb.w	ip, [r7, #-1]
 8022da0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022da2:	3703      	adds	r7, #3
 8022da4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022da8:	441d      	add	r5, r3
 8022daa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022dac:	441e      	add	r6, r3
 8022dae:	e64e      	b.n	8022a4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8022db0:	2800      	cmp	r0, #0
 8022db2:	f43f aeed 	beq.w	8022b90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022db6:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8022dba:	9108      	str	r1, [sp, #32]
 8022dbc:	0e09      	lsrs	r1, r1, #24
 8022dbe:	9110      	str	r1, [sp, #64]	@ 0x40
 8022dc0:	e6e6      	b.n	8022b90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022dc2:	f807 0c03 	strb.w	r0, [r7, #-3]
 8022dc6:	f807 1c02 	strb.w	r1, [r7, #-2]
 8022dca:	e7e7      	b.n	8022d9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8022dcc:	b019      	add	sp, #100	@ 0x64
 8022dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022dd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8022dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dd8:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8022ddc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8022de0:	2c00      	cmp	r4, #0
 8022de2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8022de6:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8022dea:	fb00 4e03 	mla	lr, r0, r3, r4
 8022dee:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8022df2:	f2c0 80b8 	blt.w	8022f66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022df6:	45a1      	cmp	r9, r4
 8022df8:	f340 80b5 	ble.w	8022f66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022dfc:	2800      	cmp	r0, #0
 8022dfe:	f2c0 80b2 	blt.w	8022f66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022e02:	4580      	cmp	r8, r0
 8022e04:	f340 80af 	ble.w	8022f66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022e08:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8022e0c:	f01e 0f01 	tst.w	lr, #1
 8022e10:	5d56      	ldrb	r6, [r2, r5]
 8022e12:	bf0c      	ite	eq
 8022e14:	f006 060f 	andeq.w	r6, r6, #15
 8022e18:	1136      	asrne	r6, r6, #4
 8022e1a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022e1e:	b2f6      	uxtb	r6, r6
 8022e20:	f114 0a01 	adds.w	sl, r4, #1
 8022e24:	f100 80a1 	bmi.w	8022f6a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022e28:	45d1      	cmp	r9, sl
 8022e2a:	f340 809e 	ble.w	8022f6a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022e2e:	2800      	cmp	r0, #0
 8022e30:	f2c0 809b 	blt.w	8022f6a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022e34:	4580      	cmp	r8, r0
 8022e36:	f340 8098 	ble.w	8022f6a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022e3a:	2f00      	cmp	r7, #0
 8022e3c:	f000 8097 	beq.w	8022f6e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8022e40:	f10e 0b01 	add.w	fp, lr, #1
 8022e44:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8022e48:	f01b 0f01 	tst.w	fp, #1
 8022e4c:	5d55      	ldrb	r5, [r2, r5]
 8022e4e:	bf0c      	ite	eq
 8022e50:	f005 050f 	andeq.w	r5, r5, #15
 8022e54:	112d      	asrne	r5, r5, #4
 8022e56:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022e5a:	b2ed      	uxtb	r5, r5
 8022e5c:	f1bc 0f00 	cmp.w	ip, #0
 8022e60:	f000 8089 	beq.w	8022f76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8022e64:	2c00      	cmp	r4, #0
 8022e66:	f100 0001 	add.w	r0, r0, #1
 8022e6a:	f2c0 8082 	blt.w	8022f72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022e6e:	45a1      	cmp	r9, r4
 8022e70:	dd7f      	ble.n	8022f72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022e72:	2800      	cmp	r0, #0
 8022e74:	db7d      	blt.n	8022f72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022e76:	4580      	cmp	r8, r0
 8022e78:	dd7b      	ble.n	8022f72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022e7a:	eb03 0b0e 	add.w	fp, r3, lr
 8022e7e:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022e82:	f01b 0f01 	tst.w	fp, #1
 8022e86:	5d14      	ldrb	r4, [r2, r4]
 8022e88:	bf0c      	ite	eq
 8022e8a:	f004 040f 	andeq.w	r4, r4, #15
 8022e8e:	1124      	asrne	r4, r4, #4
 8022e90:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022e94:	b2e4      	uxtb	r4, r4
 8022e96:	f1ba 0f00 	cmp.w	sl, #0
 8022e9a:	db6f      	blt.n	8022f7c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022e9c:	45d1      	cmp	r9, sl
 8022e9e:	dd6d      	ble.n	8022f7c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022ea0:	2800      	cmp	r0, #0
 8022ea2:	db6b      	blt.n	8022f7c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022ea4:	4580      	cmp	r8, r0
 8022ea6:	dd69      	ble.n	8022f7c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022ea8:	2f00      	cmp	r7, #0
 8022eaa:	d069      	beq.n	8022f80 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8022eac:	3301      	adds	r3, #1
 8022eae:	449e      	add	lr, r3
 8022eb0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022eb4:	f01e 0f01 	tst.w	lr, #1
 8022eb8:	5cd0      	ldrb	r0, [r2, r3]
 8022eba:	bf0c      	ite	eq
 8022ebc:	f000 000f 	andeq.w	r0, r0, #15
 8022ec0:	1100      	asrne	r0, r0, #4
 8022ec2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022ec6:	b2c3      	uxtb	r3, r0
 8022ec8:	b2ba      	uxth	r2, r7
 8022eca:	fa1f fc8c 	uxth.w	ip, ip
 8022ece:	fb02 f00c 	mul.w	r0, r2, ip
 8022ed2:	0112      	lsls	r2, r2, #4
 8022ed4:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8022ed8:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8022edc:	1a12      	subs	r2, r2, r0
 8022ede:	fa1f fc8c 	uxth.w	ip, ip
 8022ee2:	b292      	uxth	r2, r2
 8022ee4:	eba7 070c 	sub.w	r7, r7, ip
 8022ee8:	436a      	muls	r2, r5
 8022eea:	b2bf      	uxth	r7, r7
 8022eec:	fb06 2207 	mla	r2, r6, r7, r2
 8022ef0:	fb0c 2404 	mla	r4, ip, r4, r2
 8022ef4:	fb00 4303 	mla	r3, r0, r3, r4
 8022ef8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022efc:	b38b      	cbz	r3, 8022f62 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8022efe:	4a21      	ldr	r2, [pc, #132]	@ (8022f84 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8022f00:	6814      	ldr	r4, [r2, #0]
 8022f02:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8022f06:	b2e5      	uxtb	r5, r4
 8022f08:	4353      	muls	r3, r2
 8022f0a:	1c5a      	adds	r2, r3, #1
 8022f0c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022f10:	1212      	asrs	r2, r2, #8
 8022f12:	b290      	uxth	r0, r2
 8022f14:	43d2      	mvns	r2, r2
 8022f16:	fb15 f500 	smulbb	r5, r5, r0
 8022f1a:	b2d3      	uxtb	r3, r2
 8022f1c:	780a      	ldrb	r2, [r1, #0]
 8022f1e:	fb02 5203 	mla	r2, r2, r3, r5
 8022f22:	b292      	uxth	r2, r2
 8022f24:	1c55      	adds	r5, r2, #1
 8022f26:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022f2a:	784d      	ldrb	r5, [r1, #1]
 8022f2c:	fb15 f503 	smulbb	r5, r5, r3
 8022f30:	1212      	asrs	r2, r2, #8
 8022f32:	700a      	strb	r2, [r1, #0]
 8022f34:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8022f38:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022f3c:	fb02 5200 	mla	r2, r2, r0, r5
 8022f40:	b292      	uxth	r2, r2
 8022f42:	1c55      	adds	r5, r2, #1
 8022f44:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022f48:	1212      	asrs	r2, r2, #8
 8022f4a:	704a      	strb	r2, [r1, #1]
 8022f4c:	788a      	ldrb	r2, [r1, #2]
 8022f4e:	fb12 f303 	smulbb	r3, r2, r3
 8022f52:	fb04 3300 	mla	r3, r4, r0, r3
 8022f56:	b29b      	uxth	r3, r3
 8022f58:	1c5a      	adds	r2, r3, #1
 8022f5a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022f5e:	121b      	asrs	r3, r3, #8
 8022f60:	708b      	strb	r3, [r1, #2]
 8022f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f66:	2600      	movs	r6, #0
 8022f68:	e75a      	b.n	8022e20 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8022f6a:	2500      	movs	r5, #0
 8022f6c:	e776      	b.n	8022e5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8022f6e:	463d      	mov	r5, r7
 8022f70:	e774      	b.n	8022e5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8022f72:	2400      	movs	r4, #0
 8022f74:	e78f      	b.n	8022e96 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8022f76:	4663      	mov	r3, ip
 8022f78:	4664      	mov	r4, ip
 8022f7a:	e7a5      	b.n	8022ec8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022f7c:	2300      	movs	r3, #0
 8022f7e:	e7a3      	b.n	8022ec8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022f80:	463b      	mov	r3, r7
 8022f82:	e7a1      	b.n	8022ec8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022f84:	24028e3c 	.word	0x24028e3c

08022f88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f8c:	b097      	sub	sp, #92	@ 0x5c
 8022f8e:	9214      	str	r2, [sp, #80]	@ 0x50
 8022f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f92:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8022f94:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8022f98:	9015      	str	r0, [sp, #84]	@ 0x54
 8022f9a:	910c      	str	r1, [sp, #48]	@ 0x30
 8022f9c:	6850      	ldr	r0, [r2, #4]
 8022f9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8022fa0:	6812      	ldr	r2, [r2, #0]
 8022fa2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8022fa6:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8022faa:	fb00 1303 	mla	r3, r0, r3, r1
 8022fae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022fb2:	eb02 0a03 	add.w	sl, r2, r3
 8022fb6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022fb8:	689b      	ldr	r3, [r3, #8]
 8022fba:	3301      	adds	r3, #1
 8022fbc:	f023 0301 	bic.w	r3, r3, #1
 8022fc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022fc2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022fc4:	681f      	ldr	r7, [r3, #0]
 8022fc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022fc8:	2b00      	cmp	r3, #0
 8022fca:	dc03      	bgt.n	8022fd4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022fcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022fce:	2b00      	cmp	r3, #0
 8022fd0:	f340 8247 	ble.w	8023462 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8022fd4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022fd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022fda:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022fde:	1e48      	subs	r0, r1, #1
 8022fe0:	f102 3cff 	add.w	ip, r2, #4294967295
 8022fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022fe6:	2b00      	cmp	r3, #0
 8022fe8:	f340 80e5 	ble.w	80231b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8022fec:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8022ff0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022ff4:	d406      	bmi.n	8023004 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022ff6:	4586      	cmp	lr, r0
 8022ff8:	da04      	bge.n	8023004 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022ffa:	2b00      	cmp	r3, #0
 8022ffc:	db02      	blt.n	8023004 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022ffe:	4563      	cmp	r3, ip
 8023000:	f2c0 80da 	blt.w	80231b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023004:	f11e 0e01 	adds.w	lr, lr, #1
 8023008:	f100 80cb 	bmi.w	80231a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802300c:	4571      	cmp	r1, lr
 802300e:	f2c0 80c8 	blt.w	80231a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023012:	3301      	adds	r3, #1
 8023014:	f100 80c5 	bmi.w	80231a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023018:	429a      	cmp	r2, r3
 802301a:	f2c0 80c2 	blt.w	80231a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802301e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023020:	46d0      	mov	r8, sl
 8023022:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8023026:	930d      	str	r3, [sp, #52]	@ 0x34
 8023028:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802302a:	2b00      	cmp	r3, #0
 802302c:	f340 80e3 	ble.w	80231f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8023030:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023032:	1430      	asrs	r0, r6, #16
 8023034:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023038:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802303c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023040:	142b      	asrs	r3, r5, #16
 8023042:	f100 812e 	bmi.w	80232a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023046:	f10c 3bff 	add.w	fp, ip, #4294967295
 802304a:	455b      	cmp	r3, fp
 802304c:	f280 8129 	bge.w	80232a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023050:	2800      	cmp	r0, #0
 8023052:	f2c0 8126 	blt.w	80232a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023056:	f10e 3bff 	add.w	fp, lr, #4294967295
 802305a:	4558      	cmp	r0, fp
 802305c:	f280 8121 	bge.w	80232a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023060:	fb00 3309 	mla	r3, r0, r9, r3
 8023064:	0858      	lsrs	r0, r3, #1
 8023066:	07dc      	lsls	r4, r3, #31
 8023068:	f817 c000 	ldrb.w	ip, [r7, r0]
 802306c:	bf54      	ite	pl
 802306e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023072:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023076:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802307a:	fa5f fc8c 	uxtb.w	ip, ip
 802307e:	2a00      	cmp	r2, #0
 8023080:	f000 80fe 	beq.w	8023280 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023084:	1c58      	adds	r0, r3, #1
 8023086:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802308a:	07c0      	lsls	r0, r0, #31
 802308c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023090:	bf54      	ite	pl
 8023092:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023096:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802309a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802309e:	fa5f f08e 	uxtb.w	r0, lr
 80230a2:	9010      	str	r0, [sp, #64]	@ 0x40
 80230a4:	b1d9      	cbz	r1, 80230de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80230a6:	444b      	add	r3, r9
 80230a8:	0858      	lsrs	r0, r3, #1
 80230aa:	07dc      	lsls	r4, r3, #31
 80230ac:	f103 0301 	add.w	r3, r3, #1
 80230b0:	5c38      	ldrb	r0, [r7, r0]
 80230b2:	bf54      	ite	pl
 80230b4:	f000 000f 	andpl.w	r0, r0, #15
 80230b8:	1100      	asrmi	r0, r0, #4
 80230ba:	07dc      	lsls	r4, r3, #31
 80230bc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80230c0:	b2c0      	uxtb	r0, r0
 80230c2:	900a      	str	r0, [sp, #40]	@ 0x28
 80230c4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80230c8:	f817 e000 	ldrb.w	lr, [r7, r0]
 80230cc:	bf54      	ite	pl
 80230ce:	f00e 030f 	andpl.w	r3, lr, #15
 80230d2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80230d6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80230da:	b2db      	uxtb	r3, r3
 80230dc:	9311      	str	r3, [sp, #68]	@ 0x44
 80230de:	b292      	uxth	r2, r2
 80230e0:	b289      	uxth	r1, r1
 80230e2:	0113      	lsls	r3, r2, #4
 80230e4:	fb02 f001 	mul.w	r0, r2, r1
 80230e8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80230ea:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80230ee:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 80230f2:	1a1b      	subs	r3, r3, r0
 80230f4:	b289      	uxth	r1, r1
 80230f6:	b29b      	uxth	r3, r3
 80230f8:	ebae 0e01 	sub.w	lr, lr, r1
 80230fc:	4353      	muls	r3, r2
 80230fe:	fa1f fe8e 	uxth.w	lr, lr
 8023102:	fb0c 320e 	mla	r2, ip, lr, r3
 8023106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023108:	fb01 2203 	mla	r2, r1, r3, r2
 802310c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802310e:	fb00 2203 	mla	r2, r0, r3, r2
 8023112:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023116:	2a00      	cmp	r2, #0
 8023118:	d039      	beq.n	802318e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802311a:	4bc7      	ldr	r3, [pc, #796]	@ (8023438 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802311c:	6819      	ldr	r1, [r3, #0]
 802311e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023120:	fa5f fc81 	uxtb.w	ip, r1
 8023124:	435a      	muls	r2, r3
 8023126:	1c53      	adds	r3, r2, #1
 8023128:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802312c:	1212      	asrs	r2, r2, #8
 802312e:	b290      	uxth	r0, r2
 8023130:	43d2      	mvns	r2, r2
 8023132:	fb1c fc00 	smulbb	ip, ip, r0
 8023136:	b2d3      	uxtb	r3, r2
 8023138:	f898 2000 	ldrb.w	r2, [r8]
 802313c:	fb02 c203 	mla	r2, r2, r3, ip
 8023140:	b292      	uxth	r2, r2
 8023142:	f102 0c01 	add.w	ip, r2, #1
 8023146:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802314a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802314e:	fb1c fc03 	smulbb	ip, ip, r3
 8023152:	1212      	asrs	r2, r2, #8
 8023154:	f888 2000 	strb.w	r2, [r8]
 8023158:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802315c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023160:	fb02 c200 	mla	r2, r2, r0, ip
 8023164:	b292      	uxth	r2, r2
 8023166:	f102 0c01 	add.w	ip, r2, #1
 802316a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802316e:	1212      	asrs	r2, r2, #8
 8023170:	f888 2001 	strb.w	r2, [r8, #1]
 8023174:	f898 2002 	ldrb.w	r2, [r8, #2]
 8023178:	fb12 f303 	smulbb	r3, r2, r3
 802317c:	fb01 3300 	mla	r3, r1, r0, r3
 8023180:	b29b      	uxth	r3, r3
 8023182:	1c5a      	adds	r2, r3, #1
 8023184:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023188:	121b      	asrs	r3, r3, #8
 802318a:	f888 3002 	strb.w	r3, [r8, #2]
 802318e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023190:	f108 0803 	add.w	r8, r8, #3
 8023194:	441d      	add	r5, r3
 8023196:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023198:	441e      	add	r6, r3
 802319a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802319c:	3b01      	subs	r3, #1
 802319e:	930d      	str	r3, [sp, #52]	@ 0x34
 80231a0:	e742      	b.n	8023028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80231a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80231a4:	f10a 0a03 	add.w	sl, sl, #3
 80231a8:	441d      	add	r5, r3
 80231aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80231ac:	441e      	add	r6, r3
 80231ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231b0:	3b01      	subs	r3, #1
 80231b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80231b4:	e716      	b.n	8022fe4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80231b6:	d024      	beq.n	8023202 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80231b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231ba:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80231bc:	3b01      	subs	r3, #1
 80231be:	fb00 5003 	mla	r0, r0, r3, r5
 80231c2:	1400      	asrs	r0, r0, #16
 80231c4:	f53f af2b 	bmi.w	802301e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80231c8:	3901      	subs	r1, #1
 80231ca:	4288      	cmp	r0, r1
 80231cc:	f6bf af27 	bge.w	802301e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80231d0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80231d2:	fb01 6303 	mla	r3, r1, r3, r6
 80231d6:	141b      	asrs	r3, r3, #16
 80231d8:	f53f af21 	bmi.w	802301e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80231dc:	3a01      	subs	r2, #1
 80231de:	4293      	cmp	r3, r2
 80231e0:	f6bf af1d 	bge.w	802301e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80231e4:	f10a 0e03 	add.w	lr, sl, #3
 80231e8:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80231ec:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 80231f0:	f1b8 0f00 	cmp.w	r8, #0
 80231f4:	dc76      	bgt.n	80232e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80231f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231f8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80231fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023200:	44a2      	add	sl, r4
 8023202:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023204:	2b00      	cmp	r3, #0
 8023206:	f340 812c 	ble.w	8023462 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802320a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802320e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023210:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023214:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023218:	eef0 6a62 	vmov.f32	s13, s5
 802321c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023220:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023224:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023228:	ee16 5a90 	vmov	r5, s13
 802322c:	eef0 6a43 	vmov.f32	s13, s6
 8023230:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023234:	ee16 6a90 	vmov	r6, s13
 8023238:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802323c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023240:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023244:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023248:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802324c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023250:	ee12 2a90 	vmov	r2, s5
 8023254:	eef0 2a47 	vmov.f32	s5, s14
 8023258:	fb92 f3f3 	sdiv	r3, r2, r3
 802325c:	ee13 2a10 	vmov	r2, s6
 8023260:	9323      	str	r3, [sp, #140]	@ 0x8c
 8023262:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023264:	eeb0 3a67 	vmov.f32	s6, s15
 8023268:	fb92 f3f3 	sdiv	r3, r2, r3
 802326c:	9324      	str	r3, [sp, #144]	@ 0x90
 802326e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023270:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023272:	3b01      	subs	r3, #1
 8023274:	930c      	str	r3, [sp, #48]	@ 0x30
 8023276:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023278:	bf08      	it	eq
 802327a:	4613      	moveq	r3, r2
 802327c:	9309      	str	r3, [sp, #36]	@ 0x24
 802327e:	e6a2      	b.n	8022fc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023280:	2900      	cmp	r1, #0
 8023282:	f43f af2c 	beq.w	80230de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8023286:	eb09 0003 	add.w	r0, r9, r3
 802328a:	0843      	lsrs	r3, r0, #1
 802328c:	07c0      	lsls	r0, r0, #31
 802328e:	5cfb      	ldrb	r3, [r7, r3]
 8023290:	bf54      	ite	pl
 8023292:	f003 030f 	andpl.w	r3, r3, #15
 8023296:	111b      	asrmi	r3, r3, #4
 8023298:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802329c:	b2db      	uxtb	r3, r3
 802329e:	930a      	str	r3, [sp, #40]	@ 0x28
 80232a0:	e71d      	b.n	80230de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80232a2:	f113 0b01 	adds.w	fp, r3, #1
 80232a6:	f53f af72 	bmi.w	802318e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80232aa:	45dc      	cmp	ip, fp
 80232ac:	f6ff af6f 	blt.w	802318e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80232b0:	f110 0b01 	adds.w	fp, r0, #1
 80232b4:	f53f af6b 	bmi.w	802318e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80232b8:	45de      	cmp	lr, fp
 80232ba:	f6ff af68 	blt.w	802318e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80232be:	9302      	str	r3, [sp, #8]
 80232c0:	fa0f f38e 	sxth.w	r3, lr
 80232c4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80232c6:	9301      	str	r3, [sp, #4]
 80232c8:	fa0f f38c 	sxth.w	r3, ip
 80232cc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80232d0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80232d4:	9300      	str	r3, [sp, #0]
 80232d6:	463a      	mov	r2, r7
 80232d8:	464b      	mov	r3, r9
 80232da:	4641      	mov	r1, r8
 80232dc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80232de:	f7ff fd79 	bl	8022dd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80232e2:	e754      	b.n	802318e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80232e4:	142a      	asrs	r2, r5, #16
 80232e6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80232ea:	1433      	asrs	r3, r6, #16
 80232ec:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80232f0:	fb09 2303 	mla	r3, r9, r3, r2
 80232f4:	085a      	lsrs	r2, r3, #1
 80232f6:	07dc      	lsls	r4, r3, #31
 80232f8:	5cba      	ldrb	r2, [r7, r2]
 80232fa:	bf54      	ite	pl
 80232fc:	f002 020f 	andpl.w	r2, r2, #15
 8023300:	1112      	asrmi	r2, r2, #4
 8023302:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023306:	b2d2      	uxtb	r2, r2
 8023308:	2900      	cmp	r1, #0
 802330a:	f000 8097 	beq.w	802343c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802330e:	f103 0b01 	add.w	fp, r3, #1
 8023312:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8023316:	f01b 0f01 	tst.w	fp, #1
 802331a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802331e:	bf0c      	ite	eq
 8023320:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023324:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023328:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802332c:	fa5f f48c 	uxtb.w	r4, ip
 8023330:	9412      	str	r4, [sp, #72]	@ 0x48
 8023332:	b300      	cbz	r0, 8023376 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023334:	444b      	add	r3, r9
 8023336:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802333a:	07dc      	lsls	r4, r3, #31
 802333c:	f103 0301 	add.w	r3, r3, #1
 8023340:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023344:	bf54      	ite	pl
 8023346:	f00c 0c0f 	andpl.w	ip, ip, #15
 802334a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802334e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023352:	fa5f f48c 	uxtb.w	r4, ip
 8023356:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802335a:	940b      	str	r4, [sp, #44]	@ 0x2c
 802335c:	07dc      	lsls	r4, r3, #31
 802335e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023362:	bf54      	ite	pl
 8023364:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023368:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802336c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023370:	fa5f f38c 	uxtb.w	r3, ip
 8023374:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023376:	b289      	uxth	r1, r1
 8023378:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802337a:	b280      	uxth	r0, r0
 802337c:	fb01 f300 	mul.w	r3, r1, r0
 8023380:	0109      	lsls	r1, r1, #4
 8023382:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8023386:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802338a:	1ac9      	subs	r1, r1, r3
 802338c:	b280      	uxth	r0, r0
 802338e:	b289      	uxth	r1, r1
 8023390:	ebac 0c00 	sub.w	ip, ip, r0
 8023394:	4361      	muls	r1, r4
 8023396:	fa1f fc8c 	uxth.w	ip, ip
 802339a:	fb02 120c 	mla	r2, r2, ip, r1
 802339e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80233a0:	fb00 2001 	mla	r0, r0, r1, r2
 80233a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80233a6:	fb03 0302 	mla	r3, r3, r2, r0
 80233aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80233ae:	2b00      	cmp	r3, #0
 80233b0:	d039      	beq.n	8023426 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80233b2:	4a21      	ldr	r2, [pc, #132]	@ (8023438 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80233b4:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80233b8:	6810      	ldr	r0, [r2, #0]
 80233ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80233bc:	fa5f fc80 	uxtb.w	ip, r0
 80233c0:	4353      	muls	r3, r2
 80233c2:	1c5a      	adds	r2, r3, #1
 80233c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80233c8:	121b      	asrs	r3, r3, #8
 80233ca:	b29a      	uxth	r2, r3
 80233cc:	43db      	mvns	r3, r3
 80233ce:	fb1c fc02 	smulbb	ip, ip, r2
 80233d2:	b2db      	uxtb	r3, r3
 80233d4:	fb01 c103 	mla	r1, r1, r3, ip
 80233d8:	b289      	uxth	r1, r1
 80233da:	f101 0c01 	add.w	ip, r1, #1
 80233de:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80233e2:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80233e6:	fb1c fc03 	smulbb	ip, ip, r3
 80233ea:	1209      	asrs	r1, r1, #8
 80233ec:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80233f0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80233f4:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80233f8:	fb01 c102 	mla	r1, r1, r2, ip
 80233fc:	b289      	uxth	r1, r1
 80233fe:	f101 0c01 	add.w	ip, r1, #1
 8023402:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023406:	1209      	asrs	r1, r1, #8
 8023408:	f80e 1c02 	strb.w	r1, [lr, #-2]
 802340c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023410:	fb11 f303 	smulbb	r3, r1, r3
 8023414:	fb00 3002 	mla	r0, r0, r2, r3
 8023418:	b280      	uxth	r0, r0
 802341a:	1c42      	adds	r2, r0, #1
 802341c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023420:	1200      	asrs	r0, r0, #8
 8023422:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8023426:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023428:	f10e 0e03 	add.w	lr, lr, #3
 802342c:	f108 38ff 	add.w	r8, r8, #4294967295
 8023430:	441d      	add	r5, r3
 8023432:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023434:	441e      	add	r6, r3
 8023436:	e6db      	b.n	80231f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8023438:	24028e3c 	.word	0x24028e3c
 802343c:	2800      	cmp	r0, #0
 802343e:	d09a      	beq.n	8023376 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023440:	444b      	add	r3, r9
 8023442:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023446:	07db      	lsls	r3, r3, #31
 8023448:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802344c:	bf54      	ite	pl
 802344e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023452:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023456:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802345a:	fa5f f38c 	uxtb.w	r3, ip
 802345e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023460:	e789      	b.n	8023376 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023462:	b017      	add	sp, #92	@ 0x5c
 8023464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023468 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802346c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8023470:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023474:	2d00      	cmp	r5, #0
 8023476:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802347a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 802347e:	fb04 5e03 	mla	lr, r4, r3, r5
 8023482:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8023486:	f2c0 80b1 	blt.w	80235ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802348a:	45a9      	cmp	r9, r5
 802348c:	f340 80ae 	ble.w	80235ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8023490:	2c00      	cmp	r4, #0
 8023492:	f2c0 80ab 	blt.w	80235ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8023496:	45a0      	cmp	r8, r4
 8023498:	f340 80a8 	ble.w	80235ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802349c:	ea4f 065e 	mov.w	r6, lr, lsr #1
 80234a0:	f01e 0f01 	tst.w	lr, #1
 80234a4:	5d97      	ldrb	r7, [r2, r6]
 80234a6:	bf0c      	ite	eq
 80234a8:	f007 070f 	andeq.w	r7, r7, #15
 80234ac:	113f      	asrne	r7, r7, #4
 80234ae:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 80234b2:	b2ff      	uxtb	r7, r7
 80234b4:	f115 0a01 	adds.w	sl, r5, #1
 80234b8:	f100 809a 	bmi.w	80235f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80234bc:	45d1      	cmp	r9, sl
 80234be:	f340 8097 	ble.w	80235f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80234c2:	2c00      	cmp	r4, #0
 80234c4:	f2c0 8094 	blt.w	80235f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80234c8:	45a0      	cmp	r8, r4
 80234ca:	f340 8091 	ble.w	80235f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80234ce:	2800      	cmp	r0, #0
 80234d0:	f000 8090 	beq.w	80235f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 80234d4:	f10e 0b01 	add.w	fp, lr, #1
 80234d8:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80234dc:	f01b 0f01 	tst.w	fp, #1
 80234e0:	5d96      	ldrb	r6, [r2, r6]
 80234e2:	bf0c      	ite	eq
 80234e4:	f006 060f 	andeq.w	r6, r6, #15
 80234e8:	1136      	asrne	r6, r6, #4
 80234ea:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80234ee:	b2f6      	uxtb	r6, r6
 80234f0:	f1bc 0f00 	cmp.w	ip, #0
 80234f4:	f000 8082 	beq.w	80235fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80234f8:	2d00      	cmp	r5, #0
 80234fa:	f104 0401 	add.w	r4, r4, #1
 80234fe:	db7b      	blt.n	80235f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023500:	45a9      	cmp	r9, r5
 8023502:	dd79      	ble.n	80235f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023504:	2c00      	cmp	r4, #0
 8023506:	db77      	blt.n	80235f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023508:	45a0      	cmp	r8, r4
 802350a:	dd75      	ble.n	80235f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802350c:	eb03 0b0e 	add.w	fp, r3, lr
 8023510:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8023514:	f01b 0f01 	tst.w	fp, #1
 8023518:	5d55      	ldrb	r5, [r2, r5]
 802351a:	bf0c      	ite	eq
 802351c:	f005 050f 	andeq.w	r5, r5, #15
 8023520:	112d      	asrne	r5, r5, #4
 8023522:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8023526:	b2ed      	uxtb	r5, r5
 8023528:	f1ba 0f00 	cmp.w	sl, #0
 802352c:	db69      	blt.n	8023602 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802352e:	45d1      	cmp	r9, sl
 8023530:	dd67      	ble.n	8023602 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023532:	2c00      	cmp	r4, #0
 8023534:	db65      	blt.n	8023602 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023536:	45a0      	cmp	r8, r4
 8023538:	dd63      	ble.n	8023602 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802353a:	2800      	cmp	r0, #0
 802353c:	d063      	beq.n	8023606 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 802353e:	3301      	adds	r3, #1
 8023540:	449e      	add	lr, r3
 8023542:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023546:	f01e 0f01 	tst.w	lr, #1
 802354a:	5cd4      	ldrb	r4, [r2, r3]
 802354c:	bf0c      	ite	eq
 802354e:	f004 040f 	andeq.w	r4, r4, #15
 8023552:	1124      	asrne	r4, r4, #4
 8023554:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023558:	b2e3      	uxtb	r3, r4
 802355a:	b282      	uxth	r2, r0
 802355c:	fa1f fc8c 	uxth.w	ip, ip
 8023560:	fb02 f40c 	mul.w	r4, r2, ip
 8023564:	0112      	lsls	r2, r2, #4
 8023566:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 802356a:	fa1f f08c 	uxth.w	r0, ip
 802356e:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8023572:	1b12      	subs	r2, r2, r4
 8023574:	ebac 0c00 	sub.w	ip, ip, r0
 8023578:	b292      	uxth	r2, r2
 802357a:	fa1f fc8c 	uxth.w	ip, ip
 802357e:	4372      	muls	r2, r6
 8023580:	fb07 220c 	mla	r2, r7, ip, r2
 8023584:	fb00 2005 	mla	r0, r0, r5, r2
 8023588:	fb04 0303 	mla	r3, r4, r3, r0
 802358c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023590:	b353      	cbz	r3, 80235e8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8023592:	4a1e      	ldr	r2, [pc, #120]	@ (802360c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8023594:	7808      	ldrb	r0, [r1, #0]
 8023596:	6814      	ldr	r4, [r2, #0]
 8023598:	b29a      	uxth	r2, r3
 802359a:	43db      	mvns	r3, r3
 802359c:	b2e5      	uxtb	r5, r4
 802359e:	b2db      	uxtb	r3, r3
 80235a0:	fb15 f502 	smulbb	r5, r5, r2
 80235a4:	fb00 5003 	mla	r0, r0, r3, r5
 80235a8:	b280      	uxth	r0, r0
 80235aa:	1c45      	adds	r5, r0, #1
 80235ac:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80235b0:	784d      	ldrb	r5, [r1, #1]
 80235b2:	fb15 f503 	smulbb	r5, r5, r3
 80235b6:	1200      	asrs	r0, r0, #8
 80235b8:	7008      	strb	r0, [r1, #0]
 80235ba:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80235be:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80235c2:	fb00 5002 	mla	r0, r0, r2, r5
 80235c6:	b280      	uxth	r0, r0
 80235c8:	1c45      	adds	r5, r0, #1
 80235ca:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80235ce:	1200      	asrs	r0, r0, #8
 80235d0:	7048      	strb	r0, [r1, #1]
 80235d2:	7888      	ldrb	r0, [r1, #2]
 80235d4:	fb10 f303 	smulbb	r3, r0, r3
 80235d8:	fb04 3202 	mla	r2, r4, r2, r3
 80235dc:	b292      	uxth	r2, r2
 80235de:	1c53      	adds	r3, r2, #1
 80235e0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80235e4:	1212      	asrs	r2, r2, #8
 80235e6:	708a      	strb	r2, [r1, #2]
 80235e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235ec:	2700      	movs	r7, #0
 80235ee:	e761      	b.n	80234b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80235f0:	2600      	movs	r6, #0
 80235f2:	e77d      	b.n	80234f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80235f4:	4606      	mov	r6, r0
 80235f6:	e77b      	b.n	80234f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80235f8:	2500      	movs	r5, #0
 80235fa:	e795      	b.n	8023528 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80235fc:	4663      	mov	r3, ip
 80235fe:	4665      	mov	r5, ip
 8023600:	e7ab      	b.n	802355a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8023602:	2300      	movs	r3, #0
 8023604:	e7a9      	b.n	802355a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8023606:	4603      	mov	r3, r0
 8023608:	e7a7      	b.n	802355a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802360a:	bf00      	nop
 802360c:	24028e3c 	.word	0x24028e3c

08023610 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023614:	b093      	sub	sp, #76	@ 0x4c
 8023616:	461c      	mov	r4, r3
 8023618:	920c      	str	r2, [sp, #48]	@ 0x30
 802361a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802361c:	9011      	str	r0, [sp, #68]	@ 0x44
 802361e:	9107      	str	r1, [sp, #28]
 8023620:	6850      	ldr	r0, [r2, #4]
 8023622:	6812      	ldr	r2, [r2, #0]
 8023624:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8023628:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 802362c:	fb00 1303 	mla	r3, r0, r3, r1
 8023630:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023634:	eb02 0b03 	add.w	fp, r2, r3
 8023638:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802363a:	689b      	ldr	r3, [r3, #8]
 802363c:	3301      	adds	r3, #1
 802363e:	f023 0301 	bic.w	r3, r3, #1
 8023642:	9309      	str	r3, [sp, #36]	@ 0x24
 8023644:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023646:	f8d3 8000 	ldr.w	r8, [r3]
 802364a:	9b07      	ldr	r3, [sp, #28]
 802364c:	2b00      	cmp	r3, #0
 802364e:	dc03      	bgt.n	8023658 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023652:	2b00      	cmp	r3, #0
 8023654:	f340 822b 	ble.w	8023aae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023658:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802365a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802365e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023662:	1e48      	subs	r0, r1, #1
 8023664:	1e57      	subs	r7, r2, #1
 8023666:	2c00      	cmp	r4, #0
 8023668:	f340 80d7 	ble.w	802381a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802366c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8023670:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023674:	d406      	bmi.n	8023684 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023676:	4584      	cmp	ip, r0
 8023678:	da04      	bge.n	8023684 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802367a:	2b00      	cmp	r3, #0
 802367c:	db02      	blt.n	8023684 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802367e:	42bb      	cmp	r3, r7
 8023680:	f2c0 80cc 	blt.w	802381c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023684:	f11c 0c01 	adds.w	ip, ip, #1
 8023688:	f100 80bf 	bmi.w	802380a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802368c:	4561      	cmp	r1, ip
 802368e:	f2c0 80bc 	blt.w	802380a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023692:	3301      	adds	r3, #1
 8023694:	f100 80b9 	bmi.w	802380a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023698:	429a      	cmp	r2, r3
 802369a:	f2c0 80b6 	blt.w	802380a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802369e:	46a2      	mov	sl, r4
 80236a0:	465f      	mov	r7, fp
 80236a2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80236a6:	f1ba 0f00 	cmp.w	sl, #0
 80236aa:	f340 80d4 	ble.w	8023856 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80236ae:	f3c5 3303 	ubfx	r3, r5, #12, #4
 80236b2:	1430      	asrs	r0, r6, #16
 80236b4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80236b8:	9308      	str	r3, [sp, #32]
 80236ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80236bc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80236c0:	142b      	asrs	r3, r5, #16
 80236c2:	f100 8124 	bmi.w	802390e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80236c6:	f10c 32ff 	add.w	r2, ip, #4294967295
 80236ca:	4293      	cmp	r3, r2
 80236cc:	f280 811f 	bge.w	802390e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80236d0:	2800      	cmp	r0, #0
 80236d2:	f2c0 811c 	blt.w	802390e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80236d6:	f10e 32ff 	add.w	r2, lr, #4294967295
 80236da:	4290      	cmp	r0, r2
 80236dc:	f280 8117 	bge.w	802390e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80236e0:	fb00 3309 	mla	r3, r0, r9, r3
 80236e4:	0858      	lsrs	r0, r3, #1
 80236e6:	07da      	lsls	r2, r3, #31
 80236e8:	9a08      	ldr	r2, [sp, #32]
 80236ea:	f818 c000 	ldrb.w	ip, [r8, r0]
 80236ee:	bf54      	ite	pl
 80236f0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80236f4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80236f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80236fc:	fa5f fc8c 	uxtb.w	ip, ip
 8023700:	2a00      	cmp	r2, #0
 8023702:	f000 80ed 	beq.w	80238e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8023706:	1c58      	adds	r0, r3, #1
 8023708:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802370c:	07c0      	lsls	r0, r0, #31
 802370e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8023712:	bf54      	ite	pl
 8023714:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023718:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802371c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023720:	fa5f fe8e 	uxtb.w	lr, lr
 8023724:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8023728:	b1c9      	cbz	r1, 802375e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802372a:	444b      	add	r3, r9
 802372c:	0858      	lsrs	r0, r3, #1
 802372e:	07da      	lsls	r2, r3, #31
 8023730:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023734:	bf54      	ite	pl
 8023736:	f000 000f 	andpl.w	r0, r0, #15
 802373a:	1100      	asrmi	r0, r0, #4
 802373c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023740:	b2c0      	uxtb	r0, r0
 8023742:	900a      	str	r0, [sp, #40]	@ 0x28
 8023744:	1c58      	adds	r0, r3, #1
 8023746:	0843      	lsrs	r3, r0, #1
 8023748:	07c2      	lsls	r2, r0, #31
 802374a:	f818 3003 	ldrb.w	r3, [r8, r3]
 802374e:	bf54      	ite	pl
 8023750:	f003 030f 	andpl.w	r3, r3, #15
 8023754:	111b      	asrmi	r3, r3, #4
 8023756:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802375a:	b2db      	uxtb	r3, r3
 802375c:	930e      	str	r3, [sp, #56]	@ 0x38
 802375e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023762:	b289      	uxth	r1, r1
 8023764:	fb02 f301 	mul.w	r3, r2, r1
 8023768:	0112      	lsls	r2, r2, #4
 802376a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802376e:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8023772:	1ad2      	subs	r2, r2, r3
 8023774:	b289      	uxth	r1, r1
 8023776:	b292      	uxth	r2, r2
 8023778:	1a40      	subs	r0, r0, r1
 802377a:	fa1f fe80 	uxth.w	lr, r0
 802377e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023780:	4342      	muls	r2, r0
 8023782:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8023786:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023788:	fb01 c102 	mla	r1, r1, r2, ip
 802378c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802378e:	fb03 1302 	mla	r3, r3, r2, r1
 8023792:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023796:	b383      	cbz	r3, 80237fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023798:	4ac6      	ldr	r2, [pc, #792]	@ (8023ab4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802379a:	2bff      	cmp	r3, #255	@ 0xff
 802379c:	6812      	ldr	r2, [r2, #0]
 802379e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80237a2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80237a6:	b2d2      	uxtb	r2, r2
 80237a8:	f000 80ac 	beq.w	8023904 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80237ac:	b299      	uxth	r1, r3
 80237ae:	43db      	mvns	r3, r3
 80237b0:	f897 c000 	ldrb.w	ip, [r7]
 80237b4:	fb12 f201 	smulbb	r2, r2, r1
 80237b8:	b2db      	uxtb	r3, r3
 80237ba:	fb10 f001 	smulbb	r0, r0, r1
 80237be:	fb0c 2203 	mla	r2, ip, r3, r2
 80237c2:	fb1e f101 	smulbb	r1, lr, r1
 80237c6:	b292      	uxth	r2, r2
 80237c8:	f102 0c01 	add.w	ip, r2, #1
 80237cc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80237d0:	1212      	asrs	r2, r2, #8
 80237d2:	703a      	strb	r2, [r7, #0]
 80237d4:	787a      	ldrb	r2, [r7, #1]
 80237d6:	fb02 0003 	mla	r0, r2, r3, r0
 80237da:	b280      	uxth	r0, r0
 80237dc:	1c42      	adds	r2, r0, #1
 80237de:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80237e2:	78ba      	ldrb	r2, [r7, #2]
 80237e4:	fb02 1303 	mla	r3, r2, r3, r1
 80237e8:	1200      	asrs	r0, r0, #8
 80237ea:	b29b      	uxth	r3, r3
 80237ec:	7078      	strb	r0, [r7, #1]
 80237ee:	f103 0e01 	add.w	lr, r3, #1
 80237f2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80237f6:	121b      	asrs	r3, r3, #8
 80237f8:	70bb      	strb	r3, [r7, #2]
 80237fa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80237fc:	3703      	adds	r7, #3
 80237fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023802:	441d      	add	r5, r3
 8023804:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023806:	441e      	add	r6, r3
 8023808:	e74d      	b.n	80236a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802380a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802380c:	3c01      	subs	r4, #1
 802380e:	f10b 0b03 	add.w	fp, fp, #3
 8023812:	441d      	add	r5, r3
 8023814:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023816:	441e      	add	r6, r3
 8023818:	e725      	b.n	8023666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802381a:	d021      	beq.n	8023860 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802381c:	1e63      	subs	r3, r4, #1
 802381e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8023820:	fb00 5003 	mla	r0, r0, r3, r5
 8023824:	1400      	asrs	r0, r0, #16
 8023826:	f53f af3a 	bmi.w	802369e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802382a:	3901      	subs	r1, #1
 802382c:	4288      	cmp	r0, r1
 802382e:	f6bf af36 	bge.w	802369e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023832:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8023834:	fb01 6303 	mla	r3, r1, r3, r6
 8023838:	141b      	asrs	r3, r3, #16
 802383a:	f53f af30 	bmi.w	802369e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802383e:	3a01      	subs	r2, #1
 8023840:	4293      	cmp	r3, r2
 8023842:	f6bf af2c 	bge.w	802369e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023846:	f10b 0c03 	add.w	ip, fp, #3
 802384a:	46a6      	mov	lr, r4
 802384c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023850:	f1be 0f00 	cmp.w	lr, #0
 8023854:	dc79      	bgt.n	802394a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023856:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802385a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802385e:	44a3      	add	fp, r4
 8023860:	9b07      	ldr	r3, [sp, #28]
 8023862:	2b00      	cmp	r3, #0
 8023864:	f340 8123 	ble.w	8023aae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023868:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802386c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802386e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023872:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023876:	eef0 6a62 	vmov.f32	s13, s5
 802387a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802387e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023886:	ee16 5a90 	vmov	r5, s13
 802388a:	eef0 6a43 	vmov.f32	s13, s6
 802388e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023892:	ee16 6a90 	vmov	r6, s13
 8023896:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802389a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802389e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80238a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80238a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80238aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80238ae:	ee12 2a90 	vmov	r2, s5
 80238b2:	eef0 2a47 	vmov.f32	s5, s14
 80238b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80238ba:	ee13 2a10 	vmov	r2, s6
 80238be:	931f      	str	r3, [sp, #124]	@ 0x7c
 80238c0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80238c2:	eeb0 3a67 	vmov.f32	s6, s15
 80238c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80238ca:	9320      	str	r3, [sp, #128]	@ 0x80
 80238cc:	9b07      	ldr	r3, [sp, #28]
 80238ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80238d0:	3b01      	subs	r3, #1
 80238d2:	9307      	str	r3, [sp, #28]
 80238d4:	bf08      	it	eq
 80238d6:	4614      	moveq	r4, r2
 80238d8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80238da:	bf18      	it	ne
 80238dc:	461c      	movne	r4, r3
 80238de:	e6b4      	b.n	802364a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80238e0:	2900      	cmp	r1, #0
 80238e2:	f43f af3c 	beq.w	802375e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80238e6:	eb09 0003 	add.w	r0, r9, r3
 80238ea:	0843      	lsrs	r3, r0, #1
 80238ec:	07c0      	lsls	r0, r0, #31
 80238ee:	f818 3003 	ldrb.w	r3, [r8, r3]
 80238f2:	bf54      	ite	pl
 80238f4:	f003 030f 	andpl.w	r3, r3, #15
 80238f8:	111b      	asrmi	r3, r3, #4
 80238fa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80238fe:	b2db      	uxtb	r3, r3
 8023900:	930a      	str	r3, [sp, #40]	@ 0x28
 8023902:	e72c      	b.n	802375e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8023904:	703a      	strb	r2, [r7, #0]
 8023906:	7078      	strb	r0, [r7, #1]
 8023908:	f887 e002 	strb.w	lr, [r7, #2]
 802390c:	e775      	b.n	80237fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802390e:	1c5a      	adds	r2, r3, #1
 8023910:	f53f af73 	bmi.w	80237fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023914:	4594      	cmp	ip, r2
 8023916:	f6ff af70 	blt.w	80237fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802391a:	1c42      	adds	r2, r0, #1
 802391c:	f53f af6d 	bmi.w	80237fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023920:	4596      	cmp	lr, r2
 8023922:	f6ff af6a 	blt.w	80237fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023926:	9302      	str	r3, [sp, #8]
 8023928:	fa0f f38e 	sxth.w	r3, lr
 802392c:	9a08      	ldr	r2, [sp, #32]
 802392e:	9301      	str	r3, [sp, #4]
 8023930:	fa0f f38c 	sxth.w	r3, ip
 8023934:	9105      	str	r1, [sp, #20]
 8023936:	4639      	mov	r1, r7
 8023938:	9300      	str	r3, [sp, #0]
 802393a:	464b      	mov	r3, r9
 802393c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023940:	4642      	mov	r2, r8
 8023942:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8023944:	f7ff fd90 	bl	8023468 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023948:	e757      	b.n	80237fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802394a:	142a      	asrs	r2, r5, #16
 802394c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023950:	1433      	asrs	r3, r6, #16
 8023952:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8023956:	fb09 2303 	mla	r3, r9, r3, r2
 802395a:	085a      	lsrs	r2, r3, #1
 802395c:	07d9      	lsls	r1, r3, #31
 802395e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8023962:	bf54      	ite	pl
 8023964:	f002 020f 	andpl.w	r2, r2, #15
 8023968:	1112      	asrmi	r2, r2, #4
 802396a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802396e:	b2d2      	uxtb	r2, r2
 8023970:	2800      	cmp	r0, #0
 8023972:	f000 8085 	beq.w	8023a80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8023976:	f103 0a01 	add.w	sl, r3, #1
 802397a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802397e:	f01a 0f01 	tst.w	sl, #1
 8023982:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023986:	bf0c      	ite	eq
 8023988:	f001 010f 	andeq.w	r1, r1, #15
 802398c:	1109      	asrne	r1, r1, #4
 802398e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023992:	b2c9      	uxtb	r1, r1
 8023994:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023996:	b1df      	cbz	r7, 80239d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023998:	444b      	add	r3, r9
 802399a:	0859      	lsrs	r1, r3, #1
 802399c:	f013 0f01 	tst.w	r3, #1
 80239a0:	f103 0301 	add.w	r3, r3, #1
 80239a4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80239a8:	bf0c      	ite	eq
 80239aa:	f001 010f 	andeq.w	r1, r1, #15
 80239ae:	1109      	asrne	r1, r1, #4
 80239b0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80239b4:	b2c9      	uxtb	r1, r1
 80239b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80239b8:	0859      	lsrs	r1, r3, #1
 80239ba:	07db      	lsls	r3, r3, #31
 80239bc:	f818 1001 	ldrb.w	r1, [r8, r1]
 80239c0:	bf54      	ite	pl
 80239c2:	f001 010f 	andpl.w	r1, r1, #15
 80239c6:	1109      	asrmi	r1, r1, #4
 80239c8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80239cc:	b2c9      	uxtb	r1, r1
 80239ce:	9110      	str	r1, [sp, #64]	@ 0x40
 80239d0:	b280      	uxth	r0, r0
 80239d2:	b2bf      	uxth	r7, r7
 80239d4:	fb00 f307 	mul.w	r3, r0, r7
 80239d8:	0100      	lsls	r0, r0, #4
 80239da:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80239de:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 80239e2:	1ac0      	subs	r0, r0, r3
 80239e4:	b2bf      	uxth	r7, r7
 80239e6:	b280      	uxth	r0, r0
 80239e8:	1bc9      	subs	r1, r1, r7
 80239ea:	fa1f fa81 	uxth.w	sl, r1
 80239ee:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80239f0:	4348      	muls	r0, r1
 80239f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80239f4:	fb02 020a 	mla	r2, r2, sl, r0
 80239f8:	fb07 2701 	mla	r7, r7, r1, r2
 80239fc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80239fe:	fb03 7302 	mla	r3, r3, r2, r7
 8023a02:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023a06:	b393      	cbz	r3, 8023a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023a08:	4a2a      	ldr	r2, [pc, #168]	@ (8023ab4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8023a0a:	2bff      	cmp	r3, #255	@ 0xff
 8023a0c:	6811      	ldr	r1, [r2, #0]
 8023a0e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8023a12:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8023a16:	b2c9      	uxtb	r1, r1
 8023a18:	d042      	beq.n	8023aa0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023a1a:	b298      	uxth	r0, r3
 8023a1c:	43db      	mvns	r3, r3
 8023a1e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8023a22:	fb11 f100 	smulbb	r1, r1, r0
 8023a26:	b2db      	uxtb	r3, r3
 8023a28:	fb17 f700 	smulbb	r7, r7, r0
 8023a2c:	fb02 1103 	mla	r1, r2, r3, r1
 8023a30:	fb1a f000 	smulbb	r0, sl, r0
 8023a34:	b289      	uxth	r1, r1
 8023a36:	1c4a      	adds	r2, r1, #1
 8023a38:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023a3c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8023a40:	fb02 7703 	mla	r7, r2, r3, r7
 8023a44:	1209      	asrs	r1, r1, #8
 8023a46:	b2bf      	uxth	r7, r7
 8023a48:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023a4c:	1c7a      	adds	r2, r7, #1
 8023a4e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8023a52:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8023a56:	fb02 0303 	mla	r3, r2, r3, r0
 8023a5a:	123f      	asrs	r7, r7, #8
 8023a5c:	b29b      	uxth	r3, r3
 8023a5e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8023a62:	1c5a      	adds	r2, r3, #1
 8023a64:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023a68:	121b      	asrs	r3, r3, #8
 8023a6a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8023a6e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023a70:	f10c 0c03 	add.w	ip, ip, #3
 8023a74:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023a78:	441d      	add	r5, r3
 8023a7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023a7c:	441e      	add	r6, r3
 8023a7e:	e6e7      	b.n	8023850 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023a80:	2f00      	cmp	r7, #0
 8023a82:	d0a5      	beq.n	80239d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023a84:	444b      	add	r3, r9
 8023a86:	0859      	lsrs	r1, r3, #1
 8023a88:	07db      	lsls	r3, r3, #31
 8023a8a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023a8e:	bf54      	ite	pl
 8023a90:	f001 010f 	andpl.w	r1, r1, #15
 8023a94:	1109      	asrmi	r1, r1, #4
 8023a96:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023a9a:	b2c9      	uxtb	r1, r1
 8023a9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023a9e:	e797      	b.n	80239d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023aa0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023aa4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8023aa8:	f80c ac01 	strb.w	sl, [ip, #-1]
 8023aac:	e7df      	b.n	8023a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023aae:	b013      	add	sp, #76	@ 0x4c
 8023ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ab4:	24028e3c 	.word	0x24028e3c

08023ab8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8023ab8:	b530      	push	{r4, r5, lr}
 8023aba:	b29d      	uxth	r5, r3
 8023abc:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8023ac0:	780c      	ldrb	r4, [r1, #0]
 8023ac2:	b298      	uxth	r0, r3
 8023ac4:	7813      	ldrb	r3, [r2, #0]
 8023ac6:	fb14 f405 	smulbb	r4, r4, r5
 8023aca:	fb13 f300 	smulbb	r3, r3, r0
 8023ace:	441c      	add	r4, r3
 8023ad0:	b2a4      	uxth	r4, r4
 8023ad2:	1c63      	adds	r3, r4, #1
 8023ad4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023ad8:	7853      	ldrb	r3, [r2, #1]
 8023ada:	fb13 f300 	smulbb	r3, r3, r0
 8023ade:	1224      	asrs	r4, r4, #8
 8023ae0:	7014      	strb	r4, [r2, #0]
 8023ae2:	784c      	ldrb	r4, [r1, #1]
 8023ae4:	fb14 f405 	smulbb	r4, r4, r5
 8023ae8:	441c      	add	r4, r3
 8023aea:	b2a4      	uxth	r4, r4
 8023aec:	1c63      	adds	r3, r4, #1
 8023aee:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023af2:	1224      	asrs	r4, r4, #8
 8023af4:	7054      	strb	r4, [r2, #1]
 8023af6:	788b      	ldrb	r3, [r1, #2]
 8023af8:	7891      	ldrb	r1, [r2, #2]
 8023afa:	fb13 f305 	smulbb	r3, r3, r5
 8023afe:	fb11 f000 	smulbb	r0, r1, r0
 8023b02:	4403      	add	r3, r0
 8023b04:	b29b      	uxth	r3, r3
 8023b06:	1c59      	adds	r1, r3, #1
 8023b08:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023b0c:	121b      	asrs	r3, r3, #8
 8023b0e:	7093      	strb	r3, [r2, #2]
 8023b10:	bd30      	pop	{r4, r5, pc}
	...

08023b14 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8023b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b18:	461c      	mov	r4, r3
 8023b1a:	b08b      	sub	sp, #44	@ 0x2c
 8023b1c:	460e      	mov	r6, r1
 8023b1e:	4615      	mov	r5, r2
 8023b20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023b22:	4682      	mov	sl, r0
 8023b24:	6861      	ldr	r1, [r4, #4]
 8023b26:	aa06      	add	r2, sp, #24
 8023b28:	6820      	ldr	r0, [r4, #0]
 8023b2a:	2702      	movs	r7, #2
 8023b2c:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8023b30:	3504      	adds	r5, #4
 8023b32:	c203      	stmia	r2!, {r0, r1}
 8023b34:	6818      	ldr	r0, [r3, #0]
 8023b36:	aa08      	add	r2, sp, #32
 8023b38:	6859      	ldr	r1, [r3, #4]
 8023b3a:	c203      	stmia	r2!, {r0, r1}
 8023b3c:	a806      	add	r0, sp, #24
 8023b3e:	f7f2 fc33 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023b42:	4621      	mov	r1, r4
 8023b44:	a808      	add	r0, sp, #32
 8023b46:	f7f2 fc57 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023b4a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023b4e:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8023b52:	f002 0301 	and.w	r3, r2, #1
 8023b56:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8023b5a:	9302      	str	r3, [sp, #8]
 8023b5c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023b60:	f003 0101 	and.w	r1, r3, #1
 8023b64:	9101      	str	r1, [sp, #4]
 8023b66:	9801      	ldr	r0, [sp, #4]
 8023b68:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8023b6c:	4403      	add	r3, r0
 8023b6e:	fb01 2303 	mla	r3, r1, r3, r2
 8023b72:	fb93 f3f7 	sdiv	r3, r3, r7
 8023b76:	441e      	add	r6, r3
 8023b78:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8023b7c:	441a      	add	r2, r3
 8023b7e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8023b82:	4419      	add	r1, r3
 8023b84:	4b70      	ldr	r3, [pc, #448]	@ (8023d48 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8023b86:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023b8a:	6818      	ldr	r0, [r3, #0]
 8023b8c:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8023b90:	6803      	ldr	r3, [r0, #0]
 8023b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023b94:	4798      	blx	r3
 8023b96:	4a6d      	ldr	r2, [pc, #436]	@ (8023d4c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8023b98:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8023b9c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8023ba0:	8813      	ldrh	r3, [r2, #0]
 8023ba2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8023ba6:	fb03 1404 	mla	r4, r3, r4, r1
 8023baa:	4611      	mov	r1, r2
 8023bac:	fb0b f303 	mul.w	r3, fp, r3
 8023bb0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023bb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023bb8:	4404      	add	r4, r0
 8023bba:	4423      	add	r3, r4
 8023bbc:	d073      	beq.n	8023ca6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8023bbe:	9705      	str	r7, [sp, #20]
 8023bc0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023bc4:	9b03      	ldr	r3, [sp, #12]
 8023bc6:	429c      	cmp	r4, r3
 8023bc8:	f080 80b5 	bcs.w	8023d36 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8023bcc:	9b02      	ldr	r3, [sp, #8]
 8023bce:	b35b      	cbz	r3, 8023c28 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8023bd0:	7831      	ldrb	r1, [r6, #0]
 8023bd2:	4622      	mov	r2, r4
 8023bd4:	1c77      	adds	r7, r6, #1
 8023bd6:	3403      	adds	r4, #3
 8023bd8:	f001 010f 	and.w	r1, r1, #15
 8023bdc:	f108 3bff 	add.w	fp, r8, #4294967295
 8023be0:	464b      	mov	r3, r9
 8023be2:	4650      	mov	r0, sl
 8023be4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023be8:	4429      	add	r1, r5
 8023bea:	f7ff ff65 	bl	8023ab8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8023bee:	f1bb 0f01 	cmp.w	fp, #1
 8023bf2:	dd1c      	ble.n	8023c2e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8023bf4:	7839      	ldrb	r1, [r7, #0]
 8023bf6:	4622      	mov	r2, r4
 8023bf8:	464b      	mov	r3, r9
 8023bfa:	4650      	mov	r0, sl
 8023bfc:	0909      	lsrs	r1, r1, #4
 8023bfe:	f1ab 0b02 	sub.w	fp, fp, #2
 8023c02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023c06:	4429      	add	r1, r5
 8023c08:	f7ff ff56 	bl	8023ab8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8023c0c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8023c10:	1ce2      	adds	r2, r4, #3
 8023c12:	464b      	mov	r3, r9
 8023c14:	f001 010f 	and.w	r1, r1, #15
 8023c18:	4650      	mov	r0, sl
 8023c1a:	3406      	adds	r4, #6
 8023c1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023c20:	4429      	add	r1, r5
 8023c22:	f7ff ff49 	bl	8023ab8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8023c26:	e7e2      	b.n	8023bee <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8023c28:	4637      	mov	r7, r6
 8023c2a:	46c3      	mov	fp, r8
 8023c2c:	e7df      	b.n	8023bee <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8023c2e:	d10a      	bne.n	8023c46 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8023c30:	7839      	ldrb	r1, [r7, #0]
 8023c32:	4622      	mov	r2, r4
 8023c34:	3403      	adds	r4, #3
 8023c36:	464b      	mov	r3, r9
 8023c38:	0909      	lsrs	r1, r1, #4
 8023c3a:	4650      	mov	r0, sl
 8023c3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023c40:	4429      	add	r1, r5
 8023c42:	f7ff ff39 	bl	8023ab8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8023c46:	9b04      	ldr	r3, [sp, #16]
 8023c48:	9a01      	ldr	r2, [sp, #4]
 8023c4a:	881b      	ldrh	r3, [r3, #0]
 8023c4c:	eba3 0308 	sub.w	r3, r3, r8
 8023c50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023c54:	441c      	add	r4, r3
 8023c56:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023c5a:	4413      	add	r3, r2
 8023c5c:	9a05      	ldr	r2, [sp, #20]
 8023c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8023c62:	441e      	add	r6, r3
 8023c64:	e7ae      	b.n	8023bc4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8023c66:	4632      	mov	r2, r6
 8023c68:	46c4      	mov	ip, r8
 8023c6a:	e037      	b.n	8023cdc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8023c6c:	d10e      	bne.n	8023c8c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8023c6e:	7812      	ldrb	r2, [r2, #0]
 8023c70:	3003      	adds	r0, #3
 8023c72:	0912      	lsrs	r2, r2, #4
 8023c74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c78:	18ac      	adds	r4, r5, r2
 8023c7a:	5caa      	ldrb	r2, [r5, r2]
 8023c7c:	f800 2c03 	strb.w	r2, [r0, #-3]
 8023c80:	7862      	ldrb	r2, [r4, #1]
 8023c82:	f800 2c02 	strb.w	r2, [r0, #-2]
 8023c86:	78a2      	ldrb	r2, [r4, #2]
 8023c88:	f800 2c01 	strb.w	r2, [r0, #-1]
 8023c8c:	880c      	ldrh	r4, [r1, #0]
 8023c8e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8023c92:	eba4 0408 	sub.w	r4, r4, r8
 8023c96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023c9a:	4404      	add	r4, r0
 8023c9c:	9801      	ldr	r0, [sp, #4]
 8023c9e:	4402      	add	r2, r0
 8023ca0:	fb92 f2f7 	sdiv	r2, r2, r7
 8023ca4:	4416      	add	r6, r2
 8023ca6:	429c      	cmp	r4, r3
 8023ca8:	d245      	bcs.n	8023d36 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8023caa:	9a02      	ldr	r2, [sp, #8]
 8023cac:	2a00      	cmp	r2, #0
 8023cae:	d0da      	beq.n	8023c66 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8023cb0:	7830      	ldrb	r0, [r6, #0]
 8023cb2:	1c72      	adds	r2, r6, #1
 8023cb4:	3403      	adds	r4, #3
 8023cb6:	f000 000f 	and.w	r0, r0, #15
 8023cba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023cbe:	eb05 0c00 	add.w	ip, r5, r0
 8023cc2:	5c28      	ldrb	r0, [r5, r0]
 8023cc4:	f804 0c03 	strb.w	r0, [r4, #-3]
 8023cc8:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023ccc:	f804 0c02 	strb.w	r0, [r4, #-2]
 8023cd0:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8023cd4:	f108 3cff 	add.w	ip, r8, #4294967295
 8023cd8:	f804 0c01 	strb.w	r0, [r4, #-1]
 8023cdc:	f1bc 0f01 	cmp.w	ip, #1
 8023ce0:	4620      	mov	r0, r4
 8023ce2:	f104 0406 	add.w	r4, r4, #6
 8023ce6:	ddc1      	ble.n	8023c6c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8023ce8:	7810      	ldrb	r0, [r2, #0]
 8023cea:	f1ac 0c02 	sub.w	ip, ip, #2
 8023cee:	0900      	lsrs	r0, r0, #4
 8023cf0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023cf4:	eb05 0e00 	add.w	lr, r5, r0
 8023cf8:	5c28      	ldrb	r0, [r5, r0]
 8023cfa:	f804 0c06 	strb.w	r0, [r4, #-6]
 8023cfe:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023d02:	f804 0c05 	strb.w	r0, [r4, #-5]
 8023d06:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8023d0a:	f804 0c04 	strb.w	r0, [r4, #-4]
 8023d0e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8023d12:	f000 000f 	and.w	r0, r0, #15
 8023d16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023d1a:	eb05 0e00 	add.w	lr, r5, r0
 8023d1e:	5c28      	ldrb	r0, [r5, r0]
 8023d20:	f804 0c03 	strb.w	r0, [r4, #-3]
 8023d24:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023d28:	f804 0c02 	strb.w	r0, [r4, #-2]
 8023d2c:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8023d30:	f804 0c01 	strb.w	r0, [r4, #-1]
 8023d34:	e7d2      	b.n	8023cdc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8023d36:	4b04      	ldr	r3, [pc, #16]	@ (8023d48 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8023d38:	6818      	ldr	r0, [r3, #0]
 8023d3a:	6803      	ldr	r3, [r0, #0]
 8023d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023d3e:	4798      	blx	r3
 8023d40:	b00b      	add	sp, #44	@ 0x2c
 8023d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d46:	bf00      	nop
 8023d48:	24028e2c 	.word	0x24028e2c
 8023d4c:	24028e26 	.word	0x24028e26

08023d50 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8023d50:	b530      	push	{r4, r5, lr}
 8023d52:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8023d56:	780d      	ldrb	r5, [r1, #0]
 8023d58:	28ff      	cmp	r0, #255	@ 0xff
 8023d5a:	d107      	bne.n	8023d6c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8023d5c:	2bff      	cmp	r3, #255	@ 0xff
 8023d5e:	d105      	bne.n	8023d6c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8023d60:	7015      	strb	r5, [r2, #0]
 8023d62:	784b      	ldrb	r3, [r1, #1]
 8023d64:	7053      	strb	r3, [r2, #1]
 8023d66:	788b      	ldrb	r3, [r1, #2]
 8023d68:	7093      	strb	r3, [r2, #2]
 8023d6a:	bd30      	pop	{r4, r5, pc}
 8023d6c:	fb10 f003 	smulbb	r0, r0, r3
 8023d70:	b283      	uxth	r3, r0
 8023d72:	1c58      	adds	r0, r3, #1
 8023d74:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023d78:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023d7c:	b284      	uxth	r4, r0
 8023d7e:	43c0      	mvns	r0, r0
 8023d80:	fb15 f504 	smulbb	r5, r5, r4
 8023d84:	b2c3      	uxtb	r3, r0
 8023d86:	7810      	ldrb	r0, [r2, #0]
 8023d88:	fb00 5003 	mla	r0, r0, r3, r5
 8023d8c:	b280      	uxth	r0, r0
 8023d8e:	1c45      	adds	r5, r0, #1
 8023d90:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023d94:	7855      	ldrb	r5, [r2, #1]
 8023d96:	fb15 f503 	smulbb	r5, r5, r3
 8023d9a:	1200      	asrs	r0, r0, #8
 8023d9c:	7010      	strb	r0, [r2, #0]
 8023d9e:	7848      	ldrb	r0, [r1, #1]
 8023da0:	fb00 5004 	mla	r0, r0, r4, r5
 8023da4:	b280      	uxth	r0, r0
 8023da6:	1c45      	adds	r5, r0, #1
 8023da8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023dac:	1200      	asrs	r0, r0, #8
 8023dae:	7050      	strb	r0, [r2, #1]
 8023db0:	7888      	ldrb	r0, [r1, #2]
 8023db2:	7891      	ldrb	r1, [r2, #2]
 8023db4:	fb11 f303 	smulbb	r3, r1, r3
 8023db8:	fb00 3304 	mla	r3, r0, r4, r3
 8023dbc:	b29b      	uxth	r3, r3
 8023dbe:	1c59      	adds	r1, r3, #1
 8023dc0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023dc4:	121b      	asrs	r3, r3, #8
 8023dc6:	e7cf      	b.n	8023d68 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08023dc8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8023dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023dcc:	461d      	mov	r5, r3
 8023dce:	b08f      	sub	sp, #60	@ 0x3c
 8023dd0:	460c      	mov	r4, r1
 8023dd2:	4616      	mov	r6, r2
 8023dd4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023dd6:	4680      	mov	r8, r0
 8023dd8:	6869      	ldr	r1, [r5, #4]
 8023dda:	aa0a      	add	r2, sp, #40	@ 0x28
 8023ddc:	6828      	ldr	r0, [r5, #0]
 8023dde:	3604      	adds	r6, #4
 8023de0:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8023de4:	4f57      	ldr	r7, [pc, #348]	@ (8023f44 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8023de6:	c203      	stmia	r2!, {r0, r1}
 8023de8:	6818      	ldr	r0, [r3, #0]
 8023dea:	aa0c      	add	r2, sp, #48	@ 0x30
 8023dec:	6859      	ldr	r1, [r3, #4]
 8023dee:	c203      	stmia	r2!, {r0, r1}
 8023df0:	a80a      	add	r0, sp, #40	@ 0x28
 8023df2:	f7f2 fad9 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023df6:	4629      	mov	r1, r5
 8023df8:	a80c      	add	r0, sp, #48	@ 0x30
 8023dfa:	2502      	movs	r5, #2
 8023dfc:	f7f2 fafc 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023e00:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8023e04:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8023e08:	f002 0301 	and.w	r3, r2, #1
 8023e0c:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8023e10:	9304      	str	r3, [sp, #16]
 8023e12:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8023e16:	f003 0101 	and.w	r1, r3, #1
 8023e1a:	9103      	str	r1, [sp, #12]
 8023e1c:	9803      	ldr	r0, [sp, #12]
 8023e1e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8023e22:	4403      	add	r3, r0
 8023e24:	6838      	ldr	r0, [r7, #0]
 8023e26:	fb01 2303 	mla	r3, r1, r3, r2
 8023e2a:	fb93 f3f5 	sdiv	r3, r3, r5
 8023e2e:	18e5      	adds	r5, r4, r3
 8023e30:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8023e34:	441a      	add	r2, r3
 8023e36:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8023e3a:	4419      	add	r1, r3
 8023e3c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8023e40:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8023e44:	6803      	ldr	r3, [r0, #0]
 8023e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023e48:	4798      	blx	r3
 8023e4a:	4a3f      	ldr	r2, [pc, #252]	@ (8023f48 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8023e4c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8023e50:	8813      	ldrh	r3, [r2, #0]
 8023e52:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8023e56:	9207      	str	r2, [sp, #28]
 8023e58:	fb03 1404 	mla	r4, r3, r4, r1
 8023e5c:	fb0a f303 	mul.w	r3, sl, r3
 8023e60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023e64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023e68:	4404      	add	r4, r0
 8023e6a:	18e3      	adds	r3, r4, r3
 8023e6c:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8023e70:	9b05      	ldr	r3, [sp, #20]
 8023e72:	429c      	cmp	r4, r3
 8023e74:	d25d      	bcs.n	8023f32 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8023e76:	9b04      	ldr	r3, [sp, #16]
 8023e78:	2b00      	cmp	r3, #0
 8023e7a:	d037      	beq.n	8023eec <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8023e7c:	782b      	ldrb	r3, [r5, #0]
 8023e7e:	1c6f      	adds	r7, r5, #1
 8023e80:	f003 030f 	and.w	r3, r3, #15
 8023e84:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8023e8a:	0e1b      	lsrs	r3, r3, #24
 8023e8c:	d006      	beq.n	8023e9c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8023e8e:	9300      	str	r3, [sp, #0]
 8023e90:	4622      	mov	r2, r4
 8023e92:	464b      	mov	r3, r9
 8023e94:	a909      	add	r1, sp, #36	@ 0x24
 8023e96:	4640      	mov	r0, r8
 8023e98:	f7ff ff5a 	bl	8023d50 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8023e9c:	3403      	adds	r4, #3
 8023e9e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8023ea2:	f1ba 0f01 	cmp.w	sl, #1
 8023ea6:	dd24      	ble.n	8023ef2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8023ea8:	783b      	ldrb	r3, [r7, #0]
 8023eaa:	091b      	lsrs	r3, r3, #4
 8023eac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023eb0:	9308      	str	r3, [sp, #32]
 8023eb2:	0e1b      	lsrs	r3, r3, #24
 8023eb4:	d006      	beq.n	8023ec4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8023eb6:	9300      	str	r3, [sp, #0]
 8023eb8:	4622      	mov	r2, r4
 8023eba:	464b      	mov	r3, r9
 8023ebc:	a908      	add	r1, sp, #32
 8023ebe:	4640      	mov	r0, r8
 8023ec0:	f7ff ff46 	bl	8023d50 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8023ec4:	f817 3b01 	ldrb.w	r3, [r7], #1
 8023ec8:	f003 030f 	and.w	r3, r3, #15
 8023ecc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023ed0:	9309      	str	r3, [sp, #36]	@ 0x24
 8023ed2:	0e1b      	lsrs	r3, r3, #24
 8023ed4:	d006      	beq.n	8023ee4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8023ed6:	9300      	str	r3, [sp, #0]
 8023ed8:	1ce2      	adds	r2, r4, #3
 8023eda:	464b      	mov	r3, r9
 8023edc:	a909      	add	r1, sp, #36	@ 0x24
 8023ede:	4640      	mov	r0, r8
 8023ee0:	f7ff ff36 	bl	8023d50 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8023ee4:	3406      	adds	r4, #6
 8023ee6:	f1aa 0a02 	sub.w	sl, sl, #2
 8023eea:	e7da      	b.n	8023ea2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8023eec:	462f      	mov	r7, r5
 8023eee:	46da      	mov	sl, fp
 8023ef0:	e7d7      	b.n	8023ea2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8023ef2:	d10e      	bne.n	8023f12 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8023ef4:	783b      	ldrb	r3, [r7, #0]
 8023ef6:	091b      	lsrs	r3, r3, #4
 8023ef8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8023efe:	0e1b      	lsrs	r3, r3, #24
 8023f00:	d006      	beq.n	8023f10 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8023f02:	9300      	str	r3, [sp, #0]
 8023f04:	4622      	mov	r2, r4
 8023f06:	464b      	mov	r3, r9
 8023f08:	a909      	add	r1, sp, #36	@ 0x24
 8023f0a:	4640      	mov	r0, r8
 8023f0c:	f7ff ff20 	bl	8023d50 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8023f10:	3403      	adds	r4, #3
 8023f12:	9b07      	ldr	r3, [sp, #28]
 8023f14:	9a03      	ldr	r2, [sp, #12]
 8023f16:	881b      	ldrh	r3, [r3, #0]
 8023f18:	eba3 030b 	sub.w	r3, r3, fp
 8023f1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023f20:	441c      	add	r4, r3
 8023f22:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8023f26:	4413      	add	r3, r2
 8023f28:	2202      	movs	r2, #2
 8023f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8023f2e:	441d      	add	r5, r3
 8023f30:	e79e      	b.n	8023e70 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8023f32:	9b06      	ldr	r3, [sp, #24]
 8023f34:	6818      	ldr	r0, [r3, #0]
 8023f36:	6803      	ldr	r3, [r0, #0]
 8023f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023f3a:	4798      	blx	r3
 8023f3c:	b00f      	add	sp, #60	@ 0x3c
 8023f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f42:	bf00      	nop
 8023f44:	24028e2c 	.word	0x24028e2c
 8023f48:	24028e26 	.word	0x24028e26

08023f4c <CRC_Lock>:
 8023f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8024004 <CRC_Lock+0xb8>)
 8023f4e:	b530      	push	{r4, r5, lr}
 8023f50:	6813      	ldr	r3, [r2, #0]
 8023f52:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8023f56:	f023 0301 	bic.w	r3, r3, #1
 8023f5a:	6013      	str	r3, [r2, #0]
 8023f5c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8023f60:	4b29      	ldr	r3, [pc, #164]	@ (8024008 <CRC_Lock+0xbc>)
 8023f62:	681c      	ldr	r4, [r3, #0]
 8023f64:	4014      	ands	r4, r2
 8023f66:	42ac      	cmp	r4, r5
 8023f68:	d005      	beq.n	8023f76 <CRC_Lock+0x2a>
 8023f6a:	681c      	ldr	r4, [r3, #0]
 8023f6c:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8023f70:	4014      	ands	r4, r2
 8023f72:	42ac      	cmp	r4, r5
 8023f74:	d125      	bne.n	8023fc2 <CRC_Lock+0x76>
 8023f76:	4b25      	ldr	r3, [pc, #148]	@ (802400c <CRC_Lock+0xc0>)
 8023f78:	681b      	ldr	r3, [r3, #0]
 8023f7a:	2b00      	cmp	r3, #0
 8023f7c:	d139      	bne.n	8023ff2 <CRC_Lock+0xa6>
 8023f7e:	4b24      	ldr	r3, [pc, #144]	@ (8024010 <CRC_Lock+0xc4>)
 8023f80:	681a      	ldr	r2, [r3, #0]
 8023f82:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023f86:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8023f8a:	d00d      	beq.n	8023fa8 <CRC_Lock+0x5c>
 8023f8c:	681a      	ldr	r2, [r3, #0]
 8023f8e:	f240 4483 	movw	r4, #1155	@ 0x483
 8023f92:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023f96:	42a2      	cmp	r2, r4
 8023f98:	d006      	beq.n	8023fa8 <CRC_Lock+0x5c>
 8023f9a:	681b      	ldr	r3, [r3, #0]
 8023f9c:	f240 4285 	movw	r2, #1157	@ 0x485
 8023fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023fa4:	4293      	cmp	r3, r2
 8023fa6:	d124      	bne.n	8023ff2 <CRC_Lock+0xa6>
 8023fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8024014 <CRC_Lock+0xc8>)
 8023faa:	2201      	movs	r2, #1
 8023fac:	601a      	str	r2, [r3, #0]
 8023fae:	681a      	ldr	r2, [r3, #0]
 8023fb0:	2a00      	cmp	r2, #0
 8023fb2:	d1fc      	bne.n	8023fae <CRC_Lock+0x62>
 8023fb4:	4b18      	ldr	r3, [pc, #96]	@ (8024018 <CRC_Lock+0xcc>)
 8023fb6:	6018      	str	r0, [r3, #0]
 8023fb8:	6818      	ldr	r0, [r3, #0]
 8023fba:	1a43      	subs	r3, r0, r1
 8023fbc:	4258      	negs	r0, r3
 8023fbe:	4158      	adcs	r0, r3
 8023fc0:	e00e      	b.n	8023fe0 <CRC_Lock+0x94>
 8023fc2:	681b      	ldr	r3, [r3, #0]
 8023fc4:	4013      	ands	r3, r2
 8023fc6:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8023fca:	4293      	cmp	r3, r2
 8023fcc:	d111      	bne.n	8023ff2 <CRC_Lock+0xa6>
 8023fce:	4b13      	ldr	r3, [pc, #76]	@ (802401c <CRC_Lock+0xd0>)
 8023fd0:	f240 4286 	movw	r2, #1158	@ 0x486
 8023fd4:	681b      	ldr	r3, [r3, #0]
 8023fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023fda:	4293      	cmp	r3, r2
 8023fdc:	d001      	beq.n	8023fe2 <CRC_Lock+0x96>
 8023fde:	2000      	movs	r0, #0
 8023fe0:	bd30      	pop	{r4, r5, pc}
 8023fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8024020 <CRC_Lock+0xd4>)
 8023fe4:	2201      	movs	r2, #1
 8023fe6:	601a      	str	r2, [r3, #0]
 8023fe8:	681a      	ldr	r2, [r3, #0]
 8023fea:	2a00      	cmp	r2, #0
 8023fec:	d1fc      	bne.n	8023fe8 <CRC_Lock+0x9c>
 8023fee:	4b0d      	ldr	r3, [pc, #52]	@ (8024024 <CRC_Lock+0xd8>)
 8023ff0:	e7e1      	b.n	8023fb6 <CRC_Lock+0x6a>
 8023ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8024028 <CRC_Lock+0xdc>)
 8023ff4:	2201      	movs	r2, #1
 8023ff6:	601a      	str	r2, [r3, #0]
 8023ff8:	681a      	ldr	r2, [r3, #0]
 8023ffa:	2a00      	cmp	r2, #0
 8023ffc:	d1fc      	bne.n	8023ff8 <CRC_Lock+0xac>
 8023ffe:	4b0b      	ldr	r3, [pc, #44]	@ (802402c <CRC_Lock+0xe0>)
 8024000:	e7d9      	b.n	8023fb6 <CRC_Lock+0x6a>
 8024002:	bf00      	nop
 8024004:	e0002000 	.word	0xe0002000
 8024008:	e000ed00 	.word	0xe000ed00
 802400c:	e0042000 	.word	0xe0042000
 8024010:	5c001000 	.word	0x5c001000
 8024014:	58024c08 	.word	0x58024c08
 8024018:	58024c00 	.word	0x58024c00
 802401c:	46008ff0 	.word	0x46008ff0
 8024020:	46024c08 	.word	0x46024c08
 8024024:	46024c00 	.word	0x46024c00
 8024028:	40023008 	.word	0x40023008
 802402c:	40023000 	.word	0x40023000

08024030 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024030:	6101      	str	r1, [r0, #16]
 8024032:	4770      	bx	lr

08024034 <_ZN8touchgfx8Gestures4tickEv>:
 8024034:	7b83      	ldrb	r3, [r0, #14]
 8024036:	b14b      	cbz	r3, 802404c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024038:	8903      	ldrh	r3, [r0, #8]
 802403a:	3301      	adds	r3, #1
 802403c:	b29b      	uxth	r3, r3
 802403e:	2b07      	cmp	r3, #7
 8024040:	8103      	strh	r3, [r0, #8]
 8024042:	bf81      	itttt	hi
 8024044:	2300      	movhi	r3, #0
 8024046:	8143      	strhhi	r3, [r0, #10]
 8024048:	8183      	strhhi	r3, [r0, #12]
 802404a:	7383      	strbhi	r3, [r0, #14]
 802404c:	4770      	bx	lr
	...

08024050 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024050:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024054:	4698      	mov	r8, r3
 8024056:	8883      	ldrh	r3, [r0, #4]
 8024058:	4604      	mov	r4, r0
 802405a:	4617      	mov	r7, r2
 802405c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024060:	eba8 0303 	sub.w	r3, r8, r3
 8024064:	4a19      	ldr	r2, [pc, #100]	@ (80240cc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8024066:	460e      	mov	r6, r1
 8024068:	b21b      	sxth	r3, r3
 802406a:	88c1      	ldrh	r1, [r0, #6]
 802406c:	9200      	str	r2, [sp, #0]
 802406e:	2000      	movs	r0, #0
 8024070:	2b00      	cmp	r3, #0
 8024072:	8aa2      	ldrh	r2, [r4, #20]
 8024074:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8024078:	bfb8      	it	lt
 802407a:	425b      	neglt	r3, r3
 802407c:	f88d 0004 	strb.w	r0, [sp, #4]
 8024080:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024084:	b21b      	sxth	r3, r3
 8024086:	f8ad 800a 	strh.w	r8, [sp, #10]
 802408a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802408e:	4293      	cmp	r3, r2
 8024090:	dc07      	bgt.n	80240a2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8024092:	1a69      	subs	r1, r5, r1
 8024094:	b209      	sxth	r1, r1
 8024096:	2900      	cmp	r1, #0
 8024098:	bfb8      	it	lt
 802409a:	4249      	neglt	r1, r1
 802409c:	b209      	sxth	r1, r1
 802409e:	428a      	cmp	r2, r1
 80240a0:	da10      	bge.n	80240c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80240a2:	6920      	ldr	r0, [r4, #16]
 80240a4:	4669      	mov	r1, sp
 80240a6:	eba8 0606 	sub.w	r6, r8, r6
 80240aa:	1bef      	subs	r7, r5, r7
 80240ac:	6803      	ldr	r3, [r0, #0]
 80240ae:	685b      	ldr	r3, [r3, #4]
 80240b0:	4798      	blx	r3
 80240b2:	2300      	movs	r3, #0
 80240b4:	2001      	movs	r0, #1
 80240b6:	8166      	strh	r6, [r4, #10]
 80240b8:	8123      	strh	r3, [r4, #8]
 80240ba:	81a7      	strh	r7, [r4, #12]
 80240bc:	f8a4 8004 	strh.w	r8, [r4, #4]
 80240c0:	80e5      	strh	r5, [r4, #6]
 80240c2:	73a0      	strb	r0, [r4, #14]
 80240c4:	b004      	add	sp, #16
 80240c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80240ca:	bf00      	nop
 80240cc:	08029760 	.word	0x08029760

080240d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80240d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80240d2:	461e      	mov	r6, r3
 80240d4:	1e4b      	subs	r3, r1, #1
 80240d6:	b085      	sub	sp, #20
 80240d8:	4604      	mov	r4, r0
 80240da:	2b01      	cmp	r3, #1
 80240dc:	460d      	mov	r5, r1
 80240de:	4617      	mov	r7, r2
 80240e0:	d84b      	bhi.n	802417a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80240e2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80240e6:	1cd3      	adds	r3, r2, #3
 80240e8:	b29b      	uxth	r3, r3
 80240ea:	2b06      	cmp	r3, #6
 80240ec:	d916      	bls.n	802411c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80240ee:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8024190 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80240f2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80240f6:	f8cd c004 	str.w	ip, [sp, #4]
 80240fa:	f04f 0c00 	mov.w	ip, #0
 80240fe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024102:	6900      	ldr	r0, [r0, #16]
 8024104:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024108:	a901      	add	r1, sp, #4
 802410a:	f88d c008 	strb.w	ip, [sp, #8]
 802410e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024112:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024116:	6803      	ldr	r3, [r0, #0]
 8024118:	689b      	ldr	r3, [r3, #8]
 802411a:	4798      	blx	r3
 802411c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024120:	1cd3      	adds	r3, r2, #3
 8024122:	b29b      	uxth	r3, r3
 8024124:	2b06      	cmp	r3, #6
 8024126:	d916      	bls.n	8024156 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024128:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8024190 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802412c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024130:	f8cd c004 	str.w	ip, [sp, #4]
 8024134:	f04f 0c01 	mov.w	ip, #1
 8024138:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802413c:	6920      	ldr	r0, [r4, #16]
 802413e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024142:	a901      	add	r1, sp, #4
 8024144:	f88d c008 	strb.w	ip, [sp, #8]
 8024148:	f8ad 200a 	strh.w	r2, [sp, #10]
 802414c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024150:	6803      	ldr	r3, [r0, #0]
 8024152:	689b      	ldr	r3, [r3, #8]
 8024154:	4798      	blx	r3
 8024156:	4b0d      	ldr	r3, [pc, #52]	@ (802418c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024158:	a901      	add	r1, sp, #4
 802415a:	6920      	ldr	r0, [r4, #16]
 802415c:	9301      	str	r3, [sp, #4]
 802415e:	2300      	movs	r3, #0
 8024160:	f88d 5008 	strb.w	r5, [sp, #8]
 8024164:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024168:	f8ad 600c 	strh.w	r6, [sp, #12]
 802416c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024170:	6803      	ldr	r3, [r0, #0]
 8024172:	681b      	ldr	r3, [r3, #0]
 8024174:	4798      	blx	r3
 8024176:	b005      	add	sp, #20
 8024178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802417a:	2900      	cmp	r1, #0
 802417c:	d1eb      	bne.n	8024156 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802417e:	80a2      	strh	r2, [r4, #4]
 8024180:	80c6      	strh	r6, [r0, #6]
 8024182:	60a1      	str	r1, [r4, #8]
 8024184:	81a1      	strh	r1, [r4, #12]
 8024186:	73a1      	strb	r1, [r4, #14]
 8024188:	e7e5      	b.n	8024156 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802418a:	bf00      	nop
 802418c:	0802974c 	.word	0x0802974c
 8024190:	08029774 	.word	0x08029774

08024194 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8024194:	10c9      	asrs	r1, r1, #3
 8024196:	2900      	cmp	r1, #0
 8024198:	bfb8      	it	lt
 802419a:	4249      	neglt	r1, r1
 802419c:	2801      	cmp	r0, #1
 802419e:	d108      	bne.n	80241b2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 80241a0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80241a4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80241a8:	4601      	mov	r1, r0
 80241aa:	dd02      	ble.n	80241b2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 80241ac:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 80241b0:	4770      	bx	lr
 80241b2:	29ff      	cmp	r1, #255	@ 0xff
 80241b4:	bfa8      	it	ge
 80241b6:	21ff      	movge	r1, #255	@ 0xff
 80241b8:	4608      	mov	r0, r1
 80241ba:	4770      	bx	lr

080241bc <_ZN8touchgfx10Rasterizer6lineToEii>:
 80241bc:	b410      	push	{r4}
 80241be:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80241c2:	429c      	cmp	r4, r3
 80241c4:	d803      	bhi.n	80241ce <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 80241c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80241ca:	f7f0 bbe3 	b.w	8014994 <_ZN8touchgfx7Outline6lineToEii>
 80241ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80241d2:	4770      	bx	lr

080241d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 80241d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241d8:	b08b      	sub	sp, #44	@ 0x2c
 80241da:	4606      	mov	r6, r0
 80241dc:	468a      	mov	sl, r1
 80241de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80241e2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80241e6:	9308      	str	r3, [sp, #32]
 80241e8:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80241ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80241ee:	f7f0 fd3c 	bl	8014c6a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80241f2:	68b5      	ldr	r5, [r6, #8]
 80241f4:	4604      	mov	r4, r0
 80241f6:	2d00      	cmp	r5, #0
 80241f8:	d044      	beq.n	8024284 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80241fa:	6873      	ldr	r3, [r6, #4]
 80241fc:	42ab      	cmp	r3, r5
 80241fe:	d33d      	bcc.n	802427c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8024200:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8024204:	f04f 0800 	mov.w	r8, #0
 8024208:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802420c:	eb02 0b03 	add.w	fp, r2, r3
 8024210:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8024214:	fb02 1203 	mla	r2, r2, r3, r1
 8024218:	9205      	str	r2, [sp, #20]
 802421a:	1e6a      	subs	r2, r5, #1
 802421c:	9204      	str	r2, [sp, #16]
 802421e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8024222:	f9b4 7000 	ldrsh.w	r7, [r4]
 8024226:	454b      	cmp	r3, r9
 8024228:	463a      	mov	r2, r7
 802422a:	d008      	beq.n	802423e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802422c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8024230:	eb03 0b09 	add.w	fp, r3, r9
 8024234:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8024238:	fb03 1309 	mla	r3, r3, r9, r1
 802423c:	9305      	str	r3, [sp, #20]
 802423e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8024242:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8024246:	4498      	add	r8, r3
 8024248:	9b04      	ldr	r3, [sp, #16]
 802424a:	3b01      	subs	r3, #1
 802424c:	9304      	str	r3, [sp, #16]
 802424e:	9b04      	ldr	r3, [sp, #16]
 8024250:	3301      	adds	r3, #1
 8024252:	d015      	beq.n	8024280 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8024254:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8024258:	42bb      	cmp	r3, r7
 802425a:	d117      	bne.n	802428c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802425c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8024260:	9b04      	ldr	r3, [sp, #16]
 8024262:	4548      	cmp	r0, r9
 8024264:	f103 33ff 	add.w	r3, r3, #4294967295
 8024268:	d17d      	bne.n	8024366 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802426a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802426e:	4401      	add	r1, r0
 8024270:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8024274:	4480      	add	r8, r0
 8024276:	e7e9      	b.n	802424c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8024278:	461f      	mov	r7, r3
 802427a:	e042      	b.n	8024302 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802427c:	2000      	movs	r0, #0
 802427e:	e002      	b.n	8024286 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8024280:	2900      	cmp	r1, #0
 8024282:	d16d      	bne.n	8024360 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8024284:	2001      	movs	r0, #1
 8024286:	b00b      	add	sp, #44	@ 0x2c
 8024288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802428c:	b379      	cbz	r1, 80242ee <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802428e:	2f00      	cmp	r7, #0
 8024290:	db29      	blt.n	80242e6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8024292:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8024296:	42bb      	cmp	r3, r7
 8024298:	dd25      	ble.n	80242e6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802429a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802429e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80242a2:	f7ff ff77 	bl	8024194 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80242a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242a8:	fb10 f003 	smulbb	r0, r0, r3
 80242ac:	b280      	uxth	r0, r0
 80242ae:	1c41      	adds	r1, r0, #1
 80242b0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80242b4:	1209      	asrs	r1, r1, #8
 80242b6:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80242ba:	d014      	beq.n	80242e6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80242bc:	b2c9      	uxtb	r1, r1
 80242be:	9808      	ldr	r0, [sp, #32]
 80242c0:	b2ba      	uxth	r2, r7
 80242c2:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80242c4:	9102      	str	r1, [sp, #8]
 80242c6:	2101      	movs	r1, #1
 80242c8:	4413      	add	r3, r2
 80242ca:	4402      	add	r2, r0
 80242cc:	9101      	str	r1, [sp, #4]
 80242ce:	fa0f f18b 	sxth.w	r1, fp
 80242d2:	f8da 0000 	ldr.w	r0, [sl]
 80242d6:	b21b      	sxth	r3, r3
 80242d8:	9100      	str	r1, [sp, #0]
 80242da:	b212      	sxth	r2, r2
 80242dc:	6941      	ldr	r1, [r0, #20]
 80242de:	4650      	mov	r0, sl
 80242e0:	460d      	mov	r5, r1
 80242e2:	9905      	ldr	r1, [sp, #20]
 80242e4:	47a8      	blx	r5
 80242e6:	9b04      	ldr	r3, [sp, #16]
 80242e8:	1c7a      	adds	r2, r7, #1
 80242ea:	3301      	adds	r3, #1
 80242ec:	d0ca      	beq.n	8024284 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80242ee:	f9b4 7000 	ldrsh.w	r7, [r4]
 80242f2:	1abb      	subs	r3, r7, r2
 80242f4:	2b00      	cmp	r3, #0
 80242f6:	dd31      	ble.n	802435c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80242f8:	2a00      	cmp	r2, #0
 80242fa:	dabd      	bge.n	8024278 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80242fc:	2f00      	cmp	r7, #0
 80242fe:	dd2d      	ble.n	802435c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8024300:	2200      	movs	r2, #0
 8024302:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8024306:	19d1      	adds	r1, r2, r7
 8024308:	4299      	cmp	r1, r3
 802430a:	db02      	blt.n	8024312 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802430c:	1a9f      	subs	r7, r3, r2
 802430e:	2f00      	cmp	r7, #0
 8024310:	dd24      	ble.n	802435c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8024312:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8024316:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802431a:	f7ff ff3b 	bl	8024194 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802431e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024320:	fb10 f003 	smulbb	r0, r0, r3
 8024324:	b280      	uxth	r0, r0
 8024326:	1c41      	adds	r1, r0, #1
 8024328:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802432c:	1209      	asrs	r1, r1, #8
 802432e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8024332:	d013      	beq.n	802435c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8024334:	b292      	uxth	r2, r2
 8024336:	9808      	ldr	r0, [sp, #32]
 8024338:	b2c9      	uxtb	r1, r1
 802433a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802433c:	b23f      	sxth	r7, r7
 802433e:	4413      	add	r3, r2
 8024340:	9102      	str	r1, [sp, #8]
 8024342:	4402      	add	r2, r0
 8024344:	fa0f f18b 	sxth.w	r1, fp
 8024348:	f8da 0000 	ldr.w	r0, [sl]
 802434c:	b21b      	sxth	r3, r3
 802434e:	9100      	str	r1, [sp, #0]
 8024350:	b212      	sxth	r2, r2
 8024352:	9701      	str	r7, [sp, #4]
 8024354:	9905      	ldr	r1, [sp, #20]
 8024356:	6947      	ldr	r7, [r0, #20]
 8024358:	4650      	mov	r0, sl
 802435a:	47b8      	blx	r7
 802435c:	464b      	mov	r3, r9
 802435e:	e75e      	b.n	802421e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8024360:	2f00      	cmp	r7, #0
 8024362:	da96      	bge.n	8024292 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8024364:	e78e      	b.n	8024284 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8024366:	2900      	cmp	r1, #0
 8024368:	d0f8      	beq.n	802435c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802436a:	e790      	b.n	802428e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802436c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802436c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024370:	461e      	mov	r6, r3
 8024372:	4b36      	ldr	r3, [pc, #216]	@ (802444c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8024374:	2500      	movs	r5, #0
 8024376:	f100 0814 	add.w	r8, r0, #20
 802437a:	4604      	mov	r4, r0
 802437c:	4617      	mov	r7, r2
 802437e:	e9c0 3100 	strd	r3, r1, [r0]
 8024382:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8024386:	8185      	strh	r5, [r0, #12]
 8024388:	8103      	strh	r3, [r0, #8]
 802438a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802438e:	81c5      	strh	r5, [r0, #14]
 8024390:	7283      	strb	r3, [r0, #10]
 8024392:	8205      	strh	r5, [r0, #16]
 8024394:	8245      	strh	r5, [r0, #18]
 8024396:	4640      	mov	r0, r8
 8024398:	f7ef fe42 	bl	8014020 <_ZN8touchgfx7OutlineC1Ev>
 802439c:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 80243a0:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 80243a4:	466b      	mov	r3, sp
 80243a6:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 80243aa:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 80243ae:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 80243b2:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 80243b6:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 80243ba:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 80243be:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 80243c2:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 80243c6:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 80243ca:	6830      	ldr	r0, [r6, #0]
 80243cc:	6871      	ldr	r1, [r6, #4]
 80243ce:	8872      	ldrh	r2, [r6, #2]
 80243d0:	8835      	ldrh	r5, [r6, #0]
 80243d2:	c303      	stmia	r3!, {r0, r1}
 80243d4:	887b      	ldrh	r3, [r7, #2]
 80243d6:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 80243da:	4413      	add	r3, r2
 80243dc:	883a      	ldrh	r2, [r7, #0]
 80243de:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80243e2:	442a      	add	r2, r5
 80243e4:	81e3      	strh	r3, [r4, #14]
 80243e6:	8220      	strh	r0, [r4, #16]
 80243e8:	4668      	mov	r0, sp
 80243ea:	81a2      	strh	r2, [r4, #12]
 80243ec:	8261      	strh	r1, [r4, #18]
 80243ee:	4639      	mov	r1, r7
 80243f0:	f7f2 f802 	bl	80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80243f4:	f104 000c 	add.w	r0, r4, #12
 80243f8:	f7f1 ffd6 	bl	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80243fc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8024400:	f8bd 2000 	ldrh.w	r2, [sp]
 8024404:	4640      	mov	r0, r8
 8024406:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802440a:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802440e:	f7ef fdeb 	bl	8013fe8 <_ZN8touchgfx7Outline5resetEv>
 8024412:	f9bd 3000 	ldrsh.w	r3, [sp]
 8024416:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802441a:	4620      	mov	r0, r4
 802441c:	015b      	lsls	r3, r3, #5
 802441e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8024420:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8024424:	015b      	lsls	r3, r3, #5
 8024426:	6523      	str	r3, [r4, #80]	@ 0x50
 8024428:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802442c:	015b      	lsls	r3, r3, #5
 802442e:	6563      	str	r3, [r4, #84]	@ 0x54
 8024430:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8024434:	015b      	lsls	r3, r3, #5
 8024436:	65a3      	str	r3, [r4, #88]	@ 0x58
 8024438:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802443c:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8024440:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8024444:	b002      	add	sp, #8
 8024446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802444a:	bf00      	nop
 802444c:	08029a04 	.word	0x08029a04

08024450 <_ZN8touchgfx6Canvas5closeEv>:
 8024450:	b538      	push	{r3, r4, r5, lr}
 8024452:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8024456:	4604      	mov	r4, r0
 8024458:	b193      	cbz	r3, 8024480 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802445a:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802445e:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8024462:	4213      	tst	r3, r2
 8024464:	d10c      	bne.n	8024480 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024466:	f100 0514 	add.w	r5, r0, #20
 802446a:	b123      	cbz	r3, 8024476 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802446c:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8024470:	4628      	mov	r0, r5
 8024472:	f7ff fea3 	bl	80241bc <_ZN8touchgfx10Rasterizer6lineToEii>
 8024476:	4628      	mov	r0, r5
 8024478:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802447c:	f7ff fe9e 	bl	80241bc <_ZN8touchgfx10Rasterizer6lineToEii>
 8024480:	2300      	movs	r3, #0
 8024482:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8024486:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802448a:	4298      	cmp	r0, r3
 802448c:	bf34      	ite	cc
 802448e:	2000      	movcc	r0, #0
 8024490:	2001      	movcs	r0, #1
 8024492:	bd38      	pop	{r3, r4, r5, pc}

08024494 <_ZN8touchgfx6Canvas6renderEh>:
 8024494:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024498:	7a85      	ldrb	r5, [r0, #10]
 802449a:	4604      	mov	r4, r0
 802449c:	4369      	muls	r1, r5
 802449e:	1c4d      	adds	r5, r1, #1
 80244a0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80244a4:	122d      	asrs	r5, r5, #8
 80244a6:	f000 8098 	beq.w	80245da <_ZN8touchgfx6Canvas6renderEh+0x146>
 80244aa:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 80244ae:	2b00      	cmp	r3, #0
 80244b0:	f000 8093 	beq.w	80245da <_ZN8touchgfx6Canvas6renderEh+0x146>
 80244b4:	f7ff ffcc 	bl	8024450 <_ZN8touchgfx6Canvas5closeEv>
 80244b8:	4607      	mov	r7, r0
 80244ba:	2800      	cmp	r0, #0
 80244bc:	d045      	beq.n	802454a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80244be:	6860      	ldr	r0, [r4, #4]
 80244c0:	4e47      	ldr	r6, [pc, #284]	@ (80245e0 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 80244c2:	6803      	ldr	r3, [r0, #0]
 80244c4:	6837      	ldr	r7, [r6, #0]
 80244c6:	689b      	ldr	r3, [r3, #8]
 80244c8:	4798      	blx	r3
 80244ca:	4601      	mov	r1, r0
 80244cc:	4638      	mov	r0, r7
 80244ce:	f7ed f8f1 	bl	80116b4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 80244d2:	4607      	mov	r7, r0
 80244d4:	f7df fe4a 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 80244d8:	6803      	ldr	r3, [r0, #0]
 80244da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80244dc:	4798      	blx	r3
 80244de:	4680      	mov	r8, r0
 80244e0:	f7df fe44 	bl	800416c <_ZN8touchgfx3HAL3lcdEv>
 80244e4:	6803      	ldr	r3, [r0, #0]
 80244e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80244e8:	4798      	blx	r3
 80244ea:	280b      	cmp	r0, #11
 80244ec:	d85a      	bhi.n	80245a4 <_ZN8touchgfx6Canvas6renderEh+0x110>
 80244ee:	e8df f000 	tbb	[pc, r0]
 80244f2:	5b50      	.short	0x5b50
 80244f4:	3059066b 	.word	0x3059066b
 80244f8:	64646440 	.word	0x64646440
 80244fc:	6464      	.short	0x6464
 80244fe:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8024502:	2208      	movs	r2, #8
 8024504:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024508:	fb91 f2f2 	sdiv	r2, r1, r2
 802450c:	fb08 2303 	mla	r3, r8, r3, r2
 8024510:	441f      	add	r7, r3
 8024512:	424b      	negs	r3, r1
 8024514:	f001 0107 	and.w	r1, r1, #7
 8024518:	f003 0307 	and.w	r3, r3, #7
 802451c:	bf58      	it	pl
 802451e:	4259      	negpl	r1, r3
 8024520:	b2c9      	uxtb	r1, r1
 8024522:	b2ed      	uxtb	r5, r5
 8024524:	463a      	mov	r2, r7
 8024526:	fa0f f388 	sxth.w	r3, r8
 802452a:	f104 0014 	add.w	r0, r4, #20
 802452e:	e9cd 1500 	strd	r1, r5, [sp]
 8024532:	6861      	ldr	r1, [r4, #4]
 8024534:	f7ff fe4e 	bl	80241d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8024538:	4607      	mov	r7, r0
 802453a:	6860      	ldr	r0, [r4, #4]
 802453c:	6803      	ldr	r3, [r0, #0]
 802453e:	691b      	ldr	r3, [r3, #16]
 8024540:	4798      	blx	r3
 8024542:	6830      	ldr	r0, [r6, #0]
 8024544:	6803      	ldr	r3, [r0, #0]
 8024546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024548:	4798      	blx	r3
 802454a:	4638      	mov	r0, r7
 802454c:	b002      	add	sp, #8
 802454e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024552:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8024556:	2204      	movs	r2, #4
 8024558:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802455c:	fb91 f2f2 	sdiv	r2, r1, r2
 8024560:	fb08 2303 	mla	r3, r8, r3, r2
 8024564:	441f      	add	r7, r3
 8024566:	424b      	negs	r3, r1
 8024568:	f001 0103 	and.w	r1, r1, #3
 802456c:	f003 0303 	and.w	r3, r3, #3
 8024570:	e7d4      	b.n	802451c <_ZN8touchgfx6Canvas6renderEh+0x88>
 8024572:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8024576:	2202      	movs	r2, #2
 8024578:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802457c:	2900      	cmp	r1, #0
 802457e:	fb91 f2f2 	sdiv	r2, r1, r2
 8024582:	f001 0101 	and.w	r1, r1, #1
 8024586:	fb08 2303 	mla	r3, r8, r3, r2
 802458a:	bfb8      	it	lt
 802458c:	4249      	neglt	r1, r1
 802458e:	441f      	add	r7, r3
 8024590:	e7c6      	b.n	8024520 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8024592:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802459a:	fb08 f303 	mul.w	r3, r8, r3
 802459e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80245a2:	441f      	add	r7, r3
 80245a4:	2100      	movs	r1, #0
 80245a6:	e7bc      	b.n	8024522 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 80245a8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80245ac:	2103      	movs	r1, #3
 80245ae:	fb08 f203 	mul.w	r2, r8, r3
 80245b2:	89a3      	ldrh	r3, [r4, #12]
 80245b4:	fb13 2301 	smlabb	r3, r3, r1, r2
 80245b8:	e7f3      	b.n	80245a2 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80245ba:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80245be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80245c2:	fb08 2303 	mla	r3, r8, r3, r2
 80245c6:	e7ec      	b.n	80245a2 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80245c8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80245cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80245d0:	fb08 f303 	mul.w	r3, r8, r3
 80245d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80245d8:	e7e3      	b.n	80245a2 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80245da:	2701      	movs	r7, #1
 80245dc:	e7b5      	b.n	802454a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80245de:	bf00      	nop
 80245e0:	24028e2c 	.word	0x24028e2c

080245e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80245e4:	4b06      	ldr	r3, [pc, #24]	@ (8024600 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 80245e6:	b510      	push	{r4, lr}
 80245e8:	781b      	ldrb	r3, [r3, #0]
 80245ea:	2b01      	cmp	r3, #1
 80245ec:	d107      	bne.n	80245fe <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 80245ee:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80245f2:	680b      	ldr	r3, [r1, #0]
 80245f4:	6814      	ldr	r4, [r2, #0]
 80245f6:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80245fa:	6013      	str	r3, [r2, #0]
 80245fc:	600c      	str	r4, [r1, #0]
 80245fe:	bd10      	pop	{r4, pc}
 8024600:	24028e24 	.word	0x24028e24

08024604 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8024604:	b513      	push	{r0, r1, r4, lr}
 8024606:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802460a:	4604      	mov	r4, r0
 802460c:	e9cd 2100 	strd	r2, r1, [sp]
 8024610:	b9a3      	cbnz	r3, 802463c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8024612:	466a      	mov	r2, sp
 8024614:	a901      	add	r1, sp, #4
 8024616:	4620      	mov	r0, r4
 8024618:	f7ff ffe4 	bl	80245e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802461c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802461e:	9901      	ldr	r1, [sp, #4]
 8024620:	9a00      	ldr	r2, [sp, #0]
 8024622:	1ac9      	subs	r1, r1, r3
 8024624:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024626:	1ad2      	subs	r2, r2, r3
 8024628:	9101      	str	r1, [sp, #4]
 802462a:	2a00      	cmp	r2, #0
 802462c:	9200      	str	r2, [sp, #0]
 802462e:	da0b      	bge.n	8024648 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8024630:	2301      	movs	r3, #1
 8024632:	2900      	cmp	r1, #0
 8024634:	da0e      	bge.n	8024654 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8024636:	f043 0304 	orr.w	r3, r3, #4
 802463a:	e013      	b.n	8024664 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802463c:	f7ff ff08 	bl	8024450 <_ZN8touchgfx6Canvas5closeEv>
 8024640:	2800      	cmp	r0, #0
 8024642:	d1e6      	bne.n	8024612 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8024644:	b002      	add	sp, #8
 8024646:	bd10      	pop	{r4, pc}
 8024648:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802464a:	429a      	cmp	r2, r3
 802464c:	bfac      	ite	ge
 802464e:	2302      	movge	r3, #2
 8024650:	2300      	movlt	r3, #0
 8024652:	e7ee      	b.n	8024632 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8024654:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8024656:	4281      	cmp	r1, r0
 8024658:	bfac      	ite	ge
 802465a:	2008      	movge	r0, #8
 802465c:	2000      	movlt	r0, #0
 802465e:	4318      	orrs	r0, r3
 8024660:	b2c3      	uxtb	r3, r0
 8024662:	b158      	cbz	r0, 802467c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8024664:	2200      	movs	r2, #0
 8024666:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802466a:	9901      	ldr	r1, [sp, #4]
 802466c:	9a00      	ldr	r2, [sp, #0]
 802466e:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8024670:	6722      	str	r2, [r4, #112]	@ 0x70
 8024672:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8024676:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802467a:	e7e3      	b.n	8024644 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802467c:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8024680:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8024684:	4298      	cmp	r0, r3
 8024686:	d803      	bhi.n	8024690 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8024688:	f104 0014 	add.w	r0, r4, #20
 802468c:	f7f0 f99c 	bl	80149c8 <_ZN8touchgfx7Outline6moveToEii>
 8024690:	2301      	movs	r3, #1
 8024692:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8024696:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802469a:	2300      	movs	r3, #0
 802469c:	e7e5      	b.n	802466a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802469e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802469e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80246a0:	ab02      	add	r3, sp, #8
 80246a2:	4604      	mov	r4, r0
 80246a4:	9101      	str	r1, [sp, #4]
 80246a6:	a901      	add	r1, sp, #4
 80246a8:	f843 2d08 	str.w	r2, [r3, #-8]!
 80246ac:	461a      	mov	r2, r3
 80246ae:	f7ff ff99 	bl	80245e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80246b2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80246b4:	9901      	ldr	r1, [sp, #4]
 80246b6:	9a00      	ldr	r2, [sp, #0]
 80246b8:	1ac9      	subs	r1, r1, r3
 80246ba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80246bc:	1ad2      	subs	r2, r2, r3
 80246be:	9101      	str	r1, [sp, #4]
 80246c0:	2a00      	cmp	r2, #0
 80246c2:	9200      	str	r2, [sp, #0]
 80246c4:	db1c      	blt.n	8024700 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 80246c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80246c8:	429a      	cmp	r2, r3
 80246ca:	bfac      	ite	ge
 80246cc:	2002      	movge	r0, #2
 80246ce:	2000      	movlt	r0, #0
 80246d0:	2900      	cmp	r1, #0
 80246d2:	db17      	blt.n	8024704 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80246d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80246d6:	4299      	cmp	r1, r3
 80246d8:	bfac      	ite	ge
 80246da:	2308      	movge	r3, #8
 80246dc:	2300      	movlt	r3, #0
 80246de:	4303      	orrs	r3, r0
 80246e0:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 80246e4:	b2dd      	uxtb	r5, r3
 80246e6:	b978      	cbnz	r0, 8024708 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80246e8:	f104 0014 	add.w	r0, r4, #20
 80246ec:	f7ff fd66 	bl	80241bc <_ZN8touchgfx10Rasterizer6lineToEii>
 80246f0:	9b01      	ldr	r3, [sp, #4]
 80246f2:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 80246f6:	6623      	str	r3, [r4, #96]	@ 0x60
 80246f8:	9b00      	ldr	r3, [sp, #0]
 80246fa:	6663      	str	r3, [r4, #100]	@ 0x64
 80246fc:	b002      	add	sp, #8
 80246fe:	bd70      	pop	{r4, r5, r6, pc}
 8024700:	2001      	movs	r0, #1
 8024702:	e7e5      	b.n	80246d0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8024704:	2304      	movs	r3, #4
 8024706:	e7ea      	b.n	80246de <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8024708:	b113      	cbz	r3, 8024710 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802470a:	ea10 0305 	ands.w	r3, r0, r5
 802470e:	d11c      	bne.n	802474a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8024710:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8024714:	f104 0614 	add.w	r6, r4, #20
 8024718:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802471c:	b98b      	cbnz	r3, 8024742 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802471e:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8024722:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8024726:	4298      	cmp	r0, r3
 8024728:	d802      	bhi.n	8024730 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802472a:	4630      	mov	r0, r6
 802472c:	f7f0 f94c 	bl	80149c8 <_ZN8touchgfx7Outline6moveToEii>
 8024730:	2301      	movs	r3, #1
 8024732:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8024736:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802473a:	4630      	mov	r0, r6
 802473c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8024740:	e7d4      	b.n	80246ec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8024742:	4630      	mov	r0, r6
 8024744:	f7ff fd3a 	bl	80241bc <_ZN8touchgfx10Rasterizer6lineToEii>
 8024748:	e7f7      	b.n	802473a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802474a:	461d      	mov	r5, r3
 802474c:	e7d0      	b.n	80246f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08024750 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8024750:	b538      	push	{r3, r4, r5, lr}
 8024752:	ed2d 8b10 	vpush	{d8-d15}
 8024756:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 802475a:	4605      	mov	r5, r0
 802475c:	eeb0 ca40 	vmov.f32	s24, s0
 8024760:	460c      	mov	r4, r1
 8024762:	eef0 ca60 	vmov.f32	s25, s1
 8024766:	ed9f ba57 	vldr	s22, [pc, #348]	@ 80248c4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 802476a:	eeb0 da41 	vmov.f32	s26, s2
 802476e:	eef0 da61 	vmov.f32	s27, s3
 8024772:	eeb0 ea42 	vmov.f32	s28, s4
 8024776:	eef0 ea62 	vmov.f32	s29, s5
 802477a:	eef0 aa6b 	vmov.f32	s21, s23
 802477e:	2c08      	cmp	r4, #8
 8024780:	d86e      	bhi.n	8024860 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8024782:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8024786:	ee7d 7aee 	vsub.f32	s15, s27, s29
 802478a:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802478e:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8024792:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8024796:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802479a:	ee7c faad 	vadd.f32	s31, s25, s27
 802479e:	eee6 7a07 	vfma.f32	s15, s12, s14
 80247a2:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 80247a6:	ee3d aaae 	vadd.f32	s20, s27, s29
 80247aa:	ee2f fa2b 	vmul.f32	s30, s30, s23
 80247ae:	ee6f faab 	vmul.f32	s31, s31, s23
 80247b2:	ee69 9aab 	vmul.f32	s19, s19, s23
 80247b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80247ba:	ee2a aa2b 	vmul.f32	s20, s20, s23
 80247be:	ee7f 8a29 	vadd.f32	s17, s30, s19
 80247c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247c6:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 80247ca:	ee68 8aab 	vmul.f32	s17, s17, s23
 80247ce:	bf48      	it	mi
 80247d0:	eef1 7a67 	vnegmi.f32	s15, s15
 80247d4:	ee29 9a2b 	vmul.f32	s18, s18, s23
 80247d8:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 80247dc:	eef4 7acb 	vcmpe.f32	s15, s22
 80247e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247e4:	dd3f      	ble.n	8024866 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 80247e6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80247ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80247ee:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80247f2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80247f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80247fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247fe:	d847      	bhi.n	8024890 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8024800:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8024804:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8024808:	f000 fa39 	bl	8024c7e <atan2f>
 802480c:	eeb0 8a40 	vmov.f32	s16, s0
 8024810:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8024814:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8024818:	f000 fa31 	bl	8024c7e <atan2f>
 802481c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8024820:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80248c8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8024824:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802482c:	bf48      	it	mi
 802482e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8024832:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802483a:	bfa4      	itt	ge
 802483c:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 80248cc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8024840:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8024844:	eddf 7a22 	vldr	s15, [pc, #136]	@ 80248d0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8024848:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802484c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024850:	d51e      	bpl.n	8024890 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8024852:	eef0 0a49 	vmov.f32	s1, s18
 8024856:	4628      	mov	r0, r5
 8024858:	eeb0 0a68 	vmov.f32	s0, s17
 802485c:	f7ed fdaa 	bl	80123b4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8024860:	ecbd 8b10 	vpop	{d8-d15}
 8024864:	bd38      	pop	{r3, r4, r5, pc}
 8024866:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802486a:	eeb0 7a68 	vmov.f32	s14, s17
 802486e:	eef0 6a49 	vmov.f32	s13, s18
 8024872:	eea7 7aea 	vfms.f32	s14, s15, s21
 8024876:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802487a:	eee7 6aea 	vfms.f32	s13, s15, s21
 802487e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8024882:	eee7 7a07 	vfma.f32	s15, s14, s14
 8024886:	eef4 7ac6 	vcmpe.f32	s15, s12
 802488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802488e:	d9e0      	bls.n	8024852 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8024890:	3401      	adds	r4, #1
 8024892:	eef0 0a6c 	vmov.f32	s1, s25
 8024896:	eeb0 0a4c 	vmov.f32	s0, s24
 802489a:	4628      	mov	r0, r5
 802489c:	4621      	mov	r1, r4
 802489e:	eef0 2a49 	vmov.f32	s5, s18
 80248a2:	eeb0 2a68 	vmov.f32	s4, s17
 80248a6:	eef0 1a6f 	vmov.f32	s3, s31
 80248aa:	eeb0 1a4f 	vmov.f32	s2, s30
 80248ae:	f7ff ff4f 	bl	8024750 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80248b2:	eef0 da4a 	vmov.f32	s27, s20
 80248b6:	eeb0 da69 	vmov.f32	s26, s19
 80248ba:	eef0 ca49 	vmov.f32	s25, s18
 80248be:	eeb0 ca68 	vmov.f32	s24, s17
 80248c2:	e75c      	b.n	802477e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 80248c4:	2edbe6ff 	.word	0x2edbe6ff
 80248c8:	40490fdb 	.word	0x40490fdb
 80248cc:	40c90fdb 	.word	0x40c90fdb
 80248d0:	3dcccccd 	.word	0x3dcccccd

080248d4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 80248d4:	b530      	push	{r4, r5, lr}
 80248d6:	ed2d 8b10 	vpush	{d8-d15}
 80248da:	eef0 8a40 	vmov.f32	s17, s0
 80248de:	b085      	sub	sp, #20
 80248e0:	eef0 9a60 	vmov.f32	s19, s1
 80248e4:	4604      	mov	r4, r0
 80248e6:	eef0 fa41 	vmov.f32	s31, s2
 80248ea:	460d      	mov	r5, r1
 80248ec:	eeb0 fa61 	vmov.f32	s30, s3
 80248f0:	eef0 ba42 	vmov.f32	s23, s4
 80248f4:	eeb0 ca62 	vmov.f32	s24, s5
 80248f8:	eef0 aa43 	vmov.f32	s21, s6
 80248fc:	eeb0 ba63 	vmov.f32	s22, s7
 8024900:	2d08      	cmp	r5, #8
 8024902:	f200 8113 	bhi.w	8024b2c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8024906:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802490a:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802490e:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8024912:	ee38 daaf 	vadd.f32	s26, s17, s31
 8024916:	ee26 6a27 	vmul.f32	s12, s12, s15
 802491a:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802491e:	ee2d da27 	vmul.f32	s26, s26, s15
 8024922:	ed8d 6a01 	vstr	s12, [sp, #4]
 8024926:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802492a:	ee6c caa7 	vmul.f32	s25, s25, s15
 802492e:	eeb0 ea4d 	vmov.f32	s28, s26
 8024932:	ee79 da8f 	vadd.f32	s27, s19, s30
 8024936:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802493a:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802493e:	ee66 6a27 	vmul.f32	s13, s12, s15
 8024942:	ee6d daa7 	vmul.f32	s27, s27, s15
 8024946:	edcd 6a03 	vstr	s13, [sp, #12]
 802494a:	eef0 6a6c 	vmov.f32	s13, s25
 802494e:	eef0 ea6d 	vmov.f32	s29, s27
 8024952:	ee2e ea27 	vmul.f32	s28, s28, s15
 8024956:	eee7 6a27 	vfma.f32	s13, s14, s15
 802495a:	eee7 ea27 	vfma.f32	s29, s14, s15
 802495e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8024962:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8024966:	eef0 6a67 	vmov.f32	s13, s15
 802496a:	ed8d 7a02 	vstr	s14, [sp, #8]
 802496e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8024972:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8024976:	ed9d 7a02 	vldr	s14, [sp, #8]
 802497a:	ee3e aa87 	vadd.f32	s20, s29, s14
 802497e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8024982:	ee2a aa27 	vmul.f32	s20, s20, s15
 8024986:	2d00      	cmp	r5, #0
 8024988:	f000 810b 	beq.w	8024ba2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802498c:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8024990:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8024be8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8024994:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8024998:	ee7b 7a69 	vsub.f32	s15, s22, s19
 802499c:	ee3f 6aea 	vsub.f32	s12, s31, s21
 80249a0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80249a4:	ee3b 5aea 	vsub.f32	s10, s23, s21
 80249a8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80249ac:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 80249b0:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 80249b4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80249b8:	eea5 6a27 	vfma.f32	s12, s10, s15
 80249bc:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 80249c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249c4:	bf48      	it	mi
 80249c6:	eeb1 7a47 	vnegmi.f32	s14, s14
 80249ca:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80249ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249d2:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80249d6:	bf48      	it	mi
 80249d8:	eeb1 6a46 	vnegmi.f32	s12, s12
 80249dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249e0:	f340 80a8 	ble.w	8024b34 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 80249e4:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80249e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249ec:	dd5a      	ble.n	8024aa4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 80249ee:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80249f2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80249f6:	eee7 5aa7 	vfma.f32	s11, s15, s15
 80249fa:	ee27 7a07 	vmul.f32	s14, s14, s14
 80249fe:	ee65 7a85 	vmul.f32	s15, s11, s10
 8024a02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a0a:	f200 80ca 	bhi.w	8024ba2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024a0e:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8024a12:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8024a16:	f000 f932 	bl	8024c7e <atan2f>
 8024a1a:	eeb0 8a40 	vmov.f32	s16, s0
 8024a1e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8024a22:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8024a26:	f000 f92a 	bl	8024c7e <atan2f>
 8024a2a:	ee38 fa40 	vsub.f32	s30, s16, s0
 8024a2e:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8024a32:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8024a36:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8024a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a3e:	bf48      	it	mi
 8024a40:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8024a44:	f000 f91b 	bl	8024c7e <atan2f>
 8024a48:	ee30 0a48 	vsub.f32	s0, s0, s16
 8024a4c:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8024bec <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8024a50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a58:	eeb4 fae7 	vcmpe.f32	s30, s15
 8024a5c:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8024bec <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8024a60:	bf48      	it	mi
 8024a62:	eeb1 0a40 	vnegmi.f32	s0, s0
 8024a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024a6e:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8024bf0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8024a72:	bfa4      	itt	ge
 8024a74:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8024bf4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8024a78:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8024a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a80:	bfa4      	itt	ge
 8024a82:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8024bf4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8024a86:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8024a8a:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8024a8e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a96:	f140 8084 	bpl.w	8024ba2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024a9a:	eef0 0a4a 	vmov.f32	s1, s20
 8024a9e:	eeb0 0a49 	vmov.f32	s0, s18
 8024aa2:	e040      	b.n	8024b26 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8024aa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8024aa8:	ee27 7a07 	vmul.f32	s14, s14, s14
 8024aac:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8024ab0:	ee67 7a85 	vmul.f32	s15, s15, s10
 8024ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024abc:	d871      	bhi.n	8024ba2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024abe:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8024ac2:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8024ac6:	f000 f8da 	bl	8024c7e <atan2f>
 8024aca:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8024ace:	eeb0 8a40 	vmov.f32	s16, s0
 8024ad2:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8024ad6:	f000 f8d2 	bl	8024c7e <atan2f>
 8024ada:	ee38 0a40 	vsub.f32	s0, s16, s0
 8024ade:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8024bec <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8024ae2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024aea:	bf48      	it	mi
 8024aec:	eeb1 0a40 	vnegmi.f32	s0, s0
 8024af0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024af8:	bfa4      	itt	ge
 8024afa:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8024bf4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8024afe:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8024b02:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8024bf0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8024b06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b0e:	d548      	bpl.n	8024ba2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024b10:	eef0 0a4f 	vmov.f32	s1, s30
 8024b14:	4620      	mov	r0, r4
 8024b16:	eeb0 0a6f 	vmov.f32	s0, s31
 8024b1a:	f7ed fc4b 	bl	80123b4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8024b1e:	eef0 0a4c 	vmov.f32	s1, s24
 8024b22:	eeb0 0a6b 	vmov.f32	s0, s23
 8024b26:	4620      	mov	r0, r4
 8024b28:	f7ed fc44 	bl	80123b4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8024b2c:	b005      	add	sp, #20
 8024b2e:	ecbd 8b10 	vpop	{d8-d15}
 8024b32:	bd30      	pop	{r4, r5, pc}
 8024b34:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8024be8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8024b38:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8024b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b40:	dd19      	ble.n	8024b76 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8024b42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8024b46:	ee26 7a06 	vmul.f32	s14, s12, s12
 8024b4a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8024b4e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8024b52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b5a:	d822      	bhi.n	8024ba2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024b5c:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8024b60:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8024b64:	f000 f88b 	bl	8024c7e <atan2f>
 8024b68:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8024b6c:	eeb0 8a40 	vmov.f32	s16, s0
 8024b70:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8024b74:	e7af      	b.n	8024ad6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8024b76:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8024b7a:	eeb0 7a49 	vmov.f32	s14, s18
 8024b7e:	eeb0 6a4a 	vmov.f32	s12, s20
 8024b82:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8024b86:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8024b8a:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8024b8e:	ee66 7a06 	vmul.f32	s15, s12, s12
 8024b92:	eee7 7a07 	vfma.f32	s15, s14, s14
 8024b96:	eef4 7ac5 	vcmpe.f32	s15, s10
 8024b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b9e:	f67f af7c 	bls.w	8024a9a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8024ba2:	3501      	adds	r5, #1
 8024ba4:	eef0 0a69 	vmov.f32	s1, s19
 8024ba8:	eeb0 0a68 	vmov.f32	s0, s17
 8024bac:	4620      	mov	r0, r4
 8024bae:	4629      	mov	r1, r5
 8024bb0:	eef0 3a4a 	vmov.f32	s7, s20
 8024bb4:	eeb0 3a49 	vmov.f32	s6, s18
 8024bb8:	eef0 2a6e 	vmov.f32	s5, s29
 8024bbc:	eeb0 2a4e 	vmov.f32	s4, s28
 8024bc0:	eef0 1a6d 	vmov.f32	s3, s27
 8024bc4:	eeb0 1a4d 	vmov.f32	s2, s26
 8024bc8:	f7ff fe84 	bl	80248d4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8024bcc:	eeb0 ca6c 	vmov.f32	s24, s25
 8024bd0:	eddd ba01 	vldr	s23, [sp, #4]
 8024bd4:	eef0 9a4a 	vmov.f32	s19, s20
 8024bd8:	ed9d fa02 	vldr	s30, [sp, #8]
 8024bdc:	eef0 8a49 	vmov.f32	s17, s18
 8024be0:	eddd fa03 	vldr	s31, [sp, #12]
 8024be4:	e68c      	b.n	8024900 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8024be6:	bf00      	nop
 8024be8:	2edbe6ff 	.word	0x2edbe6ff
 8024bec:	40490fdb 	.word	0x40490fdb
 8024bf0:	3dcccccd 	.word	0x3dcccccd
 8024bf4:	40c90fdb 	.word	0x40c90fdb

08024bf8 <_ZN8touchgfx6CanvasD1Ev>:
 8024bf8:	4b04      	ldr	r3, [pc, #16]	@ (8024c0c <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8024bfa:	b510      	push	{r4, lr}
 8024bfc:	4604      	mov	r4, r0
 8024bfe:	f840 3b14 	str.w	r3, [r0], #20
 8024c02:	f7ef f9e9 	bl	8013fd8 <_ZN8touchgfx7OutlineD1Ev>
 8024c06:	4620      	mov	r0, r4
 8024c08:	bd10      	pop	{r4, pc}
 8024c0a:	bf00      	nop
 8024c0c:	08029a04 	.word	0x08029a04

08024c10 <_ZN8touchgfx6CanvasD0Ev>:
 8024c10:	b510      	push	{r4, lr}
 8024c12:	4604      	mov	r4, r0
 8024c14:	f7ff fff0 	bl	8024bf8 <_ZN8touchgfx6CanvasD1Ev>
 8024c18:	2174      	movs	r1, #116	@ 0x74
 8024c1a:	4620      	mov	r0, r4
 8024c1c:	f000 f807 	bl	8024c2e <_ZdlPvj>
 8024c20:	4620      	mov	r0, r4
 8024c22:	bd10      	pop	{r4, pc}

08024c24 <__aeabi_atexit>:
 8024c24:	460b      	mov	r3, r1
 8024c26:	4601      	mov	r1, r0
 8024c28:	4618      	mov	r0, r3
 8024c2a:	f000 bc5b 	b.w	80254e4 <__cxa_atexit>

08024c2e <_ZdlPvj>:
 8024c2e:	f000 b812 	b.w	8024c56 <_ZdlPv>

08024c32 <__cxa_guard_acquire>:
 8024c32:	6802      	ldr	r2, [r0, #0]
 8024c34:	07d2      	lsls	r2, r2, #31
 8024c36:	4603      	mov	r3, r0
 8024c38:	d405      	bmi.n	8024c46 <__cxa_guard_acquire+0x14>
 8024c3a:	7842      	ldrb	r2, [r0, #1]
 8024c3c:	b102      	cbz	r2, 8024c40 <__cxa_guard_acquire+0xe>
 8024c3e:	deff      	udf	#255	@ 0xff
 8024c40:	2001      	movs	r0, #1
 8024c42:	7058      	strb	r0, [r3, #1]
 8024c44:	4770      	bx	lr
 8024c46:	2000      	movs	r0, #0
 8024c48:	4770      	bx	lr

08024c4a <__cxa_guard_release>:
 8024c4a:	2301      	movs	r3, #1
 8024c4c:	6003      	str	r3, [r0, #0]
 8024c4e:	4770      	bx	lr

08024c50 <__cxa_pure_virtual>:
 8024c50:	b508      	push	{r3, lr}
 8024c52:	f000 f80f 	bl	8024c74 <_ZSt9terminatev>

08024c56 <_ZdlPv>:
 8024c56:	f000 bb8f 	b.w	8025378 <free>

08024c5a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024c5a:	b508      	push	{r3, lr}
 8024c5c:	4780      	blx	r0
 8024c5e:	f000 fb58 	bl	8025312 <abort>
	...

08024c64 <_ZSt13get_terminatev>:
 8024c64:	4b02      	ldr	r3, [pc, #8]	@ (8024c70 <_ZSt13get_terminatev+0xc>)
 8024c66:	6818      	ldr	r0, [r3, #0]
 8024c68:	f3bf 8f5b 	dmb	ish
 8024c6c:	4770      	bx	lr
 8024c6e:	bf00      	nop
 8024c70:	240000d8 	.word	0x240000d8

08024c74 <_ZSt9terminatev>:
 8024c74:	b508      	push	{r3, lr}
 8024c76:	f7ff fff5 	bl	8024c64 <_ZSt13get_terminatev>
 8024c7a:	f7ff ffee 	bl	8024c5a <_ZN10__cxxabiv111__terminateEPFvvE>

08024c7e <atan2f>:
 8024c7e:	f000 b9cf 	b.w	8025020 <__ieee754_atan2f>
	...

08024c84 <sqrtf>:
 8024c84:	b508      	push	{r3, lr}
 8024c86:	ed2d 8b02 	vpush	{d8}
 8024c8a:	eeb0 8a40 	vmov.f32	s16, s0
 8024c8e:	f000 f9c4 	bl	802501a <__ieee754_sqrtf>
 8024c92:	eeb4 8a48 	vcmp.f32	s16, s16
 8024c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c9a:	d60c      	bvs.n	8024cb6 <sqrtf+0x32>
 8024c9c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8024cbc <sqrtf+0x38>
 8024ca0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8024ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024ca8:	d505      	bpl.n	8024cb6 <sqrtf+0x32>
 8024caa:	f000 fe89 	bl	80259c0 <__errno>
 8024cae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8024cb2:	2321      	movs	r3, #33	@ 0x21
 8024cb4:	6003      	str	r3, [r0, #0]
 8024cb6:	ecbd 8b02 	vpop	{d8}
 8024cba:	bd08      	pop	{r3, pc}
 8024cbc:	00000000 	.word	0x00000000

08024cc0 <sinf_poly>:
 8024cc0:	07cb      	lsls	r3, r1, #31
 8024cc2:	d412      	bmi.n	8024cea <sinf_poly+0x2a>
 8024cc4:	ee21 5b00 	vmul.f64	d5, d1, d0
 8024cc8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8024ccc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8024cd0:	eea6 7b01 	vfma.f64	d7, d6, d1
 8024cd4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8024cd8:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024cdc:	eea6 0b05 	vfma.f64	d0, d6, d5
 8024ce0:	eea7 0b01 	vfma.f64	d0, d7, d1
 8024ce4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024ce8:	4770      	bx	lr
 8024cea:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8024cee:	ee21 5b01 	vmul.f64	d5, d1, d1
 8024cf2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8024cf6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8024cfa:	eea1 7b06 	vfma.f64	d7, d1, d6
 8024cfe:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8024d02:	eea1 0b06 	vfma.f64	d0, d1, d6
 8024d06:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8024d0a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024d0e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8024d12:	e7e5      	b.n	8024ce0 <sinf_poly+0x20>
 8024d14:	0000      	movs	r0, r0
	...

08024d18 <sinf>:
 8024d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024d1a:	ee10 4a10 	vmov	r4, s0
 8024d1e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8024d22:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8024d26:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8024d2a:	eef0 7a40 	vmov.f32	s15, s0
 8024d2e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8024d32:	d218      	bcs.n	8024d66 <sinf+0x4e>
 8024d34:	ee26 1b06 	vmul.f64	d1, d6, d6
 8024d38:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8024d3c:	d20a      	bcs.n	8024d54 <sinf+0x3c>
 8024d3e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8024d42:	d103      	bne.n	8024d4c <sinf+0x34>
 8024d44:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8024d48:	ed8d 1a01 	vstr	s2, [sp, #4]
 8024d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8024d50:	b003      	add	sp, #12
 8024d52:	bd30      	pop	{r4, r5, pc}
 8024d54:	483a      	ldr	r0, [pc, #232]	@ (8024e40 <sinf+0x128>)
 8024d56:	eeb0 0b46 	vmov.f64	d0, d6
 8024d5a:	2100      	movs	r1, #0
 8024d5c:	b003      	add	sp, #12
 8024d5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024d62:	f7ff bfad 	b.w	8024cc0 <sinf_poly>
 8024d66:	f240 422e 	movw	r2, #1070	@ 0x42e
 8024d6a:	4293      	cmp	r3, r2
 8024d6c:	d824      	bhi.n	8024db8 <sinf+0xa0>
 8024d6e:	4b34      	ldr	r3, [pc, #208]	@ (8024e40 <sinf+0x128>)
 8024d70:	ed93 7b08 	vldr	d7, [r3, #32]
 8024d74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8024d78:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8024d7c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8024d80:	ee17 1a90 	vmov	r1, s15
 8024d84:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8024d88:	1609      	asrs	r1, r1, #24
 8024d8a:	ee07 1a90 	vmov	s15, r1
 8024d8e:	f001 0203 	and.w	r2, r1, #3
 8024d92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024d96:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8024d9a:	ed92 0b00 	vldr	d0, [r2]
 8024d9e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8024da2:	f011 0f02 	tst.w	r1, #2
 8024da6:	eea5 6b47 	vfms.f64	d6, d5, d7
 8024daa:	bf08      	it	eq
 8024dac:	4618      	moveq	r0, r3
 8024dae:	ee26 1b06 	vmul.f64	d1, d6, d6
 8024db2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8024db6:	e7d1      	b.n	8024d5c <sinf+0x44>
 8024db8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8024dbc:	d237      	bcs.n	8024e2e <sinf+0x116>
 8024dbe:	4921      	ldr	r1, [pc, #132]	@ (8024e44 <sinf+0x12c>)
 8024dc0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8024dc4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8024dc8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8024dcc:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8024dd0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8024dd4:	6a10      	ldr	r0, [r2, #32]
 8024dd6:	6912      	ldr	r2, [r2, #16]
 8024dd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8024ddc:	40ab      	lsls	r3, r5
 8024dde:	fba0 5003 	umull	r5, r0, r0, r3
 8024de2:	4359      	muls	r1, r3
 8024de4:	fbe3 0102 	umlal	r0, r1, r3, r2
 8024de8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8024dec:	0f9d      	lsrs	r5, r3, #30
 8024dee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8024df2:	1ac9      	subs	r1, r1, r3
 8024df4:	f7db fc52 	bl	800069c <__aeabi_l2d>
 8024df8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8024dfc:	4b10      	ldr	r3, [pc, #64]	@ (8024e40 <sinf+0x128>)
 8024dfe:	f004 0203 	and.w	r2, r4, #3
 8024e02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024e06:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8024e38 <sinf+0x120>
 8024e0a:	ed92 0b00 	vldr	d0, [r2]
 8024e0e:	ec41 0b17 	vmov	d7, r0, r1
 8024e12:	f014 0f02 	tst.w	r4, #2
 8024e16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024e1a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8024e1e:	4629      	mov	r1, r5
 8024e20:	bf08      	it	eq
 8024e22:	4618      	moveq	r0, r3
 8024e24:	ee27 1b07 	vmul.f64	d1, d7, d7
 8024e28:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024e2c:	e796      	b.n	8024d5c <sinf+0x44>
 8024e2e:	b003      	add	sp, #12
 8024e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024e34:	f000 b8e2 	b.w	8024ffc <__math_invalidf>
 8024e38:	54442d18 	.word	0x54442d18
 8024e3c:	3c1921fb 	.word	0x3c1921fb
 8024e40:	08029a70 	.word	0x08029a70
 8024e44:	08029a10 	.word	0x08029a10

08024e48 <sinf_poly>:
 8024e48:	07cb      	lsls	r3, r1, #31
 8024e4a:	d412      	bmi.n	8024e72 <sinf_poly+0x2a>
 8024e4c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8024e50:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8024e54:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8024e58:	eea6 7b01 	vfma.f64	d7, d6, d1
 8024e5c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8024e60:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024e64:	eea6 0b05 	vfma.f64	d0, d6, d5
 8024e68:	eea7 0b01 	vfma.f64	d0, d7, d1
 8024e6c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024e70:	4770      	bx	lr
 8024e72:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8024e76:	ee21 5b01 	vmul.f64	d5, d1, d1
 8024e7a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8024e7e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8024e82:	eea1 7b06 	vfma.f64	d7, d1, d6
 8024e86:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8024e8a:	eea1 0b06 	vfma.f64	d0, d1, d6
 8024e8e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8024e92:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024e96:	eea5 0b06 	vfma.f64	d0, d5, d6
 8024e9a:	e7e5      	b.n	8024e68 <sinf_poly+0x20>
 8024e9c:	0000      	movs	r0, r0
	...

08024ea0 <cosf>:
 8024ea0:	b538      	push	{r3, r4, r5, lr}
 8024ea2:	ee10 4a10 	vmov	r4, s0
 8024ea6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8024eaa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8024eae:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8024eb2:	d21f      	bcs.n	8024ef4 <cosf+0x54>
 8024eb4:	ee27 7b07 	vmul.f64	d7, d7, d7
 8024eb8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8024ebc:	f0c0 8082 	bcc.w	8024fc4 <cosf+0x124>
 8024ec0:	ee27 4b07 	vmul.f64	d4, d7, d7
 8024ec4:	4b44      	ldr	r3, [pc, #272]	@ (8024fd8 <cosf+0x138>)
 8024ec6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8024eca:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8024ece:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8024ed2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8024ed6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8024eda:	eea7 0b05 	vfma.f64	d0, d7, d5
 8024ede:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8024ee2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8024ee6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8024eea:	eea6 0b07 	vfma.f64	d0, d6, d7
 8024eee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024ef2:	bd38      	pop	{r3, r4, r5, pc}
 8024ef4:	f240 422e 	movw	r2, #1070	@ 0x42e
 8024ef8:	4293      	cmp	r3, r2
 8024efa:	d829      	bhi.n	8024f50 <cosf+0xb0>
 8024efc:	4b36      	ldr	r3, [pc, #216]	@ (8024fd8 <cosf+0x138>)
 8024efe:	ed93 6b08 	vldr	d6, [r3, #32]
 8024f02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8024f06:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8024f0a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8024f0e:	ee16 1a90 	vmov	r1, s13
 8024f12:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8024f16:	1609      	asrs	r1, r1, #24
 8024f18:	ee06 1a90 	vmov	s13, r1
 8024f1c:	f001 0203 	and.w	r2, r1, #3
 8024f20:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024f24:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8024f28:	ed92 0b00 	vldr	d0, [r2]
 8024f2c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8024f30:	f011 0f02 	tst.w	r1, #2
 8024f34:	f081 0101 	eor.w	r1, r1, #1
 8024f38:	eea5 7b46 	vfms.f64	d7, d5, d6
 8024f3c:	bf08      	it	eq
 8024f3e:	4618      	moveq	r0, r3
 8024f40:	ee27 1b07 	vmul.f64	d1, d7, d7
 8024f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024f48:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024f4c:	f7ff bf7c 	b.w	8024e48 <sinf_poly>
 8024f50:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8024f54:	d232      	bcs.n	8024fbc <cosf+0x11c>
 8024f56:	4921      	ldr	r1, [pc, #132]	@ (8024fdc <cosf+0x13c>)
 8024f58:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8024f5c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8024f60:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8024f64:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8024f68:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8024f6c:	6a10      	ldr	r0, [r2, #32]
 8024f6e:	6912      	ldr	r2, [r2, #16]
 8024f70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8024f74:	40ab      	lsls	r3, r5
 8024f76:	fba0 5003 	umull	r5, r0, r0, r3
 8024f7a:	4359      	muls	r1, r3
 8024f7c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8024f80:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8024f84:	0f9d      	lsrs	r5, r3, #30
 8024f86:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8024f8a:	1ac9      	subs	r1, r1, r3
 8024f8c:	f7db fb86 	bl	800069c <__aeabi_l2d>
 8024f90:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8024f94:	4b10      	ldr	r3, [pc, #64]	@ (8024fd8 <cosf+0x138>)
 8024f96:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8024fd0 <cosf+0x130>
 8024f9a:	ec41 0b17 	vmov	d7, r0, r1
 8024f9e:	f004 0203 	and.w	r2, r4, #3
 8024fa2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024fa6:	ed92 0b00 	vldr	d0, [r2]
 8024faa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024fae:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8024fb2:	f014 0f02 	tst.w	r4, #2
 8024fb6:	f085 0101 	eor.w	r1, r5, #1
 8024fba:	e7bf      	b.n	8024f3c <cosf+0x9c>
 8024fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024fc0:	f000 b81c 	b.w	8024ffc <__math_invalidf>
 8024fc4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8024fc8:	e793      	b.n	8024ef2 <cosf+0x52>
 8024fca:	bf00      	nop
 8024fcc:	f3af 8000 	nop.w
 8024fd0:	54442d18 	.word	0x54442d18
 8024fd4:	3c1921fb 	.word	0x3c1921fb
 8024fd8:	08029a70 	.word	0x08029a70
 8024fdc:	08029a10 	.word	0x08029a10

08024fe0 <with_errnof>:
 8024fe0:	b510      	push	{r4, lr}
 8024fe2:	ed2d 8b02 	vpush	{d8}
 8024fe6:	eeb0 8a40 	vmov.f32	s16, s0
 8024fea:	4604      	mov	r4, r0
 8024fec:	f000 fce8 	bl	80259c0 <__errno>
 8024ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8024ff4:	ecbd 8b02 	vpop	{d8}
 8024ff8:	6004      	str	r4, [r0, #0]
 8024ffa:	bd10      	pop	{r4, pc}

08024ffc <__math_invalidf>:
 8024ffc:	eef0 7a40 	vmov.f32	s15, s0
 8025000:	ee30 7a40 	vsub.f32	s14, s0, s0
 8025004:	eef4 7a67 	vcmp.f32	s15, s15
 8025008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802500c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8025010:	d602      	bvs.n	8025018 <__math_invalidf+0x1c>
 8025012:	2021      	movs	r0, #33	@ 0x21
 8025014:	f7ff bfe4 	b.w	8024fe0 <with_errnof>
 8025018:	4770      	bx	lr

0802501a <__ieee754_sqrtf>:
 802501a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802501e:	4770      	bx	lr

08025020 <__ieee754_atan2f>:
 8025020:	ee10 2a90 	vmov	r2, s1
 8025024:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8025028:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802502c:	b510      	push	{r4, lr}
 802502e:	eef0 7a40 	vmov.f32	s15, s0
 8025032:	d806      	bhi.n	8025042 <__ieee754_atan2f+0x22>
 8025034:	ee10 0a10 	vmov	r0, s0
 8025038:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802503c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8025040:	d904      	bls.n	802504c <__ieee754_atan2f+0x2c>
 8025042:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8025046:	eeb0 0a67 	vmov.f32	s0, s15
 802504a:	bd10      	pop	{r4, pc}
 802504c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8025050:	d103      	bne.n	802505a <__ieee754_atan2f+0x3a>
 8025052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025056:	f000 b881 	b.w	802515c <atanf>
 802505a:	1794      	asrs	r4, r2, #30
 802505c:	f004 0402 	and.w	r4, r4, #2
 8025060:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8025064:	b93b      	cbnz	r3, 8025076 <__ieee754_atan2f+0x56>
 8025066:	2c02      	cmp	r4, #2
 8025068:	d05c      	beq.n	8025124 <__ieee754_atan2f+0x104>
 802506a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8025138 <__ieee754_atan2f+0x118>
 802506e:	2c03      	cmp	r4, #3
 8025070:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8025074:	e7e7      	b.n	8025046 <__ieee754_atan2f+0x26>
 8025076:	b939      	cbnz	r1, 8025088 <__ieee754_atan2f+0x68>
 8025078:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802513c <__ieee754_atan2f+0x11c>
 802507c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8025140 <__ieee754_atan2f+0x120>
 8025080:	2800      	cmp	r0, #0
 8025082:	fe67 7a87 	vselge.f32	s15, s15, s14
 8025086:	e7de      	b.n	8025046 <__ieee754_atan2f+0x26>
 8025088:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802508c:	d110      	bne.n	80250b0 <__ieee754_atan2f+0x90>
 802508e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8025092:	f104 34ff 	add.w	r4, r4, #4294967295
 8025096:	d107      	bne.n	80250a8 <__ieee754_atan2f+0x88>
 8025098:	2c02      	cmp	r4, #2
 802509a:	d846      	bhi.n	802512a <__ieee754_atan2f+0x10a>
 802509c:	4b29      	ldr	r3, [pc, #164]	@ (8025144 <__ieee754_atan2f+0x124>)
 802509e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80250a2:	edd3 7a00 	vldr	s15, [r3]
 80250a6:	e7ce      	b.n	8025046 <__ieee754_atan2f+0x26>
 80250a8:	2c02      	cmp	r4, #2
 80250aa:	d841      	bhi.n	8025130 <__ieee754_atan2f+0x110>
 80250ac:	4b26      	ldr	r3, [pc, #152]	@ (8025148 <__ieee754_atan2f+0x128>)
 80250ae:	e7f6      	b.n	802509e <__ieee754_atan2f+0x7e>
 80250b0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80250b4:	d0e0      	beq.n	8025078 <__ieee754_atan2f+0x58>
 80250b6:	1a5b      	subs	r3, r3, r1
 80250b8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80250bc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80250c0:	da1a      	bge.n	80250f8 <__ieee754_atan2f+0xd8>
 80250c2:	2a00      	cmp	r2, #0
 80250c4:	da01      	bge.n	80250ca <__ieee754_atan2f+0xaa>
 80250c6:	313c      	adds	r1, #60	@ 0x3c
 80250c8:	db19      	blt.n	80250fe <__ieee754_atan2f+0xde>
 80250ca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80250ce:	f000 f919 	bl	8025304 <fabsf>
 80250d2:	f000 f843 	bl	802515c <atanf>
 80250d6:	eef0 7a40 	vmov.f32	s15, s0
 80250da:	2c01      	cmp	r4, #1
 80250dc:	d012      	beq.n	8025104 <__ieee754_atan2f+0xe4>
 80250de:	2c02      	cmp	r4, #2
 80250e0:	d017      	beq.n	8025112 <__ieee754_atan2f+0xf2>
 80250e2:	2c00      	cmp	r4, #0
 80250e4:	d0af      	beq.n	8025046 <__ieee754_atan2f+0x26>
 80250e6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802514c <__ieee754_atan2f+0x12c>
 80250ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80250ee:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8025150 <__ieee754_atan2f+0x130>
 80250f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80250f6:	e7a6      	b.n	8025046 <__ieee754_atan2f+0x26>
 80250f8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802513c <__ieee754_atan2f+0x11c>
 80250fc:	e7ed      	b.n	80250da <__ieee754_atan2f+0xba>
 80250fe:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8025154 <__ieee754_atan2f+0x134>
 8025102:	e7ea      	b.n	80250da <__ieee754_atan2f+0xba>
 8025104:	ee17 3a90 	vmov	r3, s15
 8025108:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802510c:	ee07 3a90 	vmov	s15, r3
 8025110:	e799      	b.n	8025046 <__ieee754_atan2f+0x26>
 8025112:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802514c <__ieee754_atan2f+0x12c>
 8025116:	ee77 7a87 	vadd.f32	s15, s15, s14
 802511a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8025150 <__ieee754_atan2f+0x130>
 802511e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025122:	e790      	b.n	8025046 <__ieee754_atan2f+0x26>
 8025124:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8025150 <__ieee754_atan2f+0x130>
 8025128:	e78d      	b.n	8025046 <__ieee754_atan2f+0x26>
 802512a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8025158 <__ieee754_atan2f+0x138>
 802512e:	e78a      	b.n	8025046 <__ieee754_atan2f+0x26>
 8025130:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8025154 <__ieee754_atan2f+0x134>
 8025134:	e787      	b.n	8025046 <__ieee754_atan2f+0x26>
 8025136:	bf00      	nop
 8025138:	c0490fdb 	.word	0xc0490fdb
 802513c:	3fc90fdb 	.word	0x3fc90fdb
 8025140:	bfc90fdb 	.word	0xbfc90fdb
 8025144:	08029b5c 	.word	0x08029b5c
 8025148:	08029b50 	.word	0x08029b50
 802514c:	33bbbd2e 	.word	0x33bbbd2e
 8025150:	40490fdb 	.word	0x40490fdb
 8025154:	00000000 	.word	0x00000000
 8025158:	3f490fdb 	.word	0x3f490fdb

0802515c <atanf>:
 802515c:	b538      	push	{r3, r4, r5, lr}
 802515e:	ee10 5a10 	vmov	r5, s0
 8025162:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8025166:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802516a:	eef0 7a40 	vmov.f32	s15, s0
 802516e:	d30f      	bcc.n	8025190 <atanf+0x34>
 8025170:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8025174:	d904      	bls.n	8025180 <atanf+0x24>
 8025176:	ee70 7a00 	vadd.f32	s15, s0, s0
 802517a:	eeb0 0a67 	vmov.f32	s0, s15
 802517e:	bd38      	pop	{r3, r4, r5, pc}
 8025180:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80252b8 <atanf+0x15c>
 8025184:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80252bc <atanf+0x160>
 8025188:	2d00      	cmp	r5, #0
 802518a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802518e:	e7f4      	b.n	802517a <atanf+0x1e>
 8025190:	4b4b      	ldr	r3, [pc, #300]	@ (80252c0 <atanf+0x164>)
 8025192:	429c      	cmp	r4, r3
 8025194:	d810      	bhi.n	80251b8 <atanf+0x5c>
 8025196:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802519a:	d20a      	bcs.n	80251b2 <atanf+0x56>
 802519c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80252c4 <atanf+0x168>
 80251a0:	ee30 7a07 	vadd.f32	s14, s0, s14
 80251a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80251a8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80251ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80251b0:	dce3      	bgt.n	802517a <atanf+0x1e>
 80251b2:	f04f 33ff 	mov.w	r3, #4294967295
 80251b6:	e013      	b.n	80251e0 <atanf+0x84>
 80251b8:	f000 f8a4 	bl	8025304 <fabsf>
 80251bc:	4b42      	ldr	r3, [pc, #264]	@ (80252c8 <atanf+0x16c>)
 80251be:	429c      	cmp	r4, r3
 80251c0:	d84f      	bhi.n	8025262 <atanf+0x106>
 80251c2:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80251c6:	429c      	cmp	r4, r3
 80251c8:	d841      	bhi.n	802524e <atanf+0xf2>
 80251ca:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80251ce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80251d2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80251d6:	2300      	movs	r3, #0
 80251d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80251dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80251e0:	1c5a      	adds	r2, r3, #1
 80251e2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80251e6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80252cc <atanf+0x170>
 80251ea:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80252d0 <atanf+0x174>
 80251ee:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 80252d4 <atanf+0x178>
 80251f2:	ee66 6a06 	vmul.f32	s13, s12, s12
 80251f6:	eee6 5a87 	vfma.f32	s11, s13, s14
 80251fa:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80252d8 <atanf+0x17c>
 80251fe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025202:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80252dc <atanf+0x180>
 8025206:	eee7 5a26 	vfma.f32	s11, s14, s13
 802520a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80252e0 <atanf+0x184>
 802520e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025212:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80252e4 <atanf+0x188>
 8025216:	eee7 5a26 	vfma.f32	s11, s14, s13
 802521a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80252e8 <atanf+0x18c>
 802521e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8025222:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80252ec <atanf+0x190>
 8025226:	eea5 7a26 	vfma.f32	s14, s10, s13
 802522a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80252f0 <atanf+0x194>
 802522e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8025232:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80252f4 <atanf+0x198>
 8025236:	eea5 7a26 	vfma.f32	s14, s10, s13
 802523a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802523e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8025242:	ee27 7a87 	vmul.f32	s14, s15, s14
 8025246:	d121      	bne.n	802528c <atanf+0x130>
 8025248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802524c:	e795      	b.n	802517a <atanf+0x1e>
 802524e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8025252:	ee30 7a67 	vsub.f32	s14, s0, s15
 8025256:	ee30 0a27 	vadd.f32	s0, s0, s15
 802525a:	2301      	movs	r3, #1
 802525c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025260:	e7be      	b.n	80251e0 <atanf+0x84>
 8025262:	4b25      	ldr	r3, [pc, #148]	@ (80252f8 <atanf+0x19c>)
 8025264:	429c      	cmp	r4, r3
 8025266:	d80b      	bhi.n	8025280 <atanf+0x124>
 8025268:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802526c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025270:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025274:	2302      	movs	r3, #2
 8025276:	ee70 6a67 	vsub.f32	s13, s0, s15
 802527a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802527e:	e7af      	b.n	80251e0 <atanf+0x84>
 8025280:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8025284:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025288:	2303      	movs	r3, #3
 802528a:	e7a9      	b.n	80251e0 <atanf+0x84>
 802528c:	4a1b      	ldr	r2, [pc, #108]	@ (80252fc <atanf+0x1a0>)
 802528e:	491c      	ldr	r1, [pc, #112]	@ (8025300 <atanf+0x1a4>)
 8025290:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8025294:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8025298:	edd3 6a00 	vldr	s13, [r3]
 802529c:	ee37 7a66 	vsub.f32	s14, s14, s13
 80252a0:	2d00      	cmp	r5, #0
 80252a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80252a6:	edd2 7a00 	vldr	s15, [r2]
 80252aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80252ae:	bfb8      	it	lt
 80252b0:	eef1 7a67 	vneglt.f32	s15, s15
 80252b4:	e761      	b.n	802517a <atanf+0x1e>
 80252b6:	bf00      	nop
 80252b8:	bfc90fdb 	.word	0xbfc90fdb
 80252bc:	3fc90fdb 	.word	0x3fc90fdb
 80252c0:	3edfffff 	.word	0x3edfffff
 80252c4:	7149f2ca 	.word	0x7149f2ca
 80252c8:	3f97ffff 	.word	0x3f97ffff
 80252cc:	3c8569d7 	.word	0x3c8569d7
 80252d0:	3d4bda59 	.word	0x3d4bda59
 80252d4:	bd6ef16b 	.word	0xbd6ef16b
 80252d8:	3d886b35 	.word	0x3d886b35
 80252dc:	3dba2e6e 	.word	0x3dba2e6e
 80252e0:	3e124925 	.word	0x3e124925
 80252e4:	3eaaaaab 	.word	0x3eaaaaab
 80252e8:	bd15a221 	.word	0xbd15a221
 80252ec:	bd9d8795 	.word	0xbd9d8795
 80252f0:	bde38e38 	.word	0xbde38e38
 80252f4:	be4ccccd 	.word	0xbe4ccccd
 80252f8:	401bffff 	.word	0x401bffff
 80252fc:	08029b78 	.word	0x08029b78
 8025300:	08029b68 	.word	0x08029b68

08025304 <fabsf>:
 8025304:	ee10 3a10 	vmov	r3, s0
 8025308:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802530c:	ee00 3a10 	vmov	s0, r3
 8025310:	4770      	bx	lr

08025312 <abort>:
 8025312:	b508      	push	{r3, lr}
 8025314:	2006      	movs	r0, #6
 8025316:	f000 fae1 	bl	80258dc <raise>
 802531a:	2001      	movs	r0, #1
 802531c:	f7dc fc5e 	bl	8001bdc <_exit>

08025320 <__assert_func>:
 8025320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025322:	4614      	mov	r4, r2
 8025324:	461a      	mov	r2, r3
 8025326:	4b09      	ldr	r3, [pc, #36]	@ (802534c <__assert_func+0x2c>)
 8025328:	681b      	ldr	r3, [r3, #0]
 802532a:	4605      	mov	r5, r0
 802532c:	68d8      	ldr	r0, [r3, #12]
 802532e:	b954      	cbnz	r4, 8025346 <__assert_func+0x26>
 8025330:	4b07      	ldr	r3, [pc, #28]	@ (8025350 <__assert_func+0x30>)
 8025332:	461c      	mov	r4, r3
 8025334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025338:	9100      	str	r1, [sp, #0]
 802533a:	462b      	mov	r3, r5
 802533c:	4905      	ldr	r1, [pc, #20]	@ (8025354 <__assert_func+0x34>)
 802533e:	f000 f983 	bl	8025648 <fiprintf>
 8025342:	f7ff ffe6 	bl	8025312 <abort>
 8025346:	4b04      	ldr	r3, [pc, #16]	@ (8025358 <__assert_func+0x38>)
 8025348:	e7f4      	b.n	8025334 <__assert_func+0x14>
 802534a:	bf00      	nop
 802534c:	240000e8 	.word	0x240000e8
 8025350:	08029bc3 	.word	0x08029bc3
 8025354:	08029b95 	.word	0x08029b95
 8025358:	08029b88 	.word	0x08029b88

0802535c <atexit>:
 802535c:	2300      	movs	r3, #0
 802535e:	4601      	mov	r1, r0
 8025360:	461a      	mov	r2, r3
 8025362:	4618      	mov	r0, r3
 8025364:	f000 bb68 	b.w	8025a38 <__register_exitproc>

08025368 <malloc>:
 8025368:	4b02      	ldr	r3, [pc, #8]	@ (8025374 <malloc+0xc>)
 802536a:	4601      	mov	r1, r0
 802536c:	6818      	ldr	r0, [r3, #0]
 802536e:	f000 b82d 	b.w	80253cc <_malloc_r>
 8025372:	bf00      	nop
 8025374:	240000e8 	.word	0x240000e8

08025378 <free>:
 8025378:	4b02      	ldr	r3, [pc, #8]	@ (8025384 <free+0xc>)
 802537a:	4601      	mov	r1, r0
 802537c:	6818      	ldr	r0, [r3, #0]
 802537e:	f000 bbb7 	b.w	8025af0 <_free_r>
 8025382:	bf00      	nop
 8025384:	240000e8 	.word	0x240000e8

08025388 <sbrk_aligned>:
 8025388:	b570      	push	{r4, r5, r6, lr}
 802538a:	4e0f      	ldr	r6, [pc, #60]	@ (80253c8 <sbrk_aligned+0x40>)
 802538c:	460c      	mov	r4, r1
 802538e:	6831      	ldr	r1, [r6, #0]
 8025390:	4605      	mov	r5, r0
 8025392:	b911      	cbnz	r1, 802539a <sbrk_aligned+0x12>
 8025394:	f000 faf2 	bl	802597c <_sbrk_r>
 8025398:	6030      	str	r0, [r6, #0]
 802539a:	4621      	mov	r1, r4
 802539c:	4628      	mov	r0, r5
 802539e:	f000 faed 	bl	802597c <_sbrk_r>
 80253a2:	1c43      	adds	r3, r0, #1
 80253a4:	d103      	bne.n	80253ae <sbrk_aligned+0x26>
 80253a6:	f04f 34ff 	mov.w	r4, #4294967295
 80253aa:	4620      	mov	r0, r4
 80253ac:	bd70      	pop	{r4, r5, r6, pc}
 80253ae:	1cc4      	adds	r4, r0, #3
 80253b0:	f024 0403 	bic.w	r4, r4, #3
 80253b4:	42a0      	cmp	r0, r4
 80253b6:	d0f8      	beq.n	80253aa <sbrk_aligned+0x22>
 80253b8:	1a21      	subs	r1, r4, r0
 80253ba:	4628      	mov	r0, r5
 80253bc:	f000 fade 	bl	802597c <_sbrk_r>
 80253c0:	3001      	adds	r0, #1
 80253c2:	d1f2      	bne.n	80253aa <sbrk_aligned+0x22>
 80253c4:	e7ef      	b.n	80253a6 <sbrk_aligned+0x1e>
 80253c6:	bf00      	nop
 80253c8:	24029868 	.word	0x24029868

080253cc <_malloc_r>:
 80253cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80253d0:	1ccd      	adds	r5, r1, #3
 80253d2:	f025 0503 	bic.w	r5, r5, #3
 80253d6:	3508      	adds	r5, #8
 80253d8:	2d0c      	cmp	r5, #12
 80253da:	bf38      	it	cc
 80253dc:	250c      	movcc	r5, #12
 80253de:	2d00      	cmp	r5, #0
 80253e0:	4606      	mov	r6, r0
 80253e2:	db01      	blt.n	80253e8 <_malloc_r+0x1c>
 80253e4:	42a9      	cmp	r1, r5
 80253e6:	d904      	bls.n	80253f2 <_malloc_r+0x26>
 80253e8:	230c      	movs	r3, #12
 80253ea:	6033      	str	r3, [r6, #0]
 80253ec:	2000      	movs	r0, #0
 80253ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80253f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80254c8 <_malloc_r+0xfc>
 80253f6:	f000 f869 	bl	80254cc <__malloc_lock>
 80253fa:	f8d8 3000 	ldr.w	r3, [r8]
 80253fe:	461c      	mov	r4, r3
 8025400:	bb44      	cbnz	r4, 8025454 <_malloc_r+0x88>
 8025402:	4629      	mov	r1, r5
 8025404:	4630      	mov	r0, r6
 8025406:	f7ff ffbf 	bl	8025388 <sbrk_aligned>
 802540a:	1c43      	adds	r3, r0, #1
 802540c:	4604      	mov	r4, r0
 802540e:	d158      	bne.n	80254c2 <_malloc_r+0xf6>
 8025410:	f8d8 4000 	ldr.w	r4, [r8]
 8025414:	4627      	mov	r7, r4
 8025416:	2f00      	cmp	r7, #0
 8025418:	d143      	bne.n	80254a2 <_malloc_r+0xd6>
 802541a:	2c00      	cmp	r4, #0
 802541c:	d04b      	beq.n	80254b6 <_malloc_r+0xea>
 802541e:	6823      	ldr	r3, [r4, #0]
 8025420:	4639      	mov	r1, r7
 8025422:	4630      	mov	r0, r6
 8025424:	eb04 0903 	add.w	r9, r4, r3
 8025428:	f000 faa8 	bl	802597c <_sbrk_r>
 802542c:	4581      	cmp	r9, r0
 802542e:	d142      	bne.n	80254b6 <_malloc_r+0xea>
 8025430:	6821      	ldr	r1, [r4, #0]
 8025432:	1a6d      	subs	r5, r5, r1
 8025434:	4629      	mov	r1, r5
 8025436:	4630      	mov	r0, r6
 8025438:	f7ff ffa6 	bl	8025388 <sbrk_aligned>
 802543c:	3001      	adds	r0, #1
 802543e:	d03a      	beq.n	80254b6 <_malloc_r+0xea>
 8025440:	6823      	ldr	r3, [r4, #0]
 8025442:	442b      	add	r3, r5
 8025444:	6023      	str	r3, [r4, #0]
 8025446:	f8d8 3000 	ldr.w	r3, [r8]
 802544a:	685a      	ldr	r2, [r3, #4]
 802544c:	bb62      	cbnz	r2, 80254a8 <_malloc_r+0xdc>
 802544e:	f8c8 7000 	str.w	r7, [r8]
 8025452:	e00f      	b.n	8025474 <_malloc_r+0xa8>
 8025454:	6822      	ldr	r2, [r4, #0]
 8025456:	1b52      	subs	r2, r2, r5
 8025458:	d420      	bmi.n	802549c <_malloc_r+0xd0>
 802545a:	2a0b      	cmp	r2, #11
 802545c:	d917      	bls.n	802548e <_malloc_r+0xc2>
 802545e:	1961      	adds	r1, r4, r5
 8025460:	42a3      	cmp	r3, r4
 8025462:	6025      	str	r5, [r4, #0]
 8025464:	bf18      	it	ne
 8025466:	6059      	strne	r1, [r3, #4]
 8025468:	6863      	ldr	r3, [r4, #4]
 802546a:	bf08      	it	eq
 802546c:	f8c8 1000 	streq.w	r1, [r8]
 8025470:	5162      	str	r2, [r4, r5]
 8025472:	604b      	str	r3, [r1, #4]
 8025474:	4630      	mov	r0, r6
 8025476:	f000 f82f 	bl	80254d8 <__malloc_unlock>
 802547a:	f104 000b 	add.w	r0, r4, #11
 802547e:	1d23      	adds	r3, r4, #4
 8025480:	f020 0007 	bic.w	r0, r0, #7
 8025484:	1ac2      	subs	r2, r0, r3
 8025486:	bf1c      	itt	ne
 8025488:	1a1b      	subne	r3, r3, r0
 802548a:	50a3      	strne	r3, [r4, r2]
 802548c:	e7af      	b.n	80253ee <_malloc_r+0x22>
 802548e:	6862      	ldr	r2, [r4, #4]
 8025490:	42a3      	cmp	r3, r4
 8025492:	bf0c      	ite	eq
 8025494:	f8c8 2000 	streq.w	r2, [r8]
 8025498:	605a      	strne	r2, [r3, #4]
 802549a:	e7eb      	b.n	8025474 <_malloc_r+0xa8>
 802549c:	4623      	mov	r3, r4
 802549e:	6864      	ldr	r4, [r4, #4]
 80254a0:	e7ae      	b.n	8025400 <_malloc_r+0x34>
 80254a2:	463c      	mov	r4, r7
 80254a4:	687f      	ldr	r7, [r7, #4]
 80254a6:	e7b6      	b.n	8025416 <_malloc_r+0x4a>
 80254a8:	461a      	mov	r2, r3
 80254aa:	685b      	ldr	r3, [r3, #4]
 80254ac:	42a3      	cmp	r3, r4
 80254ae:	d1fb      	bne.n	80254a8 <_malloc_r+0xdc>
 80254b0:	2300      	movs	r3, #0
 80254b2:	6053      	str	r3, [r2, #4]
 80254b4:	e7de      	b.n	8025474 <_malloc_r+0xa8>
 80254b6:	230c      	movs	r3, #12
 80254b8:	6033      	str	r3, [r6, #0]
 80254ba:	4630      	mov	r0, r6
 80254bc:	f000 f80c 	bl	80254d8 <__malloc_unlock>
 80254c0:	e794      	b.n	80253ec <_malloc_r+0x20>
 80254c2:	6005      	str	r5, [r0, #0]
 80254c4:	e7d6      	b.n	8025474 <_malloc_r+0xa8>
 80254c6:	bf00      	nop
 80254c8:	2402986c 	.word	0x2402986c

080254cc <__malloc_lock>:
 80254cc:	4801      	ldr	r0, [pc, #4]	@ (80254d4 <__malloc_lock+0x8>)
 80254ce:	f000 baa2 	b.w	8025a16 <__retarget_lock_acquire_recursive>
 80254d2:	bf00      	nop
 80254d4:	240299b0 	.word	0x240299b0

080254d8 <__malloc_unlock>:
 80254d8:	4801      	ldr	r0, [pc, #4]	@ (80254e0 <__malloc_unlock+0x8>)
 80254da:	f000 ba9d 	b.w	8025a18 <__retarget_lock_release_recursive>
 80254de:	bf00      	nop
 80254e0:	240299b0 	.word	0x240299b0

080254e4 <__cxa_atexit>:
 80254e4:	b510      	push	{r4, lr}
 80254e6:	4604      	mov	r4, r0
 80254e8:	4804      	ldr	r0, [pc, #16]	@ (80254fc <__cxa_atexit+0x18>)
 80254ea:	4613      	mov	r3, r2
 80254ec:	b120      	cbz	r0, 80254f8 <__cxa_atexit+0x14>
 80254ee:	460a      	mov	r2, r1
 80254f0:	2002      	movs	r0, #2
 80254f2:	4621      	mov	r1, r4
 80254f4:	f000 faa0 	bl	8025a38 <__register_exitproc>
 80254f8:	bd10      	pop	{r4, pc}
 80254fa:	bf00      	nop
 80254fc:	08025a39 	.word	0x08025a39

08025500 <std>:
 8025500:	2300      	movs	r3, #0
 8025502:	b510      	push	{r4, lr}
 8025504:	4604      	mov	r4, r0
 8025506:	e9c0 3300 	strd	r3, r3, [r0]
 802550a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802550e:	6083      	str	r3, [r0, #8]
 8025510:	8181      	strh	r1, [r0, #12]
 8025512:	6643      	str	r3, [r0, #100]	@ 0x64
 8025514:	81c2      	strh	r2, [r0, #14]
 8025516:	6183      	str	r3, [r0, #24]
 8025518:	4619      	mov	r1, r3
 802551a:	2208      	movs	r2, #8
 802551c:	305c      	adds	r0, #92	@ 0x5c
 802551e:	f000 f99b 	bl	8025858 <memset>
 8025522:	4b0d      	ldr	r3, [pc, #52]	@ (8025558 <std+0x58>)
 8025524:	6263      	str	r3, [r4, #36]	@ 0x24
 8025526:	4b0d      	ldr	r3, [pc, #52]	@ (802555c <std+0x5c>)
 8025528:	62a3      	str	r3, [r4, #40]	@ 0x28
 802552a:	4b0d      	ldr	r3, [pc, #52]	@ (8025560 <std+0x60>)
 802552c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802552e:	4b0d      	ldr	r3, [pc, #52]	@ (8025564 <std+0x64>)
 8025530:	6323      	str	r3, [r4, #48]	@ 0x30
 8025532:	4b0d      	ldr	r3, [pc, #52]	@ (8025568 <std+0x68>)
 8025534:	6224      	str	r4, [r4, #32]
 8025536:	429c      	cmp	r4, r3
 8025538:	d006      	beq.n	8025548 <std+0x48>
 802553a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802553e:	4294      	cmp	r4, r2
 8025540:	d002      	beq.n	8025548 <std+0x48>
 8025542:	33d0      	adds	r3, #208	@ 0xd0
 8025544:	429c      	cmp	r4, r3
 8025546:	d105      	bne.n	8025554 <std+0x54>
 8025548:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802554c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025550:	f000 ba60 	b.w	8025a14 <__retarget_lock_init_recursive>
 8025554:	bd10      	pop	{r4, pc}
 8025556:	bf00      	nop
 8025558:	080256a9 	.word	0x080256a9
 802555c:	080256cb 	.word	0x080256cb
 8025560:	08025703 	.word	0x08025703
 8025564:	08025727 	.word	0x08025727
 8025568:	24029870 	.word	0x24029870

0802556c <stdio_exit_handler>:
 802556c:	4a02      	ldr	r2, [pc, #8]	@ (8025578 <stdio_exit_handler+0xc>)
 802556e:	4903      	ldr	r1, [pc, #12]	@ (802557c <stdio_exit_handler+0x10>)
 8025570:	4803      	ldr	r0, [pc, #12]	@ (8025580 <stdio_exit_handler+0x14>)
 8025572:	f000 b87b 	b.w	802566c <_fwalk_sglue>
 8025576:	bf00      	nop
 8025578:	240000dc 	.word	0x240000dc
 802557c:	0802622d 	.word	0x0802622d
 8025580:	240000ec 	.word	0x240000ec

08025584 <cleanup_stdio>:
 8025584:	6841      	ldr	r1, [r0, #4]
 8025586:	4b0c      	ldr	r3, [pc, #48]	@ (80255b8 <cleanup_stdio+0x34>)
 8025588:	4299      	cmp	r1, r3
 802558a:	b510      	push	{r4, lr}
 802558c:	4604      	mov	r4, r0
 802558e:	d001      	beq.n	8025594 <cleanup_stdio+0x10>
 8025590:	f000 fe4c 	bl	802622c <_fflush_r>
 8025594:	68a1      	ldr	r1, [r4, #8]
 8025596:	4b09      	ldr	r3, [pc, #36]	@ (80255bc <cleanup_stdio+0x38>)
 8025598:	4299      	cmp	r1, r3
 802559a:	d002      	beq.n	80255a2 <cleanup_stdio+0x1e>
 802559c:	4620      	mov	r0, r4
 802559e:	f000 fe45 	bl	802622c <_fflush_r>
 80255a2:	68e1      	ldr	r1, [r4, #12]
 80255a4:	4b06      	ldr	r3, [pc, #24]	@ (80255c0 <cleanup_stdio+0x3c>)
 80255a6:	4299      	cmp	r1, r3
 80255a8:	d004      	beq.n	80255b4 <cleanup_stdio+0x30>
 80255aa:	4620      	mov	r0, r4
 80255ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80255b0:	f000 be3c 	b.w	802622c <_fflush_r>
 80255b4:	bd10      	pop	{r4, pc}
 80255b6:	bf00      	nop
 80255b8:	24029870 	.word	0x24029870
 80255bc:	240298d8 	.word	0x240298d8
 80255c0:	24029940 	.word	0x24029940

080255c4 <global_stdio_init.part.0>:
 80255c4:	b510      	push	{r4, lr}
 80255c6:	4b0b      	ldr	r3, [pc, #44]	@ (80255f4 <global_stdio_init.part.0+0x30>)
 80255c8:	4c0b      	ldr	r4, [pc, #44]	@ (80255f8 <global_stdio_init.part.0+0x34>)
 80255ca:	4a0c      	ldr	r2, [pc, #48]	@ (80255fc <global_stdio_init.part.0+0x38>)
 80255cc:	601a      	str	r2, [r3, #0]
 80255ce:	4620      	mov	r0, r4
 80255d0:	2200      	movs	r2, #0
 80255d2:	2104      	movs	r1, #4
 80255d4:	f7ff ff94 	bl	8025500 <std>
 80255d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80255dc:	2201      	movs	r2, #1
 80255de:	2109      	movs	r1, #9
 80255e0:	f7ff ff8e 	bl	8025500 <std>
 80255e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80255e8:	2202      	movs	r2, #2
 80255ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80255ee:	2112      	movs	r1, #18
 80255f0:	f7ff bf86 	b.w	8025500 <std>
 80255f4:	240299a8 	.word	0x240299a8
 80255f8:	24029870 	.word	0x24029870
 80255fc:	0802556d 	.word	0x0802556d

08025600 <__sfp_lock_acquire>:
 8025600:	4801      	ldr	r0, [pc, #4]	@ (8025608 <__sfp_lock_acquire+0x8>)
 8025602:	f000 ba08 	b.w	8025a16 <__retarget_lock_acquire_recursive>
 8025606:	bf00      	nop
 8025608:	240299b2 	.word	0x240299b2

0802560c <__sfp_lock_release>:
 802560c:	4801      	ldr	r0, [pc, #4]	@ (8025614 <__sfp_lock_release+0x8>)
 802560e:	f000 ba03 	b.w	8025a18 <__retarget_lock_release_recursive>
 8025612:	bf00      	nop
 8025614:	240299b2 	.word	0x240299b2

08025618 <__sinit>:
 8025618:	b510      	push	{r4, lr}
 802561a:	4604      	mov	r4, r0
 802561c:	f7ff fff0 	bl	8025600 <__sfp_lock_acquire>
 8025620:	6a23      	ldr	r3, [r4, #32]
 8025622:	b11b      	cbz	r3, 802562c <__sinit+0x14>
 8025624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025628:	f7ff bff0 	b.w	802560c <__sfp_lock_release>
 802562c:	4b04      	ldr	r3, [pc, #16]	@ (8025640 <__sinit+0x28>)
 802562e:	6223      	str	r3, [r4, #32]
 8025630:	4b04      	ldr	r3, [pc, #16]	@ (8025644 <__sinit+0x2c>)
 8025632:	681b      	ldr	r3, [r3, #0]
 8025634:	2b00      	cmp	r3, #0
 8025636:	d1f5      	bne.n	8025624 <__sinit+0xc>
 8025638:	f7ff ffc4 	bl	80255c4 <global_stdio_init.part.0>
 802563c:	e7f2      	b.n	8025624 <__sinit+0xc>
 802563e:	bf00      	nop
 8025640:	08025585 	.word	0x08025585
 8025644:	240299a8 	.word	0x240299a8

08025648 <fiprintf>:
 8025648:	b40e      	push	{r1, r2, r3}
 802564a:	b503      	push	{r0, r1, lr}
 802564c:	4601      	mov	r1, r0
 802564e:	ab03      	add	r3, sp, #12
 8025650:	4805      	ldr	r0, [pc, #20]	@ (8025668 <fiprintf+0x20>)
 8025652:	f853 2b04 	ldr.w	r2, [r3], #4
 8025656:	6800      	ldr	r0, [r0, #0]
 8025658:	9301      	str	r3, [sp, #4]
 802565a:	f000 fabd 	bl	8025bd8 <_vfiprintf_r>
 802565e:	b002      	add	sp, #8
 8025660:	f85d eb04 	ldr.w	lr, [sp], #4
 8025664:	b003      	add	sp, #12
 8025666:	4770      	bx	lr
 8025668:	240000e8 	.word	0x240000e8

0802566c <_fwalk_sglue>:
 802566c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025670:	4607      	mov	r7, r0
 8025672:	4688      	mov	r8, r1
 8025674:	4614      	mov	r4, r2
 8025676:	2600      	movs	r6, #0
 8025678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802567c:	f1b9 0901 	subs.w	r9, r9, #1
 8025680:	d505      	bpl.n	802568e <_fwalk_sglue+0x22>
 8025682:	6824      	ldr	r4, [r4, #0]
 8025684:	2c00      	cmp	r4, #0
 8025686:	d1f7      	bne.n	8025678 <_fwalk_sglue+0xc>
 8025688:	4630      	mov	r0, r6
 802568a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802568e:	89ab      	ldrh	r3, [r5, #12]
 8025690:	2b01      	cmp	r3, #1
 8025692:	d907      	bls.n	80256a4 <_fwalk_sglue+0x38>
 8025694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025698:	3301      	adds	r3, #1
 802569a:	d003      	beq.n	80256a4 <_fwalk_sglue+0x38>
 802569c:	4629      	mov	r1, r5
 802569e:	4638      	mov	r0, r7
 80256a0:	47c0      	blx	r8
 80256a2:	4306      	orrs	r6, r0
 80256a4:	3568      	adds	r5, #104	@ 0x68
 80256a6:	e7e9      	b.n	802567c <_fwalk_sglue+0x10>

080256a8 <__sread>:
 80256a8:	b510      	push	{r4, lr}
 80256aa:	460c      	mov	r4, r1
 80256ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80256b0:	f000 f93e 	bl	8025930 <_read_r>
 80256b4:	2800      	cmp	r0, #0
 80256b6:	bfab      	itete	ge
 80256b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80256ba:	89a3      	ldrhlt	r3, [r4, #12]
 80256bc:	181b      	addge	r3, r3, r0
 80256be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80256c2:	bfac      	ite	ge
 80256c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80256c6:	81a3      	strhlt	r3, [r4, #12]
 80256c8:	bd10      	pop	{r4, pc}

080256ca <__swrite>:
 80256ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80256ce:	461f      	mov	r7, r3
 80256d0:	898b      	ldrh	r3, [r1, #12]
 80256d2:	05db      	lsls	r3, r3, #23
 80256d4:	4605      	mov	r5, r0
 80256d6:	460c      	mov	r4, r1
 80256d8:	4616      	mov	r6, r2
 80256da:	d505      	bpl.n	80256e8 <__swrite+0x1e>
 80256dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80256e0:	2302      	movs	r3, #2
 80256e2:	2200      	movs	r2, #0
 80256e4:	f000 f912 	bl	802590c <_lseek_r>
 80256e8:	89a3      	ldrh	r3, [r4, #12]
 80256ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80256ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80256f2:	81a3      	strh	r3, [r4, #12]
 80256f4:	4632      	mov	r2, r6
 80256f6:	463b      	mov	r3, r7
 80256f8:	4628      	mov	r0, r5
 80256fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80256fe:	f000 b94d 	b.w	802599c <_write_r>

08025702 <__sseek>:
 8025702:	b510      	push	{r4, lr}
 8025704:	460c      	mov	r4, r1
 8025706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802570a:	f000 f8ff 	bl	802590c <_lseek_r>
 802570e:	1c43      	adds	r3, r0, #1
 8025710:	89a3      	ldrh	r3, [r4, #12]
 8025712:	bf15      	itete	ne
 8025714:	6560      	strne	r0, [r4, #84]	@ 0x54
 8025716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802571a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802571e:	81a3      	strheq	r3, [r4, #12]
 8025720:	bf18      	it	ne
 8025722:	81a3      	strhne	r3, [r4, #12]
 8025724:	bd10      	pop	{r4, pc}

08025726 <__sclose>:
 8025726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802572a:	f000 b8df 	b.w	80258ec <_close_r>

0802572e <__swbuf_r>:
 802572e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025730:	460e      	mov	r6, r1
 8025732:	4614      	mov	r4, r2
 8025734:	4605      	mov	r5, r0
 8025736:	b118      	cbz	r0, 8025740 <__swbuf_r+0x12>
 8025738:	6a03      	ldr	r3, [r0, #32]
 802573a:	b90b      	cbnz	r3, 8025740 <__swbuf_r+0x12>
 802573c:	f7ff ff6c 	bl	8025618 <__sinit>
 8025740:	69a3      	ldr	r3, [r4, #24]
 8025742:	60a3      	str	r3, [r4, #8]
 8025744:	89a3      	ldrh	r3, [r4, #12]
 8025746:	071a      	lsls	r2, r3, #28
 8025748:	d501      	bpl.n	802574e <__swbuf_r+0x20>
 802574a:	6923      	ldr	r3, [r4, #16]
 802574c:	b943      	cbnz	r3, 8025760 <__swbuf_r+0x32>
 802574e:	4621      	mov	r1, r4
 8025750:	4628      	mov	r0, r5
 8025752:	f000 f82b 	bl	80257ac <__swsetup_r>
 8025756:	b118      	cbz	r0, 8025760 <__swbuf_r+0x32>
 8025758:	f04f 37ff 	mov.w	r7, #4294967295
 802575c:	4638      	mov	r0, r7
 802575e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025760:	6823      	ldr	r3, [r4, #0]
 8025762:	6922      	ldr	r2, [r4, #16]
 8025764:	1a98      	subs	r0, r3, r2
 8025766:	6963      	ldr	r3, [r4, #20]
 8025768:	b2f6      	uxtb	r6, r6
 802576a:	4283      	cmp	r3, r0
 802576c:	4637      	mov	r7, r6
 802576e:	dc05      	bgt.n	802577c <__swbuf_r+0x4e>
 8025770:	4621      	mov	r1, r4
 8025772:	4628      	mov	r0, r5
 8025774:	f000 fd5a 	bl	802622c <_fflush_r>
 8025778:	2800      	cmp	r0, #0
 802577a:	d1ed      	bne.n	8025758 <__swbuf_r+0x2a>
 802577c:	68a3      	ldr	r3, [r4, #8]
 802577e:	3b01      	subs	r3, #1
 8025780:	60a3      	str	r3, [r4, #8]
 8025782:	6823      	ldr	r3, [r4, #0]
 8025784:	1c5a      	adds	r2, r3, #1
 8025786:	6022      	str	r2, [r4, #0]
 8025788:	701e      	strb	r6, [r3, #0]
 802578a:	6962      	ldr	r2, [r4, #20]
 802578c:	1c43      	adds	r3, r0, #1
 802578e:	429a      	cmp	r2, r3
 8025790:	d004      	beq.n	802579c <__swbuf_r+0x6e>
 8025792:	89a3      	ldrh	r3, [r4, #12]
 8025794:	07db      	lsls	r3, r3, #31
 8025796:	d5e1      	bpl.n	802575c <__swbuf_r+0x2e>
 8025798:	2e0a      	cmp	r6, #10
 802579a:	d1df      	bne.n	802575c <__swbuf_r+0x2e>
 802579c:	4621      	mov	r1, r4
 802579e:	4628      	mov	r0, r5
 80257a0:	f000 fd44 	bl	802622c <_fflush_r>
 80257a4:	2800      	cmp	r0, #0
 80257a6:	d0d9      	beq.n	802575c <__swbuf_r+0x2e>
 80257a8:	e7d6      	b.n	8025758 <__swbuf_r+0x2a>
	...

080257ac <__swsetup_r>:
 80257ac:	b538      	push	{r3, r4, r5, lr}
 80257ae:	4b29      	ldr	r3, [pc, #164]	@ (8025854 <__swsetup_r+0xa8>)
 80257b0:	4605      	mov	r5, r0
 80257b2:	6818      	ldr	r0, [r3, #0]
 80257b4:	460c      	mov	r4, r1
 80257b6:	b118      	cbz	r0, 80257c0 <__swsetup_r+0x14>
 80257b8:	6a03      	ldr	r3, [r0, #32]
 80257ba:	b90b      	cbnz	r3, 80257c0 <__swsetup_r+0x14>
 80257bc:	f7ff ff2c 	bl	8025618 <__sinit>
 80257c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80257c4:	0719      	lsls	r1, r3, #28
 80257c6:	d422      	bmi.n	802580e <__swsetup_r+0x62>
 80257c8:	06da      	lsls	r2, r3, #27
 80257ca:	d407      	bmi.n	80257dc <__swsetup_r+0x30>
 80257cc:	2209      	movs	r2, #9
 80257ce:	602a      	str	r2, [r5, #0]
 80257d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80257d4:	81a3      	strh	r3, [r4, #12]
 80257d6:	f04f 30ff 	mov.w	r0, #4294967295
 80257da:	e033      	b.n	8025844 <__swsetup_r+0x98>
 80257dc:	0758      	lsls	r0, r3, #29
 80257de:	d512      	bpl.n	8025806 <__swsetup_r+0x5a>
 80257e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80257e2:	b141      	cbz	r1, 80257f6 <__swsetup_r+0x4a>
 80257e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80257e8:	4299      	cmp	r1, r3
 80257ea:	d002      	beq.n	80257f2 <__swsetup_r+0x46>
 80257ec:	4628      	mov	r0, r5
 80257ee:	f000 f97f 	bl	8025af0 <_free_r>
 80257f2:	2300      	movs	r3, #0
 80257f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80257f6:	89a3      	ldrh	r3, [r4, #12]
 80257f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80257fc:	81a3      	strh	r3, [r4, #12]
 80257fe:	2300      	movs	r3, #0
 8025800:	6063      	str	r3, [r4, #4]
 8025802:	6923      	ldr	r3, [r4, #16]
 8025804:	6023      	str	r3, [r4, #0]
 8025806:	89a3      	ldrh	r3, [r4, #12]
 8025808:	f043 0308 	orr.w	r3, r3, #8
 802580c:	81a3      	strh	r3, [r4, #12]
 802580e:	6923      	ldr	r3, [r4, #16]
 8025810:	b94b      	cbnz	r3, 8025826 <__swsetup_r+0x7a>
 8025812:	89a3      	ldrh	r3, [r4, #12]
 8025814:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8025818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802581c:	d003      	beq.n	8025826 <__swsetup_r+0x7a>
 802581e:	4621      	mov	r1, r4
 8025820:	4628      	mov	r0, r5
 8025822:	f000 fd51 	bl	80262c8 <__smakebuf_r>
 8025826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802582a:	f013 0201 	ands.w	r2, r3, #1
 802582e:	d00a      	beq.n	8025846 <__swsetup_r+0x9a>
 8025830:	2200      	movs	r2, #0
 8025832:	60a2      	str	r2, [r4, #8]
 8025834:	6962      	ldr	r2, [r4, #20]
 8025836:	4252      	negs	r2, r2
 8025838:	61a2      	str	r2, [r4, #24]
 802583a:	6922      	ldr	r2, [r4, #16]
 802583c:	b942      	cbnz	r2, 8025850 <__swsetup_r+0xa4>
 802583e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8025842:	d1c5      	bne.n	80257d0 <__swsetup_r+0x24>
 8025844:	bd38      	pop	{r3, r4, r5, pc}
 8025846:	0799      	lsls	r1, r3, #30
 8025848:	bf58      	it	pl
 802584a:	6962      	ldrpl	r2, [r4, #20]
 802584c:	60a2      	str	r2, [r4, #8]
 802584e:	e7f4      	b.n	802583a <__swsetup_r+0x8e>
 8025850:	2000      	movs	r0, #0
 8025852:	e7f7      	b.n	8025844 <__swsetup_r+0x98>
 8025854:	240000e8 	.word	0x240000e8

08025858 <memset>:
 8025858:	4402      	add	r2, r0
 802585a:	4603      	mov	r3, r0
 802585c:	4293      	cmp	r3, r2
 802585e:	d100      	bne.n	8025862 <memset+0xa>
 8025860:	4770      	bx	lr
 8025862:	f803 1b01 	strb.w	r1, [r3], #1
 8025866:	e7f9      	b.n	802585c <memset+0x4>

08025868 <strncmp>:
 8025868:	b510      	push	{r4, lr}
 802586a:	b16a      	cbz	r2, 8025888 <strncmp+0x20>
 802586c:	3901      	subs	r1, #1
 802586e:	1884      	adds	r4, r0, r2
 8025870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025874:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8025878:	429a      	cmp	r2, r3
 802587a:	d103      	bne.n	8025884 <strncmp+0x1c>
 802587c:	42a0      	cmp	r0, r4
 802587e:	d001      	beq.n	8025884 <strncmp+0x1c>
 8025880:	2a00      	cmp	r2, #0
 8025882:	d1f5      	bne.n	8025870 <strncmp+0x8>
 8025884:	1ad0      	subs	r0, r2, r3
 8025886:	bd10      	pop	{r4, pc}
 8025888:	4610      	mov	r0, r2
 802588a:	e7fc      	b.n	8025886 <strncmp+0x1e>

0802588c <_raise_r>:
 802588c:	291f      	cmp	r1, #31
 802588e:	b538      	push	{r3, r4, r5, lr}
 8025890:	4605      	mov	r5, r0
 8025892:	460c      	mov	r4, r1
 8025894:	d904      	bls.n	80258a0 <_raise_r+0x14>
 8025896:	2316      	movs	r3, #22
 8025898:	6003      	str	r3, [r0, #0]
 802589a:	f04f 30ff 	mov.w	r0, #4294967295
 802589e:	bd38      	pop	{r3, r4, r5, pc}
 80258a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80258a2:	b112      	cbz	r2, 80258aa <_raise_r+0x1e>
 80258a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80258a8:	b94b      	cbnz	r3, 80258be <_raise_r+0x32>
 80258aa:	4628      	mov	r0, r5
 80258ac:	f000 f864 	bl	8025978 <_getpid_r>
 80258b0:	4622      	mov	r2, r4
 80258b2:	4601      	mov	r1, r0
 80258b4:	4628      	mov	r0, r5
 80258b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80258ba:	f000 b84b 	b.w	8025954 <_kill_r>
 80258be:	2b01      	cmp	r3, #1
 80258c0:	d00a      	beq.n	80258d8 <_raise_r+0x4c>
 80258c2:	1c59      	adds	r1, r3, #1
 80258c4:	d103      	bne.n	80258ce <_raise_r+0x42>
 80258c6:	2316      	movs	r3, #22
 80258c8:	6003      	str	r3, [r0, #0]
 80258ca:	2001      	movs	r0, #1
 80258cc:	e7e7      	b.n	802589e <_raise_r+0x12>
 80258ce:	2100      	movs	r1, #0
 80258d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80258d4:	4620      	mov	r0, r4
 80258d6:	4798      	blx	r3
 80258d8:	2000      	movs	r0, #0
 80258da:	e7e0      	b.n	802589e <_raise_r+0x12>

080258dc <raise>:
 80258dc:	4b02      	ldr	r3, [pc, #8]	@ (80258e8 <raise+0xc>)
 80258de:	4601      	mov	r1, r0
 80258e0:	6818      	ldr	r0, [r3, #0]
 80258e2:	f7ff bfd3 	b.w	802588c <_raise_r>
 80258e6:	bf00      	nop
 80258e8:	240000e8 	.word	0x240000e8

080258ec <_close_r>:
 80258ec:	b538      	push	{r3, r4, r5, lr}
 80258ee:	4d06      	ldr	r5, [pc, #24]	@ (8025908 <_close_r+0x1c>)
 80258f0:	2300      	movs	r3, #0
 80258f2:	4604      	mov	r4, r0
 80258f4:	4608      	mov	r0, r1
 80258f6:	602b      	str	r3, [r5, #0]
 80258f8:	f7dc f992 	bl	8001c20 <_close>
 80258fc:	1c43      	adds	r3, r0, #1
 80258fe:	d102      	bne.n	8025906 <_close_r+0x1a>
 8025900:	682b      	ldr	r3, [r5, #0]
 8025902:	b103      	cbz	r3, 8025906 <_close_r+0x1a>
 8025904:	6023      	str	r3, [r4, #0]
 8025906:	bd38      	pop	{r3, r4, r5, pc}
 8025908:	240299ac 	.word	0x240299ac

0802590c <_lseek_r>:
 802590c:	b538      	push	{r3, r4, r5, lr}
 802590e:	4d07      	ldr	r5, [pc, #28]	@ (802592c <_lseek_r+0x20>)
 8025910:	4604      	mov	r4, r0
 8025912:	4608      	mov	r0, r1
 8025914:	4611      	mov	r1, r2
 8025916:	2200      	movs	r2, #0
 8025918:	602a      	str	r2, [r5, #0]
 802591a:	461a      	mov	r2, r3
 802591c:	f7dc f98a 	bl	8001c34 <_lseek>
 8025920:	1c43      	adds	r3, r0, #1
 8025922:	d102      	bne.n	802592a <_lseek_r+0x1e>
 8025924:	682b      	ldr	r3, [r5, #0]
 8025926:	b103      	cbz	r3, 802592a <_lseek_r+0x1e>
 8025928:	6023      	str	r3, [r4, #0]
 802592a:	bd38      	pop	{r3, r4, r5, pc}
 802592c:	240299ac 	.word	0x240299ac

08025930 <_read_r>:
 8025930:	b538      	push	{r3, r4, r5, lr}
 8025932:	4d07      	ldr	r5, [pc, #28]	@ (8025950 <_read_r+0x20>)
 8025934:	4604      	mov	r4, r0
 8025936:	4608      	mov	r0, r1
 8025938:	4611      	mov	r1, r2
 802593a:	2200      	movs	r2, #0
 802593c:	602a      	str	r2, [r5, #0]
 802593e:	461a      	mov	r2, r3
 8025940:	f7dc f952 	bl	8001be8 <_read>
 8025944:	1c43      	adds	r3, r0, #1
 8025946:	d102      	bne.n	802594e <_read_r+0x1e>
 8025948:	682b      	ldr	r3, [r5, #0]
 802594a:	b103      	cbz	r3, 802594e <_read_r+0x1e>
 802594c:	6023      	str	r3, [r4, #0]
 802594e:	bd38      	pop	{r3, r4, r5, pc}
 8025950:	240299ac 	.word	0x240299ac

08025954 <_kill_r>:
 8025954:	b538      	push	{r3, r4, r5, lr}
 8025956:	4d07      	ldr	r5, [pc, #28]	@ (8025974 <_kill_r+0x20>)
 8025958:	2300      	movs	r3, #0
 802595a:	4604      	mov	r4, r0
 802595c:	4608      	mov	r0, r1
 802595e:	4611      	mov	r1, r2
 8025960:	602b      	str	r3, [r5, #0]
 8025962:	f7dc f933 	bl	8001bcc <_kill>
 8025966:	1c43      	adds	r3, r0, #1
 8025968:	d102      	bne.n	8025970 <_kill_r+0x1c>
 802596a:	682b      	ldr	r3, [r5, #0]
 802596c:	b103      	cbz	r3, 8025970 <_kill_r+0x1c>
 802596e:	6023      	str	r3, [r4, #0]
 8025970:	bd38      	pop	{r3, r4, r5, pc}
 8025972:	bf00      	nop
 8025974:	240299ac 	.word	0x240299ac

08025978 <_getpid_r>:
 8025978:	f7dc b926 	b.w	8001bc8 <_getpid>

0802597c <_sbrk_r>:
 802597c:	b538      	push	{r3, r4, r5, lr}
 802597e:	4d06      	ldr	r5, [pc, #24]	@ (8025998 <_sbrk_r+0x1c>)
 8025980:	2300      	movs	r3, #0
 8025982:	4604      	mov	r4, r0
 8025984:	4608      	mov	r0, r1
 8025986:	602b      	str	r3, [r5, #0]
 8025988:	f7dc f956 	bl	8001c38 <_sbrk>
 802598c:	1c43      	adds	r3, r0, #1
 802598e:	d102      	bne.n	8025996 <_sbrk_r+0x1a>
 8025990:	682b      	ldr	r3, [r5, #0]
 8025992:	b103      	cbz	r3, 8025996 <_sbrk_r+0x1a>
 8025994:	6023      	str	r3, [r4, #0]
 8025996:	bd38      	pop	{r3, r4, r5, pc}
 8025998:	240299ac 	.word	0x240299ac

0802599c <_write_r>:
 802599c:	b538      	push	{r3, r4, r5, lr}
 802599e:	4d07      	ldr	r5, [pc, #28]	@ (80259bc <_write_r+0x20>)
 80259a0:	4604      	mov	r4, r0
 80259a2:	4608      	mov	r0, r1
 80259a4:	4611      	mov	r1, r2
 80259a6:	2200      	movs	r2, #0
 80259a8:	602a      	str	r2, [r5, #0]
 80259aa:	461a      	mov	r2, r3
 80259ac:	f7dc f92a 	bl	8001c04 <_write>
 80259b0:	1c43      	adds	r3, r0, #1
 80259b2:	d102      	bne.n	80259ba <_write_r+0x1e>
 80259b4:	682b      	ldr	r3, [r5, #0]
 80259b6:	b103      	cbz	r3, 80259ba <_write_r+0x1e>
 80259b8:	6023      	str	r3, [r4, #0]
 80259ba:	bd38      	pop	{r3, r4, r5, pc}
 80259bc:	240299ac 	.word	0x240299ac

080259c0 <__errno>:
 80259c0:	4b01      	ldr	r3, [pc, #4]	@ (80259c8 <__errno+0x8>)
 80259c2:	6818      	ldr	r0, [r3, #0]
 80259c4:	4770      	bx	lr
 80259c6:	bf00      	nop
 80259c8:	240000e8 	.word	0x240000e8

080259cc <__libc_init_array>:
 80259cc:	b570      	push	{r4, r5, r6, lr}
 80259ce:	4d0d      	ldr	r5, [pc, #52]	@ (8025a04 <__libc_init_array+0x38>)
 80259d0:	4c0d      	ldr	r4, [pc, #52]	@ (8025a08 <__libc_init_array+0x3c>)
 80259d2:	1b64      	subs	r4, r4, r5
 80259d4:	10a4      	asrs	r4, r4, #2
 80259d6:	2600      	movs	r6, #0
 80259d8:	42a6      	cmp	r6, r4
 80259da:	d109      	bne.n	80259f0 <__libc_init_array+0x24>
 80259dc:	4d0b      	ldr	r5, [pc, #44]	@ (8025a0c <__libc_init_array+0x40>)
 80259de:	4c0c      	ldr	r4, [pc, #48]	@ (8025a10 <__libc_init_array+0x44>)
 80259e0:	f000 fcd0 	bl	8026384 <_init>
 80259e4:	1b64      	subs	r4, r4, r5
 80259e6:	10a4      	asrs	r4, r4, #2
 80259e8:	2600      	movs	r6, #0
 80259ea:	42a6      	cmp	r6, r4
 80259ec:	d105      	bne.n	80259fa <__libc_init_array+0x2e>
 80259ee:	bd70      	pop	{r4, r5, r6, pc}
 80259f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80259f4:	4798      	blx	r3
 80259f6:	3601      	adds	r6, #1
 80259f8:	e7ee      	b.n	80259d8 <__libc_init_array+0xc>
 80259fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80259fe:	4798      	blx	r3
 8025a00:	3601      	adds	r6, #1
 8025a02:	e7f2      	b.n	80259ea <__libc_init_array+0x1e>
 8025a04:	080dff20 	.word	0x080dff20
 8025a08:	080dff20 	.word	0x080dff20
 8025a0c:	080dff20 	.word	0x080dff20
 8025a10:	080dff3c 	.word	0x080dff3c

08025a14 <__retarget_lock_init_recursive>:
 8025a14:	4770      	bx	lr

08025a16 <__retarget_lock_acquire_recursive>:
 8025a16:	4770      	bx	lr

08025a18 <__retarget_lock_release_recursive>:
 8025a18:	4770      	bx	lr

08025a1a <memcpy>:
 8025a1a:	440a      	add	r2, r1
 8025a1c:	4291      	cmp	r1, r2
 8025a1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8025a22:	d100      	bne.n	8025a26 <memcpy+0xc>
 8025a24:	4770      	bx	lr
 8025a26:	b510      	push	{r4, lr}
 8025a28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025a2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025a30:	4291      	cmp	r1, r2
 8025a32:	d1f9      	bne.n	8025a28 <memcpy+0xe>
 8025a34:	bd10      	pop	{r4, pc}
	...

08025a38 <__register_exitproc>:
 8025a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025a3c:	4d27      	ldr	r5, [pc, #156]	@ (8025adc <__register_exitproc+0xa4>)
 8025a3e:	4607      	mov	r7, r0
 8025a40:	6828      	ldr	r0, [r5, #0]
 8025a42:	4691      	mov	r9, r2
 8025a44:	460e      	mov	r6, r1
 8025a46:	4698      	mov	r8, r3
 8025a48:	f7ff ffe5 	bl	8025a16 <__retarget_lock_acquire_recursive>
 8025a4c:	4a24      	ldr	r2, [pc, #144]	@ (8025ae0 <__register_exitproc+0xa8>)
 8025a4e:	6814      	ldr	r4, [r2, #0]
 8025a50:	b93c      	cbnz	r4, 8025a62 <__register_exitproc+0x2a>
 8025a52:	4b24      	ldr	r3, [pc, #144]	@ (8025ae4 <__register_exitproc+0xac>)
 8025a54:	6013      	str	r3, [r2, #0]
 8025a56:	4a24      	ldr	r2, [pc, #144]	@ (8025ae8 <__register_exitproc+0xb0>)
 8025a58:	b112      	cbz	r2, 8025a60 <__register_exitproc+0x28>
 8025a5a:	6812      	ldr	r2, [r2, #0]
 8025a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8025a60:	4c20      	ldr	r4, [pc, #128]	@ (8025ae4 <__register_exitproc+0xac>)
 8025a62:	6863      	ldr	r3, [r4, #4]
 8025a64:	2b1f      	cmp	r3, #31
 8025a66:	dd06      	ble.n	8025a76 <__register_exitproc+0x3e>
 8025a68:	6828      	ldr	r0, [r5, #0]
 8025a6a:	f7ff ffd5 	bl	8025a18 <__retarget_lock_release_recursive>
 8025a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8025a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025a76:	b32f      	cbz	r7, 8025ac4 <__register_exitproc+0x8c>
 8025a78:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8025a7c:	b968      	cbnz	r0, 8025a9a <__register_exitproc+0x62>
 8025a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8025aec <__register_exitproc+0xb4>)
 8025a80:	2b00      	cmp	r3, #0
 8025a82:	d0f1      	beq.n	8025a68 <__register_exitproc+0x30>
 8025a84:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8025a88:	f7ff fc6e 	bl	8025368 <malloc>
 8025a8c:	2800      	cmp	r0, #0
 8025a8e:	d0eb      	beq.n	8025a68 <__register_exitproc+0x30>
 8025a90:	2300      	movs	r3, #0
 8025a92:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8025a96:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8025a9a:	6863      	ldr	r3, [r4, #4]
 8025a9c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025aa0:	2201      	movs	r2, #1
 8025aa2:	409a      	lsls	r2, r3
 8025aa4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025aa8:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8025aac:	4313      	orrs	r3, r2
 8025aae:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8025ab2:	2f02      	cmp	r7, #2
 8025ab4:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8025ab8:	bf02      	ittt	eq
 8025aba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8025abe:	4313      	orreq	r3, r2
 8025ac0:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8025ac4:	6863      	ldr	r3, [r4, #4]
 8025ac6:	6828      	ldr	r0, [r5, #0]
 8025ac8:	1c5a      	adds	r2, r3, #1
 8025aca:	3302      	adds	r3, #2
 8025acc:	6062      	str	r2, [r4, #4]
 8025ace:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8025ad2:	f7ff ffa1 	bl	8025a18 <__retarget_lock_release_recursive>
 8025ad6:	2000      	movs	r0, #0
 8025ad8:	e7cb      	b.n	8025a72 <__register_exitproc+0x3a>
 8025ada:	bf00      	nop
 8025adc:	24000138 	.word	0x24000138
 8025ae0:	24029a40 	.word	0x24029a40
 8025ae4:	240299b4 	.word	0x240299b4
 8025ae8:	08029bc4 	.word	0x08029bc4
 8025aec:	08025369 	.word	0x08025369

08025af0 <_free_r>:
 8025af0:	b538      	push	{r3, r4, r5, lr}
 8025af2:	4605      	mov	r5, r0
 8025af4:	2900      	cmp	r1, #0
 8025af6:	d041      	beq.n	8025b7c <_free_r+0x8c>
 8025af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025afc:	1f0c      	subs	r4, r1, #4
 8025afe:	2b00      	cmp	r3, #0
 8025b00:	bfb8      	it	lt
 8025b02:	18e4      	addlt	r4, r4, r3
 8025b04:	f7ff fce2 	bl	80254cc <__malloc_lock>
 8025b08:	4a1d      	ldr	r2, [pc, #116]	@ (8025b80 <_free_r+0x90>)
 8025b0a:	6813      	ldr	r3, [r2, #0]
 8025b0c:	b933      	cbnz	r3, 8025b1c <_free_r+0x2c>
 8025b0e:	6063      	str	r3, [r4, #4]
 8025b10:	6014      	str	r4, [r2, #0]
 8025b12:	4628      	mov	r0, r5
 8025b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025b18:	f7ff bcde 	b.w	80254d8 <__malloc_unlock>
 8025b1c:	42a3      	cmp	r3, r4
 8025b1e:	d908      	bls.n	8025b32 <_free_r+0x42>
 8025b20:	6820      	ldr	r0, [r4, #0]
 8025b22:	1821      	adds	r1, r4, r0
 8025b24:	428b      	cmp	r3, r1
 8025b26:	bf01      	itttt	eq
 8025b28:	6819      	ldreq	r1, [r3, #0]
 8025b2a:	685b      	ldreq	r3, [r3, #4]
 8025b2c:	1809      	addeq	r1, r1, r0
 8025b2e:	6021      	streq	r1, [r4, #0]
 8025b30:	e7ed      	b.n	8025b0e <_free_r+0x1e>
 8025b32:	461a      	mov	r2, r3
 8025b34:	685b      	ldr	r3, [r3, #4]
 8025b36:	b10b      	cbz	r3, 8025b3c <_free_r+0x4c>
 8025b38:	42a3      	cmp	r3, r4
 8025b3a:	d9fa      	bls.n	8025b32 <_free_r+0x42>
 8025b3c:	6811      	ldr	r1, [r2, #0]
 8025b3e:	1850      	adds	r0, r2, r1
 8025b40:	42a0      	cmp	r0, r4
 8025b42:	d10b      	bne.n	8025b5c <_free_r+0x6c>
 8025b44:	6820      	ldr	r0, [r4, #0]
 8025b46:	4401      	add	r1, r0
 8025b48:	1850      	adds	r0, r2, r1
 8025b4a:	4283      	cmp	r3, r0
 8025b4c:	6011      	str	r1, [r2, #0]
 8025b4e:	d1e0      	bne.n	8025b12 <_free_r+0x22>
 8025b50:	6818      	ldr	r0, [r3, #0]
 8025b52:	685b      	ldr	r3, [r3, #4]
 8025b54:	6053      	str	r3, [r2, #4]
 8025b56:	4408      	add	r0, r1
 8025b58:	6010      	str	r0, [r2, #0]
 8025b5a:	e7da      	b.n	8025b12 <_free_r+0x22>
 8025b5c:	d902      	bls.n	8025b64 <_free_r+0x74>
 8025b5e:	230c      	movs	r3, #12
 8025b60:	602b      	str	r3, [r5, #0]
 8025b62:	e7d6      	b.n	8025b12 <_free_r+0x22>
 8025b64:	6820      	ldr	r0, [r4, #0]
 8025b66:	1821      	adds	r1, r4, r0
 8025b68:	428b      	cmp	r3, r1
 8025b6a:	bf04      	itt	eq
 8025b6c:	6819      	ldreq	r1, [r3, #0]
 8025b6e:	685b      	ldreq	r3, [r3, #4]
 8025b70:	6063      	str	r3, [r4, #4]
 8025b72:	bf04      	itt	eq
 8025b74:	1809      	addeq	r1, r1, r0
 8025b76:	6021      	streq	r1, [r4, #0]
 8025b78:	6054      	str	r4, [r2, #4]
 8025b7a:	e7ca      	b.n	8025b12 <_free_r+0x22>
 8025b7c:	bd38      	pop	{r3, r4, r5, pc}
 8025b7e:	bf00      	nop
 8025b80:	2402986c 	.word	0x2402986c

08025b84 <__sfputc_r>:
 8025b84:	6893      	ldr	r3, [r2, #8]
 8025b86:	3b01      	subs	r3, #1
 8025b88:	2b00      	cmp	r3, #0
 8025b8a:	b410      	push	{r4}
 8025b8c:	6093      	str	r3, [r2, #8]
 8025b8e:	da08      	bge.n	8025ba2 <__sfputc_r+0x1e>
 8025b90:	6994      	ldr	r4, [r2, #24]
 8025b92:	42a3      	cmp	r3, r4
 8025b94:	db01      	blt.n	8025b9a <__sfputc_r+0x16>
 8025b96:	290a      	cmp	r1, #10
 8025b98:	d103      	bne.n	8025ba2 <__sfputc_r+0x1e>
 8025b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025b9e:	f7ff bdc6 	b.w	802572e <__swbuf_r>
 8025ba2:	6813      	ldr	r3, [r2, #0]
 8025ba4:	1c58      	adds	r0, r3, #1
 8025ba6:	6010      	str	r0, [r2, #0]
 8025ba8:	7019      	strb	r1, [r3, #0]
 8025baa:	4608      	mov	r0, r1
 8025bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025bb0:	4770      	bx	lr

08025bb2 <__sfputs_r>:
 8025bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025bb4:	4606      	mov	r6, r0
 8025bb6:	460f      	mov	r7, r1
 8025bb8:	4614      	mov	r4, r2
 8025bba:	18d5      	adds	r5, r2, r3
 8025bbc:	42ac      	cmp	r4, r5
 8025bbe:	d101      	bne.n	8025bc4 <__sfputs_r+0x12>
 8025bc0:	2000      	movs	r0, #0
 8025bc2:	e007      	b.n	8025bd4 <__sfputs_r+0x22>
 8025bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025bc8:	463a      	mov	r2, r7
 8025bca:	4630      	mov	r0, r6
 8025bcc:	f7ff ffda 	bl	8025b84 <__sfputc_r>
 8025bd0:	1c43      	adds	r3, r0, #1
 8025bd2:	d1f3      	bne.n	8025bbc <__sfputs_r+0xa>
 8025bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025bd8 <_vfiprintf_r>:
 8025bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bdc:	460d      	mov	r5, r1
 8025bde:	b09d      	sub	sp, #116	@ 0x74
 8025be0:	4614      	mov	r4, r2
 8025be2:	4698      	mov	r8, r3
 8025be4:	4606      	mov	r6, r0
 8025be6:	b118      	cbz	r0, 8025bf0 <_vfiprintf_r+0x18>
 8025be8:	6a03      	ldr	r3, [r0, #32]
 8025bea:	b90b      	cbnz	r3, 8025bf0 <_vfiprintf_r+0x18>
 8025bec:	f7ff fd14 	bl	8025618 <__sinit>
 8025bf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025bf2:	07d9      	lsls	r1, r3, #31
 8025bf4:	d405      	bmi.n	8025c02 <_vfiprintf_r+0x2a>
 8025bf6:	89ab      	ldrh	r3, [r5, #12]
 8025bf8:	059a      	lsls	r2, r3, #22
 8025bfa:	d402      	bmi.n	8025c02 <_vfiprintf_r+0x2a>
 8025bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025bfe:	f7ff ff0a 	bl	8025a16 <__retarget_lock_acquire_recursive>
 8025c02:	89ab      	ldrh	r3, [r5, #12]
 8025c04:	071b      	lsls	r3, r3, #28
 8025c06:	d501      	bpl.n	8025c0c <_vfiprintf_r+0x34>
 8025c08:	692b      	ldr	r3, [r5, #16]
 8025c0a:	b99b      	cbnz	r3, 8025c34 <_vfiprintf_r+0x5c>
 8025c0c:	4629      	mov	r1, r5
 8025c0e:	4630      	mov	r0, r6
 8025c10:	f7ff fdcc 	bl	80257ac <__swsetup_r>
 8025c14:	b170      	cbz	r0, 8025c34 <_vfiprintf_r+0x5c>
 8025c16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025c18:	07dc      	lsls	r4, r3, #31
 8025c1a:	d504      	bpl.n	8025c26 <_vfiprintf_r+0x4e>
 8025c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8025c20:	b01d      	add	sp, #116	@ 0x74
 8025c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c26:	89ab      	ldrh	r3, [r5, #12]
 8025c28:	0598      	lsls	r0, r3, #22
 8025c2a:	d4f7      	bmi.n	8025c1c <_vfiprintf_r+0x44>
 8025c2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025c2e:	f7ff fef3 	bl	8025a18 <__retarget_lock_release_recursive>
 8025c32:	e7f3      	b.n	8025c1c <_vfiprintf_r+0x44>
 8025c34:	2300      	movs	r3, #0
 8025c36:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c38:	2320      	movs	r3, #32
 8025c3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8025c42:	2330      	movs	r3, #48	@ 0x30
 8025c44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8025df4 <_vfiprintf_r+0x21c>
 8025c48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025c4c:	f04f 0901 	mov.w	r9, #1
 8025c50:	4623      	mov	r3, r4
 8025c52:	469a      	mov	sl, r3
 8025c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025c58:	b10a      	cbz	r2, 8025c5e <_vfiprintf_r+0x86>
 8025c5a:	2a25      	cmp	r2, #37	@ 0x25
 8025c5c:	d1f9      	bne.n	8025c52 <_vfiprintf_r+0x7a>
 8025c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8025c62:	d00b      	beq.n	8025c7c <_vfiprintf_r+0xa4>
 8025c64:	465b      	mov	r3, fp
 8025c66:	4622      	mov	r2, r4
 8025c68:	4629      	mov	r1, r5
 8025c6a:	4630      	mov	r0, r6
 8025c6c:	f7ff ffa1 	bl	8025bb2 <__sfputs_r>
 8025c70:	3001      	adds	r0, #1
 8025c72:	f000 80a7 	beq.w	8025dc4 <_vfiprintf_r+0x1ec>
 8025c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025c78:	445a      	add	r2, fp
 8025c7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8025c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8025c80:	2b00      	cmp	r3, #0
 8025c82:	f000 809f 	beq.w	8025dc4 <_vfiprintf_r+0x1ec>
 8025c86:	2300      	movs	r3, #0
 8025c88:	f04f 32ff 	mov.w	r2, #4294967295
 8025c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025c90:	f10a 0a01 	add.w	sl, sl, #1
 8025c94:	9304      	str	r3, [sp, #16]
 8025c96:	9307      	str	r3, [sp, #28]
 8025c98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025c9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8025c9e:	4654      	mov	r4, sl
 8025ca0:	2205      	movs	r2, #5
 8025ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025ca6:	4853      	ldr	r0, [pc, #332]	@ (8025df4 <_vfiprintf_r+0x21c>)
 8025ca8:	f7da fb1a 	bl	80002e0 <memchr>
 8025cac:	9a04      	ldr	r2, [sp, #16]
 8025cae:	b9d8      	cbnz	r0, 8025ce8 <_vfiprintf_r+0x110>
 8025cb0:	06d1      	lsls	r1, r2, #27
 8025cb2:	bf44      	itt	mi
 8025cb4:	2320      	movmi	r3, #32
 8025cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025cba:	0713      	lsls	r3, r2, #28
 8025cbc:	bf44      	itt	mi
 8025cbe:	232b      	movmi	r3, #43	@ 0x2b
 8025cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8025cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8025cca:	d015      	beq.n	8025cf8 <_vfiprintf_r+0x120>
 8025ccc:	9a07      	ldr	r2, [sp, #28]
 8025cce:	4654      	mov	r4, sl
 8025cd0:	2000      	movs	r0, #0
 8025cd2:	f04f 0c0a 	mov.w	ip, #10
 8025cd6:	4621      	mov	r1, r4
 8025cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025cdc:	3b30      	subs	r3, #48	@ 0x30
 8025cde:	2b09      	cmp	r3, #9
 8025ce0:	d94b      	bls.n	8025d7a <_vfiprintf_r+0x1a2>
 8025ce2:	b1b0      	cbz	r0, 8025d12 <_vfiprintf_r+0x13a>
 8025ce4:	9207      	str	r2, [sp, #28]
 8025ce6:	e014      	b.n	8025d12 <_vfiprintf_r+0x13a>
 8025ce8:	eba0 0308 	sub.w	r3, r0, r8
 8025cec:	fa09 f303 	lsl.w	r3, r9, r3
 8025cf0:	4313      	orrs	r3, r2
 8025cf2:	9304      	str	r3, [sp, #16]
 8025cf4:	46a2      	mov	sl, r4
 8025cf6:	e7d2      	b.n	8025c9e <_vfiprintf_r+0xc6>
 8025cf8:	9b03      	ldr	r3, [sp, #12]
 8025cfa:	1d19      	adds	r1, r3, #4
 8025cfc:	681b      	ldr	r3, [r3, #0]
 8025cfe:	9103      	str	r1, [sp, #12]
 8025d00:	2b00      	cmp	r3, #0
 8025d02:	bfbb      	ittet	lt
 8025d04:	425b      	neglt	r3, r3
 8025d06:	f042 0202 	orrlt.w	r2, r2, #2
 8025d0a:	9307      	strge	r3, [sp, #28]
 8025d0c:	9307      	strlt	r3, [sp, #28]
 8025d0e:	bfb8      	it	lt
 8025d10:	9204      	strlt	r2, [sp, #16]
 8025d12:	7823      	ldrb	r3, [r4, #0]
 8025d14:	2b2e      	cmp	r3, #46	@ 0x2e
 8025d16:	d10a      	bne.n	8025d2e <_vfiprintf_r+0x156>
 8025d18:	7863      	ldrb	r3, [r4, #1]
 8025d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8025d1c:	d132      	bne.n	8025d84 <_vfiprintf_r+0x1ac>
 8025d1e:	9b03      	ldr	r3, [sp, #12]
 8025d20:	1d1a      	adds	r2, r3, #4
 8025d22:	681b      	ldr	r3, [r3, #0]
 8025d24:	9203      	str	r2, [sp, #12]
 8025d26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025d2a:	3402      	adds	r4, #2
 8025d2c:	9305      	str	r3, [sp, #20]
 8025d2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8025e04 <_vfiprintf_r+0x22c>
 8025d32:	7821      	ldrb	r1, [r4, #0]
 8025d34:	2203      	movs	r2, #3
 8025d36:	4650      	mov	r0, sl
 8025d38:	f7da fad2 	bl	80002e0 <memchr>
 8025d3c:	b138      	cbz	r0, 8025d4e <_vfiprintf_r+0x176>
 8025d3e:	9b04      	ldr	r3, [sp, #16]
 8025d40:	eba0 000a 	sub.w	r0, r0, sl
 8025d44:	2240      	movs	r2, #64	@ 0x40
 8025d46:	4082      	lsls	r2, r0
 8025d48:	4313      	orrs	r3, r2
 8025d4a:	3401      	adds	r4, #1
 8025d4c:	9304      	str	r3, [sp, #16]
 8025d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025d52:	4829      	ldr	r0, [pc, #164]	@ (8025df8 <_vfiprintf_r+0x220>)
 8025d54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025d58:	2206      	movs	r2, #6
 8025d5a:	f7da fac1 	bl	80002e0 <memchr>
 8025d5e:	2800      	cmp	r0, #0
 8025d60:	d03f      	beq.n	8025de2 <_vfiprintf_r+0x20a>
 8025d62:	4b26      	ldr	r3, [pc, #152]	@ (8025dfc <_vfiprintf_r+0x224>)
 8025d64:	bb1b      	cbnz	r3, 8025dae <_vfiprintf_r+0x1d6>
 8025d66:	9b03      	ldr	r3, [sp, #12]
 8025d68:	3307      	adds	r3, #7
 8025d6a:	f023 0307 	bic.w	r3, r3, #7
 8025d6e:	3308      	adds	r3, #8
 8025d70:	9303      	str	r3, [sp, #12]
 8025d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d74:	443b      	add	r3, r7
 8025d76:	9309      	str	r3, [sp, #36]	@ 0x24
 8025d78:	e76a      	b.n	8025c50 <_vfiprintf_r+0x78>
 8025d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8025d7e:	460c      	mov	r4, r1
 8025d80:	2001      	movs	r0, #1
 8025d82:	e7a8      	b.n	8025cd6 <_vfiprintf_r+0xfe>
 8025d84:	2300      	movs	r3, #0
 8025d86:	3401      	adds	r4, #1
 8025d88:	9305      	str	r3, [sp, #20]
 8025d8a:	4619      	mov	r1, r3
 8025d8c:	f04f 0c0a 	mov.w	ip, #10
 8025d90:	4620      	mov	r0, r4
 8025d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025d96:	3a30      	subs	r2, #48	@ 0x30
 8025d98:	2a09      	cmp	r2, #9
 8025d9a:	d903      	bls.n	8025da4 <_vfiprintf_r+0x1cc>
 8025d9c:	2b00      	cmp	r3, #0
 8025d9e:	d0c6      	beq.n	8025d2e <_vfiprintf_r+0x156>
 8025da0:	9105      	str	r1, [sp, #20]
 8025da2:	e7c4      	b.n	8025d2e <_vfiprintf_r+0x156>
 8025da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8025da8:	4604      	mov	r4, r0
 8025daa:	2301      	movs	r3, #1
 8025dac:	e7f0      	b.n	8025d90 <_vfiprintf_r+0x1b8>
 8025dae:	ab03      	add	r3, sp, #12
 8025db0:	9300      	str	r3, [sp, #0]
 8025db2:	462a      	mov	r2, r5
 8025db4:	4b12      	ldr	r3, [pc, #72]	@ (8025e00 <_vfiprintf_r+0x228>)
 8025db6:	a904      	add	r1, sp, #16
 8025db8:	4630      	mov	r0, r6
 8025dba:	f3af 8000 	nop.w
 8025dbe:	4607      	mov	r7, r0
 8025dc0:	1c78      	adds	r0, r7, #1
 8025dc2:	d1d6      	bne.n	8025d72 <_vfiprintf_r+0x19a>
 8025dc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025dc6:	07d9      	lsls	r1, r3, #31
 8025dc8:	d405      	bmi.n	8025dd6 <_vfiprintf_r+0x1fe>
 8025dca:	89ab      	ldrh	r3, [r5, #12]
 8025dcc:	059a      	lsls	r2, r3, #22
 8025dce:	d402      	bmi.n	8025dd6 <_vfiprintf_r+0x1fe>
 8025dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025dd2:	f7ff fe21 	bl	8025a18 <__retarget_lock_release_recursive>
 8025dd6:	89ab      	ldrh	r3, [r5, #12]
 8025dd8:	065b      	lsls	r3, r3, #25
 8025dda:	f53f af1f 	bmi.w	8025c1c <_vfiprintf_r+0x44>
 8025dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025de0:	e71e      	b.n	8025c20 <_vfiprintf_r+0x48>
 8025de2:	ab03      	add	r3, sp, #12
 8025de4:	9300      	str	r3, [sp, #0]
 8025de6:	462a      	mov	r2, r5
 8025de8:	4b05      	ldr	r3, [pc, #20]	@ (8025e00 <_vfiprintf_r+0x228>)
 8025dea:	a904      	add	r1, sp, #16
 8025dec:	4630      	mov	r0, r6
 8025dee:	f000 f879 	bl	8025ee4 <_printf_i>
 8025df2:	e7e4      	b.n	8025dbe <_vfiprintf_r+0x1e6>
 8025df4:	08029bc8 	.word	0x08029bc8
 8025df8:	08029bd2 	.word	0x08029bd2
 8025dfc:	00000000 	.word	0x00000000
 8025e00:	08025bb3 	.word	0x08025bb3
 8025e04:	08029bce 	.word	0x08029bce

08025e08 <_printf_common>:
 8025e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025e0c:	4616      	mov	r6, r2
 8025e0e:	4698      	mov	r8, r3
 8025e10:	688a      	ldr	r2, [r1, #8]
 8025e12:	690b      	ldr	r3, [r1, #16]
 8025e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025e18:	4293      	cmp	r3, r2
 8025e1a:	bfb8      	it	lt
 8025e1c:	4613      	movlt	r3, r2
 8025e1e:	6033      	str	r3, [r6, #0]
 8025e20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8025e24:	4607      	mov	r7, r0
 8025e26:	460c      	mov	r4, r1
 8025e28:	b10a      	cbz	r2, 8025e2e <_printf_common+0x26>
 8025e2a:	3301      	adds	r3, #1
 8025e2c:	6033      	str	r3, [r6, #0]
 8025e2e:	6823      	ldr	r3, [r4, #0]
 8025e30:	0699      	lsls	r1, r3, #26
 8025e32:	bf42      	ittt	mi
 8025e34:	6833      	ldrmi	r3, [r6, #0]
 8025e36:	3302      	addmi	r3, #2
 8025e38:	6033      	strmi	r3, [r6, #0]
 8025e3a:	6825      	ldr	r5, [r4, #0]
 8025e3c:	f015 0506 	ands.w	r5, r5, #6
 8025e40:	d106      	bne.n	8025e50 <_printf_common+0x48>
 8025e42:	f104 0a19 	add.w	sl, r4, #25
 8025e46:	68e3      	ldr	r3, [r4, #12]
 8025e48:	6832      	ldr	r2, [r6, #0]
 8025e4a:	1a9b      	subs	r3, r3, r2
 8025e4c:	42ab      	cmp	r3, r5
 8025e4e:	dc26      	bgt.n	8025e9e <_printf_common+0x96>
 8025e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8025e54:	6822      	ldr	r2, [r4, #0]
 8025e56:	3b00      	subs	r3, #0
 8025e58:	bf18      	it	ne
 8025e5a:	2301      	movne	r3, #1
 8025e5c:	0692      	lsls	r2, r2, #26
 8025e5e:	d42b      	bmi.n	8025eb8 <_printf_common+0xb0>
 8025e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8025e64:	4641      	mov	r1, r8
 8025e66:	4638      	mov	r0, r7
 8025e68:	47c8      	blx	r9
 8025e6a:	3001      	adds	r0, #1
 8025e6c:	d01e      	beq.n	8025eac <_printf_common+0xa4>
 8025e6e:	6823      	ldr	r3, [r4, #0]
 8025e70:	6922      	ldr	r2, [r4, #16]
 8025e72:	f003 0306 	and.w	r3, r3, #6
 8025e76:	2b04      	cmp	r3, #4
 8025e78:	bf02      	ittt	eq
 8025e7a:	68e5      	ldreq	r5, [r4, #12]
 8025e7c:	6833      	ldreq	r3, [r6, #0]
 8025e7e:	1aed      	subeq	r5, r5, r3
 8025e80:	68a3      	ldr	r3, [r4, #8]
 8025e82:	bf0c      	ite	eq
 8025e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025e88:	2500      	movne	r5, #0
 8025e8a:	4293      	cmp	r3, r2
 8025e8c:	bfc4      	itt	gt
 8025e8e:	1a9b      	subgt	r3, r3, r2
 8025e90:	18ed      	addgt	r5, r5, r3
 8025e92:	2600      	movs	r6, #0
 8025e94:	341a      	adds	r4, #26
 8025e96:	42b5      	cmp	r5, r6
 8025e98:	d11a      	bne.n	8025ed0 <_printf_common+0xc8>
 8025e9a:	2000      	movs	r0, #0
 8025e9c:	e008      	b.n	8025eb0 <_printf_common+0xa8>
 8025e9e:	2301      	movs	r3, #1
 8025ea0:	4652      	mov	r2, sl
 8025ea2:	4641      	mov	r1, r8
 8025ea4:	4638      	mov	r0, r7
 8025ea6:	47c8      	blx	r9
 8025ea8:	3001      	adds	r0, #1
 8025eaa:	d103      	bne.n	8025eb4 <_printf_common+0xac>
 8025eac:	f04f 30ff 	mov.w	r0, #4294967295
 8025eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025eb4:	3501      	adds	r5, #1
 8025eb6:	e7c6      	b.n	8025e46 <_printf_common+0x3e>
 8025eb8:	18e1      	adds	r1, r4, r3
 8025eba:	1c5a      	adds	r2, r3, #1
 8025ebc:	2030      	movs	r0, #48	@ 0x30
 8025ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8025ec2:	4422      	add	r2, r4
 8025ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8025ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8025ecc:	3302      	adds	r3, #2
 8025ece:	e7c7      	b.n	8025e60 <_printf_common+0x58>
 8025ed0:	2301      	movs	r3, #1
 8025ed2:	4622      	mov	r2, r4
 8025ed4:	4641      	mov	r1, r8
 8025ed6:	4638      	mov	r0, r7
 8025ed8:	47c8      	blx	r9
 8025eda:	3001      	adds	r0, #1
 8025edc:	d0e6      	beq.n	8025eac <_printf_common+0xa4>
 8025ede:	3601      	adds	r6, #1
 8025ee0:	e7d9      	b.n	8025e96 <_printf_common+0x8e>
	...

08025ee4 <_printf_i>:
 8025ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025ee8:	7e0f      	ldrb	r7, [r1, #24]
 8025eea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8025eec:	2f78      	cmp	r7, #120	@ 0x78
 8025eee:	4691      	mov	r9, r2
 8025ef0:	4680      	mov	r8, r0
 8025ef2:	460c      	mov	r4, r1
 8025ef4:	469a      	mov	sl, r3
 8025ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8025efa:	d807      	bhi.n	8025f0c <_printf_i+0x28>
 8025efc:	2f62      	cmp	r7, #98	@ 0x62
 8025efe:	d80a      	bhi.n	8025f16 <_printf_i+0x32>
 8025f00:	2f00      	cmp	r7, #0
 8025f02:	f000 80d2 	beq.w	80260aa <_printf_i+0x1c6>
 8025f06:	2f58      	cmp	r7, #88	@ 0x58
 8025f08:	f000 80b9 	beq.w	802607e <_printf_i+0x19a>
 8025f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8025f14:	e03a      	b.n	8025f8c <_printf_i+0xa8>
 8025f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8025f1a:	2b15      	cmp	r3, #21
 8025f1c:	d8f6      	bhi.n	8025f0c <_printf_i+0x28>
 8025f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8025f24 <_printf_i+0x40>)
 8025f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025f24:	08025f7d 	.word	0x08025f7d
 8025f28:	08025f91 	.word	0x08025f91
 8025f2c:	08025f0d 	.word	0x08025f0d
 8025f30:	08025f0d 	.word	0x08025f0d
 8025f34:	08025f0d 	.word	0x08025f0d
 8025f38:	08025f0d 	.word	0x08025f0d
 8025f3c:	08025f91 	.word	0x08025f91
 8025f40:	08025f0d 	.word	0x08025f0d
 8025f44:	08025f0d 	.word	0x08025f0d
 8025f48:	08025f0d 	.word	0x08025f0d
 8025f4c:	08025f0d 	.word	0x08025f0d
 8025f50:	08026091 	.word	0x08026091
 8025f54:	08025fbb 	.word	0x08025fbb
 8025f58:	0802604b 	.word	0x0802604b
 8025f5c:	08025f0d 	.word	0x08025f0d
 8025f60:	08025f0d 	.word	0x08025f0d
 8025f64:	080260b3 	.word	0x080260b3
 8025f68:	08025f0d 	.word	0x08025f0d
 8025f6c:	08025fbb 	.word	0x08025fbb
 8025f70:	08025f0d 	.word	0x08025f0d
 8025f74:	08025f0d 	.word	0x08025f0d
 8025f78:	08026053 	.word	0x08026053
 8025f7c:	6833      	ldr	r3, [r6, #0]
 8025f7e:	1d1a      	adds	r2, r3, #4
 8025f80:	681b      	ldr	r3, [r3, #0]
 8025f82:	6032      	str	r2, [r6, #0]
 8025f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8025f8c:	2301      	movs	r3, #1
 8025f8e:	e09d      	b.n	80260cc <_printf_i+0x1e8>
 8025f90:	6833      	ldr	r3, [r6, #0]
 8025f92:	6820      	ldr	r0, [r4, #0]
 8025f94:	1d19      	adds	r1, r3, #4
 8025f96:	6031      	str	r1, [r6, #0]
 8025f98:	0606      	lsls	r6, r0, #24
 8025f9a:	d501      	bpl.n	8025fa0 <_printf_i+0xbc>
 8025f9c:	681d      	ldr	r5, [r3, #0]
 8025f9e:	e003      	b.n	8025fa8 <_printf_i+0xc4>
 8025fa0:	0645      	lsls	r5, r0, #25
 8025fa2:	d5fb      	bpl.n	8025f9c <_printf_i+0xb8>
 8025fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8025fa8:	2d00      	cmp	r5, #0
 8025faa:	da03      	bge.n	8025fb4 <_printf_i+0xd0>
 8025fac:	232d      	movs	r3, #45	@ 0x2d
 8025fae:	426d      	negs	r5, r5
 8025fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025fb4:	4859      	ldr	r0, [pc, #356]	@ (802611c <_printf_i+0x238>)
 8025fb6:	230a      	movs	r3, #10
 8025fb8:	e011      	b.n	8025fde <_printf_i+0xfa>
 8025fba:	6821      	ldr	r1, [r4, #0]
 8025fbc:	6833      	ldr	r3, [r6, #0]
 8025fbe:	0608      	lsls	r0, r1, #24
 8025fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8025fc4:	d402      	bmi.n	8025fcc <_printf_i+0xe8>
 8025fc6:	0649      	lsls	r1, r1, #25
 8025fc8:	bf48      	it	mi
 8025fca:	b2ad      	uxthmi	r5, r5
 8025fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8025fce:	4853      	ldr	r0, [pc, #332]	@ (802611c <_printf_i+0x238>)
 8025fd0:	6033      	str	r3, [r6, #0]
 8025fd2:	bf14      	ite	ne
 8025fd4:	230a      	movne	r3, #10
 8025fd6:	2308      	moveq	r3, #8
 8025fd8:	2100      	movs	r1, #0
 8025fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8025fde:	6866      	ldr	r6, [r4, #4]
 8025fe0:	60a6      	str	r6, [r4, #8]
 8025fe2:	2e00      	cmp	r6, #0
 8025fe4:	bfa2      	ittt	ge
 8025fe6:	6821      	ldrge	r1, [r4, #0]
 8025fe8:	f021 0104 	bicge.w	r1, r1, #4
 8025fec:	6021      	strge	r1, [r4, #0]
 8025fee:	b90d      	cbnz	r5, 8025ff4 <_printf_i+0x110>
 8025ff0:	2e00      	cmp	r6, #0
 8025ff2:	d04b      	beq.n	802608c <_printf_i+0x1a8>
 8025ff4:	4616      	mov	r6, r2
 8025ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8025ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8025ffe:	5dc7      	ldrb	r7, [r0, r7]
 8026000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026004:	462f      	mov	r7, r5
 8026006:	42bb      	cmp	r3, r7
 8026008:	460d      	mov	r5, r1
 802600a:	d9f4      	bls.n	8025ff6 <_printf_i+0x112>
 802600c:	2b08      	cmp	r3, #8
 802600e:	d10b      	bne.n	8026028 <_printf_i+0x144>
 8026010:	6823      	ldr	r3, [r4, #0]
 8026012:	07df      	lsls	r7, r3, #31
 8026014:	d508      	bpl.n	8026028 <_printf_i+0x144>
 8026016:	6923      	ldr	r3, [r4, #16]
 8026018:	6861      	ldr	r1, [r4, #4]
 802601a:	4299      	cmp	r1, r3
 802601c:	bfde      	ittt	le
 802601e:	2330      	movle	r3, #48	@ 0x30
 8026020:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026024:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026028:	1b92      	subs	r2, r2, r6
 802602a:	6122      	str	r2, [r4, #16]
 802602c:	f8cd a000 	str.w	sl, [sp]
 8026030:	464b      	mov	r3, r9
 8026032:	aa03      	add	r2, sp, #12
 8026034:	4621      	mov	r1, r4
 8026036:	4640      	mov	r0, r8
 8026038:	f7ff fee6 	bl	8025e08 <_printf_common>
 802603c:	3001      	adds	r0, #1
 802603e:	d14a      	bne.n	80260d6 <_printf_i+0x1f2>
 8026040:	f04f 30ff 	mov.w	r0, #4294967295
 8026044:	b004      	add	sp, #16
 8026046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802604a:	6823      	ldr	r3, [r4, #0]
 802604c:	f043 0320 	orr.w	r3, r3, #32
 8026050:	6023      	str	r3, [r4, #0]
 8026052:	4833      	ldr	r0, [pc, #204]	@ (8026120 <_printf_i+0x23c>)
 8026054:	2778      	movs	r7, #120	@ 0x78
 8026056:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802605a:	6823      	ldr	r3, [r4, #0]
 802605c:	6831      	ldr	r1, [r6, #0]
 802605e:	061f      	lsls	r7, r3, #24
 8026060:	f851 5b04 	ldr.w	r5, [r1], #4
 8026064:	d402      	bmi.n	802606c <_printf_i+0x188>
 8026066:	065f      	lsls	r7, r3, #25
 8026068:	bf48      	it	mi
 802606a:	b2ad      	uxthmi	r5, r5
 802606c:	6031      	str	r1, [r6, #0]
 802606e:	07d9      	lsls	r1, r3, #31
 8026070:	bf44      	itt	mi
 8026072:	f043 0320 	orrmi.w	r3, r3, #32
 8026076:	6023      	strmi	r3, [r4, #0]
 8026078:	b11d      	cbz	r5, 8026082 <_printf_i+0x19e>
 802607a:	2310      	movs	r3, #16
 802607c:	e7ac      	b.n	8025fd8 <_printf_i+0xf4>
 802607e:	4827      	ldr	r0, [pc, #156]	@ (802611c <_printf_i+0x238>)
 8026080:	e7e9      	b.n	8026056 <_printf_i+0x172>
 8026082:	6823      	ldr	r3, [r4, #0]
 8026084:	f023 0320 	bic.w	r3, r3, #32
 8026088:	6023      	str	r3, [r4, #0]
 802608a:	e7f6      	b.n	802607a <_printf_i+0x196>
 802608c:	4616      	mov	r6, r2
 802608e:	e7bd      	b.n	802600c <_printf_i+0x128>
 8026090:	6833      	ldr	r3, [r6, #0]
 8026092:	6825      	ldr	r5, [r4, #0]
 8026094:	6961      	ldr	r1, [r4, #20]
 8026096:	1d18      	adds	r0, r3, #4
 8026098:	6030      	str	r0, [r6, #0]
 802609a:	062e      	lsls	r6, r5, #24
 802609c:	681b      	ldr	r3, [r3, #0]
 802609e:	d501      	bpl.n	80260a4 <_printf_i+0x1c0>
 80260a0:	6019      	str	r1, [r3, #0]
 80260a2:	e002      	b.n	80260aa <_printf_i+0x1c6>
 80260a4:	0668      	lsls	r0, r5, #25
 80260a6:	d5fb      	bpl.n	80260a0 <_printf_i+0x1bc>
 80260a8:	8019      	strh	r1, [r3, #0]
 80260aa:	2300      	movs	r3, #0
 80260ac:	6123      	str	r3, [r4, #16]
 80260ae:	4616      	mov	r6, r2
 80260b0:	e7bc      	b.n	802602c <_printf_i+0x148>
 80260b2:	6833      	ldr	r3, [r6, #0]
 80260b4:	1d1a      	adds	r2, r3, #4
 80260b6:	6032      	str	r2, [r6, #0]
 80260b8:	681e      	ldr	r6, [r3, #0]
 80260ba:	6862      	ldr	r2, [r4, #4]
 80260bc:	2100      	movs	r1, #0
 80260be:	4630      	mov	r0, r6
 80260c0:	f7da f90e 	bl	80002e0 <memchr>
 80260c4:	b108      	cbz	r0, 80260ca <_printf_i+0x1e6>
 80260c6:	1b80      	subs	r0, r0, r6
 80260c8:	6060      	str	r0, [r4, #4]
 80260ca:	6863      	ldr	r3, [r4, #4]
 80260cc:	6123      	str	r3, [r4, #16]
 80260ce:	2300      	movs	r3, #0
 80260d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80260d4:	e7aa      	b.n	802602c <_printf_i+0x148>
 80260d6:	6923      	ldr	r3, [r4, #16]
 80260d8:	4632      	mov	r2, r6
 80260da:	4649      	mov	r1, r9
 80260dc:	4640      	mov	r0, r8
 80260de:	47d0      	blx	sl
 80260e0:	3001      	adds	r0, #1
 80260e2:	d0ad      	beq.n	8026040 <_printf_i+0x15c>
 80260e4:	6823      	ldr	r3, [r4, #0]
 80260e6:	079b      	lsls	r3, r3, #30
 80260e8:	d413      	bmi.n	8026112 <_printf_i+0x22e>
 80260ea:	68e0      	ldr	r0, [r4, #12]
 80260ec:	9b03      	ldr	r3, [sp, #12]
 80260ee:	4298      	cmp	r0, r3
 80260f0:	bfb8      	it	lt
 80260f2:	4618      	movlt	r0, r3
 80260f4:	e7a6      	b.n	8026044 <_printf_i+0x160>
 80260f6:	2301      	movs	r3, #1
 80260f8:	4632      	mov	r2, r6
 80260fa:	4649      	mov	r1, r9
 80260fc:	4640      	mov	r0, r8
 80260fe:	47d0      	blx	sl
 8026100:	3001      	adds	r0, #1
 8026102:	d09d      	beq.n	8026040 <_printf_i+0x15c>
 8026104:	3501      	adds	r5, #1
 8026106:	68e3      	ldr	r3, [r4, #12]
 8026108:	9903      	ldr	r1, [sp, #12]
 802610a:	1a5b      	subs	r3, r3, r1
 802610c:	42ab      	cmp	r3, r5
 802610e:	dcf2      	bgt.n	80260f6 <_printf_i+0x212>
 8026110:	e7eb      	b.n	80260ea <_printf_i+0x206>
 8026112:	2500      	movs	r5, #0
 8026114:	f104 0619 	add.w	r6, r4, #25
 8026118:	e7f5      	b.n	8026106 <_printf_i+0x222>
 802611a:	bf00      	nop
 802611c:	08029bd9 	.word	0x08029bd9
 8026120:	08029bea 	.word	0x08029bea

08026124 <__sflush_r>:
 8026124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802612c:	0716      	lsls	r6, r2, #28
 802612e:	4605      	mov	r5, r0
 8026130:	460c      	mov	r4, r1
 8026132:	d454      	bmi.n	80261de <__sflush_r+0xba>
 8026134:	684b      	ldr	r3, [r1, #4]
 8026136:	2b00      	cmp	r3, #0
 8026138:	dc02      	bgt.n	8026140 <__sflush_r+0x1c>
 802613a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802613c:	2b00      	cmp	r3, #0
 802613e:	dd48      	ble.n	80261d2 <__sflush_r+0xae>
 8026140:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026142:	2e00      	cmp	r6, #0
 8026144:	d045      	beq.n	80261d2 <__sflush_r+0xae>
 8026146:	2300      	movs	r3, #0
 8026148:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802614c:	682f      	ldr	r7, [r5, #0]
 802614e:	6a21      	ldr	r1, [r4, #32]
 8026150:	602b      	str	r3, [r5, #0]
 8026152:	d030      	beq.n	80261b6 <__sflush_r+0x92>
 8026154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8026156:	89a3      	ldrh	r3, [r4, #12]
 8026158:	0759      	lsls	r1, r3, #29
 802615a:	d505      	bpl.n	8026168 <__sflush_r+0x44>
 802615c:	6863      	ldr	r3, [r4, #4]
 802615e:	1ad2      	subs	r2, r2, r3
 8026160:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8026162:	b10b      	cbz	r3, 8026168 <__sflush_r+0x44>
 8026164:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8026166:	1ad2      	subs	r2, r2, r3
 8026168:	2300      	movs	r3, #0
 802616a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802616c:	6a21      	ldr	r1, [r4, #32]
 802616e:	4628      	mov	r0, r5
 8026170:	47b0      	blx	r6
 8026172:	1c43      	adds	r3, r0, #1
 8026174:	89a3      	ldrh	r3, [r4, #12]
 8026176:	d106      	bne.n	8026186 <__sflush_r+0x62>
 8026178:	6829      	ldr	r1, [r5, #0]
 802617a:	291d      	cmp	r1, #29
 802617c:	d82b      	bhi.n	80261d6 <__sflush_r+0xb2>
 802617e:	4a2a      	ldr	r2, [pc, #168]	@ (8026228 <__sflush_r+0x104>)
 8026180:	410a      	asrs	r2, r1
 8026182:	07d6      	lsls	r6, r2, #31
 8026184:	d427      	bmi.n	80261d6 <__sflush_r+0xb2>
 8026186:	2200      	movs	r2, #0
 8026188:	6062      	str	r2, [r4, #4]
 802618a:	04d9      	lsls	r1, r3, #19
 802618c:	6922      	ldr	r2, [r4, #16]
 802618e:	6022      	str	r2, [r4, #0]
 8026190:	d504      	bpl.n	802619c <__sflush_r+0x78>
 8026192:	1c42      	adds	r2, r0, #1
 8026194:	d101      	bne.n	802619a <__sflush_r+0x76>
 8026196:	682b      	ldr	r3, [r5, #0]
 8026198:	b903      	cbnz	r3, 802619c <__sflush_r+0x78>
 802619a:	6560      	str	r0, [r4, #84]	@ 0x54
 802619c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802619e:	602f      	str	r7, [r5, #0]
 80261a0:	b1b9      	cbz	r1, 80261d2 <__sflush_r+0xae>
 80261a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80261a6:	4299      	cmp	r1, r3
 80261a8:	d002      	beq.n	80261b0 <__sflush_r+0x8c>
 80261aa:	4628      	mov	r0, r5
 80261ac:	f7ff fca0 	bl	8025af0 <_free_r>
 80261b0:	2300      	movs	r3, #0
 80261b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80261b4:	e00d      	b.n	80261d2 <__sflush_r+0xae>
 80261b6:	2301      	movs	r3, #1
 80261b8:	4628      	mov	r0, r5
 80261ba:	47b0      	blx	r6
 80261bc:	4602      	mov	r2, r0
 80261be:	1c50      	adds	r0, r2, #1
 80261c0:	d1c9      	bne.n	8026156 <__sflush_r+0x32>
 80261c2:	682b      	ldr	r3, [r5, #0]
 80261c4:	2b00      	cmp	r3, #0
 80261c6:	d0c6      	beq.n	8026156 <__sflush_r+0x32>
 80261c8:	2b1d      	cmp	r3, #29
 80261ca:	d001      	beq.n	80261d0 <__sflush_r+0xac>
 80261cc:	2b16      	cmp	r3, #22
 80261ce:	d11e      	bne.n	802620e <__sflush_r+0xea>
 80261d0:	602f      	str	r7, [r5, #0]
 80261d2:	2000      	movs	r0, #0
 80261d4:	e022      	b.n	802621c <__sflush_r+0xf8>
 80261d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80261da:	b21b      	sxth	r3, r3
 80261dc:	e01b      	b.n	8026216 <__sflush_r+0xf2>
 80261de:	690f      	ldr	r7, [r1, #16]
 80261e0:	2f00      	cmp	r7, #0
 80261e2:	d0f6      	beq.n	80261d2 <__sflush_r+0xae>
 80261e4:	0793      	lsls	r3, r2, #30
 80261e6:	680e      	ldr	r6, [r1, #0]
 80261e8:	bf08      	it	eq
 80261ea:	694b      	ldreq	r3, [r1, #20]
 80261ec:	600f      	str	r7, [r1, #0]
 80261ee:	bf18      	it	ne
 80261f0:	2300      	movne	r3, #0
 80261f2:	eba6 0807 	sub.w	r8, r6, r7
 80261f6:	608b      	str	r3, [r1, #8]
 80261f8:	f1b8 0f00 	cmp.w	r8, #0
 80261fc:	dde9      	ble.n	80261d2 <__sflush_r+0xae>
 80261fe:	6a21      	ldr	r1, [r4, #32]
 8026200:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8026202:	4643      	mov	r3, r8
 8026204:	463a      	mov	r2, r7
 8026206:	4628      	mov	r0, r5
 8026208:	47b0      	blx	r6
 802620a:	2800      	cmp	r0, #0
 802620c:	dc08      	bgt.n	8026220 <__sflush_r+0xfc>
 802620e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026216:	81a3      	strh	r3, [r4, #12]
 8026218:	f04f 30ff 	mov.w	r0, #4294967295
 802621c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026220:	4407      	add	r7, r0
 8026222:	eba8 0800 	sub.w	r8, r8, r0
 8026226:	e7e7      	b.n	80261f8 <__sflush_r+0xd4>
 8026228:	dfbffffe 	.word	0xdfbffffe

0802622c <_fflush_r>:
 802622c:	b538      	push	{r3, r4, r5, lr}
 802622e:	690b      	ldr	r3, [r1, #16]
 8026230:	4605      	mov	r5, r0
 8026232:	460c      	mov	r4, r1
 8026234:	b913      	cbnz	r3, 802623c <_fflush_r+0x10>
 8026236:	2500      	movs	r5, #0
 8026238:	4628      	mov	r0, r5
 802623a:	bd38      	pop	{r3, r4, r5, pc}
 802623c:	b118      	cbz	r0, 8026246 <_fflush_r+0x1a>
 802623e:	6a03      	ldr	r3, [r0, #32]
 8026240:	b90b      	cbnz	r3, 8026246 <_fflush_r+0x1a>
 8026242:	f7ff f9e9 	bl	8025618 <__sinit>
 8026246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802624a:	2b00      	cmp	r3, #0
 802624c:	d0f3      	beq.n	8026236 <_fflush_r+0xa>
 802624e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026250:	07d0      	lsls	r0, r2, #31
 8026252:	d404      	bmi.n	802625e <_fflush_r+0x32>
 8026254:	0599      	lsls	r1, r3, #22
 8026256:	d402      	bmi.n	802625e <_fflush_r+0x32>
 8026258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802625a:	f7ff fbdc 	bl	8025a16 <__retarget_lock_acquire_recursive>
 802625e:	4628      	mov	r0, r5
 8026260:	4621      	mov	r1, r4
 8026262:	f7ff ff5f 	bl	8026124 <__sflush_r>
 8026266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026268:	07da      	lsls	r2, r3, #31
 802626a:	4605      	mov	r5, r0
 802626c:	d4e4      	bmi.n	8026238 <_fflush_r+0xc>
 802626e:	89a3      	ldrh	r3, [r4, #12]
 8026270:	059b      	lsls	r3, r3, #22
 8026272:	d4e1      	bmi.n	8026238 <_fflush_r+0xc>
 8026274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026276:	f7ff fbcf 	bl	8025a18 <__retarget_lock_release_recursive>
 802627a:	e7dd      	b.n	8026238 <_fflush_r+0xc>

0802627c <__swhatbuf_r>:
 802627c:	b570      	push	{r4, r5, r6, lr}
 802627e:	460c      	mov	r4, r1
 8026280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026284:	2900      	cmp	r1, #0
 8026286:	b096      	sub	sp, #88	@ 0x58
 8026288:	4615      	mov	r5, r2
 802628a:	461e      	mov	r6, r3
 802628c:	da0d      	bge.n	80262aa <__swhatbuf_r+0x2e>
 802628e:	89a3      	ldrh	r3, [r4, #12]
 8026290:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026294:	f04f 0100 	mov.w	r1, #0
 8026298:	bf14      	ite	ne
 802629a:	2340      	movne	r3, #64	@ 0x40
 802629c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80262a0:	2000      	movs	r0, #0
 80262a2:	6031      	str	r1, [r6, #0]
 80262a4:	602b      	str	r3, [r5, #0]
 80262a6:	b016      	add	sp, #88	@ 0x58
 80262a8:	bd70      	pop	{r4, r5, r6, pc}
 80262aa:	466a      	mov	r2, sp
 80262ac:	f000 f848 	bl	8026340 <_fstat_r>
 80262b0:	2800      	cmp	r0, #0
 80262b2:	dbec      	blt.n	802628e <__swhatbuf_r+0x12>
 80262b4:	9901      	ldr	r1, [sp, #4]
 80262b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80262ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80262be:	4259      	negs	r1, r3
 80262c0:	4159      	adcs	r1, r3
 80262c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80262c6:	e7eb      	b.n	80262a0 <__swhatbuf_r+0x24>

080262c8 <__smakebuf_r>:
 80262c8:	898b      	ldrh	r3, [r1, #12]
 80262ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80262cc:	079d      	lsls	r5, r3, #30
 80262ce:	4606      	mov	r6, r0
 80262d0:	460c      	mov	r4, r1
 80262d2:	d507      	bpl.n	80262e4 <__smakebuf_r+0x1c>
 80262d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80262d8:	6023      	str	r3, [r4, #0]
 80262da:	6123      	str	r3, [r4, #16]
 80262dc:	2301      	movs	r3, #1
 80262de:	6163      	str	r3, [r4, #20]
 80262e0:	b003      	add	sp, #12
 80262e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80262e4:	ab01      	add	r3, sp, #4
 80262e6:	466a      	mov	r2, sp
 80262e8:	f7ff ffc8 	bl	802627c <__swhatbuf_r>
 80262ec:	9f00      	ldr	r7, [sp, #0]
 80262ee:	4605      	mov	r5, r0
 80262f0:	4639      	mov	r1, r7
 80262f2:	4630      	mov	r0, r6
 80262f4:	f7ff f86a 	bl	80253cc <_malloc_r>
 80262f8:	b948      	cbnz	r0, 802630e <__smakebuf_r+0x46>
 80262fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80262fe:	059a      	lsls	r2, r3, #22
 8026300:	d4ee      	bmi.n	80262e0 <__smakebuf_r+0x18>
 8026302:	f023 0303 	bic.w	r3, r3, #3
 8026306:	f043 0302 	orr.w	r3, r3, #2
 802630a:	81a3      	strh	r3, [r4, #12]
 802630c:	e7e2      	b.n	80262d4 <__smakebuf_r+0xc>
 802630e:	89a3      	ldrh	r3, [r4, #12]
 8026310:	6020      	str	r0, [r4, #0]
 8026312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026316:	81a3      	strh	r3, [r4, #12]
 8026318:	9b01      	ldr	r3, [sp, #4]
 802631a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802631e:	b15b      	cbz	r3, 8026338 <__smakebuf_r+0x70>
 8026320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026324:	4630      	mov	r0, r6
 8026326:	f000 f81d 	bl	8026364 <_isatty_r>
 802632a:	b128      	cbz	r0, 8026338 <__smakebuf_r+0x70>
 802632c:	89a3      	ldrh	r3, [r4, #12]
 802632e:	f023 0303 	bic.w	r3, r3, #3
 8026332:	f043 0301 	orr.w	r3, r3, #1
 8026336:	81a3      	strh	r3, [r4, #12]
 8026338:	89a3      	ldrh	r3, [r4, #12]
 802633a:	431d      	orrs	r5, r3
 802633c:	81a5      	strh	r5, [r4, #12]
 802633e:	e7cf      	b.n	80262e0 <__smakebuf_r+0x18>

08026340 <_fstat_r>:
 8026340:	b538      	push	{r3, r4, r5, lr}
 8026342:	4d07      	ldr	r5, [pc, #28]	@ (8026360 <_fstat_r+0x20>)
 8026344:	2300      	movs	r3, #0
 8026346:	4604      	mov	r4, r0
 8026348:	4608      	mov	r0, r1
 802634a:	4611      	mov	r1, r2
 802634c:	602b      	str	r3, [r5, #0]
 802634e:	f7db fc6a 	bl	8001c26 <_fstat>
 8026352:	1c43      	adds	r3, r0, #1
 8026354:	d102      	bne.n	802635c <_fstat_r+0x1c>
 8026356:	682b      	ldr	r3, [r5, #0]
 8026358:	b103      	cbz	r3, 802635c <_fstat_r+0x1c>
 802635a:	6023      	str	r3, [r4, #0]
 802635c:	bd38      	pop	{r3, r4, r5, pc}
 802635e:	bf00      	nop
 8026360:	240299ac 	.word	0x240299ac

08026364 <_isatty_r>:
 8026364:	b538      	push	{r3, r4, r5, lr}
 8026366:	4d06      	ldr	r5, [pc, #24]	@ (8026380 <_isatty_r+0x1c>)
 8026368:	2300      	movs	r3, #0
 802636a:	4604      	mov	r4, r0
 802636c:	4608      	mov	r0, r1
 802636e:	602b      	str	r3, [r5, #0]
 8026370:	f7db fc5e 	bl	8001c30 <_isatty>
 8026374:	1c43      	adds	r3, r0, #1
 8026376:	d102      	bne.n	802637e <_isatty_r+0x1a>
 8026378:	682b      	ldr	r3, [r5, #0]
 802637a:	b103      	cbz	r3, 802637e <_isatty_r+0x1a>
 802637c:	6023      	str	r3, [r4, #0]
 802637e:	bd38      	pop	{r3, r4, r5, pc}
 8026380:	240299ac 	.word	0x240299ac

08026384 <_init>:
 8026384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026386:	bf00      	nop
 8026388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802638a:	bc08      	pop	{r3}
 802638c:	469e      	mov	lr, r3
 802638e:	4770      	bx	lr

08026390 <_fini>:
 8026390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026392:	bf00      	nop
 8026394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026396:	bc08      	pop	{r3}
 8026398:	469e      	mov	lr, r3
 802639a:	4770      	bx	lr
